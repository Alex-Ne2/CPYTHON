diff --git a/Lib/test/test_os.py b/Lib/test/test_os.py
index 959a1c4ba4..e8e8419a7b 100644
--- a/Lib/test/test_os.py
+++ b/Lib/test/test_os.py
@@ -1026,9 +1026,19 @@ class EnvironTests(mapping_tests.BasicTestMappingProtocol):
     def test_iter_error_when_changing_os_environ_values(self):
         self._test_environ_iteration(os.environ.values())
 
+    def _test_underlying_process_env(self, var, expected):
+        if not (unix_shell and os.path.exists(unix_shell)):
+            return
+
+        with os.popen(f"{unix_shell} -c 'echo ${var}'") as popen:
+            value = popen.read().strip()
+
+        self.assertEqual(expected, value)
+
     def test_or_operator(self):
         overridden_key = '_TEST_VAR_'
-        os.environ[overridden_key] = 'original_value'
+        original_value = 'original_value'
+        os.environ[overridden_key] = original_value
 
         new_vars_dict = {'_A_': '1', '_B_': '2', overridden_key: '3'}
         expected = dict(os.environ)
@@ -1041,6 +1051,10 @@ class EnvironTests(mapping_tests.BasicTestMappingProtocol):
         new_vars_items = new_vars_dict.items()
         self.assertIs(NotImplemented, os.environ.__or__(new_vars_items))
 
+        self._test_underlying_process_env('_A_', '')
+        self._test_underlying_process_env('_B_', '')
+        self._test_underlying_process_env(overridden_key, original_value)
+
     def test_ior_operator(self):
         overridden_key = '_TEST_VAR_'
         os.environ[overridden_key] = 'original_value'
@@ -1053,6 +1067,10 @@ class EnvironTests(mapping_tests.BasicTestMappingProtocol):
         self.assertEqual(expected, os.environ)
         self.assertEqual('3', os.environ[overridden_key])
 
+        self._test_underlying_process_env('_A_', '1')
+        self._test_underlying_process_env('_B_', '2')
+        self._test_underlying_process_env(overridden_key, '3')
+
     def test_ior_operator_invalid_dicts(self):
         os_environ_copy = os.environ.copy()
         with self.assertRaises(TypeError):
@@ -1078,6 +1096,10 @@ class EnvironTests(mapping_tests.BasicTestMappingProtocol):
         self.assertEqual(expected, os.environ)
         self.assertEqual('3', os.environ[overridden_key])
 
+        self._test_underlying_process_env('_A_', '1')
+        self._test_underlying_process_env('_B_', '2')
+        self._test_underlying_process_env(overridden_key, '3')
+
     def test_ror_operator(self):
         overridden_key = '_TEST_VAR_'
         original_value = 'original_value'
@@ -1094,6 +1116,10 @@ class EnvironTests(mapping_tests.BasicTestMappingProtocol):
         new_vars_items = new_vars_dict.items()
         self.assertIs(NotImplemented, os.environ.__ror__(new_vars_items))
 
+        self._test_underlying_process_env('_A_', '')
+        self._test_underlying_process_env('_B_', '')
+        self._test_underlying_process_env(overridden_key, original_value)
+
 
 class WalkTests(unittest.TestCase):
     """Tests for os.walk()."""
