****************************
  Python 3.11有什么新变化
****************************

:Release: |release|
:Date: |today|

.. Rules for maintenance:

   * Anyone can add text to this document.  Do not spend very much time
   on the wording of your changes, because your text will probably
   get rewritten to some degree.

   * The maintainer will go through Misc/NEWS periodically and add
   changes; it's therefore more important to add your changes to
   Misc/NEWS than to this file.

   * This is not a complete list of every single change; completeness
   is the purpose of Misc/NEWS.  Some changes I consider too small
   or esoteric to include.  If such a change is added to the text,
   I'll just remove it.  (This is another reason you shouldn't spend
   too much time on writing your addition.)

   * If you want to draw your new text to the attention of the
   maintainer, add 'XXX' to the beginning of the paragraph or
   section.

   * It's OK to just add a fragmentary note about a change.  For
   example: "XXX Describe the transmogrify() function added to the
   socket module."  The maintainer will research the change and
   write the necessary text.

   * You can comment out your additions if you like, but it's not
   necessary (especially when a final release is some months away).

   * Credit the author of a patch or bugfix.   Just the name is
   sufficient; the e-mail address isn't necessary.

   * It's helpful to add the bug/patch number as a comment:

   XXX Describe the transmogrify() function added to the socket
   module.
   (Contributed by P.Y. Developer in :issue:`12345`.)

   This saves the maintainer the effort of going through the Mercurial log
   when researching a change.

This article explains the new features in Python 3.11, compared to 3.10.

For full details, see the :ref:`changelog <changelog>`.

.. note::

   Prerelease users should be aware that this document is currently in draft
   form. It will be updated substantially as Python 3.11 moves towards release,
   so it's worth checking back even after reading earlier versions.


总结 -- 版本亮点
=============================

.. This section singles out the most important changes in Python 3.11.
   Brevity is key.


.. PEP-sized items next.



新特征
============

.. _whatsnew311-pep657:

在回溯中增强错误定位
--------------------------------------

打印回溯时，解释器现在将指向导致错误的确切表达式，而不仅仅是行。例如:

.. code-block:: python

    Traceback (most recent call last):
      File "distance.py", line 11, in <module>
        print(manhattan_distance(p1, p2))
              ^^^^^^^^^^^^^^^^^^^^^^^^^^
      File "distance.py", line 6, in manhattan_distance
        return abs(point_1.x - point_2.x) + abs(point_1.y - point_2.y)
                               ^^^^^^^^^
    AttributeError: 'NoneType' object has no attribute 'x'

先前版本的解释器只会指向一行，这使得哪个对象是 ``None`` 变得不明确。
这些增强的错误在处理深度嵌套的字典对象和多个函数调用时也很有帮助，

.. code-block:: python

    Traceback (most recent call last):
      File "query.py", line 37, in <module>
        magic_arithmetic('foo')
        ^^^^^^^^^^^^^^^^^^^^^^^
      File "query.py", line 18, in magic_arithmetic
        return add_counts(x) / 25
               ^^^^^^^^^^^^^
      File "query.py", line 24, in add_counts
        return 25 + query_user(user1) + query_user(user2)
                    ^^^^^^^^^^^^^^^^^
      File "query.py", line 32, in query_user
        return 1 + query_count(db, response['a']['b']['c']['user'], retry=True)
                                   ~~~~~~~~~~~~~~~~~~^^^^^
    TypeError: 'NoneType' object is not subscriptable

以及复杂的算术表达式:

.. code-block:: python

    Traceback (most recent call last):
      File "calculation.py", line 54, in <module>
        result = (x / y / z) * (a / b / c)
                  ~~~~~~^~~
    ZeroDivisionError: division by zero

看 :pep:`657` 寻找更多信息。 (由 Pablo Galindo, Batuhan Taskaya
和 Ammar Askar 贡献在 :issue:`43950`.)

.. note::
   
  此功能需要在代码对象中存储列位置，这可能会导致已编译 Python 文件的磁盘使用量或解释器内存使用量的小幅增加。
  为了避免存储额外信息和/或停用打印额外回溯信息，可以使用 :option:`-X` ``no_debug_ranges``  命令行标志
  或 :envvar:`PYTHONNODEBUGRANGES` 环境变量。

代码对象的列信息
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

增强回溯功能使用的信息作为通用 API 提供，可用于将字节码指令与源代码相关联。可以使用以下方法检索此信息：

- 在 Python 中 :meth:`codeobject.co_positions` 方法。
- 在 C-API 中 :c:func:`PyCode_Addr2Location` 函数。

:option:`-X` ``no_debug_ranges`` 选项和环境变量
:envvar:`PYTHONNODEBUGRANGES` 可用于禁用该功能。

去 :pep:`657` 查看更多细节。 (由 Pablo Galindo, Batuhan Taskaya
和 Ammar Askar 贡献在 :issue:`43950`.)


其他语言更改
======================

* 现在允许在异步函数中的理解中使用异步理解。外部理解隐式地变为异步。 (由 Serhiy Storchaka 在 :issue:`33346` 贡献。)

* 相应地对于不支持 :term:`context manager` 或 :term:`asynchronous context manager` 协议的对象，
  现在在 :meth:`contextlib.ExitStack.enter_context` 和 :meth:`contextlib.AsyncExitStack.enter_async_context` 中
  引发的是 :exc:`TypeError` 而不是 :exc:`AttributeError` 。
  (由 Serhiy Storchaka 在 :issue:`44471` 贡献。)

* 相应地对于不支持 :term:`context manager` 或 :term:`asynchronous context manager` 协议的对象， 现在在
  :keyword:`with` 和 :keyword:`async with` 语句中引发的是 :exc:`TypeError` 而不是 :exc:`AttributeError` 。
  (由 Serhiy Storchaka 在 :issue:`12022`贡献。)


新模块
===========

* 还没有。


改进的模块
================

fractions
---------

支持 :PEP:`515`-样式的 :class:`~fractions.Fraction` 从
字符串初始化。  (由 Sergey B Kirpichev 在 :issue:`44258`贡献。)


math
----

* 添加 :func:`math.cbrt`: 返回 x 的立方根。
  (由 Ajith Ramachandran 在 :issue:`44357`贡献。)

* 为了与 IEEE 754 规范保持一致，更改了两个 :func:`math.pow` 极端情况的行为。
  操作 ``math.pow(0.0, -math.inf)`` 和 ``math.pow(-0.0, -math.inf)`` 现在返回 ``inf``。
  以前他们报 :exc:`ValueError`。 （由 Mark Dickinson 在 :issue:`44339` 中贡献。）


os
--

* 在 Windows 上, :func:`os.urandom` 使用 ``BCryptGenRandom()`` 代替 ``CryptGenRandom()``
  后者已被弃用。
  (由 Dong-hee Na 在 :issue:`44611`贡献。)


sqlite3
-------

* 您现在可以通过将 :const:`None` 传递给 :meth:`~sqlite3.Connection.set_authorizer` 来禁用授权器。 
  （由 Erlend E. Aasland 在 bpo-44491 中提供。）

* 排序规则名 :meth:`~sqlite3.Connection.create_collation` 现在可以
  包含任意 Unicode 字符了。  带有无效字符的排序规则名
  现在引发 :exc:`UnicodeEncodeError` 而不是 :exc:`sqlite3.ProgrammingError`。
  (由 Erlend E. Aasland 在 :issue:`44688`贡献。)


已移除
=======
* :class:`smtpd.MailmanProxy` 现在已被移除，因为它在某一外部模块 ``mailman`` 情况下无法使用。 (由 Dong-hee Na 在 :issue:`35800` 贡献。)


优化
=============

* Compiler now optimizes simple C-style formatting with literal format
  containing only format codes ``%s``, ``%r`` and ``%a`` and makes it as
  fast as corresponding f-string expression.
  (Contributed by Serhiy Storchaka in :issue:`28307`.)

* "Zero-cost" exceptions are implemented. The cost of ``try`` statements is
  almost eliminated when no exception is raised.
  (Contributed by Mark Shannon in :issue:`40222`.)

* Method calls with keywords are now faster due to bytecode
  changes which avoid creating bound method instances. Previously, this
  optimization was applied only to method calls with purely positional
  arguments.
  (Contributed by Ken Jin and Mark Shannon in :issue:`26110`, based on ideas
  implemented in PyPy.)

* :file:`.pdbrc` 现在使用 ``'utf-8'`` 编码读取。


CPython bytecode changes
========================

* Added a new :opcode:`CALL_METHOD_KW` opcode.  Calls a method in a similar
  fashion as :opcode:`CALL_METHOD`, but also supports keyword arguments.  Works
  in tandem with :opcode:`LOAD_METHOD`.


Build Changes
=============


Deprecated
==========



移除
=======

* The :func:`@asyncio.coroutine <asyncio.coroutine>` :term:`decorator` enabling
  legacy generator-based coroutines to be compatible with async/await code.
  The function has been deprecated since Python 3.8 and the removal was
  initially scheduled for Python 3.10. Use :keyword:`async def` instead.
  (Contributed by Illia Volochii in :issue:`43216`.)

* :class:`asyncio.coroutines.CoroWrapper` used for wrapping legacy
  generator-based coroutine objects in the debug mode.
  (Contributed by Illia Volochii in :issue:`43216`.)

移植到 Python 3.11
======================

This section lists previously described changes and other bugfixes
that may require changes to your code.


 Python API 更改
-------------------------

* Prohibited passing non-:class:`concurrent.futures.ThreadPoolExecutor`
  executors to :meth:`loop.set_default_executor` following a deprecation in
  Python 3.8.
  (Contributed by Illia Volochii in :issue:`43234`.)


C API 更改
=============
* Add a new :c:func:`PyType_GetName` function to get type's short name.
  (Contributed by Hai Shi in :issue:`42035`.)

新特征
------------

移植到 Python 3.11
----------------------

* The :c:func:`PyType_Ready` function now raises an error if a type is defined
  with the :const:`Py_TPFLAGS_HAVE_GC` flag set but has no traverse function
  (:c:member:`PyTypeObject.tp_traverse`).
  (Contributed by Victor Stinner in :issue:`44263`.)

* Heap types with the :const:`Py_TPFLAGS_IMMUTABLETYPE` flag can now inherit
  the :pep:`590` vectorcall protocol.  Previously, this was only possible for
  :ref:`static types <static-types>`.
  (Contributed by Erlend E. Aasland in :issue:`43908`)

已弃用
----------

已移除
-------

* :c:func:`PyFrame_BlockSetup` 和 :c:func:`PyFrame_BlockPop` 已经被移除。
  (由 Mark Shannon 在 :issue:`40222` 贡献。)

* 移除以下函数来配置 Python 初始化:

  * :c:func:`PySys_AddWarnOptionUnicode`
  * :c:func:`PySys_AddWarnOption`
  * :c:func:`PySys_AddXOption`
  * :c:func:`PySys_HasWarnOptions`
  * :c:func:`Py_SetPath`
  * :c:func:`Py_SetProgramName`
  * :c:func:`Py_SetPythonHome`
  * :c:func:`Py_SetStandardStreamEncoding`
  * :c:func:`_Py_SetProgramFullPath`

  使用 :ref:`Python Initialization Configuration 
  <init-config>` 中的  :c:type:`PyConfig` API 代替 (:pep:`587`)。
  (由 Victor Stinner 在 :issue:`44113`贡献。)

*  在 :mod:`gettext`
  模块中: :func:`~gettext.lgettext`, :func:`~gettext.ldgettext`,
  :func:`~gettext.lngettext` 和 :func:`~gettext.ldngettext` 已被弃用的函数移除。

  函数 :func:`~gettext.bind_textdomain_codeset`, 方法
  :meth:`~gettext.NullTranslations.output_charset` 和
  :meth:`~gettext.NullTranslations.set_output_charset`, 以及函数 :func:`~gettext.translation`和  :func:`~gettext.install`  的 *codeset* 参数
  也被移除， 因为它们仅仅能被使用在
  ``l*gettext()`` 函数上。
  (由 Dong-hee Na 和 Serhiy Storchaka 在 :issue:`44235`贡献。)
