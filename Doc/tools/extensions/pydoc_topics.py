"""Support for building "topic help" for pydoc."""

from __future__ import annotations

from pprint import pformat
from time import asctime
from typing import TYPE_CHECKING

from sphinx.builders.text import TextBuilder
from sphinx.util import logging
from sphinx.util.display import status_iterator
from sphinx.util.docutils import new_document
from sphinx.writers.text import TextTranslator

if TYPE_CHECKING:
    from collections.abc import Sequence, Set

    from sphinx.application import Sphinx
    from sphinx.util.typing import ExtensionMetadata

logger = logging.getLogger(__name__)

_PYDOC_TOPIC_LABELS: Sequence[str] = sorted({
    'assert',
    'assignment',
    'assignment-expressions',
    'async',
    'atom-identifiers',
    'atom-literals',
    'attribute-access',
    'attribute-references',
    'augassign',
    'await',
    'binary',
    'bitwise',
    'bltin-code-objects',
    'bltin-ellipsis-object',
    'bltin-null-object',
    'bltin-type-objects',
    'booleans',
    'break',
    'callable-types',
    'calls',
    'class',
    'comparisons',
    'compound',
    'context-managers',
    'continue',
    'conversions',
    'customization',
    'debugger',
    'del',
    'dict',
    'dynamic-features',
    'else',
    'exceptions',
    'execmodel',
    'exprlists',
    'floating',
    'for',
    'formatstrings',
    'function',
    'global',
    'id-classes',
    'identifiers',
    'if',
    'imaginary',
    'import',
    'in',
    'integers',
    'lambda',
    'lists',
    'naming',
    'nonlocal',
    'numbers',
    'numeric-types',
    'objects',
    'operator-summary',
    'pass',
    'power',
    'raise',
    'return',
    'sequence-types',
    'shifting',
    'slicings',
    'specialattrs',
    'specialnames',
    'string-methods',
    'strings',
    'subscriptions',
    'truth',
    'try',
    'types',
    'typesfunctions',
    'typesmapping',
    'typesmethods',
    'typesmodules',
    'typesseq',
    'typesseq-mutable',
    'unary',
    'while',
    'with',
    'yield',
})


class PydocTopicsBuilder(TextBuilder):
    name = 'pydoc-topics'

    default_translator_class = TextTranslator

    def init(self) -> None:
        self.topics: dict[str, str] = {}

    def get_outdated_docs(self) -> str:
        # Return a string describing what an update build will build.
        return 'all pydoc topics'

    def get_target_uri(self, docname: str, typ: str | None = None) -> str:
        return ''  # no URIs

    def write_documents(self, _docnames: Set[str]) -> None:
        env = self.env

        labels: dict[str, tuple[str, str, str]]
        labels = env.domains.standard_domain.labels

        for label in status_iterator(
            _PYDOC_TOPIC_LABELS,
            'building topics... ',
            length=len(_PYDOC_TOPIC_LABELS),
        ):
            try:
                docname, label_id, _section_name = labels[label]
            except KeyError:
                logger.warning('label %r not in documentation', label)
                continue

            doctree = env.get_and_resolve_doctree(docname, builder=self)
            document = new_document('<section node>')
            document.append(doctree.ids[label_id])
            visitor = TextTranslator(document, builder=self)
            document.walkabout(visitor)
            self.topics[label] = visitor.body

    def finish(self) -> None:
        topics = f'''\
# Autogenerated by Sphinx on {asctime()}
# as part of the release process.

topics = {pformat(self.topics)}
'''
        self.outdir.joinpath('topics.py').write_text(topics, encoding='utf-8')


def setup(app: Sphinx) -> ExtensionMetadata:
    app.add_builder(PydocTopicsBuilder)

    return {
        "version": "1.0",
        "parallel_read_safe": True,
        "parallel_write_safe": True,
    }
