#include "Python.h"
#include "pycore_long.h"
#include "pycore_modsupport.h"
#include "pycore_object.h"
#include "pycore_runtime.h"

#include <stddef.h>

static PyObject *
bool_repr(PyObject *self) {
    return self == Py_True ? &_Py_ID(True) : &_Py_ID(False);
}

PyObject *PyBool_FromLong(long ok) {
    return ok ? Py_True : Py_False;
}

static PyObject *
bool_new(PyTypeObject *type, PyObject *args, PyObject *kwds) {
    PyObject *x = Py_False;

    if (!_PyArg_NoKeywords("bool", kwds))
        return NULL;
    if (!PyArg_UnpackTuple(args, "bool", 0, 1, &x))
        return NULL;

    if (x == Py_True || x == Py_False) {
        Py_INCREF(x);
        return x;
    }

    long ok = PyObject_IsTrue(x);
    if (ok < 0)
        return NULL;

    return PyBool_FromLong(ok);
}

static PyObject *
bool_vectorcall(PyObject *type, PyObject * const*args,
                size_t nargsf, PyObject *kwnames) {
    if (!_PyArg_NoKwnames("bool", kwnames))
        return NULL;

    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
    if (!_PyArg_CheckPositional("bool", nargs, 0, 1))
        return NULL;

    if (nargs) {
        long ok = PyObject_IsTrue(args[0]);
        if (ok < 0)
            return NULL;
        return PyBool_FromLong(ok);
    }

    return Py_False;
}

static PyObject *
bool_and(PyObject *a, PyObject *b) {
    if (a == Py_False || b == Py_False)
        return Py_False;
    if (a == Py_True && b == Py_True)
        return Py_True;
    return PyLong_Type.tp_as_number->nb_and(a, b);
}

static PyObject *
bool_or(PyObject *a, PyObject *b) {
    if (a == Py_True || b == Py_True)
        return Py_True;
    if (a == Py_False && b == Py_False)
        return Py_False;
    return PyLong_Type.tp_as_number->nb_or(a, b);
}

static PyObject *
bool_xor(PyObject *a, PyObject *b) {
    if ((a == Py_True) ^ (b == Py_True))
        return Py_True;
    if ((a == Py_False) ^ (b == Py_False))
        return Py_False;
    return PyLong_Type.tp_as_number->nb_xor(a, b);
}

PyDoc_STRVAR(bool_doc,
"bool(x) -> bool\n\
\n\
Returns True when the argument x is true, False otherwise.\n\
The builtins True and False are the only two instances of the class bool.\n\
The class bool is a subclass of the class int, and cannot be subclassed.");

PyTypeObject PyBool_Type = {
    PyVarObject_HEAD_INIT(&PyType_Type, 0)
    "bool",
    offsetof(struct _longobject, long_value.ob_digit),  /* tp_basicsize */
    sizeof(digit),                              /* tp_itemsize */
    bool_dealloc,                               /* tp_dealloc */
    0,                                          /* tp_vectorcall_offset */
    0,                                          /* tp_getattr */
    0,                                          /* tp_setattr */
    0,                                          /* tp_as_async */
    bool_repr,                                  /* tp_repr */
    &bool_as_number,                            /* tp_as_number */
    0,                                          /* tp_as_sequence */
    0,                                          /* tp_as_mapping */
    0,                                          /* tp_hash */
    0,                                          /* tp_call */
    0,                                          /* tp_str */
    0,                                          /* tp_getattro */
    0,                                          /* tp_setattro */
    0,                                          /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                         /* tp_flags */
    bool_doc,                                   /* tp_doc */
    0,                                          /* tp_traverse */
    0,                                          /* tp_clear */
    0,                                          /* tp_richcompare */
    0,                                          /* tp_weaklistoffset */
    0,                                          /* tp_iter */
    0,                                          /* tp_iternext */
    0,                                          /* tp_methods */
    0,                                          /* tp_members */
    0,                                          /* tp_getset */
    &PyLong_Type,                               /* tp_base */
    0,                                          /* tp_dict */
    0,                                          /* tp_descr_get */
    0,                                          /* tp_descr_set */
    0,                                          /* tp_dictoffset */
    0,                                          /* tp_init */
    0,                                          /* tp_alloc */
    bool_new,                                   /* tp_new */
    .tp_vectorcall = bool_vectorcall,
};

struct _longobject _Py_FalseStruct = {
    PyObject_HEAD_INIT(&PyBool_Type)
    { .lv_tag = _PyLong_FALSE_TAG,
        { 0 }
    }
};

struct _longobject _Py_TrueStruct = {
    PyObject_HEAD_INIT(&PyBool_Type)
    { .lv_tag = _PyLong_TRUE_TAG,
        { 1 }
    }
};
