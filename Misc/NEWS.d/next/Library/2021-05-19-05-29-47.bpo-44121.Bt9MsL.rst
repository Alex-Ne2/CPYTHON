Implemented the :class:`~Lib.logging.__init__.formatHeader` and :class:`~Lib.logging.__init__.formatFooter` of the :class:`~Lib.logging.__init__.BufferingFormatter` class of the :class:`~Lib.logging` package. These changes are backward compatible with their previous use cases:

.. code-block:: python
   
   import logging
   records = [
              logging.makeLogRecord({'msg': 'one'}),
              logging.makeLogRecord({'msg': 'two'}),
   ]
   f = logging.BufferingFormatter()
   formated_records = f.format(records)
   print(formated_records)

Additionally, the new implementation supports the following:

.. code-block:: python

   import logging
   records = [
              logging.makeLogRecord({'msg': 'one'}),
              logging.makeLogRecord({'msg': 'two'}),
   ]
   f = logging.BufferingFormatter()
   header = 'A header./n'
   footer =  '/nA footer'
   f = logging.BufferingFormatter()
   formated_records = f.format(records, header, footer)
   print(formated_records)

This would make it easier for the programmer to use these methods without overriding "``formatHeader``" and "``formatFooter``".
