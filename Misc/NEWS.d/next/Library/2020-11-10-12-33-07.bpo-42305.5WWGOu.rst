Tkinter Autocomplete
====================

Text autocompletion provides relevant real-time results to users.
Because tkinter does not provide a widget for adding autocompletion to
GUIs out of the box, I decided to make one myself. This utility is
compatible with and has been tested on Python 2.7.1 and Python 3.6.0.

Structure
~~~~~~~~~

NOTE: The ``Tkinter`` library for Python 2 and ``tkinter`` library for Python 3 will from now on be referred to as ``tk``.
                                                                                                                          

The ``AutocompleteEntry`` class (which can be found
`here <https://github.com/RajvirSingh1313/Tkinter_Autocomplete_DropBox/blob/master/main.py>`__)
derives from ``tk.Frame`` and is a container used to group a
``tk.Entry`` and ``tk.Listbox`` widget. Should you need to modify the
widgets, they can be accessed as (respectively) ``AutocompleteEntry`` s
``entry`` and ``listbox`` attributes.

The entry widget acts like a normal textbox. When activated, it binds
``<KeyRelease>`` to a private method which will update the list of
suggestions. The listbox widget contains the suggestions themselves.
When activated, it binds ``<<ListboxSelect>>`` to a private method which
sets the entry widget to whatever value was selected.

Since an instance of ``AutocompleteEntry`` is a ``tk.Frame`` instance
too, you can place it by calling its ``pack`` or ``grid`` methods with
their respective arguments.

Quickstart
~~~~~~~~~~

NOTE: These examples will only run under Python 3. To make them Python 2-compatible, replace ``tkinter`` with ``Tkinter``.
                                                                                                                          

To add a new autocompletion frame to our interface, first initialize
one:

::

    import tkinter as tk

    from tkinter import auto_complete

    root = tk.Tk()

    frame = tk.Frame(root)
    frame.pack()

    entry = auto_complete.AutocompleteEntry(frame)
    # You can pass additional parameters to further customize the window;
    # all parameters that you can pass to tk.Frame, are valid here too.

Now you need to configure the instance by passing it an iterable
containing all autocompletion entries. Do this by calling its ``build``
method:

::

    ENTRIES = (
        "Foo",
        "Bar"
    )

    entry.build(ENTRIES)

You can pass additional arguments to ``build``:

-  ``max_entries`` (integer): The maximum number of entries to display
   at once. This value directly corresponds to the listbox widget's
   ``height`` attribute. Defaults to ``5``.

-  ``case_sensitive`` (boolean): If ``True``, only autocomplete entries
   that enforce the same capitalization as the current entry will be
   displayed. If ``False``, all autocomplete entries that match with the
   current entry will be displayed. Defaults to ``False``.

-  ``no_results_message`` (string or ``None``): The message to display
   if no suggestions could be found for the current entry. This argument
   may include a formatting identifier (``{}``) which, at runtime, gets
   formatted as the current entry. If ``None`` is specified, the listbox
   will instead be hidden until the next ``<KeyRelease>`` event.

Let's play around with these arguments:

::

    entry.build(
        entries=ENTRIES,
        no_results_message="< No results found for '{}' >"
        # Note that this is formatted at runtime
    )

NOTE: You may call the ``build`` method multiple times on an instance of ``AutocompleteEntry``, to dynamically change the available suggestions.
                                                                                                                                                

With that out of the way, you can display ``entry``:

.. code:: python

    entry.pack()
