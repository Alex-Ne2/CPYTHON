All about co_lnotab, the line number table.

Code objects store a field named co_lnotab.  This is an array of unsigned bytes
disguised as a Python bytes object.  It is used to map bytecode offsets to
source code line #s for tracebacks and to identify line number boundaries for
line tracing.

The array consists of two parts.
The first part consists of a one byte line offset per bytecode instruction.
The second part consists of an array of (bytecode offset, line number) pairs.
The second array is preceded by its length (as an unaligned big-endian 32 bit integer).
The final pair in the array must have an offset greater than or equal to the number of instructions.

The line number for a given instruction is computed by finding the relavant (bytecode offset, line number)
using either a linear scan or a binary search, then adding the offset.

An offset of 0 means that there is no line number associated with that instruction.

For example:

    byte code offset    source code line number
        0-5                  1
        6-49                 2
       50-149                7
      150-179             None
      180-349               88
      350-360              507
      361                  508

The bytecode offset, line number pairs are:
    (0, 0)
    (350, 506)
    (362, XXX) where XXX is ignored.

The offsets are as follows:

    byte code offset    line offset
        0-5                  1
        6-49                 2
       50-149                7
      150-179                0
      180-349               88
      350-360                1
      361                    2


*** Tracing ***

We want to call the tracing function when the line
number of the current instruction changes, or there is a backward branch.
Re-computing the current line for every instruction is a little slow, though,
so we cache the offset, next-offset, and line number triple.

Whenever we need a line number for a bytecode that is not in the current range
(which will happen rarely) we can linearly scan over the pairs until we find the range.

