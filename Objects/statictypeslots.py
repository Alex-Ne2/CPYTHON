#!/usr/bin/env python3
# Usage: statictypeslots.py < Include/statictypeslots.h statictypeslots.inc

import sys, re


def generate_statictypeslots(out=sys.stdout):
    out.write("/* Generated by statictypeslots.py */\n")
    res = {}
    for line in sys.stdin:
        m = re.match("#define Py_type_([a-z_]+) \\(([0-9]+)", line)
        if not m:
            continue
        member = m.group(1)
        if member.startswith("am_"):
            member = "PyAsyncMethods, " + member
        elif member.startswith("nb_"):
            member = "PyNumberMethods, " + member
        elif member.startswith("sq_"):
            member = "PySequenceMethods, " + member
        elif member.startswith("mp_"):
            member = "PyMappingMethods, " + member
        elif member.startswith("bf_"):
            member = "PyBufferProcs, " + member
        else:
            member = "PyTypeObject, tp_" + member
        res[int(m.group(2))] = member

    M = max(res.keys()) + 1
    for i in range(1, M):
        if i in res:
            out.write(f"offsetof({res[i]}),\n")
        else:
            out.write("0,\n")


def main():
    if len(sys.argv) == 2:
        with open(sys.argv[1], "w") as f:
            generate_statictypeslots(f)
    else:
        generate_statictypeslots()


if __name__ == "__main__":
    main()
