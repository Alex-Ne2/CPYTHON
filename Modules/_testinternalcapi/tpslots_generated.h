
/* The following is auto-generated by Tools/build/generate_global_objects.py. */

struct pytype_slot {
    const char *slot;
    const char *attr;
};

// These are derived from the "slotdefs" array in Objects/typeobject.c.
static const struct pytype_slot slotdefs[] = {
    {"tp_getattr", "__getattribute__"},
    {"tp_getattr", "__getattr__"},
    {"tp_setattr", "__setattr__"},
    {"tp_setattr", "__delattr__"},
    {"tp_repr", "__repr__"},
    {"tp_hash", "__hash__"},
    {"tp_call", "__call__"},
    {"tp_str", "__str__"},
    {"tp_getattro", "__getattribute__"},
    {"tp_getattro", "__getattr__"},
    {"tp_setattro", "__setattr__"},
    {"tp_setattro", "__delattr__"},
    {"tp_richcompare", "__lt__"},
    {"tp_richcompare", "__le__"},
    {"tp_richcompare", "__eq__"},
    {"tp_richcompare", "__ne__"},
    {"tp_richcompare", "__gt__"},
    {"tp_richcompare", "__ge__"},
    {"tp_iter", "__iter__"},
    {"tp_iternext", "__next__"},
    {"tp_descr_get", "__get__"},
    {"tp_descr_set", "__set__"},
    {"tp_descr_set", "__delete__"},
    {"tp_init", "__init__"},
    {"tp_new", "__new__"},
    {"tp_finalize", "__del__"},

    /* buffer */
    {"tp_as_buffer.bf_getbuffer", "__buffer__"},
    {"tp_as_buffer.bf_releasebuffer", "__release_buffer__"},

    /* async */
    {"tp_as_async.am_await", "__await__"},
    {"tp_as_async.am_aiter", "__aiter__"},
    {"tp_as_async.am_anext", "__anext__"},
    /* Does not have a corresponding slot wrapper: */
    {"tp_as_async.am_send", "NULL"},

    /* number */
    {"tp_as_number.nb_add", "__add__"},
    {"tp_as_number.nb_add", "__radd__"},
    {"tp_as_number.nb_subtract", "__sub__"},
    {"tp_as_number.nb_subtract", "__rsub__"},
    {"tp_as_number.nb_multiply", "__mul__"},
    {"tp_as_number.nb_multiply", "__rmul__"},
    {"tp_as_number.nb_remainder", "__mod__"},
    {"tp_as_number.nb_remainder", "__rmod__"},
    {"tp_as_number.nb_power", "__pow__"},
    {"tp_as_number.nb_power", "__rpow__"},
    {"tp_as_number.nb_negative", "__neg__"},
    {"tp_as_number.nb_positive", "__pos__"},
    {"tp_as_number.nb_absolute", "__abs__"},
    {"tp_as_number.nb_bool", "__bool__"},
    {"tp_as_number.nb_invert", "__invert__"},
    {"tp_as_number.nb_lshift", "__lshift__"},
    {"tp_as_number.nb_lshift", "__rlshift__"},
    {"tp_as_number.nb_rshift", "__rshift__"},
    {"tp_as_number.nb_rshift", "__rrshift__"},
    {"tp_as_number.nb_and", "__and__"},
    {"tp_as_number.nb_and", "__rand__"},
    {"tp_as_number.nb_xor", "__xor__"},
    {"tp_as_number.nb_xor", "__rxor__"},
    {"tp_as_number.nb_or", "__or__"},
    {"tp_as_number.nb_or", "__ror__"},
    {"tp_as_number.nb_int", "__int__"},
    {"tp_as_number.nb_float", "__float__"},
    {"tp_as_number.nb_inplace_add", "__iadd__"},
    {"tp_as_number.nb_inplace_subtract", "__isub__"},
    {"tp_as_number.nb_inplace_multiply", "__imul__"},
    {"tp_as_number.nb_inplace_remainder", "__imod__"},
    {"tp_as_number.nb_inplace_power", "__ipow__"},
    {"tp_as_number.nb_inplace_lshift", "__ilshift__"},
    {"tp_as_number.nb_inplace_rshift", "__irshift__"},
    {"tp_as_number.nb_inplace_and", "__iand__"},
    {"tp_as_number.nb_inplace_xor", "__ixor__"},
    {"tp_as_number.nb_inplace_or", "__ior__"},
    {"tp_as_number.nb_floor_divide", "__floordiv__"},
    {"tp_as_number.nb_floor_divide", "__rfloordiv__"},
    {"tp_as_number.nb_true_divide", "__truediv__"},
    {"tp_as_number.nb_true_divide", "__rtruediv__"},
    {"tp_as_number.nb_inplace_floor_divide", "__ifloordiv__"},
    {"tp_as_number.nb_inplace_true_divide", "__itruediv__"},
    {"tp_as_number.nb_index", "__index__"},
    {"tp_as_number.nb_matrix_multiply", "__matmul__"},
    {"tp_as_number.nb_matrix_multiply", "__rmatmul__"},
    {"tp_as_number.nb_inplace_matrix_multiply", "__imatmul__"},

    /* mapping */
    {"tp_as_mapping.mp_length", "__len__"},
    {"tp_as_mapping.mp_subscript", "__getitem__"},
    {"tp_as_mapping.mp_ass_subscript", "__setitem__"},
    {"tp_as_mapping.mp_ass_subscript", "__delitem__"},

    /* sequence */
    {"tp_as_sequence.sq_length", "__len__"},
    {"tp_as_sequence.sq_concat", "__add__"},
    {"tp_as_sequence.sq_repeat", "__mul__"},
    {"tp_as_sequence.sq_repeat", "__rmul__"},
    {"tp_as_sequence.sq_item", "__getitem__"},
    {"tp_as_sequence.sq_ass_item", "__setitem__"},
    {"tp_as_sequence.sq_ass_item", "__delitem__"},
    {"tp_as_sequence.sq_contains", "__contains__"},
    {"tp_as_sequence.sq_inplace_concat", "__iadd__"},
    {"tp_as_sequence.sq_inplace_repeat", "__imul__"},

    /* sentinel */
    {NULL}
};

/* End auto-generated code */
