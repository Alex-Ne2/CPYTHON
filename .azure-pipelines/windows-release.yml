name: Release_$(Build.SourceBranchName)_$(SourceTag)_$(Date:yyyyMMdd)$(Rev:.rr)

parameters:
- name: GitReleaseRemote
  displayName: "Git remote"
  type: string
  default: python
  values:
  - python
  - ambv
  - pablogsal
  - Other
- name: GitRemote
  displayName: "Other Git remote"
  type: string
  default: 'n/a'
- name: SourceTag
  displayName: "Git tag"
  type: string
  default: main
- name: DoPublish
  displayName: "Publish release"
  type: boolean
  default: false
- name: SigningCertificate
  displayName: "Code signing certificate"
  type: string
  default: 'Python Software Foundation'
- name: SigningDescription
  displayName: "Signature description"
  type: string
  default: 'Built: $(Build.BuildNumber)'
- name: DoPGO
  displayName: "Run PGO"
  type: boolean
  default: true
- name: DoLayout
  displayName: "Produce full layout artifact"
  type: boolean
  default: true
- name: DoMSIX
  displayName: "Produce Store packages"
  type: boolean
  default: true
- name: DoNuget
  displayName: "Produce Nuget packages"
  type: boolean
  default: true
- name: DoEmbed
  displayName: "Produce embeddable package"
  type: boolean
  default: true
- name: DoMSI
  displayName: "Produce traditional installer"
  type: boolean
  default: true
- name: BuildToPublish
  displayName: "Build number to publish (0 to skip)"
  type: number
  default: '0'

variables:
    __RealSigningCertificate: 'Python Software Foundation'
    ${{ if ne(parameters.GitReleaseRemote, 'Other') }}:
      GitRemote: ${{ parameters.GitReleaseRemote }}
    ${{ else }}:
      GitRemote: ${{ parameters.GitRemote }}
    SourceTag: ${{ paremeters.SourceTag }}
    DoPGO: ${{ parameters.DoPGO }}
    SigningCertificate: ${{ parameters.SigningCertificate }}
    SigningDescription: ${{ parameters.SigningDescription }}
    DoLayout: ${{ parameters.DoLayout }}
    DoMSIX: ${{ parameters.DoMSIX }}
    DoNuget: ${{ parameters.DoNuget }}
    DoEmbed: ${{ parameters.DoEmbed }}
    DoMSI: ${{ parameters.DoMSI }}
    DoPublish: ${{ parameters.DoPublish }}
    ${{ if ne(parameters.BuildToPublish, '0') }}:
      BuildToPublish: ${{ parameters.BuildToPublish }}
# QUEUE TIME VARIABLES
#    PyDotOrgUsername: ''
#    PyDotOrgServer: ''

trigger: none
pr: none

stages:
- stage: Build
  displayName: Build binaries
  condition: and(succeeded(), not(variables['BuildToPublish']))
  jobs:
  - template: windows-release/stage-build.yml

- stage: Sign
  displayName: Sign binaries
  dependsOn: Build
  condition: and(succeeded(), not(variables['BuildToPublish']))
  jobs:
  - template: windows-release/stage-sign.yml

- stage: Layout
  displayName: Generate layouts
  dependsOn: Sign
  condition: and(succeeded(), not(variables['BuildToPublish']))
  jobs:
  - template: windows-release/stage-layout-full.yml
  - template: windows-release/stage-layout-embed.yml
  - template: windows-release/stage-layout-nuget.yml

- stage: Pack
  dependsOn: Layout
  condition: and(succeeded(), not(variables['BuildToPublish']))
  jobs:
  - template: windows-release/stage-pack-nuget.yml

- stage: Test
  dependsOn: Pack
  condition: and(succeeded(), not(variables['BuildToPublish']))
  jobs:
  - template: windows-release/stage-test-embed.yml
  - template: windows-release/stage-test-nuget.yml

- stage: Layout_MSIX
  displayName: Generate MSIX layouts
  dependsOn: Sign
  condition: and(succeeded(), and(eq(variables['DoMSIX'], 'true'), not(variables['BuildToPublish'])))
  jobs:
  - template: windows-release/stage-layout-msix.yml

- stage: Pack_MSIX
  displayName: Package MSIX
  dependsOn: Layout_MSIX
  condition: and(succeeded(), not(variables['BuildToPublish']))
  jobs:
  - template: windows-release/stage-pack-msix.yml

- stage: Build_MSI
  displayName: Build MSI installer
  dependsOn: Sign
  condition: and(succeeded(), and(eq(variables['DoMSI'], 'true'), not(variables['BuildToPublish'])))
  jobs:
  - template: windows-release/stage-msi.yml

- stage: Test_MSI
  displayName: Test MSI installer
  dependsOn: Build_MSI
  condition: and(succeeded(), not(variables['BuildToPublish']))
  jobs:
  - template: windows-release/stage-test-msi.yml

- stage: PublishPyDotOrg
  displayName: Publish to python.org
  dependsOn: ['Test_MSI', 'Test']
  condition: and(succeeded(), and(eq(variables['DoPublish'], 'true'), not(variables['BuildToPublish'])))
  jobs:
  - template: windows-release/stage-publish-pythonorg.yml

- stage: PublishNuget
  displayName: Publish to nuget.org
  dependsOn: Test
  condition: and(succeeded(), and(eq(variables['DoPublish'], 'true'), not(variables['BuildToPublish'])))
  jobs:
  - template: windows-release/stage-publish-nugetorg.yml

- stage: PublishStore
  displayName: Publish to Store
  dependsOn: Pack_MSIX
  condition: and(succeeded(), and(eq(variables['DoPublish'], 'true'), not(variables['BuildToPublish'])))
  jobs:
  - template: windows-release/stage-publish-store.yml


- stage: PublishExistingPyDotOrg
  displayName: Publish existing build to python.org
  dependsOn: []
  condition: and(succeeded(), and(eq(variables['DoPublish'], 'true'), variables['BuildToPublish']))
  jobs:
  - template: windows-release/stage-publish-pythonorg.yml

- stage: PublishExistingNuget
  displayName: Publish existing build to nuget.org
  dependsOn: []
  condition: and(succeeded(), and(eq(variables['DoPublish'], 'true'), variables['BuildToPublish']))
  jobs:
  - template: windows-release/stage-publish-nugetorg.yml

- stage: PublishExistingStore
  displayName: Publish existing build to Store
  dependsOn: []
  condition: and(succeeded(), and(eq(variables['DoPublish'], 'true'), variables['BuildToPublish']))
  jobs:
  - template: windows-release/stage-publish-store.yml
