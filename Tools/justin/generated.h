// Don't be scared... this entire file is generated by Justin!

typedef enum {
    HOLE_base,
    HOLE_continue,
    HOLE_next_instr,
    HOLE_next_trace,
    HOLE_oparg,
    LOAD_PyFloat_FromDouble,
    LOAD_PyFloat_Type,
    LOAD_PyListIter_Type,
    LOAD_PyList_Type,
    LOAD_PyLong_Type,
    LOAD_PyNumber_Add,
    LOAD_PyNumber_And,
    LOAD_PyNumber_FloorDivide,
    LOAD_PyNumber_InPlaceAdd,
    LOAD_PyNumber_InPlaceAnd,
    LOAD_PyNumber_InPlaceFloorDivide,
    LOAD_PyNumber_InPlaceLshift,
    LOAD_PyNumber_InPlaceMatrixMultiply,
    LOAD_PyNumber_InPlaceMultiply,
    LOAD_PyNumber_InPlaceOr,
    LOAD_PyNumber_InPlaceRemainder,
    LOAD_PyNumber_InPlaceRshift,
    LOAD_PyNumber_InPlaceSubtract,
    LOAD_PyNumber_InPlaceTrueDivide,
    LOAD_PyNumber_InPlaceXor,
    LOAD_PyNumber_Lshift,
    LOAD_PyNumber_MatrixMultiply,
    LOAD_PyNumber_Multiply,
    LOAD_PyNumber_Or,
    LOAD_PyNumber_Remainder,
    LOAD_PyNumber_Rshift,
    LOAD_PyNumber_Subtract,
    LOAD_PyNumber_TrueDivide,
    LOAD_PyNumber_Xor,
    LOAD_PyObject_Free,
    LOAD_PyThreadState_Get,
    LOAD_PyTuple_Type,
    LOAD__PyFloat_ExactDealloc,
    LOAD__PyNumber_InPlacePowerNoMod,
    LOAD__PyNumber_PowerNoMod,
    LOAD__Py_Dealloc,
} HoleKind;

typedef struct {
    const uintptr_t offset;
    const uintptr_t addend;
    const HoleKind kind;
} Hole;

typedef struct {
    const size_t nbytes;
    const unsigned char * const bytes;
    const size_t nholes;
    const Hole * const holes;
} Stencil;


// BINARY_OP
static const unsigned char BINARY_OP_stencil_bytes[] = {
    0x50, 0x4C, 0x89, 0x2C, 0x24, 0x49, 0xBD, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C,
    0x89, 0x6D, 0x38, 0x49, 0x8B, 0x5C, 0x24, 0xF0,
    0x4D, 0x8B, 0x7C, 0x24, 0xF8, 0x48, 0xB8, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48,
    0x98, 0x48, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x48, 0x89, 0xDF, 0x4C, 0x89,
    0xFE, 0xFF, 0x14, 0xC1, 0x49, 0x89, 0xC6, 0x48,
    0x83, 0x03, 0xFF, 0x74, 0x28, 0x49, 0x83, 0x07,
    0xFF, 0x74, 0x37, 0x49, 0x8D, 0x44, 0x24, 0xF0,
    0x4D, 0x85, 0xF6, 0x74, 0x46, 0x49, 0x83, 0xC4,
    0xF8, 0x4C, 0x89, 0x30, 0x48, 0xB8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x8B,
    0x2C, 0x24, 0x59, 0xFF, 0xE0, 0x48, 0xB8, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48,
    0x89, 0xDF, 0xFF, 0xD0, 0x49, 0x83, 0x07, 0xFF,
    0x75, 0xC9, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x4C, 0x89, 0xFF, 0xFF,
    0xD0, 0x49, 0x8D, 0x44, 0x24, 0xF0, 0x4D, 0x85,
    0xF6, 0x75, 0xBA, 0x49, 0x83, 0xC5, 0x02, 0x4C,
    0x89, 0x6D, 0x38, 0x48, 0x29, 0xE8, 0x48, 0x83,
    0xC0, 0xB8, 0x48, 0xC1, 0xE8, 0x03, 0x89, 0x45,
    0x40, 0xB8, 0xFE, 0xFF, 0xFF, 0xFF, 0x59, 0xC3,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
static const Hole BINARY_OP_stencil_holes[] = {
    {.offset =   7, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  31, .addend =   0, .kind = HOLE_oparg},
    {.offset =  43, .addend = 184, .kind = HOLE_base},
    {.offset =  94, .addend =   0, .kind = HOLE_continue},
    {.offset = 111, .addend =   0, .kind = LOAD__Py_Dealloc},
    {.offset = 132, .addend =   0, .kind = LOAD__Py_Dealloc},
    {.offset = 184, .addend =   0, .kind = LOAD_PyNumber_Add},
    {.offset = 192, .addend =   0, .kind = LOAD_PyNumber_And},
    {.offset = 200, .addend =   0, .kind = LOAD_PyNumber_FloorDivide},
    {.offset = 208, .addend =   0, .kind = LOAD_PyNumber_Lshift},
    {.offset = 216, .addend =   0, .kind = LOAD_PyNumber_MatrixMultiply},
    {.offset = 224, .addend =   0, .kind = LOAD_PyNumber_Multiply},
    {.offset = 232, .addend =   0, .kind = LOAD_PyNumber_Remainder},
    {.offset = 240, .addend =   0, .kind = LOAD_PyNumber_Or},
    {.offset = 248, .addend =   0, .kind = LOAD__PyNumber_PowerNoMod},
    {.offset = 256, .addend =   0, .kind = LOAD_PyNumber_Rshift},
    {.offset = 264, .addend =   0, .kind = LOAD_PyNumber_Subtract},
    {.offset = 272, .addend =   0, .kind = LOAD_PyNumber_TrueDivide},
    {.offset = 280, .addend =   0, .kind = LOAD_PyNumber_Xor},
    {.offset = 288, .addend =   0, .kind = LOAD_PyNumber_InPlaceAdd},
    {.offset = 296, .addend =   0, .kind = LOAD_PyNumber_InPlaceAnd},
    {.offset = 304, .addend =   0, .kind = LOAD_PyNumber_InPlaceFloorDivide},
    {.offset = 312, .addend =   0, .kind = LOAD_PyNumber_InPlaceLshift},
    {.offset = 320, .addend =   0, .kind = LOAD_PyNumber_InPlaceMatrixMultiply},
    {.offset = 328, .addend =   0, .kind = LOAD_PyNumber_InPlaceMultiply},
    {.offset = 336, .addend =   0, .kind = LOAD_PyNumber_InPlaceRemainder},
    {.offset = 344, .addend =   0, .kind = LOAD_PyNumber_InPlaceOr},
    {.offset = 352, .addend =   0, .kind = LOAD__PyNumber_InPlacePowerNoMod},
    {.offset = 360, .addend =   0, .kind = LOAD_PyNumber_InPlaceRshift},
    {.offset = 368, .addend =   0, .kind = LOAD_PyNumber_InPlaceSubtract},
    {.offset = 376, .addend =   0, .kind = LOAD_PyNumber_InPlaceTrueDivide},
    {.offset = 384, .addend =   0, .kind = LOAD_PyNumber_InPlaceXor},
};
static const Stencil BINARY_OP_stencil = {
    .nbytes = Py_ARRAY_LENGTH(BINARY_OP_stencil_bytes),
    .bytes = BINARY_OP_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(BINARY_OP_stencil_holes),
    .holes = BINARY_OP_stencil_holes,
};

// BINARY_OP_ADD_FLOAT
static const unsigned char BINARY_OP_ADD_FLOAT_stencil_bytes[] = {
    0x50, 0x48, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x48, 0x89, 0x5D, 0x38, 0x4D,
    0x8B, 0x7C, 0x24, 0xF0, 0xB8, 0xFF, 0xFF, 0xFF,
    0xFF, 0x48, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x49, 0x39, 0x4F, 0x08, 0x75,
    0x0B, 0x4D, 0x8B, 0x74, 0x24, 0xF8, 0x49, 0x39,
    0x4E, 0x08, 0x74, 0x11, 0x49, 0x29, 0xEC, 0x49,
    0x83, 0xC4, 0xB8, 0x49, 0xC1, 0xEC, 0x03, 0x44,
    0x89, 0x65, 0x40, 0x59, 0xC3, 0xF2, 0x41, 0x0F,
    0x10, 0x47, 0x10, 0xF2, 0x41, 0x0F, 0x58, 0x46,
    0x10, 0x49, 0x8B, 0x07, 0x48, 0x83, 0xF8, 0x01,
    0x75, 0x1D, 0xF2, 0x41, 0x0F, 0x11, 0x47, 0x10,
    0x49, 0x83, 0x06, 0xFF, 0x75, 0x45, 0x48, 0xB8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x4C, 0x89, 0xF7, 0xFF, 0xD0, 0xEB, 0x34, 0x49,
    0x83, 0x3E, 0x01, 0x75, 0x12, 0xF2, 0x41, 0x0F,
    0x11, 0x46, 0x10, 0x48, 0x83, 0xC0, 0xFF, 0x49,
    0x89, 0x07, 0x4D, 0x89, 0xF7, 0xEB, 0x1C, 0x48,
    0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xD0, 0x48, 0x85, 0xC0, 0x74, 0x21,
    0x49, 0x83, 0x07, 0xFF, 0x49, 0x83, 0x06, 0xFF,
    0x49, 0x89, 0xC7, 0x4D, 0x89, 0x7C, 0x24, 0xF0,
    0x49, 0x83, 0xC4, 0xF8, 0x48, 0xB8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xFF,
    0xE0, 0x48, 0x83, 0xC3, 0x02, 0x48, 0x89, 0x5D,
    0x38, 0xB8, 0xFE, 0xFF, 0xFF, 0xFF, 0xE9, 0x61,
    0xFF, 0xFF, 0xFF,
};
static const Hole BINARY_OP_ADD_FLOAT_stencil_holes[] = {
    {.offset =   3, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  27, .addend =   0, .kind = LOAD_PyFloat_Type},
    {.offset = 104, .addend =   0, .kind = LOAD__PyFloat_ExactDealloc},
    {.offset = 145, .addend =   0, .kind = LOAD_PyFloat_FromDouble},
    {.offset = 182, .addend =   0, .kind = HOLE_continue},
};
static const Stencil BINARY_OP_ADD_FLOAT_stencil = {
    .nbytes = Py_ARRAY_LENGTH(BINARY_OP_ADD_FLOAT_stencil_bytes),
    .bytes = BINARY_OP_ADD_FLOAT_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(BINARY_OP_ADD_FLOAT_stencil_holes),
    .holes = BINARY_OP_ADD_FLOAT_stencil_holes,
};

// BINARY_OP_MULTIPLY_FLOAT
static const unsigned char BINARY_OP_MULTIPLY_FLOAT_stencil_bytes[] = {
    0x50, 0x48, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x48, 0x89, 0x5D, 0x38, 0x4D,
    0x8B, 0x7C, 0x24, 0xF0, 0xB8, 0xFF, 0xFF, 0xFF,
    0xFF, 0x48, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x49, 0x39, 0x4F, 0x08, 0x75,
    0x0B, 0x4D, 0x8B, 0x74, 0x24, 0xF8, 0x49, 0x39,
    0x4E, 0x08, 0x74, 0x11, 0x49, 0x29, 0xEC, 0x49,
    0x83, 0xC4, 0xB8, 0x49, 0xC1, 0xEC, 0x03, 0x44,
    0x89, 0x65, 0x40, 0x59, 0xC3, 0xF2, 0x41, 0x0F,
    0x10, 0x47, 0x10, 0xF2, 0x41, 0x0F, 0x59, 0x46,
    0x10, 0x49, 0x8B, 0x07, 0x48, 0x83, 0xF8, 0x01,
    0x75, 0x1D, 0xF2, 0x41, 0x0F, 0x11, 0x47, 0x10,
    0x49, 0x83, 0x06, 0xFF, 0x75, 0x45, 0x48, 0xB8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x4C, 0x89, 0xF7, 0xFF, 0xD0, 0xEB, 0x34, 0x49,
    0x83, 0x3E, 0x01, 0x75, 0x12, 0xF2, 0x41, 0x0F,
    0x11, 0x46, 0x10, 0x48, 0x83, 0xC0, 0xFF, 0x49,
    0x89, 0x07, 0x4D, 0x89, 0xF7, 0xEB, 0x1C, 0x48,
    0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xD0, 0x48, 0x85, 0xC0, 0x74, 0x21,
    0x49, 0x83, 0x07, 0xFF, 0x49, 0x83, 0x06, 0xFF,
    0x49, 0x89, 0xC7, 0x4D, 0x89, 0x7C, 0x24, 0xF0,
    0x49, 0x83, 0xC4, 0xF8, 0x48, 0xB8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xFF,
    0xE0, 0x48, 0x83, 0xC3, 0x02, 0x48, 0x89, 0x5D,
    0x38, 0xB8, 0xFE, 0xFF, 0xFF, 0xFF, 0xE9, 0x61,
    0xFF, 0xFF, 0xFF,
};
static const Hole BINARY_OP_MULTIPLY_FLOAT_stencil_holes[] = {
    {.offset =   3, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  27, .addend =   0, .kind = LOAD_PyFloat_Type},
    {.offset = 104, .addend =   0, .kind = LOAD__PyFloat_ExactDealloc},
    {.offset = 145, .addend =   0, .kind = LOAD_PyFloat_FromDouble},
    {.offset = 182, .addend =   0, .kind = HOLE_continue},
};
static const Stencil BINARY_OP_MULTIPLY_FLOAT_stencil = {
    .nbytes = Py_ARRAY_LENGTH(BINARY_OP_MULTIPLY_FLOAT_stencil_bytes),
    .bytes = BINARY_OP_MULTIPLY_FLOAT_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(BINARY_OP_MULTIPLY_FLOAT_stencil_holes),
    .holes = BINARY_OP_MULTIPLY_FLOAT_stencil_holes,
};

// BINARY_OP_SUBTRACT_FLOAT
static const unsigned char BINARY_OP_SUBTRACT_FLOAT_stencil_bytes[] = {
    0x50, 0x48, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x48, 0x89, 0x5D, 0x38, 0x4D,
    0x8B, 0x7C, 0x24, 0xF0, 0xB8, 0xFF, 0xFF, 0xFF,
    0xFF, 0x48, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x49, 0x39, 0x4F, 0x08, 0x75,
    0x0B, 0x4D, 0x8B, 0x74, 0x24, 0xF8, 0x49, 0x39,
    0x4E, 0x08, 0x74, 0x11, 0x49, 0x29, 0xEC, 0x49,
    0x83, 0xC4, 0xB8, 0x49, 0xC1, 0xEC, 0x03, 0x44,
    0x89, 0x65, 0x40, 0x59, 0xC3, 0xF2, 0x41, 0x0F,
    0x10, 0x47, 0x10, 0xF2, 0x41, 0x0F, 0x5C, 0x46,
    0x10, 0x49, 0x8B, 0x07, 0x48, 0x83, 0xF8, 0x01,
    0x75, 0x1D, 0xF2, 0x41, 0x0F, 0x11, 0x47, 0x10,
    0x49, 0x83, 0x06, 0xFF, 0x75, 0x45, 0x48, 0xB8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x4C, 0x89, 0xF7, 0xFF, 0xD0, 0xEB, 0x34, 0x49,
    0x83, 0x3E, 0x01, 0x75, 0x12, 0xF2, 0x41, 0x0F,
    0x11, 0x46, 0x10, 0x48, 0x83, 0xC0, 0xFF, 0x49,
    0x89, 0x07, 0x4D, 0x89, 0xF7, 0xEB, 0x1C, 0x48,
    0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xD0, 0x48, 0x85, 0xC0, 0x74, 0x21,
    0x49, 0x83, 0x07, 0xFF, 0x49, 0x83, 0x06, 0xFF,
    0x49, 0x89, 0xC7, 0x4D, 0x89, 0x7C, 0x24, 0xF0,
    0x49, 0x83, 0xC4, 0xF8, 0x48, 0xB8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xFF,
    0xE0, 0x48, 0x83, 0xC3, 0x02, 0x48, 0x89, 0x5D,
    0x38, 0xB8, 0xFE, 0xFF, 0xFF, 0xFF, 0xE9, 0x61,
    0xFF, 0xFF, 0xFF,
};
static const Hole BINARY_OP_SUBTRACT_FLOAT_stencil_holes[] = {
    {.offset =   3, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  27, .addend =   0, .kind = LOAD_PyFloat_Type},
    {.offset = 104, .addend =   0, .kind = LOAD__PyFloat_ExactDealloc},
    {.offset = 145, .addend =   0, .kind = LOAD_PyFloat_FromDouble},
    {.offset = 182, .addend =   0, .kind = HOLE_continue},
};
static const Stencil BINARY_OP_SUBTRACT_FLOAT_stencil = {
    .nbytes = Py_ARRAY_LENGTH(BINARY_OP_SUBTRACT_FLOAT_stencil_bytes),
    .bytes = BINARY_OP_SUBTRACT_FLOAT_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(BINARY_OP_SUBTRACT_FLOAT_stencil_holes),
    .holes = BINARY_OP_SUBTRACT_FLOAT_stencil_holes,
};

// BINARY_SUBSCR_LIST_INT
static const unsigned char BINARY_SUBSCR_LIST_INT_stencil_bytes[] = {
    0x50, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0x38, 0x49,
    0x8B, 0x7C, 0x24, 0xF8, 0x48, 0xB8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39,
    0x47, 0x08, 0x75, 0x72, 0x49, 0x8B, 0x5C, 0x24,
    0xF0, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x48, 0x39, 0x43, 0x08, 0x75,
    0x5D, 0x48, 0x83, 0x7F, 0x10, 0x08, 0x77, 0x56,
    0x8B, 0x47, 0x18, 0x48, 0x39, 0x43, 0x10, 0x7E,
    0x4D, 0x48, 0x8B, 0x4B, 0x18, 0x4C, 0x8B, 0x3C,
    0xC1, 0x49, 0x83, 0x07, 0x01, 0x48, 0x83, 0x07,
    0xFF, 0x75, 0x0C, 0x48, 0xB8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x4D,
    0x8D, 0x74, 0x24, 0xF8, 0x48, 0x83, 0x03, 0xFF,
    0x75, 0x0F, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xDF, 0xFF,
    0xD0, 0x4D, 0x89, 0x7C, 0x24, 0xF0, 0x48, 0xB8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x4D, 0x89, 0xF4, 0x59, 0xFF, 0xE0, 0x49, 0x29,
    0xEC, 0x49, 0x83, 0xC4, 0xB8, 0x49, 0xC1, 0xEC,
    0x03, 0x44, 0x89, 0x65, 0x40, 0xB8, 0xFF, 0xFF,
    0xFF, 0xFF, 0x59, 0xC3,
};
static const Hole BINARY_SUBSCR_LIST_INT_stencil_holes[] = {
    {.offset =   3, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  22, .addend =   0, .kind = LOAD_PyLong_Type},
    {.offset =  43, .addend =   0, .kind = LOAD_PyList_Type},
    {.offset =  93, .addend =   0, .kind = LOAD_PyObject_Free},
    {.offset = 116, .addend =   0, .kind = LOAD__Py_Dealloc},
    {.offset = 136, .addend =   0, .kind = HOLE_continue},
};
static const Stencil BINARY_SUBSCR_LIST_INT_stencil = {
    .nbytes = Py_ARRAY_LENGTH(BINARY_SUBSCR_LIST_INT_stencil_bytes),
    .bytes = BINARY_SUBSCR_LIST_INT_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(BINARY_SUBSCR_LIST_INT_stencil_holes),
    .holes = BINARY_SUBSCR_LIST_INT_stencil_holes,
};

// COPY
static const unsigned char COPY_stencil_bytes[] = {
    0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x48, 0x89, 0x45, 0x38, 0x48, 0xB8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xF7, 0xD8, 0x48, 0x98, 0x49, 0x8B, 0x04, 0xC4,
    0x48, 0x83, 0x00, 0x01, 0x49, 0x89, 0x04, 0x24,
    0x49, 0x83, 0xC4, 0x08, 0x48, 0xB8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0,
};
static const Hole COPY_stencil_holes[] = {
    {.offset =   2, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  16, .addend =   0, .kind = HOLE_oparg},
    {.offset =  46, .addend =   0, .kind = HOLE_continue},
};
static const Stencil COPY_stencil = {
    .nbytes = Py_ARRAY_LENGTH(COPY_stencil_bytes),
    .bytes = COPY_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(COPY_stencil_holes),
    .holes = COPY_stencil_holes,
};

// FOR_ITER_LIST
static const unsigned char FOR_ITER_LIST_stencil_bytes[] = {
    0x50, 0x49, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x4C, 0x89, 0x75, 0x38, 0x49,
    0x8B, 0x5C, 0x24, 0xF8, 0xB8, 0xFF, 0xFF, 0xFF,
    0xFF, 0x48, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x48, 0x39, 0x4B, 0x08, 0x0F,
    0x85, 0xAB, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x7B,
    0x18, 0x48, 0x85, 0xFF, 0x74, 0x60, 0x48, 0x8B,
    0x43, 0x10, 0x48, 0x3B, 0x47, 0x10, 0x7D, 0x3C,
    0x48, 0x8B, 0x4F, 0x18, 0x48, 0x8D, 0x50, 0x01,
    0x48, 0x89, 0x53, 0x10, 0x48, 0x8B, 0x04, 0xC1,
    0x48, 0x83, 0x00, 0x01, 0x49, 0x89, 0x04, 0x24,
    0x49, 0x83, 0xC4, 0x08, 0x49, 0x83, 0xC6, 0x04,
    0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x49, 0x39, 0xC6, 0x75, 0x63, 0x48,
    0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x59, 0xFF, 0xE0, 0x48, 0xC7, 0x43, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0x07, 0xFF,
    0x75, 0x0C, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x48, 0x83,
    0x03, 0xFF, 0x75, 0x0F, 0x48, 0xB8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
    0xDF, 0xFF, 0xD0, 0x49, 0x83, 0xC4, 0xF8, 0x48,
    0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x48, 0x98, 0x4D, 0x8D, 0x34, 0x46, 0x49,
    0x83, 0xC6, 0x06, 0x48, 0xB8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xC6,
    0x74, 0x9D, 0x4C, 0x89, 0x75, 0x38, 0x31, 0xC0,
    0x49, 0x29, 0xEC, 0x49, 0x83, 0xC4, 0xB8, 0x49,
    0xC1, 0xEC, 0x03, 0x44, 0x89, 0x65, 0x40, 0x59,
    0xC3,
};
static const Hole FOR_ITER_LIST_stencil_holes[] = {
    {.offset =   3, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  27, .addend =   0, .kind = LOAD_PyListIter_Type},
    {.offset =  98, .addend =   0, .kind = HOLE_next_trace},
    {.offset = 113, .addend =   0, .kind = HOLE_continue},
    {.offset = 140, .addend =   0, .kind = LOAD__Py_Dealloc},
    {.offset = 158, .addend =   0, .kind = LOAD__Py_Dealloc},
    {.offset = 177, .addend =   0, .kind = HOLE_oparg},
    {.offset = 197, .addend =   0, .kind = HOLE_next_trace},
};
static const Stencil FOR_ITER_LIST_stencil = {
    .nbytes = Py_ARRAY_LENGTH(FOR_ITER_LIST_stencil_bytes),
    .bytes = FOR_ITER_LIST_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(FOR_ITER_LIST_stencil_holes),
    .holes = FOR_ITER_LIST_stencil_holes,
};

// JUMP_BACKWARD
static const unsigned char JUMP_BACKWARD_stencil_bytes[] = {
    0x49, 0x8B, 0x4D, 0x10, 0x48, 0xB8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
    0x45, 0x38, 0x8B, 0x49, 0x5C, 0x85, 0xC9, 0x74,
    0x30, 0x48, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xF7, 0xD9, 0x48, 0x63, 0xC9,
    0x48, 0x8D, 0x04, 0x48, 0x48, 0x83, 0xC0, 0x02,
    0x48, 0x89, 0x45, 0x38, 0x49, 0x29, 0xEC, 0x49,
    0x83, 0xC4, 0xB8, 0x49, 0xC1, 0xEC, 0x03, 0x44,
    0x89, 0x65, 0x40, 0xB8, 0xFD, 0xFF, 0xFF, 0xFF,
    0xC3, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFF, 0xE0,
};
static const Hole JUMP_BACKWARD_stencil_holes[] = {
    {.offset =   6, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  27, .addend =   0, .kind = HOLE_oparg},
    {.offset =  75, .addend =   0, .kind = HOLE_continue},
};
static const Stencil JUMP_BACKWARD_stencil = {
    .nbytes = Py_ARRAY_LENGTH(JUMP_BACKWARD_stencil_bytes),
    .bytes = JUMP_BACKWARD_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(JUMP_BACKWARD_stencil_holes),
    .holes = JUMP_BACKWARD_stencil_holes,
};

// LOAD_CONST
static const unsigned char LOAD_CONST_stencil_bytes[] = {
    0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x48, 0x89, 0x45, 0x38, 0x48, 0x8B,
    0x45, 0x00, 0x48, 0x8B, 0x40, 0x18, 0x48, 0xB9,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x63, 0xC9, 0x48, 0x8B, 0x44, 0xC8, 0x18,
    0x48, 0x83, 0x00, 0x01, 0x49, 0x89, 0x04, 0x24,
    0x49, 0x83, 0xC4, 0x08, 0x48, 0xB8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0,
};
static const Hole LOAD_CONST_stencil_holes[] = {
    {.offset =   2, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  24, .addend =   0, .kind = HOLE_oparg},
    {.offset =  54, .addend =   0, .kind = HOLE_continue},
};
static const Stencil LOAD_CONST_stencil = {
    .nbytes = Py_ARRAY_LENGTH(LOAD_CONST_stencil_bytes),
    .bytes = LOAD_CONST_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(LOAD_CONST_stencil_holes),
    .holes = LOAD_CONST_stencil_holes,
};

// LOAD_FAST
static const unsigned char LOAD_FAST_stencil_bytes[] = {
    0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x48, 0x89, 0x45, 0x38, 0x48, 0xB8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x98, 0x48, 0x8B, 0x44, 0xC5, 0x48, 0x48,
    0x83, 0x00, 0x01, 0x49, 0x89, 0x04, 0x24, 0x49,
    0x83, 0xC4, 0x08, 0x48, 0xB8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0,
};
static const Hole LOAD_FAST_stencil_holes[] = {
    {.offset =   2, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  16, .addend =   0, .kind = HOLE_oparg},
    {.offset =  45, .addend =   0, .kind = HOLE_continue},
};
static const Stencil LOAD_FAST_stencil = {
    .nbytes = Py_ARRAY_LENGTH(LOAD_FAST_stencil_bytes),
    .bytes = LOAD_FAST_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(LOAD_FAST_stencil_holes),
    .holes = LOAD_FAST_stencil_holes,
};

// LOAD_FAST__LOAD_CONST
static const unsigned char LOAD_FAST__LOAD_CONST_stencil_bytes[] = {
    0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x48, 0x89, 0x45, 0x38, 0x48, 0xB9,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x63, 0xC9, 0x48, 0x8B, 0x4C, 0xCD, 0x48,
    0x48, 0x83, 0x01, 0x01, 0x0F, 0xB6, 0x40, 0x03,
    0x48, 0x8B, 0x55, 0x00, 0x48, 0x8B, 0x52, 0x18,
    0x48, 0x8B, 0x44, 0xC2, 0x18, 0x48, 0x83, 0x00,
    0x01, 0x49, 0x89, 0x44, 0x24, 0x08, 0x49, 0x89,
    0x0C, 0x24, 0x49, 0x83, 0xC4, 0x10, 0x48, 0xB8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xE0,
};
static const Hole LOAD_FAST__LOAD_CONST_stencil_holes[] = {
    {.offset =   2, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  16, .addend =   0, .kind = HOLE_oparg},
    {.offset =  72, .addend =   0, .kind = HOLE_continue},
};
static const Stencil LOAD_FAST__LOAD_CONST_stencil = {
    .nbytes = Py_ARRAY_LENGTH(LOAD_FAST__LOAD_CONST_stencil_bytes),
    .bytes = LOAD_FAST__LOAD_CONST_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(LOAD_FAST__LOAD_CONST_stencil_holes),
    .holes = LOAD_FAST__LOAD_CONST_stencil_holes,
};

// LOAD_FAST__LOAD_FAST
static const unsigned char LOAD_FAST__LOAD_FAST_stencil_bytes[] = {
    0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x48, 0x89, 0x45, 0x38, 0x48, 0xB9,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x63, 0xC9, 0x48, 0x8B, 0x4C, 0xCD, 0x48,
    0x48, 0x83, 0x01, 0x01, 0x0F, 0xB6, 0x40, 0x03,
    0x48, 0x8B, 0x44, 0xC5, 0x48, 0x48, 0x83, 0x00,
    0x01, 0x49, 0x89, 0x44, 0x24, 0x08, 0x49, 0x89,
    0x0C, 0x24, 0x49, 0x83, 0xC4, 0x10, 0x48, 0xB8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xE0,
};
static const Hole LOAD_FAST__LOAD_FAST_stencil_holes[] = {
    {.offset =   2, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  16, .addend =   0, .kind = HOLE_oparg},
    {.offset =  64, .addend =   0, .kind = HOLE_continue},
};
static const Stencil LOAD_FAST__LOAD_FAST_stencil = {
    .nbytes = Py_ARRAY_LENGTH(LOAD_FAST__LOAD_FAST_stencil_bytes),
    .bytes = LOAD_FAST__LOAD_FAST_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(LOAD_FAST__LOAD_FAST_stencil_holes),
    .holes = LOAD_FAST__LOAD_FAST_stencil_holes,
};

// STORE_FAST
static const unsigned char STORE_FAST_stencil_bytes[] = {
    0x50, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0x38, 0x49,
    0x8B, 0x44, 0x24, 0xF8, 0x49, 0x83, 0xC4, 0xF8,
    0x48, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x48, 0x63, 0xC9, 0x48, 0x8B, 0x7C,
    0xCD, 0x48, 0x48, 0x89, 0x44, 0xCD, 0x48, 0x48,
    0x85, 0xFF, 0x74, 0x06, 0x48, 0x83, 0x07, 0xFF,
    0x74, 0x0D, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x59, 0xFF, 0xE0, 0x48,
    0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xD0, 0x48, 0xB8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xFF, 0xE0,
};
static const Hole STORE_FAST_stencil_holes[] = {
    {.offset =   3, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  26, .addend =   0, .kind = HOLE_oparg},
    {.offset =  60, .addend =   0, .kind = HOLE_continue},
    {.offset =  73, .addend =   0, .kind = LOAD__Py_Dealloc},
    {.offset =  85, .addend =   0, .kind = HOLE_continue},
};
static const Stencil STORE_FAST_stencil = {
    .nbytes = Py_ARRAY_LENGTH(STORE_FAST_stencil_bytes),
    .bytes = STORE_FAST_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(STORE_FAST_stencil_holes),
    .holes = STORE_FAST_stencil_holes,
};

// STORE_FAST__LOAD_FAST
static const unsigned char STORE_FAST__LOAD_FAST_stencil_bytes[] = {
    0x50, 0x48, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x48, 0x89, 0x5D, 0x38, 0x49,
    0x8B, 0x44, 0x24, 0xF8, 0x48, 0xB9, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x63,
    0xC9, 0x48, 0x8B, 0x7C, 0xCD, 0x48, 0x48, 0x89,
    0x44, 0xCD, 0x48, 0x48, 0x85, 0xFF, 0x74, 0x12,
    0x48, 0x83, 0x07, 0xFF, 0x75, 0x0C, 0x48, 0xB8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xD0, 0x0F, 0xB6, 0x43, 0x03, 0x48, 0x8B,
    0x44, 0xC5, 0x48, 0x48, 0x83, 0x00, 0x01, 0x49,
    0x89, 0x44, 0x24, 0xF8, 0x48, 0xB8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xFF,
    0xE0,
};
static const Hole STORE_FAST__LOAD_FAST_stencil_holes[] = {
    {.offset =   3, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  22, .addend =   0, .kind = HOLE_oparg},
    {.offset =  56, .addend =   0, .kind = LOAD__Py_Dealloc},
    {.offset =  86, .addend =   0, .kind = HOLE_continue},
};
static const Stencil STORE_FAST__LOAD_FAST_stencil = {
    .nbytes = Py_ARRAY_LENGTH(STORE_FAST__LOAD_FAST_stencil_bytes),
    .bytes = STORE_FAST__LOAD_FAST_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(STORE_FAST__LOAD_FAST_stencil_holes),
    .holes = STORE_FAST__LOAD_FAST_stencil_holes,
};

// STORE_FAST__STORE_FAST
static const unsigned char STORE_FAST__STORE_FAST_stencil_bytes[] = {
    0x50, 0x49, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x4C, 0x89, 0x75, 0x38, 0x49,
    0x8B, 0x5C, 0x24, 0xF0, 0x49, 0x8B, 0x44, 0x24,
    0xF8, 0x48, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x48, 0x63, 0xC9, 0x48, 0x8B,
    0x7C, 0xCD, 0x48, 0x48, 0x89, 0x44, 0xCD, 0x48,
    0x48, 0x85, 0xFF, 0x74, 0x12, 0x48, 0x83, 0x07,
    0xFF, 0x75, 0x0C, 0x48, 0xB8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x49,
    0x83, 0xC4, 0xF0, 0x41, 0x0F, 0xB6, 0x46, 0x03,
    0x48, 0x8B, 0x7C, 0xC5, 0x48, 0x48, 0x89, 0x5C,
    0xC5, 0x48, 0x48, 0x85, 0xFF, 0x74, 0x06, 0x48,
    0x83, 0x07, 0xFF, 0x74, 0x0D, 0x48, 0xB8, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59,
    0xFF, 0xE0, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x48, 0xB8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x59, 0xFF, 0xE0,
};
static const Hole STORE_FAST__STORE_FAST_stencil_holes[] = {
    {.offset =   3, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  27, .addend =   0, .kind = HOLE_oparg},
    {.offset =  61, .addend =   0, .kind = LOAD__Py_Dealloc},
    {.offset = 103, .addend =   0, .kind = HOLE_continue},
    {.offset = 116, .addend =   0, .kind = LOAD__Py_Dealloc},
    {.offset = 128, .addend =   0, .kind = HOLE_continue},
};
static const Stencil STORE_FAST__STORE_FAST_stencil = {
    .nbytes = Py_ARRAY_LENGTH(STORE_FAST__STORE_FAST_stencil_bytes),
    .bytes = STORE_FAST__STORE_FAST_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(STORE_FAST__STORE_FAST_stencil_holes),
    .holes = STORE_FAST__STORE_FAST_stencil_holes,
};

// STORE_SUBSCR_LIST_INT
static const unsigned char STORE_SUBSCR_LIST_INT_stencil_bytes[] = {
    0x50, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0x38, 0x49,
    0x8B, 0x5C, 0x24, 0xF8, 0x48, 0xB8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39,
    0x43, 0x08, 0x75, 0x59, 0x4D, 0x8B, 0x74, 0x24,
    0xF0, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x49, 0x39, 0x46, 0x08, 0x75,
    0x44, 0x48, 0x83, 0x7B, 0x10, 0x08, 0x77, 0x3D,
    0x8B, 0x43, 0x18, 0x49, 0x39, 0x46, 0x10, 0x7E,
    0x34, 0x49, 0x8B, 0x4C, 0x24, 0xE8, 0x49, 0x8B,
    0x56, 0x18, 0x48, 0x8B, 0x3C, 0xC2, 0x48, 0x89,
    0x0C, 0xC2, 0x48, 0x83, 0x07, 0xFF, 0x74, 0x33,
    0x48, 0x83, 0x03, 0xFF, 0x74, 0x3F, 0x49, 0x83,
    0xC4, 0xE8, 0x49, 0x83, 0x06, 0xFF, 0x74, 0x4E,
    0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x59, 0xFF, 0xE0, 0x49, 0x29, 0xEC,
    0x49, 0x83, 0xC4, 0xB8, 0x49, 0xC1, 0xEC, 0x03,
    0x44, 0x89, 0x65, 0x40, 0xB8, 0xFF, 0xFF, 0xFF,
    0xFF, 0x59, 0xC3, 0x48, 0xB8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x48,
    0x83, 0x03, 0xFF, 0x75, 0xC1, 0x48, 0xB8, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48,
    0x89, 0xDF, 0xFF, 0xD0, 0x49, 0x83, 0xC4, 0xE8,
    0x49, 0x83, 0x06, 0xFF, 0x75, 0xB2, 0x48, 0xB8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x4C, 0x89, 0xF7, 0xFF, 0xD0, 0x48, 0xB8, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59,
    0xFF, 0xE0,
};
static const Hole STORE_SUBSCR_LIST_INT_stencil_holes[] = {
    {.offset =   3, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  22, .addend =   0, .kind = LOAD_PyLong_Type},
    {.offset =  43, .addend =   0, .kind = LOAD_PyList_Type},
    {.offset = 114, .addend =   0, .kind = HOLE_continue},
    {.offset = 149, .addend =   0, .kind = LOAD__Py_Dealloc},
    {.offset = 167, .addend =   0, .kind = LOAD_PyObject_Free},
    {.offset = 192, .addend =   0, .kind = LOAD__Py_Dealloc},
    {.offset = 207, .addend =   0, .kind = HOLE_continue},
};
static const Stencil STORE_SUBSCR_LIST_INT_stencil = {
    .nbytes = Py_ARRAY_LENGTH(STORE_SUBSCR_LIST_INT_stencil_bytes),
    .bytes = STORE_SUBSCR_LIST_INT_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(STORE_SUBSCR_LIST_INT_stencil_holes),
    .holes = STORE_SUBSCR_LIST_INT_stencil_holes,
};

// SWAP
static const unsigned char SWAP_stencil_bytes[] = {
    0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x48, 0x89, 0x45, 0x38, 0x49, 0x8B,
    0x44, 0x24, 0xF8, 0x48, 0xB9, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xF7, 0xD9, 0x48,
    0x63, 0xC9, 0x49, 0x8B, 0x14, 0xCC, 0x49, 0x89,
    0x54, 0x24, 0xF8, 0x49, 0x89, 0x04, 0xCC, 0x48,
    0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xE0,
};
static const Hole SWAP_stencil_holes[] = {
    {.offset =   2, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  21, .addend =   0, .kind = HOLE_oparg},
    {.offset =  49, .addend =   0, .kind = HOLE_continue},
};
static const Stencil SWAP_stencil = {
    .nbytes = Py_ARRAY_LENGTH(SWAP_stencil_bytes),
    .bytes = SWAP_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(SWAP_stencil_holes),
    .holes = SWAP_stencil_holes,
};

// UNPACK_SEQUENCE_LIST
static const unsigned char UNPACK_SEQUENCE_LIST_stencil_bytes[] = {
    0x50, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0x38, 0x49,
    0x8B, 0x7C, 0x24, 0xF8, 0x48, 0xB8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39,
    0x47, 0x08, 0x0F, 0x85, 0x94, 0x00, 0x00, 0x00,
    0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x48, 0x98, 0x48, 0x39, 0x47, 0x10,
    0x0F, 0x85, 0x7E, 0x00, 0x00, 0x00, 0x48, 0xB8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x85, 0xC0, 0x7E, 0x3D, 0x49, 0x8D, 0x44, 0x24,
    0xF8, 0x48, 0x8B, 0x57, 0x18, 0x48, 0xB9, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8D,
    0x71, 0xFF, 0x48, 0x8D, 0x14, 0xF2, 0x66, 0x2E,
    0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x8B, 0x32, 0x48, 0x83, 0x06, 0x01, 0x48,
    0x89, 0x30, 0x48, 0x83, 0xC0, 0x08, 0x83, 0xC1,
    0xFF, 0x48, 0x83, 0xC2, 0xF8, 0x85, 0xC9, 0x7F,
    0xE7, 0x48, 0x83, 0x07, 0xFF, 0x75, 0x0C, 0x48,
    0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xD0, 0x48, 0xB8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x98, 0x4D,
    0x8D, 0x24, 0xC4, 0x49, 0x83, 0xC4, 0xF8, 0x48,
    0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x59, 0xFF, 0xE0, 0x49, 0x29, 0xEC, 0x49,
    0x83, 0xC4, 0xB8, 0x49, 0xC1, 0xEC, 0x03, 0x44,
    0x89, 0x65, 0x40, 0xB8, 0xFF, 0xFF, 0xFF, 0xFF,
    0x59, 0xC3,
};
static const Hole UNPACK_SEQUENCE_LIST_stencil_holes[] = {
    {.offset =   3, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  22, .addend =   0, .kind = LOAD_PyList_Type},
    {.offset =  42, .addend =   0, .kind = HOLE_oparg},
    {.offset =  64, .addend =   0, .kind = HOLE_oparg},
    {.offset =  87, .addend =   0, .kind = HOLE_oparg},
    {.offset = 145, .addend =   0, .kind = LOAD__Py_Dealloc},
    {.offset = 157, .addend =   0, .kind = HOLE_oparg},
    {.offset = 177, .addend =   0, .kind = HOLE_continue},
};
static const Stencil UNPACK_SEQUENCE_LIST_stencil = {
    .nbytes = Py_ARRAY_LENGTH(UNPACK_SEQUENCE_LIST_stencil_bytes),
    .bytes = UNPACK_SEQUENCE_LIST_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(UNPACK_SEQUENCE_LIST_stencil_holes),
    .holes = UNPACK_SEQUENCE_LIST_stencil_holes,
};

// UNPACK_SEQUENCE_TUPLE
static const unsigned char UNPACK_SEQUENCE_TUPLE_stencil_bytes[] = {
    0x50, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0x38, 0x49,
    0x8B, 0x7C, 0x24, 0xF8, 0x48, 0xB8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39,
    0x47, 0x08, 0x0F, 0x85, 0x94, 0x00, 0x00, 0x00,
    0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x48, 0x98, 0x48, 0x39, 0x47, 0x10,
    0x0F, 0x85, 0x7E, 0x00, 0x00, 0x00, 0x48, 0xB8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x85, 0xC0, 0x7E, 0x3D, 0x49, 0x8D, 0x44, 0x24,
    0xF8, 0x48, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x8D, 0x51, 0xFF, 0x48, 0x8D,
    0x14, 0xD7, 0x48, 0x83, 0xC2, 0x18, 0x66, 0x2E,
    0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x8B, 0x32, 0x48, 0x83, 0x06, 0x01, 0x48,
    0x89, 0x30, 0x48, 0x83, 0xC0, 0x08, 0x83, 0xC1,
    0xFF, 0x48, 0x83, 0xC2, 0xF8, 0x85, 0xC9, 0x7F,
    0xE7, 0x48, 0x83, 0x07, 0xFF, 0x75, 0x0C, 0x48,
    0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xD0, 0x48, 0xB8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x98, 0x4D,
    0x8D, 0x24, 0xC4, 0x49, 0x83, 0xC4, 0xF8, 0x48,
    0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x59, 0xFF, 0xE0, 0x49, 0x29, 0xEC, 0x49,
    0x83, 0xC4, 0xB8, 0x49, 0xC1, 0xEC, 0x03, 0x44,
    0x89, 0x65, 0x40, 0xB8, 0xFF, 0xFF, 0xFF, 0xFF,
    0x59, 0xC3,
};
static const Hole UNPACK_SEQUENCE_TUPLE_stencil_holes[] = {
    {.offset =   3, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  22, .addend =   0, .kind = LOAD_PyTuple_Type},
    {.offset =  42, .addend =   0, .kind = HOLE_oparg},
    {.offset =  64, .addend =   0, .kind = HOLE_oparg},
    {.offset =  83, .addend =   0, .kind = HOLE_oparg},
    {.offset = 145, .addend =   0, .kind = LOAD__Py_Dealloc},
    {.offset = 157, .addend =   0, .kind = HOLE_oparg},
    {.offset = 177, .addend =   0, .kind = HOLE_continue},
};
static const Stencil UNPACK_SEQUENCE_TUPLE_stencil = {
    .nbytes = Py_ARRAY_LENGTH(UNPACK_SEQUENCE_TUPLE_stencil_bytes),
    .bytes = UNPACK_SEQUENCE_TUPLE_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(UNPACK_SEQUENCE_TUPLE_stencil_holes),
    .holes = UNPACK_SEQUENCE_TUPLE_stencil_holes,
};

// UNPACK_SEQUENCE_TWO_TUPLE
static const unsigned char UNPACK_SEQUENCE_TWO_TUPLE_stencil_bytes[] = {
    0x50, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0x38, 0x49,
    0x8B, 0x7C, 0x24, 0xF8, 0x48, 0xB8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39,
    0x47, 0x08, 0x75, 0x53, 0x48, 0x83, 0x7F, 0x10,
    0x02, 0x75, 0x4C, 0x48, 0x8B, 0x47, 0x20, 0x48,
    0x83, 0x00, 0x01, 0x49, 0x89, 0x44, 0x24, 0xF8,
    0x48, 0x8B, 0x47, 0x18, 0x48, 0x83, 0x00, 0x01,
    0x49, 0x89, 0x04, 0x24, 0x48, 0x83, 0x07, 0xFF,
    0x75, 0x0C, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x48, 0xB8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x98, 0x4D, 0x8D, 0x24, 0xC4, 0x49, 0x83,
    0xC4, 0xF8, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x59, 0xFF, 0xE0, 0x49,
    0x29, 0xEC, 0x49, 0x83, 0xC4, 0xB8, 0x49, 0xC1,
    0xEC, 0x03, 0x44, 0x89, 0x65, 0x40, 0xB8, 0xFF,
    0xFF, 0xFF, 0xFF, 0x59, 0xC3,
};
static const Hole UNPACK_SEQUENCE_TWO_TUPLE_stencil_holes[] = {
    {.offset =   3, .addend =   0, .kind = HOLE_next_instr},
    {.offset =  22, .addend =   0, .kind = LOAD_PyTuple_Type},
    {.offset =  76, .addend =   0, .kind = LOAD__Py_Dealloc},
    {.offset =  88, .addend =   0, .kind = HOLE_oparg},
    {.offset = 108, .addend =   0, .kind = HOLE_continue},
};
static const Stencil UNPACK_SEQUENCE_TWO_TUPLE_stencil = {
    .nbytes = Py_ARRAY_LENGTH(UNPACK_SEQUENCE_TWO_TUPLE_stencil_bytes),
    .bytes = UNPACK_SEQUENCE_TWO_TUPLE_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(UNPACK_SEQUENCE_TWO_TUPLE_stencil_holes),
    .holes = UNPACK_SEQUENCE_TWO_TUPLE_stencil_holes,
};

// trampoline
static const unsigned char trampoline_stencil_bytes[] = {
    0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41,
    0x54, 0x53, 0x50, 0x48, 0xB8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x48,
    0x8B, 0x48, 0x38, 0x0F, 0x1F, 0x44, 0x00, 0x00,
    0x48, 0x8B, 0x49, 0x08, 0x80, 0x79, 0x46, 0x01,
    0x74, 0x1B, 0x48, 0x8B, 0x11, 0x48, 0x63, 0xB2,
    0xA8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x14, 0x72,
    0x48, 0x81, 0xC2, 0xC0, 0x00, 0x00, 0x00, 0x48,
    0x39, 0x51, 0x38, 0x72, 0xDB, 0x48, 0x8B, 0x69,
    0x08, 0x48, 0x85, 0xED, 0x74, 0x2D, 0x66, 0x90,
    0x80, 0x7D, 0x46, 0x01, 0x74, 0x27, 0x48, 0x8B,
    0x4D, 0x00, 0x48, 0x63, 0x91, 0xA8, 0x00, 0x00,
    0x00, 0x48, 0x8D, 0x0C, 0x51, 0x48, 0x81, 0xC1,
    0xC0, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4D, 0x38,
    0x73, 0x0B, 0x48, 0x8B, 0x6D, 0x08, 0x48, 0x85,
    0xED, 0x75, 0xD5, 0x31, 0xED, 0x48, 0x63, 0x4D,
    0x40, 0x4C, 0x8D, 0x24, 0xCD, 0x48, 0x00, 0x00,
    0x00, 0x49, 0x01, 0xEC, 0x48, 0xB9, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
    0xC5, 0xFF, 0xD1, 0x48, 0x83, 0xC4, 0x08, 0x5B,
    0x41, 0x5C, 0x41, 0x5D, 0x41, 0x5E, 0x41, 0x5F,
    0x5D, 0xC3,
};
static const Hole trampoline_stencil_holes[] = {
    {.offset =  13, .addend =   0, .kind = LOAD_PyThreadState_Get},
    {.offset = 142, .addend =   0, .kind = HOLE_continue},
};
static const Stencil trampoline_stencil = {
    .nbytes = Py_ARRAY_LENGTH(trampoline_stencil_bytes),
    .bytes = trampoline_stencil_bytes,
    .nholes = Py_ARRAY_LENGTH(trampoline_stencil_holes),
    .holes = trampoline_stencil_holes,
};

static const Stencil stencils[256] = {
    [BINARY_OP] = BINARY_OP_stencil,
    [BINARY_OP_ADD_FLOAT] = BINARY_OP_ADD_FLOAT_stencil,
    [BINARY_OP_MULTIPLY_FLOAT] = BINARY_OP_MULTIPLY_FLOAT_stencil,
    [BINARY_OP_SUBTRACT_FLOAT] = BINARY_OP_SUBTRACT_FLOAT_stencil,
    [BINARY_SUBSCR_LIST_INT] = BINARY_SUBSCR_LIST_INT_stencil,
    [COPY] = COPY_stencil,
    [FOR_ITER_LIST] = FOR_ITER_LIST_stencil,
    [JUMP_BACKWARD] = JUMP_BACKWARD_stencil,
    [LOAD_CONST] = LOAD_CONST_stencil,
    [LOAD_FAST] = LOAD_FAST_stencil,
    [LOAD_FAST__LOAD_CONST] = LOAD_FAST__LOAD_CONST_stencil,
    [LOAD_FAST__LOAD_FAST] = LOAD_FAST__LOAD_FAST_stencil,
    [STORE_FAST] = STORE_FAST_stencil,
    [STORE_FAST__LOAD_FAST] = STORE_FAST__LOAD_FAST_stencil,
    [STORE_FAST__STORE_FAST] = STORE_FAST__STORE_FAST_stencil,
    [STORE_SUBSCR_LIST_INT] = STORE_SUBSCR_LIST_INT_stencil,
    [SWAP] = SWAP_stencil,
    [UNPACK_SEQUENCE_LIST] = UNPACK_SEQUENCE_LIST_stencil,
    [UNPACK_SEQUENCE_TUPLE] = UNPACK_SEQUENCE_TUPLE_stencil,
    [UNPACK_SEQUENCE_TWO_TUPLE] = UNPACK_SEQUENCE_TWO_TUPLE_stencil,
};

#define GET_PATCHES() \
    { \
        [HOLE_base] = 0xBAD0BAD0BAD0BAD0, \
        [HOLE_continue] = 0xBAD0BAD0BAD0BAD0, \
        [HOLE_next_instr] = 0xBAD0BAD0BAD0BAD0, \
        [HOLE_next_trace] = 0xBAD0BAD0BAD0BAD0, \
        [HOLE_oparg] = 0xBAD0BAD0BAD0BAD0, \
        [LOAD_PyFloat_FromDouble] = (uintptr_t)&PyFloat_FromDouble, \
        [LOAD_PyFloat_Type] = (uintptr_t)&PyFloat_Type, \
        [LOAD_PyListIter_Type] = (uintptr_t)&PyListIter_Type, \
        [LOAD_PyList_Type] = (uintptr_t)&PyList_Type, \
        [LOAD_PyLong_Type] = (uintptr_t)&PyLong_Type, \
        [LOAD_PyNumber_Add] = (uintptr_t)&PyNumber_Add, \
        [LOAD_PyNumber_And] = (uintptr_t)&PyNumber_And, \
        [LOAD_PyNumber_FloorDivide] = (uintptr_t)&PyNumber_FloorDivide, \
        [LOAD_PyNumber_InPlaceAdd] = (uintptr_t)&PyNumber_InPlaceAdd, \
        [LOAD_PyNumber_InPlaceAnd] = (uintptr_t)&PyNumber_InPlaceAnd, \
        [LOAD_PyNumber_InPlaceFloorDivide] = (uintptr_t)&PyNumber_InPlaceFloorDivide, \
        [LOAD_PyNumber_InPlaceLshift] = (uintptr_t)&PyNumber_InPlaceLshift, \
        [LOAD_PyNumber_InPlaceMatrixMultiply] = (uintptr_t)&PyNumber_InPlaceMatrixMultiply, \
        [LOAD_PyNumber_InPlaceMultiply] = (uintptr_t)&PyNumber_InPlaceMultiply, \
        [LOAD_PyNumber_InPlaceOr] = (uintptr_t)&PyNumber_InPlaceOr, \
        [LOAD_PyNumber_InPlaceRemainder] = (uintptr_t)&PyNumber_InPlaceRemainder, \
        [LOAD_PyNumber_InPlaceRshift] = (uintptr_t)&PyNumber_InPlaceRshift, \
        [LOAD_PyNumber_InPlaceSubtract] = (uintptr_t)&PyNumber_InPlaceSubtract, \
        [LOAD_PyNumber_InPlaceTrueDivide] = (uintptr_t)&PyNumber_InPlaceTrueDivide, \
        [LOAD_PyNumber_InPlaceXor] = (uintptr_t)&PyNumber_InPlaceXor, \
        [LOAD_PyNumber_Lshift] = (uintptr_t)&PyNumber_Lshift, \
        [LOAD_PyNumber_MatrixMultiply] = (uintptr_t)&PyNumber_MatrixMultiply, \
        [LOAD_PyNumber_Multiply] = (uintptr_t)&PyNumber_Multiply, \
        [LOAD_PyNumber_Or] = (uintptr_t)&PyNumber_Or, \
        [LOAD_PyNumber_Remainder] = (uintptr_t)&PyNumber_Remainder, \
        [LOAD_PyNumber_Rshift] = (uintptr_t)&PyNumber_Rshift, \
        [LOAD_PyNumber_Subtract] = (uintptr_t)&PyNumber_Subtract, \
        [LOAD_PyNumber_TrueDivide] = (uintptr_t)&PyNumber_TrueDivide, \
        [LOAD_PyNumber_Xor] = (uintptr_t)&PyNumber_Xor, \
        [LOAD_PyObject_Free] = (uintptr_t)&PyObject_Free, \
        [LOAD_PyThreadState_Get] = (uintptr_t)&PyThreadState_Get, \
        [LOAD_PyTuple_Type] = (uintptr_t)&PyTuple_Type, \
        [LOAD__PyFloat_ExactDealloc] = (uintptr_t)&_PyFloat_ExactDealloc, \
        [LOAD__PyNumber_InPlacePowerNoMod] = (uintptr_t)&_PyNumber_InPlacePowerNoMod, \
        [LOAD__PyNumber_PowerNoMod] = (uintptr_t)&_PyNumber_PowerNoMod, \
        [LOAD__Py_Dealloc] = (uintptr_t)&_Py_Dealloc, \
    }
