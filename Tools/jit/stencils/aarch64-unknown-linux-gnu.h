void
emit_shim(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // shim.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 6db63bef      stp     d15, d14, [sp, #-0xa0]!
    // 4: a90857f6      stp     x22, x21, [sp, #0x80]
    // 8: aa0103f5      mov     x21, x1
    // c: aa0203f6      mov     x22, x2
    // 10: a9094ff4      stp     x20, x19, [sp, #0x90]
    // 14: aa0003f4      mov     x20, x0
    // 18: 6d0133ed      stp     d13, d12, [sp, #0x10]
    // 1c: 6d022beb      stp     d11, d10, [sp, #0x20]
    // 20: 6d0323e9      stp     d9, d8, [sp, #0x30]
    // 24: a9047bfd      stp     x29, x30, [sp, #0x40]
    // 28: 910103fd      add     x29, sp, #0x40
    // 2c: a9056ffc      stp     x28, x27, [sp, #0x50]
    // 30: a90667fa      stp     x26, x25, [sp, #0x60]
    // 34: a9075ff8      stp     x24, x23, [sp, #0x70]
    // 38: 94000000      bl      0x38 <_JIT_ENTRY+0x38>
    // 0000000000000038:  R_AARCH64_CALL26     _JIT_CONTINUE
    // 3c: a9494ff4      ldp     x20, x19, [sp, #0x90]
    // 40: a94857f6      ldp     x22, x21, [sp, #0x80]
    // 44: a9475ff8      ldp     x24, x23, [sp, #0x70]
    // 48: a94667fa      ldp     x26, x25, [sp, #0x60]
    // 4c: a9456ffc      ldp     x28, x27, [sp, #0x50]
    // 50: a9447bfd      ldp     x29, x30, [sp, #0x40]
    // 54: 6d4323e9      ldp     d9, d8, [sp, #0x30]
    // 58: 6d422beb      ldp     d11, d10, [sp, #0x20]
    // 5c: 6d4133ed      ldp     d13, d12, [sp, #0x10]
    // 60: 6cca3bef      ldp     d15, d14, [sp], #0xa0
    // 64: d65f03c0      ret
    const unsigned char code_body[104] = {
        0xef, 0x3b, 0xb6, 0x6d, 0xf6, 0x57, 0x08, 0xa9,
        0xf5, 0x03, 0x01, 0xaa, 0xf6, 0x03, 0x02, 0xaa,
        0xf4, 0x4f, 0x09, 0xa9, 0xf4, 0x03, 0x00, 0xaa,
        0xed, 0x33, 0x01, 0x6d, 0xeb, 0x2b, 0x02, 0x6d,
        0xe9, 0x23, 0x03, 0x6d, 0xfd, 0x7b, 0x04, 0xa9,
        0xfd, 0x03, 0x01, 0x91, 0xfc, 0x6f, 0x05, 0xa9,
        0xfa, 0x67, 0x06, 0xa9, 0xf8, 0x5f, 0x07, 0xa9,
        0x00, 0x00, 0x00, 0x94, 0xf4, 0x4f, 0x49, 0xa9,
        0xf6, 0x57, 0x48, 0xa9, 0xf8, 0x5f, 0x47, 0xa9,
        0xfa, 0x67, 0x46, 0xa9, 0xfc, 0x6f, 0x45, 0xa9,
        0xfd, 0x7b, 0x44, 0xa9, 0xe9, 0x23, 0x43, 0x6d,
        0xeb, 0x2b, 0x42, 0x6d, 0xed, 0x33, 0x41, 0x6d,
        0xef, 0x3b, 0xca, 0x6c, 0xc0, 0x03, 0x5f, 0xd6,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
}

void
emit__BINARY_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _PyEval_BinaryOps
    // c: 910003fd      mov     x29, sp
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_BinaryOps
    // 18: a97f4eb8      ldp     x24, x19, [x21, #-0x10]
    // 1c: f9002295      str     x21, [x20, #0x40]
    // 20: 92403d08      and     x8, x8, #0xffff
    // 24: f8687928      ldr     x8, [x9, x8, lsl #3]
    // 28: aa1803e0      mov     x0, x24
    // 2c: aa1303e1      mov     x1, x19
    // 30: d63f0100      blr     x8
    // 34: f9402299      ldr     x25, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: aa0003f7      mov     x23, x0
    // 40: b9400308      ldr     w8, [x24]
    // 44: 37f80108      tbnz    w8, #0x1f, 0x64 <_JIT_ENTRY+0x64>
    // 48: 71000508      subs    w8, w8, #0x1
    // 4c: b9000308      str     w8, [x24]
    // 50: 540000a1      b.ne    0x64 <_JIT_ENTRY+0x64>
    // 54: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 58: aa1803e0      mov     x0, x24
    // 5c: f9400108      ldr     x8, [x8]
    // 000000000000005c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 60: d63f0100      blr     x8
    // 64: b9400268      ldr     w8, [x19]
    // 68: 37f80088      tbnz    w8, #0x1f, 0x78 <_JIT_ENTRY+0x78>
    // 6c: 71000508      subs    w8, w8, #0x1
    // 70: b9000268      str     w8, [x19]
    // 74: 540000c0      b.eq    0x8c <_JIT_ENTRY+0x8c>
    // 78: b4000157      cbz     x23, 0xa0 <_JIT_ENTRY+0xa0>
    // 7c: d1002335      sub     x21, x25, #0x8
    // 80: f81f0337      stur    x23, [x25, #-0x10]
    // 84: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 88: 14000000      b       0x88 <_JIT_ENTRY+0x88>
    // 0000000000000088:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 8c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 90: aa1303e0      mov     x0, x19
    // 94: f9400108      ldr     x8, [x8]
    // 0000000000000094:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 98: d63f0100      blr     x8
    // 9c: b5ffff17      cbnz    x23, 0x7c <_JIT_ENTRY+0x7c>
    // a0: d1004335      sub     x21, x25, #0x10
    // a4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a8: 14000000      b       0xa8 <_JIT_ENTRY+0xa8>
    // 00000000000000a8:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // ac: 00 00 00 00
    const unsigned char code_body[176] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xb8, 0x4e, 0x7f, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x3d, 0x40, 0x92, 0x28, 0x79, 0x68, 0xf8,
        0xe0, 0x03, 0x18, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x99, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf7, 0x03, 0x00, 0xaa,
        0x08, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xc0, 0x00, 0x00, 0x54,
        0x57, 0x01, 0x00, 0xb4, 0x35, 0x23, 0x00, 0xd1,
        0x37, 0x03, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x17, 0xff, 0xff, 0xb5,
        0x35, 0x43, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_BinaryOps+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_BinaryOps);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x54, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x5c, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x88, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x8c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x94, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xa8, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_ADD_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_ADD_FLOAT.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f8ea1      ldr     x1, [x21, #-0x8]!
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e60      ldr     x0, [x19, #-0x8]!
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  R_AARCH64_ADR_GOT_PAGE       _PyFloat_FromDouble_ConsumeInputs
    // 14: fd400820      ldr     d0, [x1, #0x10]
    // 18: 910003fd      mov     x29, sp
    // 1c: fd400801      ldr     d1, [x0, #0x10]
    // 20: f9400108      ldr     x8, [x8]
    // 0000000000000020:  R_AARCH64_LD64_GOT_LO12_NC   _PyFloat_FromDouble_ConsumeInputs
    // 24: 1e602820      fadd    d0, d1, d0
    // 28: d63f0100      blr     x8
    // 2c: b4000080      cbz     x0, 0x3c <_JIT_ENTRY+0x3c>
    // 30: f9000260      str     x0, [x19]
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 14000000      b       0x38 <_JIT_ENTRY+0x38>
    // 0000000000000038:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 3c: aa1303f5      mov     x21, x19
    // 40: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 44: 14000000      b       0x44 <_JIT_ENTRY+0x44>
    // 0000000000000044:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[72] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xa1, 0x8e, 0x5f, 0xf8,
        0xf3, 0x03, 0x15, 0xaa, 0x60, 0x8e, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x20, 0x08, 0x40, 0xfd,
        0xfd, 0x03, 0x00, 0x91, 0x01, 0x08, 0x40, 0xfd,
        0x08, 0x01, 0x40, 0xf9, 0x20, 0x28, 0x60, 0x1e,
        0x00, 0x01, 0x3f, 0xd6, 0x80, 0x00, 0x00, 0xb4,
        0x60, 0x02, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyFloat_FromDouble_ConsumeInputs+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x20, (uintptr_t)data);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x44, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_ADD_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_ADD_INT.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f8eb9      ldr     x25, [x21, #-0x8]!
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e78      ldr     x24, [x19, #-0x8]!
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  R_AARCH64_ADR_GOT_PAGE       _PyLong_Add
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _PyLong_Add
    // 18: aa1903e1      mov     x1, x25
    // 1c: 910003fd      mov     x29, sp
    // 20: aa1803e0      mov     x0, x24
    // 24: d63f0100      blr     x8
    // 28: b9400328      ldr     w8, [x25]
    // 2c: aa0003f7      mov     x23, x0
    // 30: 37f80208      tbnz    w8, #0x1f, 0x70 <_JIT_ENTRY+0x70>
    // 34: 71000508      subs    w8, w8, #0x1
    // 38: b9000328      str     w8, [x25]
    // 3c: 540001a1      b.ne    0x70 <_JIT_ENTRY+0x70>
    // 40: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 44: f9400129      ldr     x9, [x9]
    // 0000000000000044:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 48: f9544928      ldr     x8, [x9, #0x2890]
    // 4c: b40000a8      cbz     x8, 0x60 <_JIT_ENTRY+0x60>
    // 50: f9544d22      ldr     x2, [x9, #0x2898]
    // 54: aa1903e0      mov     x0, x25
    // 58: 52800021      mov     w1, #0x1                // =1
    // 5c: d63f0100      blr     x8
    // 60: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  R_AARCH64_ADR_GOT_PAGE       _PyLong_ExactDealloc
    // 64: aa1903e0      mov     x0, x25
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  R_AARCH64_LD64_GOT_LO12_NC   _PyLong_ExactDealloc
    // 6c: d63f0100      blr     x8
    // 70: b9400308      ldr     w8, [x24]
    // 74: 37f80088      tbnz    w8, #0x1f, 0x84 <_JIT_ENTRY+0x84>
    // 78: 71000508      subs    w8, w8, #0x1
    // 7c: b9000308      str     w8, [x24]
    // 80: 540000a0      b.eq    0x94 <_JIT_ENTRY+0x94>
    // 84: b4000237      cbz     x23, 0xc8 <_JIT_ENTRY+0xc8>
    // 88: f9000277      str     x23, [x19]
    // 8c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 90: 14000000      b       0x90 <_JIT_ENTRY+0x90>
    // 0000000000000090:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 94: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 98: f9400129      ldr     x9, [x9]
    // 0000000000000098:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 9c: f9544928      ldr     x8, [x9, #0x2890]
    // a0: b40000a8      cbz     x8, 0xb4 <_JIT_ENTRY+0xb4>
    // a4: f9544d22      ldr     x2, [x9, #0x2898]
    // a8: aa1803e0      mov     x0, x24
    // ac: 52800021      mov     w1, #0x1                // =1
    // b0: d63f0100      blr     x8
    // b4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  R_AARCH64_ADR_GOT_PAGE       _PyLong_ExactDealloc
    // b8: aa1803e0      mov     x0, x24
    // bc: f9400108      ldr     x8, [x8]
    // 00000000000000bc:  R_AARCH64_LD64_GOT_LO12_NC   _PyLong_ExactDealloc
    // c0: d63f0100      blr     x8
    // c4: b5fffe37      cbnz    x23, 0x88 <_JIT_ENTRY+0x88>
    // c8: aa1303f5      mov     x21, x19
    // cc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d0: 14000000      b       0xd0 <_JIT_ENTRY+0xd0>
    // 00000000000000d0:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // d4: 00 00 00 00
    const unsigned char code_body[216] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb9, 0x8e, 0x5f, 0xf8,
        0xf3, 0x03, 0x15, 0xaa, 0x78, 0x8e, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x19, 0xaa, 0xfd, 0x03, 0x00, 0x91,
        0xe0, 0x03, 0x18, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x28, 0x03, 0x40, 0xb9, 0xf7, 0x03, 0x00, 0xaa,
        0x08, 0x02, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x28, 0x03, 0x00, 0xb9, 0xa1, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x49, 0x54, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x4d, 0x54, 0xf9, 0xe0, 0x03, 0x19, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x19, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x03, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x37, 0x02, 0x00, 0xb4,
        0x77, 0x02, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x49, 0x54, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x4d, 0x54, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x37, 0xfe, 0xff, 0xb5,
        0xf5, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyLong_Add+0x0
    // 8: &_PyRuntime+0x0
    // 10: &_PyLong_ExactDealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyLong_Add);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyLong_ExactDealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x68, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x90, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x94, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xb4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xbc, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xd0, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_ADD_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_ADD_UNICODE.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f8eb9      ldr     x25, [x21, #-0x8]!
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e78      ldr     x24, [x19, #-0x8]!
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  R_AARCH64_ADR_GOT_PAGE       PyUnicode_Concat
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   PyUnicode_Concat
    // 18: aa1903e1      mov     x1, x25
    // 1c: 910003fd      mov     x29, sp
    // 20: aa1803e0      mov     x0, x24
    // 24: d63f0100      blr     x8
    // 28: b9400328      ldr     w8, [x25]
    // 2c: aa0003f7      mov     x23, x0
    // 30: 37f80208      tbnz    w8, #0x1f, 0x70 <_JIT_ENTRY+0x70>
    // 34: 71000508      subs    w8, w8, #0x1
    // 38: b9000328      str     w8, [x25]
    // 3c: 540001a1      b.ne    0x70 <_JIT_ENTRY+0x70>
    // 40: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 44: f9400129      ldr     x9, [x9]
    // 0000000000000044:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 48: f9544928      ldr     x8, [x9, #0x2890]
    // 4c: b40000a8      cbz     x8, 0x60 <_JIT_ENTRY+0x60>
    // 50: f9544d22      ldr     x2, [x9, #0x2898]
    // 54: aa1903e0      mov     x0, x25
    // 58: 52800021      mov     w1, #0x1                // =1
    // 5c: d63f0100      blr     x8
    // 60: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  R_AARCH64_ADR_GOT_PAGE       _PyUnicode_ExactDealloc
    // 64: aa1903e0      mov     x0, x25
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  R_AARCH64_LD64_GOT_LO12_NC   _PyUnicode_ExactDealloc
    // 6c: d63f0100      blr     x8
    // 70: b9400308      ldr     w8, [x24]
    // 74: 37f80088      tbnz    w8, #0x1f, 0x84 <_JIT_ENTRY+0x84>
    // 78: 71000508      subs    w8, w8, #0x1
    // 7c: b9000308      str     w8, [x24]
    // 80: 540000a0      b.eq    0x94 <_JIT_ENTRY+0x94>
    // 84: b4000237      cbz     x23, 0xc8 <_JIT_ENTRY+0xc8>
    // 88: f9000277      str     x23, [x19]
    // 8c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 90: 14000000      b       0x90 <_JIT_ENTRY+0x90>
    // 0000000000000090:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 94: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 98: f9400129      ldr     x9, [x9]
    // 0000000000000098:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 9c: f9544928      ldr     x8, [x9, #0x2890]
    // a0: b40000a8      cbz     x8, 0xb4 <_JIT_ENTRY+0xb4>
    // a4: f9544d22      ldr     x2, [x9, #0x2898]
    // a8: aa1803e0      mov     x0, x24
    // ac: 52800021      mov     w1, #0x1                // =1
    // b0: d63f0100      blr     x8
    // b4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  R_AARCH64_ADR_GOT_PAGE       _PyUnicode_ExactDealloc
    // b8: aa1803e0      mov     x0, x24
    // bc: f9400108      ldr     x8, [x8]
    // 00000000000000bc:  R_AARCH64_LD64_GOT_LO12_NC   _PyUnicode_ExactDealloc
    // c0: d63f0100      blr     x8
    // c4: b5fffe37      cbnz    x23, 0x88 <_JIT_ENTRY+0x88>
    // c8: aa1303f5      mov     x21, x19
    // cc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d0: 14000000      b       0xd0 <_JIT_ENTRY+0xd0>
    // 00000000000000d0:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // d4: 00 00 00 00
    const unsigned char code_body[216] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb9, 0x8e, 0x5f, 0xf8,
        0xf3, 0x03, 0x15, 0xaa, 0x78, 0x8e, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x19, 0xaa, 0xfd, 0x03, 0x00, 0x91,
        0xe0, 0x03, 0x18, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x28, 0x03, 0x40, 0xb9, 0xf7, 0x03, 0x00, 0xaa,
        0x08, 0x02, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x28, 0x03, 0x00, 0xb9, 0xa1, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x49, 0x54, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x4d, 0x54, 0xf9, 0xe0, 0x03, 0x19, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x19, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x03, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x37, 0x02, 0x00, 0xb4,
        0x77, 0x02, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x49, 0x54, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x4d, 0x54, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x37, 0xfe, 0xff, 0xb5,
        0xf5, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyUnicode_Concat+0x0
    // 8: &_PyRuntime+0x0
    // 10: &_PyUnicode_ExactDealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Concat);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyUnicode_ExactDealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x68, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x90, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x94, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xb4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xbc, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xd0, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_EXTEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_EXTEND.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 8: 910003fd      mov     x29, sp
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 10: a97f4eb8      ldp     x24, x19, [x21, #-0x10]
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: f9400908      ldr     x8, [x8, #0x10]
    // 1c: aa1803e0      mov     x0, x24
    // 20: aa1303e1      mov     x1, x19
    // 24: d63f0100      blr     x8
    // 28: f9402299      ldr     x25, [x20, #0x40]
    // 2c: f900229f      str     xzr, [x20, #0x40]
    // 30: aa0003f7      mov     x23, x0
    // 34: b9400308      ldr     w8, [x24]
    // 38: 37f80108      tbnz    w8, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 3c: 71000508      subs    w8, w8, #0x1
    // 40: b9000308      str     w8, [x24]
    // 44: 540000a1      b.ne    0x58 <_JIT_ENTRY+0x58>
    // 48: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 4c: aa1803e0      mov     x0, x24
    // 50: f9400108      ldr     x8, [x8]
    // 0000000000000050:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 54: d63f0100      blr     x8
    // 58: b9400268      ldr     w8, [x19]
    // 5c: 37f80088      tbnz    w8, #0x1f, 0x6c <_JIT_ENTRY+0x6c>
    // 60: 71000508      subs    w8, w8, #0x1
    // 64: b9000268      str     w8, [x19]
    // 68: 540000a0      b.eq    0x7c <_JIT_ENTRY+0x7c>
    // 6c: d1002335      sub     x21, x25, #0x8
    // 70: f81f0337      stur    x23, [x25, #-0x10]
    // 74: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 78: 14000000      b       0x78 <_JIT_ENTRY+0x78>
    // 0000000000000078:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 7c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 80: aa1303e0      mov     x0, x19
    // 84: f9400108      ldr     x8, [x8]
    // 0000000000000084:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 88: d63f0100      blr     x8
    // 8c: d1002335      sub     x21, x25, #0x8
    // 90: f81f0337      stur    x23, [x25, #-0x10]
    // 94: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 98: 14000000      b       0x98 <_JIT_ENTRY+0x98>
    // 0000000000000098:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[152] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0xb8, 0x4e, 0x7f, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x09, 0x40, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x99, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x03, 0x00, 0xaa, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x35, 0x23, 0x00, 0xd1,
        0x37, 0x03, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x35, 0x23, 0x00, 0xd1,
        0x37, 0x03, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x48, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x50, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x78, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x7c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x84, (uintptr_t)data + 0x8);
}

void
emit__BINARY_OP_INPLACE_ADD_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_INPLACE_ADD_UNICODE.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000018      adrp    x24, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 4: 91014299      add     x25, x20, #0x50
    // 8: aa1503e8      mov     x8, x21
    // c: f9400318      ldr     x24, [x24]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 10: f85f0eb7      ldr     x23, [x21, #-0x10]!
    // 14: f878db29      ldr     x9, [x25, w24, sxtw #3]
    // 18: eb17013f      cmp     x9, x23
    // 1c: 54000060      b.eq    0x28 <_JIT_ENTRY+0x28>
    // 20: aa0803f5      mov     x21, x8
    // 24: 14000000      b       0x24 <_JIT_ENTRY+0x24>
    // 0000000000000024:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 28: d10083ff      sub     sp, sp, #0x20
    // 2c: b94002e9      ldr     w9, [x23]
    // 30: f85f8113      ldur    x19, [x8, #-0x8]
    // 34: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 38: 910043fd      add     x29, sp, #0x10
    // 3c: 37f80209      tbnz    w9, #0x1f, 0x7c <_JIT_ENTRY+0x7c>
    // 40: 71000528      subs    w8, w9, #0x1
    // 44: b90002e8      str     w8, [x23]
    // 48: 540001a1      b.ne    0x7c <_JIT_ENTRY+0x7c>
    // 4c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 50: f9400129      ldr     x9, [x9]
    // 0000000000000050:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 54: f9544928      ldr     x8, [x9, #0x2890]
    // 58: b40000a8      cbz     x8, 0x6c <_JIT_ENTRY+0x6c>
    // 5c: f9544d22      ldr     x2, [x9, #0x2898]
    // 60: aa1703e0      mov     x0, x23
    // 64: 52800021      mov     w1, #0x1                // =1
    // 68: d63f0100      blr     x8
    // 6c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  R_AARCH64_ADR_GOT_PAGE       _PyUnicode_ExactDealloc
    // 70: aa1703e0      mov     x0, x23
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  R_AARCH64_LD64_GOT_LO12_NC   _PyUnicode_ExactDealloc
    // 78: d63f0100      blr     x8
    // 7c: f878db28      ldr     x8, [x25, w24, sxtw #3]
    // 80: 910023e0      add     x0, sp, #0x8
    // 84: aa1303e1      mov     x1, x19
    // 88: f90007e8      str     x8, [sp, #0x8]
    // 8c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  R_AARCH64_ADR_GOT_PAGE       PyUnicode_Append
    // 90: f9400108      ldr     x8, [x8]
    // 0000000000000090:  R_AARCH64_LD64_GOT_LO12_NC   PyUnicode_Append
    // 94: d63f0100      blr     x8
    // 98: f94007e8      ldr     x8, [sp, #0x8]
    // 9c: f838db28      str     x8, [x25, w24, sxtw #3]
    // a0: b9400269      ldr     w9, [x19]
    // a4: 37f80229      tbnz    w9, #0x1f, 0xe8 <_JIT_ENTRY+0xe8>
    // a8: 71000528      subs    w8, w9, #0x1
    // ac: b9000268      str     w8, [x19]
    // b0: 540001a1      b.ne    0xe4 <_JIT_ENTRY+0xe4>
    // b4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // b8: f9400129      ldr     x9, [x9]
    // 00000000000000b8:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // bc: f9544928      ldr     x8, [x9, #0x2890]
    // c0: b40000a8      cbz     x8, 0xd4 <_JIT_ENTRY+0xd4>
    // c4: f9544d22      ldr     x2, [x9, #0x2898]
    // c8: aa1303e0      mov     x0, x19
    // cc: 52800021      mov     w1, #0x1                // =1
    // d0: d63f0100      blr     x8
    // d4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000d4:  R_AARCH64_ADR_GOT_PAGE       _PyUnicode_ExactDealloc
    // d8: aa1303e0      mov     x0, x19
    // dc: f9400108      ldr     x8, [x8]
    // 00000000000000dc:  R_AARCH64_LD64_GOT_LO12_NC   _PyUnicode_ExactDealloc
    // e0: d63f0100      blr     x8
    // e4: f878db28      ldr     x8, [x25, w24, sxtw #3]
    // e8: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // ec: 910083ff      add     sp, sp, #0x20
    // f0: b4000048      cbz     x8, 0xf8 <_JIT_ENTRY+0xf8>
    // f4: 14000000      b       0xf4 <_JIT_ENTRY+0xf4>
    // 00000000000000f4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // f8: 14000000      b       0xf8 <_JIT_ENTRY+0xf8>
    // 00000000000000f8:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // fc: 00 00 00 00
    const unsigned char code_body[256] = {
        0x18, 0x00, 0x00, 0x90, 0x99, 0x42, 0x01, 0x91,
        0xe8, 0x03, 0x15, 0xaa, 0x18, 0x03, 0x40, 0xf9,
        0xb7, 0x0e, 0x5f, 0xf8, 0x29, 0xdb, 0x78, 0xf8,
        0x3f, 0x01, 0x17, 0xeb, 0x60, 0x00, 0x00, 0x54,
        0xf5, 0x03, 0x08, 0xaa, 0x00, 0x00, 0x00, 0x14,
        0xff, 0x83, 0x00, 0xd1, 0xe9, 0x02, 0x40, 0xb9,
        0x13, 0x81, 0x5f, 0xf8, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0x09, 0x02, 0xf8, 0x37,
        0x28, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x49, 0x54, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x4d, 0x54, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x28, 0xdb, 0x78, 0xf8,
        0xe0, 0x23, 0x00, 0x91, 0xe1, 0x03, 0x13, 0xaa,
        0xe8, 0x07, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe8, 0x07, 0x40, 0xf9, 0x28, 0xdb, 0x38, 0xf8,
        0x69, 0x02, 0x40, 0xb9, 0x29, 0x02, 0xf8, 0x37,
        0x28, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa1, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x49, 0x54, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x4d, 0x54, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x28, 0xdb, 0x78, 0xf8,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x48, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: &_PyRuntime+0x0
    // 10: &_PyUnicode_ExactDealloc+0x0
    // 18: &PyUnicode_Append+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_64(data + 0x18, (uintptr_t)&PyUnicode_Append);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x24, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x6c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x74, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x8c, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0xb4, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xd4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xdc, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xf4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xf8, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_MULTIPLY_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_MULTIPLY_FLOAT.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f8ea1      ldr     x1, [x21, #-0x8]!
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e60      ldr     x0, [x19, #-0x8]!
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  R_AARCH64_ADR_GOT_PAGE       _PyFloat_FromDouble_ConsumeInputs
    // 14: fd400820      ldr     d0, [x1, #0x10]
    // 18: 910003fd      mov     x29, sp
    // 1c: fd400801      ldr     d1, [x0, #0x10]
    // 20: f9400108      ldr     x8, [x8]
    // 0000000000000020:  R_AARCH64_LD64_GOT_LO12_NC   _PyFloat_FromDouble_ConsumeInputs
    // 24: 1e600820      fmul    d0, d1, d0
    // 28: d63f0100      blr     x8
    // 2c: b4000080      cbz     x0, 0x3c <_JIT_ENTRY+0x3c>
    // 30: f9000260      str     x0, [x19]
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 14000000      b       0x38 <_JIT_ENTRY+0x38>
    // 0000000000000038:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 3c: aa1303f5      mov     x21, x19
    // 40: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 44: 14000000      b       0x44 <_JIT_ENTRY+0x44>
    // 0000000000000044:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[72] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xa1, 0x8e, 0x5f, 0xf8,
        0xf3, 0x03, 0x15, 0xaa, 0x60, 0x8e, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x20, 0x08, 0x40, 0xfd,
        0xfd, 0x03, 0x00, 0x91, 0x01, 0x08, 0x40, 0xfd,
        0x08, 0x01, 0x40, 0xf9, 0x20, 0x08, 0x60, 0x1e,
        0x00, 0x01, 0x3f, 0xd6, 0x80, 0x00, 0x00, 0xb4,
        0x60, 0x02, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyFloat_FromDouble_ConsumeInputs+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x20, (uintptr_t)data);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x44, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_MULTIPLY_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_MULTIPLY_INT.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f8eb9      ldr     x25, [x21, #-0x8]!
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e78      ldr     x24, [x19, #-0x8]!
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  R_AARCH64_ADR_GOT_PAGE       _PyLong_Multiply
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _PyLong_Multiply
    // 18: aa1903e1      mov     x1, x25
    // 1c: 910003fd      mov     x29, sp
    // 20: aa1803e0      mov     x0, x24
    // 24: d63f0100      blr     x8
    // 28: b9400328      ldr     w8, [x25]
    // 2c: aa0003f7      mov     x23, x0
    // 30: 37f80208      tbnz    w8, #0x1f, 0x70 <_JIT_ENTRY+0x70>
    // 34: 71000508      subs    w8, w8, #0x1
    // 38: b9000328      str     w8, [x25]
    // 3c: 540001a1      b.ne    0x70 <_JIT_ENTRY+0x70>
    // 40: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 44: f9400129      ldr     x9, [x9]
    // 0000000000000044:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 48: f9544928      ldr     x8, [x9, #0x2890]
    // 4c: b40000a8      cbz     x8, 0x60 <_JIT_ENTRY+0x60>
    // 50: f9544d22      ldr     x2, [x9, #0x2898]
    // 54: aa1903e0      mov     x0, x25
    // 58: 52800021      mov     w1, #0x1                // =1
    // 5c: d63f0100      blr     x8
    // 60: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  R_AARCH64_ADR_GOT_PAGE       _PyLong_ExactDealloc
    // 64: aa1903e0      mov     x0, x25
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  R_AARCH64_LD64_GOT_LO12_NC   _PyLong_ExactDealloc
    // 6c: d63f0100      blr     x8
    // 70: b9400308      ldr     w8, [x24]
    // 74: 37f80088      tbnz    w8, #0x1f, 0x84 <_JIT_ENTRY+0x84>
    // 78: 71000508      subs    w8, w8, #0x1
    // 7c: b9000308      str     w8, [x24]
    // 80: 540000a0      b.eq    0x94 <_JIT_ENTRY+0x94>
    // 84: b4000237      cbz     x23, 0xc8 <_JIT_ENTRY+0xc8>
    // 88: f9000277      str     x23, [x19]
    // 8c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 90: 14000000      b       0x90 <_JIT_ENTRY+0x90>
    // 0000000000000090:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 94: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 98: f9400129      ldr     x9, [x9]
    // 0000000000000098:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 9c: f9544928      ldr     x8, [x9, #0x2890]
    // a0: b40000a8      cbz     x8, 0xb4 <_JIT_ENTRY+0xb4>
    // a4: f9544d22      ldr     x2, [x9, #0x2898]
    // a8: aa1803e0      mov     x0, x24
    // ac: 52800021      mov     w1, #0x1                // =1
    // b0: d63f0100      blr     x8
    // b4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  R_AARCH64_ADR_GOT_PAGE       _PyLong_ExactDealloc
    // b8: aa1803e0      mov     x0, x24
    // bc: f9400108      ldr     x8, [x8]
    // 00000000000000bc:  R_AARCH64_LD64_GOT_LO12_NC   _PyLong_ExactDealloc
    // c0: d63f0100      blr     x8
    // c4: b5fffe37      cbnz    x23, 0x88 <_JIT_ENTRY+0x88>
    // c8: aa1303f5      mov     x21, x19
    // cc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d0: 14000000      b       0xd0 <_JIT_ENTRY+0xd0>
    // 00000000000000d0:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // d4: 00 00 00 00
    const unsigned char code_body[216] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb9, 0x8e, 0x5f, 0xf8,
        0xf3, 0x03, 0x15, 0xaa, 0x78, 0x8e, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x19, 0xaa, 0xfd, 0x03, 0x00, 0x91,
        0xe0, 0x03, 0x18, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x28, 0x03, 0x40, 0xb9, 0xf7, 0x03, 0x00, 0xaa,
        0x08, 0x02, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x28, 0x03, 0x00, 0xb9, 0xa1, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x49, 0x54, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x4d, 0x54, 0xf9, 0xe0, 0x03, 0x19, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x19, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x03, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x37, 0x02, 0x00, 0xb4,
        0x77, 0x02, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x49, 0x54, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x4d, 0x54, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x37, 0xfe, 0xff, 0xb5,
        0xf5, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyLong_Multiply+0x0
    // 8: &_PyRuntime+0x0
    // 10: &_PyLong_ExactDealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyLong_Multiply);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyLong_ExactDealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x68, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x90, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x94, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xb4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xbc, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xd0, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_SUBSCR_CHECK_FUNC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_CHECK_FUNC.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 3942a528      ldrb    w8, [x9, #0xa9]
    // c: 360802a8      tbz     w8, #0x1, 0x60 <_JIT_ENTRY+0x60>
    // 10: f941c928      ldr     x8, [x9, #0x390]
    // 14: b4000268      cbz     x8, 0x60 <_JIT_ENTRY+0x60>
    // 18: b9439929      ldr     w9, [x9, #0x398]
    // 1c: b940910a      ldr     w10, [x8, #0x90]
    // 20: 6b09015f      cmp     w10, w9
    // 24: 540001e1      b.ne    0x60 <_JIT_ENTRY+0x60>
    // 28: f9407ac9      ldr     x9, [x22, #0xf0]
    // 2c: b40001a9      cbz     x9, 0x60 <_JIT_ENTRY+0x60>
    // 30: f940190a      ldr     x10, [x8, #0x30]
    // 34: f9407ecb      ldr     x11, [x22, #0xf8]
    // 38: b9804d4a      ldrsw   x10, [x10, #0x4c]
    // 3c: cb090169      sub     x9, x11, x9
    // 40: eb890d5f      cmp     x10, x9, asr #3
    // 44: 540000ea      b.ge    0x60 <_JIT_ENTRY+0x60>
    // 48: b9400109      ldr     w9, [x8]
    // 4c: 37f80069      tbnz    w9, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 50: 11000529      add     w9, w9, #0x1
    // 54: b9000109      str     w9, [x8]
    // 58: f80086a8      str     x8, [x21], #0x8
    // 5c: 14000000      b       0x5c <_JIT_ENTRY+0x5c>
    // 000000000000005c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 60: 14000000      b       0x60 <_JIT_ENTRY+0x60>
    // 0000000000000060:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 64: 00 00 00 00
    const unsigned char code_body[104] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x28, 0xa5, 0x42, 0x39, 0xa8, 0x02, 0x08, 0x36,
        0x28, 0xc9, 0x41, 0xf9, 0x68, 0x02, 0x00, 0xb4,
        0x29, 0x99, 0x43, 0xb9, 0x0a, 0x91, 0x40, 0xb9,
        0x5f, 0x01, 0x09, 0x6b, 0xe1, 0x01, 0x00, 0x54,
        0xc9, 0x7a, 0x40, 0xf9, 0xa9, 0x01, 0x00, 0xb4,
        0x0a, 0x19, 0x40, 0xf9, 0xcb, 0x7e, 0x40, 0xf9,
        0x4a, 0x4d, 0x80, 0xb9, 0x69, 0x01, 0x09, 0xcb,
        0x5f, 0x0d, 0x89, 0xeb, 0xea, 0x00, 0x00, 0x54,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x5c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x60, state->instruction_starts[instruction->jump_target]);
}

void
emit__BINARY_OP_SUBSCR_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_DICT.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: f85f02b8      ldur    x24, [x21, #-0x10]
    // 8: a9017bfd      stp     x29, x30, [sp, #0x10]
    // c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       PyDict_Type
    // 10: 910043fd      add     x29, sp, #0x10
    // 14: f9400708      ldr     x8, [x24, #0x8]
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   PyDict_Type
    // 1c: eb09011f      cmp     x8, x9
    // 20: 54000080      b.eq    0x30 <_JIT_ENTRY+0x30>
    // 24: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 28: 910083ff      add     sp, sp, #0x20
    // 2c: 14000000      b       0x2c <_JIT_ENTRY+0x2c>
    // 000000000000002c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 30: f85f82b3      ldur    x19, [x21, #-0x8]
    // 34: f9002295      str     x21, [x20, #0x40]
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       PyDict_GetItemRef
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  R_AARCH64_LD64_GOT_LO12_NC   PyDict_GetItemRef
    // 40: 910023e2      add     x2, sp, #0x8
    // 44: aa1803e0      mov     x0, x24
    // 48: aa1303e1      mov     x1, x19
    // 4c: d63f0100      blr     x8
    // 50: f9402299      ldr     x25, [x20, #0x40]
    // 54: 2a0003f7      mov     w23, w0
    // 58: f900229f      str     xzr, [x20, #0x40]
    // 5c: 35000100      cbnz    w0, 0x7c <_JIT_ENTRY+0x7c>
    // 60: f9002299      str     x25, [x20, #0x40]
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _PyErr_SetKeyError
    // 68: aa1303e0      mov     x0, x19
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_SetKeyError
    // 70: d63f0100      blr     x8
    // 74: f9402299      ldr     x25, [x20, #0x40]
    // 78: f900229f      str     xzr, [x20, #0x40]
    // 7c: b9400308      ldr     w8, [x24]
    // 80: 37f80108      tbnz    w8, #0x1f, 0xa0 <_JIT_ENTRY+0xa0>
    // 84: 71000508      subs    w8, w8, #0x1
    // 88: b9000308      str     w8, [x24]
    // 8c: 540000a1      b.ne    0xa0 <_JIT_ENTRY+0xa0>
    // 90: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 94: aa1803e0      mov     x0, x24
    // 98: f9400108      ldr     x8, [x8]
    // 0000000000000098:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 9c: d63f0100      blr     x8
    // a0: b9400268      ldr     w8, [x19]
    // a4: 37f80088      tbnz    w8, #0x1f, 0xb4 <_JIT_ENTRY+0xb4>
    // a8: 71000508      subs    w8, w8, #0x1
    // ac: b9000268      str     w8, [x19]
    // b0: 54000120      b.eq    0xd4 <_JIT_ENTRY+0xd4>
    // b4: 710002ff      cmp     w23, #0x0
    // b8: 540001ad      b.le    0xec <_JIT_ENTRY+0xec>
    // bc: f94007e8      ldr     x8, [sp, #0x8]
    // c0: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // c4: d1002335      sub     x21, x25, #0x8
    // c8: f81f0328      stur    x8, [x25, #-0x10]
    // cc: 910083ff      add     sp, sp, #0x20
    // d0: 14000000      b       0xd0 <_JIT_ENTRY+0xd0>
    // 00000000000000d0:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // d4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000d4:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // d8: aa1303e0      mov     x0, x19
    // dc: f9400108      ldr     x8, [x8]
    // 00000000000000dc:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // e0: d63f0100      blr     x8
    // e4: 710002ff      cmp     w23, #0x0
    // e8: 54fffeac      b.gt    0xbc <_JIT_ENTRY+0xbc>
    // ec: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // f0: d1004335      sub     x21, x25, #0x10
    // f4: 910083ff      add     sp, sp, #0x20
    // f8: 14000000      b       0xf8 <_JIT_ENTRY+0xf8>
    // 00000000000000f8:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // fc: 00 00 00 00
    const unsigned char code_body[256] = {
        0xff, 0x83, 0x00, 0xd1, 0xb8, 0x02, 0x5f, 0xf8,
        0xfd, 0x7b, 0x01, 0xa9, 0x09, 0x00, 0x00, 0x90,
        0xfd, 0x43, 0x00, 0x91, 0x08, 0x07, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x80, 0x00, 0x00, 0x54, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0xb3, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe2, 0x23, 0x00, 0x91, 0xe0, 0x03, 0x18, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x99, 0x22, 0x40, 0xf9, 0xf7, 0x03, 0x00, 0x2a,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x35,
        0x99, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x99, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x20, 0x01, 0x00, 0x54, 0xff, 0x02, 0x00, 0x71,
        0xad, 0x01, 0x00, 0x54, 0xe8, 0x07, 0x40, 0xf9,
        0xfd, 0x7b, 0x41, 0xa9, 0x35, 0x23, 0x00, 0xd1,
        0x28, 0x03, 0x1f, 0xf8, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xff, 0x02, 0x00, 0x71,
        0xac, 0xfe, 0xff, 0x54, 0xfd, 0x7b, 0x41, 0xa9,
        0x35, 0x43, 0x00, 0xd1, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyDict_Type+0x0
    // 8: &PyDict_GetItemRef+0x0
    // 10: &_PyErr_SetKeyError+0x0
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, (uintptr_t)&PyDict_GetItemRef);
    patch_64(data + 0x10, (uintptr_t)&_PyErr_SetKeyError);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_26r(code + 0x2c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x6c, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x90, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x98, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0xd0, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0xd4, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xdc, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0xf8, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_SUBSCR_INIT_CALL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_INIT_CALL.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82ab      ldur    x11, [x21, #-0x8]
    // 4: f9407ac9      ldr     x9, [x22, #0xf0]
    // 8: aa1503e8      mov     x8, x21
    // c: 3cde82a0      ldur    q0, [x21, #-0x18]
    // 10: f940196a      ldr     x10, [x11, #0x30]
    // 14: b9804d4c      ldrsw   x12, [x10, #0x4c]
    // 18: 8b0c0d2c      add     x12, x9, x12, lsl #3
    // 1c: f9007acc      str     x12, [x22, #0xf0]
    // 20: a900ad34      stp     x20, x11, [x9, #0x8]
    // 24: b940014c      ldr     w12, [x10]
    // 28: 37f8006c      tbnz    w12, #0x1f, 0x34 <_JIT_ENTRY+0x34>
    // 2c: 1100058c      add     w12, w12, #0x1
    // 30: b900014c      str     w12, [x10]
    // 34: f900012a      str     x10, [x9]
    // 38: 9103414d      add     x13, x10, #0xd0
    // 3c: b980494c      ldrsw   x12, [x10, #0x48]
    // 40: 3dc00561      ldr     q1, [x11, #0x10]
    // 44: a902fd3f      stp     xzr, xzr, [x9, #0x28]
    // 48: b900493f      str     wzr, [x9, #0x48]
    // 4c: 8b0c0d2b      add     x11, x9, x12, lsl #3
    // 50: 71000d9f      cmp     w12, #0x3
    // 54: 3c818121      stur    q1, [x9, #0x18]
    // 58: 9101416b      add     x11, x11, #0x50
    // 5c: a903ad2d      stp     x13, x11, [x9, #0x38]
    // 60: 5400010b      b.lt    0x80 <_JIT_ENTRY+0x80>
    // 64: 9101812b      add     x11, x9, #0x60
    // 68: 5280004c      mov     w12, #0x2               // =2
    // 6c: f800857f      str     xzr, [x11], #0x8
    // 70: 9100058c      add     x12, x12, #0x1
    // 74: b980494d      ldrsw   x13, [x10, #0x48]
    // 78: eb0d019f      cmp     x12, x13
    // 7c: 54ffff8b      b.lt    0x6c <_JIT_ENTRY+0x6c>
    // 80: 528000ca      mov     w10, #0x6               // =6
    // 84: d1004115      sub     x21, x8, #0x10
    // 88: 3d801520      str     q0, [x9, #0x50]
    // 8c: 7900928a      strh    w10, [x20, #0x48]
    // 90: f81e8109      stur    x9, [x8, #-0x18]
    // 94: 14000000      b       0x94 <_JIT_ENTRY+0x94>
    // 0000000000000094:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[152] = {
        0xab, 0x82, 0x5f, 0xf8, 0xc9, 0x7a, 0x40, 0xf9,
        0xe8, 0x03, 0x15, 0xaa, 0xa0, 0x82, 0xde, 0x3c,
        0x6a, 0x19, 0x40, 0xf9, 0x4c, 0x4d, 0x80, 0xb9,
        0x2c, 0x0d, 0x0c, 0x8b, 0xcc, 0x7a, 0x00, 0xf9,
        0x34, 0xad, 0x00, 0xa9, 0x4c, 0x01, 0x40, 0xb9,
        0x6c, 0x00, 0xf8, 0x37, 0x8c, 0x05, 0x00, 0x11,
        0x4c, 0x01, 0x00, 0xb9, 0x2a, 0x01, 0x00, 0xf9,
        0x4d, 0x41, 0x03, 0x91, 0x4c, 0x49, 0x80, 0xb9,
        0x61, 0x05, 0xc0, 0x3d, 0x3f, 0xfd, 0x02, 0xa9,
        0x3f, 0x49, 0x00, 0xb9, 0x2b, 0x0d, 0x0c, 0x8b,
        0x9f, 0x0d, 0x00, 0x71, 0x21, 0x81, 0x81, 0x3c,
        0x6b, 0x41, 0x01, 0x91, 0x2d, 0xad, 0x03, 0xa9,
        0x0b, 0x01, 0x00, 0x54, 0x2b, 0x81, 0x01, 0x91,
        0x4c, 0x00, 0x80, 0x52, 0x7f, 0x85, 0x00, 0xf8,
        0x8c, 0x05, 0x00, 0x91, 0x4d, 0x49, 0x80, 0xb9,
        0x9f, 0x01, 0x0d, 0xeb, 0x8b, 0xff, 0xff, 0x54,
        0xca, 0x00, 0x80, 0x52, 0x15, 0x41, 0x00, 0xd1,
        0x20, 0x15, 0x80, 0x3d, 0x8a, 0x92, 0x00, 0x79,
        0x09, 0x81, 0x1e, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x94, (uintptr_t)code + sizeof(code_body));
}

void
emit__BINARY_OP_SUBSCR_LIST_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_LIST_INT.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503f8      mov     x24, x21
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyLong_Type
    // 8: a9ff5f13      ldp     x19, x23, [x24, #-0x10]!
    // c: f94006e8      ldr     x8, [x23, #0x8]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   PyLong_Type
    // 14: eb09011f      cmp     x8, x9
    // 18: 540006c1      b.ne    0xf0 <_JIT_ENTRY+0xf0>
    // 1c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  R_AARCH64_ADR_GOT_PAGE       PyList_Type
    // 20: f9400668      ldr     x8, [x19, #0x8]
    // 24: f9400129      ldr     x9, [x9]
    // 0000000000000024:  R_AARCH64_LD64_GOT_LO12_NC   PyList_Type
    // 28: eb09011f      cmp     x8, x9
    // 2c: 54000621      b.ne    0xf0 <_JIT_ENTRY+0xf0>
    // 30: f9400ae8      ldr     x8, [x23, #0x10]
    // 34: 927df908      and     x8, x8, #0xfffffffffffffffb
    // 38: f100251f      cmp     x8, #0x9
    // 3c: 540005a2      b.hs    0xf0 <_JIT_ENTRY+0xf0>
    // 40: b9401ae8      ldr     w8, [x23, #0x18]
    // 44: f9400a69      ldr     x9, [x19, #0x10]
    // 48: eb08013f      cmp     x9, x8
    // 4c: 5400052d      b.le    0xf0 <_JIT_ENTRY+0xf0>
    // 50: f9400e69      ldr     x9, [x19, #0x18]
    // 54: f8687939      ldr     x25, [x9, x8, lsl #3]
    // 58: b9400328      ldr     w8, [x25]
    // 5c: 37f80068      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 60: 11000508      add     w8, w8, #0x1
    // 64: b9000328      str     w8, [x25]
    // 68: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 6c: b94002e8      ldr     w8, [x23]
    // 70: 910003fd      mov     x29, sp
    // 74: 37f80208      tbnz    w8, #0x1f, 0xb4 <_JIT_ENTRY+0xb4>
    // 78: 71000508      subs    w8, w8, #0x1
    // 7c: b90002e8      str     w8, [x23]
    // 80: 540001a1      b.ne    0xb4 <_JIT_ENTRY+0xb4>
    // 84: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 88: f9400129      ldr     x9, [x9]
    // 0000000000000088:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 8c: f9544928      ldr     x8, [x9, #0x2890]
    // 90: b40000a8      cbz     x8, 0xa4 <_JIT_ENTRY+0xa4>
    // 94: f9544d22      ldr     x2, [x9, #0x2898]
    // 98: aa1703e0      mov     x0, x23
    // 9c: 52800021      mov     w1, #0x1                // =1
    // a0: d63f0100      blr     x8
    // a4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  R_AARCH64_ADR_GOT_PAGE       _PyLong_ExactDealloc
    // a8: aa1703e0      mov     x0, x23
    // ac: f9400108      ldr     x8, [x8]
    // 00000000000000ac:  R_AARCH64_LD64_GOT_LO12_NC   _PyLong_ExactDealloc
    // b0: d63f0100      blr     x8
    // b4: f9002298      str     x24, [x20, #0x40]
    // b8: b9400268      ldr     w8, [x19]
    // bc: 37f80108      tbnz    w8, #0x1f, 0xdc <_JIT_ENTRY+0xdc>
    // c0: 71000508      subs    w8, w8, #0x1
    // c4: b9000268      str     w8, [x19]
    // c8: 540000a1      b.ne    0xdc <_JIT_ENTRY+0xdc>
    // cc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // d0: aa1303e0      mov     x0, x19
    // d4: f9400108      ldr     x8, [x8]
    // 00000000000000d4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // d8: d63f0100      blr     x8
    // dc: f9402295      ldr     x21, [x20, #0x40]
    // e0: f900229f      str     xzr, [x20, #0x40]
    // e4: f80086b9      str     x25, [x21], #0x8
    // e8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // ec: 14000000      b       0xec <_JIT_ENTRY+0xec>
    // 00000000000000ec:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // f0: 14000000      b       0xf0 <_JIT_ENTRY+0xf0>
    // 00000000000000f0:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // f4: 00 00 00 00
    const unsigned char code_body[248] = {
        0xf8, 0x03, 0x15, 0xaa, 0x09, 0x00, 0x00, 0x90,
        0x13, 0x5f, 0xff, 0xa9, 0xe8, 0x06, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0xc1, 0x06, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x68, 0x06, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x21, 0x06, 0x00, 0x54,
        0xe8, 0x0a, 0x40, 0xf9, 0x08, 0xf9, 0x7d, 0x92,
        0x1f, 0x25, 0x00, 0xf1, 0xa2, 0x05, 0x00, 0x54,
        0xe8, 0x1a, 0x40, 0xb9, 0x69, 0x0a, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x2d, 0x05, 0x00, 0x54,
        0x69, 0x0e, 0x40, 0xf9, 0x39, 0x79, 0x68, 0xf8,
        0x28, 0x03, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x28, 0x03, 0x00, 0xb9,
        0xfd, 0x7b, 0xbf, 0xa9, 0xe8, 0x02, 0x40, 0xb9,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x02, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x49, 0x54, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x4d, 0x54, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x98, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xb9, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyLong_Type+0x0
    // 8: &PyList_Type+0x0
    // 10: &_PyRuntime+0x0
    // 18: &_PyLong_ExactDealloc+0x0
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&PyList_Type);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xa4, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xac, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xcc, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)data + 0x20);
    patch_aarch64_26r(code + 0xec, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xf0, state->instruction_starts[instruction->jump_target]);
}

void
emit__BINARY_OP_SUBSCR_STR_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_STR_INT.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503f8      mov     x24, x21
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyLong_Type
    // 8: a9ff5f13      ldp     x19, x23, [x24, #-0x10]!
    // c: f94006e8      ldr     x8, [x23, #0x8]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   PyLong_Type
    // 14: eb09011f      cmp     x8, x9
    // 18: 540006a1      b.ne    0xec <_JIT_ENTRY+0xec>
    // 1c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  R_AARCH64_ADR_GOT_PAGE       PyUnicode_Type
    // 20: f9400668      ldr     x8, [x19, #0x8]
    // 24: f9400129      ldr     x9, [x9]
    // 0000000000000024:  R_AARCH64_LD64_GOT_LO12_NC   PyUnicode_Type
    // 28: eb09011f      cmp     x8, x9
    // 2c: 54000601      b.ne    0xec <_JIT_ENTRY+0xec>
    // 30: f9400ae8      ldr     x8, [x23, #0x10]
    // 34: 927df908      and     x8, x8, #0xfffffffffffffffb
    // 38: f100251f      cmp     x8, #0x9
    // 3c: 54000582      b.hs    0xec <_JIT_ENTRY+0xec>
    // 40: b9401ae8      ldr     w8, [x23, #0x18]
    // 44: f9400a69      ldr     x9, [x19, #0x10]
    // 48: eb08013f      cmp     x9, x8
    // 4c: 5400050d      b.le    0xec <_JIT_ENTRY+0xec>
    // 50: 79404669      ldrh    w9, [x19, #0x22]
    // 54: 1200092a      and     w10, w9, #0x7
    // 58: 7100095f      cmp     w10, #0x2
    // 5c: 540000e0      b.eq    0x78 <_JIT_ENTRY+0x78>
    // 60: 7100055f      cmp     w10, #0x1
    // 64: 54000121      b.ne    0x88 <_JIT_ENTRY+0x88>
    // 68: 37180169      tbnz    w9, #0x3, 0x94 <_JIT_ENTRY+0x94>
    // 6c: f9401e69      ldr     x9, [x19, #0x38]
    // 70: 38686939      ldrb    w25, [x9, x8]
    // 74: 1400001c      b       0xe4 <_JIT_ENTRY+0xe4>
    // 78: 371801c9      tbnz    w9, #0x3, 0xb0 <_JIT_ENTRY+0xb0>
    // 7c: f9401e69      ldr     x9, [x19, #0x38]
    // 80: 78687939      ldrh    w25, [x9, x8, lsl #1]
    // 84: 14000018      b       0xe4 <_JIT_ENTRY+0xe4>
    // 88: 37180229      tbnz    w9, #0x3, 0xcc <_JIT_ENTRY+0xcc>
    // 8c: f9401e69      ldr     x9, [x19, #0x38]
    // 90: 14000014      b       0xe0 <_JIT_ENTRY+0xe0>
    // 94: 721c013f      tst     w9, #0x10
    // 98: 52800509      mov     w9, #0x28               // =40
    // 9c: 5280070a      mov     w10, #0x38              // =56
    // a0: 9a890149      csel    x9, x10, x9, eq
    // a4: 8b090269      add     x9, x19, x9
    // a8: 38686939      ldrb    w25, [x9, x8]
    // ac: 1400000e      b       0xe4 <_JIT_ENTRY+0xe4>
    // b0: 721c013f      tst     w9, #0x10
    // b4: 52800509      mov     w9, #0x28               // =40
    // b8: 5280070a      mov     w10, #0x38              // =56
    // bc: 9a890149      csel    x9, x10, x9, eq
    // c0: 8b090269      add     x9, x19, x9
    // c4: 78687939      ldrh    w25, [x9, x8, lsl #1]
    // c8: 14000007      b       0xe4 <_JIT_ENTRY+0xe4>
    // cc: 721c013f      tst     w9, #0x10
    // d0: 52800509      mov     w9, #0x28               // =40
    // d4: 5280070a      mov     w10, #0x38              // =56
    // d8: 9a890149      csel    x9, x10, x9, eq
    // dc: 8b090269      add     x9, x19, x9
    // e0: b8687939      ldr     w25, [x9, x8, lsl #2]
    // e4: 7102033f      cmp     w25, #0x80
    // e8: 54000043      b.lo    0xf0 <_JIT_ENTRY+0xf0>
    // ec: 14000000      b       0xec <_JIT_ENTRY+0xec>
    // 00000000000000ec:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // f0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // f4: 90000015      adrp    x21, 0x0 <_JIT_ENTRY>
    // 00000000000000f4:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // f8: b94002e8      ldr     w8, [x23]
    // fc: 910003fd      mov     x29, sp
    // 100: f94002b5      ldr     x21, [x21]
    // 0000000000000100:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 104: 37f801c8      tbnz    w8, #0x1f, 0x13c <_JIT_ENTRY+0x13c>
    // 108: 71000508      subs    w8, w8, #0x1
    // 10c: b90002e8      str     w8, [x23]
    // 110: 54000161      b.ne    0x13c <_JIT_ENTRY+0x13c>
    // 114: f9544aa8      ldr     x8, [x21, #0x2890]
    // 118: b40000a8      cbz     x8, 0x12c <_JIT_ENTRY+0x12c>
    // 11c: f9544ea2      ldr     x2, [x21, #0x2898]
    // 120: aa1703e0      mov     x0, x23
    // 124: 52800021      mov     w1, #0x1                // =1
    // 128: d63f0100      blr     x8
    // 12c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000012c:  R_AARCH64_ADR_GOT_PAGE       _PyLong_ExactDealloc
    // 130: aa1703e0      mov     x0, x23
    // 134: f9400108      ldr     x8, [x8]
    // 0000000000000134:  R_AARCH64_LD64_GOT_LO12_NC   _PyLong_ExactDealloc
    // 138: d63f0100      blr     x8
    // 13c: f9002298      str     x24, [x20, #0x40]
    // 140: b9400268      ldr     w8, [x19]
    // 144: 37f80108      tbnz    w8, #0x1f, 0x164 <_JIT_ENTRY+0x164>
    // 148: 71000508      subs    w8, w8, #0x1
    // 14c: b9000268      str     w8, [x19]
    // 150: 540000a1      b.ne    0x164 <_JIT_ENTRY+0x164>
    // 154: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000154:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 158: aa1303e0      mov     x0, x19
    // 15c: f9400108      ldr     x8, [x8]
    // 000000000000015c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 160: d63f0100      blr     x8
    // 164: 52800608      mov     w8, #0x30               // =48
    // 168: 9ba85728      umaddl  x8, w25, w8, x21
    // 16c: f9402295      ldr     x21, [x20, #0x40]
    // 170: f900229f      str     xzr, [x20, #0x40]
    // 174: 91404908      add     x8, x8, #0x12, lsl #12  // =0x12000
    // 178: 910de108      add     x8, x8, #0x378
    // 17c: f80086a8      str     x8, [x21], #0x8
    // 180: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 184: 14000000      b       0x184 <_JIT_ENTRY+0x184>
    // 0000000000000184:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[392] = {
        0xf8, 0x03, 0x15, 0xaa, 0x09, 0x00, 0x00, 0x90,
        0x13, 0x5f, 0xff, 0xa9, 0xe8, 0x06, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0xa1, 0x06, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x68, 0x06, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x01, 0x06, 0x00, 0x54,
        0xe8, 0x0a, 0x40, 0xf9, 0x08, 0xf9, 0x7d, 0x92,
        0x1f, 0x25, 0x00, 0xf1, 0x82, 0x05, 0x00, 0x54,
        0xe8, 0x1a, 0x40, 0xb9, 0x69, 0x0a, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x0d, 0x05, 0x00, 0x54,
        0x69, 0x46, 0x40, 0x79, 0x2a, 0x09, 0x00, 0x12,
        0x5f, 0x09, 0x00, 0x71, 0xe0, 0x00, 0x00, 0x54,
        0x5f, 0x05, 0x00, 0x71, 0x21, 0x01, 0x00, 0x54,
        0x69, 0x01, 0x18, 0x37, 0x69, 0x1e, 0x40, 0xf9,
        0x39, 0x69, 0x68, 0x38, 0x1c, 0x00, 0x00, 0x14,
        0xc9, 0x01, 0x18, 0x37, 0x69, 0x1e, 0x40, 0xf9,
        0x39, 0x79, 0x68, 0x78, 0x18, 0x00, 0x00, 0x14,
        0x29, 0x02, 0x18, 0x37, 0x69, 0x1e, 0x40, 0xf9,
        0x14, 0x00, 0x00, 0x14, 0x3f, 0x01, 0x1c, 0x72,
        0x09, 0x05, 0x80, 0x52, 0x0a, 0x07, 0x80, 0x52,
        0x49, 0x01, 0x89, 0x9a, 0x69, 0x02, 0x09, 0x8b,
        0x39, 0x69, 0x68, 0x38, 0x0e, 0x00, 0x00, 0x14,
        0x3f, 0x01, 0x1c, 0x72, 0x09, 0x05, 0x80, 0x52,
        0x0a, 0x07, 0x80, 0x52, 0x49, 0x01, 0x89, 0x9a,
        0x69, 0x02, 0x09, 0x8b, 0x39, 0x79, 0x68, 0x78,
        0x07, 0x00, 0x00, 0x14, 0x3f, 0x01, 0x1c, 0x72,
        0x09, 0x05, 0x80, 0x52, 0x0a, 0x07, 0x80, 0x52,
        0x49, 0x01, 0x89, 0x9a, 0x69, 0x02, 0x09, 0x8b,
        0x39, 0x79, 0x68, 0xb8, 0x3f, 0x03, 0x02, 0x71,
        0x43, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x15, 0x00, 0x00, 0x90,
        0xe8, 0x02, 0x40, 0xb9, 0xfd, 0x03, 0x00, 0x91,
        0xb5, 0x02, 0x40, 0xf9, 0xc8, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0x61, 0x01, 0x00, 0x54, 0xa8, 0x4a, 0x54, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0xa2, 0x4e, 0x54, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x98, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x06, 0x80, 0x52,
        0x28, 0x57, 0xa8, 0x9b, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x08, 0x49, 0x40, 0x91,
        0x08, 0xe1, 0x0d, 0x91, 0xa8, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyLong_Type+0x0
    // 8: &PyUnicode_Type+0x0
    // 10: &_PyRuntime+0x0
    // 18: &_PyLong_ExactDealloc+0x0
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0xec, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0xf4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x100, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x12c, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x134, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x154, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x15c, (uintptr_t)data + 0x20);
    patch_aarch64_26r(code + 0x184, (uintptr_t)code + sizeof(code_body));
}

void
emit__BINARY_OP_SUBSCR_TUPLE_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_TUPLE_INT.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503f8      mov     x24, x21
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyLong_Type
    // 8: a9ff5f13      ldp     x19, x23, [x24, #-0x10]!
    // c: f94006e8      ldr     x8, [x23, #0x8]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   PyLong_Type
    // 14: eb09011f      cmp     x8, x9
    // 18: 540006c1      b.ne    0xf0 <_JIT_ENTRY+0xf0>
    // 1c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  R_AARCH64_ADR_GOT_PAGE       PyTuple_Type
    // 20: f9400668      ldr     x8, [x19, #0x8]
    // 24: f9400129      ldr     x9, [x9]
    // 0000000000000024:  R_AARCH64_LD64_GOT_LO12_NC   PyTuple_Type
    // 28: eb09011f      cmp     x8, x9
    // 2c: 54000621      b.ne    0xf0 <_JIT_ENTRY+0xf0>
    // 30: f9400ae8      ldr     x8, [x23, #0x10]
    // 34: 927df908      and     x8, x8, #0xfffffffffffffffb
    // 38: f100251f      cmp     x8, #0x9
    // 3c: 540005a2      b.hs    0xf0 <_JIT_ENTRY+0xf0>
    // 40: b9401ae8      ldr     w8, [x23, #0x18]
    // 44: f9400a69      ldr     x9, [x19, #0x10]
    // 48: eb08013f      cmp     x9, x8
    // 4c: 5400052d      b.le    0xf0 <_JIT_ENTRY+0xf0>
    // 50: 8b080e68      add     x8, x19, x8, lsl #3
    // 54: f9400d19      ldr     x25, [x8, #0x18]
    // 58: b9400328      ldr     w8, [x25]
    // 5c: 37f80068      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 60: 11000508      add     w8, w8, #0x1
    // 64: b9000328      str     w8, [x25]
    // 68: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 6c: b94002e8      ldr     w8, [x23]
    // 70: 910003fd      mov     x29, sp
    // 74: 37f80208      tbnz    w8, #0x1f, 0xb4 <_JIT_ENTRY+0xb4>
    // 78: 71000508      subs    w8, w8, #0x1
    // 7c: b90002e8      str     w8, [x23]
    // 80: 540001a1      b.ne    0xb4 <_JIT_ENTRY+0xb4>
    // 84: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 88: f9400129      ldr     x9, [x9]
    // 0000000000000088:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 8c: f9544928      ldr     x8, [x9, #0x2890]
    // 90: b40000a8      cbz     x8, 0xa4 <_JIT_ENTRY+0xa4>
    // 94: f9544d22      ldr     x2, [x9, #0x2898]
    // 98: aa1703e0      mov     x0, x23
    // 9c: 52800021      mov     w1, #0x1                // =1
    // a0: d63f0100      blr     x8
    // a4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  R_AARCH64_ADR_GOT_PAGE       _PyLong_ExactDealloc
    // a8: aa1703e0      mov     x0, x23
    // ac: f9400108      ldr     x8, [x8]
    // 00000000000000ac:  R_AARCH64_LD64_GOT_LO12_NC   _PyLong_ExactDealloc
    // b0: d63f0100      blr     x8
    // b4: f9002298      str     x24, [x20, #0x40]
    // b8: b9400268      ldr     w8, [x19]
    // bc: 37f80108      tbnz    w8, #0x1f, 0xdc <_JIT_ENTRY+0xdc>
    // c0: 71000508      subs    w8, w8, #0x1
    // c4: b9000268      str     w8, [x19]
    // c8: 540000a1      b.ne    0xdc <_JIT_ENTRY+0xdc>
    // cc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // d0: aa1303e0      mov     x0, x19
    // d4: f9400108      ldr     x8, [x8]
    // 00000000000000d4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // d8: d63f0100      blr     x8
    // dc: f9402295      ldr     x21, [x20, #0x40]
    // e0: f900229f      str     xzr, [x20, #0x40]
    // e4: f80086b9      str     x25, [x21], #0x8
    // e8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // ec: 14000000      b       0xec <_JIT_ENTRY+0xec>
    // 00000000000000ec:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // f0: 14000000      b       0xf0 <_JIT_ENTRY+0xf0>
    // 00000000000000f0:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // f4: 00 00 00 00
    const unsigned char code_body[248] = {
        0xf8, 0x03, 0x15, 0xaa, 0x09, 0x00, 0x00, 0x90,
        0x13, 0x5f, 0xff, 0xa9, 0xe8, 0x06, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0xc1, 0x06, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x68, 0x06, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x21, 0x06, 0x00, 0x54,
        0xe8, 0x0a, 0x40, 0xf9, 0x08, 0xf9, 0x7d, 0x92,
        0x1f, 0x25, 0x00, 0xf1, 0xa2, 0x05, 0x00, 0x54,
        0xe8, 0x1a, 0x40, 0xb9, 0x69, 0x0a, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x2d, 0x05, 0x00, 0x54,
        0x68, 0x0e, 0x08, 0x8b, 0x19, 0x0d, 0x40, 0xf9,
        0x28, 0x03, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x28, 0x03, 0x00, 0xb9,
        0xfd, 0x7b, 0xbf, 0xa9, 0xe8, 0x02, 0x40, 0xb9,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x02, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x49, 0x54, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x4d, 0x54, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x98, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xb9, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyLong_Type+0x0
    // 8: &PyTuple_Type+0x0
    // 10: &_PyRuntime+0x0
    // 18: &_PyLong_ExactDealloc+0x0
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xa4, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xac, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xcc, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)data + 0x20);
    patch_aarch64_26r(code + 0xec, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xf0, state->instruction_starts[instruction->jump_target]);
}

void
emit__BINARY_OP_SUBTRACT_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBTRACT_FLOAT.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f8ea1      ldr     x1, [x21, #-0x8]!
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e60      ldr     x0, [x19, #-0x8]!
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  R_AARCH64_ADR_GOT_PAGE       _PyFloat_FromDouble_ConsumeInputs
    // 14: fd400820      ldr     d0, [x1, #0x10]
    // 18: 910003fd      mov     x29, sp
    // 1c: fd400801      ldr     d1, [x0, #0x10]
    // 20: f9400108      ldr     x8, [x8]
    // 0000000000000020:  R_AARCH64_LD64_GOT_LO12_NC   _PyFloat_FromDouble_ConsumeInputs
    // 24: 1e603820      fsub    d0, d1, d0
    // 28: d63f0100      blr     x8
    // 2c: b4000080      cbz     x0, 0x3c <_JIT_ENTRY+0x3c>
    // 30: f9000260      str     x0, [x19]
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 14000000      b       0x38 <_JIT_ENTRY+0x38>
    // 0000000000000038:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 3c: aa1303f5      mov     x21, x19
    // 40: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 44: 14000000      b       0x44 <_JIT_ENTRY+0x44>
    // 0000000000000044:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[72] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xa1, 0x8e, 0x5f, 0xf8,
        0xf3, 0x03, 0x15, 0xaa, 0x60, 0x8e, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x20, 0x08, 0x40, 0xfd,
        0xfd, 0x03, 0x00, 0x91, 0x01, 0x08, 0x40, 0xfd,
        0x08, 0x01, 0x40, 0xf9, 0x20, 0x38, 0x60, 0x1e,
        0x00, 0x01, 0x3f, 0xd6, 0x80, 0x00, 0x00, 0xb4,
        0x60, 0x02, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyFloat_FromDouble_ConsumeInputs+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x20, (uintptr_t)data);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x44, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_SUBTRACT_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBTRACT_INT.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f8eb9      ldr     x25, [x21, #-0x8]!
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e78      ldr     x24, [x19, #-0x8]!
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  R_AARCH64_ADR_GOT_PAGE       _PyLong_Subtract
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _PyLong_Subtract
    // 18: aa1903e1      mov     x1, x25
    // 1c: 910003fd      mov     x29, sp
    // 20: aa1803e0      mov     x0, x24
    // 24: d63f0100      blr     x8
    // 28: b9400328      ldr     w8, [x25]
    // 2c: aa0003f7      mov     x23, x0
    // 30: 37f80208      tbnz    w8, #0x1f, 0x70 <_JIT_ENTRY+0x70>
    // 34: 71000508      subs    w8, w8, #0x1
    // 38: b9000328      str     w8, [x25]
    // 3c: 540001a1      b.ne    0x70 <_JIT_ENTRY+0x70>
    // 40: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 44: f9400129      ldr     x9, [x9]
    // 0000000000000044:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 48: f9544928      ldr     x8, [x9, #0x2890]
    // 4c: b40000a8      cbz     x8, 0x60 <_JIT_ENTRY+0x60>
    // 50: f9544d22      ldr     x2, [x9, #0x2898]
    // 54: aa1903e0      mov     x0, x25
    // 58: 52800021      mov     w1, #0x1                // =1
    // 5c: d63f0100      blr     x8
    // 60: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  R_AARCH64_ADR_GOT_PAGE       _PyLong_ExactDealloc
    // 64: aa1903e0      mov     x0, x25
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  R_AARCH64_LD64_GOT_LO12_NC   _PyLong_ExactDealloc
    // 6c: d63f0100      blr     x8
    // 70: b9400308      ldr     w8, [x24]
    // 74: 37f80088      tbnz    w8, #0x1f, 0x84 <_JIT_ENTRY+0x84>
    // 78: 71000508      subs    w8, w8, #0x1
    // 7c: b9000308      str     w8, [x24]
    // 80: 540000a0      b.eq    0x94 <_JIT_ENTRY+0x94>
    // 84: b4000237      cbz     x23, 0xc8 <_JIT_ENTRY+0xc8>
    // 88: f9000277      str     x23, [x19]
    // 8c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 90: 14000000      b       0x90 <_JIT_ENTRY+0x90>
    // 0000000000000090:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 94: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 98: f9400129      ldr     x9, [x9]
    // 0000000000000098:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 9c: f9544928      ldr     x8, [x9, #0x2890]
    // a0: b40000a8      cbz     x8, 0xb4 <_JIT_ENTRY+0xb4>
    // a4: f9544d22      ldr     x2, [x9, #0x2898]
    // a8: aa1803e0      mov     x0, x24
    // ac: 52800021      mov     w1, #0x1                // =1
    // b0: d63f0100      blr     x8
    // b4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  R_AARCH64_ADR_GOT_PAGE       _PyLong_ExactDealloc
    // b8: aa1803e0      mov     x0, x24
    // bc: f9400108      ldr     x8, [x8]
    // 00000000000000bc:  R_AARCH64_LD64_GOT_LO12_NC   _PyLong_ExactDealloc
    // c0: d63f0100      blr     x8
    // c4: b5fffe37      cbnz    x23, 0x88 <_JIT_ENTRY+0x88>
    // c8: aa1303f5      mov     x21, x19
    // cc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d0: 14000000      b       0xd0 <_JIT_ENTRY+0xd0>
    // 00000000000000d0:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // d4: 00 00 00 00
    const unsigned char code_body[216] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb9, 0x8e, 0x5f, 0xf8,
        0xf3, 0x03, 0x15, 0xaa, 0x78, 0x8e, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x19, 0xaa, 0xfd, 0x03, 0x00, 0x91,
        0xe0, 0x03, 0x18, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x28, 0x03, 0x40, 0xb9, 0xf7, 0x03, 0x00, 0xaa,
        0x08, 0x02, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x28, 0x03, 0x00, 0xb9, 0xa1, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x49, 0x54, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x4d, 0x54, 0xf9, 0xe0, 0x03, 0x19, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x19, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x03, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x37, 0x02, 0x00, 0xb4,
        0x77, 0x02, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x49, 0x54, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x4d, 0x54, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x37, 0xfe, 0xff, 0xb5,
        0xf5, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyLong_Subtract+0x0
    // 8: &_PyRuntime+0x0
    // 10: &_PyLong_ExactDealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyLong_Subtract);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyLong_ExactDealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x68, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x90, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x94, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xb4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xbc, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xd0, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_SLICE.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: a97f06a0      ldp     x0, x1, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _PyBuildSlice_ConsumeRefs
    // c: f85e82b3      ldur    x19, [x21, #-0x18]
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: 910003fd      mov     x29, sp
    // 18: f9400108      ldr     x8, [x8]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _PyBuildSlice_ConsumeRefs
    // 1c: d63f0100      blr     x8
    // 20: f9402288      ldr     x8, [x20, #0x40]
    // 24: b4000340      cbz     x0, 0x8c <_JIT_ENTRY+0x8c>
    // 28: d1004108      sub     x8, x8, #0x10
    // 2c: aa0003f7      mov     x23, x0
    // 30: aa1303e0      mov     x0, x19
    // 34: f9002288      str     x8, [x20, #0x40]
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       PyObject_GetItem
    // 3c: aa1703e1      mov     x1, x23
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_GetItem
    // 44: d63f0100      blr     x8
    // 48: b94002e8      ldr     w8, [x23]
    // 4c: aa0003f8      mov     x24, x0
    // 50: 37f80108      tbnz    w8, #0x1f, 0x70 <_JIT_ENTRY+0x70>
    // 54: 71000508      subs    w8, w8, #0x1
    // 58: b90002e8      str     w8, [x23]
    // 5c: 540000a1      b.ne    0x70 <_JIT_ENTRY+0x70>
    // 60: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 64: aa1703e0      mov     x0, x23
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 6c: d63f0100      blr     x8
    // 70: f9402288      ldr     x8, [x20, #0x40]
    // 74: 91004108      add     x8, x8, #0x10
    // 78: d1006108      sub     x8, x8, #0x18
    // 7c: f9002288      str     x8, [x20, #0x40]
    // 80: b9400268      ldr     w8, [x19]
    // 84: 36f800e8      tbz     w8, #0x1f, 0xa0 <_JIT_ENTRY+0xa0>
    // 88: 14000009      b       0xac <_JIT_ENTRY+0xac>
    // 8c: aa1f03f8      mov     x24, xzr
    // 90: d1006108      sub     x8, x8, #0x18
    // 94: f9002288      str     x8, [x20, #0x40]
    // 98: b9400268      ldr     w8, [x19]
    // 9c: 37f80088      tbnz    w8, #0x1f, 0xac <_JIT_ENTRY+0xac>
    // a0: 71000508      subs    w8, w8, #0x1
    // a4: b9000268      str     w8, [x19]
    // a8: 540000e0      b.eq    0xc4 <_JIT_ENTRY+0xc4>
    // ac: f9402295      ldr     x21, [x20, #0x40]
    // b0: f900229f      str     xzr, [x20, #0x40]
    // b4: b4000178      cbz     x24, 0xe0 <_JIT_ENTRY+0xe0>
    // b8: f80086b8      str     x24, [x21], #0x8
    // bc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c0: 14000000      b       0xc0 <_JIT_ENTRY+0xc0>
    // 00000000000000c0:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // c4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c4:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // c8: aa1303e0      mov     x0, x19
    // cc: f9400108      ldr     x8, [x8]
    // 00000000000000cc:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // d0: d63f0100      blr     x8
    // d4: f9402295      ldr     x21, [x20, #0x40]
    // d8: f900229f      str     xzr, [x20, #0x40]
    // dc: b5fffef8      cbnz    x24, 0xb8 <_JIT_ENTRY+0xb8>
    // e0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e4: 14000000      b       0xe4 <_JIT_ENTRY+0xe4>
    // 00000000000000e4:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[232] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xa0, 0x06, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xb3, 0x82, 0x5e, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x88, 0x22, 0x40, 0xf9, 0x40, 0x03, 0x00, 0xb4,
        0x08, 0x41, 0x00, 0xd1, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x88, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe1, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe8, 0x02, 0x40, 0xb9, 0xf8, 0x03, 0x00, 0xaa,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x88, 0x22, 0x40, 0xf9, 0x08, 0x41, 0x00, 0x91,
        0x08, 0x61, 0x00, 0xd1, 0x88, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x36,
        0x09, 0x00, 0x00, 0x14, 0xf8, 0x03, 0x1f, 0xaa,
        0x08, 0x61, 0x00, 0xd1, 0x88, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xe0, 0x00, 0x00, 0x54, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x78, 0x01, 0x00, 0xb4,
        0xb8, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf8, 0xfe, 0xff, 0xb5,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyBuildSlice_ConsumeRefs+0x0
    // 8: &PyObject_GetItem+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyBuildSlice_ConsumeRefs);
    patch_64(data + 0x8, (uintptr_t)&PyObject_GetItem);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x68, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xc0, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0xc4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xcc, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xe4, state->instruction_starts[instruction->error_target]);
}

void
emit__BUILD_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_LIST.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _PyList_FromStackRefStealOnSuccess
    // c: 910003fd      mov     x29, sp
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _PyList_FromStackRefStealOnSuccess
    // 18: cb282eb3      sub     x19, x21, w8, uxth #3
    // 1c: 92403d01      and     x1, x8, #0xffff
    // 20: aa1303e0      mov     x0, x19
    // 24: d63f0120      blr     x9
    // 28: b4000120      cbz     x0, 0x4c <_JIT_ENTRY+0x4c>
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 30: 52800029      mov     w9, #0x1                // =1
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 38: f9000260      str     x0, [x19]
    // 3c: cb282128      sub     x8, x9, w8, uxth
    // 40: 8b080eb5      add     x21, x21, x8, lsl #3
    // 44: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 48: 14000000      b       0x48 <_JIT_ENTRY+0x48>
    // 0000000000000048:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 4c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 50: 14000000      b       0x50 <_JIT_ENTRY+0x50>
    // 0000000000000050:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xb3, 0x2e, 0x28, 0xcb, 0x01, 0x3d, 0x40, 0x92,
        0xe0, 0x03, 0x13, 0xaa, 0x20, 0x01, 0x3f, 0xd6,
        0x20, 0x01, 0x00, 0xb4, 0x08, 0x00, 0x00, 0x90,
        0x29, 0x00, 0x80, 0x52, 0x08, 0x01, 0x40, 0xf9,
        0x60, 0x02, 0x00, 0xf9, 0x28, 0x21, 0x28, 0xcb,
        0xb5, 0x0e, 0x08, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyList_FromStackRefStealOnSuccess+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyList_FromStackRefStealOnSuccess);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x2c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x34, (uintptr_t)data);
    patch_aarch64_26r(code + 0x48, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x50, state->instruction_starts[instruction->error_target]);
}

void
emit__BUILD_MAP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_MAP.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: aa1f03fa      mov     x26, xzr
    // c: 52800041      mov     w1, #0x2                // =2
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: 52800043      mov     w3, #0x2                // =2
    // 1c: 910003fd      mov     x29, sp
    // 20: cb282758      sub     x24, x26, w8, uxth #1
    // 24: cb2832a0      sub     x0, x21, w8, uxth #4
    // 28: 12003d1b      and     w27, w8, #0xffff
    // 2c: 92403d17      and     x23, x8, #0xffff
    // 30: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  R_AARCH64_ADR_GOT_PAGE       _PyDict_FromItems
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   _PyDict_FromItems
    // 38: 91002002      add     x2, x0, #0x8
    // 3c: aa1703e4      mov     x4, x23
    // 40: d63f0100      blr     x8
    // 44: f9402299      ldr     x25, [x20, #0x40]
    // 48: aa0003f3      mov     x19, x0
    // 4c: f900229f      str     xzr, [x20, #0x40]
    // 50: 340002bb      cbz     w27, 0xa4 <_JIT_ENTRY+0xa4>
    // 54: d37ceee8      lsl     x8, x23, #4
    // 58: 52800029      mov     w9, #0x1                // =1
    // 5c: aa170537      orr     x23, x9, x23, lsl #1
    // 60: 8b180d08      add     x8, x8, x24, lsl #3
    // 64: 8b150108      add     x8, x8, x21
    // 68: 90000015      adrp    x21, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 6c: f94002b5      ldr     x21, [x21]
    // 000000000000006c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 70: d100211a      sub     x26, x8, #0x8
    // 74: 14000004      b       0x84 <_JIT_ENTRY+0x84>
    // 78: d10006f7      sub     x23, x23, #0x1
    // 7c: f10006ff      cmp     x23, #0x1
    // 80: 54000129      b.ls    0xa4 <_JIT_ENTRY+0xa4>
    // 84: f85f8740      ldr     x0, [x26], #-0x8
    // 88: b9400008      ldr     w8, [x0]
    // 8c: 37ffff68      tbnz    w8, #0x1f, 0x78 <_JIT_ENTRY+0x78>
    // 90: 71000508      subs    w8, w8, #0x1
    // 94: b9000008      str     w8, [x0]
    // 98: 54ffff01      b.ne    0x78 <_JIT_ENTRY+0x78>
    // 9c: d63f02a0      blr     x21
    // a0: 17fffff6      b       0x78 <_JIT_ENTRY+0x78>
    // a4: b4000133      cbz     x19, 0xc8 <_JIT_ENTRY+0xc8>
    // a8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a8:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // ac: 52800029      mov     w9, #0x1                // =1
    // b0: f9400108      ldr     x8, [x8]
    // 00000000000000b0:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // b4: f8387b33      str     x19, [x25, x24, lsl #3]
    // b8: cb282528      sub     x8, x9, w8, uxth #1
    // bc: 8b080f35      add     x21, x25, x8, lsl #3
    // c0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c4: 14000000      b       0xc4 <_JIT_ENTRY+0xc4>
    // 00000000000000c4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // c8: 8b180f35      add     x21, x25, x24, lsl #3
    // cc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d0: 14000000      b       0xd0 <_JIT_ENTRY+0xd0>
    // 00000000000000d0:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // d4: 00 00 00 00
    const unsigned char code_body[216] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfa, 0x03, 0x1f, 0xaa, 0x41, 0x00, 0x80, 0x52,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x43, 0x00, 0x80, 0x52, 0xfd, 0x03, 0x00, 0x91,
        0x58, 0x27, 0x28, 0xcb, 0xa0, 0x32, 0x28, 0xcb,
        0x1b, 0x3d, 0x00, 0x12, 0x17, 0x3d, 0x40, 0x92,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x02, 0x20, 0x00, 0x91, 0xe4, 0x03, 0x17, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x99, 0x22, 0x40, 0xf9,
        0xf3, 0x03, 0x00, 0xaa, 0x9f, 0x22, 0x00, 0xf9,
        0xbb, 0x02, 0x00, 0x34, 0xe8, 0xee, 0x7c, 0xd3,
        0x29, 0x00, 0x80, 0x52, 0x37, 0x05, 0x17, 0xaa,
        0x08, 0x0d, 0x18, 0x8b, 0x08, 0x01, 0x15, 0x8b,
        0x15, 0x00, 0x00, 0x90, 0xb5, 0x02, 0x40, 0xf9,
        0x1a, 0x21, 0x00, 0xd1, 0x04, 0x00, 0x00, 0x14,
        0xf7, 0x06, 0x00, 0xd1, 0xff, 0x06, 0x00, 0xf1,
        0x29, 0x01, 0x00, 0x54, 0x40, 0x87, 0x5f, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x68, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x01, 0xff, 0xff, 0x54, 0xa0, 0x02, 0x3f, 0xd6,
        0xf6, 0xff, 0xff, 0x17, 0x33, 0x01, 0x00, 0xb4,
        0x08, 0x00, 0x00, 0x90, 0x29, 0x00, 0x80, 0x52,
        0x08, 0x01, 0x40, 0xf9, 0x33, 0x7b, 0x38, 0xf8,
        0x28, 0x25, 0x28, 0xcb, 0x35, 0x0f, 0x08, 0x8b,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x35, 0x0f, 0x18, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyDict_FromItems+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyDict_FromItems);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xa8, (uintptr_t)data);
    patch_aarch64_12x(code + 0xb0, (uintptr_t)data);
    patch_aarch64_26r(code + 0xc4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xd0, state->instruction_starts[instruction->error_target]);
}

void
emit__BUILD_SET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_SET.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 9000001a      adrp    x26, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PySet_New
    // c: aa1f03f7      mov     x23, xzr
    // 10: f940035a      ldr     x26, [x26]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: aa1f03e0      mov     x0, xzr
    // 1c: f9400108      ldr     x8, [x8]
    // 000000000000001c:  R_AARCH64_LD64_GOT_LO12_NC   PySet_New
    // 20: 910003fd      mov     x29, sp
    // 24: cb3a22f8      sub     x24, x23, w26, uxth
    // 28: d63f0100      blr     x8
    // 2c: f9402299      ldr     x25, [x20, #0x40]
    // 30: f900229f      str     xzr, [x20, #0x40]
    // 34: b40007c0      cbz     x0, 0x12c <_JIT_ENTRY+0x12c>
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 3c: aa0003f3      mov     x19, x0
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 44: 72003d1f      tst     w8, #0xffff
    // 48: 54000640      b.eq    0x110 <_JIT_ENTRY+0x110>
    // 4c: 9000001b      adrp    x27, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  R_AARCH64_ADR_GOT_PAGE       PySet_Add
    // 50: 2a1f03f7      mov     w23, wzr
    // 54: aa1803fc      mov     x28, x24
    // 58: f940037b      ldr     x27, [x27]
    // 0000000000000058:  R_AARCH64_LD64_GOT_LO12_NC   PySet_Add
    // 5c: 14000003      b       0x68 <_JIT_ENTRY+0x68>
    // 60: b100079c      adds    x28, x28, #0x1
    // 64: 54000142      b.hs    0x8c <_JIT_ENTRY+0x8c>
    // 68: 35ffffd7      cbnz    w23, 0x60 <_JIT_ENTRY+0x60>
    // 6c: f9002299      str     x25, [x20, #0x40]
    // 70: aa1303e0      mov     x0, x19
    // 74: f87c7aa1      ldr     x1, [x21, x28, lsl #3]
    // 78: d63f0360      blr     x27
    // 7c: f9402299      ldr     x25, [x20, #0x40]
    // 80: 2a0003f7      mov     w23, w0
    // 84: f900229f      str     xzr, [x20, #0x40]
    // 88: 17fffff6      b       0x60 <_JIT_ENTRY+0x60>
    // 8c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 90: f9400108      ldr     x8, [x8]
    // 0000000000000090:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 94: 72003d1f      tst     w8, #0xffff
    // 98: 54000240      b.eq    0xe0 <_JIT_ENTRY+0xe0>
    // 9c: 9000001b      adrp    x27, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // a0: 92403d08      and     x8, x8, #0xffff
    // a4: d10022b5      sub     x21, x21, #0x8
    // a8: f940037b      ldr     x27, [x27]
    // 00000000000000a8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // ac: 9100051c      add     x28, x8, #0x1
    // b0: 14000004      b       0xc0 <_JIT_ENTRY+0xc0>
    // b4: d100079c      sub     x28, x28, #0x1
    // b8: f100079f      cmp     x28, #0x1
    // bc: 54000129      b.ls    0xe0 <_JIT_ENTRY+0xe0>
    // c0: f85f86a0      ldr     x0, [x21], #-0x8
    // c4: b9400008      ldr     w8, [x0]
    // c8: 37ffff68      tbnz    w8, #0x1f, 0xb4 <_JIT_ENTRY+0xb4>
    // cc: 71000508      subs    w8, w8, #0x1
    // d0: b9000008      str     w8, [x0]
    // d4: 54ffff01      b.ne    0xb4 <_JIT_ENTRY+0xb4>
    // d8: d63f0360      blr     x27
    // dc: 17fffff6      b       0xb4 <_JIT_ENTRY+0xb4>
    // e0: 34000197      cbz     w23, 0x110 <_JIT_ENTRY+0x110>
    // e4: 8b180f28      add     x8, x25, x24, lsl #3
    // e8: f9002288      str     x8, [x20, #0x40]
    // ec: b9400268      ldr     w8, [x19]
    // f0: 37f80088      tbnz    w8, #0x1f, 0x100 <_JIT_ENTRY+0x100>
    // f4: 71000508      subs    w8, w8, #0x1
    // f8: b9000268      str     w8, [x19]
    // fc: 54000480      b.eq    0x18c <_JIT_ENTRY+0x18c>
    // 100: f9402295      ldr     x21, [x20, #0x40]
    // 104: f900229f      str     xzr, [x20, #0x40]
    // 108: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 10c: 14000000      b       0x10c <_JIT_ENTRY+0x10c>
    // 000000000000010c:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 110: 12003f48      and     w8, w26, #0xffff
    // 114: 52800029      mov     w9, #0x1                // =1
    // 118: f8387b33      str     x19, [x25, x24, lsl #3]
    // 11c: 4b080128      sub     w8, w9, w8
    // 120: 8b28cf35      add     x21, x25, w8, sxtw #3
    // 124: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 128: 14000000      b       0x128 <_JIT_ENTRY+0x128>
    // 0000000000000128:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 12c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000012c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 130: f9400108      ldr     x8, [x8]
    // 0000000000000130:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 134: 72003d1f      tst     w8, #0xffff
    // 138: 54000240      b.eq    0x180 <_JIT_ENTRY+0x180>
    // 13c: 90000013      adrp    x19, 0x0 <_JIT_ENTRY>
    // 000000000000013c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 140: 92403d08      and     x8, x8, #0xffff
    // 144: d10022b5      sub     x21, x21, #0x8
    // 148: f9400273      ldr     x19, [x19]
    // 0000000000000148:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 14c: 91000517      add     x23, x8, #0x1
    // 150: 14000004      b       0x160 <_JIT_ENTRY+0x160>
    // 154: d10006f7      sub     x23, x23, #0x1
    // 158: f10006ff      cmp     x23, #0x1
    // 15c: 54000129      b.ls    0x180 <_JIT_ENTRY+0x180>
    // 160: f85f86a0      ldr     x0, [x21], #-0x8
    // 164: b9400008      ldr     w8, [x0]
    // 168: 37ffff68      tbnz    w8, #0x1f, 0x154 <_JIT_ENTRY+0x154>
    // 16c: 71000508      subs    w8, w8, #0x1
    // 170: b9000008      str     w8, [x0]
    // 174: 54ffff01      b.ne    0x154 <_JIT_ENTRY+0x154>
    // 178: d63f0260      blr     x19
    // 17c: 17fffff6      b       0x154 <_JIT_ENTRY+0x154>
    // 180: 8b180f35      add     x21, x25, x24, lsl #3
    // 184: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 188: 14000000      b       0x188 <_JIT_ENTRY+0x188>
    // 0000000000000188:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 18c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000018c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 190: aa1303e0      mov     x0, x19
    // 194: f9400108      ldr     x8, [x8]
    // 0000000000000194:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 198: d63f0100      blr     x8
    // 19c: f9402295      ldr     x21, [x20, #0x40]
    // 1a0: f900229f      str     xzr, [x20, #0x40]
    // 1a4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 1a8: 14000000      b       0x1a8 <_JIT_ENTRY+0x1a8>
    // 00000000000001a8:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 1ac: 00 00 00 00
    const unsigned char code_body[432] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x1a, 0x00, 0x00, 0x90,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x1f, 0xaa,
        0x5a, 0x03, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x1f, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0xfd, 0x03, 0x00, 0x91, 0xf8, 0x22, 0x3a, 0xcb,
        0x00, 0x01, 0x3f, 0xd6, 0x99, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xc0, 0x07, 0x00, 0xb4,
        0x08, 0x00, 0x00, 0x90, 0xf3, 0x03, 0x00, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x1f, 0x3d, 0x00, 0x72,
        0x40, 0x06, 0x00, 0x54, 0x1b, 0x00, 0x00, 0x90,
        0xf7, 0x03, 0x1f, 0x2a, 0xfc, 0x03, 0x18, 0xaa,
        0x7b, 0x03, 0x40, 0xf9, 0x03, 0x00, 0x00, 0x14,
        0x9c, 0x07, 0x00, 0xb1, 0x42, 0x01, 0x00, 0x54,
        0xd7, 0xff, 0xff, 0x35, 0x99, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0xa1, 0x7a, 0x7c, 0xf8,
        0x60, 0x03, 0x3f, 0xd6, 0x99, 0x22, 0x40, 0xf9,
        0xf7, 0x03, 0x00, 0x2a, 0x9f, 0x22, 0x00, 0xf9,
        0xf6, 0xff, 0xff, 0x17, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x1f, 0x3d, 0x00, 0x72,
        0x40, 0x02, 0x00, 0x54, 0x1b, 0x00, 0x00, 0x90,
        0x08, 0x3d, 0x40, 0x92, 0xb5, 0x22, 0x00, 0xd1,
        0x7b, 0x03, 0x40, 0xf9, 0x1c, 0x05, 0x00, 0x91,
        0x04, 0x00, 0x00, 0x14, 0x9c, 0x07, 0x00, 0xd1,
        0x9f, 0x07, 0x00, 0xf1, 0x29, 0x01, 0x00, 0x54,
        0xa0, 0x86, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x68, 0xff, 0xff, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x01, 0xff, 0xff, 0x54,
        0x60, 0x03, 0x3f, 0xd6, 0xf6, 0xff, 0xff, 0x17,
        0x97, 0x01, 0x00, 0x34, 0x28, 0x0f, 0x18, 0x8b,
        0x88, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0x80, 0x04, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x48, 0x3f, 0x00, 0x12, 0x29, 0x00, 0x80, 0x52,
        0x33, 0x7b, 0x38, 0xf8, 0x28, 0x01, 0x08, 0x4b,
        0x35, 0xcf, 0x28, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x1f, 0x3d, 0x00, 0x72,
        0x40, 0x02, 0x00, 0x54, 0x13, 0x00, 0x00, 0x90,
        0x08, 0x3d, 0x40, 0x92, 0xb5, 0x22, 0x00, 0xd1,
        0x73, 0x02, 0x40, 0xf9, 0x17, 0x05, 0x00, 0x91,
        0x04, 0x00, 0x00, 0x14, 0xf7, 0x06, 0x00, 0xd1,
        0xff, 0x06, 0x00, 0xf1, 0x29, 0x01, 0x00, 0x54,
        0xa0, 0x86, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x68, 0xff, 0xff, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x01, 0xff, 0xff, 0x54,
        0x60, 0x02, 0x3f, 0xd6, 0xf6, 0xff, 0xff, 0x17,
        0x35, 0x0f, 0x18, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PySet_New+0x0
    // 10: &PySet_Add+0x0
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PySet_New);
    patch_64(data + 0x10, (uintptr_t)&PySet_Add);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_12x(code + 0x40, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x58, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x8c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x9c, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xa8, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0x10c, state->instruction_starts[instruction->error_target]);
    patch_aarch64_26r(code + 0x128, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x12c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x13c, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x148, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0x188, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0x18c, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x194, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0x1a8, state->instruction_starts[instruction->error_target]);
}

void
emit__BUILD_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_SLICE.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: cb282eb3      sub     x19, x21, w8, uxth #3
    // c: 12003d08      and     w8, w8, #0xffff
    // 10: 71000d1f      cmp     w8, #0x3
    // 14: a9400660      ldp     x0, x1, [x19]
    // 18: 54000061      b.ne    0x24 <_JIT_ENTRY+0x24>
    // 1c: f9400a62      ldr     x2, [x19, #0x10]
    // 20: 14000002      b       0x28 <_JIT_ENTRY+0x28>
    // 24: aa1f03e2      mov     x2, xzr
    // 28: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       PySlice_New
    // 30: 910003fd      mov     x29, sp
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   PySlice_New
    // 38: d63f0100      blr     x8
    // 3c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 40: aa0003f7      mov     x23, x0
    // 44: f9400108      ldr     x8, [x8]
    // 0000000000000044:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 48: 72003d1f      tst     w8, #0xffff
    // 4c: 54000240      b.eq    0x94 <_JIT_ENTRY+0x94>
    // 50: 90000018      adrp    x24, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 54: 92403d08      and     x8, x8, #0xffff
    // 58: d10022ba      sub     x26, x21, #0x8
    // 5c: f9400318      ldr     x24, [x24]
    // 000000000000005c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 60: 91000519      add     x25, x8, #0x1
    // 64: 14000004      b       0x74 <_JIT_ENTRY+0x74>
    // 68: d1000739      sub     x25, x25, #0x1
    // 6c: f100073f      cmp     x25, #0x1
    // 70: 54000129      b.ls    0x94 <_JIT_ENTRY+0x94>
    // 74: f85f8740      ldr     x0, [x26], #-0x8
    // 78: b9400008      ldr     w8, [x0]
    // 7c: 37ffff68      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 80: 71000508      subs    w8, w8, #0x1
    // 84: b9000008      str     w8, [x0]
    // 88: 54ffff01      b.ne    0x68 <_JIT_ENTRY+0x68>
    // 8c: d63f0300      blr     x24
    // 90: 17fffff6      b       0x68 <_JIT_ENTRY+0x68>
    // 94: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 98: b4000117      cbz     x23, 0xb8 <_JIT_ENTRY+0xb8>
    // 9c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // a0: 52800029      mov     w9, #0x1                // =1
    // a4: f9400108      ldr     x8, [x8]
    // 00000000000000a4:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // a8: f9000277      str     x23, [x19]
    // ac: cb282128      sub     x8, x9, w8, uxth
    // b0: 8b080eb5      add     x21, x21, x8, lsl #3
    // b4: 14000000      b       0xb4 <_JIT_ENTRY+0xb4>
    // 00000000000000b4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // b8: aa1303f5      mov     x21, x19
    // bc: 14000000      b       0xbc <_JIT_ENTRY+0xbc>
    // 00000000000000bc:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[192] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xb3, 0x2e, 0x28, 0xcb, 0x08, 0x3d, 0x00, 0x12,
        0x1f, 0x0d, 0x00, 0x71, 0x60, 0x06, 0x40, 0xa9,
        0x61, 0x00, 0x00, 0x54, 0x62, 0x0a, 0x40, 0xf9,
        0x02, 0x00, 0x00, 0x14, 0xe2, 0x03, 0x1f, 0xaa,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xf7, 0x03, 0x00, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x1f, 0x3d, 0x00, 0x72, 0x40, 0x02, 0x00, 0x54,
        0x18, 0x00, 0x00, 0x90, 0x08, 0x3d, 0x40, 0x92,
        0xba, 0x22, 0x00, 0xd1, 0x18, 0x03, 0x40, 0xf9,
        0x19, 0x05, 0x00, 0x91, 0x04, 0x00, 0x00, 0x14,
        0x39, 0x07, 0x00, 0xd1, 0x3f, 0x07, 0x00, 0xf1,
        0x29, 0x01, 0x00, 0x54, 0x40, 0x87, 0x5f, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x68, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x01, 0xff, 0xff, 0x54, 0x00, 0x03, 0x3f, 0xd6,
        0xf6, 0xff, 0xff, 0x17, 0xfd, 0x7b, 0xc1, 0xa8,
        0x17, 0x01, 0x00, 0xb4, 0x08, 0x00, 0x00, 0x90,
        0x29, 0x00, 0x80, 0x52, 0x08, 0x01, 0x40, 0xf9,
        0x77, 0x02, 0x00, 0xf9, 0x28, 0x21, 0x28, 0xcb,
        0xb5, 0x0e, 0x08, 0x8b, 0x00, 0x00, 0x00, 0x14,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PySlice_New+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PySlice_New);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x3c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x44, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x50, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x5c, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x9c, (uintptr_t)data);
    patch_aarch64_12x(code + 0xa4, (uintptr_t)data);
    patch_aarch64_26r(code + 0xb4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xbc, state->instruction_starts[instruction->error_target]);
}

void
emit__BUILD_STRING(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_STRING.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       _PyUnicode_JoinArray
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 18: f940014a      ldr     x10, [x10]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _PyUnicode_JoinArray
    // 1c: 910003fd      mov     x29, sp
    // 20: cb282eb3      sub     x19, x21, w8, uxth #3
    // 24: 12003d19      and     w25, w8, #0xffff
    // 28: 92403d18      and     x24, x8, #0xffff
    // 2c: 52914608      mov     w8, #0x8a30             // =35376
    // 30: aa1803e2      mov     x2, x24
    // 34: 8b080120      add     x0, x9, x8
    // 38: aa1303e1      mov     x1, x19
    // 3c: d63f0140      blr     x10
    // 40: aa0003f7      mov     x23, x0
    // 44: 34000239      cbz     w25, 0x88 <_JIT_ENTRY+0x88>
    // 48: 90000019      adrp    x25, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 4c: 91000718      add     x24, x24, #0x1
    // 50: d10022ba      sub     x26, x21, #0x8
    // 54: f9400339      ldr     x25, [x25]
    // 0000000000000054:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 58: 14000004      b       0x68 <_JIT_ENTRY+0x68>
    // 5c: d1000718      sub     x24, x24, #0x1
    // 60: f100071f      cmp     x24, #0x1
    // 64: 54000129      b.ls    0x88 <_JIT_ENTRY+0x88>
    // 68: f85f8740      ldr     x0, [x26], #-0x8
    // 6c: b9400008      ldr     w8, [x0]
    // 70: 37ffff68      tbnz    w8, #0x1f, 0x5c <_JIT_ENTRY+0x5c>
    // 74: 71000508      subs    w8, w8, #0x1
    // 78: b9000008      str     w8, [x0]
    // 7c: 54ffff01      b.ne    0x5c <_JIT_ENTRY+0x5c>
    // 80: d63f0320      blr     x25
    // 84: 17fffff6      b       0x5c <_JIT_ENTRY+0x5c>
    // 88: b4000137      cbz     x23, 0xac <_JIT_ENTRY+0xac>
    // 8c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 90: 52800029      mov     w9, #0x1                // =1
    // 94: f9400108      ldr     x8, [x8]
    // 0000000000000094:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 98: f9000277      str     x23, [x19]
    // 9c: cb282128      sub     x8, x9, w8, uxth
    // a0: 8b080eb5      add     x21, x21, x8, lsl #3
    // a4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a8: 14000000      b       0xa8 <_JIT_ENTRY+0xa8>
    // 00000000000000a8:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // ac: aa1303f5      mov     x21, x19
    // b0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b4: 14000000      b       0xb4 <_JIT_ENTRY+0xb4>
    // 00000000000000b4:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[184] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0x0a, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x4a, 0x01, 0x40, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0xb3, 0x2e, 0x28, 0xcb, 0x19, 0x3d, 0x00, 0x12,
        0x18, 0x3d, 0x40, 0x92, 0x08, 0x46, 0x91, 0x52,
        0xe2, 0x03, 0x18, 0xaa, 0x20, 0x01, 0x08, 0x8b,
        0xe1, 0x03, 0x13, 0xaa, 0x40, 0x01, 0x3f, 0xd6,
        0xf7, 0x03, 0x00, 0xaa, 0x39, 0x02, 0x00, 0x34,
        0x19, 0x00, 0x00, 0x90, 0x18, 0x07, 0x00, 0x91,
        0xba, 0x22, 0x00, 0xd1, 0x39, 0x03, 0x40, 0xf9,
        0x04, 0x00, 0x00, 0x14, 0x18, 0x07, 0x00, 0xd1,
        0x1f, 0x07, 0x00, 0xf1, 0x29, 0x01, 0x00, 0x54,
        0x40, 0x87, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x68, 0xff, 0xff, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x01, 0xff, 0xff, 0x54,
        0x20, 0x03, 0x3f, 0xd6, 0xf6, 0xff, 0xff, 0x17,
        0x37, 0x01, 0x00, 0xb4, 0x08, 0x00, 0x00, 0x90,
        0x29, 0x00, 0x80, 0x52, 0x08, 0x01, 0x40, 0xf9,
        0x77, 0x02, 0x00, 0xf9, 0x28, 0x21, 0x28, 0xcb,
        0xb5, 0x0e, 0x08, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &_PyRuntime+0x0
    // 10: &_PyUnicode_JoinArray+0x0
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyUnicode_JoinArray);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x48, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x54, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x8c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x94, (uintptr_t)data);
    patch_aarch64_26r(code + 0xa8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xb4, state->instruction_starts[instruction->error_target]);
}

void
emit__BUILD_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_TUPLE.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _PyTuple_FromStackRefStealOnSuccess
    // c: 910003fd      mov     x29, sp
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _PyTuple_FromStackRefStealOnSuccess
    // 18: cb282eb3      sub     x19, x21, w8, uxth #3
    // 1c: 92403d01      and     x1, x8, #0xffff
    // 20: aa1303e0      mov     x0, x19
    // 24: d63f0120      blr     x9
    // 28: b4000120      cbz     x0, 0x4c <_JIT_ENTRY+0x4c>
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 30: 52800029      mov     w9, #0x1                // =1
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 38: f9000260      str     x0, [x19]
    // 3c: cb282128      sub     x8, x9, w8, uxth
    // 40: 8b080eb5      add     x21, x21, x8, lsl #3
    // 44: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 48: 14000000      b       0x48 <_JIT_ENTRY+0x48>
    // 0000000000000048:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 4c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 50: 14000000      b       0x50 <_JIT_ENTRY+0x50>
    // 0000000000000050:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xb3, 0x2e, 0x28, 0xcb, 0x01, 0x3d, 0x40, 0x92,
        0xe0, 0x03, 0x13, 0xaa, 0x20, 0x01, 0x3f, 0xd6,
        0x20, 0x01, 0x00, 0xb4, 0x08, 0x00, 0x00, 0x90,
        0x29, 0x00, 0x80, 0x52, 0x08, 0x01, 0x40, 0xf9,
        0x60, 0x02, 0x00, 0xf9, 0x28, 0x21, 0x28, 0xcb,
        0xb5, 0x0e, 0x08, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyTuple_FromStackRefStealOnSuccess+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyTuple_FromStackRefStealOnSuccess);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x2c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x34, (uintptr_t)data);
    patch_aarch64_26r(code + 0x48, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x50, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_BUILTIN_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_BUILTIN_CLASS.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 92800028      mov     x8, #-0x2               // =-2
    // c: 910003fd      mov     x29, sp
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: cb292117      sub     x23, x8, w9, uxth
    // 18: f8777aa0      ldr     x0, [x21, x23, lsl #3]
    // 1c: f9400408      ldr     x8, [x0, #0x8]
    // 20: 3942ad08      ldrb    w8, [x8, #0xab]
    // 24: 36380788      tbz     w8, #0x7, 0x114 <_JIT_ENTRY+0x114>
    // 28: f940c808      ldr     x8, [x0, #0x190]
    // 2c: b4000748      cbz     x8, 0x114 <_JIT_ENTRY+0x114>
    // 30: 12003d2a      and     w10, w9, #0xffff
    // 34: cb292ea9      sub     x9, x21, w9, uxth #3
    // 38: aa1f03e3      mov     x3, xzr
    // 3c: 2a2a03eb      mvn     w11, w10
    // 40: 93407d78      sxtw    x24, w11
    // 44: f8787aab      ldr     x11, [x21, x24, lsl #3]
    // 48: f9002295      str     x21, [x20, #0x40]
    // 4c: f100017f      cmp     x11, #0x0
    // 50: 928000eb      mov     x11, #-0x8              // =-8
    // 54: 1a8a0542      cinc    w2, w10, ne
    // 58: 9a9f116a      csel    x10, x11, xzr, ne
    // 5c: 8b0a0121      add     x1, x9, x10
    // 60: d63f0100      blr     x8
    // 64: f9402299      ldr     x25, [x20, #0x40]
    // 68: f900229f      str     xzr, [x20, #0x40]
    // 6c: aa0003f3      mov     x19, x0
    // 70: f8777aa8      ldr     x8, [x21, x23, lsl #3]
    // 74: b9400109      ldr     w9, [x8]
    // 78: 37f80109      tbnz    w9, #0x1f, 0x98 <_JIT_ENTRY+0x98>
    // 7c: 71000529      subs    w9, w9, #0x1
    // 80: b9000109      str     w9, [x8]
    // 84: 540000a1      b.ne    0x98 <_JIT_ENTRY+0x98>
    // 88: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 8c: aa0803e0      mov     x0, x8
    // 90: f9400129      ldr     x9, [x9]
    // 0000000000000090:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 94: d63f0120      blr     x9
    // 98: f8787aa0      ldr     x0, [x21, x24, lsl #3]
    // 9c: b4000120      cbz     x0, 0xc0 <_JIT_ENTRY+0xc0>
    // a0: b9400008      ldr     w8, [x0]
    // a4: 37f800e8      tbnz    w8, #0x1f, 0xc0 <_JIT_ENTRY+0xc0>
    // a8: 71000508      subs    w8, w8, #0x1
    // ac: b9000008      str     w8, [x0]
    // b0: 54000081      b.ne    0xc0 <_JIT_ENTRY+0xc0>
    // b4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // b8: f9400108      ldr     x8, [x8]
    // 00000000000000b8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // bc: d63f0100      blr     x8
    // c0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c0:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // c4: f9400108      ldr     x8, [x8]
    // 00000000000000c4:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // c8: 72003d1f      tst     w8, #0xffff
    // cc: 54000280      b.eq    0x11c <_JIT_ENTRY+0x11c>
    // d0: 9000001a      adrp    x26, 0x0 <_JIT_ENTRY>
    // 00000000000000d0:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // d4: 92403d08      and     x8, x8, #0xffff
    // d8: d10022b5      sub     x21, x21, #0x8
    // dc: f940035a      ldr     x26, [x26]
    // 00000000000000dc:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // e0: 9100051b      add     x27, x8, #0x1
    // e4: 14000004      b       0xf4 <_JIT_ENTRY+0xf4>
    // e8: d100077b      sub     x27, x27, #0x1
    // ec: f100077f      cmp     x27, #0x1
    // f0: 54000169      b.ls    0x11c <_JIT_ENTRY+0x11c>
    // f4: f85f86a0      ldr     x0, [x21], #-0x8
    // f8: b9400008      ldr     w8, [x0]
    // fc: 37ffff68      tbnz    w8, #0x1f, 0xe8 <_JIT_ENTRY+0xe8>
    // 100: 71000508      subs    w8, w8, #0x1
    // 104: b9000008      str     w8, [x0]
    // 108: 54ffff01      b.ne    0xe8 <_JIT_ENTRY+0xe8>
    // 10c: d63f0340      blr     x26
    // 110: 17fffff6      b       0xe8 <_JIT_ENTRY+0xe8>
    // 114: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 118: 14000000      b       0x118 <_JIT_ENTRY+0x118>
    // 0000000000000118:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 11c: b40000b3      cbz     x19, 0x130 <_JIT_ENTRY+0x130>
    // 120: 8b180f35      add     x21, x25, x24, lsl #3
    // 124: f8377b33      str     x19, [x25, x23, lsl #3]
    // 128: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 12c: 14000000      b       0x12c <_JIT_ENTRY+0x12c>
    // 000000000000012c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 130: 8b170f35      add     x21, x25, x23, lsl #3
    // 134: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 138: 14000000      b       0x138 <_JIT_ENTRY+0x138>
    // 0000000000000138:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 13c: 00 00 00 00
    const unsigned char code_body[320] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x09, 0x00, 0x00, 0x90,
        0x28, 0x00, 0x80, 0x92, 0xfd, 0x03, 0x00, 0x91,
        0x29, 0x01, 0x40, 0xf9, 0x17, 0x21, 0x29, 0xcb,
        0xa0, 0x7a, 0x77, 0xf8, 0x08, 0x04, 0x40, 0xf9,
        0x08, 0xad, 0x42, 0x39, 0x88, 0x07, 0x38, 0x36,
        0x08, 0xc8, 0x40, 0xf9, 0x48, 0x07, 0x00, 0xb4,
        0x2a, 0x3d, 0x00, 0x12, 0xa9, 0x2e, 0x29, 0xcb,
        0xe3, 0x03, 0x1f, 0xaa, 0xeb, 0x03, 0x2a, 0x2a,
        0x78, 0x7d, 0x40, 0x93, 0xab, 0x7a, 0x78, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x7f, 0x01, 0x00, 0xf1,
        0xeb, 0x00, 0x80, 0x92, 0x42, 0x05, 0x8a, 0x1a,
        0x6a, 0x11, 0x9f, 0x9a, 0x21, 0x01, 0x0a, 0x8b,
        0x00, 0x01, 0x3f, 0xd6, 0x99, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf3, 0x03, 0x00, 0xaa,
        0xa8, 0x7a, 0x77, 0xf8, 0x09, 0x01, 0x40, 0xb9,
        0x09, 0x01, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x71,
        0x09, 0x01, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x08, 0xaa,
        0x29, 0x01, 0x40, 0xf9, 0x20, 0x01, 0x3f, 0xd6,
        0xa0, 0x7a, 0x78, 0xf8, 0x20, 0x01, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x1f, 0x3d, 0x00, 0x72, 0x80, 0x02, 0x00, 0x54,
        0x1a, 0x00, 0x00, 0x90, 0x08, 0x3d, 0x40, 0x92,
        0xb5, 0x22, 0x00, 0xd1, 0x5a, 0x03, 0x40, 0xf9,
        0x1b, 0x05, 0x00, 0x91, 0x04, 0x00, 0x00, 0x14,
        0x7b, 0x07, 0x00, 0xd1, 0x7f, 0x07, 0x00, 0xf1,
        0x69, 0x01, 0x00, 0x54, 0xa0, 0x86, 0x5f, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x68, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x01, 0xff, 0xff, 0x54, 0x40, 0x03, 0x3f, 0xd6,
        0xf6, 0xff, 0xff, 0x17, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xb3, 0x00, 0x00, 0xb4,
        0x35, 0x0f, 0x18, 0x8b, 0x33, 0x7b, 0x37, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x35, 0x0f, 0x17, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x88, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x90, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0xb4, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0xc0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xd0, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xdc, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x118, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x12c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x138, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_BUILTIN_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_BUILTIN_FAST.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 92800028      mov     x8, #-0x2               // =-2
    // c: 9000000e      adrp    x14, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       PyCFunction_Type
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: 910003fd      mov     x29, sp
    // 18: cb292117      sub     x23, x8, w9, uxth
    // 1c: 12003d2c      and     w12, w9, #0xffff
    // 20: 2a2c03ea      mvn     w10, w12
    // 24: f8777aa8      ldr     x8, [x21, x23, lsl #3]
    // 28: f86adaab      ldr     x11, [x21, w10, sxtw #3]
    // 2c: f940050d      ldr     x13, [x8, #0x8]
    // 30: f94001ce      ldr     x14, [x14]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   PyCFunction_Type
    // 34: f100017f      cmp     x11, #0x0
    // 38: 928000eb      mov     x11, #-0x8              // =-8
    // 3c: 1a8c0582      cinc    w2, w12, ne
    // 40: 9a9f116b      csel    x11, x11, xzr, ne
    // 44: eb0e01bf      cmp     x13, x14
    // 48: 54000701      b.ne    0x128 <_JIT_ENTRY+0x128>
    // 4c: f940090c      ldr     x12, [x8, #0x10]
    // 50: b940118d      ldr     w13, [x12, #0x10]
    // 54: 710201bf      cmp     w13, #0x80
    // 58: 54000681      b.ne    0x128 <_JIT_ENTRY+0x128>
    // 5c: cb292ea9      sub     x9, x21, w9, uxth #3
    // 60: 93407d58      sxtw    x24, w10
    // 64: f940058a      ldr     x10, [x12, #0x8]
    // 68: f9400d00      ldr     x0, [x8, #0x18]
    // 6c: f9002295      str     x21, [x20, #0x40]
    // 70: 8b0b0121      add     x1, x9, x11
    // 74: d63f0140      blr     x10
    // 78: f9402299      ldr     x25, [x20, #0x40]
    // 7c: f900229f      str     xzr, [x20, #0x40]
    // 80: aa0003f3      mov     x19, x0
    // 84: f8777aa8      ldr     x8, [x21, x23, lsl #3]
    // 88: b9400109      ldr     w9, [x8]
    // 8c: 37f80109      tbnz    w9, #0x1f, 0xac <_JIT_ENTRY+0xac>
    // 90: 71000529      subs    w9, w9, #0x1
    // 94: b9000109      str     w9, [x8]
    // 98: 540000a1      b.ne    0xac <_JIT_ENTRY+0xac>
    // 9c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // a0: aa0803e0      mov     x0, x8
    // a4: f9400129      ldr     x9, [x9]
    // 00000000000000a4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // a8: d63f0120      blr     x9
    // ac: f8787aa0      ldr     x0, [x21, x24, lsl #3]
    // b0: b4000120      cbz     x0, 0xd4 <_JIT_ENTRY+0xd4>
    // b4: b9400008      ldr     w8, [x0]
    // b8: 37f800e8      tbnz    w8, #0x1f, 0xd4 <_JIT_ENTRY+0xd4>
    // bc: 71000508      subs    w8, w8, #0x1
    // c0: b9000008      str     w8, [x0]
    // c4: 54000081      b.ne    0xd4 <_JIT_ENTRY+0xd4>
    // c8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // cc: f9400108      ldr     x8, [x8]
    // 00000000000000cc:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // d0: d63f0100      blr     x8
    // d4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000d4:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // d8: f9400108      ldr     x8, [x8]
    // 00000000000000d8:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // dc: 72003d1f      tst     w8, #0xffff
    // e0: 54000280      b.eq    0x130 <_JIT_ENTRY+0x130>
    // e4: 9000001a      adrp    x26, 0x0 <_JIT_ENTRY>
    // 00000000000000e4:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // e8: 92403d08      and     x8, x8, #0xffff
    // ec: d10022b5      sub     x21, x21, #0x8
    // f0: f940035a      ldr     x26, [x26]
    // 00000000000000f0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // f4: 9100051b      add     x27, x8, #0x1
    // f8: 14000004      b       0x108 <_JIT_ENTRY+0x108>
    // fc: d100077b      sub     x27, x27, #0x1
    // 100: f100077f      cmp     x27, #0x1
    // 104: 54000169      b.ls    0x130 <_JIT_ENTRY+0x130>
    // 108: f85f86a0      ldr     x0, [x21], #-0x8
    // 10c: b9400008      ldr     w8, [x0]
    // 110: 37ffff68      tbnz    w8, #0x1f, 0xfc <_JIT_ENTRY+0xfc>
    // 114: 71000508      subs    w8, w8, #0x1
    // 118: b9000008      str     w8, [x0]
    // 11c: 54ffff01      b.ne    0xfc <_JIT_ENTRY+0xfc>
    // 120: d63f0340      blr     x26
    // 124: 17fffff6      b       0xfc <_JIT_ENTRY+0xfc>
    // 128: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 12c: 14000000      b       0x12c <_JIT_ENTRY+0x12c>
    // 000000000000012c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 130: b40000b3      cbz     x19, 0x144 <_JIT_ENTRY+0x144>
    // 134: 8b180f35      add     x21, x25, x24, lsl #3
    // 138: f8377b33      str     x19, [x25, x23, lsl #3]
    // 13c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 140: 14000000      b       0x140 <_JIT_ENTRY+0x140>
    // 0000000000000140:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 144: 8b170f35      add     x21, x25, x23, lsl #3
    // 148: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 14c: 14000000      b       0x14c <_JIT_ENTRY+0x14c>
    // 000000000000014c:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[336] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x09, 0x00, 0x00, 0x90,
        0x28, 0x00, 0x80, 0x92, 0x0e, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0x17, 0x21, 0x29, 0xcb, 0x2c, 0x3d, 0x00, 0x12,
        0xea, 0x03, 0x2c, 0x2a, 0xa8, 0x7a, 0x77, 0xf8,
        0xab, 0xda, 0x6a, 0xf8, 0x0d, 0x05, 0x40, 0xf9,
        0xce, 0x01, 0x40, 0xf9, 0x7f, 0x01, 0x00, 0xf1,
        0xeb, 0x00, 0x80, 0x92, 0x82, 0x05, 0x8c, 0x1a,
        0x6b, 0x11, 0x9f, 0x9a, 0xbf, 0x01, 0x0e, 0xeb,
        0x01, 0x07, 0x00, 0x54, 0x0c, 0x09, 0x40, 0xf9,
        0x8d, 0x11, 0x40, 0xb9, 0xbf, 0x01, 0x02, 0x71,
        0x81, 0x06, 0x00, 0x54, 0xa9, 0x2e, 0x29, 0xcb,
        0x58, 0x7d, 0x40, 0x93, 0x8a, 0x05, 0x40, 0xf9,
        0x00, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x21, 0x01, 0x0b, 0x8b, 0x40, 0x01, 0x3f, 0xd6,
        0x99, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf3, 0x03, 0x00, 0xaa, 0xa8, 0x7a, 0x77, 0xf8,
        0x09, 0x01, 0x40, 0xb9, 0x09, 0x01, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x71, 0x09, 0x01, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x08, 0xaa, 0x29, 0x01, 0x40, 0xf9,
        0x20, 0x01, 0x3f, 0xd6, 0xa0, 0x7a, 0x78, 0xf8,
        0x20, 0x01, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x1f, 0x3d, 0x00, 0x72,
        0x80, 0x02, 0x00, 0x54, 0x1a, 0x00, 0x00, 0x90,
        0x08, 0x3d, 0x40, 0x92, 0xb5, 0x22, 0x00, 0xd1,
        0x5a, 0x03, 0x40, 0xf9, 0x1b, 0x05, 0x00, 0x91,
        0x04, 0x00, 0x00, 0x14, 0x7b, 0x07, 0x00, 0xd1,
        0x7f, 0x07, 0x00, 0xf1, 0x69, 0x01, 0x00, 0x54,
        0xa0, 0x86, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x68, 0xff, 0xff, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x01, 0xff, 0xff, 0x54,
        0x40, 0x03, 0x3f, 0xd6, 0xf6, 0xff, 0xff, 0x17,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xb3, 0x00, 0x00, 0xb4, 0x35, 0x0f, 0x18, 0x8b,
        0x33, 0x7b, 0x37, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x35, 0x0f, 0x17, 0x8b,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PyCFunction_Type+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x9c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xa4, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xc8, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xd4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xe4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xf0, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x12c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x140, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x14c, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_BUILTIN_FAST_WITH_KEYWORDS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_BUILTIN_FAST_WITH_KEYWORDS.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 92800028      mov     x8, #-0x2               // =-2
    // c: 9000000e      adrp    x14, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       PyCFunction_Type
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: 910003fd      mov     x29, sp
    // 18: cb292117      sub     x23, x8, w9, uxth
    // 1c: 12003d2c      and     w12, w9, #0xffff
    // 20: 2a2c03ea      mvn     w10, w12
    // 24: f8777aa8      ldr     x8, [x21, x23, lsl #3]
    // 28: f86adaab      ldr     x11, [x21, w10, sxtw #3]
    // 2c: f940050d      ldr     x13, [x8, #0x8]
    // 30: f94001ce      ldr     x14, [x14]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   PyCFunction_Type
    // 34: f100017f      cmp     x11, #0x0
    // 38: 928000eb      mov     x11, #-0x8              // =-8
    // 3c: 1a8c0582      cinc    w2, w12, ne
    // 40: 9a9f116b      csel    x11, x11, xzr, ne
    // 44: eb0e01bf      cmp     x13, x14
    // 48: 54000721      b.ne    0x12c <_JIT_ENTRY+0x12c>
    // 4c: f940090c      ldr     x12, [x8, #0x10]
    // 50: b940118d      ldr     w13, [x12, #0x10]
    // 54: 710209bf      cmp     w13, #0x82
    // 58: 540006a1      b.ne    0x12c <_JIT_ENTRY+0x12c>
    // 5c: cb292ea9      sub     x9, x21, w9, uxth #3
    // 60: 93407d58      sxtw    x24, w10
    // 64: f940058a      ldr     x10, [x12, #0x8]
    // 68: f9400d00      ldr     x0, [x8, #0x18]
    // 6c: aa1f03e3      mov     x3, xzr
    // 70: f9002295      str     x21, [x20, #0x40]
    // 74: 8b0b0121      add     x1, x9, x11
    // 78: d63f0140      blr     x10
    // 7c: f9402299      ldr     x25, [x20, #0x40]
    // 80: f900229f      str     xzr, [x20, #0x40]
    // 84: aa0003f3      mov     x19, x0
    // 88: f8777aa8      ldr     x8, [x21, x23, lsl #3]
    // 8c: b9400109      ldr     w9, [x8]
    // 90: 37f80109      tbnz    w9, #0x1f, 0xb0 <_JIT_ENTRY+0xb0>
    // 94: 71000529      subs    w9, w9, #0x1
    // 98: b9000109      str     w9, [x8]
    // 9c: 540000a1      b.ne    0xb0 <_JIT_ENTRY+0xb0>
    // a0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // a4: aa0803e0      mov     x0, x8
    // a8: f9400129      ldr     x9, [x9]
    // 00000000000000a8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // ac: d63f0120      blr     x9
    // b0: f8787aa0      ldr     x0, [x21, x24, lsl #3]
    // b4: b4000120      cbz     x0, 0xd8 <_JIT_ENTRY+0xd8>
    // b8: b9400008      ldr     w8, [x0]
    // bc: 37f800e8      tbnz    w8, #0x1f, 0xd8 <_JIT_ENTRY+0xd8>
    // c0: 71000508      subs    w8, w8, #0x1
    // c4: b9000008      str     w8, [x0]
    // c8: 54000081      b.ne    0xd8 <_JIT_ENTRY+0xd8>
    // cc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // d0: f9400108      ldr     x8, [x8]
    // 00000000000000d0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // d4: d63f0100      blr     x8
    // d8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000d8:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // dc: f9400108      ldr     x8, [x8]
    // 00000000000000dc:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // e0: 72003d1f      tst     w8, #0xffff
    // e4: 54000280      b.eq    0x134 <_JIT_ENTRY+0x134>
    // e8: 9000001a      adrp    x26, 0x0 <_JIT_ENTRY>
    // 00000000000000e8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // ec: 92403d08      and     x8, x8, #0xffff
    // f0: d10022b5      sub     x21, x21, #0x8
    // f4: f940035a      ldr     x26, [x26]
    // 00000000000000f4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // f8: 9100051b      add     x27, x8, #0x1
    // fc: 14000004      b       0x10c <_JIT_ENTRY+0x10c>
    // 100: d100077b      sub     x27, x27, #0x1
    // 104: f100077f      cmp     x27, #0x1
    // 108: 54000169      b.ls    0x134 <_JIT_ENTRY+0x134>
    // 10c: f85f86a0      ldr     x0, [x21], #-0x8
    // 110: b9400008      ldr     w8, [x0]
    // 114: 37ffff68      tbnz    w8, #0x1f, 0x100 <_JIT_ENTRY+0x100>
    // 118: 71000508      subs    w8, w8, #0x1
    // 11c: b9000008      str     w8, [x0]
    // 120: 54ffff01      b.ne    0x100 <_JIT_ENTRY+0x100>
    // 124: d63f0340      blr     x26
    // 128: 17fffff6      b       0x100 <_JIT_ENTRY+0x100>
    // 12c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 130: 14000000      b       0x130 <_JIT_ENTRY+0x130>
    // 0000000000000130:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 134: b40000b3      cbz     x19, 0x148 <_JIT_ENTRY+0x148>
    // 138: 8b180f35      add     x21, x25, x24, lsl #3
    // 13c: f8377b33      str     x19, [x25, x23, lsl #3]
    // 140: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 144: 14000000      b       0x144 <_JIT_ENTRY+0x144>
    // 0000000000000144:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 148: 8b170f35      add     x21, x25, x23, lsl #3
    // 14c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 150: 14000000      b       0x150 <_JIT_ENTRY+0x150>
    // 0000000000000150:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 154: 00 00 00 00
    const unsigned char code_body[344] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x09, 0x00, 0x00, 0x90,
        0x28, 0x00, 0x80, 0x92, 0x0e, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0x17, 0x21, 0x29, 0xcb, 0x2c, 0x3d, 0x00, 0x12,
        0xea, 0x03, 0x2c, 0x2a, 0xa8, 0x7a, 0x77, 0xf8,
        0xab, 0xda, 0x6a, 0xf8, 0x0d, 0x05, 0x40, 0xf9,
        0xce, 0x01, 0x40, 0xf9, 0x7f, 0x01, 0x00, 0xf1,
        0xeb, 0x00, 0x80, 0x92, 0x82, 0x05, 0x8c, 0x1a,
        0x6b, 0x11, 0x9f, 0x9a, 0xbf, 0x01, 0x0e, 0xeb,
        0x21, 0x07, 0x00, 0x54, 0x0c, 0x09, 0x40, 0xf9,
        0x8d, 0x11, 0x40, 0xb9, 0xbf, 0x09, 0x02, 0x71,
        0xa1, 0x06, 0x00, 0x54, 0xa9, 0x2e, 0x29, 0xcb,
        0x58, 0x7d, 0x40, 0x93, 0x8a, 0x05, 0x40, 0xf9,
        0x00, 0x0d, 0x40, 0xf9, 0xe3, 0x03, 0x1f, 0xaa,
        0x95, 0x22, 0x00, 0xf9, 0x21, 0x01, 0x0b, 0x8b,
        0x40, 0x01, 0x3f, 0xd6, 0x99, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf3, 0x03, 0x00, 0xaa,
        0xa8, 0x7a, 0x77, 0xf8, 0x09, 0x01, 0x40, 0xb9,
        0x09, 0x01, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x71,
        0x09, 0x01, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x08, 0xaa,
        0x29, 0x01, 0x40, 0xf9, 0x20, 0x01, 0x3f, 0xd6,
        0xa0, 0x7a, 0x78, 0xf8, 0x20, 0x01, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x1f, 0x3d, 0x00, 0x72, 0x80, 0x02, 0x00, 0x54,
        0x1a, 0x00, 0x00, 0x90, 0x08, 0x3d, 0x40, 0x92,
        0xb5, 0x22, 0x00, 0xd1, 0x5a, 0x03, 0x40, 0xf9,
        0x1b, 0x05, 0x00, 0x91, 0x04, 0x00, 0x00, 0x14,
        0x7b, 0x07, 0x00, 0xd1, 0x7f, 0x07, 0x00, 0xf1,
        0x69, 0x01, 0x00, 0x54, 0xa0, 0x86, 0x5f, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x68, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x01, 0xff, 0xff, 0x54, 0x40, 0x03, 0x3f, 0xd6,
        0xf6, 0xff, 0xff, 0x17, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xb3, 0x00, 0x00, 0xb4,
        0x35, 0x0f, 0x18, 0x8b, 0x33, 0x7b, 0x37, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x35, 0x0f, 0x17, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyCFunction_Type+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xa0, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xa8, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xcc, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xd8, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xe8, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xf4, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x130, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x144, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x150, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_BUILTIN_O(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_BUILTIN_O.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 928000e9      mov     x9, #-0x8               // =-8
    // c: 910003fd      mov     x29, sp
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: 12003d0a      and     w10, w8, #0xffff
    // 18: 2a2a03eb      mvn     w11, w10
    // 1c: f86bdaab      ldr     x11, [x21, w11, sxtw #3]
    // 20: f100017f      cmp     x11, #0x0
    // 24: 1a8a054a      cinc    w10, w10, ne
    // 28: 9a9f1129      csel    x9, x9, xzr, ne
    // 2c: 7100055f      cmp     w10, #0x1
    // 30: 54000701      b.ne    0x110 <_JIT_ENTRY+0x110>
    // 34: 9280002a      mov     x10, #-0x2              // =-2
    // 38: 9000000c      adrp    x12, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       PyCFunction_Type
    // 3c: cb282158      sub     x24, x10, w8, uxth
    // 40: f8787aaa      ldr     x10, [x21, x24, lsl #3]
    // 44: f940054b      ldr     x11, [x10, #0x8]
    // 48: f940018c      ldr     x12, [x12]
    // 0000000000000048:  R_AARCH64_LD64_GOT_LO12_NC   PyCFunction_Type
    // 4c: eb0c017f      cmp     x11, x12
    // 50: 54000601      b.ne    0x110 <_JIT_ENTRY+0x110>
    // 54: f940094b      ldr     x11, [x10, #0x10]
    // 58: b940116c      ldr     w12, [x11, #0x10]
    // 5c: 7100219f      cmp     w12, #0x8
    // 60: 54000581      b.ne    0x110 <_JIT_ENTRY+0x110>
    // 64: b94036cc      ldr     w12, [x22, #0x34]
    // 68: 7100019f      cmp     w12, #0x0
    // 6c: 5400052d      b.le    0x110 <_JIT_ENTRY+0x110>
    // 70: cb282ea8      sub     x8, x21, w8, uxth #3
    // 74: f940056b      ldr     x11, [x11, #0x8]
    // 78: f9400d40      ldr     x0, [x10, #0x18]
    // 7c: 5100058c      sub     w12, w12, #0x1
    // 80: f8696917      ldr     x23, [x8, x9]
    // 84: b90036cc      str     w12, [x22, #0x34]
    // 88: f9002295      str     x21, [x20, #0x40]
    // 8c: aa1703e1      mov     x1, x23
    // 90: d63f0160      blr     x11
    // 94: b94036c8      ldr     w8, [x22, #0x34]
    // 98: aa0003f3      mov     x19, x0
    // 9c: 11000508      add     w8, w8, #0x1
    // a0: b90036c8      str     w8, [x22, #0x34]
    // a4: b94002e8      ldr     w8, [x23]
    // a8: 37f80108      tbnz    w8, #0x1f, 0xc8 <_JIT_ENTRY+0xc8>
    // ac: 71000508      subs    w8, w8, #0x1
    // b0: b90002e8      str     w8, [x23]
    // b4: 540000a1      b.ne    0xc8 <_JIT_ENTRY+0xc8>
    // b8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // bc: aa1703e0      mov     x0, x23
    // c0: f9400108      ldr     x8, [x8]
    // 00000000000000c0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // c4: d63f0100      blr     x8
    // c8: f9402288      ldr     x8, [x20, #0x40]
    // cc: 8b180d08      add     x8, x8, x24, lsl #3
    // d0: f9002288      str     x8, [x20, #0x40]
    // d4: f8787aa0      ldr     x0, [x21, x24, lsl #3]
    // d8: b9400008      ldr     w8, [x0]
    // dc: 37f800e8      tbnz    w8, #0x1f, 0xf8 <_JIT_ENTRY+0xf8>
    // e0: 71000508      subs    w8, w8, #0x1
    // e4: b9000008      str     w8, [x0]
    // e8: 54000081      b.ne    0xf8 <_JIT_ENTRY+0xf8>
    // ec: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000ec:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // f0: f9400108      ldr     x8, [x8]
    // 00000000000000f0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // f4: d63f0100      blr     x8
    // f8: f9402295      ldr     x21, [x20, #0x40]
    // fc: f900229f      str     xzr, [x20, #0x40]
    // 100: b40000d3      cbz     x19, 0x118 <_JIT_ENTRY+0x118>
    // 104: f80086b3      str     x19, [x21], #0x8
    // 108: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 10c: 14000000      b       0x10c <_JIT_ENTRY+0x10c>
    // 000000000000010c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 110: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 114: 14000000      b       0x114 <_JIT_ENTRY+0x114>
    // 0000000000000114:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 118: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 11c: 14000000      b       0x11c <_JIT_ENTRY+0x11c>
    // 000000000000011c:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[288] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xe9, 0x00, 0x80, 0x92, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x0a, 0x3d, 0x00, 0x12,
        0xeb, 0x03, 0x2a, 0x2a, 0xab, 0xda, 0x6b, 0xf8,
        0x7f, 0x01, 0x00, 0xf1, 0x4a, 0x05, 0x8a, 0x1a,
        0x29, 0x11, 0x9f, 0x9a, 0x5f, 0x05, 0x00, 0x71,
        0x01, 0x07, 0x00, 0x54, 0x2a, 0x00, 0x80, 0x92,
        0x0c, 0x00, 0x00, 0x90, 0x58, 0x21, 0x28, 0xcb,
        0xaa, 0x7a, 0x78, 0xf8, 0x4b, 0x05, 0x40, 0xf9,
        0x8c, 0x01, 0x40, 0xf9, 0x7f, 0x01, 0x0c, 0xeb,
        0x01, 0x06, 0x00, 0x54, 0x4b, 0x09, 0x40, 0xf9,
        0x6c, 0x11, 0x40, 0xb9, 0x9f, 0x21, 0x00, 0x71,
        0x81, 0x05, 0x00, 0x54, 0xcc, 0x36, 0x40, 0xb9,
        0x9f, 0x01, 0x00, 0x71, 0x2d, 0x05, 0x00, 0x54,
        0xa8, 0x2e, 0x28, 0xcb, 0x6b, 0x05, 0x40, 0xf9,
        0x40, 0x0d, 0x40, 0xf9, 0x8c, 0x05, 0x00, 0x51,
        0x17, 0x69, 0x69, 0xf8, 0xcc, 0x36, 0x00, 0xb9,
        0x95, 0x22, 0x00, 0xf9, 0xe1, 0x03, 0x17, 0xaa,
        0x60, 0x01, 0x3f, 0xd6, 0xc8, 0x36, 0x40, 0xb9,
        0xf3, 0x03, 0x00, 0xaa, 0x08, 0x05, 0x00, 0x11,
        0xc8, 0x36, 0x00, 0xb9, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x88, 0x22, 0x40, 0xf9, 0x08, 0x0d, 0x18, 0x8b,
        0x88, 0x22, 0x00, 0xf9, 0xa0, 0x7a, 0x78, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xd3, 0x00, 0x00, 0xb4, 0xb3, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PyCFunction_Type+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x48, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xb8, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xc0, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xec, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x10c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x114, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x11c, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_INTRINSIC_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_INTRINSIC_1.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _PyIntrinsics_UnaryFunctions
    // c: aa1603e0      mov     x0, x22
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _PyIntrinsics_UnaryFunctions
    // 18: f85f82b3      ldur    x19, [x21, #-0x8]
    // 1c: 910003fd      mov     x29, sp
    // 20: f9002295      str     x21, [x20, #0x40]
    // 24: 92403d08      and     x8, x8, #0xffff
    // 28: aa1303e1      mov     x1, x19
    // 2c: d37ced08      lsl     x8, x8, #4
    // 30: f8686928      ldr     x8, [x9, x8]
    // 34: d63f0100      blr     x8
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: b9400268      ldr     w8, [x19]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 48: 71000508      subs    w8, w8, #0x1
    // 4c: b9000268      str     w8, [x19]
    // 50: 540000a0      b.eq    0x64 <_JIT_ENTRY+0x64>
    // 54: b4000160      cbz     x0, 0x80 <_JIT_ENTRY+0x80>
    // 58: f81f82a0      stur    x0, [x21, #-0x8]
    // 5c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 60: 14000000      b       0x60 <_JIT_ENTRY+0x60>
    // 0000000000000060:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 68: aa0003f7      mov     x23, x0
    // 6c: aa1303e0      mov     x0, x19
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: aa1703e0      mov     x0, x23
    // 7c: b5fffef7      cbnz    x23, 0x58 <_JIT_ENTRY+0x58>
    // 80: d10022b5      sub     x21, x21, #0x8
    // 84: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 88: 14000000      b       0x88 <_JIT_ENTRY+0x88>
    // 0000000000000088:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 8c: 00 00 00 00
    const unsigned char code_body[144] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0xfd, 0x03, 0x00, 0x91,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x3d, 0x40, 0x92,
        0xe1, 0x03, 0x13, 0xaa, 0x08, 0xed, 0x7c, 0xd3,
        0x28, 0x69, 0x68, 0xf8, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x60, 0x01, 0x00, 0xb4,
        0xa0, 0x82, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x17, 0xaa, 0xf7, 0xfe, 0xff, 0xb5,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyIntrinsics_UnaryFunctions+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyIntrinsics_UnaryFunctions);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x60, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x88, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_INTRINSIC_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_INTRINSIC_2.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _PyIntrinsics_BinaryFunctions
    // c: aa1603e0      mov     x0, x22
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _PyIntrinsics_BinaryFunctions
    // 18: 910003fd      mov     x29, sp
    // 1c: a97f4eb8      ldp     x24, x19, [x21, #-0x10]
    // 20: f9002295      str     x21, [x20, #0x40]
    // 24: 92403d08      and     x8, x8, #0xffff
    // 28: d37ced08      lsl     x8, x8, #4
    // 2c: aa1803e1      mov     x1, x24
    // 30: aa1303e2      mov     x2, x19
    // 34: f8686928      ldr     x8, [x9, x8]
    // 38: d63f0100      blr     x8
    // 3c: f9402299      ldr     x25, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: aa0003f7      mov     x23, x0
    // 48: b9400308      ldr     w8, [x24]
    // 4c: 37f80108      tbnz    w8, #0x1f, 0x6c <_JIT_ENTRY+0x6c>
    // 50: 71000508      subs    w8, w8, #0x1
    // 54: b9000308      str     w8, [x24]
    // 58: 540000a1      b.ne    0x6c <_JIT_ENTRY+0x6c>
    // 5c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 60: aa1803e0      mov     x0, x24
    // 64: f9400108      ldr     x8, [x8]
    // 0000000000000064:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 68: d63f0100      blr     x8
    // 6c: b9400268      ldr     w8, [x19]
    // 70: 37f80088      tbnz    w8, #0x1f, 0x80 <_JIT_ENTRY+0x80>
    // 74: 71000508      subs    w8, w8, #0x1
    // 78: b9000268      str     w8, [x19]
    // 7c: 540000c0      b.eq    0x94 <_JIT_ENTRY+0x94>
    // 80: b4000157      cbz     x23, 0xa8 <_JIT_ENTRY+0xa8>
    // 84: d1002335      sub     x21, x25, #0x8
    // 88: f81f0337      stur    x23, [x25, #-0x10]
    // 8c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 90: 14000000      b       0x90 <_JIT_ENTRY+0x90>
    // 0000000000000090:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 94: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 98: aa1303e0      mov     x0, x19
    // 9c: f9400108      ldr     x8, [x8]
    // 000000000000009c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // a0: d63f0100      blr     x8
    // a4: b5ffff17      cbnz    x23, 0x84 <_JIT_ENTRY+0x84>
    // a8: d1004335      sub     x21, x25, #0x10
    // ac: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b0: 14000000      b       0xb0 <_JIT_ENTRY+0xb0>
    // 00000000000000b0:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // b4: 00 00 00 00
    const unsigned char code_body[184] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xfd, 0x03, 0x00, 0x91, 0xb8, 0x4e, 0x7f, 0xa9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x3d, 0x40, 0x92,
        0x08, 0xed, 0x7c, 0xd3, 0xe1, 0x03, 0x18, 0xaa,
        0xe2, 0x03, 0x13, 0xaa, 0x28, 0x69, 0x68, 0xf8,
        0x00, 0x01, 0x3f, 0xd6, 0x99, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf7, 0x03, 0x00, 0xaa,
        0x08, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xc0, 0x00, 0x00, 0x54,
        0x57, 0x01, 0x00, 0xb4, 0x35, 0x23, 0x00, 0xd1,
        0x37, 0x03, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x17, 0xff, 0xff, 0xb5,
        0x35, 0x43, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyIntrinsics_BinaryFunctions+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyIntrinsics_BinaryFunctions);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x90, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x94, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x9c, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xb0, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_ISINSTANCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_ISINSTANCE.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 928000e9      mov     x9, #-0x8               // =-8
    // c: 910003fd      mov     x29, sp
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: 12003d0a      and     w10, w8, #0xffff
    // 18: 2a2a03f9      mvn     w25, w10
    // 1c: f879daab      ldr     x11, [x21, w25, sxtw #3]
    // 20: f100017f      cmp     x11, #0x0
    // 24: 1a8a054a      cinc    w10, w10, ne
    // 28: 9a9f1129      csel    x9, x9, xzr, ne
    // 2c: 7100095f      cmp     w10, #0x2
    // 30: 54000141      b.ne    0x58 <_JIT_ENTRY+0x58>
    // 34: 9280002a      mov     x10, #-0x2              // =-2
    // 38: 528ce00b      mov     w11, #0x6700            // =26368
    // 3c: cb282158      sub     x24, x10, w8, uxth
    // 40: f9400aca      ldr     x10, [x22, #0x10]
    // 44: 72a0006b      movk    w11, #0x3, lsl #16
    // 48: f8787aac      ldr     x12, [x21, x24, lsl #3]
    // 4c: f86b694a      ldr     x10, [x10, x11]
    // 50: eb0c015f      cmp     x10, x12
    // 54: 54000060      b.eq    0x60 <_JIT_ENTRY+0x60>
    // 58: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 5c: 14000000      b       0x5c <_JIT_ENTRY+0x5c>
    // 000000000000005c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 60: cb282ea8      sub     x8, x21, w8, uxth #3
    // 64: 8b090108      add     x8, x8, x9
    // 68: a9400500      ldp     x0, x1, [x8]
    // 6c: f9002295      str     x21, [x20, #0x40]
    // 70: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  R_AARCH64_ADR_GOT_PAGE       PyObject_IsInstance
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_IsInstance
    // 78: d63f0100      blr     x8
    // 7c: f9402293      ldr     x19, [x20, #0x40]
    // 80: f900229f      str     xzr, [x20, #0x40]
    // 84: 37f806a0      tbnz    w0, #0x1f, 0x158 <_JIT_ENTRY+0x158>
    // 88: 2a0003f7      mov     w23, w0
    // 8c: f8787aa0      ldr     x0, [x21, x24, lsl #3]
    // 90: 93407f39      sxtw    x25, w25
    // 94: b9400008      ldr     w8, [x0]
    // 98: 37f800e8      tbnz    w8, #0x1f, 0xb4 <_JIT_ENTRY+0xb4>
    // 9c: 71000508      subs    w8, w8, #0x1
    // a0: b9000008      str     w8, [x0]
    // a4: 54000081      b.ne    0xb4 <_JIT_ENTRY+0xb4>
    // a8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // ac: f9400108      ldr     x8, [x8]
    // 00000000000000ac:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // b0: d63f0100      blr     x8
    // b4: f8797aa0      ldr     x0, [x21, x25, lsl #3]
    // b8: b4000120      cbz     x0, 0xdc <_JIT_ENTRY+0xdc>
    // bc: b9400008      ldr     w8, [x0]
    // c0: 37f800e8      tbnz    w8, #0x1f, 0xdc <_JIT_ENTRY+0xdc>
    // c4: 71000508      subs    w8, w8, #0x1
    // c8: b9000008      str     w8, [x0]
    // cc: 54000081      b.ne    0xdc <_JIT_ENTRY+0xdc>
    // d0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000d0:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // d4: f9400108      ldr     x8, [x8]
    // 00000000000000d4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // d8: d63f0100      blr     x8
    // dc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000dc:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // e0: f9400108      ldr     x8, [x8]
    // 00000000000000e0:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // e4: 72003d1f      tst     w8, #0xffff
    // e8: 54000240      b.eq    0x130 <_JIT_ENTRY+0x130>
    // ec: 9000001a      adrp    x26, 0x0 <_JIT_ENTRY>
    // 00000000000000ec:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // f0: 92403d08      and     x8, x8, #0xffff
    // f4: d10022b5      sub     x21, x21, #0x8
    // f8: f940035a      ldr     x26, [x26]
    // 00000000000000f8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // fc: 9100051b      add     x27, x8, #0x1
    // 100: 14000004      b       0x110 <_JIT_ENTRY+0x110>
    // 104: d100077b      sub     x27, x27, #0x1
    // 108: f100077f      cmp     x27, #0x1
    // 10c: 54000129      b.ls    0x130 <_JIT_ENTRY+0x130>
    // 110: f85f86a0      ldr     x0, [x21], #-0x8
    // 114: b9400008      ldr     w8, [x0]
    // 118: 37ffff68      tbnz    w8, #0x1f, 0x104 <_JIT_ENTRY+0x104>
    // 11c: 71000508      subs    w8, w8, #0x1
    // 120: b9000008      str     w8, [x0]
    // 124: 54ffff01      b.ne    0x104 <_JIT_ENTRY+0x104>
    // 128: d63f0340      blr     x26
    // 12c: 17fffff6      b       0x104 <_JIT_ENTRY+0x104>
    // 130: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000130:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 134: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000134:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // 138: 710002ff      cmp     w23, #0x0
    // 13c: f9400108      ldr     x8, [x8]
    // 000000000000013c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // 140: f9400129      ldr     x9, [x9]
    // 0000000000000140:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // 144: 8b190e75      add     x21, x19, x25, lsl #3
    // 148: 9a880128      csel    x8, x9, x8, eq
    // 14c: f8387a68      str     x8, [x19, x24, lsl #3]
    // 150: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 154: 14000000      b       0x154 <_JIT_ENTRY+0x154>
    // 0000000000000154:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 158: aa1303f5      mov     x21, x19
    // 15c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 160: 14000000      b       0x160 <_JIT_ENTRY+0x160>
    // 0000000000000160:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 164: 00 00 00 00
    const unsigned char code_body[360] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xe9, 0x00, 0x80, 0x92, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x0a, 0x3d, 0x00, 0x12,
        0xf9, 0x03, 0x2a, 0x2a, 0xab, 0xda, 0x79, 0xf8,
        0x7f, 0x01, 0x00, 0xf1, 0x4a, 0x05, 0x8a, 0x1a,
        0x29, 0x11, 0x9f, 0x9a, 0x5f, 0x09, 0x00, 0x71,
        0x41, 0x01, 0x00, 0x54, 0x2a, 0x00, 0x80, 0x92,
        0x0b, 0xe0, 0x8c, 0x52, 0x58, 0x21, 0x28, 0xcb,
        0xca, 0x0a, 0x40, 0xf9, 0x6b, 0x00, 0xa0, 0x72,
        0xac, 0x7a, 0x78, 0xf8, 0x4a, 0x69, 0x6b, 0xf8,
        0x5f, 0x01, 0x0c, 0xeb, 0x60, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xa8, 0x2e, 0x28, 0xcb, 0x08, 0x01, 0x09, 0x8b,
        0x00, 0x05, 0x40, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x93, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xa0, 0x06, 0xf8, 0x37,
        0xf7, 0x03, 0x00, 0x2a, 0xa0, 0x7a, 0x78, 0xf8,
        0x39, 0x7f, 0x40, 0x93, 0x08, 0x00, 0x40, 0xb9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xa0, 0x7a, 0x79, 0xf8,
        0x20, 0x01, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x1f, 0x3d, 0x00, 0x72,
        0x40, 0x02, 0x00, 0x54, 0x1a, 0x00, 0x00, 0x90,
        0x08, 0x3d, 0x40, 0x92, 0xb5, 0x22, 0x00, 0xd1,
        0x5a, 0x03, 0x40, 0xf9, 0x1b, 0x05, 0x00, 0x91,
        0x04, 0x00, 0x00, 0x14, 0x7b, 0x07, 0x00, 0xd1,
        0x7f, 0x07, 0x00, 0xf1, 0x29, 0x01, 0x00, 0x54,
        0xa0, 0x86, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x68, 0xff, 0xff, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x01, 0xff, 0xff, 0x54,
        0x40, 0x03, 0x3f, 0xd6, 0xf6, 0xff, 0xff, 0x17,
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0xff, 0x02, 0x00, 0x71, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x75, 0x0e, 0x19, 0x8b,
        0x28, 0x01, 0x88, 0x9a, 0x68, 0x7a, 0x38, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xf5, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyObject_IsInstance+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: &_Py_TrueStruct+0x0
    // 20: &_Py_FalseStruct+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_IsInstance);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x20, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_26r(code + 0x5c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x70, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0xa8, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xd0, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xdc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xec, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xf8, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x130, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x134, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x13c, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x140, (uintptr_t)data + 0x20);
    patch_aarch64_26r(code + 0x154, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x160, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_KW_NON_PY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_KW_NON_PY.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 9280002a      mov     x10, #-0x2              // =-2
    // c: 910003fd      mov     x29, sp
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f85f82b7      ldur    x23, [x21, #-0x8]
    // 18: 92403d09      and     x9, x8, #0xffff
    // 1c: 12003d1a      and     w26, w8, #0xffff
    // 20: b94012e8      ldr     w8, [x23, #0x10]
    // 24: cb090158      sub     x24, x10, x9
    // 28: 2a3a03f9      mvn     w25, w26
    // 2c: aa1703e3      mov     x3, x23
    // 30: f8787aaa      ldr     x10, [x21, x24, lsl #3]
    // 34: 8b39ceac      add     x12, x21, w25, sxtw #3
    // 38: f100015f      cmp     x10, #0x0
    // 3c: 9280004a      mov     x10, #-0x3              // =-3
    // 40: 1a9a074b      cinc    w11, w26, ne
    // 44: cb09015b      sub     x27, x10, x9
    // 48: 928000e9      mov     x9, #-0x8               // =-8
    // 4c: 4b080168      sub     w8, w11, w8
    // 50: f87b7aa0      ldr     x0, [x21, x27, lsl #3]
    // 54: f9002295      str     x21, [x20, #0x40]
    // 58: 93407d08      sxtw    x8, w8
    // 5c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  R_AARCH64_ADR_GOT_PAGE       PyObject_Vectorcall
    // 60: 9a9f1129      csel    x9, x9, xzr, ne
    // 64: f940014a      ldr     x10, [x10]
    // 0000000000000064:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_Vectorcall
    // 68: 8b090181      add     x1, x12, x9
    // 6c: b2410102      orr     x2, x8, #0x8000000000000000
    // 70: d63f0140      blr     x10
    // 74: f9402288      ldr     x8, [x20, #0x40]
    // 78: aa0003f3      mov     x19, x0
    // 7c: d1002108      sub     x8, x8, #0x8
    // 80: f9002288      str     x8, [x20, #0x40]
    // 84: b94002e8      ldr     w8, [x23]
    // 88: 37f80108      tbnz    w8, #0x1f, 0xa8 <_JIT_ENTRY+0xa8>
    // 8c: 71000508      subs    w8, w8, #0x1
    // 90: b90002e8      str     w8, [x23]
    // 94: 540000a1      b.ne    0xa8 <_JIT_ENTRY+0xa8>
    // 98: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 9c: aa1703e0      mov     x0, x23
    // a0: f9400108      ldr     x8, [x8]
    // 00000000000000a0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // a4: d63f0100      blr     x8
    // a8: f9402297      ldr     x23, [x20, #0x40]
    // ac: f900229f      str     xzr, [x20, #0x40]
    // b0: f87b7aa0      ldr     x0, [x21, x27, lsl #3]
    // b4: b9400008      ldr     w8, [x0]
    // b8: 37f800e8      tbnz    w8, #0x1f, 0xd4 <_JIT_ENTRY+0xd4>
    // bc: 71000508      subs    w8, w8, #0x1
    // c0: b9000008      str     w8, [x0]
    // c4: 54000081      b.ne    0xd4 <_JIT_ENTRY+0xd4>
    // c8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // cc: f9400108      ldr     x8, [x8]
    // 00000000000000cc:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // d0: d63f0100      blr     x8
    // d4: f8787aa0      ldr     x0, [x21, x24, lsl #3]
    // d8: b4000120      cbz     x0, 0xfc <_JIT_ENTRY+0xfc>
    // dc: b9400008      ldr     w8, [x0]
    // e0: 37f800e8      tbnz    w8, #0x1f, 0xfc <_JIT_ENTRY+0xfc>
    // e4: 71000508      subs    w8, w8, #0x1
    // e8: b9000008      str     w8, [x0]
    // ec: 54000081      b.ne    0xfc <_JIT_ENTRY+0xfc>
    // f0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000f0:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // f4: f9400108      ldr     x8, [x8]
    // 00000000000000f4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // f8: d63f0100      blr     x8
    // fc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000fc:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 100: f9400108      ldr     x8, [x8]
    // 0000000000000100:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 104: 72003d1f      tst     w8, #0xffff
    // 108: 540002c0      b.eq    0x160 <_JIT_ENTRY+0x160>
    // 10c: 4b1a03e9      neg     w9, w26
    // 110: 937d7d29      sbfiz   x9, x9, #3, #32
    // 114: 8b282d29      add     x9, x9, w8, uxth #3
    // 118: 92403d08      and     x8, x8, #0xffff
    // 11c: 9100051a      add     x26, x8, #0x1
    // 120: 8b150129      add     x9, x9, x21
    // 124: 90000015      adrp    x21, 0x0 <_JIT_ENTRY>
    // 0000000000000124:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 128: f94002b5      ldr     x21, [x21]
    // 0000000000000128:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 12c: d100413b      sub     x27, x9, #0x10
    // 130: 14000004      b       0x140 <_JIT_ENTRY+0x140>
    // 134: d100075a      sub     x26, x26, #0x1
    // 138: f100075f      cmp     x26, #0x1
    // 13c: 54000129      b.ls    0x160 <_JIT_ENTRY+0x160>
    // 140: f85f8760      ldr     x0, [x27], #-0x8
    // 144: b9400008      ldr     w8, [x0]
    // 148: 37ffff68      tbnz    w8, #0x1f, 0x134 <_JIT_ENTRY+0x134>
    // 14c: 71000508      subs    w8, w8, #0x1
    // 150: b9000008      str     w8, [x0]
    // 154: 54ffff01      b.ne    0x134 <_JIT_ENTRY+0x134>
    // 158: d63f02a0      blr     x21
    // 15c: 17fffff6      b       0x134 <_JIT_ENTRY+0x134>
    // 160: b40000d3      cbz     x19, 0x178 <_JIT_ENTRY+0x178>
    // 164: 93407f28      sxtw    x8, w25
    // 168: f8387af3      str     x19, [x23, x24, lsl #3]
    // 16c: 8b080ef5      add     x21, x23, x8, lsl #3
    // 170: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 174: 14000000      b       0x174 <_JIT_ENTRY+0x174>
    // 0000000000000174:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 178: 8b180ef5      add     x21, x23, x24, lsl #3
    // 17c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 180: 14000000      b       0x180 <_JIT_ENTRY+0x180>
    // 0000000000000180:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 184: 00 00 00 00
    const unsigned char code_body[392] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x2a, 0x00, 0x80, 0x92, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0xb7, 0x82, 0x5f, 0xf8,
        0x09, 0x3d, 0x40, 0x92, 0x1a, 0x3d, 0x00, 0x12,
        0xe8, 0x12, 0x40, 0xb9, 0x58, 0x01, 0x09, 0xcb,
        0xf9, 0x03, 0x3a, 0x2a, 0xe3, 0x03, 0x17, 0xaa,
        0xaa, 0x7a, 0x78, 0xf8, 0xac, 0xce, 0x39, 0x8b,
        0x5f, 0x01, 0x00, 0xf1, 0x4a, 0x00, 0x80, 0x92,
        0x4b, 0x07, 0x9a, 0x1a, 0x5b, 0x01, 0x09, 0xcb,
        0xe9, 0x00, 0x80, 0x92, 0x68, 0x01, 0x08, 0x4b,
        0xa0, 0x7a, 0x7b, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x7d, 0x40, 0x93, 0x0a, 0x00, 0x00, 0x90,
        0x29, 0x11, 0x9f, 0x9a, 0x4a, 0x01, 0x40, 0xf9,
        0x81, 0x01, 0x09, 0x8b, 0x02, 0x01, 0x41, 0xb2,
        0x40, 0x01, 0x3f, 0xd6, 0x88, 0x22, 0x40, 0xf9,
        0xf3, 0x03, 0x00, 0xaa, 0x08, 0x21, 0x00, 0xd1,
        0x88, 0x22, 0x00, 0xf9, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x97, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xa0, 0x7a, 0x7b, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xa0, 0x7a, 0x78, 0xf8,
        0x20, 0x01, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x1f, 0x3d, 0x00, 0x72,
        0xc0, 0x02, 0x00, 0x54, 0xe9, 0x03, 0x1a, 0x4b,
        0x29, 0x7d, 0x7d, 0x93, 0x29, 0x2d, 0x28, 0x8b,
        0x08, 0x3d, 0x40, 0x92, 0x1a, 0x05, 0x00, 0x91,
        0x29, 0x01, 0x15, 0x8b, 0x15, 0x00, 0x00, 0x90,
        0xb5, 0x02, 0x40, 0xf9, 0x3b, 0x41, 0x00, 0xd1,
        0x04, 0x00, 0x00, 0x14, 0x5a, 0x07, 0x00, 0xd1,
        0x5f, 0x07, 0x00, 0xf1, 0x29, 0x01, 0x00, 0x54,
        0x60, 0x87, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x68, 0xff, 0xff, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x01, 0xff, 0xff, 0x54,
        0xa0, 0x02, 0x3f, 0xd6, 0xf6, 0xff, 0xff, 0x17,
        0xd3, 0x00, 0x00, 0xb4, 0x28, 0x7f, 0x40, 0x93,
        0xf3, 0x7a, 0x38, 0xf8, 0xf5, 0x0e, 0x08, 0x8b,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xf5, 0x0e, 0x18, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyObject_Vectorcall+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_Vectorcall);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x64, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x98, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xa0, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xc8, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xf0, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xfc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x124, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x174, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x180, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_LEN(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_LEN.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 928000e9      mov     x9, #-0x8               // =-8
    // c: 910003fd      mov     x29, sp
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: 12003d0a      and     w10, w8, #0xffff
    // 18: 2a2a03eb      mvn     w11, w10
    // 1c: f86bdaab      ldr     x11, [x21, w11, sxtw #3]
    // 20: f100017f      cmp     x11, #0x0
    // 24: 1a8a054a      cinc    w10, w10, ne
    // 28: 9a9f1129      csel    x9, x9, xzr, ne
    // 2c: 7100055f      cmp     w10, #0x1
    // 30: 54000141      b.ne    0x58 <_JIT_ENTRY+0x58>
    // 34: 9280002a      mov     x10, #-0x2              // =-2
    // 38: 528ce10b      mov     w11, #0x6708            // =26376
    // 3c: cb282158      sub     x24, x10, w8, uxth
    // 40: f9400aca      ldr     x10, [x22, #0x10]
    // 44: 72a0006b      movk    w11, #0x3, lsl #16
    // 48: f8787aac      ldr     x12, [x21, x24, lsl #3]
    // 4c: f86b694a      ldr     x10, [x10, x11]
    // 50: eb0c015f      cmp     x10, x12
    // 54: 54000060      b.eq    0x60 <_JIT_ENTRY+0x60>
    // 58: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 5c: 14000000      b       0x5c <_JIT_ENTRY+0x5c>
    // 000000000000005c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 60: cb282ea8      sub     x8, x21, w8, uxth #3
    // 64: f8696913      ldr     x19, [x8, x9]
    // 68: f9002295      str     x21, [x20, #0x40]
    // 6c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  R_AARCH64_ADR_GOT_PAGE       PyObject_Size
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_Size
    // 74: aa1303e0      mov     x0, x19
    // 78: d63f0100      blr     x8
    // 7c: f9402297      ldr     x23, [x20, #0x40]
    // 80: f900229f      str     xzr, [x20, #0x40]
    // 84: b7f804a0      tbnz    x0, #0x3f, 0x118 <_JIT_ENTRY+0x118>
    // 88: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  R_AARCH64_ADR_GOT_PAGE       PyLong_FromSsize_t
    // 8c: f9400108      ldr     x8, [x8]
    // 000000000000008c:  R_AARCH64_LD64_GOT_LO12_NC   PyLong_FromSsize_t
    // 90: d63f0100      blr     x8
    // 94: b4000420      cbz     x0, 0x118 <_JIT_ENTRY+0x118>
    // 98: f9002297      str     x23, [x20, #0x40]
    // 9c: b9400268      ldr     w8, [x19]
    // a0: 37f80148      tbnz    w8, #0x1f, 0xc8 <_JIT_ENTRY+0xc8>
    // a4: 71000508      subs    w8, w8, #0x1
    // a8: b9000268      str     w8, [x19]
    // ac: 540000e1      b.ne    0xc8 <_JIT_ENTRY+0xc8>
    // b0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b0:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // b4: aa0003f7      mov     x23, x0
    // b8: aa1303e0      mov     x0, x19
    // bc: f9400108      ldr     x8, [x8]
    // 00000000000000bc:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // c0: d63f0100      blr     x8
    // c4: aa1703e0      mov     x0, x23
    // c8: f9402288      ldr     x8, [x20, #0x40]
    // cc: 8b180d08      add     x8, x8, x24, lsl #3
    // d0: f9002288      str     x8, [x20, #0x40]
    // d4: f8787aa8      ldr     x8, [x21, x24, lsl #3]
    // d8: b9400109      ldr     w9, [x8]
    // dc: 37f80149      tbnz    w9, #0x1f, 0x104 <_JIT_ENTRY+0x104>
    // e0: 71000529      subs    w9, w9, #0x1
    // e4: b9000109      str     w9, [x8]
    // e8: 540000e1      b.ne    0x104 <_JIT_ENTRY+0x104>
    // ec: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000ec:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // f0: aa0003f3      mov     x19, x0
    // f4: aa0803e0      mov     x0, x8
    // f8: f9400129      ldr     x9, [x9]
    // 00000000000000f8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // fc: d63f0120      blr     x9
    // 100: aa1303e0      mov     x0, x19
    // 104: f9402295      ldr     x21, [x20, #0x40]
    // 108: f900229f      str     xzr, [x20, #0x40]
    // 10c: f80086a0      str     x0, [x21], #0x8
    // 110: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 114: 14000000      b       0x114 <_JIT_ENTRY+0x114>
    // 0000000000000114:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 118: aa1703f5      mov     x21, x23
    // 11c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 120: 14000000      b       0x120 <_JIT_ENTRY+0x120>
    // 0000000000000120:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 124: 00 00 00 00
    const unsigned char code_body[296] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xe9, 0x00, 0x80, 0x92, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x0a, 0x3d, 0x00, 0x12,
        0xeb, 0x03, 0x2a, 0x2a, 0xab, 0xda, 0x6b, 0xf8,
        0x7f, 0x01, 0x00, 0xf1, 0x4a, 0x05, 0x8a, 0x1a,
        0x29, 0x11, 0x9f, 0x9a, 0x5f, 0x05, 0x00, 0x71,
        0x41, 0x01, 0x00, 0x54, 0x2a, 0x00, 0x80, 0x92,
        0x0b, 0xe1, 0x8c, 0x52, 0x58, 0x21, 0x28, 0xcb,
        0xca, 0x0a, 0x40, 0xf9, 0x6b, 0x00, 0xa0, 0x72,
        0xac, 0x7a, 0x78, 0xf8, 0x4a, 0x69, 0x6b, 0xf8,
        0x5f, 0x01, 0x0c, 0xeb, 0x60, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xa8, 0x2e, 0x28, 0xcb, 0x13, 0x69, 0x69, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x97, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xa0, 0x04, 0xf8, 0xb7,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x20, 0x04, 0x00, 0xb4,
        0x97, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x48, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xe1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x17, 0xaa,
        0x88, 0x22, 0x40, 0xf9, 0x08, 0x0d, 0x18, 0x8b,
        0x88, 0x22, 0x00, 0xf9, 0xa8, 0x7a, 0x78, 0xf8,
        0x09, 0x01, 0x40, 0xb9, 0x49, 0x01, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x71, 0x09, 0x01, 0x00, 0xb9,
        0xe1, 0x00, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0xf3, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x08, 0xaa,
        0x29, 0x01, 0x40, 0xf9, 0x20, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x13, 0xaa, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xa0, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xf5, 0x03, 0x17, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyObject_Size+0x0
    // 10: &PyLong_FromSsize_t+0x0
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_Size);
    patch_64(data + 0x10, (uintptr_t)&PyLong_FromSsize_t);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_26r(code + 0x5c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x6c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x88, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xb0, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xbc, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xec, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xf8, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0x114, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x120, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_LIST_APPEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_LIST_APPEND.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 528ce208      mov     w8, #0x6710             // =26384
    // 4: f9400ac9      ldr     x9, [x22, #0x10]
    // 8: aa1503f8      mov     x24, x21
    // c: 72a00068      movk    w8, #0x3, lsl #16
    // 10: f85f0f17      ldr     x23, [x24, #-0x10]!
    // 14: f85f8313      ldur    x19, [x24, #-0x8]
    // 18: f8686928      ldr     x8, [x9, x8]
    // 1c: eb13011f      cmp     x8, x19
    // 20: 54000081      b.ne    0x30 <_JIT_ENTRY+0x30>
    // 24: f94006e8      ldr     x8, [x23, #0x8]
    // 28: 3942ad08      ldrb    w8, [x8, #0xab]
    // 2c: 37080048      tbnz    w8, #0x1, 0x34 <_JIT_ENTRY+0x34>
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 34: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 38: f9400ae8      ldr     x8, [x23, #0x10]
    // 3c: f94012e9      ldr     x9, [x23, #0x20]
    // 40: 910003fd      mov     x29, sp
    // 44: f9400701      ldr     x1, [x24, #0x8]
    // 48: eb08013f      cmp     x9, x8
    // 4c: 5400014d      b.le    0x74 <_JIT_ENTRY+0x74>
    // 50: f9400ee9      ldr     x9, [x23, #0x18]
    // 54: 9100050a      add     x10, x8, #0x1
    // 58: 52800039      mov     w25, #0x1               // =1
    // 5c: f9000aea      str     x10, [x23, #0x10]
    // 60: f8287921      str     x1, [x9, x8, lsl #3]
    // 64: f9002298      str     x24, [x20, #0x40]
    // 68: b94002e8      ldr     w8, [x23]
    // 6c: 36f80168      tbz     w8, #0x1f, 0x98 <_JIT_ENTRY+0x98>
    // 70: 14000011      b       0xb4 <_JIT_ENTRY+0xb4>
    // 74: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  R_AARCH64_ADR_GOT_PAGE       _PyList_AppendTakeRefListResize
    // 78: aa1703e0      mov     x0, x23
    // 7c: f9400108      ldr     x8, [x8]
    // 000000000000007c:  R_AARCH64_LD64_GOT_LO12_NC   _PyList_AppendTakeRefListResize
    // 80: d63f0100      blr     x8
    // 84: 7100001f      cmp     w0, #0x0
    // 88: 1a9f17f9      cset    w25, eq
    // 8c: f9002298      str     x24, [x20, #0x40]
    // 90: b94002e8      ldr     w8, [x23]
    // 94: 37f80108      tbnz    w8, #0x1f, 0xb4 <_JIT_ENTRY+0xb4>
    // 98: 71000508      subs    w8, w8, #0x1
    // 9c: b90002e8      str     w8, [x23]
    // a0: 540000a1      b.ne    0xb4 <_JIT_ENTRY+0xb4>
    // a4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // a8: aa1703e0      mov     x0, x23
    // ac: f9400108      ldr     x8, [x8]
    // 00000000000000ac:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // b0: d63f0100      blr     x8
    // b4: f9402288      ldr     x8, [x20, #0x40]
    // b8: d1002108      sub     x8, x8, #0x8
    // bc: f9002288      str     x8, [x20, #0x40]
    // c0: b9400268      ldr     w8, [x19]
    // c4: 37f80088      tbnz    w8, #0x1f, 0xd4 <_JIT_ENTRY+0xd4>
    // c8: 71000508      subs    w8, w8, #0x1
    // cc: b9000268      str     w8, [x19]
    // d0: 540000c0      b.eq    0xe8 <_JIT_ENTRY+0xe8>
    // d4: f9402295      ldr     x21, [x20, #0x40]
    // d8: f900229f      str     xzr, [x20, #0x40]
    // dc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e0: 36000159      tbz     w25, #0x0, 0x108 <_JIT_ENTRY+0x108>
    // e4: 14000000      b       0xe4 <_JIT_ENTRY+0xe4>
    // 00000000000000e4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // e8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // ec: aa1303e0      mov     x0, x19
    // f0: f9400108      ldr     x8, [x8]
    // 00000000000000f0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // f4: d63f0100      blr     x8
    // f8: f9402295      ldr     x21, [x20, #0x40]
    // fc: f900229f      str     xzr, [x20, #0x40]
    // 100: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 104: 3707ff19      tbnz    w25, #0x0, 0xe4 <_JIT_ENTRY+0xe4>
    // 108: 14000000      b       0x108 <_JIT_ENTRY+0x108>
    // 0000000000000108:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 10c: 00 00 00 00
    const unsigned char code_body[272] = {
        0x08, 0xe2, 0x8c, 0x52, 0xc9, 0x0a, 0x40, 0xf9,
        0xf8, 0x03, 0x15, 0xaa, 0x68, 0x00, 0xa0, 0x72,
        0x17, 0x0f, 0x5f, 0xf8, 0x13, 0x83, 0x5f, 0xf8,
        0x28, 0x69, 0x68, 0xf8, 0x1f, 0x01, 0x13, 0xeb,
        0x81, 0x00, 0x00, 0x54, 0xe8, 0x06, 0x40, 0xf9,
        0x08, 0xad, 0x42, 0x39, 0x48, 0x00, 0x08, 0x37,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0xe8, 0x0a, 0x40, 0xf9, 0xe9, 0x12, 0x40, 0xf9,
        0xfd, 0x03, 0x00, 0x91, 0x01, 0x07, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x4d, 0x01, 0x00, 0x54,
        0xe9, 0x0e, 0x40, 0xf9, 0x0a, 0x05, 0x00, 0x91,
        0x39, 0x00, 0x80, 0x52, 0xea, 0x0a, 0x00, 0xf9,
        0x21, 0x79, 0x28, 0xf8, 0x98, 0x22, 0x00, 0xf9,
        0xe8, 0x02, 0x40, 0xb9, 0x68, 0x01, 0xf8, 0x36,
        0x11, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x1f, 0x00, 0x00, 0x71,
        0xf9, 0x17, 0x9f, 0x1a, 0x98, 0x22, 0x00, 0xf9,
        0xe8, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x88, 0x22, 0x40, 0xf9,
        0x08, 0x21, 0x00, 0xd1, 0x88, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xc0, 0x00, 0x00, 0x54, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x59, 0x01, 0x00, 0x36, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x19, 0xff, 0x07, 0x37,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyList_AppendTakeRefListResize+0x0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyList_AppendTakeRefListResize);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x30, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0x74, (uintptr_t)data);
    patch_aarch64_12x(code + 0x7c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xa4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xac, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0xe4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0xe8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xf0, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x108, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_METHOD_DESCRIPTOR_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_METHOD_DESCRIPTOR_FAST.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 92800028      mov     x8, #-0x2               // =-2
    // c: 9000000f      adrp    x15, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       PyMethodDescr_Type
    // 10: f940014a      ldr     x10, [x10]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: 928000ee      mov     x14, #-0x8              // =-8
    // 18: 910003fd      mov     x29, sp
    // 1c: cb2a2117      sub     x23, x8, w10, uxth
    // 20: 12003d49      and     w9, w10, #0xffff
    // 24: 2a2903e8      mvn     w8, w9
    // 28: f8777aac      ldr     x12, [x21, x23, lsl #3]
    // 2c: f868daab      ldr     x11, [x21, w8, sxtw #3]
    // 30: f940058d      ldr     x13, [x12, #0x8]
    // 34: f94001ef      ldr     x15, [x15]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   PyMethodDescr_Type
    // 38: f100017f      cmp     x11, #0x0
    // 3c: 1a9f07eb      cset    w11, ne
    // 40: 9a9f11ce      csel    x14, x14, xzr, ne
    // 44: eb0f01bf      cmp     x13, x15
    // 48: 54000181      b.ne    0x78 <_JIT_ENTRY+0x78>
    // 4c: f940158d      ldr     x13, [x12, #0x28]
    // 50: b94011af      ldr     w15, [x13, #0x10]
    // 54: 710201ff      cmp     w15, #0x80
    // 58: 54000101      b.ne    0x78 <_JIT_ENTRY+0x78>
    // 5c: cb2a2eaa      sub     x10, x21, w10, uxth #3
    // 60: f940098c      ldr     x12, [x12, #0x10]
    // 64: 8b0e014a      add     x10, x10, x14
    // 68: f9400140      ldr     x0, [x10]
    // 6c: f940040e      ldr     x14, [x0, #0x8]
    // 70: eb0c01df      cmp     x14, x12
    // 74: 54000060      b.eq    0x80 <_JIT_ENTRY+0x80>
    // 78: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 7c: 14000000      b       0x7c <_JIT_ENTRY+0x7c>
    // 000000000000007c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 80: 0b0b0129      add     w9, w9, w11
    // 84: 93407d18      sxtw    x24, w8
    // 88: f94005a8      ldr     x8, [x13, #0x8]
    // 8c: 51000529      sub     w9, w9, #0x1
    // 90: 91002141      add     x1, x10, #0x8
    // 94: f9002295      str     x21, [x20, #0x40]
    // 98: 93407d22      sxtw    x2, w9
    // 9c: d63f0100      blr     x8
    // a0: f9402299      ldr     x25, [x20, #0x40]
    // a4: f900229f      str     xzr, [x20, #0x40]
    // a8: aa0003f3      mov     x19, x0
    // ac: f8777aa8      ldr     x8, [x21, x23, lsl #3]
    // b0: b9400109      ldr     w9, [x8]
    // b4: 37f80109      tbnz    w9, #0x1f, 0xd4 <_JIT_ENTRY+0xd4>
    // b8: 71000529      subs    w9, w9, #0x1
    // bc: b9000109      str     w9, [x8]
    // c0: 540000a1      b.ne    0xd4 <_JIT_ENTRY+0xd4>
    // c4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000c4:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // c8: aa0803e0      mov     x0, x8
    // cc: f9400129      ldr     x9, [x9]
    // 00000000000000cc:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // d0: d63f0120      blr     x9
    // d4: f8787aa0      ldr     x0, [x21, x24, lsl #3]
    // d8: b4000120      cbz     x0, 0xfc <_JIT_ENTRY+0xfc>
    // dc: b9400008      ldr     w8, [x0]
    // e0: 37f800e8      tbnz    w8, #0x1f, 0xfc <_JIT_ENTRY+0xfc>
    // e4: 71000508      subs    w8, w8, #0x1
    // e8: b9000008      str     w8, [x0]
    // ec: 54000081      b.ne    0xfc <_JIT_ENTRY+0xfc>
    // f0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000f0:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // f4: f9400108      ldr     x8, [x8]
    // 00000000000000f4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // f8: d63f0100      blr     x8
    // fc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000fc:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 100: f9400108      ldr     x8, [x8]
    // 0000000000000100:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 104: 72003d1f      tst     w8, #0xffff
    // 108: 54000240      b.eq    0x150 <_JIT_ENTRY+0x150>
    // 10c: 9000001a      adrp    x26, 0x0 <_JIT_ENTRY>
    // 000000000000010c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 110: 92403d08      and     x8, x8, #0xffff
    // 114: d10022b5      sub     x21, x21, #0x8
    // 118: f940035a      ldr     x26, [x26]
    // 0000000000000118:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 11c: 9100051b      add     x27, x8, #0x1
    // 120: 14000004      b       0x130 <_JIT_ENTRY+0x130>
    // 124: d100077b      sub     x27, x27, #0x1
    // 128: f100077f      cmp     x27, #0x1
    // 12c: 54000129      b.ls    0x150 <_JIT_ENTRY+0x150>
    // 130: f85f86a0      ldr     x0, [x21], #-0x8
    // 134: b9400008      ldr     w8, [x0]
    // 138: 37ffff68      tbnz    w8, #0x1f, 0x124 <_JIT_ENTRY+0x124>
    // 13c: 71000508      subs    w8, w8, #0x1
    // 140: b9000008      str     w8, [x0]
    // 144: 54ffff01      b.ne    0x124 <_JIT_ENTRY+0x124>
    // 148: d63f0340      blr     x26
    // 14c: 17fffff6      b       0x124 <_JIT_ENTRY+0x124>
    // 150: b40000b3      cbz     x19, 0x164 <_JIT_ENTRY+0x164>
    // 154: 8b180f35      add     x21, x25, x24, lsl #3
    // 158: f8377b33      str     x19, [x25, x23, lsl #3]
    // 15c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 160: 14000000      b       0x160 <_JIT_ENTRY+0x160>
    // 0000000000000160:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 164: 8b170f35      add     x21, x25, x23, lsl #3
    // 168: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 16c: 14000000      b       0x16c <_JIT_ENTRY+0x16c>
    // 000000000000016c:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[368] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x0a, 0x00, 0x00, 0x90,
        0x28, 0x00, 0x80, 0x92, 0x0f, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0xee, 0x00, 0x80, 0x92,
        0xfd, 0x03, 0x00, 0x91, 0x17, 0x21, 0x2a, 0xcb,
        0x49, 0x3d, 0x00, 0x12, 0xe8, 0x03, 0x29, 0x2a,
        0xac, 0x7a, 0x77, 0xf8, 0xab, 0xda, 0x68, 0xf8,
        0x8d, 0x05, 0x40, 0xf9, 0xef, 0x01, 0x40, 0xf9,
        0x7f, 0x01, 0x00, 0xf1, 0xeb, 0x07, 0x9f, 0x1a,
        0xce, 0x11, 0x9f, 0x9a, 0xbf, 0x01, 0x0f, 0xeb,
        0x81, 0x01, 0x00, 0x54, 0x8d, 0x15, 0x40, 0xf9,
        0xaf, 0x11, 0x40, 0xb9, 0xff, 0x01, 0x02, 0x71,
        0x01, 0x01, 0x00, 0x54, 0xaa, 0x2e, 0x2a, 0xcb,
        0x8c, 0x09, 0x40, 0xf9, 0x4a, 0x01, 0x0e, 0x8b,
        0x40, 0x01, 0x40, 0xf9, 0x0e, 0x04, 0x40, 0xf9,
        0xdf, 0x01, 0x0c, 0xeb, 0x60, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x29, 0x01, 0x0b, 0x0b, 0x18, 0x7d, 0x40, 0x93,
        0xa8, 0x05, 0x40, 0xf9, 0x29, 0x05, 0x00, 0x51,
        0x41, 0x21, 0x00, 0x91, 0x95, 0x22, 0x00, 0xf9,
        0x22, 0x7d, 0x40, 0x93, 0x00, 0x01, 0x3f, 0xd6,
        0x99, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf3, 0x03, 0x00, 0xaa, 0xa8, 0x7a, 0x77, 0xf8,
        0x09, 0x01, 0x40, 0xb9, 0x09, 0x01, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x71, 0x09, 0x01, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x08, 0xaa, 0x29, 0x01, 0x40, 0xf9,
        0x20, 0x01, 0x3f, 0xd6, 0xa0, 0x7a, 0x78, 0xf8,
        0x20, 0x01, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x1f, 0x3d, 0x00, 0x72,
        0x40, 0x02, 0x00, 0x54, 0x1a, 0x00, 0x00, 0x90,
        0x08, 0x3d, 0x40, 0x92, 0xb5, 0x22, 0x00, 0xd1,
        0x5a, 0x03, 0x40, 0xf9, 0x1b, 0x05, 0x00, 0x91,
        0x04, 0x00, 0x00, 0x14, 0x7b, 0x07, 0x00, 0xd1,
        0x7f, 0x07, 0x00, 0xf1, 0x29, 0x01, 0x00, 0x54,
        0xa0, 0x86, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x68, 0xff, 0xff, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x01, 0xff, 0xff, 0x54,
        0x40, 0x03, 0x3f, 0xd6, 0xf6, 0xff, 0xff, 0x17,
        0xb3, 0x00, 0x00, 0xb4, 0x35, 0x0f, 0x18, 0x8b,
        0x33, 0x7b, 0x37, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x35, 0x0f, 0x17, 0x8b,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PyMethodDescr_Type+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x7c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0xc4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xcc, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xf0, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xfc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x10c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x118, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x160, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x16c, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 92800028      mov     x8, #-0x2               // =-2
    // c: 9000000f      adrp    x15, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       PyMethodDescr_Type
    // 10: f940014a      ldr     x10, [x10]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: 928000ee      mov     x14, #-0x8              // =-8
    // 18: 910003fd      mov     x29, sp
    // 1c: cb2a2117      sub     x23, x8, w10, uxth
    // 20: 12003d49      and     w9, w10, #0xffff
    // 24: 2a2903e8      mvn     w8, w9
    // 28: f8777aac      ldr     x12, [x21, x23, lsl #3]
    // 2c: f868daab      ldr     x11, [x21, w8, sxtw #3]
    // 30: f940058d      ldr     x13, [x12, #0x8]
    // 34: f94001ef      ldr     x15, [x15]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   PyMethodDescr_Type
    // 38: f100017f      cmp     x11, #0x0
    // 3c: 1a9f07eb      cset    w11, ne
    // 40: 9a9f11ce      csel    x14, x14, xzr, ne
    // 44: eb0f01bf      cmp     x13, x15
    // 48: 54000181      b.ne    0x78 <_JIT_ENTRY+0x78>
    // 4c: f940158d      ldr     x13, [x12, #0x28]
    // 50: b94011af      ldr     w15, [x13, #0x10]
    // 54: 710209ff      cmp     w15, #0x82
    // 58: 54000101      b.ne    0x78 <_JIT_ENTRY+0x78>
    // 5c: cb2a2eaa      sub     x10, x21, w10, uxth #3
    // 60: f940098c      ldr     x12, [x12, #0x10]
    // 64: 8b0e014a      add     x10, x10, x14
    // 68: f9400140      ldr     x0, [x10]
    // 6c: f940040e      ldr     x14, [x0, #0x8]
    // 70: eb0c01df      cmp     x14, x12
    // 74: 54000060      b.eq    0x80 <_JIT_ENTRY+0x80>
    // 78: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 7c: 14000000      b       0x7c <_JIT_ENTRY+0x7c>
    // 000000000000007c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 80: 0b0b0129      add     w9, w9, w11
    // 84: 93407d18      sxtw    x24, w8
    // 88: f94005a8      ldr     x8, [x13, #0x8]
    // 8c: 51000529      sub     w9, w9, #0x1
    // 90: 91002141      add     x1, x10, #0x8
    // 94: aa1f03e3      mov     x3, xzr
    // 98: 93407d22      sxtw    x2, w9
    // 9c: f9002295      str     x21, [x20, #0x40]
    // a0: d63f0100      blr     x8
    // a4: f9402299      ldr     x25, [x20, #0x40]
    // a8: f900229f      str     xzr, [x20, #0x40]
    // ac: aa0003f3      mov     x19, x0
    // b0: f8777aa8      ldr     x8, [x21, x23, lsl #3]
    // b4: b9400109      ldr     w9, [x8]
    // b8: 37f80109      tbnz    w9, #0x1f, 0xd8 <_JIT_ENTRY+0xd8>
    // bc: 71000529      subs    w9, w9, #0x1
    // c0: b9000109      str     w9, [x8]
    // c4: 540000a1      b.ne    0xd8 <_JIT_ENTRY+0xd8>
    // c8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // cc: aa0803e0      mov     x0, x8
    // d0: f9400129      ldr     x9, [x9]
    // 00000000000000d0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // d4: d63f0120      blr     x9
    // d8: f8787aa0      ldr     x0, [x21, x24, lsl #3]
    // dc: b4000120      cbz     x0, 0x100 <_JIT_ENTRY+0x100>
    // e0: b9400008      ldr     w8, [x0]
    // e4: 37f800e8      tbnz    w8, #0x1f, 0x100 <_JIT_ENTRY+0x100>
    // e8: 71000508      subs    w8, w8, #0x1
    // ec: b9000008      str     w8, [x0]
    // f0: 54000081      b.ne    0x100 <_JIT_ENTRY+0x100>
    // f4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000f4:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // f8: f9400108      ldr     x8, [x8]
    // 00000000000000f8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // fc: d63f0100      blr     x8
    // 100: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000100:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 104: f9400108      ldr     x8, [x8]
    // 0000000000000104:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 108: 72003d1f      tst     w8, #0xffff
    // 10c: 54000240      b.eq    0x154 <_JIT_ENTRY+0x154>
    // 110: 9000001a      adrp    x26, 0x0 <_JIT_ENTRY>
    // 0000000000000110:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 114: 92403d08      and     x8, x8, #0xffff
    // 118: d10022b5      sub     x21, x21, #0x8
    // 11c: f940035a      ldr     x26, [x26]
    // 000000000000011c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 120: 9100051b      add     x27, x8, #0x1
    // 124: 14000004      b       0x134 <_JIT_ENTRY+0x134>
    // 128: d100077b      sub     x27, x27, #0x1
    // 12c: f100077f      cmp     x27, #0x1
    // 130: 54000129      b.ls    0x154 <_JIT_ENTRY+0x154>
    // 134: f85f86a0      ldr     x0, [x21], #-0x8
    // 138: b9400008      ldr     w8, [x0]
    // 13c: 37ffff68      tbnz    w8, #0x1f, 0x128 <_JIT_ENTRY+0x128>
    // 140: 71000508      subs    w8, w8, #0x1
    // 144: b9000008      str     w8, [x0]
    // 148: 54ffff01      b.ne    0x128 <_JIT_ENTRY+0x128>
    // 14c: d63f0340      blr     x26
    // 150: 17fffff6      b       0x128 <_JIT_ENTRY+0x128>
    // 154: b40000b3      cbz     x19, 0x168 <_JIT_ENTRY+0x168>
    // 158: 8b180f35      add     x21, x25, x24, lsl #3
    // 15c: f8377b33      str     x19, [x25, x23, lsl #3]
    // 160: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 164: 14000000      b       0x164 <_JIT_ENTRY+0x164>
    // 0000000000000164:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 168: 8b170f35      add     x21, x25, x23, lsl #3
    // 16c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 170: 14000000      b       0x170 <_JIT_ENTRY+0x170>
    // 0000000000000170:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 174: 00 00 00 00
    const unsigned char code_body[376] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x0a, 0x00, 0x00, 0x90,
        0x28, 0x00, 0x80, 0x92, 0x0f, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0xee, 0x00, 0x80, 0x92,
        0xfd, 0x03, 0x00, 0x91, 0x17, 0x21, 0x2a, 0xcb,
        0x49, 0x3d, 0x00, 0x12, 0xe8, 0x03, 0x29, 0x2a,
        0xac, 0x7a, 0x77, 0xf8, 0xab, 0xda, 0x68, 0xf8,
        0x8d, 0x05, 0x40, 0xf9, 0xef, 0x01, 0x40, 0xf9,
        0x7f, 0x01, 0x00, 0xf1, 0xeb, 0x07, 0x9f, 0x1a,
        0xce, 0x11, 0x9f, 0x9a, 0xbf, 0x01, 0x0f, 0xeb,
        0x81, 0x01, 0x00, 0x54, 0x8d, 0x15, 0x40, 0xf9,
        0xaf, 0x11, 0x40, 0xb9, 0xff, 0x09, 0x02, 0x71,
        0x01, 0x01, 0x00, 0x54, 0xaa, 0x2e, 0x2a, 0xcb,
        0x8c, 0x09, 0x40, 0xf9, 0x4a, 0x01, 0x0e, 0x8b,
        0x40, 0x01, 0x40, 0xf9, 0x0e, 0x04, 0x40, 0xf9,
        0xdf, 0x01, 0x0c, 0xeb, 0x60, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x29, 0x01, 0x0b, 0x0b, 0x18, 0x7d, 0x40, 0x93,
        0xa8, 0x05, 0x40, 0xf9, 0x29, 0x05, 0x00, 0x51,
        0x41, 0x21, 0x00, 0x91, 0xe3, 0x03, 0x1f, 0xaa,
        0x22, 0x7d, 0x40, 0x93, 0x95, 0x22, 0x00, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x99, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf3, 0x03, 0x00, 0xaa,
        0xa8, 0x7a, 0x77, 0xf8, 0x09, 0x01, 0x40, 0xb9,
        0x09, 0x01, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x71,
        0x09, 0x01, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x08, 0xaa,
        0x29, 0x01, 0x40, 0xf9, 0x20, 0x01, 0x3f, 0xd6,
        0xa0, 0x7a, 0x78, 0xf8, 0x20, 0x01, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x1f, 0x3d, 0x00, 0x72, 0x40, 0x02, 0x00, 0x54,
        0x1a, 0x00, 0x00, 0x90, 0x08, 0x3d, 0x40, 0x92,
        0xb5, 0x22, 0x00, 0xd1, 0x5a, 0x03, 0x40, 0xf9,
        0x1b, 0x05, 0x00, 0x91, 0x04, 0x00, 0x00, 0x14,
        0x7b, 0x07, 0x00, 0xd1, 0x7f, 0x07, 0x00, 0xf1,
        0x29, 0x01, 0x00, 0x54, 0xa0, 0x86, 0x5f, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x68, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x01, 0xff, 0xff, 0x54, 0x40, 0x03, 0x3f, 0xd6,
        0xf6, 0xff, 0xff, 0x17, 0xb3, 0x00, 0x00, 0xb4,
        0x35, 0x0f, 0x18, 0x8b, 0x33, 0x7b, 0x37, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x35, 0x0f, 0x17, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyMethodDescr_Type+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x7c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0xc8, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xd0, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xf4, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x100, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x110, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x11c, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x164, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x170, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_METHOD_DESCRIPTOR_NOARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_METHOD_DESCRIPTOR_NOARGS.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 928000e9      mov     x9, #-0x8               // =-8
    // c: 910003fd      mov     x29, sp
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: 12003d0a      and     w10, w8, #0xffff
    // 18: 2a2a03eb      mvn     w11, w10
    // 1c: f86bdaab      ldr     x11, [x21, w11, sxtw #3]
    // 20: f100017f      cmp     x11, #0x0
    // 24: 1a8a054a      cinc    w10, w10, ne
    // 28: 9a9f1129      csel    x9, x9, xzr, ne
    // 2c: 7100055f      cmp     w10, #0x1
    // 30: 54000781      b.ne    0x120 <_JIT_ENTRY+0x120>
    // 34: 9280002a      mov     x10, #-0x2              // =-2
    // 38: 9000000c      adrp    x12, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       PyMethodDescr_Type
    // 3c: cb282158      sub     x24, x10, w8, uxth
    // 40: f8787aaa      ldr     x10, [x21, x24, lsl #3]
    // 44: f940054b      ldr     x11, [x10, #0x8]
    // 48: f940018c      ldr     x12, [x12]
    // 0000000000000048:  R_AARCH64_LD64_GOT_LO12_NC   PyMethodDescr_Type
    // 4c: eb0c017f      cmp     x11, x12
    // 50: 54000681      b.ne    0x120 <_JIT_ENTRY+0x120>
    // 54: cb282ea8      sub     x8, x21, w8, uxth #3
    // 58: f8696913      ldr     x19, [x8, x9]
    // 5c: f9400948      ldr     x8, [x10, #0x10]
    // 60: f9400669      ldr     x9, [x19, #0x8]
    // 64: eb08013f      cmp     x9, x8
    // 68: 540005c1      b.ne    0x120 <_JIT_ENTRY+0x120>
    // 6c: f9401548      ldr     x8, [x10, #0x28]
    // 70: b9401109      ldr     w9, [x8, #0x10]
    // 74: 7100113f      cmp     w9, #0x4
    // 78: 54000541      b.ne    0x120 <_JIT_ENTRY+0x120>
    // 7c: b94036c9      ldr     w9, [x22, #0x34]
    // 80: 7100013f      cmp     w9, #0x0
    // 84: 540004ed      b.le    0x120 <_JIT_ENTRY+0x120>
    // 88: f9400508      ldr     x8, [x8, #0x8]
    // 8c: 51000529      sub     w9, w9, #0x1
    // 90: aa1303e0      mov     x0, x19
    // 94: aa1f03e1      mov     x1, xzr
    // 98: b90036c9      str     w9, [x22, #0x34]
    // 9c: f9002295      str     x21, [x20, #0x40]
    // a0: d63f0100      blr     x8
    // a4: b94036c8      ldr     w8, [x22, #0x34]
    // a8: aa0003f7      mov     x23, x0
    // ac: 11000508      add     w8, w8, #0x1
    // b0: b90036c8      str     w8, [x22, #0x34]
    // b4: b9400268      ldr     w8, [x19]
    // b8: 37f80108      tbnz    w8, #0x1f, 0xd8 <_JIT_ENTRY+0xd8>
    // bc: 71000508      subs    w8, w8, #0x1
    // c0: b9000268      str     w8, [x19]
    // c4: 540000a1      b.ne    0xd8 <_JIT_ENTRY+0xd8>
    // c8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // cc: aa1303e0      mov     x0, x19
    // d0: f9400108      ldr     x8, [x8]
    // 00000000000000d0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // d4: d63f0100      blr     x8
    // d8: f9402288      ldr     x8, [x20, #0x40]
    // dc: 8b180d08      add     x8, x8, x24, lsl #3
    // e0: f9002288      str     x8, [x20, #0x40]
    // e4: f8787aa0      ldr     x0, [x21, x24, lsl #3]
    // e8: b9400008      ldr     w8, [x0]
    // ec: 37f800e8      tbnz    w8, #0x1f, 0x108 <_JIT_ENTRY+0x108>
    // f0: 71000508      subs    w8, w8, #0x1
    // f4: b9000008      str     w8, [x0]
    // f8: 54000081      b.ne    0x108 <_JIT_ENTRY+0x108>
    // fc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000fc:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 100: f9400108      ldr     x8, [x8]
    // 0000000000000100:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 104: d63f0100      blr     x8
    // 108: f9402295      ldr     x21, [x20, #0x40]
    // 10c: f900229f      str     xzr, [x20, #0x40]
    // 110: b40000d7      cbz     x23, 0x128 <_JIT_ENTRY+0x128>
    // 114: f80086b7      str     x23, [x21], #0x8
    // 118: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 11c: 14000000      b       0x11c <_JIT_ENTRY+0x11c>
    // 000000000000011c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 120: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 124: 14000000      b       0x124 <_JIT_ENTRY+0x124>
    // 0000000000000124:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 128: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 12c: 14000000      b       0x12c <_JIT_ENTRY+0x12c>
    // 000000000000012c:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[304] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xe9, 0x00, 0x80, 0x92, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x0a, 0x3d, 0x00, 0x12,
        0xeb, 0x03, 0x2a, 0x2a, 0xab, 0xda, 0x6b, 0xf8,
        0x7f, 0x01, 0x00, 0xf1, 0x4a, 0x05, 0x8a, 0x1a,
        0x29, 0x11, 0x9f, 0x9a, 0x5f, 0x05, 0x00, 0x71,
        0x81, 0x07, 0x00, 0x54, 0x2a, 0x00, 0x80, 0x92,
        0x0c, 0x00, 0x00, 0x90, 0x58, 0x21, 0x28, 0xcb,
        0xaa, 0x7a, 0x78, 0xf8, 0x4b, 0x05, 0x40, 0xf9,
        0x8c, 0x01, 0x40, 0xf9, 0x7f, 0x01, 0x0c, 0xeb,
        0x81, 0x06, 0x00, 0x54, 0xa8, 0x2e, 0x28, 0xcb,
        0x13, 0x69, 0x69, 0xf8, 0x48, 0x09, 0x40, 0xf9,
        0x69, 0x06, 0x40, 0xf9, 0x3f, 0x01, 0x08, 0xeb,
        0xc1, 0x05, 0x00, 0x54, 0x48, 0x15, 0x40, 0xf9,
        0x09, 0x11, 0x40, 0xb9, 0x3f, 0x11, 0x00, 0x71,
        0x41, 0x05, 0x00, 0x54, 0xc9, 0x36, 0x40, 0xb9,
        0x3f, 0x01, 0x00, 0x71, 0xed, 0x04, 0x00, 0x54,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x05, 0x00, 0x51,
        0xe0, 0x03, 0x13, 0xaa, 0xe1, 0x03, 0x1f, 0xaa,
        0xc9, 0x36, 0x00, 0xb9, 0x95, 0x22, 0x00, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xc8, 0x36, 0x40, 0xb9,
        0xf7, 0x03, 0x00, 0xaa, 0x08, 0x05, 0x00, 0x11,
        0xc8, 0x36, 0x00, 0xb9, 0x68, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x88, 0x22, 0x40, 0xf9, 0x08, 0x0d, 0x18, 0x8b,
        0x88, 0x22, 0x00, 0xf9, 0xa0, 0x7a, 0x78, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xd7, 0x00, 0x00, 0xb4, 0xb7, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PyMethodDescr_Type+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x48, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xc8, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xd0, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xfc, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x11c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x124, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x12c, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_METHOD_DESCRIPTOR_O(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_METHOD_DESCRIPTOR_O.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 928000ea      mov     x10, #-0x8              // =-8
    // c: 910003fd      mov     x29, sp
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: 12003d2b      and     w11, w9, #0xffff
    // 18: 2a2b03e8      mvn     w8, w11
    // 1c: f868daac      ldr     x12, [x21, w8, sxtw #3]
    // 20: f100019f      cmp     x12, #0x0
    // 24: 1a8b056c      cinc    w12, w11, ne
    // 28: 9a9f114b      csel    x11, x10, xzr, ne
    // 2c: 7100099f      cmp     w12, #0x2
    // 30: 540002e1      b.ne    0x8c <_JIT_ENTRY+0x8c>
    // 34: 9280002a      mov     x10, #-0x2              // =-2
    // 38: 9000000d      adrp    x13, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       PyMethodDescr_Type
    // 3c: cb292157      sub     x23, x10, w9, uxth
    // 40: f8777aac      ldr     x12, [x21, x23, lsl #3]
    // 44: f940058a      ldr     x10, [x12, #0x8]
    // 48: f94001ad      ldr     x13, [x13]
    // 0000000000000048:  R_AARCH64_LD64_GOT_LO12_NC   PyMethodDescr_Type
    // 4c: eb0d015f      cmp     x10, x13
    // 50: 540001e1      b.ne    0x8c <_JIT_ENTRY+0x8c>
    // 54: f940158a      ldr     x10, [x12, #0x28]
    // 58: b940114d      ldr     w13, [x10, #0x10]
    // 5c: 710021bf      cmp     w13, #0x8
    // 60: 54000161      b.ne    0x8c <_JIT_ENTRY+0x8c>
    // 64: b94036cd      ldr     w13, [x22, #0x34]
    // 68: 710001bf      cmp     w13, #0x0
    // 6c: 5400010d      b.le    0x8c <_JIT_ENTRY+0x8c>
    // 70: cb292ea9      sub     x9, x21, w9, uxth #3
    // 74: 8b0b0129      add     x9, x9, x11
    // 78: f940098b      ldr     x11, [x12, #0x10]
    // 7c: f9400120      ldr     x0, [x9]
    // 80: f940040c      ldr     x12, [x0, #0x8]
    // 84: eb0b019f      cmp     x12, x11
    // 88: 54000060      b.eq    0x94 <_JIT_ENTRY+0x94>
    // 8c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 90: 14000000      b       0x90 <_JIT_ENTRY+0x90>
    // 0000000000000090:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 94: f9400521      ldr     x1, [x9, #0x8]
    // 98: f9400549      ldr     x9, [x10, #0x8]
    // 9c: 93407d18      sxtw    x24, w8
    // a0: 510005a8      sub     w8, w13, #0x1
    // a4: f9002295      str     x21, [x20, #0x40]
    // a8: b90036c8      str     w8, [x22, #0x34]
    // ac: d63f0120      blr     x9
    // b0: b94036c8      ldr     w8, [x22, #0x34]
    // b4: f9402299      ldr     x25, [x20, #0x40]
    // b8: aa0003f3      mov     x19, x0
    // bc: f900229f      str     xzr, [x20, #0x40]
    // c0: 11000508      add     w8, w8, #0x1
    // c4: b90036c8      str     w8, [x22, #0x34]
    // c8: f8777aa8      ldr     x8, [x21, x23, lsl #3]
    // cc: b9400109      ldr     w9, [x8]
    // d0: 37f80109      tbnz    w9, #0x1f, 0xf0 <_JIT_ENTRY+0xf0>
    // d4: 71000529      subs    w9, w9, #0x1
    // d8: b9000109      str     w9, [x8]
    // dc: 540000a1      b.ne    0xf0 <_JIT_ENTRY+0xf0>
    // e0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000e0:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // e4: aa0803e0      mov     x0, x8
    // e8: f9400129      ldr     x9, [x9]
    // 00000000000000e8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // ec: d63f0120      blr     x9
    // f0: f8787aa0      ldr     x0, [x21, x24, lsl #3]
    // f4: b4000120      cbz     x0, 0x118 <_JIT_ENTRY+0x118>
    // f8: b9400008      ldr     w8, [x0]
    // fc: 37f800e8      tbnz    w8, #0x1f, 0x118 <_JIT_ENTRY+0x118>
    // 100: 71000508      subs    w8, w8, #0x1
    // 104: b9000008      str     w8, [x0]
    // 108: 54000081      b.ne    0x118 <_JIT_ENTRY+0x118>
    // 10c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000010c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 110: f9400108      ldr     x8, [x8]
    // 0000000000000110:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 114: d63f0100      blr     x8
    // 118: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000118:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 11c: f9400108      ldr     x8, [x8]
    // 000000000000011c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 120: 72003d1f      tst     w8, #0xffff
    // 124: 54000240      b.eq    0x16c <_JIT_ENTRY+0x16c>
    // 128: 9000001a      adrp    x26, 0x0 <_JIT_ENTRY>
    // 0000000000000128:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 12c: 92403d08      and     x8, x8, #0xffff
    // 130: d10022b5      sub     x21, x21, #0x8
    // 134: f940035a      ldr     x26, [x26]
    // 0000000000000134:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 138: 9100051b      add     x27, x8, #0x1
    // 13c: 14000004      b       0x14c <_JIT_ENTRY+0x14c>
    // 140: d100077b      sub     x27, x27, #0x1
    // 144: f100077f      cmp     x27, #0x1
    // 148: 54000129      b.ls    0x16c <_JIT_ENTRY+0x16c>
    // 14c: f85f86a0      ldr     x0, [x21], #-0x8
    // 150: b9400008      ldr     w8, [x0]
    // 154: 37ffff68      tbnz    w8, #0x1f, 0x140 <_JIT_ENTRY+0x140>
    // 158: 71000508      subs    w8, w8, #0x1
    // 15c: b9000008      str     w8, [x0]
    // 160: 54ffff01      b.ne    0x140 <_JIT_ENTRY+0x140>
    // 164: d63f0340      blr     x26
    // 168: 17fffff6      b       0x140 <_JIT_ENTRY+0x140>
    // 16c: b40000b3      cbz     x19, 0x180 <_JIT_ENTRY+0x180>
    // 170: 8b180f35      add     x21, x25, x24, lsl #3
    // 174: f8377b33      str     x19, [x25, x23, lsl #3]
    // 178: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 17c: 14000000      b       0x17c <_JIT_ENTRY+0x17c>
    // 000000000000017c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 180: 8b170f35      add     x21, x25, x23, lsl #3
    // 184: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 188: 14000000      b       0x188 <_JIT_ENTRY+0x188>
    // 0000000000000188:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 18c: 00 00 00 00
    const unsigned char code_body[400] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x09, 0x00, 0x00, 0x90,
        0xea, 0x00, 0x80, 0x92, 0xfd, 0x03, 0x00, 0x91,
        0x29, 0x01, 0x40, 0xf9, 0x2b, 0x3d, 0x00, 0x12,
        0xe8, 0x03, 0x2b, 0x2a, 0xac, 0xda, 0x68, 0xf8,
        0x9f, 0x01, 0x00, 0xf1, 0x6c, 0x05, 0x8b, 0x1a,
        0x4b, 0x11, 0x9f, 0x9a, 0x9f, 0x09, 0x00, 0x71,
        0xe1, 0x02, 0x00, 0x54, 0x2a, 0x00, 0x80, 0x92,
        0x0d, 0x00, 0x00, 0x90, 0x57, 0x21, 0x29, 0xcb,
        0xac, 0x7a, 0x77, 0xf8, 0x8a, 0x05, 0x40, 0xf9,
        0xad, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0d, 0xeb,
        0xe1, 0x01, 0x00, 0x54, 0x8a, 0x15, 0x40, 0xf9,
        0x4d, 0x11, 0x40, 0xb9, 0xbf, 0x21, 0x00, 0x71,
        0x61, 0x01, 0x00, 0x54, 0xcd, 0x36, 0x40, 0xb9,
        0xbf, 0x01, 0x00, 0x71, 0x0d, 0x01, 0x00, 0x54,
        0xa9, 0x2e, 0x29, 0xcb, 0x29, 0x01, 0x0b, 0x8b,
        0x8b, 0x09, 0x40, 0xf9, 0x20, 0x01, 0x40, 0xf9,
        0x0c, 0x04, 0x40, 0xf9, 0x9f, 0x01, 0x0b, 0xeb,
        0x60, 0x00, 0x00, 0x54, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x21, 0x05, 0x40, 0xf9,
        0x49, 0x05, 0x40, 0xf9, 0x18, 0x7d, 0x40, 0x93,
        0xa8, 0x05, 0x00, 0x51, 0x95, 0x22, 0x00, 0xf9,
        0xc8, 0x36, 0x00, 0xb9, 0x20, 0x01, 0x3f, 0xd6,
        0xc8, 0x36, 0x40, 0xb9, 0x99, 0x22, 0x40, 0xf9,
        0xf3, 0x03, 0x00, 0xaa, 0x9f, 0x22, 0x00, 0xf9,
        0x08, 0x05, 0x00, 0x11, 0xc8, 0x36, 0x00, 0xb9,
        0xa8, 0x7a, 0x77, 0xf8, 0x09, 0x01, 0x40, 0xb9,
        0x09, 0x01, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x71,
        0x09, 0x01, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x08, 0xaa,
        0x29, 0x01, 0x40, 0xf9, 0x20, 0x01, 0x3f, 0xd6,
        0xa0, 0x7a, 0x78, 0xf8, 0x20, 0x01, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x1f, 0x3d, 0x00, 0x72, 0x40, 0x02, 0x00, 0x54,
        0x1a, 0x00, 0x00, 0x90, 0x08, 0x3d, 0x40, 0x92,
        0xb5, 0x22, 0x00, 0xd1, 0x5a, 0x03, 0x40, 0xf9,
        0x1b, 0x05, 0x00, 0x91, 0x04, 0x00, 0x00, 0x14,
        0x7b, 0x07, 0x00, 0xd1, 0x7f, 0x07, 0x00, 0xf1,
        0x29, 0x01, 0x00, 0x54, 0xa0, 0x86, 0x5f, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x68, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x01, 0xff, 0xff, 0x54, 0x40, 0x03, 0x3f, 0xd6,
        0xf6, 0xff, 0xff, 0x17, 0xb3, 0x00, 0x00, 0xb4,
        0x35, 0x0f, 0x18, 0x8b, 0x33, 0x7b, 0x37, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x35, 0x0f, 0x17, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyMethodDescr_Type+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x48, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x90, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0xe0, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xe8, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x10c, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x118, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x128, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x134, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x17c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x188, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_NON_PY_GENERAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_NON_PY_GENERAL.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 9280002b      mov     x11, #-0x2              // =-2
    // c: aa1f03e3      mov     x3, xzr
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: 910003fd      mov     x29, sp
    // 18: 12003d09      and     w9, w8, #0xffff
    // 1c: cb282177      sub     x23, x11, w8, uxth
    // 20: cb282ea8      sub     x8, x21, w8, uxth #3
    // 24: 2a2903ea      mvn     w10, w9
    // 28: f86adaab      ldr     x11, [x21, w10, sxtw #3]
    // 2c: 93407d58      sxtw    x24, w10
    // 30: f8777aa0      ldr     x0, [x21, x23, lsl #3]
    // 34: 928000ea      mov     x10, #-0x8              // =-8
    // 38: f9002295      str     x21, [x20, #0x40]
    // 3c: f100017f      cmp     x11, #0x0
    // 40: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  R_AARCH64_ADR_GOT_PAGE       PyObject_Vectorcall
    // 44: 9a9f114a      csel    x10, x10, xzr, ne
    // 48: 1a890529      cinc    w9, w9, ne
    // 4c: f940016b      ldr     x11, [x11]
    // 000000000000004c:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_Vectorcall
    // 50: 8b0a0101      add     x1, x8, x10
    // 54: b2410122      orr     x2, x9, #0x8000000000000000
    // 58: d63f0160      blr     x11
    // 5c: f9402299      ldr     x25, [x20, #0x40]
    // 60: f900229f      str     xzr, [x20, #0x40]
    // 64: aa0003f3      mov     x19, x0
    // 68: f8777aa8      ldr     x8, [x21, x23, lsl #3]
    // 6c: b9400109      ldr     w9, [x8]
    // 70: 37f80109      tbnz    w9, #0x1f, 0x90 <_JIT_ENTRY+0x90>
    // 74: 71000529      subs    w9, w9, #0x1
    // 78: b9000109      str     w9, [x8]
    // 7c: 540000a1      b.ne    0x90 <_JIT_ENTRY+0x90>
    // 80: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 84: aa0803e0      mov     x0, x8
    // 88: f9400129      ldr     x9, [x9]
    // 0000000000000088:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 8c: d63f0120      blr     x9
    // 90: f8787aa0      ldr     x0, [x21, x24, lsl #3]
    // 94: b4000120      cbz     x0, 0xb8 <_JIT_ENTRY+0xb8>
    // 98: b9400008      ldr     w8, [x0]
    // 9c: 37f800e8      tbnz    w8, #0x1f, 0xb8 <_JIT_ENTRY+0xb8>
    // a0: 71000508      subs    w8, w8, #0x1
    // a4: b9000008      str     w8, [x0]
    // a8: 54000081      b.ne    0xb8 <_JIT_ENTRY+0xb8>
    // ac: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000ac:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // b0: f9400108      ldr     x8, [x8]
    // 00000000000000b0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // b4: d63f0100      blr     x8
    // b8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // bc: f9400108      ldr     x8, [x8]
    // 00000000000000bc:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // c0: 72003d1f      tst     w8, #0xffff
    // c4: 54000240      b.eq    0x10c <_JIT_ENTRY+0x10c>
    // c8: 9000001a      adrp    x26, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // cc: 92403d08      and     x8, x8, #0xffff
    // d0: d10022b5      sub     x21, x21, #0x8
    // d4: f940035a      ldr     x26, [x26]
    // 00000000000000d4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // d8: 9100051b      add     x27, x8, #0x1
    // dc: 14000004      b       0xec <_JIT_ENTRY+0xec>
    // e0: d100077b      sub     x27, x27, #0x1
    // e4: f100077f      cmp     x27, #0x1
    // e8: 54000129      b.ls    0x10c <_JIT_ENTRY+0x10c>
    // ec: f85f86a0      ldr     x0, [x21], #-0x8
    // f0: b9400008      ldr     w8, [x0]
    // f4: 37ffff68      tbnz    w8, #0x1f, 0xe0 <_JIT_ENTRY+0xe0>
    // f8: 71000508      subs    w8, w8, #0x1
    // fc: b9000008      str     w8, [x0]
    // 100: 54ffff01      b.ne    0xe0 <_JIT_ENTRY+0xe0>
    // 104: d63f0340      blr     x26
    // 108: 17fffff6      b       0xe0 <_JIT_ENTRY+0xe0>
    // 10c: b40000b3      cbz     x19, 0x120 <_JIT_ENTRY+0x120>
    // 110: 8b180f35      add     x21, x25, x24, lsl #3
    // 114: f8377b33      str     x19, [x25, x23, lsl #3]
    // 118: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 11c: 14000000      b       0x11c <_JIT_ENTRY+0x11c>
    // 000000000000011c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 120: 8b170f35      add     x21, x25, x23, lsl #3
    // 124: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 128: 14000000      b       0x128 <_JIT_ENTRY+0x128>
    // 0000000000000128:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 12c: 00 00 00 00
    const unsigned char code_body[304] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x2b, 0x00, 0x80, 0x92, 0xe3, 0x03, 0x1f, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0x09, 0x3d, 0x00, 0x12, 0x77, 0x21, 0x28, 0xcb,
        0xa8, 0x2e, 0x28, 0xcb, 0xea, 0x03, 0x29, 0x2a,
        0xab, 0xda, 0x6a, 0xf8, 0x58, 0x7d, 0x40, 0x93,
        0xa0, 0x7a, 0x77, 0xf8, 0xea, 0x00, 0x80, 0x92,
        0x95, 0x22, 0x00, 0xf9, 0x7f, 0x01, 0x00, 0xf1,
        0x0b, 0x00, 0x00, 0x90, 0x4a, 0x11, 0x9f, 0x9a,
        0x29, 0x05, 0x89, 0x1a, 0x6b, 0x01, 0x40, 0xf9,
        0x01, 0x01, 0x0a, 0x8b, 0x22, 0x01, 0x41, 0xb2,
        0x60, 0x01, 0x3f, 0xd6, 0x99, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf3, 0x03, 0x00, 0xaa,
        0xa8, 0x7a, 0x77, 0xf8, 0x09, 0x01, 0x40, 0xb9,
        0x09, 0x01, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x71,
        0x09, 0x01, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x08, 0xaa,
        0x29, 0x01, 0x40, 0xf9, 0x20, 0x01, 0x3f, 0xd6,
        0xa0, 0x7a, 0x78, 0xf8, 0x20, 0x01, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x1f, 0x3d, 0x00, 0x72, 0x40, 0x02, 0x00, 0x54,
        0x1a, 0x00, 0x00, 0x90, 0x08, 0x3d, 0x40, 0x92,
        0xb5, 0x22, 0x00, 0xd1, 0x5a, 0x03, 0x40, 0xf9,
        0x1b, 0x05, 0x00, 0x91, 0x04, 0x00, 0x00, 0x14,
        0x7b, 0x07, 0x00, 0xd1, 0x7f, 0x07, 0x00, 0xf1,
        0x29, 0x01, 0x00, 0x54, 0xa0, 0x86, 0x5f, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x68, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x01, 0xff, 0xff, 0x54, 0x40, 0x03, 0x3f, 0xd6,
        0xf6, 0xff, 0xff, 0x17, 0xb3, 0x00, 0x00, 0xb4,
        0x35, 0x0f, 0x18, 0x8b, 0x33, 0x7b, 0x37, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x35, 0x0f, 0x17, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyObject_Vectorcall+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_Vectorcall);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x80, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x88, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xac, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xb8, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xc8, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x11c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x128, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_STR_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_STR_1.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f02a8      ldur    x8, [x21, #-0x10]
    // 8: 910003fd      mov     x29, sp
    // c: b50000c8      cbnz    x8, 0x24 <_JIT_ENTRY+0x24>
    // 10: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  R_AARCH64_ADR_GOT_PAGE       PyUnicode_Type
    // 14: f85e82a8      ldur    x8, [x21, #-0x18]
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   PyUnicode_Type
    // 1c: eb09011f      cmp     x8, x9
    // 20: 54000060      b.eq    0x2c <_JIT_ENTRY+0x2c>
    // 24: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 28: 14000000      b       0x28 <_JIT_ENTRY+0x28>
    // 0000000000000028:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 2c: f85f82b3      ldur    x19, [x21, #-0x8]
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  R_AARCH64_ADR_GOT_PAGE       PyObject_Str
    // 38: f9400108      ldr     x8, [x8]
    // 0000000000000038:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_Str
    // 3c: aa1303e0      mov     x0, x19
    // 40: d63f0100      blr     x8
    // 44: f9402288      ldr     x8, [x20, #0x40]
    // 48: d1006108      sub     x8, x8, #0x18
    // 4c: f9002288      str     x8, [x20, #0x40]
    // 50: b9400268      ldr     w8, [x19]
    // 54: 37f80148      tbnz    w8, #0x1f, 0x7c <_JIT_ENTRY+0x7c>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b9000268      str     w8, [x19]
    // 60: 540000e1      b.ne    0x7c <_JIT_ENTRY+0x7c>
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 68: aa0003f5      mov     x21, x0
    // 6c: aa1303e0      mov     x0, x19
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: aa1503e0      mov     x0, x21
    // 7c: f9402295      ldr     x21, [x20, #0x40]
    // 80: f900229f      str     xzr, [x20, #0x40]
    // 84: b4000080      cbz     x0, 0x94 <_JIT_ENTRY+0x94>
    // 88: f80086a0      str     x0, [x21], #0x8
    // 8c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 90: 14000000      b       0x90 <_JIT_ENTRY+0x90>
    // 0000000000000090:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 94: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 98: 14000000      b       0x98 <_JIT_ENTRY+0x98>
    // 0000000000000098:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 9c: 00 00 00 00
    const unsigned char code_body[160] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xa8, 0x02, 0x5f, 0xf8,
        0xfd, 0x03, 0x00, 0x91, 0xc8, 0x00, 0x00, 0xb5,
        0x09, 0x00, 0x00, 0x90, 0xa8, 0x82, 0x5e, 0xf8,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x60, 0x00, 0x00, 0x54, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xb3, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x88, 0x22, 0x40, 0xf9,
        0x08, 0x61, 0x00, 0xd1, 0x88, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x48, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xe1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x15, 0xaa, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x80, 0x00, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyUnicode_Type+0x0
    // 8: &PyObject_Str+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x8, (uintptr_t)&PyObject_Str);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_26r(code + 0x28, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x90, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x98, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_TUPLE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_TUPLE_1.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f02a8      ldur    x8, [x21, #-0x10]
    // 8: 910003fd      mov     x29, sp
    // c: b50000c8      cbnz    x8, 0x24 <_JIT_ENTRY+0x24>
    // 10: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  R_AARCH64_ADR_GOT_PAGE       PyTuple_Type
    // 14: f85e82a8      ldur    x8, [x21, #-0x18]
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   PyTuple_Type
    // 1c: eb09011f      cmp     x8, x9
    // 20: 54000060      b.eq    0x2c <_JIT_ENTRY+0x2c>
    // 24: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 28: 14000000      b       0x28 <_JIT_ENTRY+0x28>
    // 0000000000000028:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 2c: f85f82b3      ldur    x19, [x21, #-0x8]
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  R_AARCH64_ADR_GOT_PAGE       PySequence_Tuple
    // 38: f9400108      ldr     x8, [x8]
    // 0000000000000038:  R_AARCH64_LD64_GOT_LO12_NC   PySequence_Tuple
    // 3c: aa1303e0      mov     x0, x19
    // 40: d63f0100      blr     x8
    // 44: f9402288      ldr     x8, [x20, #0x40]
    // 48: d1006108      sub     x8, x8, #0x18
    // 4c: f9002288      str     x8, [x20, #0x40]
    // 50: b9400268      ldr     w8, [x19]
    // 54: 37f80148      tbnz    w8, #0x1f, 0x7c <_JIT_ENTRY+0x7c>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b9000268      str     w8, [x19]
    // 60: 540000e1      b.ne    0x7c <_JIT_ENTRY+0x7c>
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 68: aa0003f5      mov     x21, x0
    // 6c: aa1303e0      mov     x0, x19
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: aa1503e0      mov     x0, x21
    // 7c: f9402295      ldr     x21, [x20, #0x40]
    // 80: f900229f      str     xzr, [x20, #0x40]
    // 84: b4000080      cbz     x0, 0x94 <_JIT_ENTRY+0x94>
    // 88: f80086a0      str     x0, [x21], #0x8
    // 8c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 90: 14000000      b       0x90 <_JIT_ENTRY+0x90>
    // 0000000000000090:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 94: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 98: 14000000      b       0x98 <_JIT_ENTRY+0x98>
    // 0000000000000098:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 9c: 00 00 00 00
    const unsigned char code_body[160] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xa8, 0x02, 0x5f, 0xf8,
        0xfd, 0x03, 0x00, 0x91, 0xc8, 0x00, 0x00, 0xb5,
        0x09, 0x00, 0x00, 0x90, 0xa8, 0x82, 0x5e, 0xf8,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x60, 0x00, 0x00, 0x54, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xb3, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x88, 0x22, 0x40, 0xf9,
        0x08, 0x61, 0x00, 0xd1, 0x88, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x48, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xe1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x15, 0xaa, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x80, 0x00, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyTuple_Type+0x0
    // 8: &PySequence_Tuple+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x8, (uintptr_t)&PySequence_Tuple);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_26r(code + 0x28, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x90, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x98, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_TYPE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_TYPE_1.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85f0d09      ldr     x9, [x8, #-0x10]!
    // 8: b50000c9      cbnz    x9, 0x20 <_JIT_ENTRY+0x20>
    // c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       PyType_Type
    // 10: f85e82a9      ldur    x9, [x21, #-0x18]
    // 14: f940014a      ldr     x10, [x10]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   PyType_Type
    // 18: eb0a013f      cmp     x9, x10
    // 1c: 54000040      b.eq    0x24 <_JIT_ENTRY+0x24>
    // 20: 14000000      b       0x20 <_JIT_ENTRY+0x20>
    // 0000000000000020:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 24: f9400500      ldr     x0, [x8, #0x8]
    // 28: f9400409      ldr     x9, [x0, #0x8]
    // 2c: b940012a      ldr     w10, [x9]
    // 30: 37f8006a      tbnz    w10, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 34: 1100054a      add     w10, w10, #0x1
    // 38: b900012a      str     w10, [x9]
    // 3c: f81e82a9      stur    x9, [x21, #-0x18]
    // 40: f9002288      str     x8, [x20, #0x40]
    // 44: b9400008      ldr     w8, [x0]
    // 48: 37f80088      tbnz    w8, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 4c: 71000508      subs    w8, w8, #0x1
    // 50: b9000008      str     w8, [x0]
    // 54: 54000080      b.eq    0x64 <_JIT_ENTRY+0x64>
    // 58: f9402295      ldr     x21, [x20, #0x40]
    // 5c: f900229f      str     xzr, [x20, #0x40]
    // 60: 14000000      b       0x60 <_JIT_ENTRY+0x60>
    // 0000000000000060:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 64: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 6c: 910003fd      mov     x29, sp
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 7c: f9402295      ldr     x21, [x20, #0x40]
    // 80: f900229f      str     xzr, [x20, #0x40]
    // 84: 14000000      b       0x84 <_JIT_ENTRY+0x84>
    // 0000000000000084:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[136] = {
        0xe8, 0x03, 0x15, 0xaa, 0x09, 0x0d, 0x5f, 0xf8,
        0xc9, 0x00, 0x00, 0xb5, 0x0a, 0x00, 0x00, 0x90,
        0xa9, 0x82, 0x5e, 0xf8, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x05, 0x40, 0xf9,
        0x09, 0x04, 0x40, 0xf9, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0x82, 0x1e, 0xf8,
        0x88, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x80, 0x00, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyType_Type+0x0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyType_Type);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_26r(code + 0x20, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x60, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x84, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_AND_ALLOCATE_OBJECT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_AND_ALLOCATE_OBJECT.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 910003fd      mov     x29, sp
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 10: 12003d08      and     w8, w8, #0xffff
    // 14: 2a2803f7      mvn     w23, w8
    // 18: f877daa9      ldr     x9, [x21, w23, sxtw #3]
    // 1c: b50006a9      cbnz    x9, 0xf0 <_JIT_ENTRY+0xf0>
    // 20: 12800029      mov     w9, #-0x2               // =-2
    // 24: 4b080133      sub     w19, w9, w8
    // 28: f873daa0      ldr     x0, [x21, w19, sxtw #3]
    // 2c: f9400408      ldr     x8, [x0, #0x8]
    // 30: 3942ad08      ldrb    w8, [x8, #0xab]
    // 34: 363805e8      tbz     w8, #0x7, 0xf0 <_JIT_ENTRY+0xf0>
    // 38: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 3c: b9418008      ldr     w8, [x0, #0x180]
    // 40: f9400129      ldr     x9, [x9]
    // 0000000000000040:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 44: 6b09011f      cmp     w8, w9
    // 48: 54000541      b.ne    0xf0 <_JIT_ENTRY+0xf0>
    // 4c: f9407ac8      ldr     x8, [x22, #0xf0]
    // 50: b4000508      cbz     x8, 0xf0 <_JIT_ENTRY+0xf0>
    // 54: f941d018      ldr     x24, [x0, #0x3a0]
    // 58: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  R_AARCH64_ADR_GOT_PAGE       _Py_InitCleanup
    // 5c: f9401b09      ldr     x9, [x24, #0x30]
    // 60: f940014a      ldr     x10, [x10]
    // 0000000000000060:  R_AARCH64_LD64_GOT_LO12_NC   _Py_InitCleanup
    // 64: f9407ecb      ldr     x11, [x22, #0xf8]
    // 68: b9804d29      ldrsw   x9, [x9, #0x4c]
    // 6c: b9804d4a      ldrsw   x10, [x10, #0x4c]
    // 70: cb080168      sub     x8, x11, x8
    // 74: 8b090149      add     x9, x10, x9
    // 78: eb880d3f      cmp     x9, x8, asr #3
    // 7c: 540003aa      b.ge    0xf0 <_JIT_ENTRY+0xf0>
    // 80: f9002295      str     x21, [x20, #0x40]
    // 84: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  R_AARCH64_ADR_GOT_PAGE       PyType_GenericAlloc
    // 88: aa1f03e1      mov     x1, xzr
    // 8c: f9400108      ldr     x8, [x8]
    // 000000000000008c:  R_AARCH64_LD64_GOT_LO12_NC   PyType_GenericAlloc
    // 90: d63f0100      blr     x8
    // 94: f9402288      ldr     x8, [x20, #0x40]
    // 98: f900229f      str     xzr, [x20, #0x40]
    // 9c: b40002e0      cbz     x0, 0xf8 <_JIT_ENTRY+0xf8>
    // a0: f837daa0      str     x0, [x21, w23, sxtw #3]
    // a4: b9400309      ldr     w9, [x24]
    // a8: f873daa0      ldr     x0, [x21, w19, sxtw #3]
    // ac: 37f80069      tbnz    w9, #0x1f, 0xb8 <_JIT_ENTRY+0xb8>
    // b0: 11000529      add     w9, w9, #0x1
    // b4: b9000309      str     w9, [x24]
    // b8: f833dab8      str     x24, [x21, w19, sxtw #3]
    // bc: f9002288      str     x8, [x20, #0x40]
    // c0: b9400008      ldr     w8, [x0]
    // c4: 37f800e8      tbnz    w8, #0x1f, 0xe0 <_JIT_ENTRY+0xe0>
    // c8: 71000508      subs    w8, w8, #0x1
    // cc: b9000008      str     w8, [x0]
    // d0: 54000081      b.ne    0xe0 <_JIT_ENTRY+0xe0>
    // d4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000d4:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // d8: f9400108      ldr     x8, [x8]
    // 00000000000000d8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // dc: d63f0100      blr     x8
    // e0: f9402295      ldr     x21, [x20, #0x40]
    // e4: f900229f      str     xzr, [x20, #0x40]
    // e8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // ec: 14000000      b       0xec <_JIT_ENTRY+0xec>
    // 00000000000000ec:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // f0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // f4: 14000000      b       0xf4 <_JIT_ENTRY+0xf4>
    // 00000000000000f4:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // f8: aa0803f5      mov     x21, x8
    // fc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 100: 14000000      b       0x100 <_JIT_ENTRY+0x100>
    // 0000000000000100:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 104: 00 00 00 00
    const unsigned char code_body[264] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x00, 0x12, 0xf7, 0x03, 0x28, 0x2a,
        0xa9, 0xda, 0x77, 0xf8, 0xa9, 0x06, 0x00, 0xb5,
        0x29, 0x00, 0x80, 0x12, 0x33, 0x01, 0x08, 0x4b,
        0xa0, 0xda, 0x73, 0xf8, 0x08, 0x04, 0x40, 0xf9,
        0x08, 0xad, 0x42, 0x39, 0xe8, 0x05, 0x38, 0x36,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x80, 0x41, 0xb9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x41, 0x05, 0x00, 0x54, 0xc8, 0x7a, 0x40, 0xf9,
        0x08, 0x05, 0x00, 0xb4, 0x18, 0xd0, 0x41, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x09, 0x1b, 0x40, 0xf9,
        0x4a, 0x01, 0x40, 0xf9, 0xcb, 0x7e, 0x40, 0xf9,
        0x29, 0x4d, 0x80, 0xb9, 0x4a, 0x4d, 0x80, 0xb9,
        0x68, 0x01, 0x08, 0xcb, 0x49, 0x01, 0x09, 0x8b,
        0x3f, 0x0d, 0x88, 0xeb, 0xaa, 0x03, 0x00, 0x54,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0xe1, 0x03, 0x1f, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x88, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xe0, 0x02, 0x00, 0xb4,
        0xa0, 0xda, 0x37, 0xf8, 0x09, 0x03, 0x40, 0xb9,
        0xa0, 0xda, 0x73, 0xf8, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x03, 0x00, 0xb9,
        0xb8, 0xda, 0x33, 0xf8, 0x88, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xf5, 0x03, 0x08, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: OPERAND0
    // 10: &_Py_InitCleanup+0x0
    // 18: &PyType_GenericAlloc+0x0
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, (uintptr_t)&_Py_InitCleanup);
    patch_64(data + 0x18, (uintptr_t)&PyType_GenericAlloc);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x58, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x60, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x84, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x8c, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0xd4, (uintptr_t)data + 0x20);
    patch_aarch64_26r(code + 0xec, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xf4, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x100, state->instruction_starts[instruction->error_target]);
}

void
emit__CHECK_ATTR_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_ATTR_CLASS.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 3942ad29      ldrb    w9, [x9, #0xab]
    // c: 363800e9      tbz     w9, #0x7, 0x28 <_JIT_ENTRY+0x28>
    // 10: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 14: b9418108      ldr     w8, [x8, #0x180]
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 1c: 6b09011f      cmp     w8, w9
    // 20: 54000041      b.ne    0x28 <_JIT_ENTRY+0x28>
    // 24: 14000000      b       0x24 <_JIT_ENTRY+0x24>
    // 0000000000000024:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 28: 14000000      b       0x28 <_JIT_ENTRY+0x28>
    // 0000000000000028:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 2c: 00 00 00 00
    const unsigned char code_body[48] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x29, 0xad, 0x42, 0x39, 0xe9, 0x00, 0x38, 0x36,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x81, 0x41, 0xb9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x28, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_ATTR_METHOD_LAZY_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_ATTR_METHOD_LAZY_DICT.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 4: f85f82a8      ldur    x8, [x21, #-0x8]
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // c: 8b292108      add     x8, x8, w9, uxth
    // 10: f85e8108      ldur    x8, [x8, #-0x18]
    // 14: b4000048      cbz     x8, 0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[32] = {
        0x09, 0x00, 0x00, 0x90, 0xa8, 0x82, 0x5f, 0xf8,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x21, 0x29, 0x8b,
        0x08, 0x81, 0x5e, 0xf8, 0x48, 0x00, 0x00, 0xb4,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_ATTR_MODULE_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_ATTR_MODULE_PUSH_KEYS.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyModule_Type
    // 8: f9400509      ldr     x9, [x8, #0x8]
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyModule_Type
    // 10: f9404929      ldr     x9, [x9, #0x90]
    // 14: f940494a      ldr     x10, [x10, #0x90]
    // 18: eb0a013f      cmp     x9, x10
    // 1c: 54000141      b.ne    0x44 <_JIT_ENTRY+0x44>
    // 20: f9400908      ldr     x8, [x8, #0x10]
    // 24: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 28: f9401108      ldr     x8, [x8, #0x20]
    // 2c: b9400d09      ldr     w9, [x8, #0xc]
    // 30: f940014a      ldr     x10, [x10]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 34: 6b0a013f      cmp     w9, w10
    // 38: 54000061      b.ne    0x44 <_JIT_ENTRY+0x44>
    // 3c: f80086a8      str     x8, [x21], #0x8
    // 40: 14000000      b       0x40 <_JIT_ENTRY+0x40>
    // 0000000000000040:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 44: 14000000      b       0x44 <_JIT_ENTRY+0x44>
    // 0000000000000044:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[72] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x05, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x29, 0x49, 0x40, 0xf9, 0x4a, 0x49, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x41, 0x01, 0x00, 0x54,
        0x08, 0x09, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x0d, 0x40, 0xb9,
        0x4a, 0x01, 0x40, 0xf9, 0x3f, 0x01, 0x0a, 0x6b,
        0x61, 0x00, 0x00, 0x54, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyModule_Type+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyModule_Type);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x44, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_ATTR_WITH_HINT.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f85e8108      ldur    x8, [x8, #-0x18]
    // 8: b4000068      cbz     x8, 0x14 <_JIT_ENTRY+0x14>
    // c: f80086a8      str     x8, [x21], #0x8
    // 10: 14000000      b       0x10 <_JIT_ENTRY+0x10>
    // 0000000000000010:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 14: 14000000      b       0x14 <_JIT_ENTRY+0x14>
    // 0000000000000014:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[24] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x08, 0x81, 0x5e, 0xf8,
        0x68, 0x00, 0x00, 0xb4, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x14, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_CALL_BOUND_METHOD_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: 12003d08      and     w8, w8, #0xffff
    // c: 2a2803e9      mvn     w9, w8
    // 10: f869daa9      ldr     x9, [x21, w9, sxtw #3]
    // 14: b5000129      cbnz    x9, 0x38 <_JIT_ENTRY+0x38>
    // 18: 12800029      mov     w9, #-0x2               // =-2
    // 1c: 4b080128      sub     w8, w9, w8
    // 20: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  R_AARCH64_ADR_GOT_PAGE       PyMethod_Type
    // 24: f868daa8      ldr     x8, [x21, w8, sxtw #3]
    // 28: f9400508      ldr     x8, [x8, #0x8]
    // 2c: f9400129      ldr     x9, [x9]
    // 000000000000002c:  R_AARCH64_LD64_GOT_LO12_NC   PyMethod_Type
    // 30: eb09011f      cmp     x8, x9
    // 34: 54000040      b.eq    0x3c <_JIT_ENTRY+0x3c>
    // 38: 14000000      b       0x38 <_JIT_ENTRY+0x38>
    // 0000000000000038:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 3c: 14000000      b       0x3c <_JIT_ENTRY+0x3c>
    // 000000000000003c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[64] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x00, 0x12, 0xe9, 0x03, 0x28, 0x2a,
        0xa9, 0xda, 0x69, 0xf8, 0x29, 0x01, 0x00, 0xb5,
        0x29, 0x00, 0x80, 0x12, 0x28, 0x01, 0x08, 0x4b,
        0x09, 0x00, 0x00, 0x90, 0xa8, 0xda, 0x68, 0xf8,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x38, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x3c, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_EG_MATCH(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_EG_MATCH.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a97f4eb7      ldp     x23, x19, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _PyEval_CheckExceptStarTypeValid
    // c: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 10: aa1603e0      mov     x0, x22
    // 14: 910043fd      add     x29, sp, #0x10
    // 18: f9002295      str     x21, [x20, #0x40]
    // 1c: f9400108      ldr     x8, [x8]
    // 000000000000001c:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_CheckExceptStarTypeValid
    // 20: aa1303e1      mov     x1, x19
    // 24: d63f0100      blr     x8
    // 28: f9402295      ldr     x21, [x20, #0x40]
    // 2c: f900229f      str     xzr, [x20, #0x40]
    // 30: 37f80620      tbnz    w0, #0x1f, 0xf4 <_JIT_ENTRY+0xf4>
    // 34: a9007fff      stp     xzr, xzr, [sp]
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _PyEval_ExceptionGroupMatch
    // 3c: 910023e3      add     x3, sp, #0x8
    // 40: f9002295      str     x21, [x20, #0x40]
    // 44: 910003e4      mov     x4, sp
    // 48: aa1403e0      mov     x0, x20
    // 4c: f9400108      ldr     x8, [x8]
    // 000000000000004c:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_ExceptionGroupMatch
    // 50: aa1703e1      mov     x1, x23
    // 54: aa1303e2      mov     x2, x19
    // 58: d63f0100      blr     x8
    // 5c: f9402295      ldr     x21, [x20, #0x40]
    // 60: f900229f      str     xzr, [x20, #0x40]
    // 64: 2a0003f8      mov     w24, w0
    // 68: b94002e8      ldr     w8, [x23]
    // 6c: 37f80108      tbnz    w8, #0x1f, 0x8c <_JIT_ENTRY+0x8c>
    // 70: 71000508      subs    w8, w8, #0x1
    // 74: b90002e8      str     w8, [x23]
    // 78: 540000a1      b.ne    0x8c <_JIT_ENTRY+0x8c>
    // 7c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 80: aa1703e0      mov     x0, x23
    // 84: f9400108      ldr     x8, [x8]
    // 0000000000000084:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 88: d63f0100      blr     x8
    // 8c: b9400268      ldr     w8, [x19]
    // 90: 37f80088      tbnz    w8, #0x1f, 0xa0 <_JIT_ENTRY+0xa0>
    // 94: 71000508      subs    w8, w8, #0x1
    // 98: b9000268      str     w8, [x19]
    // 9c: 54000500      b.eq    0x13c <_JIT_ENTRY+0x13c>
    // a0: 37f80478      tbnz    w24, #0x1f, 0x12c <_JIT_ENTRY+0x12c>
    // a4: f94007e0      ldr     x0, [sp, #0x8]
    // a8: b4000420      cbz     x0, 0x12c <_JIT_ENTRY+0x12c>
    // ac: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000ac:  R_AARCH64_ADR_GOT_PAGE       _Py_NoneStruct
    // b0: f9400108      ldr     x8, [x8]
    // 00000000000000b0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_NoneStruct
    // b4: eb08001f      cmp     x0, x8
    // b8: 54000140      b.eq    0xe0 <_JIT_ENTRY+0xe0>
    // bc: d10042a8      sub     x8, x21, #0x10
    // c0: f9002288      str     x8, [x20, #0x40]
    // c4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c4:  R_AARCH64_ADR_GOT_PAGE       PyErr_SetHandledException
    // c8: f9400108      ldr     x8, [x8]
    // 00000000000000c8:  R_AARCH64_LD64_GOT_LO12_NC   PyErr_SetHandledException
    // cc: d63f0100      blr     x8
    // d0: f9402289      ldr     x9, [x20, #0x40]
    // d4: f94007e8      ldr     x8, [sp, #0x8]
    // d8: f900229f      str     xzr, [x20, #0x40]
    // dc: 91004135      add     x21, x9, #0x10
    // e0: f94003e9      ldr     x9, [sp]
    // e4: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // e8: a93f22a9      stp     x9, x8, [x21, #-0x10]
    // ec: 910083ff      add     sp, sp, #0x20
    // f0: 14000000      b       0xf0 <_JIT_ENTRY+0xf0>
    // 00000000000000f0:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // f4: b94002e8      ldr     w8, [x23]
    // f8: 37f80108      tbnz    w8, #0x1f, 0x118 <_JIT_ENTRY+0x118>
    // fc: 71000508      subs    w8, w8, #0x1
    // 100: b90002e8      str     w8, [x23]
    // 104: 540000a1      b.ne    0x118 <_JIT_ENTRY+0x118>
    // 108: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000108:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 10c: aa1703e0      mov     x0, x23
    // 110: f9400108      ldr     x8, [x8]
    // 0000000000000110:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 114: d63f0100      blr     x8
    // 118: b9400268      ldr     w8, [x19]
    // 11c: 37f80088      tbnz    w8, #0x1f, 0x12c <_JIT_ENTRY+0x12c>
    // 120: 71000508      subs    w8, w8, #0x1
    // 124: b9000268      str     w8, [x19]
    // 128: 54000160      b.eq    0x154 <_JIT_ENTRY+0x154>
    // 12c: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 130: d10042b5      sub     x21, x21, #0x10
    // 134: 910083ff      add     sp, sp, #0x20
    // 138: 14000000      b       0x138 <_JIT_ENTRY+0x138>
    // 0000000000000138:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 13c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000013c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 140: aa1303e0      mov     x0, x19
    // 144: f9400108      ldr     x8, [x8]
    // 0000000000000144:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 148: d63f0100      blr     x8
    // 14c: 36fffad8      tbz     w24, #0x1f, 0xa4 <_JIT_ENTRY+0xa4>
    // 150: 17fffff7      b       0x12c <_JIT_ENTRY+0x12c>
    // 154: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000154:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 158: aa1303e0      mov     x0, x19
    // 15c: f9400108      ldr     x8, [x8]
    // 000000000000015c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 160: d63f0100      blr     x8
    // 164: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 168: d10042b5      sub     x21, x21, #0x10
    // 16c: 910083ff      add     sp, sp, #0x20
    // 170: 14000000      b       0x170 <_JIT_ENTRY+0x170>
    // 0000000000000170:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 174: 00 00 00 00
    const unsigned char code_body[376] = {
        0xff, 0x83, 0x00, 0xd1, 0xb7, 0x4e, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x7b, 0x01, 0xa9,
        0xe0, 0x03, 0x16, 0xaa, 0xfd, 0x43, 0x00, 0x91,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x20, 0x06, 0xf8, 0x37, 0xff, 0x7f, 0x00, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xe3, 0x23, 0x00, 0x91,
        0x95, 0x22, 0x00, 0xf9, 0xe4, 0x03, 0x00, 0x91,
        0xe0, 0x03, 0x14, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x17, 0xaa, 0xe2, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf8, 0x03, 0x00, 0x2a,
        0xe8, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0x00, 0x05, 0x00, 0x54,
        0x78, 0x04, 0xf8, 0x37, 0xe0, 0x07, 0x40, 0xf9,
        0x20, 0x04, 0x00, 0xb4, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x1f, 0x00, 0x08, 0xeb,
        0x40, 0x01, 0x00, 0x54, 0xa8, 0x42, 0x00, 0xd1,
        0x88, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x89, 0x22, 0x40, 0xf9, 0xe8, 0x07, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x35, 0x41, 0x00, 0x91,
        0xe9, 0x03, 0x40, 0xf9, 0xfd, 0x7b, 0x41, 0xa9,
        0xa9, 0x22, 0x3f, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x60, 0x01, 0x00, 0x54, 0xfd, 0x7b, 0x41, 0xa9,
        0xb5, 0x42, 0x00, 0xd1, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xd8, 0xfa, 0xff, 0x36,
        0xf7, 0xff, 0xff, 0x17, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xfd, 0x7b, 0x41, 0xa9,
        0xb5, 0x42, 0x00, 0xd1, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyEval_CheckExceptStarTypeValid+0x0
    // 8: &_PyEval_ExceptionGroupMatch+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: &_Py_NoneStruct+0x0
    // 20: &PyErr_SetHandledException+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_CheckExceptStarTypeValid);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_ExceptionGroupMatch);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x20, (uintptr_t)&PyErr_SetHandledException);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x7c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x84, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xac, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0xc4, (uintptr_t)data + 0x20);
    patch_aarch64_26r(code + 0xf0, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x108, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x110, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x138, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0x13c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x144, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x154, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x15c, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x170, state->instruction_starts[instruction->error_target]);
}

void
emit__CHECK_EXC_MATCH(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_EXC_MATCH.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: a97f4eb7      ldp     x23, x19, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _PyEval_CheckExceptTypeValid
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: aa1603e0      mov     x0, x22
    // 14: 910003fd      mov     x29, sp
    // 18: f9400108      ldr     x8, [x8]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_CheckExceptTypeValid
    // 1c: aa1303e1      mov     x1, x19
    // 20: d63f0100      blr     x8
    // 24: f9402295      ldr     x21, [x20, #0x40]
    // 28: f900229f      str     xzr, [x20, #0x40]
    // 2c: 37f803a0      tbnz    w0, #0x1f, 0xa0 <_JIT_ENTRY+0xa0>
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  R_AARCH64_ADR_GOT_PAGE       PyErr_GivenExceptionMatches
    // 38: aa1703e0      mov     x0, x23
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  R_AARCH64_LD64_GOT_LO12_NC   PyErr_GivenExceptionMatches
    // 40: aa1303e1      mov     x1, x19
    // 44: d63f0100      blr     x8
    // 48: f9402295      ldr     x21, [x20, #0x40]
    // 4c: f900229f      str     xzr, [x20, #0x40]
    // 50: b9400268      ldr     w8, [x19]
    // 54: 37f80148      tbnz    w8, #0x1f, 0x7c <_JIT_ENTRY+0x7c>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b9000268      str     w8, [x19]
    // 60: 540000e1      b.ne    0x7c <_JIT_ENTRY+0x7c>
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 68: 2a0003f7      mov     w23, w0
    // 6c: aa1303e0      mov     x0, x19
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: 2a1703e0      mov     w0, w23
    // 7c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 80: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // 84: 7100001f      cmp     w0, #0x0
    // 88: f9400108      ldr     x8, [x8]
    // 0000000000000088:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // 8c: f9400129      ldr     x9, [x9]
    // 000000000000008c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // 90: 9a880128      csel    x8, x9, x8, eq
    // 94: f81f82a8      stur    x8, [x21, #-0x8]
    // 98: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 9c: 14000000      b       0x9c <_JIT_ENTRY+0x9c>
    // 000000000000009c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // a0: b9400268      ldr     w8, [x19]
    // a4: 37f80088      tbnz    w8, #0x1f, 0xb4 <_JIT_ENTRY+0xb4>
    // a8: 71000508      subs    w8, w8, #0x1
    // ac: b9000268      str     w8, [x19]
    // b0: 54000080      b.eq    0xc0 <_JIT_ENTRY+0xc0>
    // b4: d10022b5      sub     x21, x21, #0x8
    // b8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // bc: 14000000      b       0xbc <_JIT_ENTRY+0xbc>
    // 00000000000000bc:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // c0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c0:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // c4: aa1303e0      mov     x0, x19
    // c8: f9400108      ldr     x8, [x8]
    // 00000000000000c8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // cc: d63f0100      blr     x8
    // d0: d10022b5      sub     x21, x21, #0x8
    // d4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d8: 14000000      b       0xd8 <_JIT_ENTRY+0xd8>
    // 00000000000000d8:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // dc: 00 00 00 00
    const unsigned char code_body[224] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb7, 0x4e, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xa0, 0x03, 0xf8, 0x37,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x48, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xe1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xf7, 0x03, 0x00, 0x2a, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x17, 0x2a, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0x1f, 0x00, 0x00, 0x71,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x01, 0x88, 0x9a, 0xa8, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x80, 0x00, 0x00, 0x54, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyEval_CheckExceptTypeValid+0x0
    // 8: &PyErr_GivenExceptionMatches+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: &_Py_TrueStruct+0x0
    // 20: &_Py_FalseStruct+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_CheckExceptTypeValid);
    patch_64(data + 0x8, (uintptr_t)&PyErr_GivenExceptionMatches);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x20, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x3c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x7c, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x80, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x88, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x8c, (uintptr_t)data + 0x20);
    patch_aarch64_26r(code + 0x9c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xbc, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0xc0, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xc8, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xd8, state->instruction_starts[instruction->error_target]);
}

void
emit__CHECK_FUNCTION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_FUNCTION.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400a88      ldr     x8, [x20, #0x10]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 8: b9409108      ldr     w8, [x8, #0x90]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 10: 6b09011f      cmp     w8, w9
    // 14: 54000041      b.ne    0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[32] = {
        0x88, 0x0a, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x91, 0x40, 0xb9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0x6b, 0x41, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x1c, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_FUNCTION_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_FUNCTION_EXACT_ARGS.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: 12800028      mov     w8, #-0x2               // =-2
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // c: 12003d29      and     w9, w9, #0xffff
    // 10: 4b090108      sub     w8, w8, w9
    // 14: 2a2903ea      mvn     w10, w9
    // 18: f868daa8      ldr     x8, [x21, w8, sxtw #3]
    // 1c: f86adaaa      ldr     x10, [x21, w10, sxtw #3]
    // 20: f9401908      ldr     x8, [x8, #0x30]
    // 24: f100015f      cmp     x10, #0x0
    // 28: 1a890529      cinc    w9, w9, ne
    // 2c: b9403508      ldr     w8, [x8, #0x34]
    // 30: 6b09011f      cmp     w8, w9
    // 34: 54000041      b.ne    0x3c <_JIT_ENTRY+0x3c>
    // 38: 14000000      b       0x38 <_JIT_ENTRY+0x38>
    // 0000000000000038:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 3c: 14000000      b       0x3c <_JIT_ENTRY+0x3c>
    // 000000000000003c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[64] = {
        0x09, 0x00, 0x00, 0x90, 0x28, 0x00, 0x80, 0x12,
        0x29, 0x01, 0x40, 0xf9, 0x29, 0x3d, 0x00, 0x12,
        0x08, 0x01, 0x09, 0x4b, 0xea, 0x03, 0x29, 0x2a,
        0xa8, 0xda, 0x68, 0xf8, 0xaa, 0xda, 0x6a, 0xf8,
        0x08, 0x19, 0x40, 0xf9, 0x5f, 0x01, 0x00, 0xf1,
        0x29, 0x05, 0x89, 0x1a, 0x08, 0x35, 0x40, 0xb9,
        0x1f, 0x01, 0x09, 0x6b, 0x41, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x3c, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_FUNCTION_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_FUNCTION_VERSION.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: 92800028      mov     x8, #-0x2               // =-2
    // 8: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyFunction_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 10: cb292108      sub     x8, x8, w9, uxth
    // 14: f8687aa8      ldr     x8, [x21, x8, lsl #3]
    // 18: f9400509      ldr     x9, [x8, #0x8]
    // 1c: f940014a      ldr     x10, [x10]
    // 000000000000001c:  R_AARCH64_LD64_GOT_LO12_NC   PyFunction_Type
    // 20: eb0a013f      cmp     x9, x10
    // 24: 540000e1      b.ne    0x40 <_JIT_ENTRY+0x40>
    // 28: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 2c: b9409108      ldr     w8, [x8, #0x90]
    // 30: f9400129      ldr     x9, [x9]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 34: 6b09011f      cmp     w8, w9
    // 38: 54000041      b.ne    0x40 <_JIT_ENTRY+0x40>
    // 3c: 14000000      b       0x3c <_JIT_ENTRY+0x3c>
    // 000000000000003c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 40: 14000000      b       0x40 <_JIT_ENTRY+0x40>
    // 0000000000000040:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 44: 00 00 00 00
    const unsigned char code_body[72] = {
        0x09, 0x00, 0x00, 0x90, 0x28, 0x00, 0x80, 0x92,
        0x0a, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x21, 0x29, 0xcb, 0xa8, 0x7a, 0x68, 0xf8,
        0x09, 0x05, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0xe1, 0x00, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x91, 0x40, 0xb9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyFunction_Type+0x0
    // 10: OPERAND0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x3c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x40, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_FUNCTION_VERSION_INLINE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_FUNCTION_VERSION_INLINE.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND1
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND1
    // c: b9409108      ldr     w8, [x8, #0x90]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 14: 6b09011f      cmp     w8, w9
    // 18: 54000041      b.ne    0x20 <_JIT_ENTRY+0x20>
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 20: 14000000      b       0x20 <_JIT_ENTRY+0x20>
    // 0000000000000020:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x91, 0x40, 0xb9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND1
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand1);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x20, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_FUNCTION_VERSION_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_FUNCTION_VERSION_KW.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: 92800048      mov     x8, #-0x3               // =-3
    // 8: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyFunction_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 10: cb292108      sub     x8, x8, w9, uxth
    // 14: f8687aa8      ldr     x8, [x21, x8, lsl #3]
    // 18: f9400509      ldr     x9, [x8, #0x8]
    // 1c: f940014a      ldr     x10, [x10]
    // 000000000000001c:  R_AARCH64_LD64_GOT_LO12_NC   PyFunction_Type
    // 20: eb0a013f      cmp     x9, x10
    // 24: 540000e1      b.ne    0x40 <_JIT_ENTRY+0x40>
    // 28: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 2c: b9409108      ldr     w8, [x8, #0x90]
    // 30: f9400129      ldr     x9, [x9]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 34: 6b09011f      cmp     w8, w9
    // 38: 54000041      b.ne    0x40 <_JIT_ENTRY+0x40>
    // 3c: 14000000      b       0x3c <_JIT_ENTRY+0x3c>
    // 000000000000003c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 40: 14000000      b       0x40 <_JIT_ENTRY+0x40>
    // 0000000000000040:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 44: 00 00 00 00
    const unsigned char code_body[72] = {
        0x09, 0x00, 0x00, 0x90, 0x48, 0x00, 0x80, 0x92,
        0x0a, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x21, 0x29, 0xcb, 0xa8, 0x7a, 0x68, 0xf8,
        0x09, 0x05, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0xe1, 0x00, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x91, 0x40, 0xb9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyFunction_Type+0x0
    // 10: OPERAND0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x3c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x40, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_IS_NOT_PY_CALLABLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_IS_NOT_PY_CALLABLE.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: 92800028      mov     x8, #-0x2               // =-2
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // c: cb292108      sub     x8, x8, w9, uxth
    // 10: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  R_AARCH64_ADR_GOT_PAGE       PyFunction_Type
    // 14: f8687aa8      ldr     x8, [x21, x8, lsl #3]
    // 18: f9400508      ldr     x8, [x8, #0x8]
    // 1c: f9400129      ldr     x9, [x9]
    // 000000000000001c:  R_AARCH64_LD64_GOT_LO12_NC   PyFunction_Type
    // 20: eb09011f      cmp     x8, x9
    // 24: 540000c0      b.eq    0x3c <_JIT_ENTRY+0x3c>
    // 28: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  R_AARCH64_ADR_GOT_PAGE       PyMethod_Type
    // 2c: f9400129      ldr     x9, [x9]
    // 000000000000002c:  R_AARCH64_LD64_GOT_LO12_NC   PyMethod_Type
    // 30: eb09011f      cmp     x8, x9
    // 34: 54000040      b.eq    0x3c <_JIT_ENTRY+0x3c>
    // 38: 14000000      b       0x38 <_JIT_ENTRY+0x38>
    // 0000000000000038:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 3c: 14000000      b       0x3c <_JIT_ENTRY+0x3c>
    // 000000000000003c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[64] = {
        0x09, 0x00, 0x00, 0x90, 0x28, 0x00, 0x80, 0x92,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x21, 0x29, 0xcb,
        0x09, 0x00, 0x00, 0x90, 0xa8, 0x7a, 0x68, 0xf8,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0xc0, 0x00, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PyFunction_Type+0x0
    // 10: &PyMethod_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&PyMethod_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x3c, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_IS_NOT_PY_CALLABLE_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_IS_NOT_PY_CALLABLE_KW.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: 92800048      mov     x8, #-0x3               // =-3
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // c: cb292108      sub     x8, x8, w9, uxth
    // 10: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  R_AARCH64_ADR_GOT_PAGE       PyFunction_Type
    // 14: f8687aa8      ldr     x8, [x21, x8, lsl #3]
    // 18: f9400508      ldr     x8, [x8, #0x8]
    // 1c: f9400129      ldr     x9, [x9]
    // 000000000000001c:  R_AARCH64_LD64_GOT_LO12_NC   PyFunction_Type
    // 20: eb09011f      cmp     x8, x9
    // 24: 540000c0      b.eq    0x3c <_JIT_ENTRY+0x3c>
    // 28: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  R_AARCH64_ADR_GOT_PAGE       PyMethod_Type
    // 2c: f9400129      ldr     x9, [x9]
    // 000000000000002c:  R_AARCH64_LD64_GOT_LO12_NC   PyMethod_Type
    // 30: eb09011f      cmp     x8, x9
    // 34: 54000040      b.eq    0x3c <_JIT_ENTRY+0x3c>
    // 38: 14000000      b       0x38 <_JIT_ENTRY+0x38>
    // 0000000000000038:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 3c: 14000000      b       0x3c <_JIT_ENTRY+0x3c>
    // 000000000000003c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[64] = {
        0x09, 0x00, 0x00, 0x90, 0x48, 0x00, 0x80, 0x92,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x21, 0x29, 0xcb,
        0x09, 0x00, 0x00, 0x90, 0xa8, 0x7a, 0x68, 0xf8,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0xc0, 0x00, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PyFunction_Type+0x0
    // 10: &PyMethod_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&PyMethod_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x3c, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_MANAGED_OBJECT_HAS_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_MANAGED_OBJECT_HAS_VALUES.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: f9401129      ldr     x9, [x9, #0x20]
    // c: 8b090108      add     x8, x8, x9
    // 10: 39400d08      ldrb    w8, [x8, #0x3]
    // 14: 34000048      cbz     w8, 0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x29, 0x11, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0x08, 0x0d, 0x40, 0x39, 0x48, 0x00, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x1c, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_METHOD_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_METHOD_VERSION.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: 12800029      mov     w9, #-0x2               // =-2
    // 8: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyMethod_Type
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 10: 12003d08      and     w8, w8, #0xffff
    // 14: 4b080129      sub     w9, w9, w8
    // 18: f869daa9      ldr     x9, [x21, w9, sxtw #3]
    // 1c: f940052a      ldr     x10, [x9, #0x8]
    // 20: f940016b      ldr     x11, [x11]
    // 0000000000000020:  R_AARCH64_LD64_GOT_LO12_NC   PyMethod_Type
    // 24: eb0b015f      cmp     x10, x11
    // 28: 540001e1      b.ne    0x64 <_JIT_ENTRY+0x64>
    // 2c: f9400929      ldr     x9, [x9, #0x10]
    // 30: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  R_AARCH64_ADR_GOT_PAGE       PyFunction_Type
    // 34: f940052a      ldr     x10, [x9, #0x8]
    // 38: f940016b      ldr     x11, [x11]
    // 0000000000000038:  R_AARCH64_LD64_GOT_LO12_NC   PyFunction_Type
    // 3c: eb0b015f      cmp     x10, x11
    // 40: 54000121      b.ne    0x64 <_JIT_ENTRY+0x64>
    // 44: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 48: b9409129      ldr     w9, [x9, #0x90]
    // 4c: f940014a      ldr     x10, [x10]
    // 000000000000004c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 50: 6b0a013f      cmp     w9, w10
    // 54: 54000081      b.ne    0x64 <_JIT_ENTRY+0x64>
    // 58: 2a2803e8      mvn     w8, w8
    // 5c: f868daa8      ldr     x8, [x21, w8, sxtw #3]
    // 60: b4000048      cbz     x8, 0x68 <_JIT_ENTRY+0x68>
    // 64: 14000000      b       0x64 <_JIT_ENTRY+0x64>
    // 0000000000000064:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 68: 14000000      b       0x68 <_JIT_ENTRY+0x68>
    // 0000000000000068:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[104] = {
        0x08, 0x00, 0x00, 0x90, 0x29, 0x00, 0x80, 0x12,
        0x0b, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x00, 0x12, 0x29, 0x01, 0x08, 0x4b,
        0xa9, 0xda, 0x69, 0xf8, 0x2a, 0x05, 0x40, 0xf9,
        0x6b, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0b, 0xeb,
        0xe1, 0x01, 0x00, 0x54, 0x29, 0x09, 0x40, 0xf9,
        0x0b, 0x00, 0x00, 0x90, 0x2a, 0x05, 0x40, 0xf9,
        0x6b, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0b, 0xeb,
        0x21, 0x01, 0x00, 0x54, 0x0a, 0x00, 0x00, 0x90,
        0x29, 0x91, 0x40, 0xb9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0x6b, 0x81, 0x00, 0x00, 0x54,
        0xe8, 0x03, 0x28, 0x2a, 0xa8, 0xda, 0x68, 0xf8,
        0x48, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    // 10: &PyFunction_Type+0x0
    // 18: OPERAND0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x18, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x30, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x38, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0x64, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_METHOD_VERSION_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_METHOD_VERSION_KW.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: 92800049      mov     x9, #-0x3               // =-3
    // 8: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyMethod_Type
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 10: 92403d08      and     x8, x8, #0xffff
    // 14: cb080129      sub     x9, x9, x8
    // 18: f8697aa9      ldr     x9, [x21, x9, lsl #3]
    // 1c: f940052a      ldr     x10, [x9, #0x8]
    // 20: f940016b      ldr     x11, [x11]
    // 0000000000000020:  R_AARCH64_LD64_GOT_LO12_NC   PyMethod_Type
    // 24: eb0b015f      cmp     x10, x11
    // 28: 54000201      b.ne    0x68 <_JIT_ENTRY+0x68>
    // 2c: f9400929      ldr     x9, [x9, #0x10]
    // 30: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  R_AARCH64_ADR_GOT_PAGE       PyFunction_Type
    // 34: f940052a      ldr     x10, [x9, #0x8]
    // 38: f940016b      ldr     x11, [x11]
    // 0000000000000038:  R_AARCH64_LD64_GOT_LO12_NC   PyFunction_Type
    // 3c: eb0b015f      cmp     x10, x11
    // 40: 54000141      b.ne    0x68 <_JIT_ENTRY+0x68>
    // 44: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 48: b9409129      ldr     w9, [x9, #0x90]
    // 4c: f940014a      ldr     x10, [x10]
    // 000000000000004c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 50: 6b0a013f      cmp     w9, w10
    // 54: 540000a1      b.ne    0x68 <_JIT_ENTRY+0x68>
    // 58: 92800029      mov     x9, #-0x2               // =-2
    // 5c: cb080128      sub     x8, x9, x8
    // 60: f8687aa8      ldr     x8, [x21, x8, lsl #3]
    // 64: b4000048      cbz     x8, 0x6c <_JIT_ENTRY+0x6c>
    // 68: 14000000      b       0x68 <_JIT_ENTRY+0x68>
    // 0000000000000068:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 6c: 14000000      b       0x6c <_JIT_ENTRY+0x6c>
    // 000000000000006c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[112] = {
        0x08, 0x00, 0x00, 0x90, 0x49, 0x00, 0x80, 0x92,
        0x0b, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x40, 0x92, 0x29, 0x01, 0x08, 0xcb,
        0xa9, 0x7a, 0x69, 0xf8, 0x2a, 0x05, 0x40, 0xf9,
        0x6b, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0b, 0xeb,
        0x01, 0x02, 0x00, 0x54, 0x29, 0x09, 0x40, 0xf9,
        0x0b, 0x00, 0x00, 0x90, 0x2a, 0x05, 0x40, 0xf9,
        0x6b, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0b, 0xeb,
        0x41, 0x01, 0x00, 0x54, 0x0a, 0x00, 0x00, 0x90,
        0x29, 0x91, 0x40, 0xb9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0x6b, 0xa1, 0x00, 0x00, 0x54,
        0x29, 0x00, 0x80, 0x92, 0x28, 0x01, 0x08, 0xcb,
        0xa8, 0x7a, 0x68, 0xf8, 0x48, 0x00, 0x00, 0xb4,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    // 10: &PyFunction_Type+0x0
    // 18: OPERAND0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x18, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x30, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x38, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0x68, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x6c, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_PEP_523(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_PEP_523.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400ac8      ldr     x8, [x22, #0x10]
    // 4: f9509508      ldr     x8, [x8, #0x2128]
    // 8: b4000048      cbz     x8, 0x10 <_JIT_ENTRY+0x10>
    // c: 14000000      b       0xc <_JIT_ENTRY+0xc>
    // 000000000000000c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 10: 14000000      b       0x10 <_JIT_ENTRY+0x10>
    // 0000000000000010:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[16] = {
        0xc8, 0x0a, 0x40, 0xf9, 0x08, 0x95, 0x50, 0xf9,
        0x48, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0xc, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_PERIODIC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_PERIODIC.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400ec8      ldr     x8, [x22, #0x18]
    // 4: f2401d1f      tst     x8, #0xff
    // 8: 540001a0      b.eq    0x3c <_JIT_ENTRY+0x3c>
    // c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  R_AARCH64_ADR_GOT_PAGE       _Py_HandlePending
    // 18: aa1603e0      mov     x0, x22
    // 1c: f9400108      ldr     x8, [x8]
    // 000000000000001c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_HandlePending
    // 20: 910003fd      mov     x29, sp
    // 24: d63f0100      blr     x8
    // 28: f9402295      ldr     x21, [x20, #0x40]
    // 2c: f900229f      str     xzr, [x20, #0x40]
    // 30: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 34: 34000040      cbz     w0, 0x3c <_JIT_ENTRY+0x3c>
    // 38: 14000000      b       0x38 <_JIT_ENTRY+0x38>
    // 0000000000000038:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 3c: 14000000      b       0x3c <_JIT_ENTRY+0x3c>
    // 000000000000003c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[64] = {
        0xc8, 0x0e, 0x40, 0xf9, 0x1f, 0x1d, 0x40, 0xf2,
        0xa0, 0x01, 0x00, 0x54, 0xfd, 0x7b, 0xbf, 0xa9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x16, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0xfd, 0x03, 0x00, 0x91, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x40, 0x00, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_HandlePending+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_HandlePending);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data);
    patch_aarch64_26r(code + 0x38, state->instruction_starts[instruction->error_target]);
    patch_aarch64_26r(code + 0x3c, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_PERIODIC_IF_NOT_YIELD_FROM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_PERIODIC_IF_NOT_YIELD_FROM.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: 37080208      tbnz    w8, #0x1, 0x48 <_JIT_ENTRY+0x48>
    // c: f9400ec8      ldr     x8, [x22, #0x18]
    // 10: f2401d1f      tst     x8, #0xff
    // 14: 540001a0      b.eq    0x48 <_JIT_ENTRY+0x48>
    // 18: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 1c: f9002295      str     x21, [x20, #0x40]
    // 20: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  R_AARCH64_ADR_GOT_PAGE       _Py_HandlePending
    // 24: aa1603e0      mov     x0, x22
    // 28: f9400108      ldr     x8, [x8]
    // 0000000000000028:  R_AARCH64_LD64_GOT_LO12_NC   _Py_HandlePending
    // 2c: 910003fd      mov     x29, sp
    // 30: d63f0100      blr     x8
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 40: 34000040      cbz     w0, 0x48 <_JIT_ENTRY+0x48>
    // 44: 14000000      b       0x44 <_JIT_ENTRY+0x44>
    // 0000000000000044:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 48: 14000000      b       0x48 <_JIT_ENTRY+0x48>
    // 0000000000000048:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[72] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x02, 0x08, 0x37, 0xc8, 0x0e, 0x40, 0xf9,
        0x1f, 0x1d, 0x40, 0xf2, 0xa0, 0x01, 0x00, 0x54,
        0xfd, 0x7b, 0xbf, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x40, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &_Py_HandlePending+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_HandlePending);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x44, state->instruction_starts[instruction->error_target]);
}

void
emit__CHECK_STACK_SPACE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_STACK_SPACE.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9407ac8      ldr     x8, [x22, #0xf0]
    // 4: b40001e8      cbz     x8, 0x40 <_JIT_ENTRY+0x40>
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // c: 9280002a      mov     x10, #-0x2              // =-2
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: cb292149      sub     x9, x10, w9, uxth
    // 18: f9407eca      ldr     x10, [x22, #0xf8]
    // 1c: f8697aa9      ldr     x9, [x21, x9, lsl #3]
    // 20: cb080148      sub     x8, x10, x8
    // 24: f9401929      ldr     x9, [x9, #0x30]
    // 28: b9804d29      ldrsw   x9, [x9, #0x4c]
    // 2c: eb880d3f      cmp     x9, x8, asr #3
    // 30: 5400008a      b.ge    0x40 <_JIT_ENTRY+0x40>
    // 34: b9402ec8      ldr     w8, [x22, #0x2c]
    // 38: 7100051f      cmp     w8, #0x1
    // 3c: 5400004c      b.gt    0x44 <_JIT_ENTRY+0x44>
    // 40: 14000000      b       0x40 <_JIT_ENTRY+0x40>
    // 0000000000000040:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 44: 14000000      b       0x44 <_JIT_ENTRY+0x44>
    // 0000000000000044:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[72] = {
        0xc8, 0x7a, 0x40, 0xf9, 0xe8, 0x01, 0x00, 0xb4,
        0x09, 0x00, 0x00, 0x90, 0x2a, 0x00, 0x80, 0x92,
        0x29, 0x01, 0x40, 0xf9, 0x49, 0x21, 0x29, 0xcb,
        0xca, 0x7e, 0x40, 0xf9, 0xa9, 0x7a, 0x69, 0xf8,
        0x48, 0x01, 0x08, 0xcb, 0x29, 0x19, 0x40, 0xf9,
        0x29, 0x4d, 0x80, 0xb9, 0x3f, 0x0d, 0x88, 0xeb,
        0x8a, 0x00, 0x00, 0x54, 0xc8, 0x2e, 0x40, 0xb9,
        0x1f, 0x05, 0x00, 0x71, 0x4c, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_26r(code + 0x40, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_STACK_SPACE_OPERAND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_STACK_SPACE_OPERAND.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9407ac8      ldr     x8, [x22, #0xf0]
    // 4: b4000168      cbz     x8, 0x30 <_JIT_ENTRY+0x30>
    // 8: f9407ec9      ldr     x9, [x22, #0xf8]
    // c: cb080128      sub     x8, x9, x8
    // 10: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 18: 9343fd08      asr     x8, x8, #3
    // 1c: eb29c11f      cmp     x8, w9, sxtw
    // 20: 5400008d      b.le    0x30 <_JIT_ENTRY+0x30>
    // 24: b9402ec8      ldr     w8, [x22, #0x2c]
    // 28: 7100051f      cmp     w8, #0x1
    // 2c: 5400004c      b.gt    0x34 <_JIT_ENTRY+0x34>
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 34: 14000000      b       0x34 <_JIT_ENTRY+0x34>
    // 0000000000000034:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[56] = {
        0xc8, 0x7a, 0x40, 0xf9, 0x68, 0x01, 0x00, 0xb4,
        0xc9, 0x7e, 0x40, 0xf9, 0x28, 0x01, 0x08, 0xcb,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0xfd, 0x43, 0x93, 0x1f, 0xc1, 0x29, 0xeb,
        0x8d, 0x00, 0x00, 0x54, 0xc8, 0x2e, 0x40, 0xb9,
        0x1f, 0x05, 0x00, 0x71, 0x4c, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_26r(code + 0x30, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_VALIDITY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_VALIDITY.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_EXECUTOR
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_EXECUTOR
    // 8: 39408908      ldrb    w8, [x8, #0x22]
    // c: 37000048      tbnz    w8, #0x0, 0x14 <_JIT_ENTRY+0x14>
    // 10: 14000000      b       0x10 <_JIT_ENTRY+0x10>
    // 0000000000000010:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 14: 14000000      b       0x14 <_JIT_ENTRY+0x14>
    // 0000000000000014:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x89, 0x40, 0x39, 0x48, 0x00, 0x00, 0x37,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: EXECUTOR
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x14, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_VALIDITY_AND_SET_IP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_VALIDITY_AND_SET_IP.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_EXECUTOR
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_EXECUTOR
    // 8: 39408908      ldrb    w8, [x8, #0x22]
    // c: 37000048      tbnz    w8, #0x0, 0x14 <_JIT_ENTRY+0x14>
    // 10: 14000000      b       0x10 <_JIT_ENTRY+0x10>
    // 0000000000000010:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 14: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 18: f9400108      ldr     x8, [x8]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 1c: f9001e88      str     x8, [x20, #0x38]
    // 20: 14000000      b       0x20 <_JIT_ENTRY+0x20>
    // 0000000000000020:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[32] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x89, 0x40, 0x39, 0x48, 0x00, 0x00, 0x37,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x88, 0x1e, 0x00, 0xf9,
    };
    // 0: EXECUTOR
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data + 0x8);
}

void
emit__COMPARE_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COMPARE_OP.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000019      adrp    x25, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyObject_RichCompare
    // c: 910003fd      mov     x29, sp
    // 10: f9400339      ldr     x25, [x25]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: a97f62b7      ldp     x23, x24, [x21, #-0x10]
    // 18: f9002295      str     x21, [x20, #0x40]
    // 1c: 53053f22      ubfx    w2, w25, #5, #11
    // 20: f9400108      ldr     x8, [x8]
    // 0000000000000020:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_RichCompare
    // 24: aa1703e0      mov     x0, x23
    // 28: aa1803e1      mov     x1, x24
    // 2c: d63f0100      blr     x8
    // 30: f9402295      ldr     x21, [x20, #0x40]
    // 34: f900229f      str     xzr, [x20, #0x40]
    // 38: aa0003f3      mov     x19, x0
    // 3c: b94002e8      ldr     w8, [x23]
    // 40: 37f80108      tbnz    w8, #0x1f, 0x60 <_JIT_ENTRY+0x60>
    // 44: 71000508      subs    w8, w8, #0x1
    // 48: b90002e8      str     w8, [x23]
    // 4c: 540000a1      b.ne    0x60 <_JIT_ENTRY+0x60>
    // 50: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 54: aa1703e0      mov     x0, x23
    // 58: f9400108      ldr     x8, [x8]
    // 0000000000000058:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 5c: d63f0100      blr     x8
    // 60: b9400308      ldr     w8, [x24]
    // 64: 37f80088      tbnz    w8, #0x1f, 0x74 <_JIT_ENTRY+0x74>
    // 68: 71000508      subs    w8, w8, #0x1
    // 6c: b9000308      str     w8, [x24]
    // 70: 540003e0      b.eq    0xec <_JIT_ENTRY+0xec>
    // 74: b4000473      cbz     x19, 0x100 <_JIT_ENTRY+0x100>
    // 78: 12003f28      and     w8, w25, #0xffff
    // 7c: 372000a8      tbnz    w8, #0x4, 0x90 <_JIT_ENTRY+0x90>
    // 80: d10042b5      sub     x21, x21, #0x10
    // 84: f80086b3      str     x19, [x21], #0x8
    // 88: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 8c: 14000000      b       0x8c <_JIT_ENTRY+0x8c>
    // 000000000000008c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 90: d10042a8      sub     x8, x21, #0x10
    // 94: aa1303e0      mov     x0, x19
    // 98: f9002288      str     x8, [x20, #0x40]
    // 9c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  R_AARCH64_ADR_GOT_PAGE       PyObject_IsTrue
    // a0: f9400108      ldr     x8, [x8]
    // 00000000000000a0:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_IsTrue
    // a4: d63f0100      blr     x8
    // a8: b9400268      ldr     w8, [x19]
    // ac: 37f80088      tbnz    w8, #0x1f, 0xbc <_JIT_ENTRY+0xbc>
    // b0: 71000508      subs    w8, w8, #0x1
    // b4: b9000268      str     w8, [x19]
    // b8: 540002a0      b.eq    0x10c <_JIT_ENTRY+0x10c>
    // bc: f9402295      ldr     x21, [x20, #0x40]
    // c0: f900229f      str     xzr, [x20, #0x40]
    // c4: 37f80200      tbnz    w0, #0x1f, 0x104 <_JIT_ENTRY+0x104>
    // c8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // cc: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // d0: 7100001f      cmp     w0, #0x0
    // d4: f9400108      ldr     x8, [x8]
    // 00000000000000d4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // d8: f9400129      ldr     x9, [x9]
    // 00000000000000d8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // dc: 9a880133      csel    x19, x9, x8, eq
    // e0: f80086b3      str     x19, [x21], #0x8
    // e4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e8: 14000000      b       0xe8 <_JIT_ENTRY+0xe8>
    // 00000000000000e8:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // ec: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000ec:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // f0: aa1803e0      mov     x0, x24
    // f4: f9400108      ldr     x8, [x8]
    // 00000000000000f4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // f8: d63f0100      blr     x8
    // fc: b5fffbf3      cbnz    x19, 0x78 <_JIT_ENTRY+0x78>
    // 100: d10042b5      sub     x21, x21, #0x10
    // 104: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 108: 14000000      b       0x108 <_JIT_ENTRY+0x108>
    // 0000000000000108:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 10c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000010c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 110: 2a0003f5      mov     w21, w0
    // 114: aa1303e0      mov     x0, x19
    // 118: f9400108      ldr     x8, [x8]
    // 0000000000000118:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 11c: d63f0100      blr     x8
    // 120: 2a1503e0      mov     w0, w21
    // 124: f9402295      ldr     x21, [x20, #0x40]
    // 128: f900229f      str     xzr, [x20, #0x40]
    // 12c: 36fffce0      tbz     w0, #0x1f, 0xc8 <_JIT_ENTRY+0xc8>
    // 130: 17fffff5      b       0x104 <_JIT_ENTRY+0x104>
    // 134: 00 00 00 00
    const unsigned char code_body[312] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x19, 0x00, 0x00, 0x90,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x39, 0x03, 0x40, 0xf9, 0xb7, 0x62, 0x7f, 0xa9,
        0x95, 0x22, 0x00, 0xf9, 0x22, 0x3f, 0x05, 0x53,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x17, 0xaa,
        0xe1, 0x03, 0x18, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf3, 0x03, 0x00, 0xaa, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x03, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xe0, 0x03, 0x00, 0x54, 0x73, 0x04, 0x00, 0xb4,
        0x28, 0x3f, 0x00, 0x12, 0xa8, 0x00, 0x20, 0x37,
        0xb5, 0x42, 0x00, 0xd1, 0xb3, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xa8, 0x42, 0x00, 0xd1, 0xe0, 0x03, 0x13, 0xaa,
        0x88, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa0, 0x02, 0x00, 0x54, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x02, 0xf8, 0x37,
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x1f, 0x00, 0x00, 0x71, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x33, 0x01, 0x88, 0x9a,
        0xb3, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xf3, 0xfb, 0xff, 0xb5,
        0xb5, 0x42, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x00, 0x2a, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x15, 0x2a, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xe0, 0xfc, 0xff, 0x36,
        0xf5, 0xff, 0xff, 0x17, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyObject_RichCompare+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: &PyObject_IsTrue+0x0
    // 20: &_Py_TrueStruct+0x0
    // 28: &_Py_FalseStruct+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_RichCompare);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)&PyObject_IsTrue);
    patch_64(data + 0x20, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x28, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x50, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x58, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x8c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x9c, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xc8, (uintptr_t)data + 0x20);
    patch_aarch64_21rx(code + 0xcc, (uintptr_t)data + 0x28);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xd8, (uintptr_t)data + 0x28);
    patch_aarch64_26r(code + 0xe8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0xec, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xf4, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x108, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0x10c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x118, (uintptr_t)data + 0x10);
}

void
emit__COMPARE_OP_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COMPARE_OP_FLOAT.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8eb7      ldr     x23, [x21, #-0x8]!
    // c: f85f82b8      ldur    x24, [x21, #-0x8]
    // 10: 910003fd      mov     x29, sp
    // 14: fd400ae9      ldr     d9, [x23, #0x10]
    // 18: b9400308      ldr     w8, [x24]
    // 1c: fd400b08      ldr     d8, [x24, #0x10]
    // 20: 37f80208      tbnz    w8, #0x1f, 0x60 <_JIT_ENTRY+0x60>
    // 24: 71000508      subs    w8, w8, #0x1
    // 28: b9000308      str     w8, [x24]
    // 2c: 540001a1      b.ne    0x60 <_JIT_ENTRY+0x60>
    // 30: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 34: f9400129      ldr     x9, [x9]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 38: f9544928      ldr     x8, [x9, #0x2890]
    // 3c: b40000a8      cbz     x8, 0x50 <_JIT_ENTRY+0x50>
    // 40: f9544d22      ldr     x2, [x9, #0x2898]
    // 44: aa1803e0      mov     x0, x24
    // 48: 52800021      mov     w1, #0x1                // =1
    // 4c: d63f0100      blr     x8
    // 50: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  R_AARCH64_ADR_GOT_PAGE       _PyFloat_ExactDealloc
    // 54: aa1803e0      mov     x0, x24
    // 58: f9400108      ldr     x8, [x8]
    // 0000000000000058:  R_AARCH64_LD64_GOT_LO12_NC   _PyFloat_ExactDealloc
    // 5c: d63f0100      blr     x8
    // 60: b94002e8      ldr     w8, [x23]
    // 64: 37f80208      tbnz    w8, #0x1f, 0xa4 <_JIT_ENTRY+0xa4>
    // 68: 71000508      subs    w8, w8, #0x1
    // 6c: b90002e8      str     w8, [x23]
    // 70: 540001a1      b.ne    0xa4 <_JIT_ENTRY+0xa4>
    // 74: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 78: f9400129      ldr     x9, [x9]
    // 0000000000000078:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 7c: f9544928      ldr     x8, [x9, #0x2890]
    // 80: b40000a8      cbz     x8, 0x94 <_JIT_ENTRY+0x94>
    // 84: f9544d22      ldr     x2, [x9, #0x2898]
    // 88: aa1703e0      mov     x0, x23
    // 8c: 52800021      mov     w1, #0x1                // =1
    // 90: d63f0100      blr     x8
    // 94: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  R_AARCH64_ADR_GOT_PAGE       _PyFloat_ExactDealloc
    // 98: aa1703e0      mov     x0, x23
    // 9c: f9400108      ldr     x8, [x8]
    // 000000000000009c:  R_AARCH64_LD64_GOT_LO12_NC   _PyFloat_ExactDealloc
    // a0: d63f0100      blr     x8
    // a4: 1e692100      fcmp    d8, d9
    // a8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a8:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // ac: f9400108      ldr     x8, [x8]
    // 00000000000000ac:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // b0: 1a9fb7e9      cset    w9, ge
    // b4: 1a9f87ea      cset    w10, ls
    // b8: 12003d08      and     w8, w8, #0xffff
    // bc: 2a090549      orr     w9, w10, w9, lsl #1
    // c0: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 00000000000000c0:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // c4: f940014a      ldr     x10, [x10]
    // 00000000000000c4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // c8: 1ac92508      lsr     w8, w8, w9
    // cc: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // d0: f9400129      ldr     x9, [x9]
    // 00000000000000d0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // d4: 7200011f      tst     w8, #0x1
    // d8: 9a8a0128      csel    x8, x9, x10, eq
    // dc: f81f0268      stur    x8, [x19, #-0x10]
    // e0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e4: 14000000      b       0xe4 <_JIT_ENTRY+0xe4>
    // 00000000000000e4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[232] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xf3, 0x03, 0x15, 0xaa,
        0xb7, 0x8e, 0x5f, 0xf8, 0xb8, 0x82, 0x5f, 0xf8,
        0xfd, 0x03, 0x00, 0x91, 0xe9, 0x0a, 0x40, 0xfd,
        0x08, 0x03, 0x40, 0xb9, 0x08, 0x0b, 0x40, 0xfd,
        0x08, 0x02, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x49, 0x54, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x4d, 0x54, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe8, 0x02, 0x40, 0xb9, 0x08, 0x02, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x49, 0x54, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x4d, 0x54, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x21, 0x69, 0x1e,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe9, 0xb7, 0x9f, 0x1a, 0xea, 0x87, 0x9f, 0x1a,
        0x08, 0x3d, 0x00, 0x12, 0x49, 0x05, 0x09, 0x2a,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x08, 0x25, 0xc9, 0x1a, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x00, 0x72,
        0x28, 0x01, 0x8a, 0x9a, 0x68, 0x02, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyRuntime+0x0
    // 8: &_PyFloat_ExactDealloc+0x0
    // 10: OPARG
    // 18: &_Py_TrueStruct+0x0
    // 20: &_Py_FalseStruct+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)&_PyFloat_ExactDealloc);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x20, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x30, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x50, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x58, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x74, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x94, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x9c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0xa8, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xc0, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0xcc, (uintptr_t)data + 0x20);
    patch_aarch64_26r(code + 0xe4, (uintptr_t)code + sizeof(code_body));
}

void
emit__COMPARE_OP_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COMPARE_OP_INT.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503f7      mov     x23, x21
    // 4: f85f8eb3      ldr     x19, [x21, #-0x8]!
    // 8: f85f82b8      ldur    x24, [x21, #-0x8]
    // c: f9400b19      ldr     x25, [x24, #0x10]
    // 10: f100433f      cmp     x25, #0x10
    // 14: 54000082      b.hs    0x24 <_JIT_ENTRY+0x24>
    // 18: f9400a7a      ldr     x26, [x19, #0x10]
    // 1c: f100435f      cmp     x26, #0x10
    // 20: 54000063      b.lo    0x2c <_JIT_ENTRY+0x2c>
    // 24: aa1703f5      mov     x21, x23
    // 28: 14000000      b       0x28 <_JIT_ENTRY+0x28>
    // 0000000000000028:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 2c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 30: b9400308      ldr     w8, [x24]
    // 34: b9401b1c      ldr     w28, [x24, #0x18]
    // 38: 910003fd      mov     x29, sp
    // 3c: b9401a7b      ldr     w27, [x19, #0x18]
    // 40: 37f80208      tbnz    w8, #0x1f, 0x80 <_JIT_ENTRY+0x80>
    // 44: 71000508      subs    w8, w8, #0x1
    // 48: b9000308      str     w8, [x24]
    // 4c: 540001a1      b.ne    0x80 <_JIT_ENTRY+0x80>
    // 50: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 54: f9400129      ldr     x9, [x9]
    // 0000000000000054:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 58: f9544928      ldr     x8, [x9, #0x2890]
    // 5c: b40000a8      cbz     x8, 0x70 <_JIT_ENTRY+0x70>
    // 60: f9544d22      ldr     x2, [x9, #0x2898]
    // 64: aa1803e0      mov     x0, x24
    // 68: 52800021      mov     w1, #0x1                // =1
    // 6c: d63f0100      blr     x8
    // 70: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  R_AARCH64_ADR_GOT_PAGE       _PyLong_ExactDealloc
    // 74: aa1803e0      mov     x0, x24
    // 78: f9400108      ldr     x8, [x8]
    // 0000000000000078:  R_AARCH64_LD64_GOT_LO12_NC   _PyLong_ExactDealloc
    // 7c: d63f0100      blr     x8
    // 80: b9400268      ldr     w8, [x19]
    // 84: 37f80208      tbnz    w8, #0x1f, 0xc4 <_JIT_ENTRY+0xc4>
    // 88: 71000508      subs    w8, w8, #0x1
    // 8c: b9000268      str     w8, [x19]
    // 90: 540001a1      b.ne    0xc4 <_JIT_ENTRY+0xc4>
    // 94: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 98: f9400129      ldr     x9, [x9]
    // 0000000000000098:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 9c: f9544928      ldr     x8, [x9, #0x2890]
    // a0: b40000a8      cbz     x8, 0xb4 <_JIT_ENTRY+0xb4>
    // a4: f9544d22      ldr     x2, [x9, #0x2898]
    // a8: aa1303e0      mov     x0, x19
    // ac: 52800021      mov     w1, #0x1                // =1
    // b0: d63f0100      blr     x8
    // b4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  R_AARCH64_ADR_GOT_PAGE       _PyLong_ExactDealloc
    // b8: aa1303e0      mov     x0, x19
    // bc: f9400108      ldr     x8, [x8]
    // 00000000000000bc:  R_AARCH64_LD64_GOT_LO12_NC   _PyLong_ExactDealloc
    // c0: d63f0100      blr     x8
    // c4: 92400728      and     x8, x25, #0x3
    // c8: 92400749      and     x9, x26, #0x3
    // cc: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // d0: 9ba8f388      umsubl  x8, w28, w8, x28
    // d4: f940014a      ldr     x10, [x10]
    // 00000000000000d4:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // d8: 9ba9ef69      umsubl  x9, w27, w9, x27
    // dc: eb09011f      cmp     x8, x9
    // e0: 1a9fb7e8      cset    w8, ge
    // e4: 1a9fc7e9      cset    w9, le
    // e8: 2a080528      orr     w8, w9, w8, lsl #1
    // ec: 12003d49      and     w9, w10, #0xffff
    // f0: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 00000000000000f0:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // f4: f940014a      ldr     x10, [x10]
    // 00000000000000f4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // f8: 1ac82528      lsr     w8, w9, w8
    // fc: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000fc:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // 100: f9400129      ldr     x9, [x9]
    // 0000000000000100:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // 104: 7200011f      tst     w8, #0x1
    // 108: 9a8a0128      csel    x8, x9, x10, eq
    // 10c: f81f02e8      stur    x8, [x23, #-0x10]
    // 110: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 114: 14000000      b       0x114 <_JIT_ENTRY+0x114>
    // 0000000000000114:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[280] = {
        0xf7, 0x03, 0x15, 0xaa, 0xb3, 0x8e, 0x5f, 0xf8,
        0xb8, 0x82, 0x5f, 0xf8, 0x19, 0x0b, 0x40, 0xf9,
        0x3f, 0x43, 0x00, 0xf1, 0x82, 0x00, 0x00, 0x54,
        0x7a, 0x0a, 0x40, 0xf9, 0x5f, 0x43, 0x00, 0xf1,
        0x63, 0x00, 0x00, 0x54, 0xf5, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x03, 0x40, 0xb9, 0x1c, 0x1b, 0x40, 0xb9,
        0xfd, 0x03, 0x00, 0x91, 0x7b, 0x1a, 0x40, 0xb9,
        0x08, 0x02, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x49, 0x54, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x4d, 0x54, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x40, 0xb9, 0x08, 0x02, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa1, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x49, 0x54, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x4d, 0x54, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x28, 0x07, 0x40, 0x92,
        0x49, 0x07, 0x40, 0x92, 0x0a, 0x00, 0x00, 0x90,
        0x88, 0xf3, 0xa8, 0x9b, 0x4a, 0x01, 0x40, 0xf9,
        0x69, 0xef, 0xa9, 0x9b, 0x1f, 0x01, 0x09, 0xeb,
        0xe8, 0xb7, 0x9f, 0x1a, 0xe9, 0xc7, 0x9f, 0x1a,
        0x28, 0x05, 0x08, 0x2a, 0x49, 0x3d, 0x00, 0x12,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x28, 0x25, 0xc8, 0x1a, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x00, 0x72,
        0x28, 0x01, 0x8a, 0x9a, 0xe8, 0x02, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyRuntime+0x0
    // 8: &_PyLong_ExactDealloc+0x0
    // 10: OPARG
    // 18: &_Py_TrueStruct+0x0
    // 20: &_Py_FalseStruct+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x20, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x28, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x50, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x70, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x78, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x94, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xb4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xbc, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xcc, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xf0, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0xfc, (uintptr_t)data + 0x20);
    patch_aarch64_26r(code + 0x114, (uintptr_t)code + sizeof(code_body));
}

void
emit__COMPARE_OP_STR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COMPARE_OP_STR.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8eb7      ldr     x23, [x21, #-0x8]!
    // c: f85f82b9      ldur    x25, [x21, #-0x8]
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  R_AARCH64_ADR_GOT_PAGE       _PyUnicode_Equal
    // 14: 910003fd      mov     x29, sp
    // 18: f9400108      ldr     x8, [x8]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _PyUnicode_Equal
    // 1c: aa1703e1      mov     x1, x23
    // 20: aa1903e0      mov     x0, x25
    // 24: d63f0100      blr     x8
    // 28: b9400328      ldr     w8, [x25]
    // 2c: 2a0003f8      mov     w24, w0
    // 30: 37f80208      tbnz    w8, #0x1f, 0x70 <_JIT_ENTRY+0x70>
    // 34: 71000508      subs    w8, w8, #0x1
    // 38: b9000328      str     w8, [x25]
    // 3c: 540001a1      b.ne    0x70 <_JIT_ENTRY+0x70>
    // 40: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 44: f9400129      ldr     x9, [x9]
    // 0000000000000044:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 48: f9544928      ldr     x8, [x9, #0x2890]
    // 4c: b40000a8      cbz     x8, 0x60 <_JIT_ENTRY+0x60>
    // 50: f9544d22      ldr     x2, [x9, #0x2898]
    // 54: aa1903e0      mov     x0, x25
    // 58: 52800021      mov     w1, #0x1                // =1
    // 5c: d63f0100      blr     x8
    // 60: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  R_AARCH64_ADR_GOT_PAGE       _PyUnicode_ExactDealloc
    // 64: aa1903e0      mov     x0, x25
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  R_AARCH64_LD64_GOT_LO12_NC   _PyUnicode_ExactDealloc
    // 6c: d63f0100      blr     x8
    // 70: b94002e8      ldr     w8, [x23]
    // 74: 37f80208      tbnz    w8, #0x1f, 0xb4 <_JIT_ENTRY+0xb4>
    // 78: 71000508      subs    w8, w8, #0x1
    // 7c: b90002e8      str     w8, [x23]
    // 80: 540001a1      b.ne    0xb4 <_JIT_ENTRY+0xb4>
    // 84: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 88: f9400129      ldr     x9, [x9]
    // 0000000000000088:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 8c: f9544928      ldr     x8, [x9, #0x2890]
    // 90: b40000a8      cbz     x8, 0xa4 <_JIT_ENTRY+0xa4>
    // 94: f9544d22      ldr     x2, [x9, #0x2898]
    // 98: aa1703e0      mov     x0, x23
    // 9c: 52800021      mov     w1, #0x1                // =1
    // a0: d63f0100      blr     x8
    // a4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  R_AARCH64_ADR_GOT_PAGE       _PyUnicode_ExactDealloc
    // a8: aa1703e0      mov     x0, x23
    // ac: f9400108      ldr     x8, [x8]
    // 00000000000000ac:  R_AARCH64_LD64_GOT_LO12_NC   _PyUnicode_ExactDealloc
    // b0: d63f0100      blr     x8
    // b4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // b8: 11001f09      add     w9, w24, #0x7
    // bc: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 00000000000000bc:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // c0: f9400108      ldr     x8, [x8]
    // 00000000000000c0:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // c4: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 00000000000000c4:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // c8: f940014a      ldr     x10, [x10]
    // 00000000000000c8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // cc: f940016b      ldr     x11, [x11]
    // 00000000000000cc:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // d0: 0a090108      and     w8, w8, w9
    // d4: 72003d1f      tst     w8, #0xffff
    // d8: 9a8a0168      csel    x8, x11, x10, eq
    // dc: f81f0268      stur    x8, [x19, #-0x10]
    // e0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e4: 14000000      b       0xe4 <_JIT_ENTRY+0xe4>
    // 00000000000000e4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[232] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xf3, 0x03, 0x15, 0xaa,
        0xb7, 0x8e, 0x5f, 0xf8, 0xb9, 0x82, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0xe1, 0x03, 0x17, 0xaa,
        0xe0, 0x03, 0x19, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x28, 0x03, 0x40, 0xb9, 0xf8, 0x03, 0x00, 0x2a,
        0x08, 0x02, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x28, 0x03, 0x00, 0xb9, 0xa1, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x49, 0x54, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x4d, 0x54, 0xf9, 0xe0, 0x03, 0x19, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x19, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe8, 0x02, 0x40, 0xb9, 0x08, 0x02, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x49, 0x54, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x4d, 0x54, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x1f, 0x00, 0x11, 0x0a, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x0b, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x6b, 0x01, 0x40, 0xf9,
        0x08, 0x01, 0x09, 0x0a, 0x1f, 0x3d, 0x00, 0x72,
        0x68, 0x01, 0x8a, 0x9a, 0x68, 0x02, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyUnicode_Equal+0x0
    // 8: &_PyRuntime+0x0
    // 10: &_PyUnicode_ExactDealloc+0x0
    // 18: OPARG
    // 20: &_Py_TrueStruct+0x0
    // 28: &_Py_FalseStruct+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyUnicode_Equal);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_64(data + 0x18, instruction->oparg);
    patch_64(data + 0x20, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x28, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x68, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xa4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xac, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xb4, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xbc, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xc0, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xc4, (uintptr_t)data + 0x28);
    patch_aarch64_12x(code + 0xc8, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xcc, (uintptr_t)data + 0x28);
    patch_aarch64_26r(code + 0xe4, (uintptr_t)code + sizeof(code_body));
}

void
emit__CONTAINS_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CONTAINS_OP.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: a97f4eb7      ldp     x23, x19, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PySequence_Contains
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: 910003fd      mov     x29, sp
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   PySequence_Contains
    // 18: aa1303e0      mov     x0, x19
    // 1c: aa1703e1      mov     x1, x23
    // 20: d63f0100      blr     x8
    // 24: f9402298      ldr     x24, [x20, #0x40]
    // 28: f900229f      str     xzr, [x20, #0x40]
    // 2c: 2a0003f5      mov     w21, w0
    // 30: b94002e8      ldr     w8, [x23]
    // 34: 37f80108      tbnz    w8, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 38: 71000508      subs    w8, w8, #0x1
    // 3c: b90002e8      str     w8, [x23]
    // 40: 540000a1      b.ne    0x54 <_JIT_ENTRY+0x54>
    // 44: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 48: aa1703e0      mov     x0, x23
    // 4c: f9400108      ldr     x8, [x8]
    // 000000000000004c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 50: d63f0100      blr     x8
    // 54: b9400268      ldr     w8, [x19]
    // 58: 37f80088      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 5c: 71000508      subs    w8, w8, #0x1
    // 60: b9000268      str     w8, [x19]
    // 64: 540001c0      b.eq    0x9c <_JIT_ENTRY+0x9c>
    // 68: 37f80255      tbnz    w21, #0x1f, 0xb0 <_JIT_ENTRY+0xb0>
    // 6c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 70: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 74: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // 78: f9400108      ldr     x8, [x8]
    // 0000000000000078:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 7c: f9400129      ldr     x9, [x9]
    // 000000000000007c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // 80: f940014a      ldr     x10, [x10]
    // 0000000000000080:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // 84: 6b2822bf      cmp     w21, w8, uxth
    // 88: d1002315      sub     x21, x24, #0x8
    // 8c: 9a890148      csel    x8, x10, x9, eq
    // 90: f81f0308      stur    x8, [x24, #-0x10]
    // 94: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 98: 14000000      b       0x98 <_JIT_ENTRY+0x98>
    // 0000000000000098:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 9c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // a0: aa1303e0      mov     x0, x19
    // a4: f9400108      ldr     x8, [x8]
    // 00000000000000a4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // a8: d63f0100      blr     x8
    // ac: 36fffe15      tbz     w21, #0x1f, 0x6c <_JIT_ENTRY+0x6c>
    // b0: d1004315      sub     x21, x24, #0x10
    // b4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b8: 14000000      b       0xb8 <_JIT_ENTRY+0xb8>
    // 00000000000000b8:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // bc: 00 00 00 00
    const unsigned char code_body[192] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb7, 0x4e, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0x95, 0x22, 0x00, 0xf9,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0xe1, 0x03, 0x17, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x98, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf5, 0x03, 0x00, 0x2a,
        0xe8, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xc0, 0x01, 0x00, 0x54,
        0x55, 0x02, 0xf8, 0x37, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0x0a, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x4a, 0x01, 0x40, 0xf9, 0xbf, 0x22, 0x28, 0x6b,
        0x15, 0x23, 0x00, 0xd1, 0x48, 0x01, 0x89, 0x9a,
        0x08, 0x03, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x15, 0xfe, 0xff, 0x36,
        0x15, 0x43, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PySequence_Contains+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: OPARG
    // 18: &_Py_TrueStruct+0x0
    // 20: &_Py_FalseStruct+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySequence_Contains);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x20, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x6c, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x70, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x74, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x78, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x7c, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x80, (uintptr_t)data + 0x20);
    patch_aarch64_26r(code + 0x98, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x9c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xa4, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0xb8, state->instruction_starts[instruction->error_target]);
}

void
emit__CONTAINS_OP_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CONTAINS_OP_DICT.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyDict_Type
    // c: 910003fd      mov     x29, sp
    // 10: f9400668      ldr     x8, [x19, #0x8]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   PyDict_Type
    // 18: eb09011f      cmp     x8, x9
    // 1c: 54000060      b.eq    0x28 <_JIT_ENTRY+0x28>
    // 20: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 24: 14000000      b       0x24 <_JIT_ENTRY+0x24>
    // 0000000000000024:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 28: f85f02b7      ldur    x23, [x21, #-0x10]
    // 2c: f9002295      str     x21, [x20, #0x40]
    // 30: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  R_AARCH64_ADR_GOT_PAGE       PyDict_Contains
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   PyDict_Contains
    // 38: aa1303e0      mov     x0, x19
    // 3c: aa1703e1      mov     x1, x23
    // 40: d63f0100      blr     x8
    // 44: f9402298      ldr     x24, [x20, #0x40]
    // 48: f900229f      str     xzr, [x20, #0x40]
    // 4c: 2a0003f5      mov     w21, w0
    // 50: b94002e8      ldr     w8, [x23]
    // 54: 37f80108      tbnz    w8, #0x1f, 0x74 <_JIT_ENTRY+0x74>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b90002e8      str     w8, [x23]
    // 60: 540000a1      b.ne    0x74 <_JIT_ENTRY+0x74>
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 68: aa1703e0      mov     x0, x23
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 70: d63f0100      blr     x8
    // 74: b9400268      ldr     w8, [x19]
    // 78: 37f80088      tbnz    w8, #0x1f, 0x88 <_JIT_ENTRY+0x88>
    // 7c: 71000508      subs    w8, w8, #0x1
    // 80: b9000268      str     w8, [x19]
    // 84: 540001c0      b.eq    0xbc <_JIT_ENTRY+0xbc>
    // 88: 37f80255      tbnz    w21, #0x1f, 0xd0 <_JIT_ENTRY+0xd0>
    // 8c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 90: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 94: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // 98: f9400108      ldr     x8, [x8]
    // 0000000000000098:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 9c: f9400129      ldr     x9, [x9]
    // 000000000000009c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // a0: f940014a      ldr     x10, [x10]
    // 00000000000000a0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // a4: 6b2822bf      cmp     w21, w8, uxth
    // a8: d1002315      sub     x21, x24, #0x8
    // ac: 9a890148      csel    x8, x10, x9, eq
    // b0: f81f0308      stur    x8, [x24, #-0x10]
    // b4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b8: 14000000      b       0xb8 <_JIT_ENTRY+0xb8>
    // 00000000000000b8:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // bc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000bc:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // c0: aa1303e0      mov     x0, x19
    // c4: f9400108      ldr     x8, [x8]
    // 00000000000000c4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // c8: d63f0100      blr     x8
    // cc: 36fffe15      tbz     w21, #0x1f, 0x8c <_JIT_ENTRY+0x8c>
    // d0: d1004315      sub     x21, x24, #0x10
    // d4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d8: 14000000      b       0xd8 <_JIT_ENTRY+0xd8>
    // 00000000000000d8:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // dc: 00 00 00 00
    const unsigned char code_body[224] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb3, 0x82, 0x5f, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x68, 0x06, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x60, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xb7, 0x02, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0xe1, 0x03, 0x17, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x98, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf5, 0x03, 0x00, 0x2a,
        0xe8, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xc0, 0x01, 0x00, 0x54,
        0x55, 0x02, 0xf8, 0x37, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0x0a, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x4a, 0x01, 0x40, 0xf9, 0xbf, 0x22, 0x28, 0x6b,
        0x15, 0x23, 0x00, 0xd1, 0x48, 0x01, 0x89, 0x9a,
        0x08, 0x03, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x15, 0xfe, 0xff, 0x36,
        0x15, 0x43, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyDict_Type+0x0
    // 8: &PyDict_Contains+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: OPARG
    // 20: &_Py_TrueStruct+0x0
    // 28: &_Py_FalseStruct+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, (uintptr_t)&PyDict_Contains);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, instruction->oparg);
    patch_64(data + 0x20, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x28, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_26r(code + 0x24, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x6c, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x8c, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x90, (uintptr_t)data + 0x20);
    patch_aarch64_21rx(code + 0x94, (uintptr_t)data + 0x28);
    patch_aarch64_12x(code + 0x98, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x9c, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xa0, (uintptr_t)data + 0x28);
    patch_aarch64_26r(code + 0xb8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0xbc, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xc4, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xd8, state->instruction_starts[instruction->error_target]);
}

void
emit__CONTAINS_OP_SET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CONTAINS_OP_SET.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PySet_Type
    // c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       PyFrozenSet_Type
    // 10: 910003fd      mov     x29, sp
    // 14: f9400668      ldr     x8, [x19, #0x8]
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   PySet_Type
    // 1c: f940014a      ldr     x10, [x10]
    // 000000000000001c:  R_AARCH64_LD64_GOT_LO12_NC   PyFrozenSet_Type
    // 20: eb09011f      cmp     x8, x9
    // 24: fa4a1104      ccmp    x8, x10, #0x4, ne
    // 28: 540004c1      b.ne    0xc0 <_JIT_ENTRY+0xc0>
    // 2c: f85f02b7      ldur    x23, [x21, #-0x10]
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  R_AARCH64_ADR_GOT_PAGE       _PySet_Contains
    // 38: f9400108      ldr     x8, [x8]
    // 0000000000000038:  R_AARCH64_LD64_GOT_LO12_NC   _PySet_Contains
    // 3c: aa1303e0      mov     x0, x19
    // 40: aa1703e1      mov     x1, x23
    // 44: d63f0100      blr     x8
    // 48: f9402298      ldr     x24, [x20, #0x40]
    // 4c: f900229f      str     xzr, [x20, #0x40]
    // 50: 2a0003f5      mov     w21, w0
    // 54: b94002e8      ldr     w8, [x23]
    // 58: 37f80108      tbnz    w8, #0x1f, 0x78 <_JIT_ENTRY+0x78>
    // 5c: 71000508      subs    w8, w8, #0x1
    // 60: b90002e8      str     w8, [x23]
    // 64: 540000a1      b.ne    0x78 <_JIT_ENTRY+0x78>
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 6c: aa1703e0      mov     x0, x23
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: b9400268      ldr     w8, [x19]
    // 7c: 37f80088      tbnz    w8, #0x1f, 0x8c <_JIT_ENTRY+0x8c>
    // 80: 71000508      subs    w8, w8, #0x1
    // 84: b9000268      str     w8, [x19]
    // 88: 54000200      b.eq    0xc8 <_JIT_ENTRY+0xc8>
    // 8c: 37f80295      tbnz    w21, #0x1f, 0xdc <_JIT_ENTRY+0xdc>
    // 90: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 94: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 98: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // 9c: f9400108      ldr     x8, [x8]
    // 000000000000009c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // a0: f9400129      ldr     x9, [x9]
    // 00000000000000a0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // a4: f940014a      ldr     x10, [x10]
    // 00000000000000a4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // a8: 6b2822bf      cmp     w21, w8, uxth
    // ac: d1002315      sub     x21, x24, #0x8
    // b0: 9a890148      csel    x8, x10, x9, eq
    // b4: f81f0308      stur    x8, [x24, #-0x10]
    // b8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // bc: 14000000      b       0xbc <_JIT_ENTRY+0xbc>
    // 00000000000000bc:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // c0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c4: 14000000      b       0xc4 <_JIT_ENTRY+0xc4>
    // 00000000000000c4:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // c8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // cc: aa1303e0      mov     x0, x19
    // d0: f9400108      ldr     x8, [x8]
    // 00000000000000d0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // d4: d63f0100      blr     x8
    // d8: 36fffdd5      tbz     w21, #0x1f, 0x90 <_JIT_ENTRY+0x90>
    // dc: d1004315      sub     x21, x24, #0x10
    // e0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e4: 14000000      b       0xe4 <_JIT_ENTRY+0xe4>
    // 00000000000000e4:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[232] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb3, 0x82, 0x5f, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0x0a, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x68, 0x06, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x04, 0x11, 0x4a, 0xfa,
        0xc1, 0x04, 0x00, 0x54, 0xb7, 0x02, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0xe1, 0x03, 0x17, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x98, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf5, 0x03, 0x00, 0x2a, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x00, 0x02, 0x00, 0x54, 0x95, 0x02, 0xf8, 0x37,
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x0a, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0xbf, 0x22, 0x28, 0x6b, 0x15, 0x23, 0x00, 0xd1,
        0x48, 0x01, 0x89, 0x9a, 0x08, 0x03, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xd5, 0xfd, 0xff, 0x36, 0x15, 0x43, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PySet_Type+0x0
    // 8: &PyFrozenSet_Type+0x0
    // 10: &_PySet_Contains+0x0
    // 18: &_Py_Dealloc+0x0
    // 20: OPARG
    // 28: &_Py_TrueStruct+0x0
    // 30: &_Py_FalseStruct+0x0
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySet_Type);
    patch_64(data + 0x8, (uintptr_t)&PyFrozenSet_Type);
    patch_64(data + 0x10, (uintptr_t)&_PySet_Contains);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, instruction->oparg);
    patch_64(data + 0x28, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x30, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x90, (uintptr_t)data + 0x20);
    patch_aarch64_21rx(code + 0x94, (uintptr_t)data + 0x28);
    patch_aarch64_21rx(code + 0x98, (uintptr_t)data + 0x30);
    patch_aarch64_12x(code + 0x9c, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xa0, (uintptr_t)data + 0x28);
    patch_aarch64_12x(code + 0xa4, (uintptr_t)data + 0x30);
    patch_aarch64_26r(code + 0xbc, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xc4, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0xc8, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xd0, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0xe4, state->instruction_starts[instruction->error_target]);
}

void
emit__CONVERT_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CONVERT_VALUE.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _PyEval_ConversionFuncs
    // c: 910003fd      mov     x29, sp
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_ConversionFuncs
    // 18: f85f82b3      ldur    x19, [x21, #-0x8]
    // 1c: 92403d08      and     x8, x8, #0xffff
    // 20: aa1303e0      mov     x0, x19
    // 24: f8687928      ldr     x8, [x9, x8, lsl #3]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: d63f0100      blr     x8
    // 30: f9402288      ldr     x8, [x20, #0x40]
    // 34: d1002108      sub     x8, x8, #0x8
    // 38: f9002288      str     x8, [x20, #0x40]
    // 3c: b9400268      ldr     w8, [x19]
    // 40: 37f80088      tbnz    w8, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 44: 71000508      subs    w8, w8, #0x1
    // 48: b9000268      str     w8, [x19]
    // 4c: 540000e0      b.eq    0x68 <_JIT_ENTRY+0x68>
    // 50: f9402295      ldr     x21, [x20, #0x40]
    // 54: f900229f      str     xzr, [x20, #0x40]
    // 58: b40001a0      cbz     x0, 0x8c <_JIT_ENTRY+0x8c>
    // 5c: f80086a0      str     x0, [x21], #0x8
    // 60: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 64: 14000000      b       0x64 <_JIT_ENTRY+0x64>
    // 0000000000000064:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 6c: aa0003f5      mov     x21, x0
    // 70: aa1303e0      mov     x0, x19
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 78: d63f0100      blr     x8
    // 7c: aa1503e0      mov     x0, x21
    // 80: f9402295      ldr     x21, [x20, #0x40]
    // 84: f900229f      str     xzr, [x20, #0x40]
    // 88: b5fffea0      cbnz    x0, 0x5c <_JIT_ENTRY+0x5c>
    // 8c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 90: 14000000      b       0x90 <_JIT_ENTRY+0x90>
    // 0000000000000090:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 94: 00 00 00 00
    const unsigned char code_body[152] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0x08, 0x3d, 0x40, 0x92,
        0xe0, 0x03, 0x13, 0xaa, 0x28, 0x79, 0x68, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x88, 0x22, 0x40, 0xf9, 0x08, 0x21, 0x00, 0xd1,
        0x88, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xa0, 0x01, 0x00, 0xb4, 0xa0, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x15, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xa0, 0xfe, 0xff, 0xb5, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_ConversionFuncs+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_ConversionFuncs);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x74, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x90, state->instruction_starts[instruction->error_target]);
}

void
emit__COPY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COPY.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: cb282ea8      sub     x8, x21, w8, uxth #3
    // c: f9400108      ldr     x8, [x8]
    // 10: b9400109      ldr     w9, [x8]
    // 14: 37f80069      tbnz    w9, #0x1f, 0x20 <_JIT_ENTRY+0x20>
    // 18: 11000529      add     w9, w9, #0x1
    // 1c: b9000109      str     w9, [x8]
    // 20: f80086a8      str     x8, [x21], #0x8
    // 24: 14000000      b       0x24 <_JIT_ENTRY+0x24>
    // 0000000000000024:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x2e, 0x28, 0xcb, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
}

void
emit__COPY_FREE_VARS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COPY_FREE_VARS.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400129      ldr     x9, [x9]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: 72003d3f      tst     w9, #0xffff
    // c: 540002a0      b.eq    0x60 <_JIT_ENTRY+0x60>
    // 10: f9400288      ldr     x8, [x20]
    // 14: f9400a8a      ldr     x10, [x20, #0x10]
    // 18: b9404908      ldr     w8, [x8, #0x48]
    // 1c: f940254a      ldr     x10, [x10, #0x48]
    // 20: 4b292108      sub     w8, w8, w9, uxth
    // 24: 92403d29      and     x9, x9, #0xffff
    // 28: 8b28ce8b      add     x11, x20, w8, sxtw #3
    // 2c: 91006148      add     x8, x10, #0x18
    // 30: 9101416a      add     x10, x11, #0x50
    // 34: 14000005      b       0x48 <_JIT_ENTRY+0x48>
    // 38: f1000529      subs    x9, x9, #0x1
    // 3c: 91002108      add     x8, x8, #0x8
    // 40: f800854b      str     x11, [x10], #0x8
    // 44: 540000e0      b.eq    0x60 <_JIT_ENTRY+0x60>
    // 48: f940010b      ldr     x11, [x8]
    // 4c: b940016c      ldr     w12, [x11]
    // 50: 37ffff4c      tbnz    w12, #0x1f, 0x38 <_JIT_ENTRY+0x38>
    // 54: 1100058c      add     w12, w12, #0x1
    // 58: b900016c      str     w12, [x11]
    // 5c: 17fffff7      b       0x38 <_JIT_ENTRY+0x38>
    // 60: 14000000      b       0x60 <_JIT_ENTRY+0x60>
    // 0000000000000060:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[96] = {
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x3f, 0x3d, 0x00, 0x72, 0xa0, 0x02, 0x00, 0x54,
        0x88, 0x02, 0x40, 0xf9, 0x8a, 0x0a, 0x40, 0xf9,
        0x08, 0x49, 0x40, 0xb9, 0x4a, 0x25, 0x40, 0xf9,
        0x08, 0x21, 0x29, 0x4b, 0x29, 0x3d, 0x40, 0x92,
        0x8b, 0xce, 0x28, 0x8b, 0x48, 0x61, 0x00, 0x91,
        0x6a, 0x41, 0x01, 0x91, 0x05, 0x00, 0x00, 0x14,
        0x29, 0x05, 0x00, 0xf1, 0x08, 0x21, 0x00, 0x91,
        0x4b, 0x85, 0x00, 0xf8, 0xe0, 0x00, 0x00, 0x54,
        0x0b, 0x01, 0x40, 0xf9, 0x6c, 0x01, 0x40, 0xb9,
        0x4c, 0xff, 0xff, 0x37, 0x8c, 0x05, 0x00, 0x11,
        0x6c, 0x01, 0x00, 0xb9, 0xf7, 0xff, 0xff, 0x17,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
}

void
emit__CREATE_INIT_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CREATE_INIT_FRAME.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _Py_InitCleanup
    // 8: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _Py_NoneStruct
    // c: 910003fd      mov     x29, sp
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _Py_InitCleanup
    // 14: f9407ad3      ldr     x19, [x22, #0xf0]
    // 18: f940016b      ldr     x11, [x11]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _Py_NoneStruct
    // 1c: f9002295      str     x21, [x20, #0x40]
    // 20: 6949250a      ldpsw   x10, x9, [x8, #0x48]
    // 24: 8b090e69      add     x9, x19, x9, lsl #3
    // 28: f9007ac9      str     x9, [x22, #0xf0]
    // 2c: 8b0a0e69      add     x9, x19, x10, lsl #3
    // 30: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 34: a900ae74      stp     x20, x11, [x19, #0x8]
    // 38: f9000268      str     x8, [x19]
    // 3c: 91016129      add     x9, x9, #0x58
    // 40: 91034108      add     x8, x8, #0xd0
    // 44: f940014a      ldr     x10, [x10]
    // 0000000000000044:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 48: a902fe7f      stp     xzr, xzr, [x19, #0x28]
    // 4c: a903a668      stp     x8, x9, [x19, #0x38]
    // 50: 12003d48      and     w8, w10, #0xffff
    // 54: b9004a7f      str     wzr, [x19, #0x48]
    // 58: 2a2803eb      mvn     w11, w8
    // 5c: f9402289      ldr     x9, [x20, #0x40]
    // 60: f900229f      str     xzr, [x20, #0x40]
    // 64: f86bdaac      ldr     x12, [x21, w11, sxtw #3]
    // 68: 9280002b      mov     x11, #-0x2              // =-2
    // 6c: cb2a216b      sub     x11, x11, w10, uxth
    // 70: cb2a2eaa      sub     x10, x21, w10, uxth #3
    // 74: b940018d      ldr     w13, [x12]
    // 78: 37f8006d      tbnz    w13, #0x1f, 0x84 <_JIT_ENTRY+0x84>
    // 7c: 110005ad      add     w13, w13, #0x1
    // 80: b900018d      str     w13, [x12]
    // 84: d37df177      lsl     x23, x11, #3
    // 88: f9002a6c      str     x12, [x19, #0x50]
    // 8c: 11000504      add     w4, w8, #0x1
    // 90: f9002289      str     x9, [x20, #0x40]
    // 94: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  R_AARCH64_ADR_GOT_PAGE       _PyEvalFramePushAndInit
    // 98: d1002143      sub     x3, x10, #0x8
    // 9c: f8776aa1      ldr     x1, [x21, x23]
    // a0: f9400108      ldr     x8, [x8]
    // 00000000000000a0:  R_AARCH64_LD64_GOT_LO12_NC   _PyEvalFramePushAndInit
    // a4: aa1603e0      mov     x0, x22
    // a8: aa1f03e2      mov     x2, xzr
    // ac: aa1f03e5      mov     x5, xzr
    // b0: aa1303e6      mov     x6, x19
    // b4: d63f0100      blr     x8
    // b8: f9402288      ldr     x8, [x20, #0x40]
    // bc: f900229f      str     xzr, [x20, #0x40]
    // c0: 8b170115      add     x21, x8, x23
    // c4: b4000120      cbz     x0, 0xe8 <_JIT_ENTRY+0xe8>
    // c8: b9402ec8      ldr     w8, [x22, #0x2c]
    // cc: 52800089      mov     w9, #0x4                // =4
    // d0: 79009289      strh    w9, [x20, #0x48]
    // d4: 51000508      sub     w8, w8, #0x1
    // d8: b9002ec8      str     w8, [x22, #0x2c]
    // dc: f80086a0      str     x0, [x21], #0x8
    // e0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e4: 14000000      b       0xe4 <_JIT_ENTRY+0xe4>
    // 00000000000000e4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // e8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e8:  R_AARCH64_ADR_GOT_PAGE       _PyEval_FrameClearAndPop
    // ec: aa1603e0      mov     x0, x22
    // f0: aa1303e1      mov     x1, x19
    // f4: f9400108      ldr     x8, [x8]
    // 00000000000000f4:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_FrameClearAndPop
    // f8: d63f0100      blr     x8
    // fc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 100: 14000000      b       0x100 <_JIT_ENTRY+0x100>
    // 0000000000000100:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 104: 00 00 00 00
    const unsigned char code_body[264] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x0b, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0xd3, 0x7a, 0x40, 0xf9,
        0x6b, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x0a, 0x25, 0x49, 0x69, 0x69, 0x0e, 0x09, 0x8b,
        0xc9, 0x7a, 0x00, 0xf9, 0x69, 0x0e, 0x0a, 0x8b,
        0x0a, 0x00, 0x00, 0x90, 0x74, 0xae, 0x00, 0xa9,
        0x68, 0x02, 0x00, 0xf9, 0x29, 0x61, 0x01, 0x91,
        0x08, 0x41, 0x03, 0x91, 0x4a, 0x01, 0x40, 0xf9,
        0x7f, 0xfe, 0x02, 0xa9, 0x68, 0xa6, 0x03, 0xa9,
        0x48, 0x3d, 0x00, 0x12, 0x7f, 0x4a, 0x00, 0xb9,
        0xeb, 0x03, 0x28, 0x2a, 0x89, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xac, 0xda, 0x6b, 0xf8,
        0x2b, 0x00, 0x80, 0x92, 0x6b, 0x21, 0x2a, 0xcb,
        0xaa, 0x2e, 0x2a, 0xcb, 0x8d, 0x01, 0x40, 0xb9,
        0x6d, 0x00, 0xf8, 0x37, 0xad, 0x05, 0x00, 0x11,
        0x8d, 0x01, 0x00, 0xb9, 0x77, 0xf1, 0x7d, 0xd3,
        0x6c, 0x2a, 0x00, 0xf9, 0x04, 0x05, 0x00, 0x11,
        0x89, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x43, 0x21, 0x00, 0xd1, 0xa1, 0x6a, 0x77, 0xf8,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0xe2, 0x03, 0x1f, 0xaa, 0xe5, 0x03, 0x1f, 0xaa,
        0xe6, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x88, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x15, 0x01, 0x17, 0x8b, 0x20, 0x01, 0x00, 0xb4,
        0xc8, 0x2e, 0x40, 0xb9, 0x89, 0x00, 0x80, 0x52,
        0x89, 0x92, 0x00, 0x79, 0x08, 0x05, 0x00, 0x51,
        0xc8, 0x2e, 0x00, 0xb9, 0xa0, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_InitCleanup+0x0
    // 8: &_Py_NoneStruct+0x0
    // 10: OPARG
    // 18: &_PyEvalFramePushAndInit+0x0
    // 20: &_PyEval_FrameClearAndPop+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_InitCleanup);
    patch_64(data + 0x8, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_PyEvalFramePushAndInit);
    patch_64(data + 0x20, (uintptr_t)&_PyEval_FrameClearAndPop);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x30, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x44, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x94, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xa0, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0xe4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0xe8, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xf4, (uintptr_t)data + 0x20);
    patch_aarch64_26r(code + 0x100, state->instruction_starts[instruction->error_target]);
}

void
emit__DELETE_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_ATTR.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // c: 910003fd      mov     x29, sp
    // 10: f9401108      ldr     x8, [x8, #0x20]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 18: f85f82b3      ldur    x19, [x21, #-0x8]
    // 1c: 8b292d08      add     x8, x8, w9, uxth #3
    // 20: aa1303e0      mov     x0, x19
    // 24: f9400d01      ldr     x1, [x8, #0x18]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       PyObject_DelAttr
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_DelAttr
    // 34: d63f0100      blr     x8
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: b9400268      ldr     w8, [x19]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 48: 71000508      subs    w8, w8, #0x1
    // 4c: b9000268      str     w8, [x19]
    // 50: 540000a0      b.eq    0x64 <_JIT_ENTRY+0x64>
    // 54: d10022b5      sub     x21, x21, #0x8
    // 58: 34000140      cbz     w0, 0x80 <_JIT_ENTRY+0x80>
    // 5c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 60: 14000000      b       0x60 <_JIT_ENTRY+0x60>
    // 0000000000000060:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 68: 2a0003f7      mov     w23, w0
    // 6c: aa1303e0      mov     x0, x19
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: d10022b5      sub     x21, x21, #0x8
    // 7c: 35ffff17      cbnz    w23, 0x5c <_JIT_ENTRY+0x5c>
    // 80: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 84: 14000000      b       0x84 <_JIT_ENTRY+0x84>
    // 0000000000000084:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[136] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x11, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0x08, 0x2d, 0x29, 0x8b,
        0xe0, 0x03, 0x13, 0xaa, 0x01, 0x0d, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0xb5, 0x22, 0x00, 0xd1,
        0x40, 0x01, 0x00, 0x34, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xf7, 0x03, 0x00, 0x2a, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xb5, 0x22, 0x00, 0xd1, 0x17, 0xff, 0xff, 0x35,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PyObject_DelAttr+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_DelAttr);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x60, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x84, (uintptr_t)code + sizeof(code_body));
}

void
emit__DELETE_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_DEREF.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 910003fd      mov     x29, sp
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 10: 8b282e88      add     x8, x20, w8, uxth #3
    // 14: f9402908      ldr     x8, [x8, #0x50]
    // 18: f9400900      ldr     x0, [x8, #0x10]
    // 1c: f900091f      str     xzr, [x8, #0x10]
    // 20: b4000160      cbz     x0, 0x4c <_JIT_ENTRY+0x4c>
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: b9400008      ldr     w8, [x0]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 30: 71000508      subs    w8, w8, #0x1
    // 34: b9000008      str     w8, [x0]
    // 38: 54000240      b.eq    0x80 <_JIT_ENTRY+0x80>
    // 3c: f9402295      ldr     x21, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 48: 14000000      b       0x48 <_JIT_ENTRY+0x48>
    // 0000000000000048:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 50: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  R_AARCH64_ADR_GOT_PAGE       _PyEval_FormatExcUnbound
    // 54: aa1603e0      mov     x0, x22
    // 58: f9400108      ldr     x8, [x8]
    // 0000000000000058:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 5c: f9002295      str     x21, [x20, #0x40]
    // 60: f9400281      ldr     x1, [x20]
    // 64: f9400129      ldr     x9, [x9]
    // 0000000000000064:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_FormatExcUnbound
    // 68: 12003d02      and     w2, w8, #0xffff
    // 6c: d63f0120      blr     x9
    // 70: f9402295      ldr     x21, [x20, #0x40]
    // 74: f900229f      str     xzr, [x20, #0x40]
    // 78: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 7c: 14000000      b       0x7c <_JIT_ENTRY+0x7c>
    // 000000000000007c:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 80: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 84: f9400108      ldr     x8, [x8]
    // 0000000000000084:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 88: d63f0100      blr     x8
    // 8c: f9402295      ldr     x21, [x20, #0x40]
    // 90: f900229f      str     xzr, [x20, #0x40]
    // 94: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 98: 14000000      b       0x98 <_JIT_ENTRY+0x98>
    // 0000000000000098:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[152] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x88, 0x2e, 0x28, 0x8b, 0x08, 0x29, 0x40, 0xf9,
        0x00, 0x09, 0x40, 0xf9, 0x1f, 0x09, 0x00, 0xf9,
        0x60, 0x01, 0x00, 0xb4, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x40, 0x02, 0x00, 0x54, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x81, 0x02, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x02, 0x3d, 0x00, 0x12, 0x20, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
    };
    // 0: OPARG
    // 8: &_PyEval_FormatExcUnbound+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_FormatExcUnbound);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x48, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x50, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x58, (uintptr_t)data);
    patch_aarch64_12x(code + 0x64, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x7c, state->instruction_starts[instruction->error_target]);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)data + 0x10);
}

void
emit__DELETE_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_FAST.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 91014288      add     x8, x20, #0x50
    // c: 910003fd      mov     x29, sp
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: 92403d21      and     x1, x9, #0xffff
    // 18: f8617900      ldr     x0, [x8, x1, lsl #3]
    // 1c: b4000180      cbz     x0, 0x4c <_JIT_ENTRY+0x4c>
    // 20: f821791f      str     xzr, [x8, x1, lsl #3]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: b9400008      ldr     w8, [x0]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 30: 71000508      subs    w8, w8, #0x1
    // 34: b9000008      str     w8, [x0]
    // 38: 54000340      b.eq    0xa0 <_JIT_ENTRY+0xa0>
    // 3c: f9402295      ldr     x21, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 48: 14000000      b       0x48 <_JIT_ENTRY+0x48>
    // 0000000000000048:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  R_AARCH64_ADR_GOT_PAGE       PyExc_UnboundLocalError
    // 50: f9400108      ldr     x8, [x8]
    // 0000000000000050:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_UnboundLocalError
    // 54: f9400289      ldr     x9, [x20]
    // 58: f9002295      str     x21, [x20, #0x40]
    // 5c: f9400113      ldr     x19, [x8]
    // 60: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  R_AARCH64_ADR_GOT_PAGE       PyTuple_GetItem
    // 64: f9403120      ldr     x0, [x9, #0x60]
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  R_AARCH64_LD64_GOT_LO12_NC   PyTuple_GetItem
    // 6c: d63f0100      blr     x8
    // 70: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  R_AARCH64_ADR_GOT_PAGE       _PyEval_FormatExcCheckArg
    // 74: aa0003e3      mov     x3, x0
    // 78: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1
    // 7c: 91000042      add     x2, x2, #0x0
    // 000000000000007c:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_FormatExcCheckArg
    // 84: aa1603e0      mov     x0, x22
    // 88: aa1303e1      mov     x1, x19
    // 8c: d63f0100      blr     x8
    // 90: f9402295      ldr     x21, [x20, #0x40]
    // 94: f900229f      str     xzr, [x20, #0x40]
    // 98: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 9c: 14000000      b       0x9c <_JIT_ENTRY+0x9c>
    // 000000000000009c:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // a0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // a4: f9400108      ldr     x8, [x8]
    // 00000000000000a4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // a8: d63f0100      blr     x8
    // ac: f9402295      ldr     x21, [x20, #0x40]
    // b0: f900229f      str     xzr, [x20, #0x40]
    // b4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b8: 14000000      b       0xb8 <_JIT_ENTRY+0xb8>
    // 00000000000000b8:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[184] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x09, 0x00, 0x00, 0x90,
        0x88, 0x42, 0x01, 0x91, 0xfd, 0x03, 0x00, 0x91,
        0x29, 0x01, 0x40, 0xf9, 0x21, 0x3d, 0x40, 0x92,
        0x00, 0x79, 0x61, 0xf8, 0x80, 0x01, 0x00, 0xb4,
        0x1f, 0x79, 0x21, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x40, 0x03, 0x00, 0x54, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x89, 0x02, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x13, 0x01, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x20, 0x31, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe3, 0x03, 0x00, 0xaa,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
    };
    // 0: "cannot access local variable '%s' where it is not associated with a value\x00"
    // 4a: 00 00 00 00 00 00
    // 50: OPARG
    // 58: &PyExc_UnboundLocalError+0x0
    // 60: &PyTuple_GetItem+0x0
    // 68: &_PyEval_FormatExcCheckArg+0x0
    // 70: &_Py_Dealloc+0x0
    const unsigned char data_body[120] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69,
        0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73,
        0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
        0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
        0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
        0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
        0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75,
        0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x50, instruction->oparg);
    patch_64(data + 0x58, (uintptr_t)&PyExc_UnboundLocalError);
    patch_64(data + 0x60, (uintptr_t)&PyTuple_GetItem);
    patch_64(data + 0x68, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_64(data + 0x70, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x50);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x50);
    patch_aarch64_26r(code + 0x48, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)data + 0x58);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)data + 0x60);
    patch_aarch64_12x(code + 0x68, (uintptr_t)data + 0x60);
    patch_aarch64_21rx(code + 0x70, (uintptr_t)data + 0x68);
    patch_aarch64_21r(code + 0x78, (uintptr_t)data);
    patch_aarch64_12(code + 0x7c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x80, (uintptr_t)data + 0x68);
    patch_aarch64_26r(code + 0x9c, state->instruction_starts[instruction->error_target]);
    patch_aarch64_33rx(code + 0xa0, (uintptr_t)data + 0x70);
}

void
emit__DELETE_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_GLOBAL.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // c: aa1f03e2      mov     x2, xzr
    // 10: 910003fd      mov     x29, sp
    // 14: f9401108      ldr     x8, [x8, #0x20]
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 1c: f9400e80      ldr     x0, [x20, #0x18]
    // 20: 8b292d08      add     x8, x8, w9, uxth #3
    // 24: f9400d13      ldr     x19, [x8, #0x18]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       PyDict_Pop
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   PyDict_Pop
    // 34: aa1303e1      mov     x1, x19
    // 38: d63f0100      blr     x8
    // 3c: f9402295      ldr     x21, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: 37f80080      tbnz    w0, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 48: 340000a0      cbz     w0, 0x5c <_JIT_ENTRY+0x5c>
    // 4c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 50: 14000000      b       0x50 <_JIT_ENTRY+0x50>
    // 0000000000000050:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 54: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 58: 14000000      b       0x58 <_JIT_ENTRY+0x58>
    // 0000000000000058:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 5c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  R_AARCH64_ADR_GOT_PAGE       PyExc_NameError
    // 60: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1
    // 64: 91000042      add     x2, x2, #0x0
    // 0000000000000064:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_NameError
    // 6c: f9002295      str     x21, [x20, #0x40]
    // 70: aa1603e0      mov     x0, x22
    // 74: aa1303e3      mov     x3, x19
    // 78: f9400101      ldr     x1, [x8]
    // 7c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  R_AARCH64_ADR_GOT_PAGE       _PyEval_FormatExcCheckArg
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_FormatExcCheckArg
    // 84: d63f0100      blr     x8
    // 88: f9402295      ldr     x21, [x20, #0x40]
    // 8c: f900229f      str     xzr, [x20, #0x40]
    // 90: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 94: 14000000      b       0x94 <_JIT_ENTRY+0x94>
    // 0000000000000094:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[152] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0xe2, 0x03, 0x1f, 0xaa,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x11, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x80, 0x0e, 0x40, 0xf9,
        0x08, 0x2d, 0x29, 0x8b, 0x13, 0x0d, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x80, 0x00, 0xf8, 0x37,
        0xa0, 0x00, 0x00, 0x34, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0xe3, 0x03, 0x13, 0xaa,
        0x01, 0x01, 0x40, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: "name '%.200s' is not defined\x00"
    // 1d: 00 00 00
    // 20: OPARG
    // 28: &PyDict_Pop+0x0
    // 30: &PyExc_NameError+0x0
    // 38: &_PyEval_FormatExcCheckArg+0x0
    const unsigned char data_body[64] = {
        0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e,
        0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73,
        0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66,
        0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, instruction->oparg);
    patch_64(data + 0x28, (uintptr_t)&PyDict_Pop);
    patch_64(data + 0x30, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x38, (uintptr_t)&_PyEval_FormatExcCheckArg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data + 0x20);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x28);
    patch_aarch64_26r(code + 0x50, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x58, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)data + 0x30);
    patch_aarch64_21r(code + 0x60, (uintptr_t)data);
    patch_aarch64_12(code + 0x64, (uintptr_t)data);
    patch_aarch64_12x(code + 0x68, (uintptr_t)data + 0x30);
    patch_aarch64_33rx(code + 0x7c, (uintptr_t)data + 0x38);
    patch_aarch64_26r(code + 0x94, state->instruction_starts[instruction->error_target]);
}

void
emit__DELETE_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_NAME.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // c: 910003fd      mov     x29, sp
    // 10: f9401108      ldr     x8, [x8, #0x20]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 18: f9401680      ldr     x0, [x20, #0x28]
    // 1c: 8b292d08      add     x8, x8, w9, uxth #3
    // 20: f9400d13      ldr     x19, [x8, #0x18]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: b40002e0      cbz     x0, 0x84 <_JIT_ENTRY+0x84>
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       PyObject_DelItem
    // 30: aa1303e1      mov     x1, x19
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_DelItem
    // 38: d63f0100      blr     x8
    // 3c: f9402295      ldr     x21, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: 340003c0      cbz     w0, 0xbc <_JIT_ENTRY+0xbc>
    // 48: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  R_AARCH64_ADR_GOT_PAGE       PyExc_NameError
    // 4c: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1+0x1b
    // 50: 91000042      add     x2, x2, #0x0
    // 0000000000000050:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1+0x1b
    // 54: f9400108      ldr     x8, [x8]
    // 0000000000000054:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_NameError
    // 58: f9002295      str     x21, [x20, #0x40]
    // 5c: aa1603e0      mov     x0, x22
    // 60: aa1303e3      mov     x3, x19
    // 64: f9400101      ldr     x1, [x8]
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  R_AARCH64_ADR_GOT_PAGE       _PyEval_FormatExcCheckArg
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_FormatExcCheckArg
    // 70: d63f0100      blr     x8
    // 74: f9402295      ldr     x21, [x20, #0x40]
    // 78: f900229f      str     xzr, [x20, #0x40]
    // 7c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 80: 14000000      b       0x80 <_JIT_ENTRY+0x80>
    // 0000000000000080:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 84: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  R_AARCH64_ADR_GOT_PAGE       PyExc_SystemError
    // 88: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1
    // 8c: 91000042      add     x2, x2, #0x0
    // 000000000000008c:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1
    // 90: f9400108      ldr     x8, [x8]
    // 0000000000000090:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_SystemError
    // 94: aa1603e0      mov     x0, x22
    // 98: aa1303e3      mov     x3, x19
    // 9c: f9400101      ldr     x1, [x8]
    // a0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  R_AARCH64_ADR_GOT_PAGE       _PyErr_Format
    // a4: f9400108      ldr     x8, [x8]
    // 00000000000000a4:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_Format
    // a8: d63f0100      blr     x8
    // ac: f9402295      ldr     x21, [x20, #0x40]
    // b0: f900229f      str     xzr, [x20, #0x40]
    // b4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b8: 14000000      b       0xb8 <_JIT_ENTRY+0xb8>
    // 00000000000000b8:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // bc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c0: 14000000      b       0xc0 <_JIT_ENTRY+0xc0>
    // 00000000000000c0:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[192] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x11, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x80, 0x16, 0x40, 0xf9, 0x08, 0x2d, 0x29, 0x8b,
        0x13, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x02, 0x00, 0xb4, 0x08, 0x00, 0x00, 0x90,
        0xe1, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xc0, 0x03, 0x00, 0x34,
        0x08, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0xe3, 0x03, 0x13, 0xaa, 0x01, 0x01, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0xe3, 0x03, 0x13, 0xaa, 0x01, 0x01, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
    };
    // 0: "no locals when deleting %R\x00name '%.200s' is not defined\x00"
    // 38: OPARG
    // 40: &PyObject_DelItem+0x0
    // 48: &PyExc_NameError+0x0
    // 50: &_PyEval_FormatExcCheckArg+0x0
    // 58: &PyExc_SystemError+0x0
    // 60: &_PyErr_Format+0x0
    const unsigned char data_body[104] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64,
        0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20,
        0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20,
        0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27,
        0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
        0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x38, instruction->oparg);
    patch_64(data + 0x40, (uintptr_t)&PyObject_DelItem);
    patch_64(data + 0x48, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x50, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_64(data + 0x58, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x60, (uintptr_t)&_PyErr_Format);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x38);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x38);
    patch_aarch64_21rx(code + 0x2c, (uintptr_t)data + 0x40);
    patch_aarch64_12x(code + 0x34, (uintptr_t)data + 0x40);
    patch_aarch64_21rx(code + 0x48, (uintptr_t)data + 0x48);
    patch_aarch64_21r(code + 0x4c, (uintptr_t)data + 0x1b);
    patch_aarch64_12(code + 0x50, (uintptr_t)data + 0x1b);
    patch_aarch64_12x(code + 0x54, (uintptr_t)data + 0x48);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x50);
    patch_aarch64_26r(code + 0x80, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0x84, (uintptr_t)data + 0x58);
    patch_aarch64_21r(code + 0x88, (uintptr_t)data);
    patch_aarch64_12(code + 0x8c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x90, (uintptr_t)data + 0x58);
    patch_aarch64_33rx(code + 0xa0, (uintptr_t)data + 0x60);
    patch_aarch64_26r(code + 0xb8, state->instruction_starts[instruction->error_target]);
}

void
emit__DELETE_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_SUBSCR.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: a97f4eb7      ldp     x23, x19, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyObject_DelItem
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: 910003fd      mov     x29, sp
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_DelItem
    // 18: aa1703e0      mov     x0, x23
    // 1c: aa1303e1      mov     x1, x19
    // 20: d63f0100      blr     x8
    // 24: f9402295      ldr     x21, [x20, #0x40]
    // 28: f900229f      str     xzr, [x20, #0x40]
    // 2c: 2a0003f8      mov     w24, w0
    // 30: b94002e8      ldr     w8, [x23]
    // 34: 37f80108      tbnz    w8, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 38: 71000508      subs    w8, w8, #0x1
    // 3c: b90002e8      str     w8, [x23]
    // 40: 540000a1      b.ne    0x54 <_JIT_ENTRY+0x54>
    // 44: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 48: aa1703e0      mov     x0, x23
    // 4c: f9400108      ldr     x8, [x8]
    // 000000000000004c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 50: d63f0100      blr     x8
    // 54: b9400268      ldr     w8, [x19]
    // 58: 37f80088      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 5c: 71000508      subs    w8, w8, #0x1
    // 60: b9000268      str     w8, [x19]
    // 64: 540000a0      b.eq    0x78 <_JIT_ENTRY+0x78>
    // 68: d10042b5      sub     x21, x21, #0x10
    // 6c: 34000138      cbz     w24, 0x90 <_JIT_ENTRY+0x90>
    // 70: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 74: 14000000      b       0x74 <_JIT_ENTRY+0x74>
    // 0000000000000074:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 7c: aa1303e0      mov     x0, x19
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 84: d63f0100      blr     x8
    // 88: d10042b5      sub     x21, x21, #0x10
    // 8c: 35ffff38      cbnz    w24, 0x70 <_JIT_ENTRY+0x70>
    // 90: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 94: 14000000      b       0x94 <_JIT_ENTRY+0x94>
    // 0000000000000094:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[152] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb7, 0x4e, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0x95, 0x22, 0x00, 0xf9,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf8, 0x03, 0x00, 0x2a,
        0xe8, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0xb5, 0x42, 0x00, 0xd1, 0x38, 0x01, 0x00, 0x34,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xb5, 0x42, 0x00, 0xd1, 0x38, 0xff, 0xff, 0x35,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyObject_DelItem+0x0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_DelItem);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x74, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0x78, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x80, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x94, (uintptr_t)code + sizeof(code_body));
}

void
emit__DEOPT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DEOPT.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_EXECUTOR
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_TARGET
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_EXECUTOR
    // c: f9008ac8      str     x8, [x22, #0x110]
    // 10: f9400288      ldr     x8, [x20]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_TARGET
    // 18: f9002295      str     x21, [x20, #0x40]
    // 1c: 8b294508      add     x8, x8, w9, uxtw #1
    // 20: 91034100      add     x0, x8, #0xd0
    // 24: d65f03c0      ret
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xc8, 0x8a, 0x00, 0xf9,
        0x88, 0x02, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x45, 0x29, 0x8b,
        0x00, 0x41, 0x03, 0x91, 0xc0, 0x03, 0x5f, 0xd6,
    };
    // 0: EXECUTOR
    // 8: TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, instruction->target);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
}

void
emit__DICT_MERGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DICT_MERGE.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 12800069      mov     w9, #-0x4               // =-4
    // c: 52800042      mov     w2, #0x2                // =2
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f85f82b3      ldur    x19, [x21, #-0x8]
    // 18: 910003fd      mov     x29, sp
    // 1c: 12003d08      and     w8, w8, #0xffff
    // 20: aa1303e1      mov     x1, x19
    // 24: 2a2803ea      mvn     w10, w8
    // 28: 4b080128      sub     w8, w9, w8
    // 2c: f86adaa0      ldr     x0, [x21, w10, sxtw #3]
    // 30: f868dab7      ldr     x23, [x21, w8, sxtw #3]
    // 34: f9002295      str     x21, [x20, #0x40]
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _PyDict_MergeEx
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  R_AARCH64_LD64_GOT_LO12_NC   _PyDict_MergeEx
    // 40: d63f0100      blr     x8
    // 44: f9402295      ldr     x21, [x20, #0x40]
    // 48: f900229f      str     xzr, [x20, #0x40]
    // 4c: 37f80120      tbnz    w0, #0x1f, 0x70 <_JIT_ENTRY+0x70>
    // 50: b9400268      ldr     w8, [x19]
    // 54: 37f80088      tbnz    w8, #0x1f, 0x64 <_JIT_ENTRY+0x64>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b9000268      str     w8, [x19]
    // 60: 540002a0      b.eq    0xb4 <_JIT_ENTRY+0xb4>
    // 64: d10022b5      sub     x21, x21, #0x8
    // 68: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 6c: 14000000      b       0x6c <_JIT_ENTRY+0x6c>
    // 000000000000006c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 70: f9002295      str     x21, [x20, #0x40]
    // 74: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  R_AARCH64_ADR_GOT_PAGE       _PyEval_FormatKwargsError
    // 78: aa1603e0      mov     x0, x22
    // 7c: f9400108      ldr     x8, [x8]
    // 000000000000007c:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_FormatKwargsError
    // 80: aa1703e1      mov     x1, x23
    // 84: aa1303e2      mov     x2, x19
    // 88: d63f0100      blr     x8
    // 8c: f9402295      ldr     x21, [x20, #0x40]
    // 90: f900229f      str     xzr, [x20, #0x40]
    // 94: b9400268      ldr     w8, [x19]
    // 98: 37f80088      tbnz    w8, #0x1f, 0xa8 <_JIT_ENTRY+0xa8>
    // 9c: 71000508      subs    w8, w8, #0x1
    // a0: b9000268      str     w8, [x19]
    // a4: 54000160      b.eq    0xd0 <_JIT_ENTRY+0xd0>
    // a8: d10022b5      sub     x21, x21, #0x8
    // ac: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b0: 14000000      b       0xb0 <_JIT_ENTRY+0xb0>
    // 00000000000000b0:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // b4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // b8: aa1303e0      mov     x0, x19
    // bc: f9400108      ldr     x8, [x8]
    // 00000000000000bc:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // c0: d63f0100      blr     x8
    // c4: d10022b5      sub     x21, x21, #0x8
    // c8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // cc: 14000000      b       0xcc <_JIT_ENTRY+0xcc>
    // 00000000000000cc:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // d0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000d0:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // d4: aa1303e0      mov     x0, x19
    // d8: f9400108      ldr     x8, [x8]
    // 00000000000000d8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // dc: d63f0100      blr     x8
    // e0: d10022b5      sub     x21, x21, #0x8
    // e4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e8: 14000000      b       0xe8 <_JIT_ENTRY+0xe8>
    // 00000000000000e8:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // ec: 00 00 00 00
    const unsigned char code_body[240] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x69, 0x00, 0x80, 0x12, 0x42, 0x00, 0x80, 0x52,
        0x08, 0x01, 0x40, 0xf9, 0xb3, 0x82, 0x5f, 0xf8,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x3d, 0x00, 0x12,
        0xe1, 0x03, 0x13, 0xaa, 0xea, 0x03, 0x28, 0x2a,
        0x28, 0x01, 0x08, 0x4b, 0xa0, 0xda, 0x6a, 0xf8,
        0xb7, 0xda, 0x68, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x20, 0x01, 0xf8, 0x37,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa0, 0x02, 0x00, 0x54, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x16, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x17, 0xaa, 0xe2, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0x60, 0x01, 0x00, 0x54,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyDict_MergeEx+0x0
    // 10: &_PyEval_FormatKwargsError+0x0
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyDict_MergeEx);
    patch_64(data + 0x10, (uintptr_t)&_PyEval_FormatKwargsError);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x6c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x74, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x7c, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xb0, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0xb4, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xbc, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0xcc, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0xd0, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xd8, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0xe8, state->instruction_starts[instruction->error_target]);
}

void
emit__DICT_UPDATE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DICT_UPDATE.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 910003fd      mov     x29, sp
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 10: f85f82b3      ldur    x19, [x21, #-0x8]
    // 14: 2a2803e8      mvn     w8, w8
    // 18: aa1303e1      mov     x1, x19
    // 1c: 531d7108      lsl     w8, w8, #3
    // 20: b26db108      orr     x8, x8, #0xfffffffffff80000
    // 24: f8686aa0      ldr     x0, [x21, x8]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       PyDict_Update
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   PyDict_Update
    // 34: d63f0100      blr     x8
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: 37f80120      tbnz    w0, #0x1f, 0x64 <_JIT_ENTRY+0x64>
    // 44: b9400268      ldr     w8, [x19]
    // 48: 37f80088      tbnz    w8, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 4c: 71000508      subs    w8, w8, #0x1
    // 50: b9000268      str     w8, [x19]
    // 54: 540004a0      b.eq    0xe8 <_JIT_ENTRY+0xe8>
    // 58: d10022b5      sub     x21, x21, #0x8
    // 5c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 60: 14000000      b       0x60 <_JIT_ENTRY+0x60>
    // 0000000000000060:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       PyExc_AttributeError
    // 68: aa1603e0      mov     x0, x22
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_AttributeError
    // 70: f9002295      str     x21, [x20, #0x40]
    // 74: f9400101      ldr     x1, [x8]
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  R_AARCH64_ADR_GOT_PAGE       _PyErr_ExceptionMatches
    // 7c: f9400108      ldr     x8, [x8]
    // 000000000000007c:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_ExceptionMatches
    // 80: d63f0100      blr     x8
    // 84: f9402295      ldr     x21, [x20, #0x40]
    // 88: f900229f      str     xzr, [x20, #0x40]
    // 8c: 340001e0      cbz     w0, 0xc8 <_JIT_ENTRY+0xc8>
    // 90: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  R_AARCH64_ADR_GOT_PAGE       PyExc_TypeError
    // 94: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1
    // 98: 91000042      add     x2, x2, #0x0
    // 0000000000000098:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1
    // 9c: f9400108      ldr     x8, [x8]
    // 000000000000009c:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_TypeError
    // a0: f9400669      ldr     x9, [x19, #0x8]
    // a4: f9002295      str     x21, [x20, #0x40]
    // a8: aa1603e0      mov     x0, x22
    // ac: f9400101      ldr     x1, [x8]
    // b0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b0:  R_AARCH64_ADR_GOT_PAGE       _PyErr_Format
    // b4: f9400d23      ldr     x3, [x9, #0x18]
    // b8: f9400108      ldr     x8, [x8]
    // 00000000000000b8:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_Format
    // bc: d63f0100      blr     x8
    // c0: f9402295      ldr     x21, [x20, #0x40]
    // c4: f900229f      str     xzr, [x20, #0x40]
    // c8: b9400268      ldr     w8, [x19]
    // cc: 37f80088      tbnz    w8, #0x1f, 0xdc <_JIT_ENTRY+0xdc>
    // d0: 71000508      subs    w8, w8, #0x1
    // d4: b9000268      str     w8, [x19]
    // d8: 54000160      b.eq    0x104 <_JIT_ENTRY+0x104>
    // dc: d10022b5      sub     x21, x21, #0x8
    // e0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e4: 14000000      b       0xe4 <_JIT_ENTRY+0xe4>
    // 00000000000000e4:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // e8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // ec: aa1303e0      mov     x0, x19
    // f0: f9400108      ldr     x8, [x8]
    // 00000000000000f0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // f4: d63f0100      blr     x8
    // f8: d10022b5      sub     x21, x21, #0x8
    // fc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 100: 14000000      b       0x100 <_JIT_ENTRY+0x100>
    // 0000000000000100:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 104: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000104:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 108: aa1303e0      mov     x0, x19
    // 10c: f9400108      ldr     x8, [x8]
    // 000000000000010c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 110: d63f0100      blr     x8
    // 114: d10022b5      sub     x21, x21, #0x8
    // 118: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 11c: 14000000      b       0x11c <_JIT_ENTRY+0x11c>
    // 000000000000011c:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[288] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0xe8, 0x03, 0x28, 0x2a,
        0xe1, 0x03, 0x13, 0xaa, 0x08, 0x71, 0x1d, 0x53,
        0x08, 0xb1, 0x6d, 0xb2, 0xa0, 0x6a, 0x68, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x20, 0x01, 0xf8, 0x37, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa0, 0x04, 0x00, 0x54,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x16, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x01, 0x01, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xe0, 0x01, 0x00, 0x34,
        0x08, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x69, 0x06, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0x01, 0x01, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x23, 0x0d, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x60, 0x01, 0x00, 0x54, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: "'%.200s' object is not a mapping\x00"
    // 21: 00 00 00 00 00 00 00
    // 28: OPARG
    // 30: &PyDict_Update+0x0
    // 38: &PyExc_AttributeError+0x0
    // 40: &_PyErr_ExceptionMatches+0x0
    // 48: &PyExc_TypeError+0x0
    // 50: &_PyErr_Format+0x0
    // 58: &_Py_Dealloc+0x0
    const unsigned char data_body[96] = {
        0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27,
        0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
        0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x28, instruction->oparg);
    patch_64(data + 0x30, (uintptr_t)&PyDict_Update);
    patch_64(data + 0x38, (uintptr_t)&PyExc_AttributeError);
    patch_64(data + 0x40, (uintptr_t)&_PyErr_ExceptionMatches);
    patch_64(data + 0x48, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x50, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x58, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x28);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data + 0x28);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x30);
    patch_aarch64_26r(code + 0x60, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x38);
    patch_aarch64_12x(code + 0x6c, (uintptr_t)data + 0x38);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)data + 0x40);
    patch_aarch64_21rx(code + 0x90, (uintptr_t)data + 0x48);
    patch_aarch64_21r(code + 0x94, (uintptr_t)data);
    patch_aarch64_12(code + 0x98, (uintptr_t)data);
    patch_aarch64_12x(code + 0x9c, (uintptr_t)data + 0x48);
    patch_aarch64_21rx(code + 0xb0, (uintptr_t)data + 0x50);
    patch_aarch64_12x(code + 0xb8, (uintptr_t)data + 0x50);
    patch_aarch64_26r(code + 0xe4, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0xe8, (uintptr_t)data + 0x58);
    patch_aarch64_12x(code + 0xf0, (uintptr_t)data + 0x58);
    patch_aarch64_26r(code + 0x100, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x104, (uintptr_t)data + 0x58);
    patch_aarch64_12x(code + 0x10c, (uintptr_t)data + 0x58);
    patch_aarch64_26r(code + 0x11c, state->instruction_starts[instruction->error_target]);
}

void
emit__END_FOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _END_FOR.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f8ea0      ldr     x0, [x21, #-0x8]!
    // 4: f9002295      str     x21, [x20, #0x40]
    // 8: b9400008      ldr     w8, [x0]
    // c: 37f80088      tbnz    w8, #0x1f, 0x1c <_JIT_ENTRY+0x1c>
    // 10: 71000508      subs    w8, w8, #0x1
    // 14: b9000008      str     w8, [x0]
    // 18: 54000080      b.eq    0x28 <_JIT_ENTRY+0x28>
    // 1c: f9402295      ldr     x21, [x20, #0x40]
    // 20: f900229f      str     xzr, [x20, #0x40]
    // 24: 14000000      b       0x24 <_JIT_ENTRY+0x24>
    // 0000000000000024:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 28: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 30: 910003fd      mov     x29, sp
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 38: d63f0100      blr     x8
    // 3c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 40: f9402295      ldr     x21, [x20, #0x40]
    // 44: f900229f      str     xzr, [x20, #0x40]
    // 48: 14000000      b       0x48 <_JIT_ENTRY+0x48>
    // 0000000000000048:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[72] = {
        0xa0, 0x8e, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x80, 0x00, 0x00, 0x54, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xfd, 0x7b, 0xc1, 0xa8,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x2c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x34, (uintptr_t)data);
}

void
emit__END_SEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _END_SEND.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503f3      mov     x19, x21
    // 4: f85f8eb7      ldr     x23, [x21, #-0x8]!
    // 8: f85f82a0      ldur    x0, [x21, #-0x8]
    // c: b9400008      ldr     w8, [x0]
    // 10: 37f80088      tbnz    w8, #0x1f, 0x20 <_JIT_ENTRY+0x20>
    // 14: 71000508      subs    w8, w8, #0x1
    // 18: b9000008      str     w8, [x0]
    // 1c: 54000060      b.eq    0x28 <_JIT_ENTRY+0x28>
    // 20: f81f0277      stur    x23, [x19, #-0x10]
    // 24: 14000000      b       0x24 <_JIT_ENTRY+0x24>
    // 0000000000000024:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 28: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 30: 910003fd      mov     x29, sp
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 38: d63f0100      blr     x8
    // 3c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 40: f81f0277      stur    x23, [x19, #-0x10]
    // 44: 14000000      b       0x44 <_JIT_ENTRY+0x44>
    // 0000000000000044:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[72] = {
        0xf3, 0x03, 0x15, 0xaa, 0xb7, 0x8e, 0x5f, 0xf8,
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x60, 0x00, 0x00, 0x54,
        0x77, 0x02, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xfd, 0x7b, 0xc1, 0xa8,
        0x77, 0x02, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x2c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x34, (uintptr_t)data);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
}

void
emit__ERROR_POP_N(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ERROR_POP_N.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_EXECUTOR
    // 4: aa1f03e0      mov     x0, xzr
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_EXECUTOR
    // c: f9008ac8      str     x8, [x22, #0x110]
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 18: f9400289      ldr     x9, [x20]
    // 1c: 8b284528      add     x8, x9, w8, uxtw #1
    // 20: 91034108      add     x8, x8, #0xd0
    // 24: a903d688      stp     x8, x21, [x20, #0x38]
    // 28: d65f03c0      ret
    // 2c: 00 00 00 00
    const unsigned char code_body[48] = {
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x1f, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0xc8, 0x8a, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x89, 0x02, 0x40, 0xf9, 0x28, 0x45, 0x28, 0x8b,
        0x08, 0x41, 0x03, 0x91, 0x88, 0xd6, 0x03, 0xa9,
        0xc0, 0x03, 0x5f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: EXECUTOR
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data + 0x8);
}

void
emit__EXIT_INIT_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _EXIT_INIT_CHECK.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _Py_NoneStruct
    // 8: f85f8d09      ldr     x9, [x8, #-0x8]!
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_NoneStruct
    // 10: eb0a013f      cmp     x9, x10
    // 14: 54000240      b.eq    0x5c <_JIT_ENTRY+0x5c>
    // 18: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 1c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  R_AARCH64_ADR_GOT_PAGE       PyExc_TypeError
    // 20: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1
    // 24: 91000021      add     x1, x1, #0x0
    // 0000000000000024:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1
    // 28: f9400108      ldr     x8, [x8]
    // 0000000000000028:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_TypeError
    // 2c: f9400529      ldr     x9, [x9, #0x8]
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: 910003fd      mov     x29, sp
    // 38: f9400100      ldr     x0, [x8]
    // 3c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  R_AARCH64_ADR_GOT_PAGE       PyErr_Format
    // 40: f9400d22      ldr     x2, [x9, #0x18]
    // 44: f9400108      ldr     x8, [x8]
    // 0000000000000044:  R_AARCH64_LD64_GOT_LO12_NC   PyErr_Format
    // 48: d63f0100      blr     x8
    // 4c: f9402295      ldr     x21, [x20, #0x40]
    // 50: f900229f      str     xzr, [x20, #0x40]
    // 54: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 58: 14000000      b       0x58 <_JIT_ENTRY+0x58>
    // 0000000000000058:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 5c: aa0803f5      mov     x21, x8
    // 60: 14000000      b       0x60 <_JIT_ENTRY+0x60>
    // 0000000000000060:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[96] = {
        0xe8, 0x03, 0x15, 0xaa, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x8d, 0x5f, 0xf8, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x40, 0x02, 0x00, 0x54,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x01, 0x00, 0x00, 0x90, 0x21, 0x00, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x05, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x01, 0x40, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x22, 0x0d, 0x40, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf5, 0x03, 0x08, 0xaa,
    };
    // 0: "__init__() should return None, not '%.200s'\x00"
    // 2c: 00 00 00 00
    // 30: &_Py_NoneStruct+0x0
    // 38: &PyExc_TypeError+0x0
    // 40: &PyErr_Format+0x0
    const unsigned char data_body[72] = {
        0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f,
        0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
        0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
        0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e,
        0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30,
        0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x38, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x40, (uintptr_t)&PyErr_Format);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x30);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data + 0x30);
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data + 0x38);
    patch_aarch64_21r(code + 0x20, (uintptr_t)data);
    patch_aarch64_12(code + 0x24, (uintptr_t)data);
    patch_aarch64_12x(code + 0x28, (uintptr_t)data + 0x38);
    patch_aarch64_21rx(code + 0x3c, (uintptr_t)data + 0x40);
    patch_aarch64_12x(code + 0x44, (uintptr_t)data + 0x40);
    patch_aarch64_26r(code + 0x58, state->instruction_starts[instruction->error_target]);
}

void
emit__EXIT_TRACE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _EXIT_TRACE.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 90000017      adrp    x23, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // c: 910043fd      add     x29, sp, #0x10
    // 10: f94002f7      ldr     x23, [x23]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 14: f9400298      ldr     x24, [x20]
    // 18: f94006e0      ldr     x0, [x23, #0x8]
    // 1c: b94002f3      ldr     w19, [x23]
    // 20: b4000800      cbz     x0, 0x120 <_JIT_ENTRY+0x120>
    // 24: 39408808      ldrb    w8, [x0, #0x22]
    // 28: 37000608      tbnz    w8, #0x0, 0xe8 <_JIT_ENTRY+0xe8>
    // 2c: 529fff88      mov     w8, #0xfffc             // =65532
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: 79000ae8      strh    w8, [x23, #0x4]
    // 38: f90006ff      str     xzr, [x23, #0x8]
    // 3c: b9400008      ldr     w8, [x0]
    // 40: 37f806c8      tbnz    w8, #0x1f, 0x118 <_JIT_ENTRY+0x118>
    // 44: 71000508      subs    w8, w8, #0x1
    // 48: b9000008      str     w8, [x0]
    // 4c: 54000081      b.ne    0x5c <_JIT_ENTRY+0x5c>
    // 50: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 54: f9400108      ldr     x8, [x8]
    // 0000000000000054:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 58: d63f0100      blr     x8
    // 5c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  R_AARCH64_ADR_GOT_PAGE       _JIT_EXECUTOR
    // 60: f94006e0      ldr     x0, [x23, #0x8]
    // 64: f9400108      ldr     x8, [x8]
    // 0000000000000064:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_EXECUTOR
    // 68: f9402295      ldr     x21, [x20, #0x40]
    // 6c: f900229f      str     xzr, [x20, #0x40]
    // 70: f9008ac8      str     x8, [x22, #0x110]
    // 74: b5000400      cbnz    x0, 0xf4 <_JIT_ENTRY+0xf4>
    // 78: 79400af9      ldrh    w25, [x23, #0x4]
    // 7c: 8b130708      add     x8, x24, x19, lsl #1
    // 80: 71003f3f      cmp     w25, #0xf
    // 84: 91034113      add     x19, x8, #0xd0
    // 88: 540005c2      b.hs    0x140 <_JIT_ENTRY+0x140>
    // 8c: 39400268      ldrb    w8, [x19]
    // 90: 7103fd1f      cmp     w8, #0xff
    // 94: 54000640      b.eq    0x15c <_JIT_ENTRY+0x15c>
    // 98: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  R_AARCH64_ADR_GOT_PAGE       _JIT_EXECUTOR
    // 9c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  R_AARCH64_ADR_GOT_PAGE       _PyOptimizer_Optimize
    // a0: 910023e2      add     x2, sp, #0x8
    // a4: f9400108      ldr     x8, [x8]
    // 00000000000000a4:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_EXECUTOR
    // a8: f9002295      str     x21, [x20, #0x40]
    // ac: aa1403e0      mov     x0, x20
    // b0: aa1303e1      mov     x1, x19
    // b4: 39408908      ldrb    w8, [x8, #0x22]
    // b8: f9400129      ldr     x9, [x9]
    // 00000000000000b8:  R_AARCH64_LD64_GOT_LO12_NC   _PyOptimizer_Optimize
    // bc: 53027d08      lsr     w8, w8, #2
    // c0: 11000503      add     w3, w8, #0x1
    // c4: d63f0120      blr     x9
    // c8: f9402295      ldr     x21, [x20, #0x40]
    // cc: 7100001f      cmp     w0, #0x0
    // d0: f900229f      str     xzr, [x20, #0x40]
    // d4: 540005cd      b.le    0x18c <_JIT_ENTRY+0x18c>
    // d8: f94007e0      ldr     x0, [sp, #0x8]
    // dc: 529fff88      mov     w8, #0xfffc             // =65532
    // e0: 79000ae8      strh    w8, [x23, #0x4]
    // e4: 14000026      b       0x17c <_JIT_ENTRY+0x17c>
    // e8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e8:  R_AARCH64_ADR_GOT_PAGE       _JIT_EXECUTOR
    // ec: f9400108      ldr     x8, [x8]
    // 00000000000000ec:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_EXECUTOR
    // f0: f9008ac8      str     x8, [x22, #0x110]
    // f4: b9400008      ldr     w8, [x0]
    // f8: 37f80088      tbnz    w8, #0x1f, 0x108 <_JIT_ENTRY+0x108>
    // fc: 11000508      add     w8, w8, #0x1
    // 100: b9000008      str     w8, [x0]
    // 104: f94006e0      ldr     x0, [x23, #0x8]
    // 108: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 10c: f9403c00      ldr     x0, [x0, #0x78]
    // 110: 910083ff      add     sp, sp, #0x20
    // 114: d61f0000      br      x0
    // 118: f9402295      ldr     x21, [x20, #0x40]
    // 11c: f900229f      str     xzr, [x20, #0x40]
    // 120: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000120:  R_AARCH64_ADR_GOT_PAGE       _JIT_EXECUTOR
    // 124: f9400108      ldr     x8, [x8]
    // 0000000000000124:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_EXECUTOR
    // 128: f9008ac8      str     x8, [x22, #0x110]
    // 12c: 79400af9      ldrh    w25, [x23, #0x4]
    // 130: 8b130708      add     x8, x24, x19, lsl #1
    // 134: 71003f3f      cmp     w25, #0xf
    // 138: 91034113      add     x19, x8, #0xd0
    // 13c: 54fffa83      b.lo    0x8c <_JIT_ENTRY+0x8c>
    // 140: 51004328      sub     w8, w25, #0x10
    // 144: f9002295      str     x21, [x20, #0x40]
    // 148: 79000ae8      strh    w8, [x23, #0x4]
    // 14c: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 150: aa1303e0      mov     x0, x19
    // 154: 910083ff      add     sp, sp, #0x20
    // 158: d65f03c0      ret
    // 15c: f9404f08      ldr     x8, [x24, #0x98]
    // 160: 39400669      ldrb    w9, [x19, #0x1]
    // 164: 8b090d08      add     x8, x8, x9, lsl #3
    // 168: f9400500      ldr     x0, [x8, #0x8]
    // 16c: b9400008      ldr     w8, [x0]
    // 170: 37f80068      tbnz    w8, #0x1f, 0x17c <_JIT_ENTRY+0x17c>
    // 174: 11000508      add     w8, w8, #0x1
    // 178: b9000008      str     w8, [x0]
    // 17c: f90006e0      str     x0, [x23, #0x8]
    // 180: b9400008      ldr     w8, [x0]
    // 184: 36fffbc8      tbz     w8, #0x1f, 0xfc <_JIT_ENTRY+0xfc>
    // 188: 17ffffe0      b       0x108 <_JIT_ENTRY+0x108>
    // 18c: 71002f3f      cmp     w25, #0xb
    // 190: 54000108      b.hi    0x1b0 <_JIT_ENTRY+0x1b0>
    // 194: 52800048      mov     w8, #0x2                // =2
    // 198: 11000729      add     w9, w25, #0x1
    // 19c: 1ad92108      lsl     w8, w8, w25
    // 1a0: 531c6d08      lsl     w8, w8, #4
    // 1a4: 51004108      sub     w8, w8, #0x10
    // 1a8: 2a090108      orr     w8, w8, w9
    // 1ac: 14000002      b       0x1b4 <_JIT_ENTRY+0x1b4>
    // 1b0: 529fff88      mov     w8, #0xfffc             // =65532
    // 1b4: 7100001f      cmp     w0, #0x0
    // 1b8: 79000ae8      strh    w8, [x23, #0x4]
    // 1bc: 9a9f0273      csel    x19, x19, xzr, eq
    // 1c0: f9002295      str     x21, [x20, #0x40]
    // 1c4: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 1c8: aa1303e0      mov     x0, x19
    // 1cc: 910083ff      add     sp, sp, #0x20
    // 1d0: d65f03c0      ret
    // 1d4: 00 00 00 00
    const unsigned char code_body[472] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0x17, 0x00, 0x00, 0x90, 0xfd, 0x43, 0x00, 0x91,
        0xf7, 0x02, 0x40, 0xf9, 0x98, 0x02, 0x40, 0xf9,
        0xe0, 0x06, 0x40, 0xf9, 0xf3, 0x02, 0x40, 0xb9,
        0x00, 0x08, 0x00, 0xb4, 0x08, 0x88, 0x40, 0x39,
        0x08, 0x06, 0x00, 0x37, 0x88, 0xff, 0x9f, 0x52,
        0x95, 0x22, 0x00, 0xf9, 0xe8, 0x0a, 0x00, 0x79,
        0xff, 0x06, 0x00, 0xf9, 0x08, 0x00, 0x40, 0xb9,
        0xc8, 0x06, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x06, 0x40, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xc8, 0x8a, 0x00, 0xf9, 0x00, 0x04, 0x00, 0xb5,
        0xf9, 0x0a, 0x40, 0x79, 0x08, 0x07, 0x13, 0x8b,
        0x3f, 0x3f, 0x00, 0x71, 0x13, 0x41, 0x03, 0x91,
        0xc2, 0x05, 0x00, 0x54, 0x68, 0x02, 0x40, 0x39,
        0x1f, 0xfd, 0x03, 0x71, 0x40, 0x06, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0xe2, 0x23, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x14, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0x08, 0x89, 0x40, 0x39,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x7d, 0x02, 0x53,
        0x03, 0x05, 0x00, 0x11, 0x20, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x1f, 0x00, 0x00, 0x71,
        0x9f, 0x22, 0x00, 0xf9, 0xcd, 0x05, 0x00, 0x54,
        0xe0, 0x07, 0x40, 0xf9, 0x88, 0xff, 0x9f, 0x52,
        0xe8, 0x0a, 0x00, 0x79, 0x26, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xc8, 0x8a, 0x00, 0xf9, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x08, 0x00, 0x00, 0xb9, 0xe0, 0x06, 0x40, 0xf9,
        0xfd, 0x7b, 0x41, 0xa9, 0x00, 0x3c, 0x40, 0xf9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x1f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xc8, 0x8a, 0x00, 0xf9, 0xf9, 0x0a, 0x40, 0x79,
        0x08, 0x07, 0x13, 0x8b, 0x3f, 0x3f, 0x00, 0x71,
        0x13, 0x41, 0x03, 0x91, 0x83, 0xfa, 0xff, 0x54,
        0x28, 0x43, 0x00, 0x51, 0x95, 0x22, 0x00, 0xf9,
        0xe8, 0x0a, 0x00, 0x79, 0xfd, 0x7b, 0x41, 0xa9,
        0xe0, 0x03, 0x13, 0xaa, 0xff, 0x83, 0x00, 0x91,
        0xc0, 0x03, 0x5f, 0xd6, 0x08, 0x4f, 0x40, 0xf9,
        0x69, 0x06, 0x40, 0x39, 0x08, 0x0d, 0x09, 0x8b,
        0x00, 0x05, 0x40, 0xf9, 0x08, 0x00, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x08, 0x00, 0x00, 0xb9, 0xe0, 0x06, 0x00, 0xf9,
        0x08, 0x00, 0x40, 0xb9, 0xc8, 0xfb, 0xff, 0x36,
        0xe0, 0xff, 0xff, 0x17, 0x3f, 0x2f, 0x00, 0x71,
        0x08, 0x01, 0x00, 0x54, 0x48, 0x00, 0x80, 0x52,
        0x29, 0x07, 0x00, 0x11, 0x08, 0x21, 0xd9, 0x1a,
        0x08, 0x6d, 0x1c, 0x53, 0x08, 0x41, 0x00, 0x51,
        0x08, 0x01, 0x09, 0x2a, 0x02, 0x00, 0x00, 0x14,
        0x88, 0xff, 0x9f, 0x52, 0x1f, 0x00, 0x00, 0x71,
        0xe8, 0x0a, 0x00, 0x79, 0x73, 0x02, 0x9f, 0x9a,
        0x95, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0x41, 0xa9,
        0xe0, 0x03, 0x13, 0xaa, 0xff, 0x83, 0x00, 0x91,
        0xc0, 0x03, 0x5f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    // 10: EXECUTOR
    // 18: &_PyOptimizer_Optimize+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)executor);
    patch_64(data + 0x18, (uintptr_t)&_PyOptimizer_Optimize);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x50, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x98, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x9c, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xa4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xb8, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0xe8, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x120, (uintptr_t)data + 0x10);
}

void
emit__EXPAND_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _EXPAND_METHOD.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: 12003d0b      and     w11, w8, #0xffff
    // c: 12800028      mov     w8, #-0x2               // =-2
    // 10: 4b0b0108      sub     w8, w8, w11
    // 14: 2a2b03eb      mvn     w11, w11
    // 18: f868daa9      ldr     x9, [x21, w8, sxtw #3]
    // 1c: f9400d2a      ldr     x10, [x9, #0x18]
    // 20: b940014c      ldr     w12, [x10]
    // 24: 37f8006c      tbnz    w12, #0x1f, 0x30 <_JIT_ENTRY+0x30>
    // 28: 1100058c      add     w12, w12, #0x1
    // 2c: b900014c      str     w12, [x10]
    // 30: f82bdaaa      str     x10, [x21, w11, sxtw #3]
    // 34: f9400929      ldr     x9, [x9, #0x10]
    // 38: f868daa0      ldr     x0, [x21, w8, sxtw #3]
    // 3c: b940012a      ldr     w10, [x9]
    // 40: 37f8006a      tbnz    w10, #0x1f, 0x4c <_JIT_ENTRY+0x4c>
    // 44: 1100054a      add     w10, w10, #0x1
    // 48: b900012a      str     w10, [x9]
    // 4c: f828daa9      str     x9, [x21, w8, sxtw #3]
    // 50: f9002295      str     x21, [x20, #0x40]
    // 54: b9400008      ldr     w8, [x0]
    // 58: 37f80088      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 5c: 71000508      subs    w8, w8, #0x1
    // 60: b9000008      str     w8, [x0]
    // 64: 54000080      b.eq    0x74 <_JIT_ENTRY+0x74>
    // 68: f9402295      ldr     x21, [x20, #0x40]
    // 6c: f900229f      str     xzr, [x20, #0x40]
    // 70: 14000000      b       0x70 <_JIT_ENTRY+0x70>
    // 0000000000000070:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 74: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 7c: 910003fd      mov     x29, sp
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 84: d63f0100      blr     x8
    // 88: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 8c: f9402295      ldr     x21, [x20, #0x40]
    // 90: f900229f      str     xzr, [x20, #0x40]
    // 94: 14000000      b       0x94 <_JIT_ENTRY+0x94>
    // 0000000000000094:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[152] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x0b, 0x3d, 0x00, 0x12, 0x28, 0x00, 0x80, 0x12,
        0x08, 0x01, 0x0b, 0x4b, 0xeb, 0x03, 0x2b, 0x2a,
        0xa9, 0xda, 0x68, 0xf8, 0x2a, 0x0d, 0x40, 0xf9,
        0x4c, 0x01, 0x40, 0xb9, 0x6c, 0x00, 0xf8, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x4c, 0x01, 0x00, 0xb9,
        0xaa, 0xda, 0x2b, 0xf8, 0x29, 0x09, 0x40, 0xf9,
        0xa0, 0xda, 0x68, 0xf8, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0xda, 0x28, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x80, 0x00, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x70, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x78, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x80, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x94, (uintptr_t)code + sizeof(code_body));
}

void
emit__EXPAND_METHOD_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _EXPAND_METHOD_KW.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: 9280002c      mov     x12, #-0x2              // =-2
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // c: 92403d0a      and     x10, x8, #0xffff
    // 10: 92800048      mov     x8, #-0x3               // =-3
    // 14: cb0a0108      sub     x8, x8, x10
    // 18: cb0a018a      sub     x10, x12, x10
    // 1c: f8687aa0      ldr     x0, [x21, x8, lsl #3]
    // 20: f9400c09      ldr     x9, [x0, #0x18]
    // 24: b940012b      ldr     w11, [x9]
    // 28: 37f8006b      tbnz    w11, #0x1f, 0x34 <_JIT_ENTRY+0x34>
    // 2c: 1100056b      add     w11, w11, #0x1
    // 30: b900012b      str     w11, [x9]
    // 34: f82a7aa9      str     x9, [x21, x10, lsl #3]
    // 38: f9400809      ldr     x9, [x0, #0x10]
    // 3c: b940012a      ldr     w10, [x9]
    // 40: 37f8006a      tbnz    w10, #0x1f, 0x4c <_JIT_ENTRY+0x4c>
    // 44: 1100054a      add     w10, w10, #0x1
    // 48: b900012a      str     w10, [x9]
    // 4c: f8287aa9      str     x9, [x21, x8, lsl #3]
    // 50: f9002295      str     x21, [x20, #0x40]
    // 54: b9400008      ldr     w8, [x0]
    // 58: 37f80088      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 5c: 71000508      subs    w8, w8, #0x1
    // 60: b9000008      str     w8, [x0]
    // 64: 54000080      b.eq    0x74 <_JIT_ENTRY+0x74>
    // 68: f9402295      ldr     x21, [x20, #0x40]
    // 6c: f900229f      str     xzr, [x20, #0x40]
    // 70: 14000000      b       0x70 <_JIT_ENTRY+0x70>
    // 0000000000000070:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 74: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 7c: 910003fd      mov     x29, sp
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 84: d63f0100      blr     x8
    // 88: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 8c: f9402295      ldr     x21, [x20, #0x40]
    // 90: f900229f      str     xzr, [x20, #0x40]
    // 94: 14000000      b       0x94 <_JIT_ENTRY+0x94>
    // 0000000000000094:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[152] = {
        0x08, 0x00, 0x00, 0x90, 0x2c, 0x00, 0x80, 0x92,
        0x08, 0x01, 0x40, 0xf9, 0x0a, 0x3d, 0x40, 0x92,
        0x48, 0x00, 0x80, 0x92, 0x08, 0x01, 0x0a, 0xcb,
        0x8a, 0x01, 0x0a, 0xcb, 0xa0, 0x7a, 0x68, 0xf8,
        0x09, 0x0c, 0x40, 0xf9, 0x2b, 0x01, 0x40, 0xb9,
        0x6b, 0x00, 0xf8, 0x37, 0x6b, 0x05, 0x00, 0x11,
        0x2b, 0x01, 0x00, 0xb9, 0xa9, 0x7a, 0x2a, 0xf8,
        0x09, 0x08, 0x40, 0xf9, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0x7a, 0x28, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x80, 0x00, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x70, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x78, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x80, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x94, (uintptr_t)code + sizeof(code_body));
}

void
emit__FATAL_ERROR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _FATAL_ERROR.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _Py_FatalErrorFunc
    // 8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1
    // c: 91000000      add     x0, x0, #0x0
    // 000000000000000c:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FatalErrorFunc
    // 14: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1+0xb
    // 18: 91000021      add     x1, x1, #0x0
    // 0000000000000018:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1+0xb
    // 1c: 910003fd      mov     x29, sp
    // 20: d63f0100      blr     x8
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x01, 0x00, 0x00, 0x90,
        0x21, 0x00, 0x00, 0x91, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: '_JIT_ENTRY\x00Fatal error uop executed.\x00'
    // 25: 00 00 00
    // 28: &_Py_FatalErrorFunc+0x0
    const unsigned char data_body[48] = {
        0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54,
        0x52, 0x59, 0x00, 0x46, 0x61, 0x74, 0x61, 0x6c,
        0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x75,
        0x6f, 0x70, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75,
        0x74, 0x65, 0x64, 0x2e, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x28, (uintptr_t)&_Py_FatalErrorFunc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x28);
    patch_aarch64_21r(code + 0x8, (uintptr_t)data);
    patch_aarch64_12(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x28);
    patch_aarch64_21r(code + 0x14, (uintptr_t)data + 0xb);
    patch_aarch64_12(code + 0x18, (uintptr_t)data + 0xb);
}

void
emit__FORMAT_SIMPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _FORMAT_SIMPLE.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: aa1503e8      mov     x8, x21
    // 8: f85f8eb3      ldr     x19, [x21, #-0x8]!
    // c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       PyUnicode_Type
    // 10: 910003fd      mov     x29, sp
    // 14: f9400669      ldr     x9, [x19, #0x8]
    // 18: f940014a      ldr     x10, [x10]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   PyUnicode_Type
    // 1c: eb0a013f      cmp     x9, x10
    // 20: 54000260      b.eq    0x6c <_JIT_ENTRY+0x6c>
    // 24: f9002288      str     x8, [x20, #0x40]
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  R_AARCH64_ADR_GOT_PAGE       PyObject_Format
    // 2c: aa1303e0      mov     x0, x19
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_Format
    // 34: aa1f03e1      mov     x1, xzr
    // 38: d63f0100      blr     x8
    // 3c: f9402288      ldr     x8, [x20, #0x40]
    // 40: d1002108      sub     x8, x8, #0x8
    // 44: f9002288      str     x8, [x20, #0x40]
    // 48: b9400268      ldr     w8, [x19]
    // 4c: 37f80088      tbnz    w8, #0x1f, 0x5c <_JIT_ENTRY+0x5c>
    // 50: 71000508      subs    w8, w8, #0x1
    // 54: b9000268      str     w8, [x19]
    // 58: 54000100      b.eq    0x78 <_JIT_ENTRY+0x78>
    // 5c: f9402295      ldr     x21, [x20, #0x40]
    // 60: f900229f      str     xzr, [x20, #0x40]
    // 64: b40001c0      cbz     x0, 0x9c <_JIT_ENTRY+0x9c>
    // 68: aa0003f3      mov     x19, x0
    // 6c: f80086b3      str     x19, [x21], #0x8
    // 70: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 74: 14000000      b       0x74 <_JIT_ENTRY+0x74>
    // 0000000000000074:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 7c: aa0003f5      mov     x21, x0
    // 80: aa1303e0      mov     x0, x19
    // 84: f9400108      ldr     x8, [x8]
    // 0000000000000084:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 88: d63f0100      blr     x8
    // 8c: aa1503e0      mov     x0, x21
    // 90: f9402295      ldr     x21, [x20, #0x40]
    // 94: f900229f      str     xzr, [x20, #0x40]
    // 98: b5fffe80      cbnz    x0, 0x68 <_JIT_ENTRY+0x68>
    // 9c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a0: 14000000      b       0xa0 <_JIT_ENTRY+0xa0>
    // 00000000000000a0:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // a4: 00 00 00 00
    const unsigned char code_body[168] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xe8, 0x03, 0x15, 0xaa,
        0xb3, 0x8e, 0x5f, 0xf8, 0x0a, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x69, 0x06, 0x40, 0xf9,
        0x4a, 0x01, 0x40, 0xf9, 0x3f, 0x01, 0x0a, 0xeb,
        0x60, 0x02, 0x00, 0x54, 0x88, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0xe1, 0x03, 0x1f, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x88, 0x22, 0x40, 0xf9,
        0x08, 0x21, 0x00, 0xd1, 0x88, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x00, 0x01, 0x00, 0x54, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xc0, 0x01, 0x00, 0xb4,
        0xf3, 0x03, 0x00, 0xaa, 0xb3, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x15, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x80, 0xfe, 0xff, 0xb5, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyUnicode_Type+0x0
    // 8: &PyObject_Format+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x8, (uintptr_t)&PyObject_Format);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x74, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x78, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x84, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xa0, state->instruction_starts[instruction->error_target]);
}

void
emit__FORMAT_WITH_SPEC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _FORMAT_WITH_SPEC.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: a97f4eb8      ldp     x24, x19, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyObject_Format
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: 910003fd      mov     x29, sp
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_Format
    // 18: aa1803e0      mov     x0, x24
    // 1c: aa1303e1      mov     x1, x19
    // 20: d63f0100      blr     x8
    // 24: f9402299      ldr     x25, [x20, #0x40]
    // 28: f900229f      str     xzr, [x20, #0x40]
    // 2c: aa0003f7      mov     x23, x0
    // 30: b9400308      ldr     w8, [x24]
    // 34: 37f80108      tbnz    w8, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 38: 71000508      subs    w8, w8, #0x1
    // 3c: b9000308      str     w8, [x24]
    // 40: 540000a1      b.ne    0x54 <_JIT_ENTRY+0x54>
    // 44: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 48: aa1803e0      mov     x0, x24
    // 4c: f9400108      ldr     x8, [x8]
    // 000000000000004c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 50: d63f0100      blr     x8
    // 54: b9400268      ldr     w8, [x19]
    // 58: 37f80088      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 5c: 71000508      subs    w8, w8, #0x1
    // 60: b9000268      str     w8, [x19]
    // 64: 540000c0      b.eq    0x7c <_JIT_ENTRY+0x7c>
    // 68: b4000157      cbz     x23, 0x90 <_JIT_ENTRY+0x90>
    // 6c: d1002335      sub     x21, x25, #0x8
    // 70: f81f0337      stur    x23, [x25, #-0x10]
    // 74: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 78: 14000000      b       0x78 <_JIT_ENTRY+0x78>
    // 0000000000000078:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 7c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 80: aa1303e0      mov     x0, x19
    // 84: f9400108      ldr     x8, [x8]
    // 0000000000000084:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 88: d63f0100      blr     x8
    // 8c: b5ffff17      cbnz    x23, 0x6c <_JIT_ENTRY+0x6c>
    // 90: d1004335      sub     x21, x25, #0x10
    // 94: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 98: 14000000      b       0x98 <_JIT_ENTRY+0x98>
    // 0000000000000098:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 9c: 00 00 00 00
    const unsigned char code_body[160] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb8, 0x4e, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0x95, 0x22, 0x00, 0xf9,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x99, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf7, 0x03, 0x00, 0xaa,
        0x08, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xc0, 0x00, 0x00, 0x54,
        0x57, 0x01, 0x00, 0xb4, 0x35, 0x23, 0x00, 0xd1,
        0x37, 0x03, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x17, 0xff, 0xff, 0xb5,
        0x35, 0x43, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyObject_Format+0x0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_Format);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x78, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x7c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x84, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x98, state->instruction_starts[instruction->error_target]);
}

void
emit__FOR_ITER_GEN_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _FOR_ITER_GEN_FRAME.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyGen_Type
    // 8: f9400509      ldr     x9, [x8, #0x8]
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyGen_Type
    // 10: eb0a013f      cmp     x9, x10
    // 14: 54000061      b.ne    0x20 <_JIT_ENTRY+0x20>
    // 18: 39c10d09      ldrsb   w9, [x8, #0x43]
    // 1c: 37f80049      tbnz    w9, #0x1f, 0x24 <_JIT_ENTRY+0x24>
    // 20: 14000000      b       0x20 <_JIT_ENTRY+0x20>
    // 0000000000000020:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 24: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  R_AARCH64_ADR_GOT_PAGE       _Py_NoneStruct
    // 28: f9404509      ldr     x9, [x8, #0x88]
    // 2c: 9100a10b      add     x11, x8, #0x28
    // 30: f940014a      ldr     x10, [x10]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   _Py_NoneStruct
    // 34: f900012a      str     x10, [x9]
    // 38: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 3c: f9400129      ldr     x9, [x9]
    // 000000000000003c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 40: f9403eca      ldr     x10, [x22, #0x78]
    // 44: f9003ecb      str     x11, [x22, #0x78]
    // 48: f940450b      ldr     x11, [x8, #0x88]
    // 4c: 39010d1f      strb    wzr, [x8, #0x43]
    // 50: 11000929      add     w9, w9, #0x2
    // 54: f900190a      str     x10, [x8, #0x30]
    // 58: 9101210a      add     x10, x8, #0x48
    // 5c: 79009289      strh    w9, [x20, #0x48]
    // 60: 91002169      add     x9, x11, #0x8
    // 64: f9002914      str     x20, [x8, #0x50]
    // 68: f9004509      str     x9, [x8, #0x88]
    // 6c: f80086aa      str     x10, [x21], #0x8
    // 70: 14000000      b       0x70 <_JIT_ENTRY+0x70>
    // 0000000000000070:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[112] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x05, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x61, 0x00, 0x00, 0x54,
        0x09, 0x0d, 0xc1, 0x39, 0x49, 0x00, 0xf8, 0x37,
        0x00, 0x00, 0x00, 0x14, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x45, 0x40, 0xf9, 0x0b, 0xa1, 0x00, 0x91,
        0x4a, 0x01, 0x40, 0xf9, 0x2a, 0x01, 0x00, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0xca, 0x3e, 0x40, 0xf9, 0xcb, 0x3e, 0x00, 0xf9,
        0x0b, 0x45, 0x40, 0xf9, 0x1f, 0x0d, 0x01, 0x39,
        0x29, 0x09, 0x00, 0x11, 0x0a, 0x19, 0x00, 0xf9,
        0x0a, 0x21, 0x01, 0x91, 0x89, 0x92, 0x00, 0x79,
        0x69, 0x21, 0x00, 0x91, 0x14, 0x29, 0x00, 0xf9,
        0x09, 0x45, 0x00, 0xf9, 0xaa, 0x86, 0x00, 0xf8,
    };
    // 0: &PyGen_Type+0x0
    // 8: &_Py_NoneStruct+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyGen_Type);
    patch_64(data + 0x8, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x20, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data + 0x10);
}

void
emit__FOR_ITER_TIER_TWO(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _FOR_ITER_TIER_TWO.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: 910003fd      mov     x29, sp
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: f9400408      ldr     x8, [x0, #0x8]
    // 14: f9407108      ldr     x8, [x8, #0xe0]
    // 18: d63f0100      blr     x8
    // 1c: f9402295      ldr     x21, [x20, #0x40]
    // 20: f900229f      str     xzr, [x20, #0x40]
    // 24: b4000080      cbz     x0, 0x34 <_JIT_ENTRY+0x34>
    // 28: f80086a0      str     x0, [x21], #0x8
    // 2c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 34: f9403ac8      ldr     x8, [x22, #0x70]
    // 38: b4000368      cbz     x8, 0xa4 <_JIT_ENTRY+0xa4>
    // 3c: f9400508      ldr     x8, [x8, #0x8]
    // 40: b4000328      cbz     x8, 0xa4 <_JIT_ENTRY+0xa4>
    // 44: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  R_AARCH64_ADR_GOT_PAGE       PyExc_StopIteration
    // 48: aa1603e0      mov     x0, x22
    // 4c: f9400108      ldr     x8, [x8]
    // 000000000000004c:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_StopIteration
    // 50: f9002295      str     x21, [x20, #0x40]
    // 54: f9400101      ldr     x1, [x8]
    // 58: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  R_AARCH64_ADR_GOT_PAGE       _PyErr_ExceptionMatches
    // 5c: f9400108      ldr     x8, [x8]
    // 000000000000005c:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_ExceptionMatches
    // 60: d63f0100      blr     x8
    // 64: f9402295      ldr     x21, [x20, #0x40]
    // 68: f900229f      str     xzr, [x20, #0x40]
    // 6c: 34000200      cbz     w0, 0xac <_JIT_ENTRY+0xac>
    // 70: f9002295      str     x21, [x20, #0x40]
    // 74: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  R_AARCH64_ADR_GOT_PAGE       _PyEval_MonitorRaise
    // 78: f9401e82      ldr     x2, [x20, #0x38]
    // 7c: f9400108      ldr     x8, [x8]
    // 000000000000007c:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_MonitorRaise
    // 80: aa1603e0      mov     x0, x22
    // 84: aa1403e1      mov     x1, x20
    // 88: d63f0100      blr     x8
    // 8c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  R_AARCH64_ADR_GOT_PAGE       _PyErr_Clear
    // 90: aa1603e0      mov     x0, x22
    // 94: f9400108      ldr     x8, [x8]
    // 0000000000000094:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_Clear
    // 98: d63f0100      blr     x8
    // 9c: f9402295      ldr     x21, [x20, #0x40]
    // a0: f900229f      str     xzr, [x20, #0x40]
    // a4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a8: 14000000      b       0xa8 <_JIT_ENTRY+0xa8>
    // 00000000000000a8:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // ac: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b0: 14000000      b       0xb0 <_JIT_ENTRY+0xb0>
    // 00000000000000b0:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // b4: 00 00 00 00
    const unsigned char code_body[184] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xa0, 0x82, 0x5f, 0xf8,
        0xfd, 0x03, 0x00, 0x91, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x04, 0x40, 0xf9, 0x08, 0x71, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x80, 0x00, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xc8, 0x3a, 0x40, 0xf9,
        0x68, 0x03, 0x00, 0xb4, 0x08, 0x05, 0x40, 0xf9,
        0x28, 0x03, 0x00, 0xb4, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x16, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x01, 0x01, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x34,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x82, 0x1e, 0x40, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0xe1, 0x03, 0x14, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x16, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyExc_StopIteration+0x0
    // 8: &_PyErr_ExceptionMatches+0x0
    // 10: &_PyEval_MonitorRaise+0x0
    // 18: &_PyErr_Clear+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyExc_StopIteration);
    patch_64(data + 0x8, (uintptr_t)&_PyErr_ExceptionMatches);
    patch_64(data + 0x10, (uintptr_t)&_PyEval_MonitorRaise);
    patch_64(data + 0x18, (uintptr_t)&_PyErr_Clear);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x74, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x7c, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x8c, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x94, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0xa8, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0xb0, state->instruction_starts[instruction->error_target]);
}

void
emit__GET_AITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_AITER.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: 910003fd      mov     x29, sp
    // c: f9400668      ldr     x8, [x19, #0x8]
    // 10: f9402909      ldr     x9, [x8, #0x50]
    // 14: b40002e9      cbz     x9, 0x70 <_JIT_ENTRY+0x70>
    // 18: f9400529      ldr     x9, [x9, #0x8]
    // 1c: b40002a9      cbz     x9, 0x70 <_JIT_ENTRY+0x70>
    // 20: aa1303e0      mov     x0, x19
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: d63f0120      blr     x9
    // 2c: f9402295      ldr     x21, [x20, #0x40]
    // 30: f900229f      str     xzr, [x20, #0x40]
    // 34: aa0003f7      mov     x23, x0
    // 38: b9400268      ldr     w8, [x19]
    // 3c: 37f80088      tbnz    w8, #0x1f, 0x4c <_JIT_ENTRY+0x4c>
    // 40: 71000508      subs    w8, w8, #0x1
    // 44: b9000268      str     w8, [x19]
    // 48: 54000760      b.eq    0x134 <_JIT_ENTRY+0x134>
    // 4c: b4000377      cbz     x23, 0xb8 <_JIT_ENTRY+0xb8>
    // 50: f94006e8      ldr     x8, [x23, #0x8]
    // 54: f9402909      ldr     x9, [x8, #0x50]
    // 58: b4000369      cbz     x9, 0xc4 <_JIT_ENTRY+0xc4>
    // 5c: f9400929      ldr     x9, [x9, #0x10]
    // 60: b4000329      cbz     x9, 0xc4 <_JIT_ENTRY+0xc4>
    // 64: f81f82b7      stur    x23, [x21, #-0x8]
    // 68: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 6c: 14000000      b       0x6c <_JIT_ENTRY+0x6c>
    // 000000000000006c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 70: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  R_AARCH64_ADR_GOT_PAGE       PyExc_TypeError
    // 74: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1
    // 78: 91000042      add     x2, x2, #0x0
    // 0000000000000078:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1
    // 7c: f9400129      ldr     x9, [x9]
    // 000000000000007c:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_TypeError
    // 80: f9400d03      ldr     x3, [x8, #0x18]
    // 84: f9002295      str     x21, [x20, #0x40]
    // 88: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  R_AARCH64_ADR_GOT_PAGE       _PyErr_Format
    // 8c: aa1603e0      mov     x0, x22
    // 90: f9400121      ldr     x1, [x9]
    // 94: f9400108      ldr     x8, [x8]
    // 0000000000000094:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_Format
    // 98: d63f0100      blr     x8
    // 9c: f9402295      ldr     x21, [x20, #0x40]
    // a0: f900229f      str     xzr, [x20, #0x40]
    // a4: b9400268      ldr     w8, [x19]
    // a8: 37f80088      tbnz    w8, #0x1f, 0xb8 <_JIT_ENTRY+0xb8>
    // ac: 71000508      subs    w8, w8, #0x1
    // b0: b9000268      str     w8, [x19]
    // b4: 54000320      b.eq    0x118 <_JIT_ENTRY+0x118>
    // b8: d10022b5      sub     x21, x21, #0x8
    // bc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c0: 14000000      b       0xc0 <_JIT_ENTRY+0xc0>
    // 00000000000000c0:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // c4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000c4:  R_AARCH64_ADR_GOT_PAGE       PyExc_TypeError
    // c8: d10022aa      sub     x10, x21, #0x8
    // cc: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1+0x41
    // d0: 91000042      add     x2, x2, #0x0
    // 00000000000000d0:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1+0x41
    // d4: f9400129      ldr     x9, [x9]
    // 00000000000000d4:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_TypeError
    // d8: f9400d03      ldr     x3, [x8, #0x18]
    // dc: f900228a      str     x10, [x20, #0x40]
    // e0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e0:  R_AARCH64_ADR_GOT_PAGE       _PyErr_Format
    // e4: aa1603e0      mov     x0, x22
    // e8: f9400121      ldr     x1, [x9]
    // ec: f9400108      ldr     x8, [x8]
    // 00000000000000ec:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_Format
    // f0: d63f0100      blr     x8
    // f4: b94002e8      ldr     w8, [x23]
    // f8: 37f80088      tbnz    w8, #0x1f, 0x108 <_JIT_ENTRY+0x108>
    // fc: 71000508      subs    w8, w8, #0x1
    // 100: b90002e8      str     w8, [x23]
    // 104: 54000240      b.eq    0x14c <_JIT_ENTRY+0x14c>
    // 108: f9402295      ldr     x21, [x20, #0x40]
    // 10c: f900229f      str     xzr, [x20, #0x40]
    // 110: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 114: 14000000      b       0x114 <_JIT_ENTRY+0x114>
    // 0000000000000114:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 118: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000118:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 11c: aa1303e0      mov     x0, x19
    // 120: f9400108      ldr     x8, [x8]
    // 0000000000000120:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 124: d63f0100      blr     x8
    // 128: d10022b5      sub     x21, x21, #0x8
    // 12c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 130: 14000000      b       0x130 <_JIT_ENTRY+0x130>
    // 0000000000000130:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 134: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000134:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 138: aa1303e0      mov     x0, x19
    // 13c: f9400108      ldr     x8, [x8]
    // 000000000000013c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 140: d63f0100      blr     x8
    // 144: b5fff877      cbnz    x23, 0x50 <_JIT_ENTRY+0x50>
    // 148: 17ffffdc      b       0xb8 <_JIT_ENTRY+0xb8>
    // 14c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000014c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 150: aa1703e0      mov     x0, x23
    // 154: f9400108      ldr     x8, [x8]
    // 0000000000000154:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 158: d63f0100      blr     x8
    // 15c: f9402295      ldr     x21, [x20, #0x40]
    // 160: f900229f      str     xzr, [x20, #0x40]
    // 164: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 168: 14000000      b       0x168 <_JIT_ENTRY+0x168>
    // 0000000000000168:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 16c: 00 00 00 00
    const unsigned char code_body[368] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb3, 0x82, 0x5f, 0xf8,
        0xfd, 0x03, 0x00, 0x91, 0x68, 0x06, 0x40, 0xf9,
        0x09, 0x29, 0x40, 0xf9, 0xe9, 0x02, 0x00, 0xb4,
        0x29, 0x05, 0x40, 0xf9, 0xa9, 0x02, 0x00, 0xb4,
        0xe0, 0x03, 0x13, 0xaa, 0x95, 0x22, 0x00, 0xf9,
        0x20, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf7, 0x03, 0x00, 0xaa,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x60, 0x07, 0x00, 0x54, 0x77, 0x03, 0x00, 0xb4,
        0xe8, 0x06, 0x40, 0xf9, 0x09, 0x29, 0x40, 0xf9,
        0x69, 0x03, 0x00, 0xb4, 0x29, 0x09, 0x40, 0xf9,
        0x29, 0x03, 0x00, 0xb4, 0xb7, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x09, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0x29, 0x01, 0x40, 0xf9,
        0x03, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x21, 0x01, 0x40, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0x20, 0x03, 0x00, 0x54,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x09, 0x00, 0x00, 0x90,
        0xaa, 0x22, 0x00, 0xd1, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0x29, 0x01, 0x40, 0xf9,
        0x03, 0x0d, 0x40, 0xf9, 0x8a, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x21, 0x01, 0x40, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe8, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0x40, 0x02, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x77, 0xf8, 0xff, 0xb5,
        0xdc, 0xff, 0xff, 0x17, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: "'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
    // 99: 00 00 00 00 00 00 00
    // a0: &PyExc_TypeError+0x0
    // a8: &_PyErr_Format+0x0
    // b0: &_Py_Dealloc+0x0
    const unsigned char data_body[184] = {
        0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66,
        0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75,
        0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20,
        0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77,
        0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69,
        0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65,
        0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f,
        0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73,
        0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20,
        0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63,
        0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e,
        0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
        0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61,
        0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74,
        0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73,
        0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70,
        0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f,
        0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f,
        0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0xa0, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0xa8, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0xb0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x6c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x70, (uintptr_t)data + 0xa0);
    patch_aarch64_21r(code + 0x74, (uintptr_t)data);
    patch_aarch64_12(code + 0x78, (uintptr_t)data);
    patch_aarch64_12x(code + 0x7c, (uintptr_t)data + 0xa0);
    patch_aarch64_21rx(code + 0x88, (uintptr_t)data + 0xa8);
    patch_aarch64_12x(code + 0x94, (uintptr_t)data + 0xa8);
    patch_aarch64_26r(code + 0xc0, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0xc4, (uintptr_t)data + 0xa0);
    patch_aarch64_21r(code + 0xcc, (uintptr_t)data + 0x41);
    patch_aarch64_12(code + 0xd0, (uintptr_t)data + 0x41);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)data + 0xa0);
    patch_aarch64_21rx(code + 0xe0, (uintptr_t)data + 0xa8);
    patch_aarch64_12x(code + 0xec, (uintptr_t)data + 0xa8);
    patch_aarch64_26r(code + 0x114, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0x118, (uintptr_t)data + 0xb0);
    patch_aarch64_12x(code + 0x120, (uintptr_t)data + 0xb0);
    patch_aarch64_26r(code + 0x130, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0x134, (uintptr_t)data + 0xb0);
    patch_aarch64_12x(code + 0x13c, (uintptr_t)data + 0xb0);
    patch_aarch64_21rx(code + 0x14c, (uintptr_t)data + 0xb0);
    patch_aarch64_12x(code + 0x154, (uintptr_t)data + 0xb0);
    patch_aarch64_26r(code + 0x168, state->instruction_starts[instruction->error_target]);
}

void
emit__GET_ANEXT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_ANEXT.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       _PyEval_GetANext
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_GetANext
    // 14: 910003fd      mov     x29, sp
    // 18: d63f0100      blr     x8
    // 1c: f9402295      ldr     x21, [x20, #0x40]
    // 20: f900229f      str     xzr, [x20, #0x40]
    // 24: b4000080      cbz     x0, 0x34 <_JIT_ENTRY+0x34>
    // 28: f80086a0      str     x0, [x21], #0x8
    // 2c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 14000000      b       0x38 <_JIT_ENTRY+0x38>
    // 0000000000000038:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xa0, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x80, 0x00, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyEval_GetANext+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_GetANext);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x38, state->instruction_starts[instruction->error_target]);
}

void
emit__GET_AWAITABLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_AWAITABLE.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _PyEval_GetAwaitable
    // c: 910003fd      mov     x29, sp
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f85f82b3      ldur    x19, [x21, #-0x8]
    // 18: f9002295      str     x21, [x20, #0x40]
    // 1c: f9400129      ldr     x9, [x9]
    // 000000000000001c:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_GetAwaitable
    // 20: 12003d01      and     w1, w8, #0xffff
    // 24: aa1303e0      mov     x0, x19
    // 28: d63f0120      blr     x9
    // 2c: f9402295      ldr     x21, [x20, #0x40]
    // 30: f900229f      str     xzr, [x20, #0x40]
    // 34: b9400268      ldr     w8, [x19]
    // 38: 37f80088      tbnz    w8, #0x1f, 0x48 <_JIT_ENTRY+0x48>
    // 3c: 71000508      subs    w8, w8, #0x1
    // 40: b9000268      str     w8, [x19]
    // 44: 540000a0      b.eq    0x58 <_JIT_ENTRY+0x58>
    // 48: b4000160      cbz     x0, 0x74 <_JIT_ENTRY+0x74>
    // 4c: f81f82a0      stur    x0, [x21, #-0x8]
    // 50: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 54: 14000000      b       0x54 <_JIT_ENTRY+0x54>
    // 0000000000000054:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 58: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 5c: aa0003f7      mov     x23, x0
    // 60: aa1303e0      mov     x0, x19
    // 64: f9400108      ldr     x8, [x8]
    // 0000000000000064:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 68: d63f0100      blr     x8
    // 6c: aa1703e0      mov     x0, x23
    // 70: b5fffef7      cbnz    x23, 0x4c <_JIT_ENTRY+0x4c>
    // 74: d10022b5      sub     x21, x21, #0x8
    // 78: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 7c: 14000000      b       0x7c <_JIT_ENTRY+0x7c>
    // 000000000000007c:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[128] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0xb3, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x01, 0x3d, 0x00, 0x12, 0xe0, 0x03, 0x13, 0xaa,
        0x20, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x60, 0x01, 0x00, 0xb4, 0xa0, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x17, 0xaa,
        0xf7, 0xfe, 0xff, 0xb5, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &_PyEval_GetAwaitable+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_GetAwaitable);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x58, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x7c, state->instruction_starts[instruction->error_target]);
}

void
emit__GET_ITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_ITER.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       PyObject_GetIter
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_GetIter
    // 14: 910003fd      mov     x29, sp
    // 18: aa1303e0      mov     x0, x19
    // 1c: d63f0100      blr     x8
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: b9400268      ldr     w8, [x19]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 30: 71000508      subs    w8, w8, #0x1
    // 34: b9000268      str     w8, [x19]
    // 38: 540000a0      b.eq    0x4c <_JIT_ENTRY+0x4c>
    // 3c: b4000160      cbz     x0, 0x68 <_JIT_ENTRY+0x68>
    // 40: f81f82a0      stur    x0, [x21, #-0x8]
    // 44: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 48: 14000000      b       0x48 <_JIT_ENTRY+0x48>
    // 0000000000000048:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 50: aa0003f7      mov     x23, x0
    // 54: aa1303e0      mov     x0, x19
    // 58: f9400108      ldr     x8, [x8]
    // 0000000000000058:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 5c: d63f0100      blr     x8
    // 60: aa1703e0      mov     x0, x23
    // 64: b5fffef7      cbnz    x23, 0x40 <_JIT_ENTRY+0x40>
    // 68: d10022b5      sub     x21, x21, #0x8
    // 6c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 70: 14000000      b       0x70 <_JIT_ENTRY+0x70>
    // 0000000000000070:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 74: 00 00 00 00
    const unsigned char code_body[120] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb3, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x60, 0x01, 0x00, 0xb4,
        0xa0, 0x82, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x17, 0xaa, 0xf7, 0xfe, 0xff, 0xb5,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyObject_GetIter+0x0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_GetIter);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x48, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x58, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x70, state->instruction_starts[instruction->error_target]);
}

void
emit__GET_LEN(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_LEN.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       PyObject_Size
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_Size
    // 14: 910003fd      mov     x29, sp
    // 18: d63f0100      blr     x8
    // 1c: f9402295      ldr     x21, [x20, #0x40]
    // 20: f900229f      str     xzr, [x20, #0x40]
    // 24: b7f80100      tbnz    x0, #0x3f, 0x44 <_JIT_ENTRY+0x44>
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  R_AARCH64_ADR_GOT_PAGE       PyLong_FromSsize_t
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  R_AARCH64_LD64_GOT_LO12_NC   PyLong_FromSsize_t
    // 30: d63f0100      blr     x8
    // 34: b4000080      cbz     x0, 0x44 <_JIT_ENTRY+0x44>
    // 38: f80086a0      str     x0, [x21], #0x8
    // 3c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 40: 14000000      b       0x40 <_JIT_ENTRY+0x40>
    // 0000000000000040:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 44: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 48: 14000000      b       0x48 <_JIT_ENTRY+0x48>
    // 0000000000000048:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 4c: 00 00 00 00
    const unsigned char code_body[80] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xa0, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x01, 0xf8, 0xb7,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x80, 0x00, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyObject_Size+0x0
    // 8: &PyLong_FromSsize_t+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_Size);
    patch_64(data + 0x8, (uintptr_t)&PyLong_FromSsize_t);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x48, state->instruction_starts[instruction->error_target]);
}

void
emit__GET_YIELD_FROM_ITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_YIELD_FROM_ITER.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyCoro_Type
    // c: 910003fd      mov     x29, sp
    // 10: f9400668      ldr     x8, [x19, #0x8]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   PyCoro_Type
    // 18: eb09011f      cmp     x8, x9
    // 1c: 540002a0      b.eq    0x70 <_JIT_ENTRY+0x70>
    // 20: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  R_AARCH64_ADR_GOT_PAGE       PyGen_Type
    // 24: f9400129      ldr     x9, [x9]
    // 0000000000000024:  R_AARCH64_LD64_GOT_LO12_NC   PyGen_Type
    // 28: eb09011f      cmp     x8, x9
    // 2c: 540002a0      b.eq    0x80 <_JIT_ENTRY+0x80>
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  R_AARCH64_ADR_GOT_PAGE       PyObject_GetIter
    // 38: aa1303e0      mov     x0, x19
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_GetIter
    // 40: d63f0100      blr     x8
    // 44: f9402295      ldr     x21, [x20, #0x40]
    // 48: f900229f      str     xzr, [x20, #0x40]
    // 4c: b4000380      cbz     x0, 0xbc <_JIT_ENTRY+0xbc>
    // 50: b9400268      ldr     w8, [x19]
    // 54: 37f80388      tbnz    w8, #0x1f, 0xc4 <_JIT_ENTRY+0xc4>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b9000268      str     w8, [x19]
    // 60: 54000380      b.eq    0xd0 <_JIT_ENTRY+0xd0>
    // 64: f81f82a0      stur    x0, [x21, #-0x8]
    // 68: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 6c: 14000000      b       0x6c <_JIT_ENTRY+0x6c>
    // 000000000000006c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 70: f9400288      ldr     x8, [x20]
    // 74: 79406108      ldrh    w8, [x8, #0x30]
    // 78: 7219051f      tst     w8, #0x180
    // 7c: 54000080      b.eq    0x8c <_JIT_ENTRY+0x8c>
    // 80: f81f82b3      stur    x19, [x21, #-0x8]
    // 84: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 88: 14000000      b       0x88 <_JIT_ENTRY+0x88>
    // 0000000000000088:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 8c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  R_AARCH64_ADR_GOT_PAGE       PyExc_TypeError
    // 90: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1
    // 94: 91000042      add     x2, x2, #0x0
    // 0000000000000094:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1
    // 98: f9400108      ldr     x8, [x8]
    // 0000000000000098:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_TypeError
    // 9c: f9002295      str     x21, [x20, #0x40]
    // a0: aa1603e0      mov     x0, x22
    // a4: f9400101      ldr     x1, [x8]
    // a8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a8:  R_AARCH64_ADR_GOT_PAGE       _PyErr_SetString
    // ac: f9400108      ldr     x8, [x8]
    // 00000000000000ac:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_SetString
    // b0: d63f0100      blr     x8
    // b4: f9402295      ldr     x21, [x20, #0x40]
    // b8: f900229f      str     xzr, [x20, #0x40]
    // bc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c0: 14000000      b       0xc0 <_JIT_ENTRY+0xc0>
    // 00000000000000c0:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // c4: f81f82a0      stur    x0, [x21, #-0x8]
    // c8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // cc: 14000000      b       0xcc <_JIT_ENTRY+0xcc>
    // 00000000000000cc:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // d0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000d0:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // d4: aa0003f7      mov     x23, x0
    // d8: aa1303e0      mov     x0, x19
    // dc: f9400108      ldr     x8, [x8]
    // 00000000000000dc:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // e0: d63f0100      blr     x8
    // e4: f81f82b7      stur    x23, [x21, #-0x8]
    // e8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // ec: 14000000      b       0xec <_JIT_ENTRY+0xec>
    // 00000000000000ec:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[240] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb3, 0x82, 0x5f, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x68, 0x06, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0xa0, 0x02, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0xa0, 0x02, 0x00, 0x54,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x80, 0x03, 0x00, 0xb4,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x03, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x80, 0x03, 0x00, 0x54, 0xa0, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x88, 0x02, 0x40, 0xf9, 0x08, 0x61, 0x40, 0x79,
        0x1f, 0x05, 0x19, 0x72, 0x80, 0x00, 0x00, 0x54,
        0xb3, 0x82, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0x01, 0x01, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xa0, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xb7, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: "cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
    // 44: 00 00 00 00
    // 48: &PyCoro_Type+0x0
    // 50: &PyGen_Type+0x0
    // 58: &PyObject_GetIter+0x0
    // 60: &PyExc_TypeError+0x0
    // 68: &_PyErr_SetString+0x0
    // 70: &_Py_Dealloc+0x0
    const unsigned char data_body[120] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27,
        0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72,
        0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f,
        0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20,
        0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69,
        0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d,
        0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
        0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
        0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x48, (uintptr_t)&PyCoro_Type);
    patch_64(data + 0x50, (uintptr_t)&PyGen_Type);
    patch_64(data + 0x58, (uintptr_t)&PyObject_GetIter);
    patch_64(data + 0x60, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x68, (uintptr_t)&_PyErr_SetString);
    patch_64(data + 0x70, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x48);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x48);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data + 0x50);
    patch_aarch64_21rx(code + 0x34, (uintptr_t)data + 0x58);
    patch_aarch64_12x(code + 0x3c, (uintptr_t)data + 0x58);
    patch_aarch64_26r(code + 0x6c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x88, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x8c, (uintptr_t)data + 0x60);
    patch_aarch64_21r(code + 0x90, (uintptr_t)data);
    patch_aarch64_12(code + 0x94, (uintptr_t)data);
    patch_aarch64_12x(code + 0x98, (uintptr_t)data + 0x60);
    patch_aarch64_33rx(code + 0xa8, (uintptr_t)data + 0x68);
    patch_aarch64_26r(code + 0xc0, state->instruction_starts[instruction->error_target]);
    patch_aarch64_26r(code + 0xcc, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0xd0, (uintptr_t)data + 0x70);
    patch_aarch64_12x(code + 0xdc, (uintptr_t)data + 0x70);
    patch_aarch64_26r(code + 0xec, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_BINARY_OP_EXTEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_BINARY_OP_EXTEND.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 8: 910003fd      mov     x29, sp
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 10: a97f06a0      ldp     x0, x1, [x21, #-0x10]
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: f9400508      ldr     x8, [x8, #0x8]
    // 1c: d63f0100      blr     x8
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: 34000060      cbz     w0, 0x34 <_JIT_ENTRY+0x34>
    // 2c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 14000000      b       0x38 <_JIT_ENTRY+0x38>
    // 0000000000000038:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0xa0, 0x06, 0x7f, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x05, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x60, 0x00, 0x00, 0x34, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x38, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_BOTH_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_BOTH_FLOAT.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyFloat_Type
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyFloat_Type
    // 10: eb08013f      cmp     x9, x8
    // 14: 540000a1      b.ne    0x28 <_JIT_ENTRY+0x28>
    // 18: f85f82a9      ldur    x9, [x21, #-0x8]
    // 1c: f9400529      ldr     x9, [x9, #0x8]
    // 20: eb08013f      cmp     x9, x8
    // 24: 54000040      b.eq    0x2c <_JIT_ENTRY+0x2c>
    // 28: 14000000      b       0x28 <_JIT_ENTRY+0x28>
    // 0000000000000028:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 2c: 14000000      b       0x2c <_JIT_ENTRY+0x2c>
    // 000000000000002c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[48] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0xa1, 0x00, 0x00, 0x54,
        0xa9, 0x82, 0x5f, 0xf8, 0x29, 0x05, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyFloat_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x28, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_BOTH_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_BOTH_INT.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyLong_Type
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyLong_Type
    // 10: eb08013f      cmp     x9, x8
    // 14: 540000a1      b.ne    0x28 <_JIT_ENTRY+0x28>
    // 18: f85f82a9      ldur    x9, [x21, #-0x8]
    // 1c: f9400529      ldr     x9, [x9, #0x8]
    // 20: eb08013f      cmp     x9, x8
    // 24: 54000040      b.eq    0x2c <_JIT_ENTRY+0x2c>
    // 28: 14000000      b       0x28 <_JIT_ENTRY+0x28>
    // 0000000000000028:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 2c: 14000000      b       0x2c <_JIT_ENTRY+0x2c>
    // 000000000000002c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[48] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0xa1, 0x00, 0x00, 0x54,
        0xa9, 0x82, 0x5f, 0xf8, 0x29, 0x05, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyLong_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x28, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_BOTH_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_BOTH_UNICODE.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyUnicode_Type
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyUnicode_Type
    // 10: eb08013f      cmp     x9, x8
    // 14: 540000a1      b.ne    0x28 <_JIT_ENTRY+0x28>
    // 18: f85f82a9      ldur    x9, [x21, #-0x8]
    // 1c: f9400529      ldr     x9, [x9, #0x8]
    // 20: eb08013f      cmp     x9, x8
    // 24: 54000040      b.eq    0x2c <_JIT_ENTRY+0x2c>
    // 28: 14000000      b       0x28 <_JIT_ENTRY+0x28>
    // 0000000000000028:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 2c: 14000000      b       0x2c <_JIT_ENTRY+0x2c>
    // 000000000000002c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[48] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0xa1, 0x00, 0x00, 0x54,
        0xa9, 0x82, 0x5f, 0xf8, 0x29, 0x05, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyUnicode_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x28, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_BUILTINS_VERSION_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_BUILTINS_VERSION_PUSH_KEYS.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9401288      ldr     x8, [x20, #0x20]
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyDict_Type
    // 8: f9400509      ldr     x9, [x8, #0x8]
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyDict_Type
    // 10: eb0a013f      cmp     x9, x10
    // 14: 54000121      b.ne    0x38 <_JIT_ENTRY+0x38>
    // 18: f9401108      ldr     x8, [x8, #0x20]
    // 1c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 20: b9400d09      ldr     w9, [x8, #0xc]
    // 24: f940014a      ldr     x10, [x10]
    // 0000000000000024:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 28: 6b2a213f      cmp     w9, w10, uxth
    // 2c: 54000061      b.ne    0x38 <_JIT_ENTRY+0x38>
    // 30: f80086a8      str     x8, [x21], #0x8
    // 34: 14000000      b       0x34 <_JIT_ENTRY+0x34>
    // 0000000000000034:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 38: 14000000      b       0x38 <_JIT_ENTRY+0x38>
    // 0000000000000038:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0x88, 0x12, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x05, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x21, 0x01, 0x00, 0x54,
        0x08, 0x11, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x0d, 0x40, 0xb9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x21, 0x2a, 0x6b, 0x61, 0x00, 0x00, 0x54,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyDict_Type+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x38, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_DORV_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_DORV_NO_DICT.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f85e8109      ldur    x9, [x8, #-0x18]
    // 8: b4000049      cbz     x9, 0x10 <_JIT_ENTRY+0x10>
    // c: 14000000      b       0xc <_JIT_ENTRY+0xc>
    // 000000000000000c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 10: f9400509      ldr     x9, [x8, #0x8]
    // 14: f9401129      ldr     x9, [x9, #0x20]
    // 18: 8b090108      add     x8, x8, x9
    // 1c: 39400d08      ldrb    w8, [x8, #0x3]
    // 20: 34ffff68      cbz     w8, 0xc <_JIT_ENTRY+0xc>
    // 24: 14000000      b       0x24 <_JIT_ENTRY+0x24>
    // 0000000000000024:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[40] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x81, 0x5e, 0xf8,
        0x49, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x14,
        0x09, 0x05, 0x40, 0xf9, 0x29, 0x11, 0x40, 0xf9,
        0x08, 0x01, 0x09, 0x8b, 0x08, 0x0d, 0x40, 0x39,
        0x68, 0xff, 0xff, 0x34, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0xc, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_DORV_VALUES_INST_ATTR_FROM_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: f9401129      ldr     x9, [x9, #0x20]
    // c: 8b090108      add     x8, x8, x9
    // 10: 39400d08      ldrb    w8, [x8, #0x3]
    // 14: 34000048      cbz     w8, 0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x29, 0x11, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0x08, 0x0d, 0x40, 0x39, 0x48, 0x00, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x1c, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_GLOBALS_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_GLOBALS_VERSION.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400e88      ldr     x8, [x20, #0x18]
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyDict_Type
    // 8: f9400509      ldr     x9, [x8, #0x8]
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyDict_Type
    // 10: eb0a013f      cmp     x9, x10
    // 14: 54000101      b.ne    0x34 <_JIT_ENTRY+0x34>
    // 18: f9401108      ldr     x8, [x8, #0x20]
    // 1c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 20: b9400d08      ldr     w8, [x8, #0xc]
    // 24: f9400129      ldr     x9, [x9]
    // 0000000000000024:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 28: 6b29211f      cmp     w8, w9, uxth
    // 2c: 54000041      b.ne    0x34 <_JIT_ENTRY+0x34>
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 34: 14000000      b       0x34 <_JIT_ENTRY+0x34>
    // 0000000000000034:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[56] = {
        0x88, 0x0e, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x05, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x01, 0x01, 0x00, 0x54,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x0d, 0x40, 0xb9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x21, 0x29, 0x6b, 0x41, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyDict_Type+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x34, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_GLOBALS_VERSION_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_GLOBALS_VERSION_PUSH_KEYS.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400e88      ldr     x8, [x20, #0x18]
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyDict_Type
    // 8: f9400509      ldr     x9, [x8, #0x8]
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyDict_Type
    // 10: eb0a013f      cmp     x9, x10
    // 14: 54000121      b.ne    0x38 <_JIT_ENTRY+0x38>
    // 18: f9401108      ldr     x8, [x8, #0x20]
    // 1c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 20: b9400d09      ldr     w9, [x8, #0xc]
    // 24: f940014a      ldr     x10, [x10]
    // 0000000000000024:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 28: 6b2a213f      cmp     w9, w10, uxth
    // 2c: 54000061      b.ne    0x38 <_JIT_ENTRY+0x38>
    // 30: f80086a8      str     x8, [x21], #0x8
    // 34: 14000000      b       0x34 <_JIT_ENTRY+0x34>
    // 0000000000000034:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 38: 14000000      b       0x38 <_JIT_ENTRY+0x38>
    // 0000000000000038:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0x88, 0x0e, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x05, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x21, 0x01, 0x00, 0x54,
        0x08, 0x11, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x0d, 0x40, 0xb9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x21, 0x2a, 0x6b, 0x61, 0x00, 0x00, 0x54,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyDict_Type+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x38, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_IS_FALSE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_IS_FALSE_POP.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // 4: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // c: eb09011f      cmp     x8, x9
    // 10: 54000040      b.eq    0x18 <_JIT_ENTRY+0x18>
    // 14: 14000000      b       0x14 <_JIT_ENTRY+0x14>
    // 0000000000000014:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x09, 0x00, 0x00, 0x90, 0xa8, 0x8e, 0x5f, 0xf8,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_FalseStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x14, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_IS_NONE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_IS_NONE_POP.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _Py_NoneStruct
    // 4: f85f8ea0      ldr     x0, [x21, #-0x8]!
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _Py_NoneStruct
    // c: eb08001f      cmp     x0, x8
    // 10: 54000140      b.eq    0x38 <_JIT_ENTRY+0x38>
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: b9400008      ldr     w8, [x0]
    // 1c: 37f80088      tbnz    w8, #0x1f, 0x2c <_JIT_ENTRY+0x2c>
    // 20: 71000508      subs    w8, w8, #0x1
    // 24: b9000008      str     w8, [x0]
    // 28: 540000a0      b.eq    0x3c <_JIT_ENTRY+0x3c>
    // 2c: f9402295      ldr     x21, [x20, #0x40]
    // 30: f900229f      str     xzr, [x20, #0x40]
    // 34: 14000000      b       0x34 <_JIT_ENTRY+0x34>
    // 0000000000000034:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 38: 14000000      b       0x38 <_JIT_ENTRY+0x38>
    // 0000000000000038:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 3c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 40: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 44: 910003fd      mov     x29, sp
    // 48: f9400108      ldr     x8, [x8]
    // 0000000000000048:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 4c: d63f0100      blr     x8
    // 50: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 54: f9402295      ldr     x21, [x20, #0x40]
    // 58: f900229f      str     xzr, [x20, #0x40]
    // 5c: 14000000      b       0x5c <_JIT_ENTRY+0x5c>
    // 000000000000005c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[96] = {
        0x08, 0x00, 0x00, 0x90, 0xa0, 0x8e, 0x5f, 0xf8,
        0x08, 0x01, 0x40, 0xf9, 0x1f, 0x00, 0x08, 0xeb,
        0x40, 0x01, 0x00, 0x54, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x34, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x48, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x5c, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_IS_NOT_NONE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_IS_NOT_NONE_POP.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f8eb3      ldr     x19, [x21, #-0x8]!
    // 4: f9002295      str     x21, [x20, #0x40]
    // 8: b9400268      ldr     w8, [x19]
    // c: 37f80088      tbnz    w8, #0x1f, 0x1c <_JIT_ENTRY+0x1c>
    // 10: 71000508      subs    w8, w8, #0x1
    // 14: b9000268      str     w8, [x19]
    // 18: 54000100      b.eq    0x38 <_JIT_ENTRY+0x38>
    // 1c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  R_AARCH64_ADR_GOT_PAGE       _Py_NoneStruct
    // 20: f9400108      ldr     x8, [x8]
    // 0000000000000020:  R_AARCH64_LD64_GOT_LO12_NC   _Py_NoneStruct
    // 24: f9402295      ldr     x21, [x20, #0x40]
    // 28: f900229f      str     xzr, [x20, #0x40]
    // 2c: eb08027f      cmp     x19, x8
    // 30: 540001e0      b.eq    0x6c <_JIT_ENTRY+0x6c>
    // 34: 14000000      b       0x34 <_JIT_ENTRY+0x34>
    // 0000000000000034:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 38: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 3c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 40: aa1303e0      mov     x0, x19
    // 44: 910003fd      mov     x29, sp
    // 48: f9400108      ldr     x8, [x8]
    // 0000000000000048:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 4c: d63f0100      blr     x8
    // 50: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 54: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  R_AARCH64_ADR_GOT_PAGE       _Py_NoneStruct
    // 58: f9400108      ldr     x8, [x8]
    // 0000000000000058:  R_AARCH64_LD64_GOT_LO12_NC   _Py_NoneStruct
    // 5c: f9402295      ldr     x21, [x20, #0x40]
    // 60: f900229f      str     xzr, [x20, #0x40]
    // 64: eb08027f      cmp     x19, x8
    // 68: 54fffe61      b.ne    0x34 <_JIT_ENTRY+0x34>
    // 6c: 14000000      b       0x6c <_JIT_ENTRY+0x6c>
    // 000000000000006c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[112] = {
        0xb3, 0x8e, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x00, 0x01, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x7f, 0x02, 0x08, 0xeb,
        0xe0, 0x01, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x7f, 0x02, 0x08, 0xeb,
        0x61, 0xfe, 0xff, 0x54, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x3c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x48, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data);
    patch_aarch64_26r(code + 0x6c, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_IS_TRUE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_IS_TRUE_POP.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 4: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // c: eb09011f      cmp     x8, x9
    // 10: 54000040      b.eq    0x18 <_JIT_ENTRY+0x18>
    // 14: 14000000      b       0x14 <_JIT_ENTRY+0x14>
    // 0000000000000014:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x09, 0x00, 0x00, 0x90, 0xa8, 0x8e, 0x5f, 0xf8,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_TrueStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x14, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_KEYS_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_KEYS_VERSION.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f941b908      ldr     x8, [x8, #0x370]
    // 10: b9400d08      ldr     w8, [x8, #0xc]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 18: 6b09011f      cmp     w8, w9
    // 1c: 54000041      b.ne    0x24 <_JIT_ENTRY+0x24>
    // 20: 14000000      b       0x20 <_JIT_ENTRY+0x20>
    // 0000000000000020:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 24: 14000000      b       0x24 <_JIT_ENTRY+0x24>
    // 0000000000000024:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[40] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x08, 0xb9, 0x41, 0xf9,
        0x08, 0x0d, 0x40, 0xb9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0x6b, 0x41, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_26r(code + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x24, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_NOS_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_NOS_FLOAT.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyFloat_Type
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyFloat_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyFloat_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_NOS_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_NOS_INT.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyLong_Type
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyLong_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyLong_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_NOT_EXHAUSTED_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_NOT_EXHAUSTED_LIST.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400d09      ldr     x9, [x8, #0x18]
    // 8: b40000c9      cbz     x9, 0x20 <_JIT_ENTRY+0x20>
    // c: f940090a      ldr     x10, [x8, #0x10]
    // 10: f9400929      ldr     x9, [x9, #0x10]
    // 14: eb09015f      cmp     x10, x9
    // 18: 54000062      b.hs    0x24 <_JIT_ENTRY+0x24>
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 20: 14000000      b       0x20 <_JIT_ENTRY+0x20>
    // 0000000000000020:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 24: 92800009      mov     x9, #-0x1               // =-1
    // 28: f9000909      str     x9, [x8, #0x10]
    // 2c: 14000000      b       0x2c <_JIT_ENTRY+0x2c>
    // 000000000000002c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[48] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x0d, 0x40, 0xf9,
        0xc9, 0x00, 0x00, 0xb4, 0x0a, 0x09, 0x40, 0xf9,
        0x29, 0x09, 0x40, 0xf9, 0x5f, 0x01, 0x09, 0xeb,
        0x62, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x09, 0x00, 0x80, 0x92,
        0x09, 0x09, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x20, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x2c, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_NOT_EXHAUSTED_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_NOT_EXHAUSTED_RANGE.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9401108      ldr     x8, [x8, #0x20]
    // 8: f100011f      cmp     x8, #0x0
    // c: 5400004d      b.le    0x14 <_JIT_ENTRY+0x14>
    // 10: 14000000      b       0x10 <_JIT_ENTRY+0x10>
    // 0000000000000010:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 14: 14000000      b       0x14 <_JIT_ENTRY+0x14>
    // 0000000000000014:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[24] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x08, 0x11, 0x40, 0xf9,
        0x1f, 0x01, 0x00, 0xf1, 0x4d, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x14, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_NOT_EXHAUSTED_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_NOT_EXHAUSTED_TUPLE.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400d09      ldr     x9, [x8, #0x18]
    // 8: b40000c9      cbz     x9, 0x20 <_JIT_ENTRY+0x20>
    // c: f9400908      ldr     x8, [x8, #0x10]
    // 10: f9400929      ldr     x9, [x9, #0x10]
    // 14: eb09011f      cmp     x8, x9
    // 18: 5400004a      b.ge    0x20 <_JIT_ENTRY+0x20>
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 20: 14000000      b       0x20 <_JIT_ENTRY+0x20>
    // 0000000000000020:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x0d, 0x40, 0xf9,
        0xc9, 0x00, 0x00, 0xb4, 0x08, 0x09, 0x40, 0xf9,
        0x29, 0x09, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x4a, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x20, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_TOS_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_TOS_FLOAT.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyFloat_Type
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyFloat_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyFloat_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_TOS_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_TOS_INT.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyLong_Type
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyLong_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyLong_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_TYPE_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_TYPE_VERSION.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: b9418108      ldr     w8, [x8, #0x180]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 14: 6b09011f      cmp     w8, w9
    // 18: 54000041      b.ne    0x20 <_JIT_ENTRY+0x20>
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 20: 14000000      b       0x20 <_JIT_ENTRY+0x20>
    // 0000000000000020:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x08, 0x81, 0x41, 0xb9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x20, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_TYPE_VERSION_AND_LOCK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_TYPE_VERSION_AND_LOCK.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: b9418108      ldr     w8, [x8, #0x180]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 14: 6b09011f      cmp     w8, w9
    // 18: 54000041      b.ne    0x20 <_JIT_ENTRY+0x20>
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 20: 14000000      b       0x20 <_JIT_ENTRY+0x20>
    // 0000000000000020:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x08, 0x81, 0x41, 0xb9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x20, state->instruction_starts[instruction->jump_target]);
}

void
emit__IMPORT_FROM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _IMPORT_FROM.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // c: aa1603e0      mov     x0, x22
    // 10: 910003fd      mov     x29, sp
    // 14: f9401108      ldr     x8, [x8, #0x20]
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 1c: f85f82a1      ldur    x1, [x21, #-0x8]
    // 20: 8b292d08      add     x8, x8, w9, uxth #3
    // 24: f9400d02      ldr     x2, [x8, #0x18]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       _PyEval_ImportFrom
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_ImportFrom
    // 34: d63f0100      blr     x8
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: b4000080      cbz     x0, 0x50 <_JIT_ENTRY+0x50>
    // 44: f80086a0      str     x0, [x21], #0x8
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: 14000000      b       0x4c <_JIT_ENTRY+0x4c>
    // 000000000000004c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 50: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 54: 14000000      b       0x54 <_JIT_ENTRY+0x54>
    // 0000000000000054:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[88] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x11, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0xa1, 0x82, 0x5f, 0xf8,
        0x08, 0x2d, 0x29, 0x8b, 0x02, 0x0d, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x80, 0x00, 0x00, 0xb4, 0xa0, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &_PyEval_ImportFrom+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_ImportFrom);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x4c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x54, state->instruction_starts[instruction->error_target]);
}

void
emit__IMPORT_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _IMPORT_NAME.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // c: aa1603e0      mov     x0, x22
    // 10: aa1403e1      mov     x1, x20
    // 14: 910003fd      mov     x29, sp
    // 18: f9401108      ldr     x8, [x8, #0x20]
    // 1c: f9400129      ldr     x9, [x9]
    // 000000000000001c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 20: a97f4eb8      ldp     x24, x19, [x21, #-0x10]
    // 24: 8b292d08      add     x8, x8, w9, uxth #3
    // 28: f9400d02      ldr     x2, [x8, #0x18]
    // 2c: f9002295      str     x21, [x20, #0x40]
    // 30: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  R_AARCH64_ADR_GOT_PAGE       _PyEval_ImportName
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_ImportName
    // 38: aa1303e3      mov     x3, x19
    // 3c: aa1803e4      mov     x4, x24
    // 40: d63f0100      blr     x8
    // 44: f9402299      ldr     x25, [x20, #0x40]
    // 48: f900229f      str     xzr, [x20, #0x40]
    // 4c: aa0003f7      mov     x23, x0
    // 50: b9400308      ldr     w8, [x24]
    // 54: 37f80108      tbnz    w8, #0x1f, 0x74 <_JIT_ENTRY+0x74>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b9000308      str     w8, [x24]
    // 60: 540000a1      b.ne    0x74 <_JIT_ENTRY+0x74>
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 68: aa1803e0      mov     x0, x24
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 70: d63f0100      blr     x8
    // 74: b9400268      ldr     w8, [x19]
    // 78: 37f80088      tbnz    w8, #0x1f, 0x88 <_JIT_ENTRY+0x88>
    // 7c: 71000508      subs    w8, w8, #0x1
    // 80: b9000268      str     w8, [x19]
    // 84: 540000c0      b.eq    0x9c <_JIT_ENTRY+0x9c>
    // 88: b4000157      cbz     x23, 0xb0 <_JIT_ENTRY+0xb0>
    // 8c: d1002335      sub     x21, x25, #0x8
    // 90: f81f0337      stur    x23, [x25, #-0x10]
    // 94: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 98: 14000000      b       0x98 <_JIT_ENTRY+0x98>
    // 0000000000000098:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 9c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // a0: aa1303e0      mov     x0, x19
    // a4: f9400108      ldr     x8, [x8]
    // 00000000000000a4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // a8: d63f0100      blr     x8
    // ac: b5ffff17      cbnz    x23, 0x8c <_JIT_ENTRY+0x8c>
    // b0: d1004335      sub     x21, x25, #0x10
    // b4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b8: 14000000      b       0xb8 <_JIT_ENTRY+0xb8>
    // 00000000000000b8:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // bc: 00 00 00 00
    const unsigned char code_body[192] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0xe1, 0x03, 0x14, 0xaa, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x11, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xb8, 0x4e, 0x7f, 0xa9, 0x08, 0x2d, 0x29, 0x8b,
        0x02, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe3, 0x03, 0x13, 0xaa, 0xe4, 0x03, 0x18, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x99, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf7, 0x03, 0x00, 0xaa,
        0x08, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xc0, 0x00, 0x00, 0x54,
        0x57, 0x01, 0x00, 0xb4, 0x35, 0x23, 0x00, 0xd1,
        0x37, 0x03, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x17, 0xff, 0xff, 0xb5,
        0x35, 0x43, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_ImportName+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_ImportName);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x6c, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x98, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x9c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xa4, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xb8, state->instruction_starts[instruction->error_target]);
}

void
emit__INIT_CALL_BOUND_METHOD_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: 12003d0b      and     w11, w8, #0xffff
    // c: 12800028      mov     w8, #-0x2               // =-2
    // 10: 4b0b0108      sub     w8, w8, w11
    // 14: 2a2b03eb      mvn     w11, w11
    // 18: f868daa9      ldr     x9, [x21, w8, sxtw #3]
    // 1c: f9400d2a      ldr     x10, [x9, #0x18]
    // 20: b940014c      ldr     w12, [x10]
    // 24: 37f8006c      tbnz    w12, #0x1f, 0x30 <_JIT_ENTRY+0x30>
    // 28: 1100058c      add     w12, w12, #0x1
    // 2c: b900014c      str     w12, [x10]
    // 30: f82bdaaa      str     x10, [x21, w11, sxtw #3]
    // 34: f9400929      ldr     x9, [x9, #0x10]
    // 38: f868daa0      ldr     x0, [x21, w8, sxtw #3]
    // 3c: b940012a      ldr     w10, [x9]
    // 40: 37f8006a      tbnz    w10, #0x1f, 0x4c <_JIT_ENTRY+0x4c>
    // 44: 1100054a      add     w10, w10, #0x1
    // 48: b900012a      str     w10, [x9]
    // 4c: f828daa9      str     x9, [x21, w8, sxtw #3]
    // 50: f9002295      str     x21, [x20, #0x40]
    // 54: b9400008      ldr     w8, [x0]
    // 58: 37f80088      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 5c: 71000508      subs    w8, w8, #0x1
    // 60: b9000008      str     w8, [x0]
    // 64: 54000080      b.eq    0x74 <_JIT_ENTRY+0x74>
    // 68: f9402295      ldr     x21, [x20, #0x40]
    // 6c: f900229f      str     xzr, [x20, #0x40]
    // 70: 14000000      b       0x70 <_JIT_ENTRY+0x70>
    // 0000000000000070:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 74: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 7c: 910003fd      mov     x29, sp
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 84: d63f0100      blr     x8
    // 88: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 8c: f9402295      ldr     x21, [x20, #0x40]
    // 90: f900229f      str     xzr, [x20, #0x40]
    // 94: 14000000      b       0x94 <_JIT_ENTRY+0x94>
    // 0000000000000094:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[152] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x0b, 0x3d, 0x00, 0x12, 0x28, 0x00, 0x80, 0x12,
        0x08, 0x01, 0x0b, 0x4b, 0xeb, 0x03, 0x2b, 0x2a,
        0xa9, 0xda, 0x68, 0xf8, 0x2a, 0x0d, 0x40, 0xf9,
        0x4c, 0x01, 0x40, 0xb9, 0x6c, 0x00, 0xf8, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x4c, 0x01, 0x00, 0xb9,
        0xaa, 0xda, 0x2b, 0xf8, 0x29, 0x09, 0x40, 0xf9,
        0xa0, 0xda, 0x68, 0xf8, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0xda, 0x28, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x80, 0x00, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x70, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x78, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x80, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x94, (uintptr_t)code + sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: 1280002a      mov     w10, #-0x2              // =-2
    // 8: aa1503e8      mov     x8, x21
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 10: 12003d2d      and     w13, w9, #0xffff
    // 14: 4b0d0149      sub     w9, w10, w13
    // 18: f9407aca      ldr     x10, [x22, #0xf0]
    // 1c: 2a2d03ee      mvn     w14, w13
    // 20: f869daaf      ldr     x15, [x21, w9, sxtw #3]
    // 24: 8b2eceb5      add     x21, x21, w14, sxtw #3
    // 28: f94019eb      ldr     x11, [x15, #0x30]
    // 2c: b9804d6c      ldrsw   x12, [x11, #0x4c]
    // 30: 8b0c0d4e      add     x14, x10, x12, lsl #3
    // 34: f94002ac      ldr     x12, [x21]
    // 38: f9007ace      str     x14, [x22, #0xf0]
    // 3c: f100019f      cmp     x12, #0x0
    // 40: a900bd54      stp     x20, x15, [x10, #0x8]
    // 44: 1a8d05ad      cinc    w13, w13, ne
    // 48: b940016e      ldr     w14, [x11]
    // 4c: 37f8006e      tbnz    w14, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 50: 110005ce      add     w14, w14, #0x1
    // 54: b900016e      str     w14, [x11]
    // 58: f900014b      str     x11, [x10]
    // 5c: 9101414e      add     x14, x10, #0x50
    // 60: 91034171      add     x17, x11, #0xd0
    // 64: b9804970      ldrsw   x16, [x11, #0x48]
    // 68: 3dc005e0      ldr     q0, [x15, #0x10]
    // 6c: a902fd5f      stp     xzr, xzr, [x10, #0x28]
    // 70: b900495f      str     wzr, [x10, #0x48]
    // 74: 8b100dcf      add     x15, x14, x16, lsl #3
    // 78: 6b0d021f      cmp     w16, w13
    // 7c: 3c818140      stur    q0, [x10, #0x18]
    // 80: a903bd51      stp     x17, x15, [x10, #0x38]
    // 84: 540000cd      b.le    0x9c <_JIT_ENTRY+0x9c>
    // 88: f82d79df      str     xzr, [x14, x13, lsl #3]
    // 8c: 910005ad      add     x13, x13, #0x1
    // 90: b980496f      ldrsw   x15, [x11, #0x48]
    // 94: eb0f01bf      cmp     x13, x15
    // 98: 54ffff8b      b.lt    0x88 <_JIT_ENTRY+0x88>
    // 9c: 9000000d      adrp    x13, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // a0: f100019f      cmp     x12, #0x0
    // a4: f94001ad      ldr     x13, [x13]
    // 00000000000000a4:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // a8: f94002af      ldr     x15, [x21]
    // ac: 1a9f07eb      cset    w11, ne
    // b0: 72003dbf      tst     w13, #0xffff
    // b4: f90001cf      str     x15, [x14]
    // b8: 54000300      b.eq    0x118 <_JIT_ENTRY+0x118>
    // bc: 12003dae      and     w14, w13, #0xffff
    // c0: 92403dad      and     x13, x13, #0xffff
    // c4: 71002ddf      cmp     w14, #0xb
    // c8: 54000149      b.ls    0xf0 <_JIT_ENTRY+0xf0>
    // cc: f100019f      cmp     x12, #0x0
    // d0: d37df1ae      lsl     x14, x13, #3
    // d4: 1a9f07ec      cset    w12, ne
    // d8: 8b2c4d4c      add     x12, x10, w12, uxtw #3
    // dc: 8b0e018c      add     x12, x12, x14
    // e0: cb08018c      sub     x12, x12, x8
    // e4: 9101418c      add     x12, x12, #0x50
    // e8: f100819f      cmp     x12, #0x20
    // ec: 540001a2      b.hs    0x120 <_JIT_ENTRY+0x120>
    // f0: aa1f03ec      mov     x12, xzr
    // f4: d37df18e      lsl     x14, x12, #3
    // f8: 8b0b0dcb      add     x11, x14, x11, lsl #3
    // fc: 8b0a016e      add     x14, x11, x10
    // 100: cb0d018b      sub     x11, x12, x13
    // 104: 910141cc      add     x12, x14, #0x50
    // 108: f86b790d      ldr     x13, [x8, x11, lsl #3]
    // 10c: b100056b      adds    x11, x11, #0x1
    // 110: f800858d      str     x13, [x12], #0x8
    // 114: 54ffffa3      b.lo    0x108 <_JIT_ENTRY+0x108>
    // 118: f829d90a      str     x10, [x8, w9, sxtw #3]
    // 11c: 14000000      b       0x11c <_JIT_ENTRY+0x11c>
    // 000000000000011c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 120: 8b0b0d4f      add     x15, x10, x11, lsl #3
    // 124: 927e35ac      and     x12, x13, #0xfffc
    // 128: cb0e0110      sub     x16, x8, x14
    // 12c: 910181ee      add     x14, x15, #0x60
    // 130: 9100420f      add     x15, x16, #0x10
    // 134: aa0c03f0      mov     x16, x12
    // 138: ad7f85e0      ldp     q0, q1, [x15, #-0x10]
    // 13c: f1001210      subs    x16, x16, #0x4
    // 140: 910081ef      add     x15, x15, #0x20
    // 144: ad3f85c0      stp     q0, q1, [x14, #-0x10]
    // 148: 910081ce      add     x14, x14, #0x20
    // 14c: 54ffff61      b.ne    0x138 <_JIT_ENTRY+0x138>
    // 150: eb0d019f      cmp     x12, x13
    // 154: 54fffd01      b.ne    0xf4 <_JIT_ENTRY+0xf4>
    // 158: 17fffff0      b       0x118 <_JIT_ENTRY+0x118>
    // 15c: 00 00 00 00
    const unsigned char code_body[352] = {
        0x09, 0x00, 0x00, 0x90, 0x2a, 0x00, 0x80, 0x12,
        0xe8, 0x03, 0x15, 0xaa, 0x29, 0x01, 0x40, 0xf9,
        0x2d, 0x3d, 0x00, 0x12, 0x49, 0x01, 0x0d, 0x4b,
        0xca, 0x7a, 0x40, 0xf9, 0xee, 0x03, 0x2d, 0x2a,
        0xaf, 0xda, 0x69, 0xf8, 0xb5, 0xce, 0x2e, 0x8b,
        0xeb, 0x19, 0x40, 0xf9, 0x6c, 0x4d, 0x80, 0xb9,
        0x4e, 0x0d, 0x0c, 0x8b, 0xac, 0x02, 0x40, 0xf9,
        0xce, 0x7a, 0x00, 0xf9, 0x9f, 0x01, 0x00, 0xf1,
        0x54, 0xbd, 0x00, 0xa9, 0xad, 0x05, 0x8d, 0x1a,
        0x6e, 0x01, 0x40, 0xb9, 0x6e, 0x00, 0xf8, 0x37,
        0xce, 0x05, 0x00, 0x11, 0x6e, 0x01, 0x00, 0xb9,
        0x4b, 0x01, 0x00, 0xf9, 0x4e, 0x41, 0x01, 0x91,
        0x71, 0x41, 0x03, 0x91, 0x70, 0x49, 0x80, 0xb9,
        0xe0, 0x05, 0xc0, 0x3d, 0x5f, 0xfd, 0x02, 0xa9,
        0x5f, 0x49, 0x00, 0xb9, 0xcf, 0x0d, 0x10, 0x8b,
        0x1f, 0x02, 0x0d, 0x6b, 0x40, 0x81, 0x81, 0x3c,
        0x51, 0xbd, 0x03, 0xa9, 0xcd, 0x00, 0x00, 0x54,
        0xdf, 0x79, 0x2d, 0xf8, 0xad, 0x05, 0x00, 0x91,
        0x6f, 0x49, 0x80, 0xb9, 0xbf, 0x01, 0x0f, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x0d, 0x00, 0x00, 0x90,
        0x9f, 0x01, 0x00, 0xf1, 0xad, 0x01, 0x40, 0xf9,
        0xaf, 0x02, 0x40, 0xf9, 0xeb, 0x07, 0x9f, 0x1a,
        0xbf, 0x3d, 0x00, 0x72, 0xcf, 0x01, 0x00, 0xf9,
        0x00, 0x03, 0x00, 0x54, 0xae, 0x3d, 0x00, 0x12,
        0xad, 0x3d, 0x40, 0x92, 0xdf, 0x2d, 0x00, 0x71,
        0x49, 0x01, 0x00, 0x54, 0x9f, 0x01, 0x00, 0xf1,
        0xae, 0xf1, 0x7d, 0xd3, 0xec, 0x07, 0x9f, 0x1a,
        0x4c, 0x4d, 0x2c, 0x8b, 0x8c, 0x01, 0x0e, 0x8b,
        0x8c, 0x01, 0x08, 0xcb, 0x8c, 0x41, 0x01, 0x91,
        0x9f, 0x81, 0x00, 0xf1, 0xa2, 0x01, 0x00, 0x54,
        0xec, 0x03, 0x1f, 0xaa, 0x8e, 0xf1, 0x7d, 0xd3,
        0xcb, 0x0d, 0x0b, 0x8b, 0x6e, 0x01, 0x0a, 0x8b,
        0x8b, 0x01, 0x0d, 0xcb, 0xcc, 0x41, 0x01, 0x91,
        0x0d, 0x79, 0x6b, 0xf8, 0x6b, 0x05, 0x00, 0xb1,
        0x8d, 0x85, 0x00, 0xf8, 0xa3, 0xff, 0xff, 0x54,
        0x0a, 0xd9, 0x29, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0x4f, 0x0d, 0x0b, 0x8b, 0xac, 0x35, 0x7e, 0x92,
        0x10, 0x01, 0x0e, 0xcb, 0xee, 0x81, 0x01, 0x91,
        0x0f, 0x42, 0x00, 0x91, 0xf0, 0x03, 0x0c, 0xaa,
        0xe0, 0x85, 0x7f, 0xad, 0x10, 0x12, 0x00, 0xf1,
        0xef, 0x81, 0x00, 0x91, 0xc0, 0x85, 0x3f, 0xad,
        0xce, 0x81, 0x00, 0x91, 0x61, 0xff, 0xff, 0x54,
        0x9f, 0x01, 0x0d, 0xeb, 0x01, 0xfd, 0xff, 0x54,
        0xf0, 0xff, 0xff, 0x17, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x9c, (uintptr_t)data);
    patch_aarch64_12x(code + 0xa4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x11c, (uintptr_t)code + sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS_0.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85f8eab      ldr     x11, [x21, #-0x8]!
    // 8: f85f82ae      ldur    x14, [x21, #-0x8]
    // c: f9407ac9      ldr     x9, [x22, #0xf0]
    // 10: f100017f      cmp     x11, #0x0
    // 14: f94019ca      ldr     x10, [x14, #0x30]
    // 18: 1a9f07ed      cset    w13, ne
    // 1c: b9804d4c      ldrsw   x12, [x10, #0x4c]
    // 20: 8b0c0d2c      add     x12, x9, x12, lsl #3
    // 24: f9007acc      str     x12, [x22, #0xf0]
    // 28: a900b934      stp     x20, x14, [x9, #0x8]
    // 2c: b940014c      ldr     w12, [x10]
    // 30: 37f8006c      tbnz    w12, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 34: 1100058c      add     w12, w12, #0x1
    // 38: b900014c      str     w12, [x10]
    // 3c: f900012a      str     x10, [x9]
    // 40: 9101412c      add     x12, x9, #0x50
    // 44: 91034150      add     x16, x10, #0xd0
    // 48: b980494f      ldrsw   x15, [x10, #0x48]
    // 4c: 3dc005c0      ldr     q0, [x14, #0x10]
    // 50: a902fd3f      stp     xzr, xzr, [x9, #0x28]
    // 54: b900493f      str     wzr, [x9, #0x48]
    // 58: 8b0f0d8e      add     x14, x12, x15, lsl #3
    // 5c: 6b0d01ff      cmp     w15, w13
    // 60: 3c818120      stur    q0, [x9, #0x18]
    // 64: a903b930      stp     x16, x14, [x9, #0x38]
    // 68: 5400010d      b.le    0x88 <_JIT_ENTRY+0x88>
    // 6c: f100017f      cmp     x11, #0x0
    // 70: 1a9f07eb      cset    w11, ne
    // 74: f82b799f      str     xzr, [x12, x11, lsl #3]
    // 78: 9100056b      add     x11, x11, #0x1
    // 7c: b980494d      ldrsw   x13, [x10, #0x48]
    // 80: eb0d017f      cmp     x11, x13
    // 84: 54ffff8b      b.lt    0x74 <_JIT_ENTRY+0x74>
    // 88: f85f810a      ldur    x10, [x8, #-0x8]
    // 8c: f900292a      str     x10, [x9, #0x50]
    // 90: f81f0109      stur    x9, [x8, #-0x10]
    // 94: 14000000      b       0x94 <_JIT_ENTRY+0x94>
    // 0000000000000094:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[152] = {
        0xe8, 0x03, 0x15, 0xaa, 0xab, 0x8e, 0x5f, 0xf8,
        0xae, 0x82, 0x5f, 0xf8, 0xc9, 0x7a, 0x40, 0xf9,
        0x7f, 0x01, 0x00, 0xf1, 0xca, 0x19, 0x40, 0xf9,
        0xed, 0x07, 0x9f, 0x1a, 0x4c, 0x4d, 0x80, 0xb9,
        0x2c, 0x0d, 0x0c, 0x8b, 0xcc, 0x7a, 0x00, 0xf9,
        0x34, 0xb9, 0x00, 0xa9, 0x4c, 0x01, 0x40, 0xb9,
        0x6c, 0x00, 0xf8, 0x37, 0x8c, 0x05, 0x00, 0x11,
        0x4c, 0x01, 0x00, 0xb9, 0x2a, 0x01, 0x00, 0xf9,
        0x2c, 0x41, 0x01, 0x91, 0x50, 0x41, 0x03, 0x91,
        0x4f, 0x49, 0x80, 0xb9, 0xc0, 0x05, 0xc0, 0x3d,
        0x3f, 0xfd, 0x02, 0xa9, 0x3f, 0x49, 0x00, 0xb9,
        0x8e, 0x0d, 0x0f, 0x8b, 0xff, 0x01, 0x0d, 0x6b,
        0x20, 0x81, 0x81, 0x3c, 0x30, 0xb9, 0x03, 0xa9,
        0x0d, 0x01, 0x00, 0x54, 0x7f, 0x01, 0x00, 0xf1,
        0xeb, 0x07, 0x9f, 0x1a, 0x9f, 0x79, 0x2b, 0xf8,
        0x6b, 0x05, 0x00, 0x91, 0x4d, 0x49, 0x80, 0xb9,
        0x7f, 0x01, 0x0d, 0xeb, 0x8b, 0xff, 0xff, 0x54,
        0x0a, 0x81, 0x5f, 0xf8, 0x2a, 0x29, 0x00, 0xf9,
        0x09, 0x01, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x94, (uintptr_t)code + sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS_1.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85f0eaa      ldr     x10, [x21, #-0x10]!
    // 8: f85f82ae      ldur    x14, [x21, #-0x8]
    // c: f9407ac9      ldr     x9, [x22, #0xf0]
    // 10: f100015f      cmp     x10, #0x0
    // 14: f94019cb      ldr     x11, [x14, #0x30]
    // 18: b9804d6c      ldrsw   x12, [x11, #0x4c]
    // 1c: 8b0c0d2c      add     x12, x9, x12, lsl #3
    // 20: f9007acc      str     x12, [x22, #0xf0]
    // 24: 5280002c      mov     w12, #0x1               // =1
    // 28: a900b934      stp     x20, x14, [x9, #0x8]
    // 2c: 1a8c058c      cinc    w12, w12, ne
    // 30: b940016d      ldr     w13, [x11]
    // 34: 37f8006d      tbnz    w13, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 38: 110005ad      add     w13, w13, #0x1
    // 3c: b900016d      str     w13, [x11]
    // 40: f900012b      str     x11, [x9]
    // 44: 9101412d      add     x13, x9, #0x50
    // 48: 91034170      add     x16, x11, #0xd0
    // 4c: b980496f      ldrsw   x15, [x11, #0x48]
    // 50: 3dc005c0      ldr     q0, [x14, #0x10]
    // 54: a902fd3f      stp     xzr, xzr, [x9, #0x28]
    // 58: b900493f      str     wzr, [x9, #0x48]
    // 5c: 8b0f0dae      add     x14, x13, x15, lsl #3
    // 60: 6b0c01ff      cmp     w15, w12
    // 64: 3c818120      stur    q0, [x9, #0x18]
    // 68: a903b930      stp     x16, x14, [x9, #0x38]
    // 6c: 540000cd      b.le    0x84 <_JIT_ENTRY+0x84>
    // 70: f82c79bf      str     xzr, [x13, x12, lsl #3]
    // 74: 9100058c      add     x12, x12, #0x1
    // 78: b980496e      ldrsw   x14, [x11, #0x48]
    // 7c: eb0e019f      cmp     x12, x14
    // 80: 54ffff8b      b.lt    0x70 <_JIT_ENTRY+0x70>
    // 84: f85f010b      ldur    x11, [x8, #-0x10]
    // 88: f100015f      cmp     x10, #0x0
    // 8c: 1a9f07ea      cset    w10, ne
    // 90: f900292b      str     x11, [x9, #0x50]
    // 94: f85f810b      ldur    x11, [x8, #-0x8]
    // 98: f82a59ab      str     x11, [x13, w10, uxtw #3]
    // 9c: f81e8109      stur    x9, [x8, #-0x18]
    // a0: 14000000      b       0xa0 <_JIT_ENTRY+0xa0>
    // 00000000000000a0:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[160] = {
        0xe8, 0x03, 0x15, 0xaa, 0xaa, 0x0e, 0x5f, 0xf8,
        0xae, 0x82, 0x5f, 0xf8, 0xc9, 0x7a, 0x40, 0xf9,
        0x5f, 0x01, 0x00, 0xf1, 0xcb, 0x19, 0x40, 0xf9,
        0x6c, 0x4d, 0x80, 0xb9, 0x2c, 0x0d, 0x0c, 0x8b,
        0xcc, 0x7a, 0x00, 0xf9, 0x2c, 0x00, 0x80, 0x52,
        0x34, 0xb9, 0x00, 0xa9, 0x8c, 0x05, 0x8c, 0x1a,
        0x6d, 0x01, 0x40, 0xb9, 0x6d, 0x00, 0xf8, 0x37,
        0xad, 0x05, 0x00, 0x11, 0x6d, 0x01, 0x00, 0xb9,
        0x2b, 0x01, 0x00, 0xf9, 0x2d, 0x41, 0x01, 0x91,
        0x70, 0x41, 0x03, 0x91, 0x6f, 0x49, 0x80, 0xb9,
        0xc0, 0x05, 0xc0, 0x3d, 0x3f, 0xfd, 0x02, 0xa9,
        0x3f, 0x49, 0x00, 0xb9, 0xae, 0x0d, 0x0f, 0x8b,
        0xff, 0x01, 0x0c, 0x6b, 0x20, 0x81, 0x81, 0x3c,
        0x30, 0xb9, 0x03, 0xa9, 0xcd, 0x00, 0x00, 0x54,
        0xbf, 0x79, 0x2c, 0xf8, 0x8c, 0x05, 0x00, 0x91,
        0x6e, 0x49, 0x80, 0xb9, 0x9f, 0x01, 0x0e, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x0b, 0x01, 0x5f, 0xf8,
        0x5f, 0x01, 0x00, 0xf1, 0xea, 0x07, 0x9f, 0x1a,
        0x2b, 0x29, 0x00, 0xf9, 0x0b, 0x81, 0x5f, 0xf8,
        0xab, 0x59, 0x2a, 0xf8, 0x09, 0x81, 0x1e, 0xf8,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS_2.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85e8eaa      ldr     x10, [x21, #-0x18]!
    // 8: f85f82ae      ldur    x14, [x21, #-0x8]
    // c: f9407ac9      ldr     x9, [x22, #0xf0]
    // 10: f100015f      cmp     x10, #0x0
    // 14: f94019cb      ldr     x11, [x14, #0x30]
    // 18: b9804d6c      ldrsw   x12, [x11, #0x4c]
    // 1c: 8b0c0d2c      add     x12, x9, x12, lsl #3
    // 20: f9007acc      str     x12, [x22, #0xf0]
    // 24: 5280004c      mov     w12, #0x2               // =2
    // 28: a900b934      stp     x20, x14, [x9, #0x8]
    // 2c: 1a8c058c      cinc    w12, w12, ne
    // 30: b940016d      ldr     w13, [x11]
    // 34: 37f8006d      tbnz    w13, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 38: 110005ad      add     w13, w13, #0x1
    // 3c: b900016d      str     w13, [x11]
    // 40: f900012b      str     x11, [x9]
    // 44: 9101412d      add     x13, x9, #0x50
    // 48: 91034170      add     x16, x11, #0xd0
    // 4c: b980496f      ldrsw   x15, [x11, #0x48]
    // 50: 3dc005c0      ldr     q0, [x14, #0x10]
    // 54: a902fd3f      stp     xzr, xzr, [x9, #0x28]
    // 58: b900493f      str     wzr, [x9, #0x48]
    // 5c: 8b0f0dae      add     x14, x13, x15, lsl #3
    // 60: 6b0c01ff      cmp     w15, w12
    // 64: 3c818120      stur    q0, [x9, #0x18]
    // 68: a903b930      stp     x16, x14, [x9, #0x38]
    // 6c: 540000cd      b.le    0x84 <_JIT_ENTRY+0x84>
    // 70: f82c79bf      str     xzr, [x13, x12, lsl #3]
    // 74: 9100058c      add     x12, x12, #0x1
    // 78: b980496e      ldrsw   x14, [x11, #0x48]
    // 7c: eb0e019f      cmp     x12, x14
    // 80: 54ffff8b      b.lt    0x70 <_JIT_ENTRY+0x70>
    // 84: f85e810b      ldur    x11, [x8, #-0x18]
    // 88: f100015f      cmp     x10, #0x0
    // 8c: 1a9f07ea      cset    w10, ne
    // 90: f900292b      str     x11, [x9, #0x50]
    // 94: 8b2a4daa      add     x10, x13, w10, uxtw #3
    // 98: f85f010b      ldur    x11, [x8, #-0x10]
    // 9c: f900014b      str     x11, [x10]
    // a0: f85f810b      ldur    x11, [x8, #-0x8]
    // a4: f900054b      str     x11, [x10, #0x8]
    // a8: f81e0109      stur    x9, [x8, #-0x20]
    // ac: 14000000      b       0xac <_JIT_ENTRY+0xac>
    // 00000000000000ac:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[176] = {
        0xe8, 0x03, 0x15, 0xaa, 0xaa, 0x8e, 0x5e, 0xf8,
        0xae, 0x82, 0x5f, 0xf8, 0xc9, 0x7a, 0x40, 0xf9,
        0x5f, 0x01, 0x00, 0xf1, 0xcb, 0x19, 0x40, 0xf9,
        0x6c, 0x4d, 0x80, 0xb9, 0x2c, 0x0d, 0x0c, 0x8b,
        0xcc, 0x7a, 0x00, 0xf9, 0x4c, 0x00, 0x80, 0x52,
        0x34, 0xb9, 0x00, 0xa9, 0x8c, 0x05, 0x8c, 0x1a,
        0x6d, 0x01, 0x40, 0xb9, 0x6d, 0x00, 0xf8, 0x37,
        0xad, 0x05, 0x00, 0x11, 0x6d, 0x01, 0x00, 0xb9,
        0x2b, 0x01, 0x00, 0xf9, 0x2d, 0x41, 0x01, 0x91,
        0x70, 0x41, 0x03, 0x91, 0x6f, 0x49, 0x80, 0xb9,
        0xc0, 0x05, 0xc0, 0x3d, 0x3f, 0xfd, 0x02, 0xa9,
        0x3f, 0x49, 0x00, 0xb9, 0xae, 0x0d, 0x0f, 0x8b,
        0xff, 0x01, 0x0c, 0x6b, 0x20, 0x81, 0x81, 0x3c,
        0x30, 0xb9, 0x03, 0xa9, 0xcd, 0x00, 0x00, 0x54,
        0xbf, 0x79, 0x2c, 0xf8, 0x8c, 0x05, 0x00, 0x91,
        0x6e, 0x49, 0x80, 0xb9, 0x9f, 0x01, 0x0e, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x0b, 0x81, 0x5e, 0xf8,
        0x5f, 0x01, 0x00, 0xf1, 0xea, 0x07, 0x9f, 0x1a,
        0x2b, 0x29, 0x00, 0xf9, 0xaa, 0x4d, 0x2a, 0x8b,
        0x0b, 0x01, 0x5f, 0xf8, 0x4b, 0x01, 0x00, 0xf9,
        0x0b, 0x81, 0x5f, 0xf8, 0x4b, 0x05, 0x00, 0xf9,
        0x09, 0x01, 0x1e, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0xac, (uintptr_t)code + sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS_3.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85e0eaa      ldr     x10, [x21, #-0x20]!
    // 8: f85f82ae      ldur    x14, [x21, #-0x8]
    // c: f9407ac9      ldr     x9, [x22, #0xf0]
    // 10: f100015f      cmp     x10, #0x0
    // 14: f94019cb      ldr     x11, [x14, #0x30]
    // 18: b9804d6c      ldrsw   x12, [x11, #0x4c]
    // 1c: 8b0c0d2c      add     x12, x9, x12, lsl #3
    // 20: f9007acc      str     x12, [x22, #0xf0]
    // 24: 5280006c      mov     w12, #0x3               // =3
    // 28: a900b934      stp     x20, x14, [x9, #0x8]
    // 2c: 1a8c058c      cinc    w12, w12, ne
    // 30: b940016d      ldr     w13, [x11]
    // 34: 37f8006d      tbnz    w13, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 38: 110005ad      add     w13, w13, #0x1
    // 3c: b900016d      str     w13, [x11]
    // 40: f900012b      str     x11, [x9]
    // 44: 9101412d      add     x13, x9, #0x50
    // 48: 91034170      add     x16, x11, #0xd0
    // 4c: b980496f      ldrsw   x15, [x11, #0x48]
    // 50: 3dc005c0      ldr     q0, [x14, #0x10]
    // 54: a902fd3f      stp     xzr, xzr, [x9, #0x28]
    // 58: b900493f      str     wzr, [x9, #0x48]
    // 5c: 8b0f0dae      add     x14, x13, x15, lsl #3
    // 60: 6b0c01ff      cmp     w15, w12
    // 64: 3c818120      stur    q0, [x9, #0x18]
    // 68: a903b930      stp     x16, x14, [x9, #0x38]
    // 6c: 540000cd      b.le    0x84 <_JIT_ENTRY+0x84>
    // 70: f82c79bf      str     xzr, [x13, x12, lsl #3]
    // 74: 9100058c      add     x12, x12, #0x1
    // 78: b980496e      ldrsw   x14, [x11, #0x48]
    // 7c: eb0e019f      cmp     x12, x14
    // 80: 54ffff8b      b.lt    0x70 <_JIT_ENTRY+0x70>
    // 84: f85e010b      ldur    x11, [x8, #-0x20]
    // 88: f100015f      cmp     x10, #0x0
    // 8c: 1a9f07ea      cset    w10, ne
    // 90: f900292b      str     x11, [x9, #0x50]
    // 94: 8b2a4daa      add     x10, x13, w10, uxtw #3
    // 98: f85e810b      ldur    x11, [x8, #-0x18]
    // 9c: f900014b      str     x11, [x10]
    // a0: f85f010b      ldur    x11, [x8, #-0x10]
    // a4: f900054b      str     x11, [x10, #0x8]
    // a8: f85f810b      ldur    x11, [x8, #-0x8]
    // ac: f900094b      str     x11, [x10, #0x10]
    // b0: f81d8109      stur    x9, [x8, #-0x28]
    // b4: 14000000      b       0xb4 <_JIT_ENTRY+0xb4>
    // 00000000000000b4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[184] = {
        0xe8, 0x03, 0x15, 0xaa, 0xaa, 0x0e, 0x5e, 0xf8,
        0xae, 0x82, 0x5f, 0xf8, 0xc9, 0x7a, 0x40, 0xf9,
        0x5f, 0x01, 0x00, 0xf1, 0xcb, 0x19, 0x40, 0xf9,
        0x6c, 0x4d, 0x80, 0xb9, 0x2c, 0x0d, 0x0c, 0x8b,
        0xcc, 0x7a, 0x00, 0xf9, 0x6c, 0x00, 0x80, 0x52,
        0x34, 0xb9, 0x00, 0xa9, 0x8c, 0x05, 0x8c, 0x1a,
        0x6d, 0x01, 0x40, 0xb9, 0x6d, 0x00, 0xf8, 0x37,
        0xad, 0x05, 0x00, 0x11, 0x6d, 0x01, 0x00, 0xb9,
        0x2b, 0x01, 0x00, 0xf9, 0x2d, 0x41, 0x01, 0x91,
        0x70, 0x41, 0x03, 0x91, 0x6f, 0x49, 0x80, 0xb9,
        0xc0, 0x05, 0xc0, 0x3d, 0x3f, 0xfd, 0x02, 0xa9,
        0x3f, 0x49, 0x00, 0xb9, 0xae, 0x0d, 0x0f, 0x8b,
        0xff, 0x01, 0x0c, 0x6b, 0x20, 0x81, 0x81, 0x3c,
        0x30, 0xb9, 0x03, 0xa9, 0xcd, 0x00, 0x00, 0x54,
        0xbf, 0x79, 0x2c, 0xf8, 0x8c, 0x05, 0x00, 0x91,
        0x6e, 0x49, 0x80, 0xb9, 0x9f, 0x01, 0x0e, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x0b, 0x01, 0x5e, 0xf8,
        0x5f, 0x01, 0x00, 0xf1, 0xea, 0x07, 0x9f, 0x1a,
        0x2b, 0x29, 0x00, 0xf9, 0xaa, 0x4d, 0x2a, 0x8b,
        0x0b, 0x81, 0x5e, 0xf8, 0x4b, 0x01, 0x00, 0xf9,
        0x0b, 0x01, 0x5f, 0xf8, 0x4b, 0x05, 0x00, 0xf9,
        0x0b, 0x81, 0x5f, 0xf8, 0x4b, 0x09, 0x00, 0xf9,
        0x09, 0x81, 0x1d, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0xb4, (uintptr_t)code + sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS_4.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85d8eaa      ldr     x10, [x21, #-0x28]!
    // 8: f85f82ae      ldur    x14, [x21, #-0x8]
    // c: f9407ac9      ldr     x9, [x22, #0xf0]
    // 10: f100015f      cmp     x10, #0x0
    // 14: f94019cb      ldr     x11, [x14, #0x30]
    // 18: b9804d6c      ldrsw   x12, [x11, #0x4c]
    // 1c: 8b0c0d2c      add     x12, x9, x12, lsl #3
    // 20: f9007acc      str     x12, [x22, #0xf0]
    // 24: 5280008c      mov     w12, #0x4               // =4
    // 28: a900b934      stp     x20, x14, [x9, #0x8]
    // 2c: 1a8c058c      cinc    w12, w12, ne
    // 30: b940016d      ldr     w13, [x11]
    // 34: 37f8006d      tbnz    w13, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 38: 110005ad      add     w13, w13, #0x1
    // 3c: b900016d      str     w13, [x11]
    // 40: f900012b      str     x11, [x9]
    // 44: 9101412d      add     x13, x9, #0x50
    // 48: 91034170      add     x16, x11, #0xd0
    // 4c: b980496f      ldrsw   x15, [x11, #0x48]
    // 50: 3dc005c0      ldr     q0, [x14, #0x10]
    // 54: a902fd3f      stp     xzr, xzr, [x9, #0x28]
    // 58: b900493f      str     wzr, [x9, #0x48]
    // 5c: 8b0f0dae      add     x14, x13, x15, lsl #3
    // 60: 6b0c01ff      cmp     w15, w12
    // 64: 3c818120      stur    q0, [x9, #0x18]
    // 68: a903b930      stp     x16, x14, [x9, #0x38]
    // 6c: 540000cd      b.le    0x84 <_JIT_ENTRY+0x84>
    // 70: f82c79bf      str     xzr, [x13, x12, lsl #3]
    // 74: 9100058c      add     x12, x12, #0x1
    // 78: b980496e      ldrsw   x14, [x11, #0x48]
    // 7c: eb0e019f      cmp     x12, x14
    // 80: 54ffff8b      b.lt    0x70 <_JIT_ENTRY+0x70>
    // 84: f85d810b      ldur    x11, [x8, #-0x28]
    // 88: f100015f      cmp     x10, #0x0
    // 8c: 1a9f07ea      cset    w10, ne
    // 90: f900292b      str     x11, [x9, #0x50]
    // 94: 8b2a4daa      add     x10, x13, w10, uxtw #3
    // 98: f85e010b      ldur    x11, [x8, #-0x20]
    // 9c: f900014b      str     x11, [x10]
    // a0: f85e810b      ldur    x11, [x8, #-0x18]
    // a4: f900054b      str     x11, [x10, #0x8]
    // a8: f85f010b      ldur    x11, [x8, #-0x10]
    // ac: f900094b      str     x11, [x10, #0x10]
    // b0: f85f810b      ldur    x11, [x8, #-0x8]
    // b4: f9000d4b      str     x11, [x10, #0x18]
    // b8: f81d0109      stur    x9, [x8, #-0x30]
    // bc: 14000000      b       0xbc <_JIT_ENTRY+0xbc>
    // 00000000000000bc:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[192] = {
        0xe8, 0x03, 0x15, 0xaa, 0xaa, 0x8e, 0x5d, 0xf8,
        0xae, 0x82, 0x5f, 0xf8, 0xc9, 0x7a, 0x40, 0xf9,
        0x5f, 0x01, 0x00, 0xf1, 0xcb, 0x19, 0x40, 0xf9,
        0x6c, 0x4d, 0x80, 0xb9, 0x2c, 0x0d, 0x0c, 0x8b,
        0xcc, 0x7a, 0x00, 0xf9, 0x8c, 0x00, 0x80, 0x52,
        0x34, 0xb9, 0x00, 0xa9, 0x8c, 0x05, 0x8c, 0x1a,
        0x6d, 0x01, 0x40, 0xb9, 0x6d, 0x00, 0xf8, 0x37,
        0xad, 0x05, 0x00, 0x11, 0x6d, 0x01, 0x00, 0xb9,
        0x2b, 0x01, 0x00, 0xf9, 0x2d, 0x41, 0x01, 0x91,
        0x70, 0x41, 0x03, 0x91, 0x6f, 0x49, 0x80, 0xb9,
        0xc0, 0x05, 0xc0, 0x3d, 0x3f, 0xfd, 0x02, 0xa9,
        0x3f, 0x49, 0x00, 0xb9, 0xae, 0x0d, 0x0f, 0x8b,
        0xff, 0x01, 0x0c, 0x6b, 0x20, 0x81, 0x81, 0x3c,
        0x30, 0xb9, 0x03, 0xa9, 0xcd, 0x00, 0x00, 0x54,
        0xbf, 0x79, 0x2c, 0xf8, 0x8c, 0x05, 0x00, 0x91,
        0x6e, 0x49, 0x80, 0xb9, 0x9f, 0x01, 0x0e, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x0b, 0x81, 0x5d, 0xf8,
        0x5f, 0x01, 0x00, 0xf1, 0xea, 0x07, 0x9f, 0x1a,
        0x2b, 0x29, 0x00, 0xf9, 0xaa, 0x4d, 0x2a, 0x8b,
        0x0b, 0x01, 0x5e, 0xf8, 0x4b, 0x01, 0x00, 0xf9,
        0x0b, 0x81, 0x5e, 0xf8, 0x4b, 0x05, 0x00, 0xf9,
        0x0b, 0x01, 0x5f, 0xf8, 0x4b, 0x09, 0x00, 0xf9,
        0x0b, 0x81, 0x5f, 0xf8, 0x4b, 0x0d, 0x00, 0xf9,
        0x09, 0x01, 0x1d, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0xbc, (uintptr_t)code + sizeof(code_body));
}

void
emit__IS_NONE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _IS_NONE.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _Py_NoneStruct
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _Py_NoneStruct
    // c: eb08001f      cmp     x0, x8
    // 10: 54000140      b.eq    0x38 <_JIT_ENTRY+0x38>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 54000120      b.eq    0x48 <_JIT_ENTRY+0x48>
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // 30: f81f82a8      stur    x8, [x21, #-0x8]
    // 34: 14000000      b       0x34 <_JIT_ENTRY+0x34>
    // 0000000000000034:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // 40: f81f82a8      stur    x8, [x21, #-0x8]
    // 44: 14000000      b       0x44 <_JIT_ENTRY+0x44>
    // 0000000000000044:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 48: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 50: 910003fd      mov     x29, sp
    // 54: f9400108      ldr     x8, [x8]
    // 0000000000000054:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 58: d63f0100      blr     x8
    // 5c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // 60: f9400108      ldr     x8, [x8]
    // 0000000000000060:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // 64: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 68: f81f82a8      stur    x8, [x21, #-0x8]
    // 6c: 14000000      b       0x6c <_JIT_ENTRY+0x6c>
    // 000000000000006c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[112] = {
        0x08, 0x00, 0x00, 0x90, 0xa0, 0x82, 0x5f, 0xf8,
        0x08, 0x01, 0x40, 0xf9, 0x1f, 0x00, 0x08, 0xeb,
        0x40, 0x01, 0x00, 0x54, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x20, 0x01, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: &_Py_TrueStruct+0x0
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x54, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x5c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x6c, (uintptr_t)code + sizeof(code_body));
}

void
emit__IS_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _IS_OP.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8eb7      ldr     x23, [x21, #-0x8]!
    // c: f85f82b8      ldur    x24, [x21, #-0x8]
    // 10: 910003fd      mov     x29, sp
    // 14: b9400308      ldr     w8, [x24]
    // 18: 37f80108      tbnz    w8, #0x1f, 0x38 <_JIT_ENTRY+0x38>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000308      str     w8, [x24]
    // 24: 540000a1      b.ne    0x38 <_JIT_ENTRY+0x38>
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 2c: aa1803e0      mov     x0, x24
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 34: d63f0100      blr     x8
    // 38: b94002e8      ldr     w8, [x23]
    // 3c: 37f80108      tbnz    w8, #0x1f, 0x5c <_JIT_ENTRY+0x5c>
    // 40: 71000508      subs    w8, w8, #0x1
    // 44: b90002e8      str     w8, [x23]
    // 48: 540000a1      b.ne    0x5c <_JIT_ENTRY+0x5c>
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 50: aa1703e0      mov     x0, x23
    // 54: f9400108      ldr     x8, [x8]
    // 0000000000000054:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 58: d63f0100      blr     x8
    // 5c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 60: eb17031f      cmp     x24, x23
    // 64: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 6c: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // 70: f9400129      ldr     x9, [x9]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // 74: 1a9f17ea      cset    w10, eq
    // 78: f940016b      ldr     x11, [x11]
    // 0000000000000078:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // 7c: 6b28215f      cmp     w10, w8, uxth
    // 80: 9a890168      csel    x8, x11, x9, eq
    // 84: f81f0268      stur    x8, [x19, #-0x10]
    // 88: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 8c: 14000000      b       0x8c <_JIT_ENTRY+0x8c>
    // 000000000000008c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[144] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xf3, 0x03, 0x15, 0xaa,
        0xb7, 0x8e, 0x5f, 0xf8, 0xb8, 0x82, 0x5f, 0xf8,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe8, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x1f, 0x03, 0x17, 0xeb, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x0b, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0xea, 0x17, 0x9f, 0x1a,
        0x6b, 0x01, 0x40, 0xf9, 0x5f, 0x21, 0x28, 0x6b,
        0x68, 0x01, 0x89, 0x9a, 0x68, 0x02, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    // 10: &_Py_TrueStruct+0x0
    // 18: &_Py_FalseStruct+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x18, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x54, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x68, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x6c, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x78, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0x8c, (uintptr_t)code + sizeof(code_body));
}

void
emit__ITER_CHECK_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_CHECK_LIST.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyListIter_Type
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyListIter_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyListIter_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyListIter_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__ITER_CHECK_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_CHECK_RANGE.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyRangeIter_Type
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyRangeIter_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyRangeIter_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyRangeIter_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__ITER_CHECK_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_CHECK_TUPLE.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyTupleIter_Type
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyTupleIter_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyTupleIter_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTupleIter_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__ITER_NEXT_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_NEXT_LIST.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a9      ldur    x9, [x21, #-0x8]
    // 4: a941212a      ldp     x10, x8, [x9, #0x10]
    // 8: f9400d08      ldr     x8, [x8, #0x18]
    // c: 9100054b      add     x11, x10, #0x1
    // 10: f900092b      str     x11, [x9, #0x10]
    // 14: f86a7908      ldr     x8, [x8, x10, lsl #3]
    // 18: b9400109      ldr     w9, [x8]
    // 1c: 37f80069      tbnz    w9, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 20: 11000529      add     w9, w9, #0x1
    // 24: b9000109      str     w9, [x8]
    // 28: f80086a8      str     x8, [x21], #0x8
    // 2c: 14000000      b       0x2c <_JIT_ENTRY+0x2c>
    // 000000000000002c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[48] = {
        0xa9, 0x82, 0x5f, 0xf8, 0x2a, 0x21, 0x41, 0xa9,
        0x08, 0x0d, 0x40, 0xf9, 0x4b, 0x05, 0x00, 0x91,
        0x2b, 0x09, 0x00, 0xf9, 0x08, 0x79, 0x6a, 0xf8,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
}

void
emit__ITER_NEXT_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_NEXT_RANGE.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f82a8      ldur    x8, [x21, #-0x8]
    // 8: 910003fd      mov     x29, sp
    // c: a9412500      ldp     x0, x9, [x8, #0x10]
    // 10: f940110a      ldr     x10, [x8, #0x20]
    // 14: d100054a      sub     x10, x10, #0x1
    // 18: 8b000129      add     x9, x9, x0
    // 1c: f900110a      str     x10, [x8, #0x20]
    // 20: f9000909      str     x9, [x8, #0x10]
    // 24: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  R_AARCH64_ADR_GOT_PAGE       PyLong_FromLong
    // 28: f9400108      ldr     x8, [x8]
    // 0000000000000028:  R_AARCH64_LD64_GOT_LO12_NC   PyLong_FromLong
    // 2c: d63f0100      blr     x8
    // 30: b4000080      cbz     x0, 0x40 <_JIT_ENTRY+0x40>
    // 34: f80086a0      str     x0, [x21], #0x8
    // 38: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 3c: 14000000      b       0x3c <_JIT_ENTRY+0x3c>
    // 000000000000003c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 40: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 44: 14000000      b       0x44 <_JIT_ENTRY+0x44>
    // 0000000000000044:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[72] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xa8, 0x82, 0x5f, 0xf8,
        0xfd, 0x03, 0x00, 0x91, 0x00, 0x25, 0x41, 0xa9,
        0x0a, 0x11, 0x40, 0xf9, 0x4a, 0x05, 0x00, 0xd1,
        0x29, 0x01, 0x00, 0x8b, 0x0a, 0x11, 0x00, 0xf9,
        0x09, 0x09, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x80, 0x00, 0x00, 0xb4, 0xa0, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyLong_FromLong+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_FromLong);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data);
    patch_aarch64_26r(code + 0x3c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x44, state->instruction_starts[instruction->error_target]);
}

void
emit__ITER_NEXT_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_NEXT_TUPLE.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a9      ldur    x9, [x21, #-0x8]
    // 4: a941212a      ldp     x10, x8, [x9, #0x10]
    // 8: 8b0a0d08      add     x8, x8, x10, lsl #3
    // c: 9100054a      add     x10, x10, #0x1
    // 10: f900092a      str     x10, [x9, #0x10]
    // 14: f9400d08      ldr     x8, [x8, #0x18]
    // 18: b9400109      ldr     w9, [x8]
    // 1c: 37f80069      tbnz    w9, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 20: 11000529      add     w9, w9, #0x1
    // 24: b9000109      str     w9, [x8]
    // 28: f80086a8      str     x8, [x21], #0x8
    // 2c: 14000000      b       0x2c <_JIT_ENTRY+0x2c>
    // 000000000000002c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[48] = {
        0xa9, 0x82, 0x5f, 0xf8, 0x2a, 0x21, 0x41, 0xa9,
        0x08, 0x0d, 0x0a, 0x8b, 0x4a, 0x05, 0x00, 0x91,
        0x2a, 0x09, 0x00, 0xf9, 0x08, 0x0d, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
}

void
emit__JUMP_TO_TOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _JUMP_TO_TOP.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 14000000      b       0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 4: 00 00 00 00
    const unsigned char code_body[8] = {
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x0, state->instruction_starts[instruction->jump_target]);
}

void
emit__LIST_APPEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LIST_APPEND.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: 2a2803e8      mvn     w8, w8
    // c: 531d7108      lsl     w8, w8, #3
    // 10: b26db108      orr     x8, x8, #0xfffffffffff80000
    // 14: f8686aa0      ldr     x0, [x21, x8]
    // 18: f85f8ea1      ldr     x1, [x21, #-0x8]!
    // 1c: f9400808      ldr     x8, [x0, #0x10]
    // 20: f9401009      ldr     x9, [x0, #0x20]
    // 24: eb08013f      cmp     x9, x8
    // 28: 540000cd      b.le    0x40 <_JIT_ENTRY+0x40>
    // 2c: f9400c09      ldr     x9, [x0, #0x18]
    // 30: 9100050a      add     x10, x8, #0x1
    // 34: f900080a      str     x10, [x0, #0x10]
    // 38: f8287921      str     x1, [x9, x8, lsl #3]
    // 3c: 14000000      b       0x3c <_JIT_ENTRY+0x3c>
    // 000000000000003c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 40: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 44: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  R_AARCH64_ADR_GOT_PAGE       _PyList_AppendTakeRefListResize
    // 48: 910003fd      mov     x29, sp
    // 4c: f9400108      ldr     x8, [x8]
    // 000000000000004c:  R_AARCH64_LD64_GOT_LO12_NC   _PyList_AppendTakeRefListResize
    // 50: d63f0100      blr     x8
    // 54: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 58: 37f80040      tbnz    w0, #0x1f, 0x60 <_JIT_ENTRY+0x60>
    // 5c: 14000000      b       0x5c <_JIT_ENTRY+0x5c>
    // 000000000000005c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 60: 14000000      b       0x60 <_JIT_ENTRY+0x60>
    // 0000000000000060:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 64: 00 00 00 00
    const unsigned char code_body[104] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe8, 0x03, 0x28, 0x2a, 0x08, 0x71, 0x1d, 0x53,
        0x08, 0xb1, 0x6d, 0xb2, 0xa0, 0x6a, 0x68, 0xf8,
        0xa1, 0x8e, 0x5f, 0xf8, 0x08, 0x08, 0x40, 0xf9,
        0x09, 0x10, 0x40, 0xf9, 0x3f, 0x01, 0x08, 0xeb,
        0xcd, 0x00, 0x00, 0x54, 0x09, 0x0c, 0x40, 0xf9,
        0x0a, 0x05, 0x00, 0x91, 0x0a, 0x08, 0x00, 0xf9,
        0x21, 0x79, 0x28, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xfd, 0x7b, 0xc1, 0xa8,
        0x40, 0x00, 0xf8, 0x37, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyList_AppendTakeRefListResize+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyList_AppendTakeRefListResize);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x3c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x5c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x60, state->instruction_starts[instruction->error_target]);
}

void
emit__LIST_EXTEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LIST_EXTEND.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 910003fd      mov     x29, sp
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 10: f85f82b3      ldur    x19, [x21, #-0x8]
    // 14: 2a2803e8      mvn     w8, w8
    // 18: aa1303e1      mov     x1, x19
    // 1c: 531d7108      lsl     w8, w8, #3
    // 20: b26db108      orr     x8, x8, #0xfffffffffff80000
    // 24: f8686aa0      ldr     x0, [x21, x8]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       _PyList_Extend
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   _PyList_Extend
    // 34: d63f0100      blr     x8
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: b4000120      cbz     x0, 0x64 <_JIT_ENTRY+0x64>
    // 44: b9400268      ldr     w8, [x19]
    // 48: 37f80088      tbnz    w8, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 4c: 71000508      subs    w8, w8, #0x1
    // 50: b9000268      str     w8, [x19]
    // 54: 540005e0      b.eq    0x110 <_JIT_ENTRY+0x110>
    // 58: d10022b5      sub     x21, x21, #0x8
    // 5c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 60: 14000000      b       0x60 <_JIT_ENTRY+0x60>
    // 0000000000000060:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 64: 90000017      adrp    x23, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       PyExc_TypeError
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  R_AARCH64_ADR_GOT_PAGE       _PyErr_ExceptionMatches
    // 6c: aa1603e0      mov     x0, x22
    // 70: f94002f7      ldr     x23, [x23]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_TypeError
    // 74: f9002295      str     x21, [x20, #0x40]
    // 78: f94002e1      ldr     x1, [x23]
    // 7c: f9400108      ldr     x8, [x8]
    // 000000000000007c:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_ExceptionMatches
    // 80: d63f0100      blr     x8
    // 84: f9402295      ldr     x21, [x20, #0x40]
    // 88: f900229f      str     xzr, [x20, #0x40]
    // 8c: 34000320      cbz     w0, 0xf0 <_JIT_ENTRY+0xf0>
    // 90: f9400668      ldr     x8, [x19, #0x8]
    // 94: f9406d08      ldr     x8, [x8, #0xd8]
    // 98: b50002c8      cbnz    x8, 0xf0 <_JIT_ENTRY+0xf0>
    // 9c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  R_AARCH64_ADR_GOT_PAGE       PySequence_Check
    // a0: aa1303e0      mov     x0, x19
    // a4: f9400108      ldr     x8, [x8]
    // 00000000000000a4:  R_AARCH64_LD64_GOT_LO12_NC   PySequence_Check
    // a8: d63f0100      blr     x8
    // ac: 35000220      cbnz    w0, 0xf0 <_JIT_ENTRY+0xf0>
    // b0: f9002295      str     x21, [x20, #0x40]
    // b4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  R_AARCH64_ADR_GOT_PAGE       _PyErr_Clear
    // b8: aa1603e0      mov     x0, x22
    // bc: f9400108      ldr     x8, [x8]
    // 00000000000000bc:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_Clear
    // c0: d63f0100      blr     x8
    // c4: f9400668      ldr     x8, [x19, #0x8]
    // c8: f94002e1      ldr     x1, [x23]
    // cc: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1
    // d0: 91000042      add     x2, x2, #0x0
    // 00000000000000d0:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1
    // d4: aa1603e0      mov     x0, x22
    // d8: f9400d03      ldr     x3, [x8, #0x18]
    // dc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000dc:  R_AARCH64_ADR_GOT_PAGE       _PyErr_Format
    // e0: f9400108      ldr     x8, [x8]
    // 00000000000000e0:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_Format
    // e4: d63f0100      blr     x8
    // e8: f9402295      ldr     x21, [x20, #0x40]
    // ec: f900229f      str     xzr, [x20, #0x40]
    // f0: b9400268      ldr     w8, [x19]
    // f4: 37f80088      tbnz    w8, #0x1f, 0x104 <_JIT_ENTRY+0x104>
    // f8: 71000508      subs    w8, w8, #0x1
    // fc: b9000268      str     w8, [x19]
    // 100: 54000160      b.eq    0x12c <_JIT_ENTRY+0x12c>
    // 104: d10022b5      sub     x21, x21, #0x8
    // 108: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 10c: 14000000      b       0x10c <_JIT_ENTRY+0x10c>
    // 000000000000010c:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 110: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000110:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 114: aa1303e0      mov     x0, x19
    // 118: f9400108      ldr     x8, [x8]
    // 0000000000000118:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 11c: d63f0100      blr     x8
    // 120: d10022b5      sub     x21, x21, #0x8
    // 124: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 128: 14000000      b       0x128 <_JIT_ENTRY+0x128>
    // 0000000000000128:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 12c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000012c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 130: aa1303e0      mov     x0, x19
    // 134: f9400108      ldr     x8, [x8]
    // 0000000000000134:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 138: d63f0100      blr     x8
    // 13c: d10022b5      sub     x21, x21, #0x8
    // 140: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 144: 14000000      b       0x144 <_JIT_ENTRY+0x144>
    // 0000000000000144:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[328] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0xe8, 0x03, 0x28, 0x2a,
        0xe1, 0x03, 0x13, 0xaa, 0x08, 0x71, 0x1d, 0x53,
        0x08, 0xb1, 0x6d, 0xb2, 0xa0, 0x6a, 0x68, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x20, 0x01, 0x00, 0xb4, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xe0, 0x05, 0x00, 0x54,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x17, 0x00, 0x00, 0x90,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0xf7, 0x02, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe1, 0x02, 0x40, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x20, 0x03, 0x00, 0x34,
        0x68, 0x06, 0x40, 0xf9, 0x08, 0x6d, 0x40, 0xf9,
        0xc8, 0x02, 0x00, 0xb5, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x20, 0x02, 0x00, 0x35,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x16, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x68, 0x06, 0x40, 0xf9,
        0xe1, 0x02, 0x40, 0xf9, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0xe0, 0x03, 0x16, 0xaa,
        0x03, 0x0d, 0x40, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x60, 0x01, 0x00, 0x54, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: 'Value after * must be an iterable, not %.200s\x00'
    // 2e: 00 00
    // 30: OPARG
    // 38: &_PyList_Extend+0x0
    // 40: &PyExc_TypeError+0x0
    // 48: &_PyErr_ExceptionMatches+0x0
    // 50: &PySequence_Check+0x0
    // 58: &_PyErr_Clear+0x0
    // 60: &_PyErr_Format+0x0
    // 68: &_Py_Dealloc+0x0
    const unsigned char data_body[112] = {
        0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66,
        0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75,
        0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e,
        0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c,
        0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25,
        0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, instruction->oparg);
    patch_64(data + 0x38, (uintptr_t)&_PyList_Extend);
    patch_64(data + 0x40, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x48, (uintptr_t)&_PyErr_ExceptionMatches);
    patch_64(data + 0x50, (uintptr_t)&PySequence_Check);
    patch_64(data + 0x58, (uintptr_t)&_PyErr_Clear);
    patch_64(data + 0x60, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x68, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x30);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data + 0x30);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x38);
    patch_aarch64_26r(code + 0x60, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x40);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data + 0x48);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x40);
    patch_aarch64_12x(code + 0x7c, (uintptr_t)data + 0x48);
    patch_aarch64_21rx(code + 0x9c, (uintptr_t)data + 0x50);
    patch_aarch64_12x(code + 0xa4, (uintptr_t)data + 0x50);
    patch_aarch64_21rx(code + 0xb4, (uintptr_t)data + 0x58);
    patch_aarch64_12x(code + 0xbc, (uintptr_t)data + 0x58);
    patch_aarch64_21r(code + 0xcc, (uintptr_t)data);
    patch_aarch64_12(code + 0xd0, (uintptr_t)data);
    patch_aarch64_33rx(code + 0xdc, (uintptr_t)data + 0x60);
    patch_aarch64_26r(code + 0x10c, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0x110, (uintptr_t)data + 0x68);
    patch_aarch64_12x(code + 0x118, (uintptr_t)data + 0x68);
    patch_aarch64_26r(code + 0x128, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x12c, (uintptr_t)data + 0x68);
    patch_aarch64_12x(code + 0x134, (uintptr_t)data + 0x68);
    patch_aarch64_26r(code + 0x144, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 90000017      adrp    x23, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // c: 910043fd      add     x29, sp, #0x10
    // 10: f94002f7      ldr     x23, [x23]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f9400288      ldr     x8, [x20]
    // 18: f85f82b3      ldur    x19, [x21, #-0x8]
    // 1c: f9401108      ldr     x8, [x8, #0x20]
    // 20: 53013ee9      ubfx    w9, w23, #1, #15
    // 24: 8b294d08      add     x8, x8, w9, uxtw #3
    // 28: f9400d01      ldr     x1, [x8, #0x18]
    // 2c: 37000297      tbnz    w23, #0x0, 0x7c <_JIT_ENTRY+0x7c>
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  R_AARCH64_ADR_GOT_PAGE       PyObject_GetAttr
    // 38: aa1303e0      mov     x0, x19
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_GetAttr
    // 40: d63f0100      blr     x8
    // 44: f9402298      ldr     x24, [x20, #0x40]
    // 48: f900229f      str     xzr, [x20, #0x40]
    // 4c: b9400268      ldr     w8, [x19]
    // 50: 37f80088      tbnz    w8, #0x1f, 0x60 <_JIT_ENTRY+0x60>
    // 54: 71000508      subs    w8, w8, #0x1
    // 58: b9000268      str     w8, [x19]
    // 5c: 540004e0      b.eq    0xf8 <_JIT_ENTRY+0xf8>
    // 60: b40005a0      cbz     x0, 0x114 <_JIT_ENTRY+0x114>
    // 64: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 68: 120002e8      and     w8, w23, #0x1
    // 6c: 8b284f15      add     x21, x24, w8, uxtw #3
    // 70: f81f8300      stur    x0, [x24, #-0x8]
    // 74: 910083ff      add     sp, sp, #0x20
    // 78: 14000000      b       0x78 <_JIT_ENTRY+0x78>
    // 0000000000000078:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 7c: f90007ff      str     xzr, [sp, #0x8]
    // 80: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  R_AARCH64_ADR_GOT_PAGE       _PyObject_GetMethod
    // 84: 910023e2      add     x2, sp, #0x8
    // 88: f9002295      str     x21, [x20, #0x40]
    // 8c: aa1303e0      mov     x0, x19
    // 90: f9400108      ldr     x8, [x8]
    // 0000000000000090:  R_AARCH64_LD64_GOT_LO12_NC   _PyObject_GetMethod
    // 94: d63f0100      blr     x8
    // 98: f9402298      ldr     x24, [x20, #0x40]
    // 9c: f900229f      str     xzr, [x20, #0x40]
    // a0: 34000060      cbz     w0, 0xac <_JIT_ENTRY+0xac>
    // a4: f94007e0      ldr     x0, [sp, #0x8]
    // a8: 1400000d      b       0xdc <_JIT_ENTRY+0xdc>
    // ac: b9400268      ldr     w8, [x19]
    // b0: 37f80108      tbnz    w8, #0x1f, 0xd0 <_JIT_ENTRY+0xd0>
    // b4: 71000508      subs    w8, w8, #0x1
    // b8: b9000268      str     w8, [x19]
    // bc: 540000a1      b.ne    0xd0 <_JIT_ENTRY+0xd0>
    // c0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c0:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // c4: aa1303e0      mov     x0, x19
    // c8: f9400108      ldr     x8, [x8]
    // 00000000000000c8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // cc: d63f0100      blr     x8
    // d0: f94007e0      ldr     x0, [sp, #0x8]
    // d4: b4000200      cbz     x0, 0x114 <_JIT_ENTRY+0x114>
    // d8: aa1f03f3      mov     x19, xzr
    // dc: f90002b3      str     x19, [x21]
    // e0: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // e4: 120002e8      and     w8, w23, #0x1
    // e8: 8b284f15      add     x21, x24, w8, uxtw #3
    // ec: f81f8300      stur    x0, [x24, #-0x8]
    // f0: 910083ff      add     sp, sp, #0x20
    // f4: 14000000      b       0xf4 <_JIT_ENTRY+0xf4>
    // 00000000000000f4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // f8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000f8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // fc: aa0003f5      mov     x21, x0
    // 100: aa1303e0      mov     x0, x19
    // 104: f9400108      ldr     x8, [x8]
    // 0000000000000104:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 108: d63f0100      blr     x8
    // 10c: aa1503e0      mov     x0, x21
    // 110: b5fffab5      cbnz    x21, 0x64 <_JIT_ENTRY+0x64>
    // 114: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 118: d1002315      sub     x21, x24, #0x8
    // 11c: 910083ff      add     sp, sp, #0x20
    // 120: 14000000      b       0x120 <_JIT_ENTRY+0x120>
    // 0000000000000120:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 124: 00 00 00 00
    const unsigned char code_body[296] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0x17, 0x00, 0x00, 0x90, 0xfd, 0x43, 0x00, 0x91,
        0xf7, 0x02, 0x40, 0xf9, 0x88, 0x02, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0x08, 0x11, 0x40, 0xf9,
        0xe9, 0x3e, 0x01, 0x53, 0x08, 0x4d, 0x29, 0x8b,
        0x01, 0x0d, 0x40, 0xf9, 0x97, 0x02, 0x00, 0x37,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x98, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xe0, 0x04, 0x00, 0x54,
        0xa0, 0x05, 0x00, 0xb4, 0xfd, 0x7b, 0x41, 0xa9,
        0xe8, 0x02, 0x00, 0x12, 0x15, 0x4f, 0x28, 0x8b,
        0x00, 0x83, 0x1f, 0xf8, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xff, 0x07, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe2, 0x23, 0x00, 0x91,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x98, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x60, 0x00, 0x00, 0x34, 0xe0, 0x07, 0x40, 0xf9,
        0x0d, 0x00, 0x00, 0x14, 0x68, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x07, 0x40, 0xf9, 0x00, 0x02, 0x00, 0xb4,
        0xf3, 0x03, 0x1f, 0xaa, 0xb3, 0x02, 0x00, 0xf9,
        0xfd, 0x7b, 0x41, 0xa9, 0xe8, 0x02, 0x00, 0x12,
        0x15, 0x4f, 0x28, 0x8b, 0x00, 0x83, 0x1f, 0xf8,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x15, 0xaa,
        0xb5, 0xfa, 0xff, 0xb5, 0xfd, 0x7b, 0x41, 0xa9,
        0x15, 0x23, 0x00, 0xd1, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyObject_GetAttr+0x0
    // 10: &_PyObject_GetMethod+0x0
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_GetAttr);
    patch_64(data + 0x10, (uintptr_t)&_PyObject_GetMethod);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x3c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x78, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x80, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x90, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xc0, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xc8, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0xf4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0xf8, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x104, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0x120, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_ATTR_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_CLASS.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000013      adrp    x19, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 4: f9400273      ldr     x19, [x19]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 8: f85f82a0      ldur    x0, [x21, #-0x8]
    // c: b9400268      ldr     w8, [x19]
    // 10: 37f80068      tbnz    w8, #0x1f, 0x1c <_JIT_ENTRY+0x1c>
    // 14: 11000508      add     w8, w8, #0x1
    // 18: b9000268      str     w8, [x19]
    // 1c: b9400008      ldr     w8, [x0]
    // 20: 37f80088      tbnz    w8, #0x1f, 0x30 <_JIT_ENTRY+0x30>
    // 24: 71000508      subs    w8, w8, #0x1
    // 28: b9000008      str     w8, [x0]
    // 2c: 54000060      b.eq    0x38 <_JIT_ENTRY+0x38>
    // 30: f81f82b3      stur    x19, [x21, #-0x8]
    // 34: 14000000      b       0x34 <_JIT_ENTRY+0x34>
    // 0000000000000034:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 38: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 3c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 40: 910003fd      mov     x29, sp
    // 44: f9400108      ldr     x8, [x8]
    // 0000000000000044:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 48: d63f0100      blr     x8
    // 4c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 50: f81f82b3      stur    x19, [x21, #-0x8]
    // 54: 14000000      b       0x54 <_JIT_ENTRY+0x54>
    // 0000000000000054:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[88] = {
        0x13, 0x00, 0x00, 0x90, 0x73, 0x02, 0x40, 0xf9,
        0xa0, 0x82, 0x5f, 0xf8, 0x68, 0x02, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x68, 0x02, 0x00, 0xb9, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x60, 0x00, 0x00, 0x54,
        0xb3, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xfd, 0x7b, 0xc1, 0xa8,
        0xb3, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x3c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x44, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_INSTANCE_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_INSTANCE_VALUE.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 8: f85f82a0      ldur    x0, [x21, #-0x8]
    // c: 92403d08      and     x8, x8, #0xffff
    // 10: f8686808      ldr     x8, [x0, x8]
    // 14: b40001e8      cbz     x8, 0x50 <_JIT_ENTRY+0x50>
    // 18: b9400109      ldr     w9, [x8]
    // 1c: 37f80069      tbnz    w9, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 20: 11000529      add     w9, w9, #0x1
    // 24: b9000109      str     w9, [x8]
    // 28: f81f82a8      stur    x8, [x21, #-0x8]
    // 2c: f9002295      str     x21, [x20, #0x40]
    // 30: b9400008      ldr     w8, [x0]
    // 34: 37f80088      tbnz    w8, #0x1f, 0x44 <_JIT_ENTRY+0x44>
    // 38: 71000508      subs    w8, w8, #0x1
    // 3c: b9000008      str     w8, [x0]
    // 40: 540000a0      b.eq    0x54 <_JIT_ENTRY+0x54>
    // 44: f9402295      ldr     x21, [x20, #0x40]
    // 48: f900229f      str     xzr, [x20, #0x40]
    // 4c: 14000000      b       0x4c <_JIT_ENTRY+0x4c>
    // 000000000000004c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 50: 14000000      b       0x50 <_JIT_ENTRY+0x50>
    // 0000000000000050:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 54: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 58: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 5c: 910003fd      mov     x29, sp
    // 60: f9400108      ldr     x8, [x8]
    // 0000000000000060:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 64: d63f0100      blr     x8
    // 68: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 6c: f9402295      ldr     x21, [x20, #0x40]
    // 70: f900229f      str     xzr, [x20, #0x40]
    // 74: 14000000      b       0x74 <_JIT_ENTRY+0x74>
    // 0000000000000074:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[120] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x3d, 0x40, 0x92,
        0x08, 0x68, 0x68, 0xf8, 0xe8, 0x01, 0x00, 0xb4,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x82, 0x1f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x4c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x50, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0x58, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x60, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x74, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_METHOD_LAZY_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_METHOD_LAZY_DICT.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 4: aa1503e8      mov     x8, x21
    // 8: f940014a      ldr     x10, [x10]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // c: f85f82a9      ldur    x9, [x21, #-0x8]
    // 10: b940014b      ldr     w11, [x10]
    // 14: 37f8006b      tbnz    w11, #0x1f, 0x20 <_JIT_ENTRY+0x20>
    // 18: 1100056b      add     w11, w11, #0x1
    // 1c: b900014b      str     w11, [x10]
    // 20: 91002115      add     x21, x8, #0x8
    // 24: a93fa50a      stp     x10, x9, [x8, #-0x8]
    // 28: 14000000      b       0x28 <_JIT_ENTRY+0x28>
    // 0000000000000028:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[40] = {
        0x0a, 0x00, 0x00, 0x90, 0xe8, 0x03, 0x15, 0xaa,
        0x4a, 0x01, 0x40, 0xf9, 0xa9, 0x82, 0x5f, 0xf8,
        0x4b, 0x01, 0x40, 0xb9, 0x6b, 0x00, 0xf8, 0x37,
        0x6b, 0x05, 0x00, 0x11, 0x4b, 0x01, 0x00, 0xb9,
        0x15, 0x21, 0x00, 0x91, 0x0a, 0xa5, 0x3f, 0xa9,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
}

void
emit__LOAD_ATTR_METHOD_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_METHOD_NO_DICT.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 4: aa1503e8      mov     x8, x21
    // 8: f940014a      ldr     x10, [x10]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // c: f85f82a9      ldur    x9, [x21, #-0x8]
    // 10: b940014b      ldr     w11, [x10]
    // 14: 37f8006b      tbnz    w11, #0x1f, 0x20 <_JIT_ENTRY+0x20>
    // 18: 1100056b      add     w11, w11, #0x1
    // 1c: b900014b      str     w11, [x10]
    // 20: 91002115      add     x21, x8, #0x8
    // 24: a93fa50a      stp     x10, x9, [x8, #-0x8]
    // 28: 14000000      b       0x28 <_JIT_ENTRY+0x28>
    // 0000000000000028:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[40] = {
        0x0a, 0x00, 0x00, 0x90, 0xe8, 0x03, 0x15, 0xaa,
        0x4a, 0x01, 0x40, 0xf9, 0xa9, 0x82, 0x5f, 0xf8,
        0x4b, 0x01, 0x40, 0xb9, 0x6b, 0x00, 0xf8, 0x37,
        0x6b, 0x05, 0x00, 0x11, 0x4b, 0x01, 0x00, 0xb9,
        0x15, 0x21, 0x00, 0x91, 0x0a, 0xa5, 0x3f, 0xa9,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
}

void
emit__LOAD_ATTR_METHOD_WITH_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_METHOD_WITH_VALUES.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 4: aa1503e8      mov     x8, x21
    // 8: f940014a      ldr     x10, [x10]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // c: f85f82a9      ldur    x9, [x21, #-0x8]
    // 10: b940014b      ldr     w11, [x10]
    // 14: 37f8006b      tbnz    w11, #0x1f, 0x20 <_JIT_ENTRY+0x20>
    // 18: 1100056b      add     w11, w11, #0x1
    // 1c: b900014b      str     w11, [x10]
    // 20: 91002115      add     x21, x8, #0x8
    // 24: a93fa50a      stp     x10, x9, [x8, #-0x8]
    // 28: 14000000      b       0x28 <_JIT_ENTRY+0x28>
    // 0000000000000028:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[40] = {
        0x0a, 0x00, 0x00, 0x90, 0xe8, 0x03, 0x15, 0xaa,
        0x4a, 0x01, 0x40, 0xf9, 0xa9, 0x82, 0x5f, 0xf8,
        0x4b, 0x01, 0x40, 0xb9, 0x6b, 0x00, 0xf8, 0x37,
        0x6b, 0x05, 0x00, 0x11, 0x4b, 0x01, 0x00, 0xb9,
        0x15, 0x21, 0x00, 0x91, 0x0a, 0xa5, 0x3f, 0xa9,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
}

void
emit__LOAD_ATTR_MODULE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_MODULE.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: 5280002a      mov     w10, #0x1               // =1
    // 8: f9400808      ldr     x8, [x0, #0x10]
    // c: f9401108      ldr     x8, [x8, #0x20]
    // 10: 39402509      ldrb    w9, [x8, #0x9]
    // 14: 9ac92149      lsl     x9, x10, x9
    // 18: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 1c: f940014a      ldr     x10, [x10]
    // 000000000000001c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 20: 8b090108      add     x8, x8, x9
    // 24: 8b2a3108      add     x8, x8, w10, uxth #4
    // 28: f9401513      ldr     x19, [x8, #0x28]
    // 2c: b4000193      cbz     x19, 0x5c <_JIT_ENTRY+0x5c>
    // 30: b9400268      ldr     w8, [x19]
    // 34: 37f80068      tbnz    w8, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 38: 11000508      add     w8, w8, #0x1
    // 3c: b9000268      str     w8, [x19]
    // 40: b9400008      ldr     w8, [x0]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 48: 71000508      subs    w8, w8, #0x1
    // 4c: b9000008      str     w8, [x0]
    // 50: 54000080      b.eq    0x60 <_JIT_ENTRY+0x60>
    // 54: f81f82b3      stur    x19, [x21, #-0x8]
    // 58: 14000000      b       0x58 <_JIT_ENTRY+0x58>
    // 0000000000000058:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 5c: 14000000      b       0x5c <_JIT_ENTRY+0x5c>
    // 000000000000005c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 60: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 68: 910003fd      mov     x29, sp
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 70: d63f0100      blr     x8
    // 74: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 78: f81f82b3      stur    x19, [x21, #-0x8]
    // 7c: 14000000      b       0x7c <_JIT_ENTRY+0x7c>
    // 000000000000007c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[128] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x2a, 0x00, 0x80, 0x52,
        0x08, 0x08, 0x40, 0xf9, 0x08, 0x11, 0x40, 0xf9,
        0x09, 0x25, 0x40, 0x39, 0x49, 0x21, 0xc9, 0x9a,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x08, 0x01, 0x09, 0x8b, 0x08, 0x31, 0x2a, 0x8b,
        0x13, 0x15, 0x40, 0xf9, 0x93, 0x01, 0x00, 0xb4,
        0x68, 0x02, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x68, 0x02, 0x00, 0xb9,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x80, 0x00, 0x00, 0x54, 0xb3, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xfd, 0x7b, 0xc1, 0xa8,
        0xb3, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
    patch_aarch64_26r(code + 0x58, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x5c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x6c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x7c, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_MODULE_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_MODULE_FROM_KEYS.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85f8ea9      ldr     x9, [x21, #-0x8]!
    // 8: 5280002b      mov     w11, #0x1               // =1
    // c: 3940252a      ldrb    w10, [x9, #0x9]
    // 10: 9aca216a      lsl     x10, x11, x10
    // 14: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 18: f940016b      ldr     x11, [x11]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 1c: 8b0a0129      add     x9, x9, x10
    // 20: 8b2b3129      add     x9, x9, w11, uxth #4
    // 24: f9401529      ldr     x9, [x9, #0x28]
    // 28: b4000209      cbz     x9, 0x68 <_JIT_ENTRY+0x68>
    // 2c: b940012a      ldr     w10, [x9]
    // 30: f85f82a0      ldur    x0, [x21, #-0x8]
    // 34: 37f8006a      tbnz    w10, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 38: 1100054a      add     w10, w10, #0x1
    // 3c: b900012a      str     w10, [x9]
    // 40: f81f0109      stur    x9, [x8, #-0x10]
    // 44: f9002295      str     x21, [x20, #0x40]
    // 48: b9400008      ldr     w8, [x0]
    // 4c: 37f80088      tbnz    w8, #0x1f, 0x5c <_JIT_ENTRY+0x5c>
    // 50: 71000508      subs    w8, w8, #0x1
    // 54: b9000008      str     w8, [x0]
    // 58: 540000a0      b.eq    0x6c <_JIT_ENTRY+0x6c>
    // 5c: f9402295      ldr     x21, [x20, #0x40]
    // 60: f900229f      str     xzr, [x20, #0x40]
    // 64: 14000000      b       0x64 <_JIT_ENTRY+0x64>
    // 0000000000000064:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 68: 14000000      b       0x68 <_JIT_ENTRY+0x68>
    // 0000000000000068:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 6c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 70: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 74: 910003fd      mov     x29, sp
    // 78: f9400108      ldr     x8, [x8]
    // 0000000000000078:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 7c: d63f0100      blr     x8
    // 80: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 84: f9402295      ldr     x21, [x20, #0x40]
    // 88: f900229f      str     xzr, [x20, #0x40]
    // 8c: 14000000      b       0x8c <_JIT_ENTRY+0x8c>
    // 000000000000008c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[144] = {
        0xe8, 0x03, 0x15, 0xaa, 0xa9, 0x8e, 0x5f, 0xf8,
        0x2b, 0x00, 0x80, 0x52, 0x2a, 0x25, 0x40, 0x39,
        0x6a, 0x21, 0xca, 0x9a, 0x0b, 0x00, 0x00, 0x90,
        0x6b, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x0a, 0x8b,
        0x29, 0x31, 0x2b, 0x8b, 0x29, 0x15, 0x40, 0xf9,
        0x09, 0x02, 0x00, 0xb4, 0x2a, 0x01, 0x40, 0xb9,
        0xa0, 0x82, 0x5f, 0xf8, 0x6a, 0x00, 0xf8, 0x37,
        0x4a, 0x05, 0x00, 0x11, 0x2a, 0x01, 0x00, 0xb9,
        0x09, 0x01, 0x1f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x68, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0x70, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x78, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x8c, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_NONDESCRIPTOR_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: b9400008      ldr     w8, [x0]
    // 8: 37f80148      tbnz    w8, #0x1f, 0x30 <_JIT_ENTRY+0x30>
    // c: 71000508      subs    w8, w8, #0x1
    // 10: b9000008      str     w8, [x0]
    // 14: 540000e1      b.ne    0x30 <_JIT_ENTRY+0x30>
    // 18: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 1c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 20: 910003fd      mov     x29, sp
    // 24: f9400108      ldr     x8, [x8]
    // 0000000000000024:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 28: d63f0100      blr     x8
    // 2c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 30: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 38: b9400109      ldr     w9, [x8]
    // 3c: 37f80069      tbnz    w9, #0x1f, 0x48 <_JIT_ENTRY+0x48>
    // 40: 11000529      add     w9, w9, #0x1
    // 44: b9000109      str     w9, [x8]
    // 48: f81f82a8      stur    x8, [x21, #-0x8]
    // 4c: 14000000      b       0x4c <_JIT_ENTRY+0x4c>
    // 000000000000004c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[80] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x48, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xe1, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xfd, 0x7b, 0xc1, 0xa8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x4c, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: b9400008      ldr     w8, [x0]
    // 8: 37f80148      tbnz    w8, #0x1f, 0x30 <_JIT_ENTRY+0x30>
    // c: 71000508      subs    w8, w8, #0x1
    // 10: b9000008      str     w8, [x0]
    // 14: 540000e1      b.ne    0x30 <_JIT_ENTRY+0x30>
    // 18: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 1c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 20: 910003fd      mov     x29, sp
    // 24: f9400108      ldr     x8, [x8]
    // 0000000000000024:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 28: d63f0100      blr     x8
    // 2c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 30: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 38: b9400109      ldr     w9, [x8]
    // 3c: 37f80069      tbnz    w9, #0x1f, 0x48 <_JIT_ENTRY+0x48>
    // 40: 11000529      add     w9, w9, #0x1
    // 44: b9000109      str     w9, [x8]
    // 48: f81f82a8      stur    x8, [x21, #-0x8]
    // 4c: 14000000      b       0x4c <_JIT_ENTRY+0x4c>
    // 000000000000004c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[80] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x48, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xe1, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xfd, 0x7b, 0xc1, 0xa8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x4c, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_PROPERTY_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_PROPERTY_FRAME.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 4: 528001aa      mov     w10, #0xd               // =13
    // 8: f940016b      ldr     x11, [x11]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // c: f9401968      ldr     x8, [x11, #0x30]
    // 10: b9403109      ldr     w9, [x8, #0x30]
    // 14: 0a0a0129      and     w9, w9, w10
    // 18: 7100053f      cmp     w9, #0x1
    // 1c: 540005e1      b.ne    0xd8 <_JIT_ENTRY+0xd8>
    // 20: b9403d09      ldr     w9, [x8, #0x3c]
    // 24: 350005a9      cbnz    w9, 0xd8 <_JIT_ENTRY+0xd8>
    // 28: b9403509      ldr     w9, [x8, #0x34]
    // 2c: 7100053f      cmp     w9, #0x1
    // 30: 54000541      b.ne    0xd8 <_JIT_ENTRY+0xd8>
    // 34: f9407ac9      ldr     x9, [x22, #0xf0]
    // 38: b4000509      cbz     x9, 0xd8 <_JIT_ENTRY+0xd8>
    // 3c: f9407eca      ldr     x10, [x22, #0xf8]
    // 40: b9804d0c      ldrsw   x12, [x8, #0x4c]
    // 44: cb09014a      sub     x10, x10, x9
    // 48: eb8a0d9f      cmp     x12, x10, asr #3
    // 4c: 5400046a      b.ge    0xd8 <_JIT_ENTRY+0xd8>
    // 50: b940016d      ldr     w13, [x11]
    // 54: f85f82aa      ldur    x10, [x21, #-0x8]
    // 58: 37f8006d      tbnz    w13, #0x1f, 0x64 <_JIT_ENTRY+0x64>
    // 5c: 110005ad      add     w13, w13, #0x1
    // 60: b900016d      str     w13, [x11]
    // 64: 8b0c0d2c      add     x12, x9, x12, lsl #3
    // 68: f9007acc      str     x12, [x22, #0xf0]
    // 6c: a900ad34      stp     x20, x11, [x9, #0x8]
    // 70: b940010c      ldr     w12, [x8]
    // 74: 37f8006c      tbnz    w12, #0x1f, 0x80 <_JIT_ENTRY+0x80>
    // 78: 1100058c      add     w12, w12, #0x1
    // 7c: b900010c      str     w12, [x8]
    // 80: f9000128      str     x8, [x9]
    // 84: 9103410d      add     x13, x8, #0xd0
    // 88: b980490c      ldrsw   x12, [x8, #0x48]
    // 8c: 3dc00560      ldr     q0, [x11, #0x10]
    // 90: a902fd3f      stp     xzr, xzr, [x9, #0x28]
    // 94: b900493f      str     wzr, [x9, #0x48]
    // 98: 8b0c0d2b      add     x11, x9, x12, lsl #3
    // 9c: 7100099f      cmp     w12, #0x2
    // a0: 3c818120      stur    q0, [x9, #0x18]
    // a4: 9101416b      add     x11, x11, #0x50
    // a8: a903ad2d      stp     x13, x11, [x9, #0x38]
    // ac: 5400010b      b.lt    0xcc <_JIT_ENTRY+0xcc>
    // b0: 9101612b      add     x11, x9, #0x58
    // b4: 5280002c      mov     w12, #0x1               // =1
    // b8: f800857f      str     xzr, [x11], #0x8
    // bc: 9100058c      add     x12, x12, #0x1
    // c0: b980490d      ldrsw   x13, [x8, #0x48]
    // c4: eb0d019f      cmp     x12, x13
    // c8: 54ffff8b      b.lt    0xb8 <_JIT_ENTRY+0xb8>
    // cc: f900292a      str     x10, [x9, #0x50]
    // d0: f81f82a9      stur    x9, [x21, #-0x8]
    // d4: 14000000      b       0xd4 <_JIT_ENTRY+0xd4>
    // 00000000000000d4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // d8: 14000000      b       0xd8 <_JIT_ENTRY+0xd8>
    // 00000000000000d8:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // dc: 00 00 00 00
    const unsigned char code_body[224] = {
        0x0b, 0x00, 0x00, 0x90, 0xaa, 0x01, 0x80, 0x52,
        0x6b, 0x01, 0x40, 0xf9, 0x68, 0x19, 0x40, 0xf9,
        0x09, 0x31, 0x40, 0xb9, 0x29, 0x01, 0x0a, 0x0a,
        0x3f, 0x05, 0x00, 0x71, 0xe1, 0x05, 0x00, 0x54,
        0x09, 0x3d, 0x40, 0xb9, 0xa9, 0x05, 0x00, 0x35,
        0x09, 0x35, 0x40, 0xb9, 0x3f, 0x05, 0x00, 0x71,
        0x41, 0x05, 0x00, 0x54, 0xc9, 0x7a, 0x40, 0xf9,
        0x09, 0x05, 0x00, 0xb4, 0xca, 0x7e, 0x40, 0xf9,
        0x0c, 0x4d, 0x80, 0xb9, 0x4a, 0x01, 0x09, 0xcb,
        0x9f, 0x0d, 0x8a, 0xeb, 0x6a, 0x04, 0x00, 0x54,
        0x6d, 0x01, 0x40, 0xb9, 0xaa, 0x82, 0x5f, 0xf8,
        0x6d, 0x00, 0xf8, 0x37, 0xad, 0x05, 0x00, 0x11,
        0x6d, 0x01, 0x00, 0xb9, 0x2c, 0x0d, 0x0c, 0x8b,
        0xcc, 0x7a, 0x00, 0xf9, 0x34, 0xad, 0x00, 0xa9,
        0x0c, 0x01, 0x40, 0xb9, 0x6c, 0x00, 0xf8, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x0c, 0x01, 0x00, 0xb9,
        0x28, 0x01, 0x00, 0xf9, 0x0d, 0x41, 0x03, 0x91,
        0x0c, 0x49, 0x80, 0xb9, 0x60, 0x05, 0xc0, 0x3d,
        0x3f, 0xfd, 0x02, 0xa9, 0x3f, 0x49, 0x00, 0xb9,
        0x2b, 0x0d, 0x0c, 0x8b, 0x9f, 0x09, 0x00, 0x71,
        0x20, 0x81, 0x81, 0x3c, 0x6b, 0x41, 0x01, 0x91,
        0x2d, 0xad, 0x03, 0xa9, 0x0b, 0x01, 0x00, 0x54,
        0x2b, 0x61, 0x01, 0x91, 0x2c, 0x00, 0x80, 0x52,
        0x7f, 0x85, 0x00, 0xf8, 0x8c, 0x05, 0x00, 0x91,
        0x0d, 0x49, 0x80, 0xb9, 0x9f, 0x01, 0x0d, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x2a, 0x29, 0x00, 0xf9,
        0xa9, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0xd4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xd8, state->instruction_starts[instruction->jump_target]);
}

void
emit__LOAD_ATTR_SLOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_SLOT.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 8: f85f82a0      ldur    x0, [x21, #-0x8]
    // c: 92403d08      and     x8, x8, #0xffff
    // 10: f8686813      ldr     x19, [x0, x8]
    // 14: b4000193      cbz     x19, 0x44 <_JIT_ENTRY+0x44>
    // 18: b9400268      ldr     w8, [x19]
    // 1c: 37f80068      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 20: 11000508      add     w8, w8, #0x1
    // 24: b9000268      str     w8, [x19]
    // 28: b9400008      ldr     w8, [x0]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 30: 71000508      subs    w8, w8, #0x1
    // 34: b9000008      str     w8, [x0]
    // 38: 54000080      b.eq    0x48 <_JIT_ENTRY+0x48>
    // 3c: f81f82b3      stur    x19, [x21, #-0x8]
    // 40: 14000000      b       0x40 <_JIT_ENTRY+0x40>
    // 0000000000000040:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 44: 14000000      b       0x44 <_JIT_ENTRY+0x44>
    // 0000000000000044:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 48: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 50: 910003fd      mov     x29, sp
    // 54: f9400108      ldr     x8, [x8]
    // 0000000000000054:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 58: d63f0100      blr     x8
    // 5c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 60: f81f82b3      stur    x19, [x21, #-0x8]
    // 64: 14000000      b       0x64 <_JIT_ENTRY+0x64>
    // 0000000000000064:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[104] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x3d, 0x40, 0x92,
        0x13, 0x68, 0x68, 0xf8, 0x93, 0x01, 0x00, 0xb4,
        0x68, 0x02, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x68, 0x02, 0x00, 0xb9,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x80, 0x00, 0x00, 0x54, 0xb3, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xfd, 0x7b, 0xc1, 0xa8,
        0xb3, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x44, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x54, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_WITH_HINT.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503f3      mov     x19, x21
    // 4: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // c: f9401108      ldr     x8, [x8, #0x20]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 14: f9400d0a      ldr     x10, [x8, #0x18]
    // 18: 92403d29      and     x9, x9, #0xffff
    // 1c: eb09015f      cmp     x10, x9
    // 20: 54000269      b.ls    0x6c <_JIT_ENTRY+0x6c>
    // 24: 3940290a      ldrb    w10, [x8, #0xa]
    // 28: 7100055f      cmp     w10, #0x1
    // 2c: 54000201      b.ne    0x6c <_JIT_ENTRY+0x6c>
    // 30: 3940250b      ldrb    w11, [x8, #0x9]
    // 34: 9000000c      adrp    x12, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 38: f940028a      ldr     x10, [x20]
    // 3c: f940018c      ldr     x12, [x12]
    // 000000000000003c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 40: 5280002d      mov     w13, #0x1               // =1
    // 44: 9acb21ab      lsl     x11, x13, x11
    // 48: f940114a      ldr     x10, [x10, #0x20]
    // 4c: 53013d8c      ubfx    w12, w12, #1, #15
    // 50: 8b0b0108      add     x8, x8, x11
    // 54: 8b2c4d4a      add     x10, x10, w12, uxtw #3
    // 58: 8b091108      add     x8, x8, x9, lsl #4
    // 5c: f9400d49      ldr     x9, [x10, #0x18]
    // 60: f8420d0a      ldr     x10, [x8, #0x20]!
    // 64: eb09015f      cmp     x10, x9
    // 68: 54000040      b.eq    0x70 <_JIT_ENTRY+0x70>
    // 6c: 14000000      b       0x6c <_JIT_ENTRY+0x6c>
    // 000000000000006c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 70: f9400517      ldr     x23, [x8, #0x8]
    // 74: b4ffffd7      cbz     x23, 0x6c <_JIT_ENTRY+0x6c>
    // 78: b94002e8      ldr     w8, [x23]
    // 7c: f85f82a0      ldur    x0, [x21, #-0x8]
    // 80: 37f80068      tbnz    w8, #0x1f, 0x8c <_JIT_ENTRY+0x8c>
    // 84: 11000508      add     w8, w8, #0x1
    // 88: b90002e8      str     w8, [x23]
    // 8c: b9400008      ldr     w8, [x0]
    // 90: 37f80148      tbnz    w8, #0x1f, 0xb8 <_JIT_ENTRY+0xb8>
    // 94: 71000508      subs    w8, w8, #0x1
    // 98: b9000008      str     w8, [x0]
    // 9c: 540000e1      b.ne    0xb8 <_JIT_ENTRY+0xb8>
    // a0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // a4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // a8: 910003fd      mov     x29, sp
    // ac: f9400108      ldr     x8, [x8]
    // 00000000000000ac:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // b0: d63f0100      blr     x8
    // b4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b8: f81f0277      stur    x23, [x19, #-0x10]
    // bc: 14000000      b       0xbc <_JIT_ENTRY+0xbc>
    // 00000000000000bc:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[192] = {
        0xf3, 0x03, 0x15, 0xaa, 0xa8, 0x8e, 0x5f, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x11, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x0a, 0x0d, 0x40, 0xf9,
        0x29, 0x3d, 0x40, 0x92, 0x5f, 0x01, 0x09, 0xeb,
        0x69, 0x02, 0x00, 0x54, 0x0a, 0x29, 0x40, 0x39,
        0x5f, 0x05, 0x00, 0x71, 0x01, 0x02, 0x00, 0x54,
        0x0b, 0x25, 0x40, 0x39, 0x0c, 0x00, 0x00, 0x90,
        0x8a, 0x02, 0x40, 0xf9, 0x8c, 0x01, 0x40, 0xf9,
        0x2d, 0x00, 0x80, 0x52, 0xab, 0x21, 0xcb, 0x9a,
        0x4a, 0x11, 0x40, 0xf9, 0x8c, 0x3d, 0x01, 0x53,
        0x08, 0x01, 0x0b, 0x8b, 0x4a, 0x4d, 0x2c, 0x8b,
        0x08, 0x11, 0x09, 0x8b, 0x49, 0x0d, 0x40, 0xf9,
        0x0a, 0x0d, 0x42, 0xf8, 0x5f, 0x01, 0x09, 0xeb,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x17, 0x05, 0x40, 0xf9, 0xd7, 0xff, 0xff, 0xb4,
        0xe8, 0x02, 0x40, 0xb9, 0xa0, 0x82, 0x5f, 0xf8,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0xe8, 0x02, 0x00, 0xb9, 0x08, 0x00, 0x40, 0xb9,
        0x48, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xe1, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xfd, 0x7b, 0xc1, 0xa8,
        0x77, 0x02, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x3c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x6c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0xa4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xac, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xbc, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_BUILD_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_BUILD_CLASS.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // c: f9401280      ldr     x0, [x20, #0x20]
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  R_AARCH64_ADR_GOT_PAGE       PyMapping_GetOptionalItem
    // 1c: 52924009      mov     w9, #0x9200             // =37376
    // 20: f940014a      ldr     x10, [x10]
    // 0000000000000020:  R_AARCH64_LD64_GOT_LO12_NC   PyMapping_GetOptionalItem
    // 24: 910023e2      add     x2, sp, #0x8
    // 28: 8b090101      add     x1, x8, x9
    // 2c: 910043fd      add     x29, sp, #0x10
    // 30: d63f0140      blr     x10
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: 37f80260      tbnz    w0, #0x1f, 0x88 <_JIT_ENTRY+0x88>
    // 40: f94007e8      ldr     x8, [sp, #0x8]
    // 44: b40000a8      cbz     x8, 0x58 <_JIT_ENTRY+0x58>
    // 48: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 4c: f80086a8      str     x8, [x21], #0x8
    // 50: 910083ff      add     sp, sp, #0x20
    // 54: 14000000      b       0x54 <_JIT_ENTRY+0x54>
    // 0000000000000054:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 58: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  R_AARCH64_ADR_GOT_PAGE       PyExc_NameError
    // 5c: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1
    // 60: 91000042      add     x2, x2, #0x0
    // 0000000000000060:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1
    // 64: f9400108      ldr     x8, [x8]
    // 0000000000000064:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_NameError
    // 68: f9002295      str     x21, [x20, #0x40]
    // 6c: aa1603e0      mov     x0, x22
    // 70: f9400101      ldr     x1, [x8]
    // 74: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  R_AARCH64_ADR_GOT_PAGE       _PyErr_SetString
    // 78: f9400108      ldr     x8, [x8]
    // 0000000000000078:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_SetString
    // 7c: d63f0100      blr     x8
    // 80: f9402295      ldr     x21, [x20, #0x40]
    // 84: f900229f      str     xzr, [x20, #0x40]
    // 88: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 8c: 910083ff      add     sp, sp, #0x20
    // 90: 14000000      b       0x90 <_JIT_ENTRY+0x90>
    // 0000000000000090:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 94: 00 00 00 00
    const unsigned char code_body[152] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0x80, 0x12, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x09, 0x40, 0x92, 0x52,
        0x4a, 0x01, 0x40, 0xf9, 0xe2, 0x23, 0x00, 0x91,
        0x01, 0x01, 0x09, 0x8b, 0xfd, 0x43, 0x00, 0x91,
        0x40, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x60, 0x02, 0xf8, 0x37,
        0xe8, 0x07, 0x40, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0xfd, 0x7b, 0x41, 0xa9, 0xa8, 0x86, 0x00, 0xf8,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0x01, 0x01, 0x40, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: '__build_class__ not found\x00'
    // 1a: 00 00 00 00 00 00
    // 20: &_PyRuntime+0x0
    // 28: &PyMapping_GetOptionalItem+0x0
    // 30: &PyExc_NameError+0x0
    // 38: &_PyErr_SetString+0x0
    const unsigned char data_body[64] = {
        0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
        0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20,
        0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e,
        0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x28, (uintptr_t)&PyMapping_GetOptionalItem);
    patch_64(data + 0x30, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x38, (uintptr_t)&_PyErr_SetString);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x20);
    patch_aarch64_21rx(code + 0x18, (uintptr_t)data + 0x28);
    patch_aarch64_12x(code + 0x20, (uintptr_t)data + 0x28);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x58, (uintptr_t)data + 0x30);
    patch_aarch64_21r(code + 0x5c, (uintptr_t)data);
    patch_aarch64_12(code + 0x60, (uintptr_t)data);
    patch_aarch64_12x(code + 0x64, (uintptr_t)data + 0x30);
    patch_aarch64_33rx(code + 0x74, (uintptr_t)data + 0x38);
    patch_aarch64_26r(code + 0x90, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_COMMON_CONSTANT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_COMMON_CONSTANT.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyExc_AssertionError
    // 8: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyExc_NotImplementedError
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_AssertionError
    // 14: f940014a      ldr     x10, [x10]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_NotImplementedError
    // 18: 72003d1f      tst     w8, #0xffff
    // 1c: 9a8a0128      csel    x8, x9, x10, eq
    // 20: f9400108      ldr     x8, [x8]
    // 24: f80086a8      str     x8, [x21], #0x8
    // 28: 14000000      b       0x28 <_JIT_ENTRY+0x28>
    // 0000000000000028:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x0a, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x1f, 0x3d, 0x00, 0x72, 0x28, 0x01, 0x8a, 0x9a,
        0x08, 0x01, 0x40, 0xf9, 0xa8, 0x86, 0x00, 0xf8,
    };
    // 0: OPARG
    // 8: &PyExc_AssertionError+0x0
    // 10: &PyExc_NotImplementedError+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyExc_AssertionError);
    patch_64(data + 0x10, (uintptr_t)&PyExc_NotImplementedError);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x10);
}

void
emit__LOAD_CONST_IMMORTAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_CONST_IMMORTAL.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400288      ldr     x8, [x20]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // c: f9400d08      ldr     x8, [x8, #0x18]
    // 10: 8b292d08      add     x8, x8, w9, uxth #3
    // 14: f9400d08      ldr     x8, [x8, #0x18]
    // 18: f80086a8      str     x8, [x21], #0x8
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[32] = {
        0x88, 0x02, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x0d, 0x40, 0xf9,
        0x08, 0x2d, 0x29, 0x8b, 0x08, 0x0d, 0x40, 0xf9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_CONST_INLINE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_CONST_INLINE.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 8: b9400109      ldr     w9, [x8]
    // c: 37f80069      tbnz    w9, #0x1f, 0x18 <_JIT_ENTRY+0x18>
    // 10: 11000529      add     w9, w9, #0x1
    // 14: b9000109      str     w9, [x8]
    // 18: f80086a8      str     x8, [x21], #0x8
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[32] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_CONST_INLINE_BORROW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_CONST_INLINE_BORROW.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 8: f80086a8      str     x8, [x21], #0x8
    // c: 14000000      b       0xc <_JIT_ENTRY+0xc>
    // 000000000000000c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[16] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0xc, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_CONST_MORTAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_CONST_MORTAL.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400288      ldr     x8, [x20]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: f9400d08      ldr     x8, [x8, #0x18]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 10: 8b292d08      add     x8, x8, w9, uxth #3
    // 14: f9400d08      ldr     x8, [x8, #0x18]
    // 18: b9400109      ldr     w9, [x8]
    // 1c: 37f80069      tbnz    w9, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 20: 11000529      add     w9, w9, #0x1
    // 24: b9000109      str     w9, [x8]
    // 28: f80086a8      str     x8, [x21], #0x8
    // 2c: 14000000      b       0x2c <_JIT_ENTRY+0x2c>
    // 000000000000002c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[48] = {
        0x88, 0x02, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x0d, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x2d, 0x29, 0x8b, 0x08, 0x0d, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_DEREF.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: 8b282e88      add     x8, x20, w8, uxth #3
    // c: f9402908      ldr     x8, [x8, #0x50]
    // 10: f9400908      ldr     x8, [x8, #0x10]
    // 14: b40000e8      cbz     x8, 0x30 <_JIT_ENTRY+0x30>
    // 18: b9400109      ldr     w9, [x8]
    // 1c: 37f80069      tbnz    w9, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 20: 11000529      add     w9, w9, #0x1
    // 24: b9000109      str     w9, [x8]
    // 28: f80086a8      str     x8, [x21], #0x8
    // 2c: 14000000      b       0x2c <_JIT_ENTRY+0x2c>
    // 000000000000002c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 30: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 38: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _PyEval_FormatExcUnbound
    // 3c: aa1603e0      mov     x0, x22
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 44: f9002295      str     x21, [x20, #0x40]
    // 48: f9400281      ldr     x1, [x20]
    // 4c: f9400129      ldr     x9, [x9]
    // 000000000000004c:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_FormatExcUnbound
    // 50: 910003fd      mov     x29, sp
    // 54: 12003d02      and     w2, w8, #0xffff
    // 58: d63f0120      blr     x9
    // 5c: f9402295      ldr     x21, [x20, #0x40]
    // 60: f900229f      str     xzr, [x20, #0x40]
    // 64: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 68: 14000000      b       0x68 <_JIT_ENTRY+0x68>
    // 0000000000000068:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 6c: 00 00 00 00
    const unsigned char code_body[112] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x88, 0x2e, 0x28, 0x8b, 0x08, 0x29, 0x40, 0xf9,
        0x08, 0x09, 0x40, 0xf9, 0xe8, 0x00, 0x00, 0xb4,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x81, 0x02, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xfd, 0x03, 0x00, 0x91, 0x02, 0x3d, 0x00, 0x12,
        0x20, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_FormatExcUnbound+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_FormatExcUnbound);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x34, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x40, (uintptr_t)data);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x68, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: 8b282e88      add     x8, x20, w8, uxth #3
    // c: f9402908      ldr     x8, [x8, #0x50]
    // 10: b9400109      ldr     w9, [x8]
    // 14: 37f80069      tbnz    w9, #0x1f, 0x20 <_JIT_ENTRY+0x20>
    // 18: 11000529      add     w9, w9, #0x1
    // 1c: b9000109      str     w9, [x8]
    // 20: f80086a8      str     x8, [x21], #0x8
    // 24: 14000000      b       0x24 <_JIT_ENTRY+0x24>
    // 0000000000000024:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x88, 0x2e, 0x28, 0x8b, 0x08, 0x29, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_FAST_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_0.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9402a88      ldr     x8, [x20, #0x50]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <_JIT_ENTRY+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x88, 0x2a, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_1.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9402e88      ldr     x8, [x20, #0x58]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <_JIT_ENTRY+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x88, 0x2e, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_2.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9403288      ldr     x8, [x20, #0x60]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <_JIT_ENTRY+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x88, 0x32, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_3.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9403688      ldr     x8, [x20, #0x68]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <_JIT_ENTRY+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x88, 0x36, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_4.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9403a88      ldr     x8, [x20, #0x70]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <_JIT_ENTRY+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x88, 0x3a, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_5(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_5.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9403e88      ldr     x8, [x20, #0x78]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <_JIT_ENTRY+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x88, 0x3e, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_6(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_6.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9404288      ldr     x8, [x20, #0x80]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <_JIT_ENTRY+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x88, 0x42, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_7(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_7.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9404688      ldr     x8, [x20, #0x88]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <_JIT_ENTRY+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x88, 0x46, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_AND_CLEAR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_AND_CLEAR.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: 8b282e88      add     x8, x20, w8, uxth #3
    // c: f9402909      ldr     x9, [x8, #0x50]
    // 10: f900291f      str     xzr, [x8, #0x50]
    // 14: f80086a9      str     x9, [x21], #0x8
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x88, 0x2e, 0x28, 0x8b, 0x09, 0x29, 0x40, 0xf9,
        0x1f, 0x29, 0x00, 0xf9, 0xa9, 0x86, 0x00, 0xf8,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
}

void
emit__LOAD_FAST_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_CHECK.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: 8b282e89      add     x9, x20, w8, uxth #3
    // c: f9402929      ldr     x9, [x9, #0x50]
    // 10: b40000e9      cbz     x9, 0x2c <_JIT_ENTRY+0x2c>
    // 14: b9400128      ldr     w8, [x9]
    // 18: 37f80068      tbnz    w8, #0x1f, 0x24 <_JIT_ENTRY+0x24>
    // 1c: 11000508      add     w8, w8, #0x1
    // 20: b9000128      str     w8, [x9]
    // 24: f80086a9      str     x9, [x21], #0x8
    // 28: 14000000      b       0x28 <_JIT_ENTRY+0x28>
    // 0000000000000028:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 2c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 30: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  R_AARCH64_ADR_GOT_PAGE       PyExc_UnboundLocalError
    // 34: 92403d01      and     x1, x8, #0xffff
    // 38: 910003fd      mov     x29, sp
    // 3c: f9400129      ldr     x9, [x9]
    // 000000000000003c:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_UnboundLocalError
    // 40: f940028a      ldr     x10, [x20]
    // 44: f9002295      str     x21, [x20, #0x40]
    // 48: f9400133      ldr     x19, [x9]
    // 4c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  R_AARCH64_ADR_GOT_PAGE       PyTuple_GetItem
    // 50: f9403140      ldr     x0, [x10, #0x60]
    // 54: f9400129      ldr     x9, [x9]
    // 0000000000000054:  R_AARCH64_LD64_GOT_LO12_NC   PyTuple_GetItem
    // 58: d63f0120      blr     x9
    // 5c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  R_AARCH64_ADR_GOT_PAGE       _PyEval_FormatExcCheckArg
    // 60: aa0003e3      mov     x3, x0
    // 64: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1
    // 68: 91000042      add     x2, x2, #0x0
    // 0000000000000068:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_FormatExcCheckArg
    // 70: aa1603e0      mov     x0, x22
    // 74: aa1303e1      mov     x1, x19
    // 78: d63f0100      blr     x8
    // 7c: f9402295      ldr     x21, [x20, #0x40]
    // 80: f900229f      str     xzr, [x20, #0x40]
    // 84: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 88: 14000000      b       0x88 <_JIT_ENTRY+0x88>
    // 0000000000000088:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 8c: 00 00 00 00
    const unsigned char code_body[144] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x89, 0x2e, 0x28, 0x8b, 0x29, 0x29, 0x40, 0xf9,
        0xe9, 0x00, 0x00, 0xb4, 0x28, 0x01, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x28, 0x01, 0x00, 0xb9, 0xa9, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x09, 0x00, 0x00, 0x90, 0x01, 0x3d, 0x40, 0x92,
        0xfd, 0x03, 0x00, 0x91, 0x29, 0x01, 0x40, 0xf9,
        0x8a, 0x02, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x33, 0x01, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x40, 0x31, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x20, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe3, 0x03, 0x00, 0xaa, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: "cannot access local variable '%s' where it is not associated with a value\x00"
    // 4a: 00 00 00 00 00 00
    // 50: OPARG
    // 58: &PyExc_UnboundLocalError+0x0
    // 60: &PyTuple_GetItem+0x0
    // 68: &_PyEval_FormatExcCheckArg+0x0
    const unsigned char data_body[112] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69,
        0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73,
        0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
        0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
        0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
        0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
        0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75,
        0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x50, instruction->oparg);
    patch_64(data + 0x58, (uintptr_t)&PyExc_UnboundLocalError);
    patch_64(data + 0x60, (uintptr_t)&PyTuple_GetItem);
    patch_64(data + 0x68, (uintptr_t)&_PyEval_FormatExcCheckArg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data + 0x50);
    patch_aarch64_26r(code + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x30, (uintptr_t)data + 0x58);
    patch_aarch64_12x(code + 0x3c, (uintptr_t)data + 0x58);
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data + 0x60);
    patch_aarch64_12x(code + 0x54, (uintptr_t)data + 0x60);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)data + 0x68);
    patch_aarch64_21r(code + 0x64, (uintptr_t)data);
    patch_aarch64_12(code + 0x68, (uintptr_t)data);
    patch_aarch64_12x(code + 0x6c, (uintptr_t)data + 0x68);
    patch_aarch64_26r(code + 0x88, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_FROM_DICT_OR_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FROM_DICT_OR_DEREF.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: f9400288      ldr     x8, [x20]
    // 8: a9017bfd      stp     x29, x30, [sp, #0x10]
    // c: 90000017      adrp    x23, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 10: 910023e2      add     x2, sp, #0x8
    // 14: 910043fd      add     x29, sp, #0x10
    // 18: f9403108      ldr     x8, [x8, #0x60]
    // 1c: f94002f7      ldr     x23, [x23]
    // 000000000000001c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 20: f85f82b3      ldur    x19, [x21, #-0x8]
    // 24: 8b372d08      add     x8, x8, w23, uxth #3
    // 28: aa1303e0      mov     x0, x19
    // 2c: f9400d01      ldr     x1, [x8, #0x18]
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  R_AARCH64_ADR_GOT_PAGE       PyMapping_GetOptionalItem
    // 38: f9400108      ldr     x8, [x8]
    // 0000000000000038:  R_AARCH64_LD64_GOT_LO12_NC   PyMapping_GetOptionalItem
    // 3c: d63f0100      blr     x8
    // 40: f9402295      ldr     x21, [x20, #0x40]
    // 44: f900229f      str     xzr, [x20, #0x40]
    // 48: 37f806a0      tbnz    w0, #0x1f, 0x11c <_JIT_ENTRY+0x11c>
    // 4c: f94007e8      ldr     x8, [sp, #0x8]
    // 50: b4000168      cbz     x8, 0x7c <_JIT_ENTRY+0x7c>
    // 54: d10022a9      sub     x9, x21, #0x8
    // 58: f9002289      str     x9, [x20, #0x40]
    // 5c: b9400269      ldr     w9, [x19]
    // 60: 36f802a9      tbz     w9, #0x1f, 0xb4 <_JIT_ENTRY+0xb4>
    // 64: f9402295      ldr     x21, [x20, #0x40]
    // 68: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 6c: f900229f      str     xzr, [x20, #0x40]
    // 70: f80086a8      str     x8, [x21], #0x8
    // 74: 910083ff      add     sp, sp, #0x20
    // 78: 14000000      b       0x78 <_JIT_ENTRY+0x78>
    // 0000000000000078:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 7c: 92403ee8      and     x8, x23, #0xffff
    // 80: 8b080e88      add     x8, x20, x8, lsl #3
    // 84: f9402908      ldr     x8, [x8, #0x50]
    // 88: f9400908      ldr     x8, [x8, #0x10]
    // 8c: b4000308      cbz     x8, 0xec <_JIT_ENTRY+0xec>
    // 90: b9400109      ldr     w9, [x8]
    // 94: 37f80069      tbnz    w9, #0x1f, 0xa0 <_JIT_ENTRY+0xa0>
    // 98: 11000529      add     w9, w9, #0x1
    // 9c: b9000109      str     w9, [x8]
    // a0: f90007e8      str     x8, [sp, #0x8]
    // a4: d10022a9      sub     x9, x21, #0x8
    // a8: f9002289      str     x9, [x20, #0x40]
    // ac: b9400269      ldr     w9, [x19]
    // b0: 37fffda9      tbnz    w9, #0x1f, 0x64 <_JIT_ENTRY+0x64>
    // b4: 71000529      subs    w9, w9, #0x1
    // b8: b9000269      str     w9, [x19]
    // bc: 54fffd41      b.ne    0x64 <_JIT_ENTRY+0x64>
    // c0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c0:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // c4: aa1303e0      mov     x0, x19
    // c8: f9400108      ldr     x8, [x8]
    // 00000000000000c8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // cc: d63f0100      blr     x8
    // d0: f94007e8      ldr     x8, [sp, #0x8]
    // d4: f9402295      ldr     x21, [x20, #0x40]
    // d8: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // dc: f900229f      str     xzr, [x20, #0x40]
    // e0: f80086a8      str     x8, [x21], #0x8
    // e4: 910083ff      add     sp, sp, #0x20
    // e8: 14000000      b       0xe8 <_JIT_ENTRY+0xe8>
    // 00000000000000e8:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // ec: f90007ff      str     xzr, [sp, #0x8]
    // f0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000f0:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // f4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000f4:  R_AARCH64_ADR_GOT_PAGE       _PyEval_FormatExcUnbound
    // f8: f9400108      ldr     x8, [x8]
    // 00000000000000f8:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // fc: f9002295      str     x21, [x20, #0x40]
    // 100: f9400281      ldr     x1, [x20]
    // 104: f9400129      ldr     x9, [x9]
    // 0000000000000104:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_FormatExcUnbound
    // 108: aa1603e0      mov     x0, x22
    // 10c: 12003d02      and     w2, w8, #0xffff
    // 110: d63f0120      blr     x9
    // 114: f9402295      ldr     x21, [x20, #0x40]
    // 118: f900229f      str     xzr, [x20, #0x40]
    // 11c: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 120: 910083ff      add     sp, sp, #0x20
    // 124: 14000000      b       0x124 <_JIT_ENTRY+0x124>
    // 0000000000000124:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[296] = {
        0xff, 0x83, 0x00, 0xd1, 0x88, 0x02, 0x40, 0xf9,
        0xfd, 0x7b, 0x01, 0xa9, 0x17, 0x00, 0x00, 0x90,
        0xe2, 0x23, 0x00, 0x91, 0xfd, 0x43, 0x00, 0x91,
        0x08, 0x31, 0x40, 0xf9, 0xf7, 0x02, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0x08, 0x2d, 0x37, 0x8b,
        0xe0, 0x03, 0x13, 0xaa, 0x01, 0x0d, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xa0, 0x06, 0xf8, 0x37, 0xe8, 0x07, 0x40, 0xf9,
        0x68, 0x01, 0x00, 0xb4, 0xa9, 0x22, 0x00, 0xd1,
        0x89, 0x22, 0x00, 0xf9, 0x69, 0x02, 0x40, 0xb9,
        0xa9, 0x02, 0xf8, 0x36, 0x95, 0x22, 0x40, 0xf9,
        0xfd, 0x7b, 0x41, 0xa9, 0x9f, 0x22, 0x00, 0xf9,
        0xa8, 0x86, 0x00, 0xf8, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xe8, 0x3e, 0x40, 0x92,
        0x88, 0x0e, 0x08, 0x8b, 0x08, 0x29, 0x40, 0xf9,
        0x08, 0x09, 0x40, 0xf9, 0x08, 0x03, 0x00, 0xb4,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xe8, 0x07, 0x00, 0xf9, 0xa9, 0x22, 0x00, 0xd1,
        0x89, 0x22, 0x00, 0xf9, 0x69, 0x02, 0x40, 0xb9,
        0xa9, 0xfd, 0xff, 0x37, 0x29, 0x05, 0x00, 0x71,
        0x69, 0x02, 0x00, 0xb9, 0x41, 0xfd, 0xff, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe8, 0x07, 0x40, 0xf9, 0x95, 0x22, 0x40, 0xf9,
        0xfd, 0x7b, 0x41, 0xa9, 0x9f, 0x22, 0x00, 0xf9,
        0xa8, 0x86, 0x00, 0xf8, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xff, 0x07, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x81, 0x02, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0x02, 0x3d, 0x00, 0x12,
        0x20, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PyMapping_GetOptionalItem+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: &_PyEval_FormatExcUnbound+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMapping_GetOptionalItem);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)&_PyEval_FormatExcUnbound);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x78, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0xc0, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xc8, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xe8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0xf0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xf4, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xf8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x104, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0x124, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_GLOBAL.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: f9400288      ldr     x8, [x20]
    // c: aa1503e3      mov     x3, x21
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: a9418680      ldp     x0, x1, [x20, #0x18]
    // 18: f9401108      ldr     x8, [x8, #0x20]
    // 1c: 910003fd      mov     x29, sp
    // 20: aa1503f3      mov     x19, x21
    // 24: 53013d29      ubfx    w9, w9, #1, #15
    // 28: 8b294d08      add     x8, x8, w9, uxtw #3
    // 2c: f9400d02      ldr     x2, [x8, #0x18]
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  R_AARCH64_ADR_GOT_PAGE       _PyEval_LoadGlobalStackRef
    // 38: f9400108      ldr     x8, [x8]
    // 0000000000000038:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_LoadGlobalStackRef
    // 3c: d63f0100      blr     x8
    // 40: f9402295      ldr     x21, [x20, #0x40]
    // 44: f900229f      str     xzr, [x20, #0x40]
    // 48: f9400268      ldr     x8, [x19]
    // 4c: b4000088      cbz     x8, 0x5c <_JIT_ENTRY+0x5c>
    // 50: 910022b5      add     x21, x21, #0x8
    // 54: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 58: 14000000      b       0x58 <_JIT_ENTRY+0x58>
    // 0000000000000058:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 5c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 60: 14000000      b       0x60 <_JIT_ENTRY+0x60>
    // 0000000000000060:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 64: 00 00 00 00
    const unsigned char code_body[104] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x09, 0x00, 0x00, 0x90,
        0x88, 0x02, 0x40, 0xf9, 0xe3, 0x03, 0x15, 0xaa,
        0x29, 0x01, 0x40, 0xf9, 0x80, 0x86, 0x41, 0xa9,
        0x08, 0x11, 0x40, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0xf3, 0x03, 0x15, 0xaa, 0x29, 0x3d, 0x01, 0x53,
        0x08, 0x4d, 0x29, 0x8b, 0x02, 0x0d, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0x00, 0xb4,
        0xb5, 0x22, 0x00, 0x91, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_LoadGlobalStackRef+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_LoadGlobalStackRef);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x58, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x60, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_GLOBAL_BUILTINS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_GLOBAL_BUILTINS.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9401288      ldr     x8, [x20, #0x20]
    // 4: 5280002a      mov     w10, #0x1               // =1
    // 8: f9401108      ldr     x8, [x8, #0x20]
    // c: 39402509      ldrb    w9, [x8, #0x9]
    // 10: 9ac92149      lsl     x9, x10, x9
    // 14: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 18: f940014a      ldr     x10, [x10]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 1c: 8b090108      add     x8, x8, x9
    // 20: 8b2a3108      add     x8, x8, w10, uxth #4
    // 24: f9401508      ldr     x8, [x8, #0x28]
    // 28: b40000e8      cbz     x8, 0x44 <_JIT_ENTRY+0x44>
    // 2c: b9400109      ldr     w9, [x8]
    // 30: 37f80069      tbnz    w9, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 34: 11000529      add     w9, w9, #0x1
    // 38: b9000109      str     w9, [x8]
    // 3c: f80086a8      str     x8, [x21], #0x8
    // 40: 14000000      b       0x40 <_JIT_ENTRY+0x40>
    // 0000000000000040:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 44: 14000000      b       0x44 <_JIT_ENTRY+0x44>
    // 0000000000000044:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[72] = {
        0x88, 0x12, 0x40, 0xf9, 0x2a, 0x00, 0x80, 0x52,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x25, 0x40, 0x39,
        0x49, 0x21, 0xc9, 0x9a, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0x08, 0x31, 0x2a, 0x8b, 0x08, 0x15, 0x40, 0xf9,
        0xe8, 0x00, 0x00, 0xb4, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x44, state->instruction_starts[instruction->jump_target]);
}

void
emit__LOAD_GLOBAL_BUILTINS_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_GLOBAL_BUILTINS_FROM_KEYS.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: 5280002b      mov     w11, #0x1               // =1
    // 8: f85f8d09      ldr     x9, [x8, #-0x8]!
    // c: 3940252a      ldrb    w10, [x9, #0x9]
    // 10: 9aca216a      lsl     x10, x11, x10
    // 14: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 18: f940016b      ldr     x11, [x11]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 1c: 8b0a0129      add     x9, x9, x10
    // 20: 8b2b3129      add     x9, x9, w11, uxth #4
    // 24: f9401529      ldr     x9, [x9, #0x28]
    // 28: b40000e9      cbz     x9, 0x44 <_JIT_ENTRY+0x44>
    // 2c: b9400128      ldr     w8, [x9]
    // 30: 37f80068      tbnz    w8, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 34: 11000508      add     w8, w8, #0x1
    // 38: b9000128      str     w8, [x9]
    // 3c: f81f82a9      stur    x9, [x21, #-0x8]
    // 40: 14000000      b       0x40 <_JIT_ENTRY+0x40>
    // 0000000000000040:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 44: aa0803f5      mov     x21, x8
    // 48: 14000000      b       0x48 <_JIT_ENTRY+0x48>
    // 0000000000000048:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 4c: 00 00 00 00
    const unsigned char code_body[80] = {
        0xe8, 0x03, 0x15, 0xaa, 0x2b, 0x00, 0x80, 0x52,
        0x09, 0x8d, 0x5f, 0xf8, 0x2a, 0x25, 0x40, 0x39,
        0x6a, 0x21, 0xca, 0x9a, 0x0b, 0x00, 0x00, 0x90,
        0x6b, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x0a, 0x8b,
        0x29, 0x31, 0x2b, 0x8b, 0x29, 0x15, 0x40, 0xf9,
        0xe9, 0x00, 0x00, 0xb4, 0x28, 0x01, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x28, 0x01, 0x00, 0xb9, 0xa9, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0xf5, 0x03, 0x08, 0xaa,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x48, state->instruction_starts[instruction->jump_target]);
}

void
emit__LOAD_GLOBAL_MODULE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_GLOBAL_MODULE.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400e88      ldr     x8, [x20, #0x18]
    // 4: 5280002a      mov     w10, #0x1               // =1
    // 8: f9401108      ldr     x8, [x8, #0x20]
    // c: 39402509      ldrb    w9, [x8, #0x9]
    // 10: 9ac92149      lsl     x9, x10, x9
    // 14: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 18: f940014a      ldr     x10, [x10]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 1c: 8b090108      add     x8, x8, x9
    // 20: 8b2a3108      add     x8, x8, w10, uxth #4
    // 24: f9401508      ldr     x8, [x8, #0x28]
    // 28: b40000e8      cbz     x8, 0x44 <_JIT_ENTRY+0x44>
    // 2c: b9400109      ldr     w9, [x8]
    // 30: 37f80069      tbnz    w9, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 34: 11000529      add     w9, w9, #0x1
    // 38: b9000109      str     w9, [x8]
    // 3c: f80086a8      str     x8, [x21], #0x8
    // 40: 14000000      b       0x40 <_JIT_ENTRY+0x40>
    // 0000000000000040:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 44: 14000000      b       0x44 <_JIT_ENTRY+0x44>
    // 0000000000000044:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[72] = {
        0x88, 0x0e, 0x40, 0xf9, 0x2a, 0x00, 0x80, 0x52,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x25, 0x40, 0x39,
        0x49, 0x21, 0xc9, 0x9a, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0x08, 0x31, 0x2a, 0x8b, 0x08, 0x15, 0x40, 0xf9,
        0xe8, 0x00, 0x00, 0xb4, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x44, state->instruction_starts[instruction->jump_target]);
}

void
emit__LOAD_GLOBAL_MODULE_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_GLOBAL_MODULE_FROM_KEYS.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: 5280002b      mov     w11, #0x1               // =1
    // 8: f85f8d09      ldr     x9, [x8, #-0x8]!
    // c: 3940252a      ldrb    w10, [x9, #0x9]
    // 10: 9aca216a      lsl     x10, x11, x10
    // 14: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 18: f940016b      ldr     x11, [x11]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 1c: 8b0a0129      add     x9, x9, x10
    // 20: 8b2b3129      add     x9, x9, w11, uxth #4
    // 24: f9401529      ldr     x9, [x9, #0x28]
    // 28: b40000e9      cbz     x9, 0x44 <_JIT_ENTRY+0x44>
    // 2c: b9400128      ldr     w8, [x9]
    // 30: 37f80068      tbnz    w8, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 34: 11000508      add     w8, w8, #0x1
    // 38: b9000128      str     w8, [x9]
    // 3c: f81f82a9      stur    x9, [x21, #-0x8]
    // 40: 14000000      b       0x40 <_JIT_ENTRY+0x40>
    // 0000000000000040:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 44: aa0803f5      mov     x21, x8
    // 48: 14000000      b       0x48 <_JIT_ENTRY+0x48>
    // 0000000000000048:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 4c: 00 00 00 00
    const unsigned char code_body[80] = {
        0xe8, 0x03, 0x15, 0xaa, 0x2b, 0x00, 0x80, 0x52,
        0x09, 0x8d, 0x5f, 0xf8, 0x2a, 0x25, 0x40, 0x39,
        0x6a, 0x21, 0xca, 0x9a, 0x0b, 0x00, 0x00, 0x90,
        0x6b, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x0a, 0x8b,
        0x29, 0x31, 0x2b, 0x8b, 0x29, 0x15, 0x40, 0xf9,
        0xe9, 0x00, 0x00, 0xb4, 0x28, 0x01, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x28, 0x01, 0x00, 0xb9, 0xa9, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0xf5, 0x03, 0x08, 0xaa,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x48, state->instruction_starts[instruction->jump_target]);
}

void
emit__LOAD_LOCALS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_LOCALS.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9401688      ldr     x8, [x20, #0x28]
    // 4: b40000e8      cbz     x8, 0x20 <_JIT_ENTRY+0x20>
    // 8: b9400109      ldr     w9, [x8]
    // c: 37f80069      tbnz    w9, #0x1f, 0x18 <_JIT_ENTRY+0x18>
    // 10: 11000529      add     w9, w9, #0x1
    // 14: b9000109      str     w9, [x8]
    // 18: f80086a8      str     x8, [x21], #0x8
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 20: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 24: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  R_AARCH64_ADR_GOT_PAGE       PyExc_SystemError
    // 28: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1
    // 2c: 91000042      add     x2, x2, #0x0
    // 000000000000002c:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_SystemError
    // 34: f9002295      str     x21, [x20, #0x40]
    // 38: aa1603e0      mov     x0, x22
    // 3c: 910003fd      mov     x29, sp
    // 40: f9400101      ldr     x1, [x8]
    // 44: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  R_AARCH64_ADR_GOT_PAGE       _PyErr_SetString
    // 48: f9400108      ldr     x8, [x8]
    // 0000000000000048:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_SetString
    // 4c: d63f0100      blr     x8
    // 50: f9402295      ldr     x21, [x20, #0x40]
    // 54: f900229f      str     xzr, [x20, #0x40]
    // 58: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 5c: 14000000      b       0x5c <_JIT_ENTRY+0x5c>
    // 000000000000005c:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[96] = {
        0x88, 0x16, 0x40, 0xf9, 0xe8, 0x00, 0x00, 0xb4,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0xfd, 0x03, 0x00, 0x91,
        0x01, 0x01, 0x40, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: 'no locals found\x00'
    // 10: &PyExc_SystemError+0x0
    // 18: &_PyErr_SetString+0x0
    const unsigned char data_body[32] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x10, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x18, (uintptr_t)&_PyErr_SetString);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x24, (uintptr_t)data + 0x10);
    patch_aarch64_21r(code + 0x28, (uintptr_t)data);
    patch_aarch64_12(code + 0x2c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0x5c, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_NAME.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // c: aa1603e0      mov     x0, x22
    // 10: aa1403e1      mov     x1, x20
    // 14: 910003fd      mov     x29, sp
    // 18: f9401108      ldr     x8, [x8, #0x20]
    // 1c: f9400129      ldr     x9, [x9]
    // 000000000000001c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 20: 8b292d08      add     x8, x8, w9, uxth #3
    // 24: f9400d02      ldr     x2, [x8, #0x18]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       _PyEval_LoadName
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_LoadName
    // 34: d63f0100      blr     x8
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: b4000080      cbz     x0, 0x50 <_JIT_ENTRY+0x50>
    // 44: f80086a0      str     x0, [x21], #0x8
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: 14000000      b       0x4c <_JIT_ENTRY+0x4c>
    // 000000000000004c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 50: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 54: 14000000      b       0x54 <_JIT_ENTRY+0x54>
    // 0000000000000054:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[88] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0xe1, 0x03, 0x14, 0xaa, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x11, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x2d, 0x29, 0x8b, 0x02, 0x0d, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x80, 0x00, 0x00, 0xb4, 0xa0, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &_PyEval_LoadName+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_LoadName);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x4c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x54, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_SMALL_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SMALL_INT.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 10: 92403d08      and     x8, x8, #0xffff
    // 14: 8b081528      add     x8, x9, x8, lsl #5
    // 18: 5286df09      mov     w9, #0x36f8             // =14072
    // 1c: 8b090108      add     x8, x8, x9
    // 20: f80086a8      str     x8, [x21], #0x8
    // 24: 14000000      b       0x24 <_JIT_ENTRY+0x24>
    // 0000000000000024:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x40, 0x92, 0x28, 0x15, 0x08, 0x8b,
        0x09, 0xdf, 0x86, 0x52, 0x08, 0x01, 0x09, 0x8b,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &_PyRuntime+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_SMALL_INT_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SMALL_INT_0.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 4: 5286df09      mov     w9, #0x36f8             // =14072
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // c: 8b090108      add     x8, x8, x9
    // 10: f80086a8      str     x8, [x21], #0x8
    // 14: 14000000      b       0x14 <_JIT_ENTRY+0x14>
    // 0000000000000014:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x08, 0x00, 0x00, 0x90, 0x09, 0xdf, 0x86, 0x52,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x14, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_SMALL_INT_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SMALL_INT_1.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 4: 5286e309      mov     w9, #0x3718             // =14104
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // c: 8b090108      add     x8, x8, x9
    // 10: f80086a8      str     x8, [x21], #0x8
    // 14: 14000000      b       0x14 <_JIT_ENTRY+0x14>
    // 0000000000000014:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x08, 0x00, 0x00, 0x90, 0x09, 0xe3, 0x86, 0x52,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x14, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_SMALL_INT_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SMALL_INT_2.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 4: 5286e709      mov     w9, #0x3738             // =14136
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // c: 8b090108      add     x8, x8, x9
    // 10: f80086a8      str     x8, [x21], #0x8
    // 14: 14000000      b       0x14 <_JIT_ENTRY+0x14>
    // 0000000000000014:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x08, 0x00, 0x00, 0x90, 0x09, 0xe7, 0x86, 0x52,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x14, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_SMALL_INT_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SMALL_INT_3.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 4: 5286eb09      mov     w9, #0x3758             // =14168
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // c: 8b090108      add     x8, x8, x9
    // 10: f80086a8      str     x8, [x21], #0x8
    // 14: 14000000      b       0x14 <_JIT_ENTRY+0x14>
    // 0000000000000014:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x08, 0x00, 0x00, 0x90, 0x09, 0xeb, 0x86, 0x52,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x14, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_SPECIAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SPECIAL.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       _Py_SpecialMethods
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _Py_SpecialMethods
    // 18: 910023e2      add     x2, sp, #0x8
    // 1c: f85f8eb3      ldr     x19, [x21, #-0x8]!
    // 20: f9002295      str     x21, [x20, #0x40]
    // 24: 8b283137      add     x23, x9, w8, uxth #4
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  R_AARCH64_ADR_GOT_PAGE       _PyObject_LookupSpecialMethod
    // 2c: 910043fd      add     x29, sp, #0x10
    // 30: aa1303e0      mov     x0, x19
    // 34: f94002e1      ldr     x1, [x23]
    // 38: f9400108      ldr     x8, [x8]
    // 0000000000000038:  R_AARCH64_LD64_GOT_LO12_NC   _PyObject_LookupSpecialMethod
    // 3c: d63f0100      blr     x8
    // 40: f9402288      ldr     x8, [x20, #0x40]
    // 44: f900229f      str     xzr, [x20, #0x40]
    // 48: b40000e0      cbz     x0, 0x64 <_JIT_ENTRY+0x64>
    // 4c: f94007e9      ldr     x9, [sp, #0x8]
    // 50: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 54: 91004115      add     x21, x8, #0x10
    // 58: a9002500      stp     x0, x9, [x8]
    // 5c: 910083ff      add     sp, sp, #0x20
    // 60: 14000000      b       0x60 <_JIT_ENTRY+0x60>
    // 0000000000000060:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 64: f9403ac9      ldr     x9, [x22, #0x70]
    // 68: b40000e9      cbz     x9, 0x84 <_JIT_ENTRY+0x84>
    // 6c: f9400529      ldr     x9, [x9, #0x8]
    // 70: b40000a9      cbz     x9, 0x84 <_JIT_ENTRY+0x84>
    // 74: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 78: aa0803f5      mov     x21, x8
    // 7c: 910083ff      add     sp, sp, #0x20
    // 80: 14000000      b       0x80 <_JIT_ENTRY+0x80>
    // 0000000000000080:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 84: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  R_AARCH64_ADR_GOT_PAGE       PyExc_TypeError
    // 88: aa1603e0      mov     x0, x22
    // 8c: f9400129      ldr     x9, [x9]
    // 000000000000008c:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_TypeError
    // 90: f940066a      ldr     x10, [x19, #0x8]
    // 94: f9002288      str     x8, [x20, #0x40]
    // 98: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  R_AARCH64_ADR_GOT_PAGE       _PyErr_Format
    // 9c: f94006e2      ldr     x2, [x23, #0x8]
    // a0: f9400121      ldr     x1, [x9]
    // a4: f9400d43      ldr     x3, [x10, #0x18]
    // a8: f9400108      ldr     x8, [x8]
    // 00000000000000a8:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_Format
    // ac: d63f0100      blr     x8
    // b0: f9402288      ldr     x8, [x20, #0x40]
    // b4: f900229f      str     xzr, [x20, #0x40]
    // b8: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // bc: aa0803f5      mov     x21, x8
    // c0: 910083ff      add     sp, sp, #0x20
    // c4: 14000000      b       0xc4 <_JIT_ENTRY+0xc4>
    // 00000000000000c4:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[200] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xe2, 0x23, 0x00, 0x91, 0xb3, 0x8e, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x37, 0x31, 0x28, 0x8b,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x43, 0x00, 0x91,
        0xe0, 0x03, 0x13, 0xaa, 0xe1, 0x02, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x88, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xe0, 0x00, 0x00, 0xb4, 0xe9, 0x07, 0x40, 0xf9,
        0xfd, 0x7b, 0x41, 0xa9, 0x15, 0x41, 0x00, 0x91,
        0x00, 0x25, 0x00, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xc9, 0x3a, 0x40, 0xf9,
        0xe9, 0x00, 0x00, 0xb4, 0x29, 0x05, 0x40, 0xf9,
        0xa9, 0x00, 0x00, 0xb4, 0xfd, 0x7b, 0x41, 0xa9,
        0xf5, 0x03, 0x08, 0xaa, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x09, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x16, 0xaa, 0x29, 0x01, 0x40, 0xf9,
        0x6a, 0x06, 0x40, 0xf9, 0x88, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe2, 0x06, 0x40, 0xf9,
        0x21, 0x01, 0x40, 0xf9, 0x43, 0x0d, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x88, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0x41, 0xa9, 0xf5, 0x03, 0x08, 0xaa,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &_Py_SpecialMethods+0x0
    // 10: &_PyObject_LookupSpecialMethod+0x0
    // 18: &PyExc_TypeError+0x0
    // 20: &_PyErr_Format+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_SpecialMethods);
    patch_64(data + 0x10, (uintptr_t)&_PyObject_LookupSpecialMethod);
    patch_64(data + 0x18, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x20, (uintptr_t)&_PyErr_Format);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x38, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x60, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x80, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0x84, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x8c, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x98, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xa8, (uintptr_t)data + 0x20);
    patch_aarch64_26r(code + 0xc4, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_SUPER_ATTR_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SUPER_ATTR_ATTR.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 9000001a      adrp    x26, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PySuper_Type
    // 8: f85e82a8      ldur    x8, [x21, #-0x18]
    // c: 910003fd      mov     x29, sp
    // 10: f940035a      ldr     x26, [x26]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   PySuper_Type
    // 14: eb1a011f      cmp     x8, x26
    // 18: 540000a1      b.ne    0x2c <_JIT_ENTRY+0x2c>
    // 1c: f85f02b7      ldur    x23, [x21, #-0x10]
    // 20: f94006e8      ldr     x8, [x23, #0x8]
    // 24: 3942ad08      ldrb    w8, [x8, #0xab]
    // 28: 37380068      tbnz    w8, #0x7, 0x34 <_JIT_ENTRY+0x34>
    // 2c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 34: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 38: f9400288      ldr     x8, [x20]
    // 3c: aa1703e0      mov     x0, x23
    // 40: f9400129      ldr     x9, [x9]
    // 0000000000000040:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 44: f85f82b8      ldur    x24, [x21, #-0x8]
    // 48: aa1f03e3      mov     x3, xzr
    // 4c: f9401108      ldr     x8, [x8, #0x20]
    // 50: 53023d29      ubfx    w9, w9, #2, #14
    // 54: aa1803e1      mov     x1, x24
    // 58: 8b294d08      add     x8, x8, w9, uxtw #3
    // 5c: f9400d02      ldr     x2, [x8, #0x18]
    // 60: f9002295      str     x21, [x20, #0x40]
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _PySuper_Lookup
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  R_AARCH64_LD64_GOT_LO12_NC   _PySuper_Lookup
    // 6c: d63f0100      blr     x8
    // 70: b9400348      ldr     w8, [x26]
    // 74: f9402299      ldr     x25, [x20, #0x40]
    // 78: aa0003f3      mov     x19, x0
    // 7c: f900229f      str     xzr, [x20, #0x40]
    // 80: 37f80128      tbnz    w8, #0x1f, 0xa4 <_JIT_ENTRY+0xa4>
    // 84: 71000508      subs    w8, w8, #0x1
    // 88: b9000348      str     w8, [x26]
    // 8c: 540000c1      b.ne    0xa4 <_JIT_ENTRY+0xa4>
    // 90: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  R_AARCH64_ADR_GOT_PAGE       PySuper_Type
    // 94: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 98: f9400000      ldr     x0, [x0]
    // 0000000000000098:  R_AARCH64_LD64_GOT_LO12_NC   PySuper_Type
    // 9c: f9400108      ldr     x8, [x8]
    // 000000000000009c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // a0: d63f0100      blr     x8
    // a4: b94002e8      ldr     w8, [x23]
    // a8: 37f80108      tbnz    w8, #0x1f, 0xc8 <_JIT_ENTRY+0xc8>
    // ac: 71000508      subs    w8, w8, #0x1
    // b0: b90002e8      str     w8, [x23]
    // b4: 540000a1      b.ne    0xc8 <_JIT_ENTRY+0xc8>
    // b8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // bc: aa1703e0      mov     x0, x23
    // c0: f9400108      ldr     x8, [x8]
    // 00000000000000c0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // c4: d63f0100      blr     x8
    // c8: b9400308      ldr     w8, [x24]
    // cc: 37f80108      tbnz    w8, #0x1f, 0xec <_JIT_ENTRY+0xec>
    // d0: 71000508      subs    w8, w8, #0x1
    // d4: b9000308      str     w8, [x24]
    // d8: 540000a1      b.ne    0xec <_JIT_ENTRY+0xec>
    // dc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000dc:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // e0: aa1803e0      mov     x0, x24
    // e4: f9400108      ldr     x8, [x8]
    // 00000000000000e4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // e8: d63f0100      blr     x8
    // ec: b40000b3      cbz     x19, 0x100 <_JIT_ENTRY+0x100>
    // f0: d1004335      sub     x21, x25, #0x10
    // f4: f81e8333      stur    x19, [x25, #-0x18]
    // f8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // fc: 14000000      b       0xfc <_JIT_ENTRY+0xfc>
    // 00000000000000fc:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 100: d1006335      sub     x21, x25, #0x18
    // 104: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 108: 14000000      b       0x108 <_JIT_ENTRY+0x108>
    // 0000000000000108:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 10c: 00 00 00 00
    const unsigned char code_body[272] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x1a, 0x00, 0x00, 0x90,
        0xa8, 0x82, 0x5e, 0xf8, 0xfd, 0x03, 0x00, 0x91,
        0x5a, 0x03, 0x40, 0xf9, 0x1f, 0x01, 0x1a, 0xeb,
        0xa1, 0x00, 0x00, 0x54, 0xb7, 0x02, 0x5f, 0xf8,
        0xe8, 0x06, 0x40, 0xf9, 0x08, 0xad, 0x42, 0x39,
        0x68, 0x00, 0x38, 0x37, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x09, 0x00, 0x00, 0x90,
        0x88, 0x02, 0x40, 0xf9, 0xe0, 0x03, 0x17, 0xaa,
        0x29, 0x01, 0x40, 0xf9, 0xb8, 0x82, 0x5f, 0xf8,
        0xe3, 0x03, 0x1f, 0xaa, 0x08, 0x11, 0x40, 0xf9,
        0x29, 0x3d, 0x02, 0x53, 0xe1, 0x03, 0x18, 0xaa,
        0x08, 0x4d, 0x29, 0x8b, 0x02, 0x0d, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x48, 0x03, 0x40, 0xb9, 0x99, 0x22, 0x40, 0xf9,
        0xf3, 0x03, 0x00, 0xaa, 0x9f, 0x22, 0x00, 0xf9,
        0x28, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x48, 0x03, 0x00, 0xb9, 0xc1, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x08, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xb3, 0x00, 0x00, 0xb4,
        0x35, 0x43, 0x00, 0xd1, 0x33, 0x83, 0x1e, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x35, 0x63, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PySuper_Type+0x0
    // 8: OPARG
    // 10: &_PySuper_Lookup+0x0
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySuper_Type);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&_PySuper_Lookup);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_26r(code + 0x30, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x90, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x94, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x98, (uintptr_t)data);
    patch_aarch64_12x(code + 0x9c, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xb8, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xc0, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xdc, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xe4, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0xfc, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x108, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_SUPER_ATTR_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SUPER_ATTR_METHOD.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 90000019      adrp    x25, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PySuper_Type
    // c: f85e82a8      ldur    x8, [x21, #-0x18]
    // 10: f9400339      ldr     x25, [x25]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   PySuper_Type
    // 14: 910043fd      add     x29, sp, #0x10
    // 18: eb19011f      cmp     x8, x25
    // 1c: 540000a1      b.ne    0x30 <_JIT_ENTRY+0x30>
    // 20: f85f02b3      ldur    x19, [x21, #-0x10]
    // 24: f9400668      ldr     x8, [x19, #0x8]
    // 28: 3942ad08      ldrb    w8, [x8, #0xab]
    // 2c: 37380088      tbnz    w8, #0x7, 0x3c <_JIT_ENTRY+0x3c>
    // 30: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 34: 910083ff      add     sp, sp, #0x20
    // 38: 14000000      b       0x38 <_JIT_ENTRY+0x38>
    // 0000000000000038:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 3c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 40: f9400288      ldr     x8, [x20]
    // 44: aa1303e0      mov     x0, x19
    // 48: f9400129      ldr     x9, [x9]
    // 0000000000000048:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 4c: f85f82b7      ldur    x23, [x21, #-0x8]
    // 50: f9401108      ldr     x8, [x8, #0x20]
    // 54: 53023d29      ubfx    w9, w9, #2, #14
    // 58: f94006ea      ldr     x10, [x23, #0x8]
    // 5c: aa1703e1      mov     x1, x23
    // 60: 8b294d08      add     x8, x8, w9, uxtw #3
    // 64: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       PyObject_GenericGetAttr
    // 68: f9400129      ldr     x9, [x9]
    // 0000000000000068:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_GenericGetAttr
    // 6c: f940494a      ldr     x10, [x10, #0x90]
    // 70: b81fc3bf      stur    wzr, [x29, #-0x4]
    // 74: f9400d02      ldr     x2, [x8, #0x18]
    // 78: d10013a8      sub     x8, x29, #0x4
    // 7c: f9002295      str     x21, [x20, #0x40]
    // 80: eb09015f      cmp     x10, x9
    // 84: 9a9f0103      csel    x3, x8, xzr, eq
    // 88: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  R_AARCH64_ADR_GOT_PAGE       _PySuper_Lookup
    // 8c: f9400108      ldr     x8, [x8]
    // 000000000000008c:  R_AARCH64_LD64_GOT_LO12_NC   _PySuper_Lookup
    // 90: d63f0100      blr     x8
    // 94: f9402298      ldr     x24, [x20, #0x40]
    // 98: f900229f      str     xzr, [x20, #0x40]
    // 9c: b4000620      cbz     x0, 0x160 <_JIT_ENTRY+0x160>
    // a0: b85fc3a8      ldur    w8, [x29, #-0x4]
    // a4: 35000248      cbnz    w8, 0xec <_JIT_ENTRY+0xec>
    // a8: d1002308      sub     x8, x24, #0x8
    // ac: f9002288      str     x8, [x20, #0x40]
    // b0: b94002e8      ldr     w8, [x23]
    // b4: 37f80148      tbnz    w8, #0x1f, 0xdc <_JIT_ENTRY+0xdc>
    // b8: 71000508      subs    w8, w8, #0x1
    // bc: b90002e8      str     w8, [x23]
    // c0: 540000e1      b.ne    0xdc <_JIT_ENTRY+0xdc>
    // c4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c4:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // c8: aa0003f5      mov     x21, x0
    // cc: aa1703e0      mov     x0, x23
    // d0: f9400108      ldr     x8, [x8]
    // 00000000000000d0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // d4: d63f0100      blr     x8
    // d8: aa1503e0      mov     x0, x21
    // dc: f9402288      ldr     x8, [x20, #0x40]
    // e0: aa1f03f7      mov     x23, xzr
    // e4: f900229f      str     xzr, [x20, #0x40]
    // e8: 91002118      add     x24, x8, #0x8
    // ec: b9400328      ldr     w8, [x25]
    // f0: 37f80188      tbnz    w8, #0x1f, 0x120 <_JIT_ENTRY+0x120>
    // f4: 71000508      subs    w8, w8, #0x1
    // f8: b9000328      str     w8, [x25]
    // fc: 54000121      b.ne    0x120 <_JIT_ENTRY+0x120>
    // 100: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000100:  R_AARCH64_ADR_GOT_PAGE       PySuper_Type
    // 104: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000104:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 108: aa0003f5      mov     x21, x0
    // 10c: f9400108      ldr     x8, [x8]
    // 000000000000010c:  R_AARCH64_LD64_GOT_LO12_NC   PySuper_Type
    // 110: f9400129      ldr     x9, [x9]
    // 0000000000000110:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 114: aa0803e0      mov     x0, x8
    // 118: d63f0120      blr     x9
    // 11c: aa1503e0      mov     x0, x21
    // 120: b9400268      ldr     w8, [x19]
    // 124: 37f80148      tbnz    w8, #0x1f, 0x14c <_JIT_ENTRY+0x14c>
    // 128: 71000508      subs    w8, w8, #0x1
    // 12c: b9000268      str     w8, [x19]
    // 130: 540000e1      b.ne    0x14c <_JIT_ENTRY+0x14c>
    // 134: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000134:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 138: aa0003f5      mov     x21, x0
    // 13c: aa1303e0      mov     x0, x19
    // 140: f9400108      ldr     x8, [x8]
    // 0000000000000140:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 144: d63f0100      blr     x8
    // 148: aa1503e0      mov     x0, x21
    // 14c: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 150: d1002315      sub     x21, x24, #0x8
    // 154: a93edf00      stp     x0, x23, [x24, #-0x18]
    // 158: 910083ff      add     sp, sp, #0x20
    // 15c: 14000000      b       0x15c <_JIT_ENTRY+0x15c>
    // 000000000000015c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 160: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 164: aa1803f5      mov     x21, x24
    // 168: 910083ff      add     sp, sp, #0x20
    // 16c: 14000000      b       0x16c <_JIT_ENTRY+0x16c>
    // 000000000000016c:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[368] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0x19, 0x00, 0x00, 0x90, 0xa8, 0x82, 0x5e, 0xf8,
        0x39, 0x03, 0x40, 0xf9, 0xfd, 0x43, 0x00, 0x91,
        0x1f, 0x01, 0x19, 0xeb, 0xa1, 0x00, 0x00, 0x54,
        0xb3, 0x02, 0x5f, 0xf8, 0x68, 0x06, 0x40, 0xf9,
        0x08, 0xad, 0x42, 0x39, 0x88, 0x00, 0x38, 0x37,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x09, 0x00, 0x00, 0x90,
        0x88, 0x02, 0x40, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x29, 0x01, 0x40, 0xf9, 0xb7, 0x82, 0x5f, 0xf8,
        0x08, 0x11, 0x40, 0xf9, 0x29, 0x3d, 0x02, 0x53,
        0xea, 0x06, 0x40, 0xf9, 0xe1, 0x03, 0x17, 0xaa,
        0x08, 0x4d, 0x29, 0x8b, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x4a, 0x49, 0x40, 0xf9,
        0xbf, 0xc3, 0x1f, 0xb8, 0x02, 0x0d, 0x40, 0xf9,
        0xa8, 0x13, 0x00, 0xd1, 0x95, 0x22, 0x00, 0xf9,
        0x5f, 0x01, 0x09, 0xeb, 0x03, 0x01, 0x9f, 0x9a,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x98, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x20, 0x06, 0x00, 0xb4,
        0xa8, 0xc3, 0x5f, 0xb8, 0x48, 0x02, 0x00, 0x35,
        0x08, 0x23, 0x00, 0xd1, 0x88, 0x22, 0x00, 0xf9,
        0xe8, 0x02, 0x40, 0xb9, 0x48, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xe1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x15, 0xaa, 0x88, 0x22, 0x40, 0xf9,
        0xf7, 0x03, 0x1f, 0xaa, 0x9f, 0x22, 0x00, 0xf9,
        0x18, 0x21, 0x00, 0x91, 0x28, 0x03, 0x40, 0xb9,
        0x88, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x28, 0x03, 0x00, 0xb9, 0x21, 0x01, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x00, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x08, 0xaa,
        0x20, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x15, 0xaa,
        0x68, 0x02, 0x40, 0xb9, 0x48, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xe1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x15, 0xaa, 0xfd, 0x7b, 0x41, 0xa9,
        0x15, 0x23, 0x00, 0xd1, 0x00, 0xdf, 0x3e, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0x41, 0xa9, 0xf5, 0x03, 0x18, 0xaa,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PySuper_Type+0x0
    // 8: OPARG
    // 10: &PyObject_GenericGetAttr+0x0
    // 18: &_PySuper_Lookup+0x0
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySuper_Type);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&PyObject_GenericGetAttr);
    patch_64(data + 0x18, (uintptr_t)&_PySuper_Lookup);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_26r(code + 0x38, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0x3c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x48, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x88, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xc4, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xd0, (uintptr_t)data + 0x20);
    patch_aarch64_21rx(code + 0x100, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x104, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x10c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x110, (uintptr_t)data + 0x20);
    patch_aarch64_21rx(code + 0x134, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x140, (uintptr_t)data + 0x20);
    patch_aarch64_26r(code + 0x15c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x16c, state->instruction_starts[instruction->error_target]);
}

void
emit__MAKE_CALLARGS_A_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAKE_CALLARGS_A_TUPLE.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: a97f5eb3      ldp     x19, x23, [x21, #-0x10]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyTuple_Type
    // c: 910003fd      mov     x29, sp
    // 10: f9400668      ldr     x8, [x19, #0x8]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   PyTuple_Type
    // 18: eb09011f      cmp     x8, x9
    // 1c: 54000480      b.eq    0xac <_JIT_ENTRY+0xac>
    // 20: f85e02a1      ldur    x1, [x21, #-0x20]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  R_AARCH64_ADR_GOT_PAGE       _Py_Check_ArgsIterable
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Check_ArgsIterable
    // 30: aa1603e0      mov     x0, x22
    // 34: aa1303e2      mov     x2, x19
    // 38: d63f0100      blr     x8
    // 3c: f9402295      ldr     x21, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: 37f803a0      tbnz    w0, #0x1f, 0xb8 <_JIT_ENTRY+0xb8>
    // 48: f9002295      str     x21, [x20, #0x40]
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  R_AARCH64_ADR_GOT_PAGE       PySequence_Tuple
    // 50: aa1303e0      mov     x0, x19
    // 54: f9400108      ldr     x8, [x8]
    // 0000000000000054:  R_AARCH64_LD64_GOT_LO12_NC   PySequence_Tuple
    // 58: d63f0100      blr     x8
    // 5c: f9402295      ldr     x21, [x20, #0x40]
    // 60: f900229f      str     xzr, [x20, #0x40]
    // 64: b40002a0      cbz     x0, 0xb8 <_JIT_ENTRY+0xb8>
    // 68: d10042a8      sub     x8, x21, #0x10
    // 6c: f9002288      str     x8, [x20, #0x40]
    // 70: b9400268      ldr     w8, [x19]
    // 74: 37f80148      tbnz    w8, #0x1f, 0x9c <_JIT_ENTRY+0x9c>
    // 78: 71000508      subs    w8, w8, #0x1
    // 7c: b9000268      str     w8, [x19]
    // 80: 540000e1      b.ne    0x9c <_JIT_ENTRY+0x9c>
    // 84: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 88: aa0003f5      mov     x21, x0
    // 8c: aa1303e0      mov     x0, x19
    // 90: f9400108      ldr     x8, [x8]
    // 0000000000000090:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 94: d63f0100      blr     x8
    // 98: aa1503e0      mov     x0, x21
    // 9c: f9402288      ldr     x8, [x20, #0x40]
    // a0: aa0003f3      mov     x19, x0
    // a4: f900229f      str     xzr, [x20, #0x40]
    // a8: 91004115      add     x21, x8, #0x10
    // ac: a93f5eb3      stp     x19, x23, [x21, #-0x10]
    // b0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b4: 14000000      b       0xb4 <_JIT_ENTRY+0xb4>
    // 00000000000000b4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // b8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // bc: 14000000      b       0xbc <_JIT_ENTRY+0xbc>
    // 00000000000000bc:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[192] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb3, 0x5e, 0x7f, 0xa9,
        0x09, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x68, 0x06, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x80, 0x04, 0x00, 0x54,
        0xa1, 0x02, 0x5e, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0xe2, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xa0, 0x03, 0xf8, 0x37,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xa0, 0x02, 0x00, 0xb4,
        0xa8, 0x42, 0x00, 0xd1, 0x88, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x48, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xe1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x15, 0xaa, 0x88, 0x22, 0x40, 0xf9,
        0xf3, 0x03, 0x00, 0xaa, 0x9f, 0x22, 0x00, 0xf9,
        0x15, 0x41, 0x00, 0x91, 0xb3, 0x5e, 0x3f, 0xa9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyTuple_Type+0x0
    // 8: &_Py_Check_ArgsIterable+0x0
    // 10: &PySequence_Tuple+0x0
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x8, (uintptr_t)&_Py_Check_ArgsIterable);
    patch_64(data + 0x10, (uintptr_t)&PySequence_Tuple);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x54, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x84, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x90, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0xb4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xbc, state->instruction_starts[instruction->error_target]);
}

void
emit__MAKE_CELL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAKE_CELL.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 91014293      add     x19, x20, #0x50
    // c: 910003fd      mov     x29, sp
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: 92403d17      and     x23, x8, #0xffff
    // 18: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  R_AARCH64_ADR_GOT_PAGE       PyCell_New
    // 1c: f8777a60      ldr     x0, [x19, x23, lsl #3]
    // 20: f9400108      ldr     x8, [x8]
    // 0000000000000020:  R_AARCH64_LD64_GOT_LO12_NC   PyCell_New
    // 24: d63f0100      blr     x8
    // 28: b40001e0      cbz     x0, 0x64 <_JIT_ENTRY+0x64>
    // 2c: aa0003e8      mov     x8, x0
    // 30: f8777a60      ldr     x0, [x19, x23, lsl #3]
    // 34: f8377a68      str     x8, [x19, x23, lsl #3]
    // 38: f9002295      str     x21, [x20, #0x40]
    // 3c: b40000c0      cbz     x0, 0x54 <_JIT_ENTRY+0x54>
    // 40: b9400008      ldr     w8, [x0]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 48: 71000508      subs    w8, w8, #0x1
    // 4c: b9000008      str     w8, [x0]
    // 50: 540000e0      b.eq    0x6c <_JIT_ENTRY+0x6c>
    // 54: f9402295      ldr     x21, [x20, #0x40]
    // 58: f900229f      str     xzr, [x20, #0x40]
    // 5c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 60: 14000000      b       0x60 <_JIT_ENTRY+0x60>
    // 0000000000000060:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 64: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 68: 14000000      b       0x68 <_JIT_ENTRY+0x68>
    // 0000000000000068:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 6c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: f9402295      ldr     x21, [x20, #0x40]
    // 7c: f900229f      str     xzr, [x20, #0x40]
    // 80: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 84: 14000000      b       0x84 <_JIT_ENTRY+0x84>
    // 0000000000000084:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[136] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x93, 0x42, 0x01, 0x91, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x17, 0x3d, 0x40, 0x92,
        0x08, 0x00, 0x00, 0x90, 0x60, 0x7a, 0x77, 0xf8,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x01, 0x00, 0xb4, 0xe8, 0x03, 0x00, 0xaa,
        0x60, 0x7a, 0x77, 0xf8, 0x68, 0x7a, 0x37, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0xe0, 0x00, 0x00, 0x54, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PyCell_New+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCell_New);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x60, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x68, state->instruction_starts[instruction->error_target]);
    patch_aarch64_33rx(code + 0x6c, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x84, (uintptr_t)code + sizeof(code_body));
}

void
emit__MAKE_FUNCTION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAKE_FUNCTION.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       PyFunction_New
    // 10: f9400e81      ldr     x1, [x20, #0x18]
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   PyFunction_New
    // 18: 910003fd      mov     x29, sp
    // 1c: aa1303e0      mov     x0, x19
    // 20: d63f0100      blr     x8
    // 24: f9402288      ldr     x8, [x20, #0x40]
    // 28: aa0003f7      mov     x23, x0
    // 2c: d1002108      sub     x8, x8, #0x8
    // 30: f9002288      str     x8, [x20, #0x40]
    // 34: b9400268      ldr     w8, [x19]
    // 38: 37f80088      tbnz    w8, #0x1f, 0x48 <_JIT_ENTRY+0x48>
    // 3c: 71000508      subs    w8, w8, #0x1
    // 40: b9000268      str     w8, [x19]
    // 44: 54000180      b.eq    0x74 <_JIT_ENTRY+0x74>
    // 48: f9402295      ldr     x21, [x20, #0x40]
    // 4c: f900229f      str     xzr, [x20, #0x40]
    // 50: b4000217      cbz     x23, 0x90 <_JIT_ENTRY+0x90>
    // 54: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  R_AARCH64_ADR_GOT_PAGE       _PyFunction_SetVersion
    // 58: b9405e61      ldr     w1, [x19, #0x5c]
    // 5c: aa1703e0      mov     x0, x23
    // 60: f9400108      ldr     x8, [x8]
    // 0000000000000060:  R_AARCH64_LD64_GOT_LO12_NC   _PyFunction_SetVersion
    // 64: d63f0100      blr     x8
    // 68: f80086b7      str     x23, [x21], #0x8
    // 6c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 70: 14000000      b       0x70 <_JIT_ENTRY+0x70>
    // 0000000000000070:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 74: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 78: aa1303e0      mov     x0, x19
    // 7c: f9400108      ldr     x8, [x8]
    // 000000000000007c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 80: d63f0100      blr     x8
    // 84: f9402295      ldr     x21, [x20, #0x40]
    // 88: f900229f      str     xzr, [x20, #0x40]
    // 8c: b5fffe57      cbnz    x23, 0x54 <_JIT_ENTRY+0x54>
    // 90: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 94: 14000000      b       0x94 <_JIT_ENTRY+0x94>
    // 0000000000000094:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[152] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb3, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x81, 0x0e, 0x40, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0xfd, 0x03, 0x00, 0x91, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x88, 0x22, 0x40, 0xf9,
        0xf7, 0x03, 0x00, 0xaa, 0x08, 0x21, 0x00, 0xd1,
        0x88, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0x80, 0x01, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x17, 0x02, 0x00, 0xb4, 0x08, 0x00, 0x00, 0x90,
        0x61, 0x5e, 0x40, 0xb9, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xb7, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x57, 0xfe, 0xff, 0xb5,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyFunction_New+0x0
    // 8: &_PyFunction_SetVersion+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFunction_New);
    patch_64(data + 0x8, (uintptr_t)&_PyFunction_SetVersion);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x54, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x60, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x70, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x74, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x7c, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x94, state->instruction_starts[instruction->error_target]);
}

void
emit__MAKE_WARM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAKE_WARM.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400ac8      ldr     x8, [x22, #0x10]
    // 4: 528ce609      mov     w9, #0x6730             // =26416
    // 8: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _JIT_EXECUTOR
    // c: 72a00069      movk    w9, #0x3, lsl #16
    // 10: f940014a      ldr     x10, [x10]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_EXECUTOR
    // 14: 5280002c      mov     w12, #0x1               // =1
    // 18: f869690b      ldr     x11, [x8, x9]
    // 1c: 39008d4c      strb    w12, [x10, #0x23]
    // 20: f100056a      subs    x10, x11, #0x1
    // 24: f829690a      str     x10, [x8, x9]
    // 28: 540000c1      b.ne    0x40 <_JIT_ENTRY+0x40>
    // 2c: 910062c8      add     x8, x22, #0x18
    // 30: c85ffd09      ldaxr   x9, [x8]
    // 34: b2790129      orr     x9, x9, #0x80
    // 38: c80afd09      stlxr   w10, x9, [x8]
    // 3c: 35ffffaa      cbnz    w10, 0x30 <_JIT_ENTRY+0x30>
    // 40: 14000000      b       0x40 <_JIT_ENTRY+0x40>
    // 0000000000000040:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[64] = {
        0xc8, 0x0a, 0x40, 0xf9, 0x09, 0xe6, 0x8c, 0x52,
        0x0a, 0x00, 0x00, 0x90, 0x69, 0x00, 0xa0, 0x72,
        0x4a, 0x01, 0x40, 0xf9, 0x2c, 0x00, 0x80, 0x52,
        0x0b, 0x69, 0x69, 0xf8, 0x4c, 0x8d, 0x00, 0x39,
        0x6a, 0x05, 0x00, 0xf1, 0x0a, 0x69, 0x29, 0xf8,
        0xc1, 0x00, 0x00, 0x54, 0xc8, 0x62, 0x00, 0x91,
        0x09, 0xfd, 0x5f, 0xc8, 0x29, 0x01, 0x79, 0xb2,
        0x09, 0xfd, 0x0a, 0xc8, 0xaa, 0xff, 0xff, 0x35,
    };
    // 0: EXECUTOR
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
}

void
emit__MAP_ADD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAP_ADD.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 92800029      mov     x9, #-0x2               // =-2
    // c: 910003fd      mov     x29, sp
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: a97f0aa1      ldp     x1, x2, [x21, #-0x10]
    // 18: cb282128      sub     x8, x9, w8, uxth
    // 1c: f8687aa0      ldr     x0, [x21, x8, lsl #3]
    // 20: f9002295      str     x21, [x20, #0x40]
    // 24: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  R_AARCH64_ADR_GOT_PAGE       _PyDict_SetItem_Take2
    // 28: f9400108      ldr     x8, [x8]
    // 0000000000000028:  R_AARCH64_LD64_GOT_LO12_NC   _PyDict_SetItem_Take2
    // 2c: d63f0100      blr     x8
    // 30: f9402288      ldr     x8, [x20, #0x40]
    // 34: f900229f      str     xzr, [x20, #0x40]
    // 38: d1004115      sub     x21, x8, #0x10
    // 3c: 34000060      cbz     w0, 0x48 <_JIT_ENTRY+0x48>
    // 40: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 44: 14000000      b       0x44 <_JIT_ENTRY+0x44>
    // 0000000000000044:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: 14000000      b       0x4c <_JIT_ENTRY+0x4c>
    // 000000000000004c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[80] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x29, 0x00, 0x80, 0x92, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0xa1, 0x0a, 0x7f, 0xa9,
        0x28, 0x21, 0x28, 0xcb, 0xa0, 0x7a, 0x68, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x88, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x15, 0x41, 0x00, 0xd1, 0x60, 0x00, 0x00, 0x34,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &_PyDict_SetItem_Take2+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyDict_SetItem_Take2);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x44, state->instruction_starts[instruction->error_target]);
    patch_aarch64_26r(code + 0x4c, (uintptr_t)code + sizeof(code_body));
}

void
emit__MATCH_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MATCH_CLASS.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: a97f66b7      ldp     x23, x25, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // c: f85e82b8      ldur    x24, [x21, #-0x18]
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  R_AARCH64_ADR_GOT_PAGE       _PyEval_MatchClass
    // 18: f9002295      str     x21, [x20, #0x40]
    // 1c: aa1603e0      mov     x0, x22
    // 20: 910003fd      mov     x29, sp
    // 24: f9400129      ldr     x9, [x9]
    // 0000000000000024:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_MatchClass
    // 28: 92403d03      and     x3, x8, #0xffff
    // 2c: aa1803e1      mov     x1, x24
    // 30: aa1703e2      mov     x2, x23
    // 34: aa1903e4      mov     x4, x25
    // 38: d63f0120      blr     x9
    // 3c: f940229a      ldr     x26, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: aa0003f3      mov     x19, x0
    // 48: b9400308      ldr     w8, [x24]
    // 4c: 37f80108      tbnz    w8, #0x1f, 0x6c <_JIT_ENTRY+0x6c>
    // 50: 71000508      subs    w8, w8, #0x1
    // 54: b9000308      str     w8, [x24]
    // 58: 540000a1      b.ne    0x6c <_JIT_ENTRY+0x6c>
    // 5c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 60: aa1803e0      mov     x0, x24
    // 64: f9400108      ldr     x8, [x8]
    // 0000000000000064:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 68: d63f0100      blr     x8
    // 6c: b94002e8      ldr     w8, [x23]
    // 70: 37f80108      tbnz    w8, #0x1f, 0x90 <_JIT_ENTRY+0x90>
    // 74: 71000508      subs    w8, w8, #0x1
    // 78: b90002e8      str     w8, [x23]
    // 7c: 540000a1      b.ne    0x90 <_JIT_ENTRY+0x90>
    // 80: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 84: aa1703e0      mov     x0, x23
    // 88: f9400108      ldr     x8, [x8]
    // 0000000000000088:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 8c: d63f0100      blr     x8
    // 90: b9400328      ldr     w8, [x25]
    // 94: 37f80088      tbnz    w8, #0x1f, 0xa4 <_JIT_ENTRY+0xa4>
    // 98: 71000508      subs    w8, w8, #0x1
    // 9c: b9000328      str     w8, [x25]
    // a0: 540000c0      b.eq    0xb8 <_JIT_ENTRY+0xb8>
    // a4: b4000153      cbz     x19, 0xcc <_JIT_ENTRY+0xcc>
    // a8: d1004355      sub     x21, x26, #0x10
    // ac: f81e8353      stur    x19, [x26, #-0x18]
    // b0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b4: 14000000      b       0xb4 <_JIT_ENTRY+0xb4>
    // 00000000000000b4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // b8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // bc: aa1903e0      mov     x0, x25
    // c0: f9400108      ldr     x8, [x8]
    // 00000000000000c0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // c4: d63f0100      blr     x8
    // c8: b5ffff13      cbnz    x19, 0xa8 <_JIT_ENTRY+0xa8>
    // cc: f9403ac8      ldr     x8, [x22, #0x70]
    // d0: b40000c8      cbz     x8, 0xe8 <_JIT_ENTRY+0xe8>
    // d4: f9400508      ldr     x8, [x8, #0x8]
    // d8: b4000088      cbz     x8, 0xe8 <_JIT_ENTRY+0xe8>
    // dc: d1006355      sub     x21, x26, #0x18
    // e0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e4: 14000000      b       0xe4 <_JIT_ENTRY+0xe4>
    // 00000000000000e4:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // e8: 90000013      adrp    x19, 0x0 <_JIT_ENTRY>
    // 00000000000000e8:  R_AARCH64_ADR_GOT_PAGE       _Py_NoneStruct
    // ec: f9400273      ldr     x19, [x19]
    // 00000000000000ec:  R_AARCH64_LD64_GOT_LO12_NC   _Py_NoneStruct
    // f0: d1004355      sub     x21, x26, #0x10
    // f4: f81e8353      stur    x19, [x26, #-0x18]
    // f8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // fc: 14000000      b       0xfc <_JIT_ENTRY+0xfc>
    // 00000000000000fc:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[256] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb7, 0x66, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xb8, 0x82, 0x5e, 0xf8,
        0x08, 0x01, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0xfd, 0x03, 0x00, 0x91, 0x29, 0x01, 0x40, 0xf9,
        0x03, 0x3d, 0x40, 0x92, 0xe1, 0x03, 0x18, 0xaa,
        0xe2, 0x03, 0x17, 0xaa, 0xe4, 0x03, 0x19, 0xaa,
        0x20, 0x01, 0x3f, 0xd6, 0x9a, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf3, 0x03, 0x00, 0xaa,
        0x08, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x28, 0x03, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x28, 0x03, 0x00, 0xb9,
        0xc0, 0x00, 0x00, 0x54, 0x53, 0x01, 0x00, 0xb4,
        0x55, 0x43, 0x00, 0xd1, 0x53, 0x83, 0x1e, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x19, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x13, 0xff, 0xff, 0xb5, 0xc8, 0x3a, 0x40, 0xf9,
        0xc8, 0x00, 0x00, 0xb4, 0x08, 0x05, 0x40, 0xf9,
        0x88, 0x00, 0x00, 0xb4, 0x55, 0x63, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x13, 0x00, 0x00, 0x90, 0x73, 0x02, 0x40, 0xf9,
        0x55, 0x43, 0x00, 0xd1, 0x53, 0x83, 0x1e, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &_PyEval_MatchClass+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: &_Py_NoneStruct+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_MatchClass);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x80, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x88, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xb4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0xb8, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xc0, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xe4, state->instruction_starts[instruction->error_target]);
    patch_aarch64_33rx(code + 0xe8, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0xfc, (uintptr_t)code + sizeof(code_body));
}

void
emit__MATCH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MATCH_KEYS.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: a97f0aa1      ldp     x1, x2, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _PyEval_MatchKeys
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: aa1603e0      mov     x0, x22
    // 14: 910003fd      mov     x29, sp
    // 18: f9400108      ldr     x8, [x8]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_MatchKeys
    // 1c: d63f0100      blr     x8
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: b4000080      cbz     x0, 0x38 <_JIT_ENTRY+0x38>
    // 2c: f80086a0      str     x0, [x21], #0x8
    // 30: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 34: 14000000      b       0x34 <_JIT_ENTRY+0x34>
    // 0000000000000034:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 38: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 3c: 14000000      b       0x3c <_JIT_ENTRY+0x3c>
    // 000000000000003c:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[64] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xa1, 0x0a, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x80, 0x00, 0x00, 0xb4, 0xa0, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyEval_MatchKeys+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_MatchKeys);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x3c, state->instruction_starts[instruction->error_target]);
}

void
emit__MATCH_MAPPING(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MATCH_MAPPING.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a9      ldur    x9, [x21, #-0x8]
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 8: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // c: aa1503e8      mov     x8, x21
    // 10: 910022b5      add     x21, x21, #0x8
    // 14: f9400529      ldr     x9, [x9, #0x8]
    // 18: f940014a      ldr     x10, [x10]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // 1c: f9405529      ldr     x9, [x9, #0xa8]
    // 20: f940016b      ldr     x11, [x11]
    // 0000000000000020:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // 24: f27a013f      tst     x9, #0x40
    // 28: 9a8a0169      csel    x9, x11, x10, eq
    // 2c: f9000109      str     x9, [x8]
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[48] = {
        0xa9, 0x82, 0x5f, 0xf8, 0x0a, 0x00, 0x00, 0x90,
        0x0b, 0x00, 0x00, 0x90, 0xe8, 0x03, 0x15, 0xaa,
        0xb5, 0x22, 0x00, 0x91, 0x29, 0x05, 0x40, 0xf9,
        0x4a, 0x01, 0x40, 0xf9, 0x29, 0x55, 0x40, 0xf9,
        0x6b, 0x01, 0x40, 0xf9, 0x3f, 0x01, 0x7a, 0xf2,
        0x69, 0x01, 0x8a, 0x9a, 0x09, 0x01, 0x00, 0xf9,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_12x(code + 0x20, (uintptr_t)data + 0x8);
}

void
emit__MATCH_SEQUENCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MATCH_SEQUENCE.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a9      ldur    x9, [x21, #-0x8]
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 8: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // c: aa1503e8      mov     x8, x21
    // 10: 910022b5      add     x21, x21, #0x8
    // 14: f9400529      ldr     x9, [x9, #0x8]
    // 18: f940014a      ldr     x10, [x10]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // 1c: f9405529      ldr     x9, [x9, #0xa8]
    // 20: f940016b      ldr     x11, [x11]
    // 0000000000000020:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // 24: f27b013f      tst     x9, #0x20
    // 28: 9a8a0169      csel    x9, x11, x10, eq
    // 2c: f9000109      str     x9, [x8]
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[48] = {
        0xa9, 0x82, 0x5f, 0xf8, 0x0a, 0x00, 0x00, 0x90,
        0x0b, 0x00, 0x00, 0x90, 0xe8, 0x03, 0x15, 0xaa,
        0xb5, 0x22, 0x00, 0x91, 0x29, 0x05, 0x40, 0xf9,
        0x4a, 0x01, 0x40, 0xf9, 0x29, 0x55, 0x40, 0xf9,
        0x6b, 0x01, 0x40, 0xf9, 0x3f, 0x01, 0x7b, 0xf2,
        0x69, 0x01, 0x8a, 0x9a, 0x09, 0x01, 0x00, 0xf9,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_12x(code + 0x20, (uintptr_t)data + 0x8);
}

void
emit__MAYBE_EXPAND_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAYBE_EXPAND_METHOD.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: 12800028      mov     w8, #-0x2               // =-2
    // 8: 9000000c      adrp    x12, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyMethod_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 10: 12003d2a      and     w10, w9, #0xffff
    // 14: 4b0a0108      sub     w8, w8, w10
    // 18: f868daa9      ldr     x9, [x21, w8, sxtw #3]
    // 1c: f940052b      ldr     x11, [x9, #0x8]
    // 20: f940018c      ldr     x12, [x12]
    // 0000000000000020:  R_AARCH64_LD64_GOT_LO12_NC   PyMethod_Type
    // 24: eb0c017f      cmp     x11, x12
    // 28: 54000040      b.eq    0x30 <_JIT_ENTRY+0x30>
    // 2c: 14000000      b       0x2c <_JIT_ENTRY+0x2c>
    // 000000000000002c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 30: 2a2a03ea      mvn     w10, w10
    // 34: f86adaab      ldr     x11, [x21, w10, sxtw #3]
    // 38: b5ffffab      cbnz    x11, 0x2c <_JIT_ENTRY+0x2c>
    // 3c: f9400d2b      ldr     x11, [x9, #0x18]
    // 40: b940016c      ldr     w12, [x11]
    // 44: 37f8006c      tbnz    w12, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 48: 1100058c      add     w12, w12, #0x1
    // 4c: b900016c      str     w12, [x11]
    // 50: f82adaab      str     x11, [x21, w10, sxtw #3]
    // 54: f9400929      ldr     x9, [x9, #0x10]
    // 58: f868daa0      ldr     x0, [x21, w8, sxtw #3]
    // 5c: b940012a      ldr     w10, [x9]
    // 60: 37f8006a      tbnz    w10, #0x1f, 0x6c <_JIT_ENTRY+0x6c>
    // 64: 1100054a      add     w10, w10, #0x1
    // 68: b900012a      str     w10, [x9]
    // 6c: f828daa9      str     x9, [x21, w8, sxtw #3]
    // 70: f9002295      str     x21, [x20, #0x40]
    // 74: b9400008      ldr     w8, [x0]
    // 78: 37f80088      tbnz    w8, #0x1f, 0x88 <_JIT_ENTRY+0x88>
    // 7c: 71000508      subs    w8, w8, #0x1
    // 80: b9000008      str     w8, [x0]
    // 84: 54000080      b.eq    0x94 <_JIT_ENTRY+0x94>
    // 88: f9402295      ldr     x21, [x20, #0x40]
    // 8c: f900229f      str     xzr, [x20, #0x40]
    // 90: 14000000      b       0x90 <_JIT_ENTRY+0x90>
    // 0000000000000090:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 94: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 98: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 9c: 910003fd      mov     x29, sp
    // a0: f9400108      ldr     x8, [x8]
    // 00000000000000a0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // a4: d63f0100      blr     x8
    // a8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // ac: f9402295      ldr     x21, [x20, #0x40]
    // b0: f900229f      str     xzr, [x20, #0x40]
    // b4: 14000000      b       0xb4 <_JIT_ENTRY+0xb4>
    // 00000000000000b4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[184] = {
        0x09, 0x00, 0x00, 0x90, 0x28, 0x00, 0x80, 0x12,
        0x0c, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x2a, 0x3d, 0x00, 0x12, 0x08, 0x01, 0x0a, 0x4b,
        0xa9, 0xda, 0x68, 0xf8, 0x2b, 0x05, 0x40, 0xf9,
        0x8c, 0x01, 0x40, 0xf9, 0x7f, 0x01, 0x0c, 0xeb,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xea, 0x03, 0x2a, 0x2a, 0xab, 0xda, 0x6a, 0xf8,
        0xab, 0xff, 0xff, 0xb5, 0x2b, 0x0d, 0x40, 0xf9,
        0x6c, 0x01, 0x40, 0xb9, 0x6c, 0x00, 0xf8, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x6c, 0x01, 0x00, 0xb9,
        0xab, 0xda, 0x2a, 0xf8, 0x29, 0x09, 0x40, 0xf9,
        0xa0, 0xda, 0x68, 0xf8, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0xda, 0x28, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x80, 0x00, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x90, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x98, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xa0, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xb4, (uintptr_t)code + sizeof(code_body));
}

void
emit__MAYBE_EXPAND_METHOD_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAYBE_EXPAND_METHOD_KW.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 92800048      mov     x8, #-0x3               // =-3
    // c: 9000000c      adrp    x12, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       PyMethod_Type
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: 910003fd      mov     x29, sp
    // 18: 92403d2a      and     x10, x9, #0xffff
    // 1c: cb0a0108      sub     x8, x8, x10
    // 20: f8687aa9      ldr     x9, [x21, x8, lsl #3]
    // 24: f940052b      ldr     x11, [x9, #0x8]
    // 28: f940018c      ldr     x12, [x12]
    // 0000000000000028:  R_AARCH64_LD64_GOT_LO12_NC   PyMethod_Type
    // 2c: f85f82b3      ldur    x19, [x21, #-0x8]
    // 30: eb0c017f      cmp     x11, x12
    // 34: 54000080      b.eq    0x44 <_JIT_ENTRY+0x44>
    // 38: f81f82b3      stur    x19, [x21, #-0x8]
    // 3c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 40: 14000000      b       0x40 <_JIT_ENTRY+0x40>
    // 0000000000000040:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 44: 9280002b      mov     x11, #-0x2              // =-2
    // 48: cb0a016a      sub     x10, x11, x10
    // 4c: f86a7aab      ldr     x11, [x21, x10, lsl #3]
    // 50: b5ffff4b      cbnz    x11, 0x38 <_JIT_ENTRY+0x38>
    // 54: f9400d2b      ldr     x11, [x9, #0x18]
    // 58: aa0903e0      mov     x0, x9
    // 5c: b940016c      ldr     w12, [x11]
    // 60: 37f8008c      tbnz    w12, #0x1f, 0x70 <_JIT_ENTRY+0x70>
    // 64: 1100058c      add     w12, w12, #0x1
    // 68: b900016c      str     w12, [x11]
    // 6c: f8687aa0      ldr     x0, [x21, x8, lsl #3]
    // 70: f82a7aab      str     x11, [x21, x10, lsl #3]
    // 74: f9400929      ldr     x9, [x9, #0x10]
    // 78: b940012a      ldr     w10, [x9]
    // 7c: 37f8006a      tbnz    w10, #0x1f, 0x88 <_JIT_ENTRY+0x88>
    // 80: 1100054a      add     w10, w10, #0x1
    // 84: b900012a      str     w10, [x9]
    // 88: f8287aa9      str     x9, [x21, x8, lsl #3]
    // 8c: f9002295      str     x21, [x20, #0x40]
    // 90: b9400008      ldr     w8, [x0]
    // 94: 37f80088      tbnz    w8, #0x1f, 0xa4 <_JIT_ENTRY+0xa4>
    // 98: 71000508      subs    w8, w8, #0x1
    // 9c: b9000008      str     w8, [x0]
    // a0: 540000c0      b.eq    0xb8 <_JIT_ENTRY+0xb8>
    // a4: f9402295      ldr     x21, [x20, #0x40]
    // a8: f900229f      str     xzr, [x20, #0x40]
    // ac: f81f82b3      stur    x19, [x21, #-0x8]
    // b0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b4: 14000000      b       0xb4 <_JIT_ENTRY+0xb4>
    // 00000000000000b4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // b8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // bc: f9400108      ldr     x8, [x8]
    // 00000000000000bc:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // c0: d63f0100      blr     x8
    // c4: f9402295      ldr     x21, [x20, #0x40]
    // c8: f900229f      str     xzr, [x20, #0x40]
    // cc: f81f82b3      stur    x19, [x21, #-0x8]
    // d0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d4: 14000000      b       0xd4 <_JIT_ENTRY+0xd4>
    // 00000000000000d4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[216] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x09, 0x00, 0x00, 0x90,
        0x48, 0x00, 0x80, 0x92, 0x0c, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0x2a, 0x3d, 0x40, 0x92, 0x08, 0x01, 0x0a, 0xcb,
        0xa9, 0x7a, 0x68, 0xf8, 0x2b, 0x05, 0x40, 0xf9,
        0x8c, 0x01, 0x40, 0xf9, 0xb3, 0x82, 0x5f, 0xf8,
        0x7f, 0x01, 0x0c, 0xeb, 0x80, 0x00, 0x00, 0x54,
        0xb3, 0x82, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x2b, 0x00, 0x80, 0x92,
        0x6a, 0x01, 0x0a, 0xcb, 0xab, 0x7a, 0x6a, 0xf8,
        0x4b, 0xff, 0xff, 0xb5, 0x2b, 0x0d, 0x40, 0xf9,
        0xe0, 0x03, 0x09, 0xaa, 0x6c, 0x01, 0x40, 0xb9,
        0x8c, 0x00, 0xf8, 0x37, 0x8c, 0x05, 0x00, 0x11,
        0x6c, 0x01, 0x00, 0xb9, 0xa0, 0x7a, 0x68, 0xf8,
        0xab, 0x7a, 0x2a, 0xf8, 0x29, 0x09, 0x40, 0xf9,
        0x2a, 0x01, 0x40, 0xb9, 0x6a, 0x00, 0xf8, 0x37,
        0x4a, 0x05, 0x00, 0x11, 0x2a, 0x01, 0x00, 0xb9,
        0xa9, 0x7a, 0x28, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0xc0, 0x00, 0x00, 0x54, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xb3, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xb3, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xb4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0xb8, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xd4, (uintptr_t)code + sizeof(code_body));
}

void
emit__NOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _NOP.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 14000000      b       0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_JUMP26     _JIT_CONTINUE
}

void
emit__POP_EXCEPT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _POP_EXCEPT.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _Py_NoneStruct
    // 4: f85f82a8      ldur    x8, [x21, #-0x8]
    // 8: f9403ec9      ldr     x9, [x22, #0x78]
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_NoneStruct
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: f9400120      ldr     x0, [x9]
    // 18: eb0a011f      cmp     x8, x10
    // 1c: 9a8803e8      csel    x8, xzr, x8, eq
    // 20: f9000128      str     x8, [x9]
    // 24: b40000c0      cbz     x0, 0x3c <_JIT_ENTRY+0x3c>
    // 28: b9400008      ldr     w8, [x0]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 30: 71000508      subs    w8, w8, #0x1
    // 34: b9000008      str     w8, [x0]
    // 38: 540000a0      b.eq    0x4c <_JIT_ENTRY+0x4c>
    // 3c: f9402288      ldr     x8, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: d1002115      sub     x21, x8, #0x8
    // 48: 14000000      b       0x48 <_JIT_ENTRY+0x48>
    // 0000000000000048:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 4c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 50: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 54: 910003fd      mov     x29, sp
    // 58: f9400108      ldr     x8, [x8]
    // 0000000000000058:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 5c: d63f0100      blr     x8
    // 60: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 64: f9402288      ldr     x8, [x20, #0x40]
    // 68: f900229f      str     xzr, [x20, #0x40]
    // 6c: d1002115      sub     x21, x8, #0x8
    // 70: 14000000      b       0x70 <_JIT_ENTRY+0x70>
    // 0000000000000070:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[112] = {
        0x0a, 0x00, 0x00, 0x90, 0xa8, 0x82, 0x5f, 0xf8,
        0xc9, 0x3e, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x20, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x0a, 0xeb, 0xe8, 0x03, 0x88, 0x9a,
        0x28, 0x01, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x88, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x15, 0x21, 0x00, 0xd1,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x88, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x15, 0x21, 0x00, 0xd1,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x48, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x50, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x58, (uintptr_t)data + 0x8);
}

void
emit__POP_TOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _POP_TOP.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f8ea0      ldr     x0, [x21, #-0x8]!
    // 4: b9400008      ldr     w8, [x0]
    // 8: 37f80088      tbnz    w8, #0x1f, 0x18 <_JIT_ENTRY+0x18>
    // c: 71000508      subs    w8, w8, #0x1
    // 10: b9000008      str     w8, [x0]
    // 14: 54000040      b.eq    0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 1c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 20: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 24: 910003fd      mov     x29, sp
    // 28: f9400108      ldr     x8, [x8]
    // 0000000000000028:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 2c: d63f0100      blr     x8
    // 30: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 34: 14000000      b       0x34 <_JIT_ENTRY+0x34>
    // 0000000000000034:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[56] = {
        0xa0, 0x8e, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x20, (uintptr_t)data);
    patch_aarch64_12x(code + 0x28, (uintptr_t)data);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
}

void
emit__POP_TOP_LOAD_CONST_INLINE_BORROW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _POP_TOP_LOAD_CONST_INLINE_BORROW.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f8ea0      ldr     x0, [x21, #-0x8]!
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: 910003fd      mov     x29, sp
    // 10: b9400008      ldr     w8, [x0]
    // 14: 37f800e8      tbnz    w8, #0x1f, 0x30 <_JIT_ENTRY+0x30>
    // 18: 71000508      subs    w8, w8, #0x1
    // 1c: b9000008      str     w8, [x0]
    // 20: 54000081      b.ne    0x30 <_JIT_ENTRY+0x30>
    // 24: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 28: f9400108      ldr     x8, [x8]
    // 0000000000000028:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 2c: d63f0100      blr     x8
    // 30: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f9400108      ldr     x8, [x8]
    // 0000000000000038:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: f80086a8      str     x8, [x21], #0x8
    // 44: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 48: 14000000      b       0x48 <_JIT_ENTRY+0x48>
    // 0000000000000048:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[72] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xa0, 0x8e, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x95, 0x22, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xa8, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x38, (uintptr_t)data + 0x8);
}

void
emit__PUSH_EXC_INFO(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PUSH_EXC_INFO.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a9      ldur    x9, [x21, #-0x8]
    // 4: f9403ecb      ldr     x11, [x22, #0x78]
    // 8: aa1503e8      mov     x8, x21
    // c: b940012c      ldr     w12, [x9]
    // 10: f940016a      ldr     x10, [x11]
    // 14: 37f8006c      tbnz    w12, #0x1f, 0x20 <_JIT_ENTRY+0x20>
    // 18: 1100058c      add     w12, w12, #0x1
    // 1c: b900012c      str     w12, [x9]
    // 20: 9000000c      adrp    x12, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  R_AARCH64_ADR_GOT_PAGE       _Py_NoneStruct
    // 24: f100015f      cmp     x10, #0x0
    // 28: 91002115      add     x21, x8, #0x8
    // 2c: f940018c      ldr     x12, [x12]
    // 000000000000002c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_NoneStruct
    // 30: f9000169      str     x9, [x11]
    // 34: 9a8a018a      csel    x10, x12, x10, eq
    // 38: a93fa50a      stp     x10, x9, [x8, #-0x8]
    // 3c: 14000000      b       0x3c <_JIT_ENTRY+0x3c>
    // 000000000000003c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[64] = {
        0xa9, 0x82, 0x5f, 0xf8, 0xcb, 0x3e, 0x40, 0xf9,
        0xe8, 0x03, 0x15, 0xaa, 0x2c, 0x01, 0x40, 0xb9,
        0x6a, 0x01, 0x40, 0xf9, 0x6c, 0x00, 0xf8, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x2c, 0x01, 0x00, 0xb9,
        0x0c, 0x00, 0x00, 0x90, 0x5f, 0x01, 0x00, 0xf1,
        0x15, 0x21, 0x00, 0x91, 0x8c, 0x01, 0x40, 0xf9,
        0x69, 0x01, 0x00, 0xf9, 0x8a, 0x01, 0x8a, 0x9a,
        0x0a, 0xa5, 0x3f, 0xa9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_NoneStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x20, (uintptr_t)data);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)data);
    patch_aarch64_26r(code + 0x3c, (uintptr_t)code + sizeof(code_body));
}

void
emit__PUSH_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PUSH_FRAME.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: b9402ec9      ldr     w9, [x22, #0x2c]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: f9402115      ldr     x21, [x8, #0x40]
    // 10: 51000529      sub     w9, w9, #0x1
    // 14: aa0803f4      mov     x20, x8
    // 18: f90026c8      str     x8, [x22, #0x48]
    // 1c: b9002ec9      str     w9, [x22, #0x2c]
    // 20: f900211f      str     xzr, [x8, #0x40]
    // 24: 14000000      b       0x24 <_JIT_ENTRY+0x24>
    // 0000000000000024:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[40] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0xc9, 0x2e, 0x40, 0xb9,
        0x95, 0x22, 0x00, 0xf9, 0x15, 0x21, 0x40, 0xf9,
        0x29, 0x05, 0x00, 0x51, 0xf4, 0x03, 0x08, 0xaa,
        0xc8, 0x26, 0x00, 0xf9, 0xc9, 0x2e, 0x00, 0xb9,
        0x1f, 0x21, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
}

void
emit__PUSH_NULL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PUSH_NULL.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f80086bf      str     xzr, [x21], #0x8
    // 4: 14000000      b       0x4 <_JIT_ENTRY+0x4>
    // 0000000000000004:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[8] = {
        0xbf, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x4, (uintptr_t)code + sizeof(code_body));
}

void
emit__PUSH_NULL_CONDITIONAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PUSH_NULL_CONDITIONAL.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400129      ldr     x9, [x9]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: 12000128      and     w8, w9, #0x1
    // c: 36000049      tbz     w9, #0x0, 0x14 <_JIT_ENTRY+0x14>
    // 10: f90002bf      str     xzr, [x21]
    // 14: 8b284eb5      add     x21, x21, w8, uxtw #3
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x01, 0x00, 0x12, 0x49, 0x00, 0x00, 0x36,
        0xbf, 0x02, 0x00, 0xf9, 0xb5, 0x4e, 0x28, 0x8b,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
}

void
emit__PY_FRAME_GENERAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PY_FRAME_GENERAL.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 92800028      mov     x8, #-0x2               // =-2
    // c: aa1f03e2      mov     x2, xzr
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: 910003fd      mov     x29, sp
    // 18: cb292108      sub     x8, x8, w9, uxth
    // 1c: 12003d2a      and     w10, w9, #0xffff
    // 20: cb292ea9      sub     x9, x21, w9, uxth #3
    // 24: 2a2a03ec      mvn     w12, w10
    // 28: f8687aab      ldr     x11, [x21, x8, lsl #3]
    // 2c: f86cdaac      ldr     x12, [x21, w12, sxtw #3]
    // 30: f940196d      ldr     x13, [x11, #0x30]
    // 34: f100019f      cmp     x12, #0x0
    // 38: 928000ec      mov     x12, #-0x8              // =-8
    // 3c: 1a8a0544      cinc    w4, w10, ne
    // 40: 9a9f118a      csel    x10, x12, xzr, ne
    // 44: 3940c1ad      ldrb    w13, [x13, #0x30]
    // 48: 370000cd      tbnz    w13, #0x0, 0x60 <_JIT_ENTRY+0x60>
    // 4c: f9400962      ldr     x2, [x11, #0x10]
    // 50: b940004b      ldr     w11, [x2]
    // 54: 37f8006b      tbnz    w11, #0x1f, 0x60 <_JIT_ENTRY+0x60>
    // 58: 1100056b      add     w11, w11, #0x1
    // 5c: b900004b      str     w11, [x2]
    // 60: d37df113      lsl     x19, x8, #3
    // 64: f9002295      str     x21, [x20, #0x40]
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  R_AARCH64_ADR_GOT_PAGE       _PyEvalFramePushAndInit
    // 6c: 8b0a0123      add     x3, x9, x10
    // 70: aa1603e0      mov     x0, x22
    // 74: aa1f03e5      mov     x5, xzr
    // 78: f8736aa1      ldr     x1, [x21, x19]
    // 7c: f9400108      ldr     x8, [x8]
    // 000000000000007c:  R_AARCH64_LD64_GOT_LO12_NC   _PyEvalFramePushAndInit
    // 80: aa1403e6      mov     x6, x20
    // 84: d63f0100      blr     x8
    // 88: f9402288      ldr     x8, [x20, #0x40]
    // 8c: f900229f      str     xzr, [x20, #0x40]
    // 90: 8b130115      add     x21, x8, x19
    // 94: b4000080      cbz     x0, 0xa4 <_JIT_ENTRY+0xa4>
    // 98: f80086a0      str     x0, [x21], #0x8
    // 9c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a0: 14000000      b       0xa0 <_JIT_ENTRY+0xa0>
    // 00000000000000a0:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // a4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a8: 14000000      b       0xa8 <_JIT_ENTRY+0xa8>
    // 00000000000000a8:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // ac: 00 00 00 00
    const unsigned char code_body[176] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x09, 0x00, 0x00, 0x90,
        0x28, 0x00, 0x80, 0x92, 0xe2, 0x03, 0x1f, 0xaa,
        0x29, 0x01, 0x40, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x21, 0x29, 0xcb, 0x2a, 0x3d, 0x00, 0x12,
        0xa9, 0x2e, 0x29, 0xcb, 0xec, 0x03, 0x2a, 0x2a,
        0xab, 0x7a, 0x68, 0xf8, 0xac, 0xda, 0x6c, 0xf8,
        0x6d, 0x19, 0x40, 0xf9, 0x9f, 0x01, 0x00, 0xf1,
        0xec, 0x00, 0x80, 0x92, 0x44, 0x05, 0x8a, 0x1a,
        0x8a, 0x11, 0x9f, 0x9a, 0xad, 0xc1, 0x40, 0x39,
        0xcd, 0x00, 0x00, 0x37, 0x62, 0x09, 0x40, 0xf9,
        0x4b, 0x00, 0x40, 0xb9, 0x6b, 0x00, 0xf8, 0x37,
        0x6b, 0x05, 0x00, 0x11, 0x4b, 0x00, 0x00, 0xb9,
        0x13, 0xf1, 0x7d, 0xd3, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x23, 0x01, 0x0a, 0x8b,
        0xe0, 0x03, 0x16, 0xaa, 0xe5, 0x03, 0x1f, 0xaa,
        0xa1, 0x6a, 0x73, 0xf8, 0x08, 0x01, 0x40, 0xf9,
        0xe6, 0x03, 0x14, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x88, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x15, 0x01, 0x13, 0x8b, 0x80, 0x00, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEvalFramePushAndInit+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEvalFramePushAndInit);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x7c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0xa0, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xa8, state->instruction_starts[instruction->error_target]);
}

void
emit__PY_FRAME_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PY_FRAME_KW.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 92800048      mov     x8, #-0x3               // =-3
    // c: 9280002c      mov     x12, #-0x2              // =-2
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f85f82b3      ldur    x19, [x21, #-0x8]
    // 18: aa1f03e2      mov     x2, xzr
    // 1c: 910003fd      mov     x29, sp
    // 20: 92403d2b      and     x11, x9, #0xffff
    // 24: 12003d2d      and     w13, w9, #0xffff
    // 28: b940126e      ldr     w14, [x19, #0x10]
    // 2c: cb0b0108      sub     x8, x8, x11
    // 30: cb0b0197      sub     x23, x12, x11
    // 34: 2a2d03ec      mvn     w12, w13
    // 38: f8687aaa      ldr     x10, [x21, x8, lsl #3]
    // 3c: f8777aa9      ldr     x9, [x21, x23, lsl #3]
    // 40: f940194b      ldr     x11, [x10, #0x30]
    // 44: f100013f      cmp     x9, #0x0
    // 48: 8b2ccea9      add     x9, x21, w12, sxtw #3
    // 4c: 1a8d05ac      cinc    w12, w13, ne
    // 50: 3940c16f      ldrb    w15, [x11, #0x30]
    // 54: 928000eb      mov     x11, #-0x8              // =-8
    // 58: 4b0e018c      sub     w12, w12, w14
    // 5c: 9a9f116b      csel    x11, x11, xzr, ne
    // 60: 370000cf      tbnz    w15, #0x0, 0x78 <_JIT_ENTRY+0x78>
    // 64: f9400942      ldr     x2, [x10, #0x10]
    // 68: b940004a      ldr     w10, [x2]
    // 6c: 37f8006a      tbnz    w10, #0x1f, 0x78 <_JIT_ENTRY+0x78>
    // 70: 1100054a      add     w10, w10, #0x1
    // 74: b900004a      str     w10, [x2]
    // 78: f9002295      str     x21, [x20, #0x40]
    // 7c: 93407d84      sxtw    x4, w12
    // 80: 8b0b0123      add     x3, x9, x11
    // 84: f8687aa1      ldr     x1, [x21, x8, lsl #3]
    // 88: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  R_AARCH64_ADR_GOT_PAGE       _PyEvalFramePushAndInit
    // 8c: aa1603e0      mov     x0, x22
    // 90: f9400108      ldr     x8, [x8]
    // 0000000000000090:  R_AARCH64_LD64_GOT_LO12_NC   _PyEvalFramePushAndInit
    // 94: aa1303e5      mov     x5, x19
    // 98: aa1403e6      mov     x6, x20
    // 9c: d63f0100      blr     x8
    // a0: f9402288      ldr     x8, [x20, #0x40]
    // a4: d1002108      sub     x8, x8, #0x8
    // a8: f9002288      str     x8, [x20, #0x40]
    // ac: b9400268      ldr     w8, [x19]
    // b0: 37f80088      tbnz    w8, #0x1f, 0xc0 <_JIT_ENTRY+0xc0>
    // b4: 71000508      subs    w8, w8, #0x1
    // b8: b9000268      str     w8, [x19]
    // bc: 54000100      b.eq    0xdc <_JIT_ENTRY+0xdc>
    // c0: f9402288      ldr     x8, [x20, #0x40]
    // c4: f900229f      str     xzr, [x20, #0x40]
    // c8: 8b170d15      add     x21, x8, x23, lsl #3
    // cc: b40001c0      cbz     x0, 0x104 <_JIT_ENTRY+0x104>
    // d0: f80086a0      str     x0, [x21], #0x8
    // d4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d8: 14000000      b       0xd8 <_JIT_ENTRY+0xd8>
    // 00000000000000d8:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // dc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000dc:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // e0: aa0003f5      mov     x21, x0
    // e4: aa1303e0      mov     x0, x19
    // e8: f9400108      ldr     x8, [x8]
    // 00000000000000e8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // ec: d63f0100      blr     x8
    // f0: aa1503e0      mov     x0, x21
    // f4: f9402288      ldr     x8, [x20, #0x40]
    // f8: f900229f      str     xzr, [x20, #0x40]
    // fc: 8b170d15      add     x21, x8, x23, lsl #3
    // 100: b5fffe80      cbnz    x0, 0xd0 <_JIT_ENTRY+0xd0>
    // 104: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 108: 14000000      b       0x108 <_JIT_ENTRY+0x108>
    // 0000000000000108:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 10c: 00 00 00 00
    const unsigned char code_body[272] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x09, 0x00, 0x00, 0x90,
        0x48, 0x00, 0x80, 0x92, 0x2c, 0x00, 0x80, 0x92,
        0x29, 0x01, 0x40, 0xf9, 0xb3, 0x82, 0x5f, 0xf8,
        0xe2, 0x03, 0x1f, 0xaa, 0xfd, 0x03, 0x00, 0x91,
        0x2b, 0x3d, 0x40, 0x92, 0x2d, 0x3d, 0x00, 0x12,
        0x6e, 0x12, 0x40, 0xb9, 0x08, 0x01, 0x0b, 0xcb,
        0x97, 0x01, 0x0b, 0xcb, 0xec, 0x03, 0x2d, 0x2a,
        0xaa, 0x7a, 0x68, 0xf8, 0xa9, 0x7a, 0x77, 0xf8,
        0x4b, 0x19, 0x40, 0xf9, 0x3f, 0x01, 0x00, 0xf1,
        0xa9, 0xce, 0x2c, 0x8b, 0xac, 0x05, 0x8d, 0x1a,
        0x6f, 0xc1, 0x40, 0x39, 0xeb, 0x00, 0x80, 0x92,
        0x8c, 0x01, 0x0e, 0x4b, 0x6b, 0x11, 0x9f, 0x9a,
        0xcf, 0x00, 0x00, 0x37, 0x42, 0x09, 0x40, 0xf9,
        0x4a, 0x00, 0x40, 0xb9, 0x6a, 0x00, 0xf8, 0x37,
        0x4a, 0x05, 0x00, 0x11, 0x4a, 0x00, 0x00, 0xb9,
        0x95, 0x22, 0x00, 0xf9, 0x84, 0x7d, 0x40, 0x93,
        0x23, 0x01, 0x0b, 0x8b, 0xa1, 0x7a, 0x68, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0xe5, 0x03, 0x13, 0xaa,
        0xe6, 0x03, 0x14, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x88, 0x22, 0x40, 0xf9, 0x08, 0x21, 0x00, 0xd1,
        0x88, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0x00, 0x01, 0x00, 0x54,
        0x88, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x15, 0x0d, 0x17, 0x8b, 0xc0, 0x01, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x15, 0xaa, 0x88, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x15, 0x0d, 0x17, 0x8b,
        0x80, 0xfe, 0xff, 0xb5, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEvalFramePushAndInit+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEvalFramePushAndInit);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x88, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x90, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0xd8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0xdc, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xe8, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x108, state->instruction_starts[instruction->error_target]);
}

void
emit__REPLACE_WITH_TRUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _REPLACE_WITH_TRUE.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: b9400008      ldr     w8, [x0]
    // 8: 37f80088      tbnz    w8, #0x1f, 0x18 <_JIT_ENTRY+0x18>
    // c: 71000508      subs    w8, w8, #0x1
    // 10: b9000008      str     w8, [x0]
    // 14: 540000a0      b.eq    0x28 <_JIT_ENTRY+0x28>
    // 18: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 1c: f9400108      ldr     x8, [x8]
    // 000000000000001c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // 20: f81f82a8      stur    x8, [x21, #-0x8]
    // 24: 14000000      b       0x24 <_JIT_ENTRY+0x24>
    // 0000000000000024:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 28: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 30: 910003fd      mov     x29, sp
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 38: d63f0100      blr     x8
    // 3c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 40: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 44: f9400108      ldr     x8, [x8]
    // 0000000000000044:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // 48: f81f82a8      stur    x8, [x21, #-0x8]
    // 4c: 14000000      b       0x4c <_JIT_ENTRY+0x4c>
    // 000000000000004c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[80] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xfd, 0x7b, 0xc1, 0xa8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data);
    patch_aarch64_26r(code + 0x4c, (uintptr_t)code + sizeof(code_body));
}

void
emit__RESUME_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _RESUME_CHECK.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400ec8      ldr     x8, [x22, #0x18]
    // 4: f9400289      ldr     x9, [x20]
    // 8: f9405529      ldr     x9, [x9, #0xa8]
    // c: eb09011f      cmp     x8, x9
    // 10: 54000041      b.ne    0x18 <_JIT_ENTRY+0x18>
    // 14: 14000000      b       0x14 <_JIT_ENTRY+0x14>
    // 0000000000000014:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 1c: 00 00 00 00
    const unsigned char code_body[32] = {
        0xc8, 0x0e, 0x40, 0xf9, 0x89, 0x02, 0x40, 0xf9,
        0x29, 0x55, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x14, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
}

void
emit__RETURN_GENERATOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _RETURN_GENERATOR.o:   file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f9002295      str     x21, [x20, #0x40]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _Py_MakeCoro
    // c: f9400a80      ldr     x0, [x20, #0x10]
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _Py_MakeCoro
    // 14: 910003fd      mov     x29, sp
    // 18: d63f0100      blr     x8
    // 1c: f9402295      ldr     x21, [x20, #0x40]
    // 20: f900229f      str     xzr, [x20, #0x40]
    // 24: b4000800      cbz     x0, 0x124 <_JIT_ENTRY+0x124>
    // 28: f9401e88      ldr     x8, [x20, #0x38]
    // 2c: ad400281      ldp     q1, q0, [x20]
    // 30: 91000908      add     x8, x8, #0x2
    // 34: a903d688      stp     x8, x21, [x20, #0x38]
    // 38: aa1403e8      mov     x8, x20
    // 3c: 3c858000      stur    q0, [x0, #0x58]
    // 40: 3c848001      stur    q1, [x0, #0x48]
    // 44: ad410680      ldp     q0, q1, [x20, #0x20]
    // 48: 3dc01282      ldr     q2, [x20, #0x40]
    // 4c: f8450d09      ldr     x9, [x8, #0x50]!
    // 50: 3c888002      stur    q2, [x0, #0x88]
    // 54: 3c868000      stur    q0, [x0, #0x68]
    // 58: f9004c09      str     x9, [x0, #0x98]
    // 5c: 3c878001      stur    q1, [x0, #0x78]
    // 60: f9402289      ldr     x9, [x20, #0x40]
    // 64: cb080128      sub     x8, x9, x8
    // 68: d343fd09      lsr     x9, x8, #3
    // 6c: 8b29cc0a      add     x10, x0, w9, sxtw #3
    // 70: 7100093f      cmp     w9, #0x2
    // 74: 9102614a      add     x10, x10, #0x98
    // 78: f900440a      str     x10, [x0, #0x88]
    // 7c: 5400028b      b.lt    0xcc <_JIT_ENTRY+0xcc>
    // 80: d3438508      ubfx    x8, x8, #3, #31
    // 84: d100050a      sub     x10, x8, #0x1
    // 88: f100195f      cmp     x10, #0x6
    // 8c: 540000a3      b.lo    0xa0 <_JIT_ENTRY+0xa0>
    // 90: cb140009      sub     x9, x0, x20
    // 94: 91012129      add     x9, x9, #0x48
    // 98: f100813f      cmp     x9, #0x20
    // 9c: 54000482      b.hs    0x12c <_JIT_ENTRY+0x12c>
    // a0: 52800029      mov     w9, #0x1                // =1
    // a4: d37df12a      lsl     x10, x9, #3
    // a8: cb080128      sub     x8, x9, x8
    // ac: 8b14014b      add     x11, x10, x20
    // b0: 8b00014a      add     x10, x10, x0
    // b4: 91014169      add     x9, x11, #0x50
    // b8: 9102614a      add     x10, x10, #0x98
    // bc: f840852b      ldr     x11, [x9], #0x8
    // c0: b1000508      adds    x8, x8, #0x1
    // c4: f800854b      str     x11, [x10], #0x8
    // c8: 54ffffa3      b.lo    0xbc <_JIT_ENTRY+0xbc>
    // cc: 52801fa8      mov     w8, #0xfd               // =253
    // d0: b9402ec9      ldr     w9, [x22, #0x2c]
    // d4: f900281f      str     xzr, [x0, #0x50]
    // d8: 39010c08      strb    w8, [x0, #0x43]
    // dc: 52800028      mov     w8, #0x1                // =1
    // e0: f9400693      ldr     x19, [x20, #0x8]
    // e4: 39024808      strb    w8, [x0, #0x92]
    // e8: 11000528      add     w8, w9, #0x1
    // ec: aa0003f7      mov     x23, x0
    // f0: b9002ec8      str     w8, [x22, #0x2c]
    // f4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000f4:  R_AARCH64_ADR_GOT_PAGE       _PyThreadState_PopFrame
    // f8: aa1603e0      mov     x0, x22
    // fc: f9400108      ldr     x8, [x8]
    // 00000000000000fc:  R_AARCH64_LD64_GOT_LO12_NC   _PyThreadState_PopFrame
    // 100: aa1403e1      mov     x1, x20
    // 104: d63f0100      blr     x8
    // 108: f9402275      ldr     x21, [x19, #0x40]
    // 10c: f90026d3      str     x19, [x22, #0x48]
    // 110: aa1303f4      mov     x20, x19
    // 114: f900227f      str     xzr, [x19, #0x40]
    // 118: f80086b7      str     x23, [x21], #0x8
    // 11c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 120: 14000000      b       0x120 <_JIT_ENTRY+0x120>
    // 0000000000000120:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 124: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 128: 14000000      b       0x128 <_JIT_ENTRY+0x128>
    // 0000000000000128:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 12c: 927ef54b      and     x11, x10, #0xfffffffffffffffc
    // 130: 9102c00c      add     x12, x0, #0xb0
    // 134: 9101a28d      add     x13, x20, #0x68
    // 138: b2400169      orr     x9, x11, #0x1
    // 13c: aa0b03ee      mov     x14, x11
    // 140: ad7f85a0      ldp     q0, q1, [x13, #-0x10]
    // 144: f10011ce      subs    x14, x14, #0x4
    // 148: 910081ad      add     x13, x13, #0x20
    // 14c: ad3f8580      stp     q0, q1, [x12, #-0x10]
    // 150: 9100818c      add     x12, x12, #0x20
    // 154: 54ffff61      b.ne    0x140 <_JIT_ENTRY+0x140>
    // 158: eb0b015f      cmp     x10, x11
    // 15c: 54fffb80      b.eq    0xcc <_JIT_ENTRY+0xcc>
    // 160: 17ffffd1      b       0xa4 <_JIT_ENTRY+0xa4>
    // 164: 00 00 00 00
    const unsigned char code_body[360] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x80, 0x0a, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x08, 0x00, 0xb4,
        0x88, 0x1e, 0x40, 0xf9, 0x81, 0x02, 0x40, 0xad,
        0x08, 0x09, 0x00, 0x91, 0x88, 0xd6, 0x03, 0xa9,
        0xe8, 0x03, 0x14, 0xaa, 0x00, 0x80, 0x85, 0x3c,
        0x01, 0x80, 0x84, 0x3c, 0x80, 0x06, 0x41, 0xad,
        0x82, 0x12, 0xc0, 0x3d, 0x09, 0x0d, 0x45, 0xf8,
        0x02, 0x80, 0x88, 0x3c, 0x00, 0x80, 0x86, 0x3c,
        0x09, 0x4c, 0x00, 0xf9, 0x01, 0x80, 0x87, 0x3c,
        0x89, 0x22, 0x40, 0xf9, 0x28, 0x01, 0x08, 0xcb,
        0x09, 0xfd, 0x43, 0xd3, 0x0a, 0xcc, 0x29, 0x8b,
        0x3f, 0x09, 0x00, 0x71, 0x4a, 0x61, 0x02, 0x91,
        0x0a, 0x44, 0x00, 0xf9, 0x8b, 0x02, 0x00, 0x54,
        0x08, 0x85, 0x43, 0xd3, 0x0a, 0x05, 0x00, 0xd1,
        0x5f, 0x19, 0x00, 0xf1, 0xa3, 0x00, 0x00, 0x54,
        0x09, 0x00, 0x14, 0xcb, 0x29, 0x21, 0x01, 0x91,
        0x3f, 0x81, 0x00, 0xf1, 0x82, 0x04, 0x00, 0x54,
        0x29, 0x00, 0x80, 0x52, 0x2a, 0xf1, 0x7d, 0xd3,
        0x28, 0x01, 0x08, 0xcb, 0x4b, 0x01, 0x14, 0x8b,
        0x4a, 0x01, 0x00, 0x8b, 0x69, 0x41, 0x01, 0x91,
        0x4a, 0x61, 0x02, 0x91, 0x2b, 0x85, 0x40, 0xf8,
        0x08, 0x05, 0x00, 0xb1, 0x4b, 0x85, 0x00, 0xf8,
        0xa3, 0xff, 0xff, 0x54, 0xa8, 0x1f, 0x80, 0x52,
        0xc9, 0x2e, 0x40, 0xb9, 0x1f, 0x28, 0x00, 0xf9,
        0x08, 0x0c, 0x01, 0x39, 0x28, 0x00, 0x80, 0x52,
        0x93, 0x06, 0x40, 0xf9, 0x08, 0x48, 0x02, 0x39,
        0x28, 0x05, 0x00, 0x11, 0xf7, 0x03, 0x00, 0xaa,
        0xc8, 0x2e, 0x00, 0xb9, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x16, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x14, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x75, 0x22, 0x40, 0xf9, 0xd3, 0x26, 0x00, 0xf9,
        0xf4, 0x03, 0x13, 0xaa, 0x7f, 0x22, 0x00, 0xf9,
        0xb7, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x4b, 0xf5, 0x7e, 0x92,
        0x0c, 0xc0, 0x02, 0x91, 0x8d, 0xa2, 0x01, 0x91,
        0x69, 0x01, 0x40, 0xb2, 0xee, 0x03, 0x0b, 0xaa,
        0xa0, 0x85, 0x7f, 0xad, 0xce, 0x11, 0x00, 0xf1,
        0xad, 0x81, 0x00, 0x91, 0x80, 0x85, 0x3f, 0xad,
        0x8c, 0x81, 0x00, 0x91, 0x61, 0xff, 0xff, 0x54,
        0x5f, 0x01, 0x0b, 0xeb, 0x80, 0xfb, 0xff, 0x54,
        0xd1, 0xff, 0xff, 0x17, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_MakeCoro+0x0
    // 8: &_PyThreadState_PopFrame+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_MakeCoro);
    patch_64(data + 0x8, (uintptr_t)&_PyThreadState_PopFrame);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xf4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xfc, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x120, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x128, state->instruction_starts[instruction->error_target]);
}

void
emit__RETURN_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _RETURN_VALUE.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: b9402ec8      ldr     w8, [x22, #0x2c]
    // 8: aa1403e1      mov     x1, x20
    // c: aa1603e0      mov     x0, x22
    // 10: f85f8eb3      ldr     x19, [x21, #-0x8]!
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: f9400694      ldr     x20, [x20, #0x8]
    // 1c: 11000508      add     w8, w8, #0x1
    // 20: 910003fd      mov     x29, sp
    // 24: b9002ec8      str     w8, [x22, #0x2c]
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  R_AARCH64_ADR_GOT_PAGE       _PyEval_FrameClearAndPop
    // 2c: f90026d4      str     x20, [x22, #0x48]
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_FrameClearAndPop
    // 34: d63f0100      blr     x8
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: f80086b3      str     x19, [x21], #0x8
    // 44: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 48: 14000000      b       0x48 <_JIT_ENTRY+0x48>
    // 0000000000000048:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[72] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xc8, 0x2e, 0x40, 0xb9,
        0xe1, 0x03, 0x14, 0xaa, 0xe0, 0x03, 0x16, 0xaa,
        0xb3, 0x8e, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x94, 0x06, 0x40, 0xf9, 0x08, 0x05, 0x00, 0x11,
        0xfd, 0x03, 0x00, 0x91, 0xc8, 0x2e, 0x00, 0xb9,
        0x08, 0x00, 0x00, 0x90, 0xd4, 0x26, 0x00, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xb3, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
    };
    // 0: &_PyEval_FrameClearAndPop+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_FrameClearAndPop);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data);
}

void
emit__SAVE_RETURN_OFFSET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SAVE_RETURN_OFFSET.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: 79009288      strh    w8, [x20, #0x48]
    // c: 14000000      b       0xc <_JIT_ENTRY+0xc>
    // 000000000000000c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[16] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x88, 0x92, 0x00, 0x79, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0xc, (uintptr_t)code + sizeof(code_body));
}

void
emit__SEND_GEN_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SEND_GEN_FRAME.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyGen_Type
    // 8: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyCoro_Type
    // c: f9400509      ldr     x9, [x8, #0x8]
    // 10: f940014a      ldr     x10, [x10]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   PyGen_Type
    // 14: f940016b      ldr     x11, [x11]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   PyCoro_Type
    // 18: eb0a013f      cmp     x9, x10
    // 1c: fa4b1124      ccmp    x9, x11, #0x4, ne
    // 20: 54000061      b.ne    0x2c <_JIT_ENTRY+0x2c>
    // 24: 39c10d09      ldrsb   w9, [x8, #0x43]
    // 28: 37f80049      tbnz    w9, #0x1f, 0x30 <_JIT_ENTRY+0x30>
    // 2c: 14000000      b       0x2c <_JIT_ENTRY+0x2c>
    // 000000000000002c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 30: f85f82a9      ldur    x9, [x21, #-0x8]
    // 34: f940450a      ldr     x10, [x8, #0x88]
    // 38: 9100a10b      add     x11, x8, #0x28
    // 3c: f9000149      str     x9, [x10]
    // 40: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 44: f9400129      ldr     x9, [x9]
    // 0000000000000044:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 48: f9403eca      ldr     x10, [x22, #0x78]
    // 4c: f9003ecb      str     x11, [x22, #0x78]
    // 50: f940450b      ldr     x11, [x8, #0x88]
    // 54: 39010d1f      strb    wzr, [x8, #0x43]
    // 58: 11000929      add     w9, w9, #0x2
    // 5c: f900190a      str     x10, [x8, #0x30]
    // 60: 9101210a      add     x10, x8, #0x48
    // 64: 79009289      strh    w9, [x20, #0x48]
    // 68: 91002169      add     x9, x11, #0x8
    // 6c: f9002914      str     x20, [x8, #0x50]
    // 70: f9004509      str     x9, [x8, #0x88]
    // 74: f81f82aa      stur    x10, [x21, #-0x8]
    // 78: 14000000      b       0x78 <_JIT_ENTRY+0x78>
    // 0000000000000078:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[120] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x0a, 0x00, 0x00, 0x90,
        0x0b, 0x00, 0x00, 0x90, 0x09, 0x05, 0x40, 0xf9,
        0x4a, 0x01, 0x40, 0xf9, 0x6b, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x24, 0x11, 0x4b, 0xfa,
        0x61, 0x00, 0x00, 0x54, 0x09, 0x0d, 0xc1, 0x39,
        0x49, 0x00, 0xf8, 0x37, 0x00, 0x00, 0x00, 0x14,
        0xa9, 0x82, 0x5f, 0xf8, 0x0a, 0x45, 0x40, 0xf9,
        0x0b, 0xa1, 0x00, 0x91, 0x49, 0x01, 0x00, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0xca, 0x3e, 0x40, 0xf9, 0xcb, 0x3e, 0x00, 0xf9,
        0x0b, 0x45, 0x40, 0xf9, 0x1f, 0x0d, 0x01, 0x39,
        0x29, 0x09, 0x00, 0x11, 0x0a, 0x19, 0x00, 0xf9,
        0x0a, 0x21, 0x01, 0x91, 0x89, 0x92, 0x00, 0x79,
        0x69, 0x21, 0x00, 0x91, 0x14, 0x29, 0x00, 0xf9,
        0x09, 0x45, 0x00, 0xf9, 0xaa, 0x82, 0x1f, 0xf8,
    };
    // 0: &PyGen_Type+0x0
    // 8: &PyCoro_Type+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyGen_Type);
    patch_64(data + 0x8, (uintptr_t)&PyCoro_Type);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x2c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x10);
}

void
emit__SETUP_ANNOTATIONS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SETUP_ANNOTATIONS.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: f9401680      ldr     x0, [x20, #0x28]
    // 8: a9017bfd      stp     x29, x30, [sp, #0x10]
    // c: 910043fd      add     x29, sp, #0x10
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: b4000380      cbz     x0, 0x84 <_JIT_ENTRY+0x84>
    // 18: 90000013      adrp    x19, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 1c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  R_AARCH64_ADR_GOT_PAGE       PyMapping_GetOptionalItem
    // 20: 52921608      mov     w8, #0x90b0             // =37040
    // 24: f9400273      ldr     x19, [x19]
    // 0000000000000024:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 28: f9400129      ldr     x9, [x9]
    // 0000000000000028:  R_AARCH64_LD64_GOT_LO12_NC   PyMapping_GetOptionalItem
    // 2c: 910023e2      add     x2, sp, #0x8
    // 30: 8b080261      add     x1, x19, x8
    // 34: d63f0120      blr     x9
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: 37f80380      tbnz    w0, #0x1f, 0xb0 <_JIT_ENTRY+0xb0>
    // 44: f94007e0      ldr     x0, [sp, #0x8]
    // 48: f9002295      str     x21, [x20, #0x40]
    // 4c: b4000380      cbz     x0, 0xbc <_JIT_ENTRY+0xbc>
    // 50: b9400008      ldr     w8, [x0]
    // 54: 37f800e8      tbnz    w8, #0x1f, 0x70 <_JIT_ENTRY+0x70>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b9000008      str     w8, [x0]
    // 60: 54000081      b.ne    0x70 <_JIT_ENTRY+0x70>
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 6c: d63f0100      blr     x8
    // 70: f9402295      ldr     x21, [x20, #0x40]
    // 74: f900229f      str     xzr, [x20, #0x40]
    // 78: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 7c: 910083ff      add     sp, sp, #0x20
    // 80: 14000000      b       0x80 <_JIT_ENTRY+0x80>
    // 0000000000000080:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 84: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  R_AARCH64_ADR_GOT_PAGE       PyExc_SystemError
    // 88: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1
    // 8c: 91000042      add     x2, x2, #0x0
    // 000000000000008c:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1
    // 90: f9400108      ldr     x8, [x8]
    // 0000000000000090:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_SystemError
    // 94: aa1603e0      mov     x0, x22
    // 98: f9400101      ldr     x1, [x8]
    // 9c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  R_AARCH64_ADR_GOT_PAGE       _PyErr_Format
    // a0: f9400108      ldr     x8, [x8]
    // 00000000000000a0:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_Format
    // a4: d63f0100      blr     x8
    // a8: f9402295      ldr     x21, [x20, #0x40]
    // ac: f900229f      str     xzr, [x20, #0x40]
    // b0: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // b4: 910083ff      add     sp, sp, #0x20
    // b8: 14000000      b       0xb8 <_JIT_ENTRY+0xb8>
    // 00000000000000b8:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // bc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000bc:  R_AARCH64_ADR_GOT_PAGE       PyDict_New
    // c0: f9400108      ldr     x8, [x8]
    // 00000000000000c0:  R_AARCH64_LD64_GOT_LO12_NC   PyDict_New
    // c4: d63f0100      blr     x8
    // c8: f9402295      ldr     x21, [x20, #0x40]
    // cc: f900229f      str     xzr, [x20, #0x40]
    // d0: f90007e0      str     x0, [sp, #0x8]
    // d4: b4fffee0      cbz     x0, 0xb0 <_JIT_ENTRY+0xb0>
    // d8: f9002295      str     x21, [x20, #0x40]
    // dc: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000dc:  R_AARCH64_ADR_GOT_PAGE       PyObject_SetItem
    // e0: aa0003e2      mov     x2, x0
    // e4: f9401680      ldr     x0, [x20, #0x28]
    // e8: 52921608      mov     w8, #0x90b0             // =37040
    // ec: f9400129      ldr     x9, [x9]
    // 00000000000000ec:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_SetItem
    // f0: 8b080261      add     x1, x19, x8
    // f4: d63f0120      blr     x9
    // f8: f94007e8      ldr     x8, [sp, #0x8]
    // fc: b9400109      ldr     w9, [x8]
    // 100: 37f80149      tbnz    w9, #0x1f, 0x128 <_JIT_ENTRY+0x128>
    // 104: 71000529      subs    w9, w9, #0x1
    // 108: b9000109      str     w9, [x8]
    // 10c: 540000e1      b.ne    0x128 <_JIT_ENTRY+0x128>
    // 110: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000110:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 114: 2a0003f3      mov     w19, w0
    // 118: aa0803e0      mov     x0, x8
    // 11c: f9400129      ldr     x9, [x9]
    // 000000000000011c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 120: d63f0120      blr     x9
    // 124: 2a1303e0      mov     w0, w19
    // 128: f9402295      ldr     x21, [x20, #0x40]
    // 12c: f900229f      str     xzr, [x20, #0x40]
    // 130: 35fffc00      cbnz    w0, 0xb0 <_JIT_ENTRY+0xb0>
    // 134: 17ffffd1      b       0x78 <_JIT_ENTRY+0x78>
    const unsigned char code_body[312] = {
        0xff, 0x83, 0x00, 0xd1, 0x80, 0x16, 0x40, 0xf9,
        0xfd, 0x7b, 0x01, 0xa9, 0xfd, 0x43, 0x00, 0x91,
        0x95, 0x22, 0x00, 0xf9, 0x80, 0x03, 0x00, 0xb4,
        0x13, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x16, 0x92, 0x52, 0x73, 0x02, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0xe2, 0x23, 0x00, 0x91,
        0x61, 0x02, 0x08, 0x8b, 0x20, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x80, 0x03, 0xf8, 0x37, 0xe0, 0x07, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x80, 0x03, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0x01, 0x01, 0x40, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xe0, 0x07, 0x00, 0xf9, 0xe0, 0xfe, 0xff, 0xb4,
        0x95, 0x22, 0x00, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0xe2, 0x03, 0x00, 0xaa, 0x80, 0x16, 0x40, 0xf9,
        0x08, 0x16, 0x92, 0x52, 0x29, 0x01, 0x40, 0xf9,
        0x61, 0x02, 0x08, 0x8b, 0x20, 0x01, 0x3f, 0xd6,
        0xe8, 0x07, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x49, 0x01, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x71,
        0x09, 0x01, 0x00, 0xb9, 0xe1, 0x00, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0xf3, 0x03, 0x00, 0x2a,
        0xe0, 0x03, 0x08, 0xaa, 0x29, 0x01, 0x40, 0xf9,
        0x20, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x13, 0x2a,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0xfc, 0xff, 0x35, 0xd1, 0xff, 0xff, 0x17,
    };
    // 0: 'no locals found when setting up annotations\x00'
    // 2c: 00 00 00 00
    // 30: &_PyRuntime+0x0
    // 38: &PyMapping_GetOptionalItem+0x0
    // 40: &_Py_Dealloc+0x0
    // 48: &PyExc_SystemError+0x0
    // 50: &_PyErr_Format+0x0
    // 58: &PyDict_New+0x0
    // 60: &PyObject_SetItem+0x0
    const unsigned char data_body[104] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
        0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74,
        0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20,
        0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
        0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x38, (uintptr_t)&PyMapping_GetOptionalItem);
    patch_64(data + 0x40, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x48, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x50, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x58, (uintptr_t)&PyDict_New);
    patch_64(data + 0x60, (uintptr_t)&PyObject_SetItem);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x18, (uintptr_t)data + 0x30);
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data + 0x38);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x30);
    patch_aarch64_12x(code + 0x28, (uintptr_t)data + 0x38);
    patch_aarch64_33rx(code + 0x64, (uintptr_t)data + 0x40);
    patch_aarch64_26r(code + 0x80, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x84, (uintptr_t)data + 0x48);
    patch_aarch64_21r(code + 0x88, (uintptr_t)data);
    patch_aarch64_12(code + 0x8c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x90, (uintptr_t)data + 0x48);
    patch_aarch64_33rx(code + 0x9c, (uintptr_t)data + 0x50);
    patch_aarch64_26r(code + 0xb8, state->instruction_starts[instruction->error_target]);
    patch_aarch64_33rx(code + 0xbc, (uintptr_t)data + 0x58);
    patch_aarch64_21rx(code + 0xdc, (uintptr_t)data + 0x60);
    patch_aarch64_12x(code + 0xec, (uintptr_t)data + 0x60);
    patch_aarch64_21rx(code + 0x110, (uintptr_t)data + 0x40);
    patch_aarch64_12x(code + 0x11c, (uintptr_t)data + 0x40);
}

void
emit__SET_ADD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SET_ADD.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 910003fd      mov     x29, sp
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 10: f85f82b3      ldur    x19, [x21, #-0x8]
    // 14: 2a2803e8      mvn     w8, w8
    // 18: aa1303e1      mov     x1, x19
    // 1c: 531d7108      lsl     w8, w8, #3
    // 20: b26db108      orr     x8, x8, #0xfffffffffff80000
    // 24: f8686aa0      ldr     x0, [x21, x8]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       PySet_Add
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   PySet_Add
    // 34: d63f0100      blr     x8
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: b9400268      ldr     w8, [x19]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 48: 71000508      subs    w8, w8, #0x1
    // 4c: b9000268      str     w8, [x19]
    // 50: 540000a0      b.eq    0x64 <_JIT_ENTRY+0x64>
    // 54: d10022b5      sub     x21, x21, #0x8
    // 58: 34000140      cbz     w0, 0x80 <_JIT_ENTRY+0x80>
    // 5c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 60: 14000000      b       0x60 <_JIT_ENTRY+0x60>
    // 0000000000000060:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 68: 2a0003f7      mov     w23, w0
    // 6c: aa1303e0      mov     x0, x19
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: d10022b5      sub     x21, x21, #0x8
    // 7c: 35ffff17      cbnz    w23, 0x5c <_JIT_ENTRY+0x5c>
    // 80: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 84: 14000000      b       0x84 <_JIT_ENTRY+0x84>
    // 0000000000000084:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[136] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0xe8, 0x03, 0x28, 0x2a,
        0xe1, 0x03, 0x13, 0xaa, 0x08, 0x71, 0x1d, 0x53,
        0x08, 0xb1, 0x6d, 0xb2, 0xa0, 0x6a, 0x68, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0xb5, 0x22, 0x00, 0xd1,
        0x40, 0x01, 0x00, 0x34, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xf7, 0x03, 0x00, 0x2a, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xb5, 0x22, 0x00, 0xd1, 0x17, 0xff, 0xff, 0x35,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PySet_Add+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PySet_Add);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x60, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x84, (uintptr_t)code + sizeof(code_body));
}

void
emit__SET_FUNCTION_ATTRIBUTE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SET_FUNCTION_ATTRIBUTE.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _Py_FunctionAttributeOffsets
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FunctionAttributeOffsets
    // 10: f85f8eaa      ldr     x10, [x21, #-0x8]!
    // 14: 92403d08      and     x8, x8, #0xffff
    // 18: f8687928      ldr     x8, [x9, x8, lsl #3]
    // 1c: f85f82a9      ldur    x9, [x21, #-0x8]
    // 20: f8286949      str     x9, [x10, x8]
    // 24: f81f82aa      stur    x10, [x21, #-0x8]
    // 28: 14000000      b       0x28 <_JIT_ENTRY+0x28>
    // 0000000000000028:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xaa, 0x8e, 0x5f, 0xf8, 0x08, 0x3d, 0x40, 0x92,
        0x28, 0x79, 0x68, 0xf8, 0xa9, 0x82, 0x5f, 0xf8,
        0x49, 0x69, 0x28, 0xf8, 0xaa, 0x82, 0x1f, 0xf8,
    };
    // 0: OPARG
    // 8: &_Py_FunctionAttributeOffsets+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_FunctionAttributeOffsets);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data + 0x8);
}

void
emit__SET_IP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SET_IP.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 8: f9001e88      str     x8, [x20, #0x38]
    // c: 14000000      b       0xc <_JIT_ENTRY+0xc>
    // 000000000000000c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[16] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x88, 0x1e, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0xc, (uintptr_t)code + sizeof(code_body));
}

void
emit__SET_UPDATE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SET_UPDATE.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: 910003fd      mov     x29, sp
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 10: f85f82b3      ldur    x19, [x21, #-0x8]
    // 14: 2a2803e8      mvn     w8, w8
    // 18: aa1303e1      mov     x1, x19
    // 1c: 531d7108      lsl     w8, w8, #3
    // 20: b26db108      orr     x8, x8, #0xfffffffffff80000
    // 24: f8686aa0      ldr     x0, [x21, x8]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       _PySet_Update
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   _PySet_Update
    // 34: d63f0100      blr     x8
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: b9400268      ldr     w8, [x19]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 48: 71000508      subs    w8, w8, #0x1
    // 4c: b9000268      str     w8, [x19]
    // 50: 540000a0      b.eq    0x64 <_JIT_ENTRY+0x64>
    // 54: d10022b5      sub     x21, x21, #0x8
    // 58: 37f80140      tbnz    w0, #0x1f, 0x80 <_JIT_ENTRY+0x80>
    // 5c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 60: 14000000      b       0x60 <_JIT_ENTRY+0x60>
    // 0000000000000060:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 68: 2a0003f7      mov     w23, w0
    // 6c: aa1303e0      mov     x0, x19
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: d10022b5      sub     x21, x21, #0x8
    // 7c: 36ffff17      tbz     w23, #0x1f, 0x5c <_JIT_ENTRY+0x5c>
    // 80: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 84: 14000000      b       0x84 <_JIT_ENTRY+0x84>
    // 0000000000000084:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[136] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0xe8, 0x03, 0x28, 0x2a,
        0xe1, 0x03, 0x13, 0xaa, 0x08, 0x71, 0x1d, 0x53,
        0x08, 0xb1, 0x6d, 0xb2, 0xa0, 0x6a, 0x68, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0xb5, 0x22, 0x00, 0xd1,
        0x40, 0x01, 0xf8, 0x37, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xf7, 0x03, 0x00, 0x2a, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xb5, 0x22, 0x00, 0xd1, 0x17, 0xff, 0xff, 0x36,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &_PySet_Update+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PySet_Update);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x60, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x84, state->instruction_starts[instruction->error_target]);
}

void
emit__START_EXECUTOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _START_EXECUTOR.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9002295      str     x21, [x20, #0x40]
    // 4: f9408ac0      ldr     x0, [x22, #0x110]
    // 8: b40000e0      cbz     x0, 0x24 <_JIT_ENTRY+0x24>
    // c: f9008adf      str     xzr, [x22, #0x110]
    // 10: b9400008      ldr     w8, [x0]
    // 14: 37f80088      tbnz    w8, #0x1f, 0x24 <_JIT_ENTRY+0x24>
    // 18: 71000508      subs    w8, w8, #0x1
    // 1c: b9000008      str     w8, [x0]
    // 20: 54000080      b.eq    0x30 <_JIT_ENTRY+0x30>
    // 24: f9402295      ldr     x21, [x20, #0x40]
    // 28: f900229f      str     xzr, [x20, #0x40]
    // 2c: 14000000      b       0x2c <_JIT_ENTRY+0x2c>
    // 000000000000002c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 30: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 38: 910003fd      mov     x29, sp
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 40: d63f0100      blr     x8
    // 44: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 48: f9402295      ldr     x21, [x20, #0x40]
    // 4c: f900229f      str     xzr, [x20, #0x40]
    // 50: 14000000      b       0x50 <_JIT_ENTRY+0x50>
    // 0000000000000050:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[80] = {
        0x95, 0x22, 0x00, 0xf9, 0xc0, 0x8a, 0x40, 0xf9,
        0xe0, 0x00, 0x00, 0xb4, 0xdf, 0x8a, 0x00, 0xf9,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x80, 0x00, 0x00, 0x54, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xfd, 0x7b, 0xc1, 0xa8,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x34, (uintptr_t)data);
    patch_aarch64_12x(code + 0x3c, (uintptr_t)data);
}

void
emit__STORE_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_ATTR.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // c: 910003fd      mov     x29, sp
    // 10: f9401108      ldr     x8, [x8, #0x20]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 18: a97f4eb7      ldp     x23, x19, [x21, #-0x10]
    // 1c: 8b292d08      add     x8, x8, w9, uxth #3
    // 20: f9400d01      ldr     x1, [x8, #0x18]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  R_AARCH64_ADR_GOT_PAGE       PyObject_SetAttr
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_SetAttr
    // 30: aa1303e0      mov     x0, x19
    // 34: aa1703e2      mov     x2, x23
    // 38: d63f0100      blr     x8
    // 3c: f9402295      ldr     x21, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: 2a0003f8      mov     w24, w0
    // 48: b94002e8      ldr     w8, [x23]
    // 4c: 37f80108      tbnz    w8, #0x1f, 0x6c <_JIT_ENTRY+0x6c>
    // 50: 71000508      subs    w8, w8, #0x1
    // 54: b90002e8      str     w8, [x23]
    // 58: 540000a1      b.ne    0x6c <_JIT_ENTRY+0x6c>
    // 5c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 60: aa1703e0      mov     x0, x23
    // 64: f9400108      ldr     x8, [x8]
    // 0000000000000064:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 68: d63f0100      blr     x8
    // 6c: b9400268      ldr     w8, [x19]
    // 70: 37f80088      tbnz    w8, #0x1f, 0x80 <_JIT_ENTRY+0x80>
    // 74: 71000508      subs    w8, w8, #0x1
    // 78: b9000268      str     w8, [x19]
    // 7c: 540000a0      b.eq    0x90 <_JIT_ENTRY+0x90>
    // 80: d10042b5      sub     x21, x21, #0x10
    // 84: 34000138      cbz     w24, 0xa8 <_JIT_ENTRY+0xa8>
    // 88: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 8c: 14000000      b       0x8c <_JIT_ENTRY+0x8c>
    // 000000000000008c:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 90: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 94: aa1303e0      mov     x0, x19
    // 98: f9400108      ldr     x8, [x8]
    // 0000000000000098:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 9c: d63f0100      blr     x8
    // a0: d10042b5      sub     x21, x21, #0x10
    // a4: 35ffff38      cbnz    w24, 0x88 <_JIT_ENTRY+0x88>
    // a8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // ac: 14000000      b       0xac <_JIT_ENTRY+0xac>
    // 00000000000000ac:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[176] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x11, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xb7, 0x4e, 0x7f, 0xa9, 0x08, 0x2d, 0x29, 0x8b,
        0x01, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0xe2, 0x03, 0x17, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf8, 0x03, 0x00, 0x2a,
        0xe8, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0xb5, 0x42, 0x00, 0xd1, 0x38, 0x01, 0x00, 0x34,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xb5, 0x42, 0x00, 0xd1, 0x38, 0xff, 0xff, 0x35,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PyObject_SetAttr+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_SetAttr);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x8c, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0x90, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x98, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xac, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_ATTR_INSTANCE_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_ATTR_INSTANCE_VALUE.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9ff02a9      ldp     x9, x0, [x21, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // c: 8b282008      add     x8, x0, w8, uxth
    // 10: f9400113      ldr     x19, [x8]
    // 14: f9000109      str     x9, [x8]
    // 18: b50001b3      cbnz    x19, 0x4c <_JIT_ENTRY+0x4c>
    // 1c: f9400409      ldr     x9, [x0, #0x8]
    // 20: f9401129      ldr     x9, [x9, #0x20]
    // 24: 8b090009      add     x9, x0, x9
    // 28: 3940012a      ldrb    w10, [x9]
    // 2c: 9100212b      add     x11, x9, #0x8
    // 30: 3940052c      ldrb    w12, [x9, #0x1]
    // 34: 4b0b0108      sub     w8, w8, w11
    // 38: 8b0a0d6a      add     x10, x11, x10, lsl #3
    // 3c: 53037d08      lsr     w8, w8, #3
    // 40: 1100058b      add     w11, w12, #0x1
    // 44: 3900052b      strb    w11, [x9, #0x1]
    // 48: 382c6948      strb    w8, [x10, x12]
    // 4c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 50: f9002295      str     x21, [x20, #0x40]
    // 54: 910003fd      mov     x29, sp
    // 58: b9400008      ldr     w8, [x0]
    // 5c: 37f800e8      tbnz    w8, #0x1f, 0x78 <_JIT_ENTRY+0x78>
    // 60: 71000508      subs    w8, w8, #0x1
    // 64: b9000008      str     w8, [x0]
    // 68: 54000081      b.ne    0x78 <_JIT_ENTRY+0x78>
    // 6c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: b40000d3      cbz     x19, 0x90 <_JIT_ENTRY+0x90>
    // 7c: b9400268      ldr     w8, [x19]
    // 80: 37f80088      tbnz    w8, #0x1f, 0x90 <_JIT_ENTRY+0x90>
    // 84: 71000508      subs    w8, w8, #0x1
    // 88: b9000268      str     w8, [x19]
    // 8c: 540000a0      b.eq    0xa0 <_JIT_ENTRY+0xa0>
    // 90: f9402295      ldr     x21, [x20, #0x40]
    // 94: f900229f      str     xzr, [x20, #0x40]
    // 98: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 9c: 14000000      b       0x9c <_JIT_ENTRY+0x9c>
    // 000000000000009c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // a0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // a4: aa1303e0      mov     x0, x19
    // a8: f9400108      ldr     x8, [x8]
    // 00000000000000a8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // ac: d63f0100      blr     x8
    // b0: f9402295      ldr     x21, [x20, #0x40]
    // b4: f900229f      str     xzr, [x20, #0x40]
    // b8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // bc: 14000000      b       0xbc <_JIT_ENTRY+0xbc>
    // 00000000000000bc:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[192] = {
        0xa9, 0x02, 0xff, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x20, 0x28, 0x8b,
        0x13, 0x01, 0x40, 0xf9, 0x09, 0x01, 0x00, 0xf9,
        0xb3, 0x01, 0x00, 0xb5, 0x09, 0x04, 0x40, 0xf9,
        0x29, 0x11, 0x40, 0xf9, 0x09, 0x00, 0x09, 0x8b,
        0x2a, 0x01, 0x40, 0x39, 0x2b, 0x21, 0x00, 0x91,
        0x2c, 0x05, 0x40, 0x39, 0x08, 0x01, 0x0b, 0x4b,
        0x6a, 0x0d, 0x0a, 0x8b, 0x08, 0x7d, 0x03, 0x53,
        0x8b, 0x05, 0x00, 0x11, 0x2b, 0x05, 0x00, 0x39,
        0x48, 0x69, 0x2c, 0x38, 0xfd, 0x7b, 0xbf, 0xa9,
        0x95, 0x22, 0x00, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xd3, 0x00, 0x00, 0xb4, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x6c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x9c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0xa0, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xa8, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0xbc, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_ATTR_SLOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_ATTR_SLOT.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 8: 910003fd      mov     x29, sp
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 10: a9ff02a9      ldp     x9, x0, [x21, #-0x10]!
    // 14: 92403d08      and     x8, x8, #0xffff
    // 18: f8686813      ldr     x19, [x0, x8]
    // 1c: f8286809      str     x9, [x0, x8]
    // 20: f9002295      str     x21, [x20, #0x40]
    // 24: b9400008      ldr     w8, [x0]
    // 28: 37f800e8      tbnz    w8, #0x1f, 0x44 <_JIT_ENTRY+0x44>
    // 2c: 71000508      subs    w8, w8, #0x1
    // 30: b9000008      str     w8, [x0]
    // 34: 54000081      b.ne    0x44 <_JIT_ENTRY+0x44>
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 40: d63f0100      blr     x8
    // 44: b40000d3      cbz     x19, 0x5c <_JIT_ENTRY+0x5c>
    // 48: b9400268      ldr     w8, [x19]
    // 4c: 37f80088      tbnz    w8, #0x1f, 0x5c <_JIT_ENTRY+0x5c>
    // 50: 71000508      subs    w8, w8, #0x1
    // 54: b9000268      str     w8, [x19]
    // 58: 540000a0      b.eq    0x6c <_JIT_ENTRY+0x6c>
    // 5c: f9402295      ldr     x21, [x20, #0x40]
    // 60: f900229f      str     xzr, [x20, #0x40]
    // 64: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 68: 14000000      b       0x68 <_JIT_ENTRY+0x68>
    // 0000000000000068:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 6c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 70: aa1303e0      mov     x0, x19
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 78: d63f0100      blr     x8
    // 7c: f9402295      ldr     x21, [x20, #0x40]
    // 80: f900229f      str     xzr, [x20, #0x40]
    // 84: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 88: 14000000      b       0x88 <_JIT_ENTRY+0x88>
    // 0000000000000088:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[136] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0xa9, 0x02, 0xff, 0xa9, 0x08, 0x3d, 0x40, 0x92,
        0x13, 0x68, 0x68, 0xf8, 0x09, 0x68, 0x28, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x40, 0xb9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xd3, 0x00, 0x00, 0xb4,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x68, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x6c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x74, (uintptr_t)data + 0x8);
}

void
emit__STORE_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_ATTR_WITH_HINT.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82b3      ldur    x19, [x21, #-0x8]
    // 4: f85e8262      ldur    x2, [x19, #-0x18]
    // 8: b4000302      cbz     x2, 0x68 <_JIT_ENTRY+0x68>
    // c: f9401048      ldr     x8, [x2, #0x20]
    // 10: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPERAND0
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPERAND0
    // 18: f9400d0a      ldr     x10, [x8, #0x18]
    // 1c: 92403d29      and     x9, x9, #0xffff
    // 20: eb09015f      cmp     x10, x9
    // 24: 54000229      b.ls    0x68 <_JIT_ENTRY+0x68>
    // 28: 3940290a      ldrb    w10, [x8, #0xa]
    // 2c: 340001ea      cbz     w10, 0x68 <_JIT_ENTRY+0x68>
    // 30: 3940250a      ldrb    w10, [x8, #0x9]
    // 34: f940028b      ldr     x11, [x20]
    // 38: 5280002c      mov     w12, #0x1               // =1
    // 3c: 9aca218a      lsl     x10, x12, x10
    // 40: 9000000c      adrp    x12, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 44: f940116b      ldr     x11, [x11, #0x20]
    // 48: f940018c      ldr     x12, [x12]
    // 0000000000000048:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 4c: 8b0a0108      add     x8, x8, x10
    // 50: 8b2c2d6a      add     x10, x11, w12, uxth #3
    // 54: 8b091119      add     x25, x8, x9, lsl #4
    // 58: f9400d43      ldr     x3, [x10, #0x18]
    // 5c: f8420f28      ldr     x8, [x25, #0x20]!
    // 60: eb03011f      cmp     x8, x3
    // 64: 54000040      b.eq    0x6c <_JIT_ENTRY+0x6c>
    // 68: 14000000      b       0x68 <_JIT_ENTRY+0x68>
    // 0000000000000068:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 6c: f9400737      ldr     x23, [x25, #0x8]
    // 70: b4ffffd7      cbz     x23, 0x68 <_JIT_ENTRY+0x68>
    // 74: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 78: 39406040      ldrb    w0, [x2, #0x18]
    // 7c: f85f02b8      ldur    x24, [x21, #-0x10]
    // 80: 910003fd      mov     x29, sp
    // 84: f9002295      str     x21, [x20, #0x40]
    // 88: 340000e0      cbz     w0, 0xa4 <_JIT_ENTRY+0xa4>
    // 8c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  R_AARCH64_ADR_GOT_PAGE       _PyDict_SendEvent
    // 90: 52800021      mov     w1, #0x1                // =1
    // 94: aa1803e4      mov     x4, x24
    // 98: f9400108      ldr     x8, [x8]
    // 0000000000000098:  R_AARCH64_LD64_GOT_LO12_NC   _PyDict_SendEvent
    // 9c: d63f0100      blr     x8
    // a0: f9402295      ldr     x21, [x20, #0x40]
    // a4: d10042a8      sub     x8, x21, #0x10
    // a8: f9000738      str     x24, [x25, #0x8]
    // ac: f9002288      str     x8, [x20, #0x40]
    // b0: b9400268      ldr     w8, [x19]
    // b4: 37f80108      tbnz    w8, #0x1f, 0xd4 <_JIT_ENTRY+0xd4>
    // b8: 71000508      subs    w8, w8, #0x1
    // bc: b9000268      str     w8, [x19]
    // c0: 540000a1      b.ne    0xd4 <_JIT_ENTRY+0xd4>
    // c4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c4:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // c8: aa1303e0      mov     x0, x19
    // cc: f9400108      ldr     x8, [x8]
    // 00000000000000cc:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // d0: d63f0100      blr     x8
    // d4: b94002e8      ldr     w8, [x23]
    // d8: 37f80108      tbnz    w8, #0x1f, 0xf8 <_JIT_ENTRY+0xf8>
    // dc: 71000508      subs    w8, w8, #0x1
    // e0: b90002e8      str     w8, [x23]
    // e4: 540000a1      b.ne    0xf8 <_JIT_ENTRY+0xf8>
    // e8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // ec: aa1703e0      mov     x0, x23
    // f0: f9400108      ldr     x8, [x8]
    // 00000000000000f0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // f4: d63f0100      blr     x8
    // f8: f9402295      ldr     x21, [x20, #0x40]
    // fc: f900229f      str     xzr, [x20, #0x40]
    // 100: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 104: 14000000      b       0x104 <_JIT_ENTRY+0x104>
    // 0000000000000104:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[264] = {
        0xb3, 0x82, 0x5f, 0xf8, 0x62, 0x82, 0x5e, 0xf8,
        0x02, 0x03, 0x00, 0xb4, 0x48, 0x10, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x0a, 0x0d, 0x40, 0xf9, 0x29, 0x3d, 0x40, 0x92,
        0x5f, 0x01, 0x09, 0xeb, 0x29, 0x02, 0x00, 0x54,
        0x0a, 0x29, 0x40, 0x39, 0xea, 0x01, 0x00, 0x34,
        0x0a, 0x25, 0x40, 0x39, 0x8b, 0x02, 0x40, 0xf9,
        0x2c, 0x00, 0x80, 0x52, 0x8a, 0x21, 0xca, 0x9a,
        0x0c, 0x00, 0x00, 0x90, 0x6b, 0x11, 0x40, 0xf9,
        0x8c, 0x01, 0x40, 0xf9, 0x08, 0x01, 0x0a, 0x8b,
        0x6a, 0x2d, 0x2c, 0x8b, 0x19, 0x11, 0x09, 0x8b,
        0x43, 0x0d, 0x40, 0xf9, 0x28, 0x0f, 0x42, 0xf8,
        0x1f, 0x01, 0x03, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x37, 0x07, 0x40, 0xf9,
        0xd7, 0xff, 0xff, 0xb4, 0xfd, 0x7b, 0xbf, 0xa9,
        0x40, 0x60, 0x40, 0x39, 0xb8, 0x02, 0x5f, 0xf8,
        0xfd, 0x03, 0x00, 0x91, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x00, 0x00, 0x34, 0x08, 0x00, 0x00, 0x90,
        0x21, 0x00, 0x80, 0x52, 0xe4, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0xa8, 0x42, 0x00, 0xd1,
        0x38, 0x07, 0x00, 0xf9, 0x88, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: &_PyDict_SendEvent+0x0
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&_PyDict_SendEvent);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x48, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x68, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0x8c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x98, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xc4, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xcc, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xe8, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xf0, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0x104, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_DEREF.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: f85f82a9      ldur    x9, [x21, #-0x8]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: 8b282e88      add     x8, x20, w8, uxth #3
    // 14: f9402908      ldr     x8, [x8, #0x50]
    // 18: f9400900      ldr     x0, [x8, #0x10]
    // 1c: f9000909      str     x9, [x8, #0x10]
    // 20: b40000c0      cbz     x0, 0x38 <_JIT_ENTRY+0x38>
    // 24: b9400008      ldr     w8, [x0]
    // 28: 37f80088      tbnz    w8, #0x1f, 0x38 <_JIT_ENTRY+0x38>
    // 2c: 71000508      subs    w8, w8, #0x1
    // 30: b9000008      str     w8, [x0]
    // 34: 540000a0      b.eq    0x48 <_JIT_ENTRY+0x48>
    // 38: f9402288      ldr     x8, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: d1002115      sub     x21, x8, #0x8
    // 44: 14000000      b       0x44 <_JIT_ENTRY+0x44>
    // 0000000000000044:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 48: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 50: 910003fd      mov     x29, sp
    // 54: f9400108      ldr     x8, [x8]
    // 0000000000000054:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 58: d63f0100      blr     x8
    // 5c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 60: f9402288      ldr     x8, [x20, #0x40]
    // 64: f900229f      str     xzr, [x20, #0x40]
    // 68: d1002115      sub     x21, x8, #0x8
    // 6c: 14000000      b       0x6c <_JIT_ENTRY+0x6c>
    // 000000000000006c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[112] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa9, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x88, 0x2e, 0x28, 0x8b, 0x08, 0x29, 0x40, 0xf9,
        0x00, 0x09, 0x40, 0xf9, 0x09, 0x09, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x88, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x15, 0x21, 0x00, 0xd1, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xfd, 0x7b, 0xc1, 0xa8,
        0x88, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x15, 0x21, 0x00, 0xd1, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x54, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x6c, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: f85f8ea9      ldr     x9, [x21, #-0x8]!
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: 8b282e88      add     x8, x20, w8, uxth #3
    // 14: f9402900      ldr     x0, [x8, #0x50]
    // 18: f9002909      str     x9, [x8, #0x50]
    // 1c: b40000c0      cbz     x0, 0x34 <_JIT_ENTRY+0x34>
    // 20: b9400008      ldr     w8, [x0]
    // 24: 37f80088      tbnz    w8, #0x1f, 0x34 <_JIT_ENTRY+0x34>
    // 28: 71000508      subs    w8, w8, #0x1
    // 2c: b9000008      str     w8, [x0]
    // 30: 54000080      b.eq    0x40 <_JIT_ENTRY+0x40>
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: 14000000      b       0x3c <_JIT_ENTRY+0x3c>
    // 000000000000003c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 40: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 44: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 48: 910003fd      mov     x29, sp
    // 4c: f9400108      ldr     x8, [x8]
    // 000000000000004c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 50: d63f0100      blr     x8
    // 54: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 58: f9402295      ldr     x21, [x20, #0x40]
    // 5c: f900229f      str     xzr, [x20, #0x40]
    // 60: 14000000      b       0x60 <_JIT_ENTRY+0x60>
    // 0000000000000060:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[96] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa9, 0x8e, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x88, 0x2e, 0x28, 0x8b, 0x00, 0x29, 0x40, 0xf9,
        0x09, 0x29, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x80, 0x00, 0x00, 0x54, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xfd, 0x7b, 0xc1, 0xa8,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
    };
    // 0: OPARG
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x3c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x8);
}

void
emit__STORE_FAST_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_0.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9402a80      ldr     x0, [x20, #0x50]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: f9002a88      str     x8, [x20, #0x50]
    // 10: b40000c0      cbz     x0, 0x28 <_JIT_ENTRY+0x28>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 54000080      b.eq    0x34 <_JIT_ENTRY+0x34>
    // 28: f9402295      ldr     x21, [x20, #0x40]
    // 2c: f900229f      str     xzr, [x20, #0x40]
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 34: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 3c: 910003fd      mov     x29, sp
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 44: d63f0100      blr     x8
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: f9402295      ldr     x21, [x20, #0x40]
    // 50: f900229f      str     xzr, [x20, #0x40]
    // 54: 14000000      b       0x54 <_JIT_ENTRY+0x54>
    // 0000000000000054:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[88] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x80, 0x2a, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x88, 0x2a, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x80, 0x00, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_12x(code + 0x40, (uintptr_t)data);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_1.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9402e80      ldr     x0, [x20, #0x58]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: f9002e88      str     x8, [x20, #0x58]
    // 10: b40000c0      cbz     x0, 0x28 <_JIT_ENTRY+0x28>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 54000080      b.eq    0x34 <_JIT_ENTRY+0x34>
    // 28: f9402295      ldr     x21, [x20, #0x40]
    // 2c: f900229f      str     xzr, [x20, #0x40]
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 34: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 3c: 910003fd      mov     x29, sp
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 44: d63f0100      blr     x8
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: f9402295      ldr     x21, [x20, #0x40]
    // 50: f900229f      str     xzr, [x20, #0x40]
    // 54: 14000000      b       0x54 <_JIT_ENTRY+0x54>
    // 0000000000000054:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[88] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x80, 0x2e, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x88, 0x2e, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x80, 0x00, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_12x(code + 0x40, (uintptr_t)data);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_2.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9403280      ldr     x0, [x20, #0x60]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: f9003288      str     x8, [x20, #0x60]
    // 10: b40000c0      cbz     x0, 0x28 <_JIT_ENTRY+0x28>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 54000080      b.eq    0x34 <_JIT_ENTRY+0x34>
    // 28: f9402295      ldr     x21, [x20, #0x40]
    // 2c: f900229f      str     xzr, [x20, #0x40]
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 34: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 3c: 910003fd      mov     x29, sp
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 44: d63f0100      blr     x8
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: f9402295      ldr     x21, [x20, #0x40]
    // 50: f900229f      str     xzr, [x20, #0x40]
    // 54: 14000000      b       0x54 <_JIT_ENTRY+0x54>
    // 0000000000000054:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[88] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x80, 0x32, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x88, 0x32, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x80, 0x00, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_12x(code + 0x40, (uintptr_t)data);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_3.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9403680      ldr     x0, [x20, #0x68]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: f9003688      str     x8, [x20, #0x68]
    // 10: b40000c0      cbz     x0, 0x28 <_JIT_ENTRY+0x28>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 54000080      b.eq    0x34 <_JIT_ENTRY+0x34>
    // 28: f9402295      ldr     x21, [x20, #0x40]
    // 2c: f900229f      str     xzr, [x20, #0x40]
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 34: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 3c: 910003fd      mov     x29, sp
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 44: d63f0100      blr     x8
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: f9402295      ldr     x21, [x20, #0x40]
    // 50: f900229f      str     xzr, [x20, #0x40]
    // 54: 14000000      b       0x54 <_JIT_ENTRY+0x54>
    // 0000000000000054:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[88] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x80, 0x36, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x88, 0x36, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x80, 0x00, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_12x(code + 0x40, (uintptr_t)data);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_4.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9403a80      ldr     x0, [x20, #0x70]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: f9003a88      str     x8, [x20, #0x70]
    // 10: b40000c0      cbz     x0, 0x28 <_JIT_ENTRY+0x28>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 54000080      b.eq    0x34 <_JIT_ENTRY+0x34>
    // 28: f9402295      ldr     x21, [x20, #0x40]
    // 2c: f900229f      str     xzr, [x20, #0x40]
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 34: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 3c: 910003fd      mov     x29, sp
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 44: d63f0100      blr     x8
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: f9402295      ldr     x21, [x20, #0x40]
    // 50: f900229f      str     xzr, [x20, #0x40]
    // 54: 14000000      b       0x54 <_JIT_ENTRY+0x54>
    // 0000000000000054:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[88] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x80, 0x3a, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x88, 0x3a, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x80, 0x00, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_12x(code + 0x40, (uintptr_t)data);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST_5(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_5.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9403e80      ldr     x0, [x20, #0x78]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: f9003e88      str     x8, [x20, #0x78]
    // 10: b40000c0      cbz     x0, 0x28 <_JIT_ENTRY+0x28>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 54000080      b.eq    0x34 <_JIT_ENTRY+0x34>
    // 28: f9402295      ldr     x21, [x20, #0x40]
    // 2c: f900229f      str     xzr, [x20, #0x40]
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 34: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 3c: 910003fd      mov     x29, sp
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 44: d63f0100      blr     x8
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: f9402295      ldr     x21, [x20, #0x40]
    // 50: f900229f      str     xzr, [x20, #0x40]
    // 54: 14000000      b       0x54 <_JIT_ENTRY+0x54>
    // 0000000000000054:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[88] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x80, 0x3e, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x88, 0x3e, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x80, 0x00, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_12x(code + 0x40, (uintptr_t)data);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST_6(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_6.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9404280      ldr     x0, [x20, #0x80]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: f9004288      str     x8, [x20, #0x80]
    // 10: b40000c0      cbz     x0, 0x28 <_JIT_ENTRY+0x28>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 54000080      b.eq    0x34 <_JIT_ENTRY+0x34>
    // 28: f9402295      ldr     x21, [x20, #0x40]
    // 2c: f900229f      str     xzr, [x20, #0x40]
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 34: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 3c: 910003fd      mov     x29, sp
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 44: d63f0100      blr     x8
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: f9402295      ldr     x21, [x20, #0x40]
    // 50: f900229f      str     xzr, [x20, #0x40]
    // 54: 14000000      b       0x54 <_JIT_ENTRY+0x54>
    // 0000000000000054:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[88] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x80, 0x42, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x88, 0x42, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x80, 0x00, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_12x(code + 0x40, (uintptr_t)data);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST_7(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_7.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9404680      ldr     x0, [x20, #0x88]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: f9004688      str     x8, [x20, #0x88]
    // 10: b40000c0      cbz     x0, 0x28 <_JIT_ENTRY+0x28>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 54000080      b.eq    0x34 <_JIT_ENTRY+0x34>
    // 28: f9402295      ldr     x21, [x20, #0x40]
    // 2c: f900229f      str     xzr, [x20, #0x40]
    // 30: 14000000      b       0x30 <_JIT_ENTRY+0x30>
    // 0000000000000030:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 34: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 3c: 910003fd      mov     x29, sp
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 44: d63f0100      blr     x8
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: f9402295      ldr     x21, [x20, #0x40]
    // 50: f900229f      str     xzr, [x20, #0x40]
    // 54: 14000000      b       0x54 <_JIT_ENTRY+0x54>
    // 0000000000000054:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[88] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x80, 0x46, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x88, 0x46, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x80, 0x00, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_12x(code + 0x40, (uintptr_t)data);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_GLOBAL.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // c: 910003fd      mov     x29, sp
    // 10: f9401108      ldr     x8, [x8, #0x20]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 18: f85f82b3      ldur    x19, [x21, #-0x8]
    // 1c: f9400e80      ldr     x0, [x20, #0x18]
    // 20: 8b292d08      add     x8, x8, w9, uxth #3
    // 24: aa1303e2      mov     x2, x19
    // 28: f9400d01      ldr     x1, [x8, #0x18]
    // 2c: f9002295      str     x21, [x20, #0x40]
    // 30: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  R_AARCH64_ADR_GOT_PAGE       PyDict_SetItem
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   PyDict_SetItem
    // 38: d63f0100      blr     x8
    // 3c: f9402295      ldr     x21, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: b9400268      ldr     w8, [x19]
    // 48: 37f80088      tbnz    w8, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 4c: 71000508      subs    w8, w8, #0x1
    // 50: b9000268      str     w8, [x19]
    // 54: 540000a0      b.eq    0x68 <_JIT_ENTRY+0x68>
    // 58: d10022b5      sub     x21, x21, #0x8
    // 5c: 34000140      cbz     w0, 0x84 <_JIT_ENTRY+0x84>
    // 60: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 64: 14000000      b       0x64 <_JIT_ENTRY+0x64>
    // 0000000000000064:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 6c: 2a0003f7      mov     w23, w0
    // 70: aa1303e0      mov     x0, x19
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 78: d63f0100      blr     x8
    // 7c: d10022b5      sub     x21, x21, #0x8
    // 80: 35ffff17      cbnz    w23, 0x60 <_JIT_ENTRY+0x60>
    // 84: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 88: 14000000      b       0x88 <_JIT_ENTRY+0x88>
    // 0000000000000088:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[136] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x11, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0x80, 0x0e, 0x40, 0xf9,
        0x08, 0x2d, 0x29, 0x8b, 0xe2, 0x03, 0x13, 0xaa,
        0x01, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0xb5, 0x22, 0x00, 0xd1, 0x40, 0x01, 0x00, 0x34,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0x2a,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xb5, 0x22, 0x00, 0xd1,
        0x17, 0xff, 0xff, 0x35, 0xfd, 0x7b, 0xc1, 0xa8,
    };
    // 0: OPARG
    // 8: &PyDict_SetItem+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyDict_SetItem);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x64, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x74, (uintptr_t)data + 0x10);
}

void
emit__STORE_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_NAME.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // c: 910003fd      mov     x29, sp
    // 10: f9401108      ldr     x8, [x8, #0x20]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 18: f9401680      ldr     x0, [x20, #0x28]
    // 1c: f85f82b3      ldur    x19, [x21, #-0x8]
    // 20: 8b292d08      add     x8, x8, w9, uxth #3
    // 24: f9400d03      ldr     x3, [x8, #0x18]
    // 28: b4000140      cbz     x0, 0x50 <_JIT_ENTRY+0x50>
    // 2c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       PyDict_Type
    // 30: f9400408      ldr     x8, [x0, #0x8]
    // 34: f9400129      ldr     x9, [x9]
    // 0000000000000034:  R_AARCH64_LD64_GOT_LO12_NC   PyDict_Type
    // 38: f9002295      str     x21, [x20, #0x40]
    // 3c: eb09011f      cmp     x8, x9
    // 40: 54000300      b.eq    0xa0 <_JIT_ENTRY+0xa0>
    // 44: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  R_AARCH64_ADR_GOT_PAGE       PyObject_SetItem
    // 48: f9400108      ldr     x8, [x8]
    // 0000000000000048:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_SetItem
    // 4c: 14000017      b       0xa8 <_JIT_ENTRY+0xa8>
    // 50: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  R_AARCH64_ADR_GOT_PAGE       PyExc_SystemError
    // 54: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  R_AARCH64_ADR_PREL_PG_HI21   .rodata.str1.1
    // 58: 91000042      add     x2, x2, #0x0
    // 0000000000000058:  R_AARCH64_ADD_ABS_LO12_NC    .rodata.str1.1
    // 5c: f9400108      ldr     x8, [x8]
    // 000000000000005c:  R_AARCH64_LD64_GOT_LO12_NC   PyExc_SystemError
    // 60: f9002295      str     x21, [x20, #0x40]
    // 64: aa1603e0      mov     x0, x22
    // 68: f9400101      ldr     x1, [x8]
    // 6c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  R_AARCH64_ADR_GOT_PAGE       _PyErr_Format
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   _PyErr_Format
    // 74: d63f0100      blr     x8
    // 78: f9402295      ldr     x21, [x20, #0x40]
    // 7c: f900229f      str     xzr, [x20, #0x40]
    // 80: b9400268      ldr     w8, [x19]
    // 84: 37f80088      tbnz    w8, #0x1f, 0x94 <_JIT_ENTRY+0x94>
    // 88: 71000508      subs    w8, w8, #0x1
    // 8c: b9000268      str     w8, [x19]
    // 90: 540003a0      b.eq    0x104 <_JIT_ENTRY+0x104>
    // 94: d10022b5      sub     x21, x21, #0x8
    // 98: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 9c: 14000000      b       0x9c <_JIT_ENTRY+0x9c>
    // 000000000000009c:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // a0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  R_AARCH64_ADR_GOT_PAGE       PyDict_SetItem
    // a4: f9400108      ldr     x8, [x8]
    // 00000000000000a4:  R_AARCH64_LD64_GOT_LO12_NC   PyDict_SetItem
    // a8: aa0303e1      mov     x1, x3
    // ac: aa1303e2      mov     x2, x19
    // b0: d63f0100      blr     x8
    // b4: f9402295      ldr     x21, [x20, #0x40]
    // b8: f900229f      str     xzr, [x20, #0x40]
    // bc: b9400268      ldr     w8, [x19]
    // c0: 37f80088      tbnz    w8, #0x1f, 0xd0 <_JIT_ENTRY+0xd0>
    // c4: 71000508      subs    w8, w8, #0x1
    // c8: b9000268      str     w8, [x19]
    // cc: 540000a0      b.eq    0xe0 <_JIT_ENTRY+0xe0>
    // d0: d10022b5      sub     x21, x21, #0x8
    // d4: 34000140      cbz     w0, 0xfc <_JIT_ENTRY+0xfc>
    // d8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // dc: 14000000      b       0xdc <_JIT_ENTRY+0xdc>
    // 00000000000000dc:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // e0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e0:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // e4: 2a0003f7      mov     w23, w0
    // e8: aa1303e0      mov     x0, x19
    // ec: f9400108      ldr     x8, [x8]
    // 00000000000000ec:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // f0: d63f0100      blr     x8
    // f4: d10022b5      sub     x21, x21, #0x8
    // f8: 35ffff17      cbnz    w23, 0xd8 <_JIT_ENTRY+0xd8>
    // fc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 100: 14000000      b       0x100 <_JIT_ENTRY+0x100>
    // 0000000000000100:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 104: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000104:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 108: aa1303e0      mov     x0, x19
    // 10c: f9400108      ldr     x8, [x8]
    // 000000000000010c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 110: d63f0100      blr     x8
    // 114: d10022b5      sub     x21, x21, #0x8
    // 118: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 11c: 14000000      b       0x11c <_JIT_ENTRY+0x11c>
    // 000000000000011c:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[288] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x11, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x80, 0x16, 0x40, 0xf9, 0xb3, 0x82, 0x5f, 0xf8,
        0x08, 0x2d, 0x29, 0x8b, 0x03, 0x0d, 0x40, 0xf9,
        0x40, 0x01, 0x00, 0xb4, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x04, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x00, 0x03, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x17, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0x01, 0x01, 0x40, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa0, 0x03, 0x00, 0x54, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x03, 0xaa, 0xe2, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0xb5, 0x22, 0x00, 0xd1, 0x40, 0x01, 0x00, 0x34,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0x2a,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xb5, 0x22, 0x00, 0xd1,
        0x17, 0xff, 0xff, 0x35, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: 'no locals found when storing %R\x00'
    // 20: OPARG
    // 28: &PyDict_Type+0x0
    // 30: &PyObject_SetItem+0x0
    // 38: &PyExc_SystemError+0x0
    // 40: &_PyErr_Format+0x0
    // 48: &PyDict_SetItem+0x0
    // 50: &_Py_Dealloc+0x0
    const unsigned char data_body[88] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
        0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f,
        0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, instruction->oparg);
    patch_64(data + 0x28, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x30, (uintptr_t)&PyObject_SetItem);
    patch_64(data + 0x38, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x40, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x48, (uintptr_t)&PyDict_SetItem);
    patch_64(data + 0x50, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x20);
    patch_aarch64_21rx(code + 0x2c, (uintptr_t)data + 0x28);
    patch_aarch64_12x(code + 0x34, (uintptr_t)data + 0x28);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data + 0x30);
    patch_aarch64_21rx(code + 0x50, (uintptr_t)data + 0x38);
    patch_aarch64_21r(code + 0x54, (uintptr_t)data);
    patch_aarch64_12(code + 0x58, (uintptr_t)data);
    patch_aarch64_12x(code + 0x5c, (uintptr_t)data + 0x38);
    patch_aarch64_33rx(code + 0x6c, (uintptr_t)data + 0x40);
    patch_aarch64_26r(code + 0x9c, state->instruction_starts[instruction->error_target]);
    patch_aarch64_33rx(code + 0xa0, (uintptr_t)data + 0x48);
    patch_aarch64_26r(code + 0xdc, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0xe0, (uintptr_t)data + 0x50);
    patch_aarch64_12x(code + 0xec, (uintptr_t)data + 0x50);
    patch_aarch64_26r(code + 0x100, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x104, (uintptr_t)data + 0x50);
    patch_aarch64_12x(code + 0x10c, (uintptr_t)data + 0x50);
    patch_aarch64_26r(code + 0x11c, state->instruction_starts[instruction->error_target]);
}

void
emit__STORE_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_SLICE.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: a97f06a0      ldp     x0, x1, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       _PyBuildSlice_ConsumeRefs
    // c: a97e4eb8      ldp     x24, x19, [x21, #-0x20]
    // 10: 910003fd      mov     x29, sp
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: f9400108      ldr     x8, [x8]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   _PyBuildSlice_ConsumeRefs
    // 1c: d63f0100      blr     x8
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: aa0003f7      mov     x23, x0
    // 28: f900229f      str     xzr, [x20, #0x40]
    // 2c: b4000320      cbz     x0, 0x90 <_JIT_ENTRY+0x90>
    // 30: d10042a8      sub     x8, x21, #0x10
    // 34: aa1303e0      mov     x0, x19
    // 38: aa1703e1      mov     x1, x23
    // 3c: f9002288      str     x8, [x20, #0x40]
    // 40: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  R_AARCH64_ADR_GOT_PAGE       PyObject_SetItem
    // 44: aa1803e2      mov     x2, x24
    // 48: f9400108      ldr     x8, [x8]
    // 0000000000000048:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_SetItem
    // 4c: d63f0100      blr     x8
    // 50: b94002e8      ldr     w8, [x23]
    // 54: 37f80148      tbnz    w8, #0x1f, 0x7c <_JIT_ENTRY+0x7c>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b90002e8      str     w8, [x23]
    // 60: 540000e1      b.ne    0x7c <_JIT_ENTRY+0x7c>
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 68: 2a0003f5      mov     w21, w0
    // 6c: aa1703e0      mov     x0, x23
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: 2a1503e0      mov     w0, w21
    // 7c: f9402288      ldr     x8, [x20, #0x40]
    // 80: 7100001f      cmp     w0, #0x0
    // 84: f900229f      str     xzr, [x20, #0x40]
    // 88: 1a9f17f7      cset    w23, eq
    // 8c: 91004115      add     x21, x8, #0x10
    // 90: b9400308      ldr     w8, [x24]
    // 94: 37f80108      tbnz    w8, #0x1f, 0xb4 <_JIT_ENTRY+0xb4>
    // 98: 71000508      subs    w8, w8, #0x1
    // 9c: b9000308      str     w8, [x24]
    // a0: 540000a1      b.ne    0xb4 <_JIT_ENTRY+0xb4>
    // a4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // a8: aa1803e0      mov     x0, x24
    // ac: f9400108      ldr     x8, [x8]
    // 00000000000000ac:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // b0: d63f0100      blr     x8
    // b4: b9400268      ldr     w8, [x19]
    // b8: 37f80088      tbnz    w8, #0x1f, 0xc8 <_JIT_ENTRY+0xc8>
    // bc: 71000508      subs    w8, w8, #0x1
    // c0: b9000268      str     w8, [x19]
    // c4: 540000a0      b.eq    0xd8 <_JIT_ENTRY+0xd8>
    // c8: d10082b5      sub     x21, x21, #0x20
    // cc: 36000137      tbz     w23, #0x0, 0xf0 <_JIT_ENTRY+0xf0>
    // d0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d4: 14000000      b       0xd4 <_JIT_ENTRY+0xd4>
    // 00000000000000d4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // d8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000d8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // dc: aa1303e0      mov     x0, x19
    // e0: f9400108      ldr     x8, [x8]
    // 00000000000000e0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // e4: d63f0100      blr     x8
    // e8: d10082b5      sub     x21, x21, #0x20
    // ec: 3707ff37      tbnz    w23, #0x0, 0xd0 <_JIT_ENTRY+0xd0>
    // f0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // f4: 14000000      b       0xf4 <_JIT_ENTRY+0xf4>
    // 00000000000000f4:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[248] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xa0, 0x06, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xb8, 0x4e, 0x7e, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0xf7, 0x03, 0x00, 0xaa,
        0x9f, 0x22, 0x00, 0xf9, 0x20, 0x03, 0x00, 0xb4,
        0xa8, 0x42, 0x00, 0xd1, 0xe0, 0x03, 0x13, 0xaa,
        0xe1, 0x03, 0x17, 0xaa, 0x88, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe2, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe8, 0x02, 0x40, 0xb9, 0x48, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xe1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x00, 0x2a, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x15, 0x2a, 0x88, 0x22, 0x40, 0xf9,
        0x1f, 0x00, 0x00, 0x71, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x17, 0x9f, 0x1a, 0x15, 0x41, 0x00, 0x91,
        0x08, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0xb5, 0x82, 0x00, 0xd1, 0x37, 0x01, 0x00, 0x36,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xb5, 0x82, 0x00, 0xd1, 0x37, 0xff, 0x07, 0x37,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyBuildSlice_ConsumeRefs+0x0
    // 8: &PyObject_SetItem+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyBuildSlice_ConsumeRefs);
    patch_64(data + 0x8, (uintptr_t)&PyObject_SetItem);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x48, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xa4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xac, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xd4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0xd8, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xe0, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xf4, state->instruction_starts[instruction->error_target]);
}

void
emit__STORE_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_SUBSCR.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: a97f4eb7      ldp     x23, x19, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  R_AARCH64_ADR_GOT_PAGE       PyObject_SetItem
    // c: f85e82b8      ldur    x24, [x21, #-0x18]
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: 910003fd      mov     x29, sp
    // 18: f9400108      ldr     x8, [x8]
    // 0000000000000018:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_SetItem
    // 1c: aa1703e0      mov     x0, x23
    // 20: aa1303e1      mov     x1, x19
    // 24: aa1803e2      mov     x2, x24
    // 28: d63f0100      blr     x8
    // 2c: f9402295      ldr     x21, [x20, #0x40]
    // 30: f900229f      str     xzr, [x20, #0x40]
    // 34: 2a0003f9      mov     w25, w0
    // 38: b9400308      ldr     w8, [x24]
    // 3c: 37f80108      tbnz    w8, #0x1f, 0x5c <_JIT_ENTRY+0x5c>
    // 40: 71000508      subs    w8, w8, #0x1
    // 44: b9000308      str     w8, [x24]
    // 48: 540000a1      b.ne    0x5c <_JIT_ENTRY+0x5c>
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 50: aa1803e0      mov     x0, x24
    // 54: f9400108      ldr     x8, [x8]
    // 0000000000000054:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 58: d63f0100      blr     x8
    // 5c: b94002e8      ldr     w8, [x23]
    // 60: 37f80108      tbnz    w8, #0x1f, 0x80 <_JIT_ENTRY+0x80>
    // 64: 71000508      subs    w8, w8, #0x1
    // 68: b90002e8      str     w8, [x23]
    // 6c: 540000a1      b.ne    0x80 <_JIT_ENTRY+0x80>
    // 70: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 74: aa1703e0      mov     x0, x23
    // 78: f9400108      ldr     x8, [x8]
    // 0000000000000078:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 7c: d63f0100      blr     x8
    // 80: b9400268      ldr     w8, [x19]
    // 84: 37f80088      tbnz    w8, #0x1f, 0x94 <_JIT_ENTRY+0x94>
    // 88: 71000508      subs    w8, w8, #0x1
    // 8c: b9000268      str     w8, [x19]
    // 90: 540000a0      b.eq    0xa4 <_JIT_ENTRY+0xa4>
    // 94: d10062b5      sub     x21, x21, #0x18
    // 98: 34000139      cbz     w25, 0xbc <_JIT_ENTRY+0xbc>
    // 9c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a0: 14000000      b       0xa0 <_JIT_ENTRY+0xa0>
    // 00000000000000a0:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // a4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // a8: aa1303e0      mov     x0, x19
    // ac: f9400108      ldr     x8, [x8]
    // 00000000000000ac:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // b0: d63f0100      blr     x8
    // b4: d10062b5      sub     x21, x21, #0x18
    // b8: 35ffff39      cbnz    w25, 0x9c <_JIT_ENTRY+0x9c>
    // bc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c0: 14000000      b       0xc0 <_JIT_ENTRY+0xc0>
    // 00000000000000c0:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[192] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb7, 0x4e, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xb8, 0x82, 0x5e, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x17, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0xe2, 0x03, 0x18, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf9, 0x03, 0x00, 0x2a,
        0x08, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0xb5, 0x62, 0x00, 0xd1,
        0x39, 0x01, 0x00, 0x34, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xb5, 0x62, 0x00, 0xd1,
        0x39, 0xff, 0xff, 0x35, 0xfd, 0x7b, 0xc1, 0xa8,
    };
    // 0: &PyObject_SetItem+0x0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_SetItem);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x54, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x70, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x78, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0xa0, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0xa4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xac, (uintptr_t)data + 0x8);
}

void
emit__STORE_SUBSCR_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_SUBSCR_DICT.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f02b3      ldur    x19, [x21, #-0x10]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyDict_Type
    // 8: f9400668      ldr     x8, [x19, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyDict_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 1c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 20: f85e82a2      ldur    x2, [x21, #-0x18]
    // 24: f85f82a1      ldur    x1, [x21, #-0x8]
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  R_AARCH64_ADR_GOT_PAGE       _PyDict_SetItem_Take2
    // 2c: f9002295      str     x21, [x20, #0x40]
    // 30: aa1303e0      mov     x0, x19
    // 34: 910003fd      mov     x29, sp
    // 38: f9400108      ldr     x8, [x8]
    // 0000000000000038:  R_AARCH64_LD64_GOT_LO12_NC   _PyDict_SetItem_Take2
    // 3c: d63f0100      blr     x8
    // 40: f9402288      ldr     x8, [x20, #0x40]
    // 44: d1006108      sub     x8, x8, #0x18
    // 48: f9002288      str     x8, [x20, #0x40]
    // 4c: b9400268      ldr     w8, [x19]
    // 50: 37f80088      tbnz    w8, #0x1f, 0x60 <_JIT_ENTRY+0x60>
    // 54: 71000508      subs    w8, w8, #0x1
    // 58: b9000268      str     w8, [x19]
    // 5c: 540000c0      b.eq    0x74 <_JIT_ENTRY+0x74>
    // 60: f9402295      ldr     x21, [x20, #0x40]
    // 64: f900229f      str     xzr, [x20, #0x40]
    // 68: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 6c: 34000180      cbz     w0, 0x9c <_JIT_ENTRY+0x9c>
    // 70: 14000000      b       0x70 <_JIT_ENTRY+0x70>
    // 0000000000000070:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 74: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 78: 2a0003f5      mov     w21, w0
    // 7c: aa1303e0      mov     x0, x19
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 84: d63f0100      blr     x8
    // 88: 2a1503e0      mov     w0, w21
    // 8c: f9402295      ldr     x21, [x20, #0x40]
    // 90: f900229f      str     xzr, [x20, #0x40]
    // 94: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 98: 35fffec0      cbnz    w0, 0x70 <_JIT_ENTRY+0x70>
    // 9c: 14000000      b       0x9c <_JIT_ENTRY+0x9c>
    // 000000000000009c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[160] = {
        0xb3, 0x02, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x68, 0x06, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0xa2, 0x82, 0x5e, 0xf8, 0xa1, 0x82, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x88, 0x22, 0x40, 0xf9, 0x08, 0x61, 0x00, 0xd1,
        0x88, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xc0, 0x00, 0x00, 0x54,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x80, 0x01, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x00, 0x2a, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x15, 0x2a, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0xc0, 0xfe, 0xff, 0x35, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyDict_Type+0x0
    // 8: &_PyDict_SetItem_Take2+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, (uintptr_t)&_PyDict_SetItem_Take2);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x70, state->instruction_starts[instruction->error_target]);
    patch_aarch64_21rx(code + 0x74, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x80, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x9c, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_SUBSCR_LIST_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_SUBSCR_LIST_INT.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503f9      mov     x25, x21
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyLong_Type
    // 8: f85e8f28      ldr     x8, [x25, #-0x18]!
    // c: f9400b38      ldr     x24, [x25, #0x10]
    // 10: f9400709      ldr     x9, [x24, #0x8]
    // 14: f940014a      ldr     x10, [x10]
    // 0000000000000014:  R_AARCH64_LD64_GOT_LO12_NC   PyLong_Type
    // 18: eb0a013f      cmp     x9, x10
    // 1c: 54000781      b.ne    0x10c <_JIT_ENTRY+0x10c>
    // 20: f9400733      ldr     x19, [x25, #0x8]
    // 24: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  R_AARCH64_ADR_GOT_PAGE       PyList_Type
    // 28: f9400669      ldr     x9, [x19, #0x8]
    // 2c: f940014a      ldr     x10, [x10]
    // 000000000000002c:  R_AARCH64_LD64_GOT_LO12_NC   PyList_Type
    // 30: eb0a013f      cmp     x9, x10
    // 34: 540006c1      b.ne    0x10c <_JIT_ENTRY+0x10c>
    // 38: f9400b09      ldr     x9, [x24, #0x10]
    // 3c: 927df929      and     x9, x9, #0xfffffffffffffffb
    // 40: f100253f      cmp     x9, #0x9
    // 44: 54000642      b.hs    0x10c <_JIT_ENTRY+0x10c>
    // 48: b9401b09      ldr     w9, [x24, #0x18]
    // 4c: f9400a6a      ldr     x10, [x19, #0x10]
    // 50: eb09015f      cmp     x10, x9
    // 54: 540005cd      b.le    0x10c <_JIT_ENTRY+0x10c>
    // 58: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 5c: f9400e6a      ldr     x10, [x19, #0x18]
    // 60: 910003fd      mov     x29, sp
    // 64: f8697957      ldr     x23, [x10, x9, lsl #3]
    // 68: f8297948      str     x8, [x10, x9, lsl #3]
    // 6c: b9400308      ldr     w8, [x24]
    // 70: 37f80208      tbnz    w8, #0x1f, 0xb0 <_JIT_ENTRY+0xb0>
    // 74: 71000508      subs    w8, w8, #0x1
    // 78: b9000308      str     w8, [x24]
    // 7c: 540001a1      b.ne    0xb0 <_JIT_ENTRY+0xb0>
    // 80: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 84: f9400129      ldr     x9, [x9]
    // 0000000000000084:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 88: f9544928      ldr     x8, [x9, #0x2890]
    // 8c: b40000a8      cbz     x8, 0xa0 <_JIT_ENTRY+0xa0>
    // 90: f9544d22      ldr     x2, [x9, #0x2898]
    // 94: aa1803e0      mov     x0, x24
    // 98: 52800021      mov     w1, #0x1                // =1
    // 9c: d63f0100      blr     x8
    // a0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  R_AARCH64_ADR_GOT_PAGE       _PyLong_ExactDealloc
    // a4: aa1803e0      mov     x0, x24
    // a8: f9400108      ldr     x8, [x8]
    // 00000000000000a8:  R_AARCH64_LD64_GOT_LO12_NC   _PyLong_ExactDealloc
    // ac: d63f0100      blr     x8
    // b0: f9002299      str     x25, [x20, #0x40]
    // b4: b9400268      ldr     w8, [x19]
    // b8: 37f80108      tbnz    w8, #0x1f, 0xd8 <_JIT_ENTRY+0xd8>
    // bc: 71000508      subs    w8, w8, #0x1
    // c0: b9000268      str     w8, [x19]
    // c4: 540000a1      b.ne    0xd8 <_JIT_ENTRY+0xd8>
    // c8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // cc: aa1303e0      mov     x0, x19
    // d0: f9400108      ldr     x8, [x8]
    // 00000000000000d0:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // d4: d63f0100      blr     x8
    // d8: b94002e8      ldr     w8, [x23]
    // dc: 37f80108      tbnz    w8, #0x1f, 0xfc <_JIT_ENTRY+0xfc>
    // e0: 71000508      subs    w8, w8, #0x1
    // e4: b90002e8      str     w8, [x23]
    // e8: 540000a1      b.ne    0xfc <_JIT_ENTRY+0xfc>
    // ec: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000ec:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // f0: aa1703e0      mov     x0, x23
    // f4: f9400108      ldr     x8, [x8]
    // 00000000000000f4:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // f8: d63f0100      blr     x8
    // fc: f9402295      ldr     x21, [x20, #0x40]
    // 100: f900229f      str     xzr, [x20, #0x40]
    // 104: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 108: 14000000      b       0x108 <_JIT_ENTRY+0x108>
    // 0000000000000108:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 10c: 14000000      b       0x10c <_JIT_ENTRY+0x10c>
    // 000000000000010c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    const unsigned char code_body[272] = {
        0xf9, 0x03, 0x15, 0xaa, 0x0a, 0x00, 0x00, 0x90,
        0x28, 0x8f, 0x5e, 0xf8, 0x38, 0x0b, 0x40, 0xf9,
        0x09, 0x07, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x81, 0x07, 0x00, 0x54,
        0x33, 0x07, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x69, 0x06, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0xc1, 0x06, 0x00, 0x54,
        0x09, 0x0b, 0x40, 0xf9, 0x29, 0xf9, 0x7d, 0x92,
        0x3f, 0x25, 0x00, 0xf1, 0x42, 0x06, 0x00, 0x54,
        0x09, 0x1b, 0x40, 0xb9, 0x6a, 0x0a, 0x40, 0xf9,
        0x5f, 0x01, 0x09, 0xeb, 0xcd, 0x05, 0x00, 0x54,
        0xfd, 0x7b, 0xbf, 0xa9, 0x6a, 0x0e, 0x40, 0xf9,
        0xfd, 0x03, 0x00, 0x91, 0x57, 0x79, 0x69, 0xf8,
        0x48, 0x79, 0x29, 0xf8, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x02, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x49, 0x54, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x4d, 0x54, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x99, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe8, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyLong_Type+0x0
    // 8: &PyList_Type+0x0
    // 10: &_PyRuntime+0x0
    // 18: &_PyLong_ExactDealloc+0x0
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&PyList_Type);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xa0, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xa8, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xc8, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xd0, (uintptr_t)data + 0x20);
    patch_aarch64_21rx(code + 0xec, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xf4, (uintptr_t)data + 0x20);
    patch_aarch64_26r(code + 0x108, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x10c, state->instruction_starts[instruction->jump_target]);
}

void
emit__SWAP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SWAP.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: f85f82a9      ldur    x9, [x21, #-0x8]
    // c: cb282ea8      sub     x8, x21, w8, uxth #3
    // 10: f940010a      ldr     x10, [x8]
    // 14: f9000109      str     x9, [x8]
    // 18: f81f82aa      stur    x10, [x21, #-0x8]
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[32] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa9, 0x82, 0x5f, 0xf8, 0xa8, 0x2e, 0x28, 0xcb,
        0x0a, 0x01, 0x40, 0xf9, 0x09, 0x01, 0x00, 0xf9,
        0xaa, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__TIER2_RESUME_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TIER2_RESUME_CHECK.o: file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400ec8      ldr     x8, [x22, #0x18]
    // 4: f2401d1f      tst     x8, #0xff
    // 8: 54000040      b.eq    0x10 <_JIT_ENTRY+0x10>
    // c: 14000000      b       0xc <_JIT_ENTRY+0xc>
    // 000000000000000c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 10: 14000000      b       0x10 <_JIT_ENTRY+0x10>
    // 0000000000000010:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[16] = {
        0xc8, 0x0e, 0x40, 0xf9, 0x1f, 0x1d, 0x40, 0xf2,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0xc, state->instruction_starts[instruction->jump_target]);
}

void
emit__TO_BOOL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       PyObject_IsTrue
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_IsTrue
    // 14: 910003fd      mov     x29, sp
    // 18: aa1303e0      mov     x0, x19
    // 1c: d63f0100      blr     x8
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: b9400268      ldr     w8, [x19]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 30: 71000508      subs    w8, w8, #0x1
    // 34: b9000268      str     w8, [x19]
    // 38: 54000160      b.eq    0x64 <_JIT_ENTRY+0x64>
    // 3c: 37f80220      tbnz    w0, #0x1f, 0x80 <_JIT_ENTRY+0x80>
    // 40: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 44: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // 48: 7100001f      cmp     w0, #0x0
    // 4c: f9400108      ldr     x8, [x8]
    // 000000000000004c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // 50: f9400129      ldr     x9, [x9]
    // 0000000000000050:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // 54: 9a880128      csel    x8, x9, x8, eq
    // 58: f81f82a8      stur    x8, [x21, #-0x8]
    // 5c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 60: 14000000      b       0x60 <_JIT_ENTRY+0x60>
    // 0000000000000060:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 68: 2a0003f7      mov     w23, w0
    // 6c: aa1303e0      mov     x0, x19
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: 2a1703e0      mov     w0, w23
    // 7c: 36fffe37      tbz     w23, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 80: d10022b5      sub     x21, x21, #0x8
    // 84: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 88: 14000000      b       0x88 <_JIT_ENTRY+0x88>
    // 0000000000000088:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 8c: 00 00 00 00
    const unsigned char code_body[144] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb3, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x60, 0x01, 0x00, 0x54, 0x20, 0x02, 0xf8, 0x37,
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x1f, 0x00, 0x00, 0x71, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x01, 0x88, 0x9a,
        0xa8, 0x82, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xf7, 0x03, 0x00, 0x2a, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x17, 0x2a, 0x37, 0xfe, 0xff, 0x36,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyObject_IsTrue+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: &_Py_FalseStruct+0x0
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_IsTrue);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x50, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x60, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0x88, state->instruction_starts[instruction->error_target]);
}

void
emit__TO_BOOL_BOOL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL_BOOL.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyBool_Type
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyBool_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <_JIT_ENTRY+0x1c>
    // 000000000000001c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyBool_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyBool_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__TO_BOOL_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL_INT.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyLong_Type
    // 8: f9400408      ldr     x8, [x0, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyLong_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 1c: f9400808      ldr     x8, [x0, #0x10]
    // 20: 92400508      and     x8, x8, #0x3
    // 24: f100051f      cmp     x8, #0x1
    // 28: 540000a1      b.ne    0x3c <_JIT_ENTRY+0x3c>
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // 34: f81f82a8      stur    x8, [x21, #-0x8]
    // 38: 14000000      b       0x38 <_JIT_ENTRY+0x38>
    // 0000000000000038:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 3c: b9400008      ldr     w8, [x0]
    // 40: 37f80088      tbnz    w8, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 44: 71000508      subs    w8, w8, #0x1
    // 48: b9000008      str     w8, [x0]
    // 4c: 540000a0      b.eq    0x60 <_JIT_ENTRY+0x60>
    // 50: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 54: f9400108      ldr     x8, [x8]
    // 0000000000000054:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // 58: f81f82a8      stur    x8, [x21, #-0x8]
    // 5c: 14000000      b       0x5c <_JIT_ENTRY+0x5c>
    // 000000000000005c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 60: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 68: 910003fd      mov     x29, sp
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 70: d63f0100      blr     x8
    // 74: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 78: f9400108      ldr     x8, [x8]
    // 0000000000000078:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // 7c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 80: f81f82a8      stur    x8, [x21, #-0x8]
    // 84: 14000000      b       0x84 <_JIT_ENTRY+0x84>
    // 0000000000000084:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[136] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x04, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x08, 0x40, 0xf9,
        0x08, 0x05, 0x40, 0x92, 0x1f, 0x05, 0x00, 0xf1,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xa8, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyLong_Type+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: &_Py_TrueStruct+0x0
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x50, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x5c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x6c, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x74, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x84, (uintptr_t)code + sizeof(code_body));
}

void
emit__TO_BOOL_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL_LIST.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyList_Type
    // 8: f9400408      ldr     x8, [x0, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyList_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 1c: b9400008      ldr     w8, [x0]
    // 20: f9400813      ldr     x19, [x0, #0x10]
    // 24: 37f80148      tbnz    w8, #0x1f, 0x4c <_JIT_ENTRY+0x4c>
    // 28: 71000508      subs    w8, w8, #0x1
    // 2c: b9000008      str     w8, [x0]
    // 30: 540000e1      b.ne    0x4c <_JIT_ENTRY+0x4c>
    // 34: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 3c: 910003fd      mov     x29, sp
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 44: d63f0100      blr     x8
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 50: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // 54: f100027f      cmp     x19, #0x0
    // 58: f9400108      ldr     x8, [x8]
    // 0000000000000058:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // 5c: f9400129      ldr     x9, [x9]
    // 000000000000005c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // 60: 9a880128      csel    x8, x9, x8, eq
    // 64: f81f82a8      stur    x8, [x21, #-0x8]
    // 68: 14000000      b       0x68 <_JIT_ENTRY+0x68>
    // 0000000000000068:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[104] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x04, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x40, 0xb9,
        0x13, 0x08, 0x40, 0xf9, 0x48, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0xe1, 0x00, 0x00, 0x54, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0x7f, 0x02, 0x00, 0xf1,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x01, 0x88, 0x9a, 0xa8, 0x82, 0x1f, 0xf8,
    };
    // 0: &PyList_Type+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: &_Py_TrueStruct+0x0
    // 18: &_Py_FalseStruct+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyList_Type);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x18, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x50, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x58, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x5c, (uintptr_t)data + 0x18);
}

void
emit__TO_BOOL_NONE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL_NONE.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _Py_NoneStruct
    // 4: f85f82a8      ldur    x8, [x21, #-0x8]
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _Py_NoneStruct
    // c: eb09011f      cmp     x8, x9
    // 10: 54000040      b.eq    0x18 <_JIT_ENTRY+0x18>
    // 14: 14000000      b       0x14 <_JIT_ENTRY+0x14>
    // 0000000000000014:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 18: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // 1c: f9400108      ldr     x8, [x8]
    // 000000000000001c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // 20: f81f82a8      stur    x8, [x21, #-0x8]
    // 24: 14000000      b       0x24 <_JIT_ENTRY+0x24>
    // 0000000000000024:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[40] = {
        0x09, 0x00, 0x00, 0x90, 0xa8, 0x82, 0x5f, 0xf8,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x14, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
}

void
emit__TO_BOOL_STR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL_STR.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyUnicode_Type
    // 8: f9400408      ldr     x8, [x0, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyUnicode_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <_JIT_ENTRY+0x1c>
    // 18: 14000000      b       0x18 <_JIT_ENTRY+0x18>
    // 0000000000000018:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 1c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  R_AARCH64_ADR_GOT_PAGE       _PyRuntime
    // 20: 52914609      mov     w9, #0x8a30             // =35376
    // 24: f9400108      ldr     x8, [x8]
    // 0000000000000024:  R_AARCH64_LD64_GOT_LO12_NC   _PyRuntime
    // 28: 8b090108      add     x8, x8, x9
    // 2c: eb08001f      cmp     x0, x8
    // 30: 54000140      b.eq    0x58 <_JIT_ENTRY+0x58>
    // 34: b9400008      ldr     w8, [x0]
    // 38: 37f80088      tbnz    w8, #0x1f, 0x48 <_JIT_ENTRY+0x48>
    // 3c: 71000508      subs    w8, w8, #0x1
    // 40: b9000008      str     w8, [x0]
    // 44: 54000120      b.eq    0x68 <_JIT_ENTRY+0x68>
    // 48: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 4c: f9400108      ldr     x8, [x8]
    // 000000000000004c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // 50: f81f82a8      stur    x8, [x21, #-0x8]
    // 54: 14000000      b       0x54 <_JIT_ENTRY+0x54>
    // 0000000000000054:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 58: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // 5c: f9400108      ldr     x8, [x8]
    // 000000000000005c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // 60: f81f82a8      stur    x8, [x21, #-0x8]
    // 64: 14000000      b       0x64 <_JIT_ENTRY+0x64>
    // 0000000000000064:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 68: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 6c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 70: 910003fd      mov     x29, sp
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 78: d63f0100      blr     x8
    // 7c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // 84: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 88: f81f82a8      stur    x8, [x21, #-0x8]
    // 8c: 14000000      b       0x8c <_JIT_ENTRY+0x8c>
    // 000000000000008c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[144] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x04, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x46, 0x91, 0x52, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x01, 0x09, 0x8b, 0x1f, 0x00, 0x08, 0xeb,
        0x40, 0x01, 0x00, 0x54, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x20, 0x01, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyUnicode_Type+0x0
    // 8: &_PyRuntime+0x0
    // 10: &_Py_TrueStruct+0x0
    // 18: &_Py_FalseStruct+0x0
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x18, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x48, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x6c, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x74, (uintptr_t)data + 0x20);
    patch_aarch64_33rx(code + 0x7c, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x8c, (uintptr_t)code + sizeof(code_body));
}

void
emit__UNARY_INVERT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNARY_INVERT.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       PyNumber_Invert
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   PyNumber_Invert
    // 14: 910003fd      mov     x29, sp
    // 18: aa1303e0      mov     x0, x19
    // 1c: d63f0100      blr     x8
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: b9400268      ldr     w8, [x19]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 30: 71000508      subs    w8, w8, #0x1
    // 34: b9000268      str     w8, [x19]
    // 38: 540000a0      b.eq    0x4c <_JIT_ENTRY+0x4c>
    // 3c: b4000160      cbz     x0, 0x68 <_JIT_ENTRY+0x68>
    // 40: f81f82a0      stur    x0, [x21, #-0x8]
    // 44: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 48: 14000000      b       0x48 <_JIT_ENTRY+0x48>
    // 0000000000000048:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 50: aa0003f7      mov     x23, x0
    // 54: aa1303e0      mov     x0, x19
    // 58: f9400108      ldr     x8, [x8]
    // 0000000000000058:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 5c: d63f0100      blr     x8
    // 60: aa1703e0      mov     x0, x23
    // 64: b5fffef7      cbnz    x23, 0x40 <_JIT_ENTRY+0x40>
    // 68: d10022b5      sub     x21, x21, #0x8
    // 6c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 70: 14000000      b       0x70 <_JIT_ENTRY+0x70>
    // 0000000000000070:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 74: 00 00 00 00
    const unsigned char code_body[120] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb3, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x60, 0x01, 0x00, 0xb4,
        0xa0, 0x82, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x17, 0xaa, 0xf7, 0xfe, 0xff, 0xb5,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyNumber_Invert+0x0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyNumber_Invert);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x48, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x58, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x70, state->instruction_starts[instruction->error_target]);
}

void
emit__UNARY_NEGATIVE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNARY_NEGATIVE.o:     file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       PyNumber_Negative
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   PyNumber_Negative
    // 14: 910003fd      mov     x29, sp
    // 18: aa1303e0      mov     x0, x19
    // 1c: d63f0100      blr     x8
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: b9400268      ldr     w8, [x19]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 30: 71000508      subs    w8, w8, #0x1
    // 34: b9000268      str     w8, [x19]
    // 38: 540000a0      b.eq    0x4c <_JIT_ENTRY+0x4c>
    // 3c: b4000160      cbz     x0, 0x68 <_JIT_ENTRY+0x68>
    // 40: f81f82a0      stur    x0, [x21, #-0x8]
    // 44: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 48: 14000000      b       0x48 <_JIT_ENTRY+0x48>
    // 0000000000000048:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 50: aa0003f7      mov     x23, x0
    // 54: aa1303e0      mov     x0, x19
    // 58: f9400108      ldr     x8, [x8]
    // 0000000000000058:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 5c: d63f0100      blr     x8
    // 60: aa1703e0      mov     x0, x23
    // 64: b5fffef7      cbnz    x23, 0x40 <_JIT_ENTRY+0x40>
    // 68: d10022b5      sub     x21, x21, #0x8
    // 6c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 70: 14000000      b       0x70 <_JIT_ENTRY+0x70>
    // 0000000000000070:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 74: 00 00 00 00
    const unsigned char code_body[120] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xb3, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xfd, 0x03, 0x00, 0x91,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x60, 0x01, 0x00, 0xb4,
        0xa0, 0x82, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x17, 0xaa, 0xf7, 0xfe, 0xff, 0xb5,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyNumber_Negative+0x0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyNumber_Negative);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x48, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x58, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x70, state->instruction_starts[instruction->error_target]);
}

void
emit__UNARY_NOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNARY_NOT.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _Py_FalseStruct
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _Py_TrueStruct
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  R_AARCH64_LD64_GOT_LO12_NC   _Py_FalseStruct
    // c: f85f82a9      ldur    x9, [x21, #-0x8]
    // 10: f940014a      ldr     x10, [x10]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _Py_TrueStruct
    // 14: eb08013f      cmp     x9, x8
    // 18: 9a880148      csel    x8, x10, x8, eq
    // 1c: f81f82a8      stur    x8, [x21, #-0x8]
    // 20: 14000000      b       0x20 <_JIT_ENTRY+0x20>
    // 0000000000000020:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[32] = {
        0x08, 0x00, 0x00, 0x90, 0x0a, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xa9, 0x82, 0x5f, 0xf8,
        0x4a, 0x01, 0x40, 0xf9, 0x3f, 0x01, 0x08, 0xeb,
        0x48, 0x01, 0x88, 0x9a, 0xa8, 0x82, 0x1f, 0xf8,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x8);
}

void
emit__UNPACK_EX(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNPACK_EX.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: aa1603e0      mov     x0, x22
    // c: 910003fd      mov     x29, sp
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f85f82b7      ldur    x23, [x21, #-0x8]
    // 18: f9002295      str     x21, [x20, #0x40]
    // 1c: 12001d13      and     w19, w8, #0xff
    // 20: 53083d18      ubfx    w24, w8, #8, #8
    // 24: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  R_AARCH64_ADR_GOT_PAGE       _PyEval_UnpackIterableStackRef
    // 28: 8b334ea9      add     x9, x21, w19, uxtw #3
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_UnpackIterableStackRef
    // 30: aa1703e1      mov     x1, x23
    // 34: 2a1303e2      mov     w2, w19
    // 38: 2a1803e3      mov     w3, w24
    // 3c: 8b384d24      add     x4, x9, w24, uxtw #3
    // 40: d63f0100      blr     x8
    // 44: f9402295      ldr     x21, [x20, #0x40]
    // 48: f900229f      str     xzr, [x20, #0x40]
    // 4c: b94002e8      ldr     w8, [x23]
    // 50: 37f80088      tbnz    w8, #0x1f, 0x60 <_JIT_ENTRY+0x60>
    // 54: 71000508      subs    w8, w8, #0x1
    // 58: b90002e8      str     w8, [x23]
    // 5c: 540000c0      b.eq    0x74 <_JIT_ENTRY+0x74>
    // 60: 34000160      cbz     w0, 0x8c <_JIT_ENTRY+0x8c>
    // 64: 0b180268      add     w8, w19, w24
    // 68: 8b284eb5      add     x21, x21, w8, uxtw #3
    // 6c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 70: 14000000      b       0x70 <_JIT_ENTRY+0x70>
    // 0000000000000070:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 74: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 78: 2a0003f9      mov     w25, w0
    // 7c: aa1703e0      mov     x0, x23
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 84: d63f0100      blr     x8
    // 88: 35fffef9      cbnz    w25, 0x64 <_JIT_ENTRY+0x64>
    // 8c: d10022b5      sub     x21, x21, #0x8
    // 90: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 94: 14000000      b       0x94 <_JIT_ENTRY+0x94>
    // 0000000000000094:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[152] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x16, 0xaa, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0xb7, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x13, 0x1d, 0x00, 0x12,
        0x18, 0x3d, 0x08, 0x53, 0x08, 0x00, 0x00, 0x90,
        0xa9, 0x4e, 0x33, 0x8b, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x17, 0xaa, 0xe2, 0x03, 0x13, 0x2a,
        0xe3, 0x03, 0x18, 0x2a, 0x24, 0x4d, 0x38, 0x8b,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xe8, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xc0, 0x00, 0x00, 0x54,
        0x60, 0x01, 0x00, 0x34, 0x68, 0x02, 0x18, 0x0b,
        0xb5, 0x4e, 0x28, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0xf9, 0x03, 0x00, 0x2a, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xf9, 0xfe, 0xff, 0x35, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &_PyEval_UnpackIterableStackRef+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_UnpackIterableStackRef);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x70, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x74, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x80, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x94, state->instruction_starts[instruction->error_target]);
}

void
emit__UNPACK_SEQUENCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNPACK_SEQUENCE.o:    file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 90000017      adrp    x23, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 8: aa1503e8      mov     x8, x21
    // c: aa1603e0      mov     x0, x22
    // 10: f94002f7      ldr     x23, [x23]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 14: f85f8d13      ldr     x19, [x8, #-0x8]!
    // 18: f9002295      str     x21, [x20, #0x40]
    // 1c: 12800003      mov     w3, #-0x1               // =-1
    // 20: 910003fd      mov     x29, sp
    // 24: 8b372d04      add     x4, x8, w23, uxth #3
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  R_AARCH64_ADR_GOT_PAGE       _PyEval_UnpackIterableStackRef
    // 2c: 12003ee2      and     w2, w23, #0xffff
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  R_AARCH64_LD64_GOT_LO12_NC   _PyEval_UnpackIterableStackRef
    // 34: aa1303e1      mov     x1, x19
    // 38: d63f0100      blr     x8
    // 3c: f9402295      ldr     x21, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: b9400268      ldr     w8, [x19]
    // 48: 37f80088      tbnz    w8, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 4c: 71000508      subs    w8, w8, #0x1
    // 50: b9000268      str     w8, [x19]
    // 54: 540000e0      b.eq    0x70 <_JIT_ENTRY+0x70>
    // 58: 34000180      cbz     w0, 0x88 <_JIT_ENTRY+0x88>
    // 5c: 92403ee8      and     x8, x23, #0xffff
    // 60: 8b080ea8      add     x8, x21, x8, lsl #3
    // 64: d1002115      sub     x21, x8, #0x8
    // 68: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 6c: 14000000      b       0x6c <_JIT_ENTRY+0x6c>
    // 000000000000006c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 70: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 74: 2a0003f8      mov     w24, w0
    // 78: aa1303e0      mov     x0, x19
    // 7c: f9400108      ldr     x8, [x8]
    // 000000000000007c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 80: d63f0100      blr     x8
    // 84: 35fffed8      cbnz    w24, 0x5c <_JIT_ENTRY+0x5c>
    // 88: d10022b5      sub     x21, x21, #0x8
    // 8c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 90: 14000000      b       0x90 <_JIT_ENTRY+0x90>
    // 0000000000000090:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    // 94: 00 00 00 00
    const unsigned char code_body[152] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x17, 0x00, 0x00, 0x90,
        0xe8, 0x03, 0x15, 0xaa, 0xe0, 0x03, 0x16, 0xaa,
        0xf7, 0x02, 0x40, 0xf9, 0x13, 0x8d, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x03, 0x00, 0x80, 0x12,
        0xfd, 0x03, 0x00, 0x91, 0x04, 0x2d, 0x37, 0x8b,
        0x08, 0x00, 0x00, 0x90, 0xe2, 0x3e, 0x00, 0x12,
        0x08, 0x01, 0x40, 0xf9, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0x80, 0x01, 0x00, 0x34, 0xe8, 0x3e, 0x40, 0x92,
        0xa8, 0x0e, 0x08, 0x8b, 0x15, 0x21, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xf8, 0x03, 0x00, 0x2a,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xd8, 0xfe, 0xff, 0x35,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_UnpackIterableStackRef+0x0
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_UnpackIterableStackRef);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x6c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_21rx(code + 0x70, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x7c, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x90, state->instruction_starts[instruction->error_target]);
}

void
emit__UNPACK_SEQUENCE_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNPACK_SEQUENCE_LIST.o:       file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyList_Type
    // 8: f85f8d00      ldr     x0, [x8, #-0x8]!
    // c: f9400409      ldr     x9, [x0, #0x8]
    // 10: f940014a      ldr     x10, [x10]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   PyList_Type
    // 14: eb0a013f      cmp     x9, x10
    // 18: 540003c1      b.ne    0x90 <_JIT_ENTRY+0x90>
    // 1c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 20: f9400813      ldr     x19, [x0, #0x10]
    // 24: f9400129      ldr     x9, [x9]
    // 0000000000000024:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 28: eb29227f      cmp     x19, w9, uxth
    // 2c: 54000321      b.ne    0x90 <_JIT_ENTRY+0x90>
    // 30: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 34: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 38: 910003fd      mov     x29, sp
    // 3c: f9400129      ldr     x9, [x9]
    // 000000000000003c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 40: 72003d3f      tst     w9, #0xffff
    // 44: 54000280      b.eq    0x94 <_JIT_ENTRY+0x94>
    // 48: f9400c09      ldr     x9, [x0, #0x18]
    // 4c: 8b130d2a      add     x10, x9, x19, lsl #3
    // 50: 91000669      add     x9, x19, #0x1
    // 54: d100214a      sub     x10, x10, #0x8
    // 58: 14000008      b       0x78 <_JIT_ENTRY+0x78>
    // 5c: d1000529      sub     x9, x9, #0x1
    // 60: 9100210c      add     x12, x8, #0x8
    // 64: f900010b      str     x11, [x8]
    // 68: f100053f      cmp     x9, #0x1
    // 6c: d100214a      sub     x10, x10, #0x8
    // 70: aa0c03e8      mov     x8, x12
    // 74: 54000109      b.ls    0x94 <_JIT_ENTRY+0x94>
    // 78: f940014b      ldr     x11, [x10]
    // 7c: b940016c      ldr     w12, [x11]
    // 80: 37fffeec      tbnz    w12, #0x1f, 0x5c <_JIT_ENTRY+0x5c>
    // 84: 1100058c      add     w12, w12, #0x1
    // 88: b900016c      str     w12, [x11]
    // 8c: 17fffff4      b       0x5c <_JIT_ENTRY+0x5c>
    // 90: 14000000      b       0x90 <_JIT_ENTRY+0x90>
    // 0000000000000090:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 94: b9400008      ldr     w8, [x0]
    // 98: 37f80088      tbnz    w8, #0x1f, 0xa8 <_JIT_ENTRY+0xa8>
    // 9c: 71000508      subs    w8, w8, #0x1
    // a0: b9000008      str     w8, [x0]
    // a4: 540000a0      b.eq    0xb8 <_JIT_ENTRY+0xb8>
    // a8: 8b130ea8      add     x8, x21, x19, lsl #3
    // ac: d1002115      sub     x21, x8, #0x8
    // b0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b4: 14000000      b       0xb4 <_JIT_ENTRY+0xb4>
    // 00000000000000b4:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // b8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // bc: f9400108      ldr     x8, [x8]
    // 00000000000000bc:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // c0: d63f0100      blr     x8
    // c4: 8b130ea8      add     x8, x21, x19, lsl #3
    // c8: d1002115      sub     x21, x8, #0x8
    // cc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d0: 14000000      b       0xd0 <_JIT_ENTRY+0xd0>
    // 00000000000000d0:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[208] = {
        0xe8, 0x03, 0x15, 0xaa, 0x0a, 0x00, 0x00, 0x90,
        0x00, 0x8d, 0x5f, 0xf8, 0x09, 0x04, 0x40, 0xf9,
        0x4a, 0x01, 0x40, 0xf9, 0x3f, 0x01, 0x0a, 0xeb,
        0xc1, 0x03, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x13, 0x08, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x7f, 0x22, 0x29, 0xeb, 0x21, 0x03, 0x00, 0x54,
        0xfd, 0x7b, 0xbf, 0xa9, 0x09, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x29, 0x01, 0x40, 0xf9,
        0x3f, 0x3d, 0x00, 0x72, 0x80, 0x02, 0x00, 0x54,
        0x09, 0x0c, 0x40, 0xf9, 0x2a, 0x0d, 0x13, 0x8b,
        0x69, 0x06, 0x00, 0x91, 0x4a, 0x21, 0x00, 0xd1,
        0x08, 0x00, 0x00, 0x14, 0x29, 0x05, 0x00, 0xd1,
        0x0c, 0x21, 0x00, 0x91, 0x0b, 0x01, 0x00, 0xf9,
        0x3f, 0x05, 0x00, 0xf1, 0x4a, 0x21, 0x00, 0xd1,
        0xe8, 0x03, 0x0c, 0xaa, 0x09, 0x01, 0x00, 0x54,
        0x4b, 0x01, 0x40, 0xf9, 0x6c, 0x01, 0x40, 0xb9,
        0xec, 0xfe, 0xff, 0x37, 0x8c, 0x05, 0x00, 0x11,
        0x6c, 0x01, 0x00, 0xb9, 0xf4, 0xff, 0xff, 0x17,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0xa8, 0x0e, 0x13, 0x8b, 0x15, 0x21, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xa8, 0x0e, 0x13, 0x8b,
        0x15, 0x21, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
    };
    // 0: &PyList_Type+0x0
    // 8: OPARG
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyList_Type);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x3c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x90, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0xb4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0xb8, (uintptr_t)data + 0x10);
}

void
emit__UNPACK_SEQUENCE_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNPACK_SEQUENCE_TUPLE.o:      file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyTuple_Type
    // 8: f85f8d00      ldr     x0, [x8, #-0x8]!
    // c: f9400409      ldr     x9, [x0, #0x8]
    // 10: f940014a      ldr     x10, [x10]
    // 0000000000000010:  R_AARCH64_LD64_GOT_LO12_NC   PyTuple_Type
    // 14: eb0a013f      cmp     x9, x10
    // 18: 540003a1      b.ne    0x8c <_JIT_ENTRY+0x8c>
    // 1c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 20: f9400813      ldr     x19, [x0, #0x10]
    // 24: f9400129      ldr     x9, [x9]
    // 0000000000000024:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 28: eb29227f      cmp     x19, w9, uxth
    // 2c: 54000301      b.ne    0x8c <_JIT_ENTRY+0x8c>
    // 30: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 34: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 38: 910003fd      mov     x29, sp
    // 3c: f9400129      ldr     x9, [x9]
    // 000000000000003c:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 40: 72003d3f      tst     w9, #0xffff
    // 44: 54000260      b.eq    0x90 <_JIT_ENTRY+0x90>
    // 48: 8b130c0a      add     x10, x0, x19, lsl #3
    // 4c: 91000669      add     x9, x19, #0x1
    // 50: 9100414a      add     x10, x10, #0x10
    // 54: 14000008      b       0x74 <_JIT_ENTRY+0x74>
    // 58: d1000529      sub     x9, x9, #0x1
    // 5c: 9100210c      add     x12, x8, #0x8
    // 60: f900010b      str     x11, [x8]
    // 64: f100053f      cmp     x9, #0x1
    // 68: d100214a      sub     x10, x10, #0x8
    // 6c: aa0c03e8      mov     x8, x12
    // 70: 54000109      b.ls    0x90 <_JIT_ENTRY+0x90>
    // 74: f940014b      ldr     x11, [x10]
    // 78: b940016c      ldr     w12, [x11]
    // 7c: 37fffeec      tbnz    w12, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 80: 1100058c      add     w12, w12, #0x1
    // 84: b900016c      str     w12, [x11]
    // 88: 17fffff4      b       0x58 <_JIT_ENTRY+0x58>
    // 8c: 14000000      b       0x8c <_JIT_ENTRY+0x8c>
    // 000000000000008c:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 90: b9400008      ldr     w8, [x0]
    // 94: 37f80088      tbnz    w8, #0x1f, 0xa4 <_JIT_ENTRY+0xa4>
    // 98: 71000508      subs    w8, w8, #0x1
    // 9c: b9000008      str     w8, [x0]
    // a0: 540000a0      b.eq    0xb4 <_JIT_ENTRY+0xb4>
    // a4: 8b130ea8      add     x8, x21, x19, lsl #3
    // a8: d1002115      sub     x21, x8, #0x8
    // ac: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b0: 14000000      b       0xb0 <_JIT_ENTRY+0xb0>
    // 00000000000000b0:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // b4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // b8: f9400108      ldr     x8, [x8]
    // 00000000000000b8:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // bc: d63f0100      blr     x8
    // c0: 8b130ea8      add     x8, x21, x19, lsl #3
    // c4: d1002115      sub     x21, x8, #0x8
    // c8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // cc: 14000000      b       0xcc <_JIT_ENTRY+0xcc>
    // 00000000000000cc:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[208] = {
        0xe8, 0x03, 0x15, 0xaa, 0x0a, 0x00, 0x00, 0x90,
        0x00, 0x8d, 0x5f, 0xf8, 0x09, 0x04, 0x40, 0xf9,
        0x4a, 0x01, 0x40, 0xf9, 0x3f, 0x01, 0x0a, 0xeb,
        0xa1, 0x03, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x13, 0x08, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x7f, 0x22, 0x29, 0xeb, 0x01, 0x03, 0x00, 0x54,
        0xfd, 0x7b, 0xbf, 0xa9, 0x09, 0x00, 0x00, 0x90,
        0xfd, 0x03, 0x00, 0x91, 0x29, 0x01, 0x40, 0xf9,
        0x3f, 0x3d, 0x00, 0x72, 0x60, 0x02, 0x00, 0x54,
        0x0a, 0x0c, 0x13, 0x8b, 0x69, 0x06, 0x00, 0x91,
        0x4a, 0x41, 0x00, 0x91, 0x08, 0x00, 0x00, 0x14,
        0x29, 0x05, 0x00, 0xd1, 0x0c, 0x21, 0x00, 0x91,
        0x0b, 0x01, 0x00, 0xf9, 0x3f, 0x05, 0x00, 0xf1,
        0x4a, 0x21, 0x00, 0xd1, 0xe8, 0x03, 0x0c, 0xaa,
        0x09, 0x01, 0x00, 0x54, 0x4b, 0x01, 0x40, 0xf9,
        0x6c, 0x01, 0x40, 0xb9, 0xec, 0xfe, 0xff, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x6c, 0x01, 0x00, 0xb9,
        0xf4, 0xff, 0xff, 0x17, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0xa8, 0x0e, 0x13, 0x8b,
        0x15, 0x21, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xa8, 0x0e, 0x13, 0x8b, 0x15, 0x21, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyTuple_Type+0x0
    // 8: OPARG
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x3c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x8c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0xb0, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0xb4, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0xcc, (uintptr_t)code + sizeof(code_body));
}

void
emit__UNPACK_SEQUENCE_TWO_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNPACK_SEQUENCE_TWO_TUPLE.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  R_AARCH64_ADR_GOT_PAGE       PyTuple_Type
    // 8: f9400408      ldr     x8, [x0, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  R_AARCH64_LD64_GOT_LO12_NC   PyTuple_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 540002e1      b.ne    0x70 <_JIT_ENTRY+0x70>
    // 18: f9400808      ldr     x8, [x0, #0x10]
    // 1c: f100091f      cmp     x8, #0x2
    // 20: 54000281      b.ne    0x70 <_JIT_ENTRY+0x70>
    // 24: f9400c13      ldr     x19, [x0, #0x18]
    // 28: b9400268      ldr     w8, [x19]
    // 2c: 37f80068      tbnz    w8, #0x1f, 0x38 <_JIT_ENTRY+0x38>
    // 30: 11000508      add     w8, w8, #0x1
    // 34: b9000268      str     w8, [x19]
    // 38: f9401017      ldr     x23, [x0, #0x20]
    // 3c: b94002e8      ldr     w8, [x23]
    // 40: 37f80068      tbnz    w8, #0x1f, 0x4c <_JIT_ENTRY+0x4c>
    // 44: 11000508      add     w8, w8, #0x1
    // 48: b90002e8      str     w8, [x23]
    // 4c: b9400008      ldr     w8, [x0]
    // 50: 37f80088      tbnz    w8, #0x1f, 0x60 <_JIT_ENTRY+0x60>
    // 54: 71000508      subs    w8, w8, #0x1
    // 58: b9000008      str     w8, [x0]
    // 5c: 540000c0      b.eq    0x74 <_JIT_ENTRY+0x74>
    // 60: aa1503e8      mov     x8, x21
    // 64: 910022b5      add     x21, x21, #0x8
    // 68: a93fcd17      stp     x23, x19, [x8, #-0x8]
    // 6c: 14000000      b       0x6c <_JIT_ENTRY+0x6c>
    // 000000000000006c:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // 70: 14000000      b       0x70 <_JIT_ENTRY+0x70>
    // 0000000000000070:  R_AARCH64_JUMP26     _JIT_JUMP_TARGET
    // 74: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 7c: 910003fd      mov     x29, sp
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 84: d63f0100      blr     x8
    // 88: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 8c: aa1503e8      mov     x8, x21
    // 90: 910022b5      add     x21, x21, #0x8
    // 94: a93fcd17      stp     x23, x19, [x8, #-0x8]
    // 98: 14000000      b       0x98 <_JIT_ENTRY+0x98>
    // 0000000000000098:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[152] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x04, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0xe1, 0x02, 0x00, 0x54,
        0x08, 0x08, 0x40, 0xf9, 0x1f, 0x09, 0x00, 0xf1,
        0x81, 0x02, 0x00, 0x54, 0x13, 0x0c, 0x40, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x68, 0x02, 0x00, 0xb9,
        0x17, 0x10, 0x40, 0xf9, 0xe8, 0x02, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0xe8, 0x02, 0x00, 0xb9, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xc0, 0x00, 0x00, 0x54,
        0xe8, 0x03, 0x15, 0xaa, 0xb5, 0x22, 0x00, 0x91,
        0x17, 0xcd, 0x3f, 0xa9, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xfd, 0x7b, 0xc1, 0xa8, 0xe8, 0x03, 0x15, 0xaa,
        0xb5, 0x22, 0x00, 0x91, 0x17, 0xcd, 0x3f, 0xa9,
    };
    // 0: &PyTuple_Type+0x0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x6c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x70, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_21rx(code + 0x78, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x80, (uintptr_t)data + 0x8);
}

void
emit__WITH_EXCEPT_START(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _WITH_EXCEPT_START.o:  file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: d10103ff      sub     sp, sp, #0x40
    // 4: f85f82b7      ldur    x23, [x21, #-0x8]
    // 8: a9037bfd      stp     x29, x30, [sp, #0x30]
    // c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  R_AARCH64_ADR_GOT_PAGE       PyException_GetTraceback
    // 10: a97de2b3      ldp     x19, x24, [x21, #-0x28]
    // 14: 9100c3fd      add     x29, sp, #0x30
    // 18: f94006f9      ldr     x25, [x23, #0x8]
    // 1c: f9400108      ldr     x8, [x8]
    // 000000000000001c:  R_AARCH64_LD64_GOT_LO12_NC   PyException_GetTraceback
    // 20: aa1703e0      mov     x0, x23
    // 24: d63f0100      blr     x8
    // 28: b40001c0      cbz     x0, 0x60 <_JIT_ENTRY+0x60>
    // 2c: f9002295      str     x21, [x20, #0x40]
    // 30: b9400008      ldr     w8, [x0]
    // 34: 37f80128      tbnz    w8, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 38: 71000508      subs    w8, w8, #0x1
    // 3c: b9000008      str     w8, [x0]
    // 40: 540000c1      b.ne    0x58 <_JIT_ENTRY+0x58>
    // 44: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  R_AARCH64_ADR_GOT_PAGE       _Py_Dealloc
    // 48: aa0003f5      mov     x21, x0
    // 4c: f9400108      ldr     x8, [x8]
    // 000000000000004c:  R_AARCH64_LD64_GOT_LO12_NC   _Py_Dealloc
    // 50: d63f0100      blr     x8
    // 54: aa1503e0      mov     x0, x21
    // 58: f9402295      ldr     x21, [x20, #0x40]
    // 5c: 14000003      b       0x68 <_JIT_ENTRY+0x68>
    // 60: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  R_AARCH64_ADR_GOT_PAGE       _Py_NoneStruct
    // 64: f9400000      ldr     x0, [x0]
    // 0000000000000064:  R_AARCH64_LD64_GOT_LO12_NC   _Py_NoneStruct
    // 68: 910023e8      add     x8, sp, #0x8
    // 6c: f100031f      cmp     x24, #0x0
    // 70: a900e3ff      stp     xzr, x24, [sp, #0x8]
    // 74: 91004108      add     x8, x8, #0x10
    // 78: da9f03e9      csetm   x9, ne
    // 7c: a901dff9      stp     x25, x23, [sp, #0x18]
    // 80: 8b090d01      add     x1, x8, x9, lsl #3
    // 84: b2410be8      mov     x8, #-0x7ffffffffffffffd // =-9223372036854775805
    // 88: f90017e0      str     x0, [sp, #0x28]
    // 8c: 9a880502      cinc    x2, x8, ne
    // 90: f9002295      str     x21, [x20, #0x40]
    // 94: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  R_AARCH64_ADR_GOT_PAGE       PyObject_Vectorcall
    // 98: f9400108      ldr     x8, [x8]
    // 0000000000000098:  R_AARCH64_LD64_GOT_LO12_NC   PyObject_Vectorcall
    // 9c: aa1303e0      mov     x0, x19
    // a0: aa1f03e3      mov     x3, xzr
    // a4: d63f0100      blr     x8
    // a8: f9402295      ldr     x21, [x20, #0x40]
    // ac: f900229f      str     xzr, [x20, #0x40]
    // b0: b40000a0      cbz     x0, 0xc4 <_JIT_ENTRY+0xc4>
    // b4: a9437bfd      ldp     x29, x30, [sp, #0x30]
    // b8: f80086a0      str     x0, [x21], #0x8
    // bc: 910103ff      add     sp, sp, #0x40
    // c0: 14000000      b       0xc0 <_JIT_ENTRY+0xc0>
    // 00000000000000c0:  R_AARCH64_JUMP26     _JIT_CONTINUE
    // c4: a9437bfd      ldp     x29, x30, [sp, #0x30]
    // c8: 910103ff      add     sp, sp, #0x40
    // cc: 14000000      b       0xcc <_JIT_ENTRY+0xcc>
    // 00000000000000cc:  R_AARCH64_JUMP26     _JIT_ERROR_TARGET
    const unsigned char code_body[208] = {
        0xff, 0x03, 0x01, 0xd1, 0xb7, 0x82, 0x5f, 0xf8,
        0xfd, 0x7b, 0x03, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0xb3, 0xe2, 0x7d, 0xa9, 0xfd, 0xc3, 0x00, 0x91,
        0xf9, 0x06, 0x40, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0xc0, 0x01, 0x00, 0xb4, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x40, 0xb9, 0x28, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0xc1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x00, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x15, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x03, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xe8, 0x23, 0x00, 0x91, 0x1f, 0x03, 0x00, 0xf1,
        0xff, 0xe3, 0x00, 0xa9, 0x08, 0x41, 0x00, 0x91,
        0xe9, 0x03, 0x9f, 0xda, 0xf9, 0xdf, 0x01, 0xa9,
        0x01, 0x0d, 0x09, 0x8b, 0xe8, 0x0b, 0x41, 0xb2,
        0xe0, 0x17, 0x00, 0xf9, 0x02, 0x05, 0x88, 0x9a,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0xe3, 0x03, 0x1f, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xa0, 0x00, 0x00, 0xb4, 0xfd, 0x7b, 0x43, 0xa9,
        0xa0, 0x86, 0x00, 0xf8, 0xff, 0x03, 0x01, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0x43, 0xa9,
        0xff, 0x03, 0x01, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyException_GetTraceback+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: &_Py_NoneStruct+0x0
    // 18: &PyObject_Vectorcall+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyException_GetTraceback);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x18, (uintptr_t)&PyObject_Vectorcall);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x60, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x94, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0xc0, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xcc, state->instruction_starts[instruction->error_target]);
}

void
emit__YIELD_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _YIELD_VALUE.o:        file format elf64-littleaarch64
    //
    // Disassembly of section .text:
    //
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  R_AARCH64_ADR_GOT_PAGE       _JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  R_AARCH64_LD64_GOT_LO12_NC   _JIT_OPARG
    // 8: f9401e89      ldr     x9, [x20, #0x38]
    // c: f85f8eaa      ldr     x10, [x21, #-0x8]!
    // 10: 51000908      sub     w8, w8, #0x2
    // 14: 91000929      add     x9, x9, #0x2
    // 18: 381fb288      sturb   w8, [x20, #-0x5]
    // 1c: f85e8288      ldur    x8, [x20, #-0x18]
    // 20: a903d689      stp     x9, x21, [x20, #0x38]
    // 24: b9402ec9      ldr     w9, [x22, #0x2c]
    // 28: f9003ec8      str     x8, [x22, #0x78]
    // 2c: f9400688      ldr     x8, [x20, #0x8]
    // 30: f81e829f      stur    xzr, [x20, #-0x18]
    // 34: 11000529      add     w9, w9, #0x1
    // 38: f9402115      ldr     x21, [x8, #0x40]
    // 3c: f900069f      str     xzr, [x20, #0x8]
    // 40: aa0803f4      mov     x20, x8
    // 44: b9002ec9      str     w9, [x22, #0x2c]
    // 48: f90026c8      str     x8, [x22, #0x48]
    // 4c: f900211f      str     xzr, [x8, #0x40]
    // 50: f80086aa      str     x10, [x21], #0x8
    // 54: 14000000      b       0x54 <_JIT_ENTRY+0x54>
    // 0000000000000054:  R_AARCH64_JUMP26     _JIT_CONTINUE
    const unsigned char code_body[88] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x89, 0x1e, 0x40, 0xf9, 0xaa, 0x8e, 0x5f, 0xf8,
        0x08, 0x09, 0x00, 0x51, 0x29, 0x09, 0x00, 0x91,
        0x88, 0xb2, 0x1f, 0x38, 0x88, 0x82, 0x5e, 0xf8,
        0x89, 0xd6, 0x03, 0xa9, 0xc9, 0x2e, 0x40, 0xb9,
        0xc8, 0x3e, 0x00, 0xf9, 0x88, 0x06, 0x40, 0xf9,
        0x9f, 0x82, 0x1e, 0xf8, 0x29, 0x05, 0x00, 0x11,
        0x15, 0x21, 0x40, 0xf9, 0x9f, 0x06, 0x00, 0xf9,
        0xf4, 0x03, 0x08, 0xaa, 0xc9, 0x2e, 0x00, 0xb9,
        0xc8, 0x26, 0x00, 0xf9, 0x1f, 0x21, 0x00, 0xf9,
        0xaa, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
}

static_assert(SYMBOL_MASK_WORDS >= 1, "SYMBOL_MASK_WORDS too small");

typedef struct {
    void (*emit)(
        unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
        const _PyUOpInstruction *instruction, jit_state *state);
    size_t code_size;
    size_t data_size;
    symbol_mask trampoline_mask;
} StencilGroup;

static const StencilGroup shim = {emit_shim, 104, 0, {0}};

static const StencilGroup stencil_groups[MAX_UOP_ID + 1] = {
    [_BINARY_OP] = {emit__BINARY_OP, 176, 24, {0}},
    [_BINARY_OP_ADD_FLOAT] = {emit__BINARY_OP_ADD_FLOAT, 72, 8, {0}},
    [_BINARY_OP_ADD_INT] = {emit__BINARY_OP_ADD_INT, 216, 24, {0}},
    [_BINARY_OP_ADD_UNICODE] = {emit__BINARY_OP_ADD_UNICODE, 216, 24, {0}},
    [_BINARY_OP_EXTEND] = {emit__BINARY_OP_EXTEND, 152, 16, {0}},
    [_BINARY_OP_INPLACE_ADD_UNICODE] = {emit__BINARY_OP_INPLACE_ADD_UNICODE, 256, 32, {0}},
    [_BINARY_OP_MULTIPLY_FLOAT] = {emit__BINARY_OP_MULTIPLY_FLOAT, 72, 8, {0}},
    [_BINARY_OP_MULTIPLY_INT] = {emit__BINARY_OP_MULTIPLY_INT, 216, 24, {0}},
    [_BINARY_OP_SUBSCR_CHECK_FUNC] = {emit__BINARY_OP_SUBSCR_CHECK_FUNC, 104, 0, {0}},
    [_BINARY_OP_SUBSCR_DICT] = {emit__BINARY_OP_SUBSCR_DICT, 256, 32, {0}},
    [_BINARY_OP_SUBSCR_INIT_CALL] = {emit__BINARY_OP_SUBSCR_INIT_CALL, 152, 0, {0}},
    [_BINARY_OP_SUBSCR_LIST_INT] = {emit__BINARY_OP_SUBSCR_LIST_INT, 248, 40, {0}},
    [_BINARY_OP_SUBSCR_STR_INT] = {emit__BINARY_OP_SUBSCR_STR_INT, 392, 40, {0}},
    [_BINARY_OP_SUBSCR_TUPLE_INT] = {emit__BINARY_OP_SUBSCR_TUPLE_INT, 248, 40, {0}},
    [_BINARY_OP_SUBTRACT_FLOAT] = {emit__BINARY_OP_SUBTRACT_FLOAT, 72, 8, {0}},
    [_BINARY_OP_SUBTRACT_INT] = {emit__BINARY_OP_SUBTRACT_INT, 216, 24, {0}},
    [_BINARY_SLICE] = {emit__BINARY_SLICE, 232, 24, {0}},
    [_BUILD_LIST] = {emit__BUILD_LIST, 88, 16, {0}},
    [_BUILD_MAP] = {emit__BUILD_MAP, 216, 24, {0}},
    [_BUILD_SET] = {emit__BUILD_SET, 432, 32, {0}},
    [_BUILD_SLICE] = {emit__BUILD_SLICE, 192, 24, {0}},
    [_BUILD_STRING] = {emit__BUILD_STRING, 184, 32, {0}},
    [_BUILD_TUPLE] = {emit__BUILD_TUPLE, 88, 16, {0}},
    [_CALL_BUILTIN_CLASS] = {emit__CALL_BUILTIN_CLASS, 320, 16, {0}},
    [_CALL_BUILTIN_FAST] = {emit__CALL_BUILTIN_FAST, 336, 24, {0}},
    [_CALL_BUILTIN_FAST_WITH_KEYWORDS] = {emit__CALL_BUILTIN_FAST_WITH_KEYWORDS, 344, 24, {0}},
    [_CALL_BUILTIN_O] = {emit__CALL_BUILTIN_O, 288, 24, {0}},
    [_CALL_INTRINSIC_1] = {emit__CALL_INTRINSIC_1, 144, 24, {0}},
    [_CALL_INTRINSIC_2] = {emit__CALL_INTRINSIC_2, 184, 24, {0}},
    [_CALL_ISINSTANCE] = {emit__CALL_ISINSTANCE, 360, 40, {0}},
    [_CALL_KW_NON_PY] = {emit__CALL_KW_NON_PY, 392, 24, {0}},
    [_CALL_LEN] = {emit__CALL_LEN, 296, 32, {0}},
    [_CALL_LIST_APPEND] = {emit__CALL_LIST_APPEND, 272, 16, {0}},
    [_CALL_METHOD_DESCRIPTOR_FAST] = {emit__CALL_METHOD_DESCRIPTOR_FAST, 368, 24, {0}},
    [_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = {emit__CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS, 376, 24, {0}},
    [_CALL_METHOD_DESCRIPTOR_NOARGS] = {emit__CALL_METHOD_DESCRIPTOR_NOARGS, 304, 24, {0}},
    [_CALL_METHOD_DESCRIPTOR_O] = {emit__CALL_METHOD_DESCRIPTOR_O, 400, 24, {0}},
    [_CALL_NON_PY_GENERAL] = {emit__CALL_NON_PY_GENERAL, 304, 24, {0}},
    [_CALL_STR_1] = {emit__CALL_STR_1, 160, 24, {0}},
    [_CALL_TUPLE_1] = {emit__CALL_TUPLE_1, 160, 24, {0}},
    [_CALL_TYPE_1] = {emit__CALL_TYPE_1, 136, 16, {0}},
    [_CHECK_AND_ALLOCATE_OBJECT] = {emit__CHECK_AND_ALLOCATE_OBJECT, 264, 40, {0}},
    [_CHECK_ATTR_CLASS] = {emit__CHECK_ATTR_CLASS, 48, 8, {0}},
    [_CHECK_ATTR_METHOD_LAZY_DICT] = {emit__CHECK_ATTR_METHOD_LAZY_DICT, 32, 8, {0}},
    [_CHECK_ATTR_MODULE_PUSH_KEYS] = {emit__CHECK_ATTR_MODULE_PUSH_KEYS, 72, 16, {0}},
    [_CHECK_ATTR_WITH_HINT] = {emit__CHECK_ATTR_WITH_HINT, 24, 0, {0}},
    [_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = {emit__CHECK_CALL_BOUND_METHOD_EXACT_ARGS, 64, 16, {0}},
    [_CHECK_EG_MATCH] = {emit__CHECK_EG_MATCH, 376, 40, {0}},
    [_CHECK_EXC_MATCH] = {emit__CHECK_EXC_MATCH, 224, 40, {0}},
    [_CHECK_FUNCTION] = {emit__CHECK_FUNCTION, 32, 8, {0}},
    [_CHECK_FUNCTION_EXACT_ARGS] = {emit__CHECK_FUNCTION_EXACT_ARGS, 64, 8, {0}},
    [_CHECK_FUNCTION_VERSION] = {emit__CHECK_FUNCTION_VERSION, 72, 24, {0}},
    [_CHECK_FUNCTION_VERSION_INLINE] = {emit__CHECK_FUNCTION_VERSION_INLINE, 40, 16, {0}},
    [_CHECK_FUNCTION_VERSION_KW] = {emit__CHECK_FUNCTION_VERSION_KW, 72, 24, {0}},
    [_CHECK_IS_NOT_PY_CALLABLE] = {emit__CHECK_IS_NOT_PY_CALLABLE, 64, 24, {0}},
    [_CHECK_IS_NOT_PY_CALLABLE_KW] = {emit__CHECK_IS_NOT_PY_CALLABLE_KW, 64, 24, {0}},
    [_CHECK_MANAGED_OBJECT_HAS_VALUES] = {emit__CHECK_MANAGED_OBJECT_HAS_VALUES, 32, 0, {0}},
    [_CHECK_METHOD_VERSION] = {emit__CHECK_METHOD_VERSION, 104, 32, {0}},
    [_CHECK_METHOD_VERSION_KW] = {emit__CHECK_METHOD_VERSION_KW, 112, 32, {0}},
    [_CHECK_PEP_523] = {emit__CHECK_PEP_523, 16, 0, {0}},
    [_CHECK_PERIODIC] = {emit__CHECK_PERIODIC, 64, 8, {0}},
    [_CHECK_PERIODIC_IF_NOT_YIELD_FROM] = {emit__CHECK_PERIODIC_IF_NOT_YIELD_FROM, 72, 16, {0}},
    [_CHECK_STACK_SPACE] = {emit__CHECK_STACK_SPACE, 72, 8, {0}},
    [_CHECK_STACK_SPACE_OPERAND] = {emit__CHECK_STACK_SPACE_OPERAND, 56, 8, {0}},
    [_CHECK_VALIDITY] = {emit__CHECK_VALIDITY, 24, 8, {0}},
    [_CHECK_VALIDITY_AND_SET_IP] = {emit__CHECK_VALIDITY_AND_SET_IP, 32, 16, {0}},
    [_COMPARE_OP] = {emit__COMPARE_OP, 312, 48, {0}},
    [_COMPARE_OP_FLOAT] = {emit__COMPARE_OP_FLOAT, 232, 40, {0}},
    [_COMPARE_OP_INT] = {emit__COMPARE_OP_INT, 280, 40, {0}},
    [_COMPARE_OP_STR] = {emit__COMPARE_OP_STR, 232, 48, {0}},
    [_CONTAINS_OP] = {emit__CONTAINS_OP, 192, 40, {0}},
    [_CONTAINS_OP_DICT] = {emit__CONTAINS_OP_DICT, 224, 48, {0}},
    [_CONTAINS_OP_SET] = {emit__CONTAINS_OP_SET, 232, 56, {0}},
    [_CONVERT_VALUE] = {emit__CONVERT_VALUE, 152, 24, {0}},
    [_COPY] = {emit__COPY, 40, 8, {0}},
    [_COPY_FREE_VARS] = {emit__COPY_FREE_VARS, 96, 8, {0}},
    [_CREATE_INIT_FRAME] = {emit__CREATE_INIT_FRAME, 264, 40, {0}},
    [_DELETE_ATTR] = {emit__DELETE_ATTR, 136, 24, {0}},
    [_DELETE_DEREF] = {emit__DELETE_DEREF, 152, 24, {0}},
    [_DELETE_FAST] = {emit__DELETE_FAST, 184, 120, {0}},
    [_DELETE_GLOBAL] = {emit__DELETE_GLOBAL, 152, 64, {0}},
    [_DELETE_NAME] = {emit__DELETE_NAME, 192, 104, {0}},
    [_DELETE_SUBSCR] = {emit__DELETE_SUBSCR, 152, 16, {0}},
    [_DEOPT] = {emit__DEOPT, 40, 16, {0}},
    [_DICT_MERGE] = {emit__DICT_MERGE, 240, 32, {0}},
    [_DICT_UPDATE] = {emit__DICT_UPDATE, 288, 96, {0}},
    [_END_FOR] = {emit__END_FOR, 72, 8, {0}},
    [_END_SEND] = {emit__END_SEND, 72, 8, {0}},
    [_ERROR_POP_N] = {emit__ERROR_POP_N, 48, 16, {0}},
    [_EXIT_INIT_CHECK] = {emit__EXIT_INIT_CHECK, 96, 72, {0}},
    [_EXIT_TRACE] = {emit__EXIT_TRACE, 472, 32, {0}},
    [_EXPAND_METHOD] = {emit__EXPAND_METHOD, 152, 16, {0}},
    [_EXPAND_METHOD_KW] = {emit__EXPAND_METHOD_KW, 152, 16, {0}},
    [_FATAL_ERROR] = {emit__FATAL_ERROR, 40, 48, {0}},
    [_FORMAT_SIMPLE] = {emit__FORMAT_SIMPLE, 168, 24, {0}},
    [_FORMAT_WITH_SPEC] = {emit__FORMAT_WITH_SPEC, 160, 16, {0}},
    [_FOR_ITER_GEN_FRAME] = {emit__FOR_ITER_GEN_FRAME, 112, 24, {0}},
    [_FOR_ITER_TIER_TWO] = {emit__FOR_ITER_TIER_TWO, 184, 32, {0}},
    [_GET_AITER] = {emit__GET_AITER, 368, 184, {0}},
    [_GET_ANEXT] = {emit__GET_ANEXT, 64, 8, {0}},
    [_GET_AWAITABLE] = {emit__GET_AWAITABLE, 128, 24, {0}},
    [_GET_ITER] = {emit__GET_ITER, 120, 16, {0}},
    [_GET_LEN] = {emit__GET_LEN, 80, 16, {0}},
    [_GET_YIELD_FROM_ITER] = {emit__GET_YIELD_FROM_ITER, 240, 120, {0}},
    [_GUARD_BINARY_OP_EXTEND] = {emit__GUARD_BINARY_OP_EXTEND, 64, 8, {0}},
    [_GUARD_BOTH_FLOAT] = {emit__GUARD_BOTH_FLOAT, 48, 8, {0}},
    [_GUARD_BOTH_INT] = {emit__GUARD_BOTH_INT, 48, 8, {0}},
    [_GUARD_BOTH_UNICODE] = {emit__GUARD_BOTH_UNICODE, 48, 8, {0}},
    [_GUARD_BUILTINS_VERSION_PUSH_KEYS] = {emit__GUARD_BUILTINS_VERSION_PUSH_KEYS, 64, 16, {0}},
    [_GUARD_DORV_NO_DICT] = {emit__GUARD_DORV_NO_DICT, 40, 0, {0}},
    [_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = {emit__GUARD_DORV_VALUES_INST_ATTR_FROM_DICT, 32, 0, {0}},
    [_GUARD_GLOBALS_VERSION] = {emit__GUARD_GLOBALS_VERSION, 56, 16, {0}},
    [_GUARD_GLOBALS_VERSION_PUSH_KEYS] = {emit__GUARD_GLOBALS_VERSION_PUSH_KEYS, 64, 16, {0}},
    [_GUARD_IS_FALSE_POP] = {emit__GUARD_IS_FALSE_POP, 24, 8, {0}},
    [_GUARD_IS_NONE_POP] = {emit__GUARD_IS_NONE_POP, 96, 16, {0}},
    [_GUARD_IS_NOT_NONE_POP] = {emit__GUARD_IS_NOT_NONE_POP, 112, 16, {0}},
    [_GUARD_IS_TRUE_POP] = {emit__GUARD_IS_TRUE_POP, 24, 8, {0}},
    [_GUARD_KEYS_VERSION] = {emit__GUARD_KEYS_VERSION, 40, 8, {0}},
    [_GUARD_NOS_FLOAT] = {emit__GUARD_NOS_FLOAT, 32, 8, {0}},
    [_GUARD_NOS_INT] = {emit__GUARD_NOS_INT, 32, 8, {0}},
    [_GUARD_NOT_EXHAUSTED_LIST] = {emit__GUARD_NOT_EXHAUSTED_LIST, 48, 0, {0}},
    [_GUARD_NOT_EXHAUSTED_RANGE] = {emit__GUARD_NOT_EXHAUSTED_RANGE, 24, 0, {0}},
    [_GUARD_NOT_EXHAUSTED_TUPLE] = {emit__GUARD_NOT_EXHAUSTED_TUPLE, 40, 0, {0}},
    [_GUARD_TOS_FLOAT] = {emit__GUARD_TOS_FLOAT, 32, 8, {0}},
    [_GUARD_TOS_INT] = {emit__GUARD_TOS_INT, 32, 8, {0}},
    [_GUARD_TYPE_VERSION] = {emit__GUARD_TYPE_VERSION, 40, 8, {0}},
    [_GUARD_TYPE_VERSION_AND_LOCK] = {emit__GUARD_TYPE_VERSION_AND_LOCK, 40, 8, {0}},
    [_IMPORT_FROM] = {emit__IMPORT_FROM, 88, 16, {0}},
    [_IMPORT_NAME] = {emit__IMPORT_NAME, 192, 24, {0}},
    [_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = {emit__INIT_CALL_BOUND_METHOD_EXACT_ARGS, 152, 16, {0}},
    [_INIT_CALL_PY_EXACT_ARGS] = {emit__INIT_CALL_PY_EXACT_ARGS, 352, 8, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_0] = {emit__INIT_CALL_PY_EXACT_ARGS_0, 152, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_1] = {emit__INIT_CALL_PY_EXACT_ARGS_1, 160, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_2] = {emit__INIT_CALL_PY_EXACT_ARGS_2, 176, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_3] = {emit__INIT_CALL_PY_EXACT_ARGS_3, 184, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_4] = {emit__INIT_CALL_PY_EXACT_ARGS_4, 192, 0, {0}},
    [_IS_NONE] = {emit__IS_NONE, 112, 32, {0}},
    [_IS_OP] = {emit__IS_OP, 144, 32, {0}},
    [_ITER_CHECK_LIST] = {emit__ITER_CHECK_LIST, 32, 8, {0}},
    [_ITER_CHECK_RANGE] = {emit__ITER_CHECK_RANGE, 32, 8, {0}},
    [_ITER_CHECK_TUPLE] = {emit__ITER_CHECK_TUPLE, 32, 8, {0}},
    [_ITER_NEXT_LIST] = {emit__ITER_NEXT_LIST, 48, 0, {0}},
    [_ITER_NEXT_RANGE] = {emit__ITER_NEXT_RANGE, 72, 8, {0}},
    [_ITER_NEXT_TUPLE] = {emit__ITER_NEXT_TUPLE, 48, 0, {0}},
    [_JUMP_TO_TOP] = {emit__JUMP_TO_TOP, 8, 0, {0}},
    [_LIST_APPEND] = {emit__LIST_APPEND, 104, 16, {0}},
    [_LIST_EXTEND] = {emit__LIST_EXTEND, 328, 112, {0}},
    [_LOAD_ATTR] = {emit__LOAD_ATTR, 296, 32, {0}},
    [_LOAD_ATTR_CLASS] = {emit__LOAD_ATTR_CLASS, 88, 16, {0}},
    [_LOAD_ATTR_INSTANCE_VALUE] = {emit__LOAD_ATTR_INSTANCE_VALUE, 120, 16, {0}},
    [_LOAD_ATTR_METHOD_LAZY_DICT] = {emit__LOAD_ATTR_METHOD_LAZY_DICT, 40, 8, {0}},
    [_LOAD_ATTR_METHOD_NO_DICT] = {emit__LOAD_ATTR_METHOD_NO_DICT, 40, 8, {0}},
    [_LOAD_ATTR_METHOD_WITH_VALUES] = {emit__LOAD_ATTR_METHOD_WITH_VALUES, 40, 8, {0}},
    [_LOAD_ATTR_MODULE] = {emit__LOAD_ATTR_MODULE, 128, 16, {0}},
    [_LOAD_ATTR_MODULE_FROM_KEYS] = {emit__LOAD_ATTR_MODULE_FROM_KEYS, 144, 16, {0}},
    [_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = {emit__LOAD_ATTR_NONDESCRIPTOR_NO_DICT, 80, 16, {0}},
    [_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = {emit__LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES, 80, 16, {0}},
    [_LOAD_ATTR_PROPERTY_FRAME] = {emit__LOAD_ATTR_PROPERTY_FRAME, 224, 8, {0}},
    [_LOAD_ATTR_SLOT] = {emit__LOAD_ATTR_SLOT, 104, 16, {0}},
    [_LOAD_ATTR_WITH_HINT] = {emit__LOAD_ATTR_WITH_HINT, 192, 24, {0}},
    [_LOAD_BUILD_CLASS] = {emit__LOAD_BUILD_CLASS, 152, 64, {0}},
    [_LOAD_COMMON_CONSTANT] = {emit__LOAD_COMMON_CONSTANT, 40, 24, {0}},
    [_LOAD_CONST_IMMORTAL] = {emit__LOAD_CONST_IMMORTAL, 32, 8, {0}},
    [_LOAD_CONST_INLINE] = {emit__LOAD_CONST_INLINE, 32, 8, {0}},
    [_LOAD_CONST_INLINE_BORROW] = {emit__LOAD_CONST_INLINE_BORROW, 16, 8, {0}},
    [_LOAD_CONST_MORTAL] = {emit__LOAD_CONST_MORTAL, 48, 8, {0}},
    [_LOAD_DEREF] = {emit__LOAD_DEREF, 112, 16, {0}},
    [_LOAD_FAST] = {emit__LOAD_FAST, 40, 8, {0}},
    [_LOAD_FAST_0] = {emit__LOAD_FAST_0, 24, 0, {0}},
    [_LOAD_FAST_1] = {emit__LOAD_FAST_1, 24, 0, {0}},
    [_LOAD_FAST_2] = {emit__LOAD_FAST_2, 24, 0, {0}},
    [_LOAD_FAST_3] = {emit__LOAD_FAST_3, 24, 0, {0}},
    [_LOAD_FAST_4] = {emit__LOAD_FAST_4, 24, 0, {0}},
    [_LOAD_FAST_5] = {emit__LOAD_FAST_5, 24, 0, {0}},
    [_LOAD_FAST_6] = {emit__LOAD_FAST_6, 24, 0, {0}},
    [_LOAD_FAST_7] = {emit__LOAD_FAST_7, 24, 0, {0}},
    [_LOAD_FAST_AND_CLEAR] = {emit__LOAD_FAST_AND_CLEAR, 24, 8, {0}},
    [_LOAD_FAST_CHECK] = {emit__LOAD_FAST_CHECK, 144, 112, {0}},
    [_LOAD_FROM_DICT_OR_DEREF] = {emit__LOAD_FROM_DICT_OR_DEREF, 296, 32, {0}},
    [_LOAD_GLOBAL] = {emit__LOAD_GLOBAL, 104, 16, {0}},
    [_LOAD_GLOBAL_BUILTINS] = {emit__LOAD_GLOBAL_BUILTINS, 72, 8, {0}},
    [_LOAD_GLOBAL_BUILTINS_FROM_KEYS] = {emit__LOAD_GLOBAL_BUILTINS_FROM_KEYS, 80, 8, {0}},
    [_LOAD_GLOBAL_MODULE] = {emit__LOAD_GLOBAL_MODULE, 72, 8, {0}},
    [_LOAD_GLOBAL_MODULE_FROM_KEYS] = {emit__LOAD_GLOBAL_MODULE_FROM_KEYS, 80, 8, {0}},
    [_LOAD_LOCALS] = {emit__LOAD_LOCALS, 96, 32, {0}},
    [_LOAD_NAME] = {emit__LOAD_NAME, 88, 16, {0}},
    [_LOAD_SMALL_INT] = {emit__LOAD_SMALL_INT, 40, 16, {0}},
    [_LOAD_SMALL_INT_0] = {emit__LOAD_SMALL_INT_0, 24, 8, {0}},
    [_LOAD_SMALL_INT_1] = {emit__LOAD_SMALL_INT_1, 24, 8, {0}},
    [_LOAD_SMALL_INT_2] = {emit__LOAD_SMALL_INT_2, 24, 8, {0}},
    [_LOAD_SMALL_INT_3] = {emit__LOAD_SMALL_INT_3, 24, 8, {0}},
    [_LOAD_SPECIAL] = {emit__LOAD_SPECIAL, 200, 40, {0}},
    [_LOAD_SUPER_ATTR_ATTR] = {emit__LOAD_SUPER_ATTR_ATTR, 272, 32, {0}},
    [_LOAD_SUPER_ATTR_METHOD] = {emit__LOAD_SUPER_ATTR_METHOD, 368, 40, {0}},
    [_MAKE_CALLARGS_A_TUPLE] = {emit__MAKE_CALLARGS_A_TUPLE, 192, 32, {0}},
    [_MAKE_CELL] = {emit__MAKE_CELL, 136, 24, {0}},
    [_MAKE_FUNCTION] = {emit__MAKE_FUNCTION, 152, 24, {0}},
    [_MAKE_WARM] = {emit__MAKE_WARM, 64, 8, {0}},
    [_MAP_ADD] = {emit__MAP_ADD, 80, 16, {0}},
    [_MATCH_CLASS] = {emit__MATCH_CLASS, 256, 32, {0}},
    [_MATCH_KEYS] = {emit__MATCH_KEYS, 64, 8, {0}},
    [_MATCH_MAPPING] = {emit__MATCH_MAPPING, 48, 16, {0}},
    [_MATCH_SEQUENCE] = {emit__MATCH_SEQUENCE, 48, 16, {0}},
    [_MAYBE_EXPAND_METHOD] = {emit__MAYBE_EXPAND_METHOD, 184, 24, {0}},
    [_MAYBE_EXPAND_METHOD_KW] = {emit__MAYBE_EXPAND_METHOD_KW, 216, 24, {0}},
    [_NOP] = {emit__NOP, 0, 0, {0}},
    [_POP_EXCEPT] = {emit__POP_EXCEPT, 112, 16, {0}},
    [_POP_TOP] = {emit__POP_TOP, 56, 8, {0}},
    [_POP_TOP_LOAD_CONST_INLINE_BORROW] = {emit__POP_TOP_LOAD_CONST_INLINE_BORROW, 72, 16, {0}},
    [_PUSH_EXC_INFO] = {emit__PUSH_EXC_INFO, 64, 8, {0}},
    [_PUSH_FRAME] = {emit__PUSH_FRAME, 40, 0, {0}},
    [_PUSH_NULL] = {emit__PUSH_NULL, 8, 0, {0}},
    [_PUSH_NULL_CONDITIONAL] = {emit__PUSH_NULL_CONDITIONAL, 24, 8, {0}},
    [_PY_FRAME_GENERAL] = {emit__PY_FRAME_GENERAL, 176, 16, {0}},
    [_PY_FRAME_KW] = {emit__PY_FRAME_KW, 272, 24, {0}},
    [_REPLACE_WITH_TRUE] = {emit__REPLACE_WITH_TRUE, 80, 16, {0}},
    [_RESUME_CHECK] = {emit__RESUME_CHECK, 32, 0, {0}},
    [_RETURN_GENERATOR] = {emit__RETURN_GENERATOR, 360, 16, {0}},
    [_RETURN_VALUE] = {emit__RETURN_VALUE, 72, 8, {0}},
    [_SAVE_RETURN_OFFSET] = {emit__SAVE_RETURN_OFFSET, 16, 8, {0}},
    [_SEND_GEN_FRAME] = {emit__SEND_GEN_FRAME, 120, 24, {0}},
    [_SETUP_ANNOTATIONS] = {emit__SETUP_ANNOTATIONS, 312, 104, {0}},
    [_SET_ADD] = {emit__SET_ADD, 136, 24, {0}},
    [_SET_FUNCTION_ATTRIBUTE] = {emit__SET_FUNCTION_ATTRIBUTE, 40, 16, {0}},
    [_SET_IP] = {emit__SET_IP, 16, 8, {0}},
    [_SET_UPDATE] = {emit__SET_UPDATE, 136, 24, {0}},
    [_START_EXECUTOR] = {emit__START_EXECUTOR, 80, 8, {0}},
    [_STORE_ATTR] = {emit__STORE_ATTR, 176, 24, {0}},
    [_STORE_ATTR_INSTANCE_VALUE] = {emit__STORE_ATTR_INSTANCE_VALUE, 192, 16, {0}},
    [_STORE_ATTR_SLOT] = {emit__STORE_ATTR_SLOT, 136, 16, {0}},
    [_STORE_ATTR_WITH_HINT] = {emit__STORE_ATTR_WITH_HINT, 264, 32, {0}},
    [_STORE_DEREF] = {emit__STORE_DEREF, 112, 16, {0}},
    [_STORE_FAST] = {emit__STORE_FAST, 96, 16, {0}},
    [_STORE_FAST_0] = {emit__STORE_FAST_0, 88, 8, {0}},
    [_STORE_FAST_1] = {emit__STORE_FAST_1, 88, 8, {0}},
    [_STORE_FAST_2] = {emit__STORE_FAST_2, 88, 8, {0}},
    [_STORE_FAST_3] = {emit__STORE_FAST_3, 88, 8, {0}},
    [_STORE_FAST_4] = {emit__STORE_FAST_4, 88, 8, {0}},
    [_STORE_FAST_5] = {emit__STORE_FAST_5, 88, 8, {0}},
    [_STORE_FAST_6] = {emit__STORE_FAST_6, 88, 8, {0}},
    [_STORE_FAST_7] = {emit__STORE_FAST_7, 88, 8, {0}},
    [_STORE_GLOBAL] = {emit__STORE_GLOBAL, 136, 24, {0}},
    [_STORE_NAME] = {emit__STORE_NAME, 288, 88, {0}},
    [_STORE_SLICE] = {emit__STORE_SLICE, 248, 24, {0}},
    [_STORE_SUBSCR] = {emit__STORE_SUBSCR, 192, 16, {0}},
    [_STORE_SUBSCR_DICT] = {emit__STORE_SUBSCR_DICT, 160, 24, {0}},
    [_STORE_SUBSCR_LIST_INT] = {emit__STORE_SUBSCR_LIST_INT, 272, 40, {0}},
    [_SWAP] = {emit__SWAP, 32, 8, {0}},
    [_TIER2_RESUME_CHECK] = {emit__TIER2_RESUME_CHECK, 16, 0, {0}},
    [_TO_BOOL] = {emit__TO_BOOL, 144, 32, {0}},
    [_TO_BOOL_BOOL] = {emit__TO_BOOL_BOOL, 32, 8, {0}},
    [_TO_BOOL_INT] = {emit__TO_BOOL_INT, 136, 32, {0}},
    [_TO_BOOL_LIST] = {emit__TO_BOOL_LIST, 104, 32, {0}},
    [_TO_BOOL_NONE] = {emit__TO_BOOL_NONE, 40, 16, {0}},
    [_TO_BOOL_STR] = {emit__TO_BOOL_STR, 144, 40, {0}},
    [_UNARY_INVERT] = {emit__UNARY_INVERT, 120, 16, {0}},
    [_UNARY_NEGATIVE] = {emit__UNARY_NEGATIVE, 120, 16, {0}},
    [_UNARY_NOT] = {emit__UNARY_NOT, 32, 16, {0}},
    [_UNPACK_EX] = {emit__UNPACK_EX, 152, 24, {0}},
    [_UNPACK_SEQUENCE] = {emit__UNPACK_SEQUENCE, 152, 24, {0}},
    [_UNPACK_SEQUENCE_LIST] = {emit__UNPACK_SEQUENCE_LIST, 208, 24, {0}},
    [_UNPACK_SEQUENCE_TUPLE] = {emit__UNPACK_SEQUENCE_TUPLE, 208, 24, {0}},
    [_UNPACK_SEQUENCE_TWO_TUPLE] = {emit__UNPACK_SEQUENCE_TWO_TUPLE, 152, 16, {0}},
    [_WITH_EXCEPT_START] = {emit__WITH_EXCEPT_START, 208, 32, {0}},
    [_YIELD_VALUE] = {emit__YIELD_VALUE, 88, 8, {0}},
};

static const void * const symbols_map[1] = {
    0
};
