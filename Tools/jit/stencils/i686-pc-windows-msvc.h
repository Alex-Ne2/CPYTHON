void
emit_shim(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // shim.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: e9 00 00 00 00                jmp     0x5 <__JIT_ENTRY+0x5>
    // 00000001:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
}

void
emit__BINARY_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 9: 89 04 24                      movl    %eax, (%esp)
    // c: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 10: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 14: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000015:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 19: 0f b7 c9                      movzwl  %cx, %ecx
    // 1c: 8b 70 f8                      movl    -0x8(%eax), %esi
    // 1f: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 22: 89 47 20                      movl    %eax, 0x20(%edi)
    // 25: 53                            pushl   %ebx
    // 26: 56                            pushl   %esi
    // 27: ff 14 8d 00 00 00 00          calll   *(,%ecx,4)
    // 0000002a:  IMAGE_REL_I386_DIR32 __PyEval_BinaryOps
    // 2e: 83 c4 08                      addl    $0x8, %esp
    // 31: 8b 6f 20                      movl    0x20(%edi), %ebp
    // 34: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 3b: 8b 0e                         movl    (%esi), %ecx
    // 3d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 43: 7f 05                         jg      0x4a <__JIT_ENTRY+0x4a>
    // 45: 49                            decl    %ecx
    // 46: 89 0e                         movl    %ecx, (%esi)
    // 48: 74 1e                         je      0x68 <__JIT_ENTRY+0x68>
    // 4a: 8b 0b                         movl    (%ebx), %ecx
    // 4c: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 52: 7f 2b                         jg      0x7f <__JIT_ENTRY+0x7f>
    // 54: 49                            decl    %ecx
    // 55: 89 0b                         movl    %ecx, (%ebx)
    // 57: 75 26                         jne     0x7f <__JIT_ENTRY+0x7f>
    // 59: 53                            pushl   %ebx
    // 5a: 89 c6                         movl    %eax, %esi
    // 5c: e8 00 00 00 00                calll   0x61 <__JIT_ENTRY+0x61>
    // 0000005d:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 61: 89 f0                         movl    %esi, %eax
    // 63: 83 c4 04                      addl    $0x4, %esp
    // 66: eb 17                         jmp     0x7f <__JIT_ENTRY+0x7f>
    // 68: 56                            pushl   %esi
    // 69: 89 c6                         movl    %eax, %esi
    // 6b: e8 00 00 00 00                calll   0x70 <__JIT_ENTRY+0x70>
    // 0000006c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 70: 89 f0                         movl    %esi, %eax
    // 72: 83 c4 04                      addl    $0x4, %esp
    // 75: 8b 0b                         movl    (%ebx), %ecx
    // 77: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 7d: 7e d5                         jle     0x54 <__JIT_ENTRY+0x54>
    // 7f: 85 c0                         testl   %eax, %eax
    // 81: 74 21                         je      0xa4 <__JIT_ENTRY+0xa4>
    // 83: 89 45 f8                      movl    %eax, -0x8(%ebp)
    // 86: 83 c5 fc                      addl    $-0x4, %ebp
    // 89: 8b 04 24                      movl    (%esp), %eax
    // 8c: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 90: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // 94: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 98: 83 c4 04                      addl    $0x4, %esp
    // 9b: 5e                            popl    %esi
    // 9c: 5f                            popl    %edi
    // 9d: 5b                            popl    %ebx
    // 9e: 5d                            popl    %ebp
    // 9f: e9 00 00 00 00                jmp     0xa4 <__JIT_ENTRY+0xa4>
    // 000000a0:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // a4: 83 c5 f8                      addl    $-0x8, %ebp
    // a7: 8b 04 24                      movl    (%esp), %eax
    // aa: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // ae: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // b2: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // b6: 83 c4 04                      addl    $0x4, %esp
    // b9: 5e                            popl    %esi
    // ba: 5f                            popl    %edi
    // bb: 5b                            popl    %ebx
    // bc: 5d                            popl    %ebp
    // bd: e9 00 00 00 00                jmp     0xc2 <__JIT_ENTRY+0xc2>
    // 000000be:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[194] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x44, 0x24,
        0x20, 0x89, 0x04, 0x24, 0x8b, 0x7c, 0x24, 0x18,
        0x8b, 0x44, 0x24, 0x1c, 0xb9, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xb7, 0xc9, 0x8b, 0x70, 0xf8, 0x8b,
        0x58, 0xfc, 0x89, 0x47, 0x20, 0x53, 0x56, 0xff,
        0x14, 0x8d, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x08, 0x8b, 0x6f, 0x20, 0xc7, 0x47, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x0e, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x05, 0x49, 0x89, 0x0e,
        0x74, 0x1e, 0x8b, 0x0b, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x2b, 0x49, 0x89, 0x0b, 0x75,
        0x26, 0x53, 0x89, 0xc6, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xf0, 0x83, 0xc4, 0x04, 0xeb, 0x17,
        0x56, 0x89, 0xc6, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xf0, 0x83, 0xc4, 0x04, 0x8b, 0x0b, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7e, 0xd5, 0x85,
        0xc0, 0x74, 0x21, 0x89, 0x45, 0xf8, 0x83, 0xc5,
        0xfc, 0x8b, 0x04, 0x24, 0x89, 0x44, 0x24, 0x20,
        0x89, 0x6c, 0x24, 0x1c, 0x89, 0x7c, 0x24, 0x18,
        0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc5, 0xf8, 0x8b,
        0x04, 0x24, 0x89, 0x44, 0x24, 0x20, 0x89, 0x7c,
        0x24, 0x18, 0x89, 0x6c, 0x24, 0x1c, 0x83, 0xc4,
        0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x15, instruction->oparg);
    patch_32(code + 0x2a, (uintptr_t)&_PyEval_BinaryOps);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x6c, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xa0, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xbe, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_ADD_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_ADD_FLOAT.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 10                      subl    $0x10, %esp
    // 7: 8b 7c 24 2c                   movl    0x2c(%esp), %edi
    // b: 8b 74 24 24                   movl    0x24(%esp), %esi
    // f: 8b 5c 24 28                   movl    0x28(%esp), %ebx
    // 13: 8b 43 f8                      movl    -0x8(%ebx), %eax
    // 16: 8b 4b fc                      movl    -0x4(%ebx), %ecx
    // 19: 8d 6b f8                      leal    -0x8(%ebx), %ebp
    // 1c: f2 0f 10 40 08                movsd   0x8(%eax), %xmm0
    // 21: f2 0f 58 41 08                addsd   0x8(%ecx), %xmm0
    // 26: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%esp)
    // 2c: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 30: 89 04 24                      movl    %eax, (%esp)
    // 33: e8 00 00 00 00                calll   0x38 <__JIT_ENTRY+0x38>
    // 00000034:  IMAGE_REL_I386_REL32 __PyFloat_FromDouble_ConsumeInputs
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 74 1e                         je      0x5a <__JIT_ENTRY+0x5a>
    // 3c: 83 c3 fc                      addl    $-0x4, %ebx
    // 3f: 89 45 00                      movl    %eax, (%ebp)
    // 42: 89 7c 24 2c                   movl    %edi, 0x2c(%esp)
    // 46: 89 5c 24 28                   movl    %ebx, 0x28(%esp)
    // 4a: 89 74 24 24                   movl    %esi, 0x24(%esp)
    // 4e: 83 c4 10                      addl    $0x10, %esp
    // 51: 5e                            popl    %esi
    // 52: 5f                            popl    %edi
    // 53: 5b                            popl    %ebx
    // 54: 5d                            popl    %ebp
    // 55: e9 00 00 00 00                jmp     0x5a <__JIT_ENTRY+0x5a>
    // 00000056:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 5a: 89 7c 24 2c                   movl    %edi, 0x2c(%esp)
    // 5e: 89 6c 24 28                   movl    %ebp, 0x28(%esp)
    // 62: 89 74 24 24                   movl    %esi, 0x24(%esp)
    // 66: 83 c4 10                      addl    $0x10, %esp
    // 69: 5e                            popl    %esi
    // 6a: 5f                            popl    %edi
    // 6b: 5b                            popl    %ebx
    // 6c: 5d                            popl    %ebp
    // 6d: e9 00 00 00 00                jmp     0x72 <__JIT_ENTRY+0x72>
    // 0000006e:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[114] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x10, 0x8b,
        0x7c, 0x24, 0x2c, 0x8b, 0x74, 0x24, 0x24, 0x8b,
        0x5c, 0x24, 0x28, 0x8b, 0x43, 0xf8, 0x8b, 0x4b,
        0xfc, 0x8d, 0x6b, 0xf8, 0xf2, 0x0f, 0x10, 0x40,
        0x08, 0xf2, 0x0f, 0x58, 0x41, 0x08, 0xf2, 0x0f,
        0x11, 0x44, 0x24, 0x08, 0x89, 0x4c, 0x24, 0x04,
        0x89, 0x04, 0x24, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x74, 0x1e, 0x83, 0xc3, 0xfc, 0x89,
        0x45, 0x00, 0x89, 0x7c, 0x24, 0x2c, 0x89, 0x5c,
        0x24, 0x28, 0x89, 0x74, 0x24, 0x24, 0x83, 0xc4,
        0x10, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x7c, 0x24, 0x2c, 0x89, 0x6c,
        0x24, 0x28, 0x89, 0x74, 0x24, 0x24, 0x83, 0xc4,
        0x10, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x34, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs + -0x4);
    patch_x86_64_32rx(code + 0x56, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x6e, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_ADD_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_ADD_INT.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 44 24 24                   movl    0x24(%esp), %eax
    // b: 89 04 24                      movl    %eax, (%esp)
    // e: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 12: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 16: 8b 6c 24 20                   movl    0x20(%esp), %ebp
    // 1a: 8b 7d f8                      movl    -0x8(%ebp), %edi
    // 1d: 8b 5d fc                      movl    -0x4(%ebp), %ebx
    // 20: 53                            pushl   %ebx
    // 21: 57                            pushl   %edi
    // 22: e8 00 00 00 00                calll   0x27 <__JIT_ENTRY+0x27>
    // 00000023:  IMAGE_REL_I386_REL32 __PyLong_Add
    // 27: 83 c4 08                      addl    $0x8, %esp
    // 2a: 89 c6                         movl    %eax, %esi
    // 2c: 8b 03                         movl    (%ebx), %eax
    // 2e: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 33: 7f 05                         jg      0x3a <__JIT_ENTRY+0x3a>
    // 35: 48                            decl    %eax
    // 36: 89 03                         movl    %eax, (%ebx)
    // 38: 74 30                         je      0x6a <__JIT_ENTRY+0x6a>
    // 3a: 8b 07                         movl    (%edi), %eax
    // 3c: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 41: 7f 50                         jg      0x93 <__JIT_ENTRY+0x93>
    // 43: 48                            decl    %eax
    // 44: 89 07                         movl    %eax, (%edi)
    // 46: 75 4b                         jne     0x93 <__JIT_ENTRY+0x93>
    // 48: a1 50 14 00 00                movl    0x1450, %eax
    // 00000049:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 4d: 85 c0                         testl   %eax, %eax
    // 4f: 74 0e                         je      0x5f <__JIT_ENTRY+0x5f>
    // 51: ff 35 54 14 00 00             pushl   0x1454
    // 00000053:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 57: 6a 01                         pushl   $0x1
    // 59: 57                            pushl   %edi
    // 5a: ff d0                         calll   *%eax
    // 5c: 83 c4 0c                      addl    $0xc, %esp
    // 5f: 57                            pushl   %edi
    // 60: e8 00 00 00 00                calll   0x65 <__JIT_ENTRY+0x65>
    // 00000061:  IMAGE_REL_I386_REL32 __PyLong_ExactDealloc
    // 65: 83 c4 04                      addl    $0x4, %esp
    // 68: eb 29                         jmp     0x93 <__JIT_ENTRY+0x93>
    // 6a: a1 50 14 00 00                movl    0x1450, %eax
    // 0000006b:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 6f: 85 c0                         testl   %eax, %eax
    // 71: 74 0e                         je      0x81 <__JIT_ENTRY+0x81>
    // 73: ff 35 54 14 00 00             pushl   0x1454
    // 00000075:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 79: 6a 01                         pushl   $0x1
    // 7b: 53                            pushl   %ebx
    // 7c: ff d0                         calll   *%eax
    // 7e: 83 c4 0c                      addl    $0xc, %esp
    // 81: 53                            pushl   %ebx
    // 82: e8 00 00 00 00                calll   0x87 <__JIT_ENTRY+0x87>
    // 00000083:  IMAGE_REL_I386_REL32 __PyLong_ExactDealloc
    // 87: 83 c4 04                      addl    $0x4, %esp
    // 8a: 8b 07                         movl    (%edi), %eax
    // 8c: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 91: 7e b0                         jle     0x43 <__JIT_ENTRY+0x43>
    // 93: 8d 45 f8                      leal    -0x8(%ebp), %eax
    // 96: 85 f6                         testl   %esi, %esi
    // 98: 74 24                         je      0xbe <__JIT_ENTRY+0xbe>
    // 9a: 83 c5 fc                      addl    $-0x4, %ebp
    // 9d: 89 30                         movl    %esi, (%eax)
    // 9f: 8b 04 24                      movl    (%esp), %eax
    // a2: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // a6: 89 6c 24 20                   movl    %ebp, 0x20(%esp)
    // aa: 8b 44 24 04                   movl    0x4(%esp), %eax
    // ae: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // b2: 83 c4 08                      addl    $0x8, %esp
    // b5: 5e                            popl    %esi
    // b6: 5f                            popl    %edi
    // b7: 5b                            popl    %ebx
    // b8: 5d                            popl    %ebp
    // b9: e9 00 00 00 00                jmp     0xbe <__JIT_ENTRY+0xbe>
    // 000000ba:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // be: 8b 0c 24                      movl    (%esp), %ecx
    // c1: 89 4c 24 24                   movl    %ecx, 0x24(%esp)
    // c5: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // c9: 8b 44 24 04                   movl    0x4(%esp), %eax
    // cd: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // d1: 83 c4 08                      addl    $0x8, %esp
    // d4: 5e                            popl    %esi
    // d5: 5f                            popl    %edi
    // d6: 5b                            popl    %ebx
    // d7: 5d                            popl    %ebp
    // d8: e9 00 00 00 00                jmp     0xdd <__JIT_ENTRY+0xdd>
    // 000000d9:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[221] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x44, 0x24, 0x24, 0x89, 0x04, 0x24, 0x8b, 0x44,
        0x24, 0x1c, 0x89, 0x44, 0x24, 0x04, 0x8b, 0x6c,
        0x24, 0x20, 0x8b, 0x7d, 0xf8, 0x8b, 0x5d, 0xfc,
        0x53, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x08, 0x89, 0xc6, 0x8b, 0x03, 0x3d, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x05, 0x48, 0x89, 0x03,
        0x74, 0x30, 0x8b, 0x07, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x50, 0x48, 0x89, 0x07, 0x75, 0x4b,
        0xa1, 0x50, 0x14, 0x00, 0x00, 0x85, 0xc0, 0x74,
        0x0e, 0xff, 0x35, 0x54, 0x14, 0x00, 0x00, 0x6a,
        0x01, 0x57, 0xff, 0xd0, 0x83, 0xc4, 0x0c, 0x57,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04,
        0xeb, 0x29, 0xa1, 0x50, 0x14, 0x00, 0x00, 0x85,
        0xc0, 0x74, 0x0e, 0xff, 0x35, 0x54, 0x14, 0x00,
        0x00, 0x6a, 0x01, 0x53, 0xff, 0xd0, 0x83, 0xc4,
        0x0c, 0x53, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x8b, 0x07, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7e, 0xb0, 0x8d, 0x45, 0xf8, 0x85, 0xf6,
        0x74, 0x24, 0x83, 0xc5, 0xfc, 0x89, 0x30, 0x8b,
        0x04, 0x24, 0x89, 0x44, 0x24, 0x24, 0x89, 0x6c,
        0x24, 0x20, 0x8b, 0x44, 0x24, 0x04, 0x89, 0x44,
        0x24, 0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0c,
        0x24, 0x89, 0x4c, 0x24, 0x24, 0x89, 0x44, 0x24,
        0x20, 0x8b, 0x44, 0x24, 0x04, 0x89, 0x44, 0x24,
        0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x23, (uintptr_t)&_PyLong_Add + -0x4);
    patch_32(code + 0x49, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x53, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)&_PyLong_ExactDealloc + -0x4);
    patch_32(code + 0x6b, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x75, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x83, (uintptr_t)&_PyLong_ExactDealloc + -0x4);
    patch_x86_64_32rx(code + 0xba, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xd9, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_ADD_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_ADD_UNICODE.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 44 24 24                   movl    0x24(%esp), %eax
    // b: 89 04 24                      movl    %eax, (%esp)
    // e: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 12: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 16: 8b 6c 24 20                   movl    0x20(%esp), %ebp
    // 1a: 8b 7d f8                      movl    -0x8(%ebp), %edi
    // 1d: 8b 5d fc                      movl    -0x4(%ebp), %ebx
    // 20: 53                            pushl   %ebx
    // 21: 57                            pushl   %edi
    // 22: e8 00 00 00 00                calll   0x27 <__JIT_ENTRY+0x27>
    // 00000023:  IMAGE_REL_I386_REL32 _PyUnicode_Concat
    // 27: 83 c4 08                      addl    $0x8, %esp
    // 2a: 89 c6                         movl    %eax, %esi
    // 2c: 8b 03                         movl    (%ebx), %eax
    // 2e: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 33: 7f 05                         jg      0x3a <__JIT_ENTRY+0x3a>
    // 35: 48                            decl    %eax
    // 36: 89 03                         movl    %eax, (%ebx)
    // 38: 74 30                         je      0x6a <__JIT_ENTRY+0x6a>
    // 3a: 8b 07                         movl    (%edi), %eax
    // 3c: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 41: 7f 50                         jg      0x93 <__JIT_ENTRY+0x93>
    // 43: 48                            decl    %eax
    // 44: 89 07                         movl    %eax, (%edi)
    // 46: 75 4b                         jne     0x93 <__JIT_ENTRY+0x93>
    // 48: a1 50 14 00 00                movl    0x1450, %eax
    // 00000049:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 4d: 85 c0                         testl   %eax, %eax
    // 4f: 74 0e                         je      0x5f <__JIT_ENTRY+0x5f>
    // 51: ff 35 54 14 00 00             pushl   0x1454
    // 00000053:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 57: 6a 01                         pushl   $0x1
    // 59: 57                            pushl   %edi
    // 5a: ff d0                         calll   *%eax
    // 5c: 83 c4 0c                      addl    $0xc, %esp
    // 5f: 57                            pushl   %edi
    // 60: e8 00 00 00 00                calll   0x65 <__JIT_ENTRY+0x65>
    // 00000061:  IMAGE_REL_I386_REL32 __PyUnicode_ExactDealloc
    // 65: 83 c4 04                      addl    $0x4, %esp
    // 68: eb 29                         jmp     0x93 <__JIT_ENTRY+0x93>
    // 6a: a1 50 14 00 00                movl    0x1450, %eax
    // 0000006b:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 6f: 85 c0                         testl   %eax, %eax
    // 71: 74 0e                         je      0x81 <__JIT_ENTRY+0x81>
    // 73: ff 35 54 14 00 00             pushl   0x1454
    // 00000075:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 79: 6a 01                         pushl   $0x1
    // 7b: 53                            pushl   %ebx
    // 7c: ff d0                         calll   *%eax
    // 7e: 83 c4 0c                      addl    $0xc, %esp
    // 81: 53                            pushl   %ebx
    // 82: e8 00 00 00 00                calll   0x87 <__JIT_ENTRY+0x87>
    // 00000083:  IMAGE_REL_I386_REL32 __PyUnicode_ExactDealloc
    // 87: 83 c4 04                      addl    $0x4, %esp
    // 8a: 8b 07                         movl    (%edi), %eax
    // 8c: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 91: 7e b0                         jle     0x43 <__JIT_ENTRY+0x43>
    // 93: 8d 45 f8                      leal    -0x8(%ebp), %eax
    // 96: 85 f6                         testl   %esi, %esi
    // 98: 74 24                         je      0xbe <__JIT_ENTRY+0xbe>
    // 9a: 83 c5 fc                      addl    $-0x4, %ebp
    // 9d: 89 30                         movl    %esi, (%eax)
    // 9f: 8b 04 24                      movl    (%esp), %eax
    // a2: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // a6: 89 6c 24 20                   movl    %ebp, 0x20(%esp)
    // aa: 8b 44 24 04                   movl    0x4(%esp), %eax
    // ae: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // b2: 83 c4 08                      addl    $0x8, %esp
    // b5: 5e                            popl    %esi
    // b6: 5f                            popl    %edi
    // b7: 5b                            popl    %ebx
    // b8: 5d                            popl    %ebp
    // b9: e9 00 00 00 00                jmp     0xbe <__JIT_ENTRY+0xbe>
    // 000000ba:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // be: 8b 0c 24                      movl    (%esp), %ecx
    // c1: 89 4c 24 24                   movl    %ecx, 0x24(%esp)
    // c5: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // c9: 8b 44 24 04                   movl    0x4(%esp), %eax
    // cd: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // d1: 83 c4 08                      addl    $0x8, %esp
    // d4: 5e                            popl    %esi
    // d5: 5f                            popl    %edi
    // d6: 5b                            popl    %ebx
    // d7: 5d                            popl    %ebp
    // d8: e9 00 00 00 00                jmp     0xdd <__JIT_ENTRY+0xdd>
    // 000000d9:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[221] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x44, 0x24, 0x24, 0x89, 0x04, 0x24, 0x8b, 0x44,
        0x24, 0x1c, 0x89, 0x44, 0x24, 0x04, 0x8b, 0x6c,
        0x24, 0x20, 0x8b, 0x7d, 0xf8, 0x8b, 0x5d, 0xfc,
        0x53, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x08, 0x89, 0xc6, 0x8b, 0x03, 0x3d, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x05, 0x48, 0x89, 0x03,
        0x74, 0x30, 0x8b, 0x07, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x50, 0x48, 0x89, 0x07, 0x75, 0x4b,
        0xa1, 0x50, 0x14, 0x00, 0x00, 0x85, 0xc0, 0x74,
        0x0e, 0xff, 0x35, 0x54, 0x14, 0x00, 0x00, 0x6a,
        0x01, 0x57, 0xff, 0xd0, 0x83, 0xc4, 0x0c, 0x57,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04,
        0xeb, 0x29, 0xa1, 0x50, 0x14, 0x00, 0x00, 0x85,
        0xc0, 0x74, 0x0e, 0xff, 0x35, 0x54, 0x14, 0x00,
        0x00, 0x6a, 0x01, 0x53, 0xff, 0xd0, 0x83, 0xc4,
        0x0c, 0x53, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x8b, 0x07, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7e, 0xb0, 0x8d, 0x45, 0xf8, 0x85, 0xf6,
        0x74, 0x24, 0x83, 0xc5, 0xfc, 0x89, 0x30, 0x8b,
        0x04, 0x24, 0x89, 0x44, 0x24, 0x24, 0x89, 0x6c,
        0x24, 0x20, 0x8b, 0x44, 0x24, 0x04, 0x89, 0x44,
        0x24, 0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0c,
        0x24, 0x89, 0x4c, 0x24, 0x24, 0x89, 0x44, 0x24,
        0x20, 0x8b, 0x44, 0x24, 0x04, 0x89, 0x44, 0x24,
        0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x23, (uintptr_t)&PyUnicode_Concat + -0x4);
    patch_32(code + 0x49, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x53, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)&_PyUnicode_ExactDealloc + -0x4);
    patch_32(code + 0x6b, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x75, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x83, (uintptr_t)&_PyUnicode_ExactDealloc + -0x4);
    patch_x86_64_32rx(code + 0xba, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xd9, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_EXTEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_EXTEND.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 9: 89 04 24                      movl    %eax, (%esp)
    // c: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 10: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 14: 8b 70 f8                      movl    -0x8(%eax), %esi
    // 17: 8b 68 fc                      movl    -0x4(%eax), %ebp
    // 1a: 89 47 20                      movl    %eax, 0x20(%edi)
    // 1d: 55                            pushl   %ebp
    // 1e: 56                            pushl   %esi
    // 1f: ff 15 08 00 00 00             calll   *0x8
    // 00000021:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 25: 83 c4 08                      addl    $0x8, %esp
    // 28: 8b 5f 20                      movl    0x20(%edi), %ebx
    // 2b: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 32: 8b 0e                         movl    (%esi), %ecx
    // 34: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 3a: 7f 05                         jg      0x41 <__JIT_ENTRY+0x41>
    // 3c: 49                            decl    %ecx
    // 3d: 89 0e                         movl    %ecx, (%esi)
    // 3f: 74 20                         je      0x61 <__JIT_ENTRY+0x61>
    // 41: 8b 4d 00                      movl    (%ebp), %ecx
    // 44: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 4a: 7f 2d                         jg      0x79 <__JIT_ENTRY+0x79>
    // 4c: 49                            decl    %ecx
    // 4d: 89 4d 00                      movl    %ecx, (%ebp)
    // 50: 75 27                         jne     0x79 <__JIT_ENTRY+0x79>
    // 52: 55                            pushl   %ebp
    // 53: 89 c6                         movl    %eax, %esi
    // 55: e8 00 00 00 00                calll   0x5a <__JIT_ENTRY+0x5a>
    // 00000056:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 5a: 89 f0                         movl    %esi, %eax
    // 5c: 83 c4 04                      addl    $0x4, %esp
    // 5f: eb 18                         jmp     0x79 <__JIT_ENTRY+0x79>
    // 61: 56                            pushl   %esi
    // 62: 89 c6                         movl    %eax, %esi
    // 64: e8 00 00 00 00                calll   0x69 <__JIT_ENTRY+0x69>
    // 00000065:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 69: 89 f0                         movl    %esi, %eax
    // 6b: 83 c4 04                      addl    $0x4, %esp
    // 6e: 8b 4d 00                      movl    (%ebp), %ecx
    // 71: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 77: 7e d3                         jle     0x4c <__JIT_ENTRY+0x4c>
    // 79: 89 43 f8                      movl    %eax, -0x8(%ebx)
    // 7c: 83 c3 fc                      addl    $-0x4, %ebx
    // 7f: 8b 04 24                      movl    (%esp), %eax
    // 82: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 86: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 8a: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 8e: 83 c4 04                      addl    $0x4, %esp
    // 91: 5e                            popl    %esi
    // 92: 5f                            popl    %edi
    // 93: 5b                            popl    %ebx
    // 94: 5d                            popl    %ebp
    // 95: e9 00 00 00 00                jmp     0x9a <__JIT_ENTRY+0x9a>
    // 00000096:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[149] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x44, 0x24,
        0x20, 0x89, 0x04, 0x24, 0x8b, 0x7c, 0x24, 0x18,
        0x8b, 0x44, 0x24, 0x1c, 0x8b, 0x70, 0xf8, 0x8b,
        0x68, 0xfc, 0x89, 0x47, 0x20, 0x55, 0x56, 0xff,
        0x15, 0x08, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x08,
        0x8b, 0x5f, 0x20, 0xc7, 0x47, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x0e, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x05, 0x49, 0x89, 0x0e, 0x74,
        0x20, 0x8b, 0x4d, 0x00, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x2d, 0x49, 0x89, 0x4d, 0x00,
        0x75, 0x27, 0x55, 0x89, 0xc6, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xf0, 0x83, 0xc4, 0x04, 0xeb,
        0x18, 0x56, 0x89, 0xc6, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xf0, 0x83, 0xc4, 0x04, 0x8b, 0x4d,
        0x00, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7e,
        0xd3, 0x89, 0x43, 0xf8, 0x83, 0xc3, 0xfc, 0x8b,
        0x04, 0x24, 0x89, 0x44, 0x24, 0x20, 0x89, 0x5c,
        0x24, 0x1c, 0x89, 0x7c, 0x24, 0x18, 0x83, 0xc4,
        0x04, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x21, (instruction->operand0 & UINT32_MAX) + 0x8);
    patch_x86_64_32rx(code + 0x56, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x65, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__BINARY_OP_INPLACE_ADD_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_INPLACE_ADD_UNICODE.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 5c 24 24                   movl    0x24(%esp), %ebx
    // b: 8b 74 24 20                   movl    0x20(%esp), %esi
    // f: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 13: 8b 6e f8                      movl    -0x8(%esi), %ebp
    // 16: b8 00 00 00 00                movl    $0x0, %eax
    // 00000017:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 1b: 39 6c 87 28                   cmpl    %ebp, 0x28(%edi,%eax,4)
    // 1f: 74 18                         je      0x39 <__JIT_ENTRY+0x39>
    // 21: 89 5c 24 24                   movl    %ebx, 0x24(%esp)
    // 25: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // 29: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 2d: 83 c4 08                      addl    $0x8, %esp
    // 30: 5e                            popl    %esi
    // 31: 5f                            popl    %edi
    // 32: 5b                            popl    %ebx
    // 33: 5d                            popl    %ebp
    // 34: e9 00 00 00 00                jmp     0x39 <__JIT_ENTRY+0x39>
    // 00000035:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 39: 8b 4e fc                      movl    -0x4(%esi), %ecx
    // 3c: 8b 45 00                      movl    (%ebp), %eax
    // 3f: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 44: 89 0c 24                      movl    %ecx, (%esp)
    // 47: 7f 29                         jg      0x72 <__JIT_ENTRY+0x72>
    // 49: 48                            decl    %eax
    // 4a: 89 45 00                      movl    %eax, (%ebp)
    // 4d: 75 23                         jne     0x72 <__JIT_ENTRY+0x72>
    // 4f: a1 50 14 00 00                movl    0x1450, %eax
    // 00000050:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 54: 85 c0                         testl   %eax, %eax
    // 56: 74 0e                         je      0x66 <__JIT_ENTRY+0x66>
    // 58: ff 35 54 14 00 00             pushl   0x1454
    // 0000005a:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 5e: 6a 01                         pushl   $0x1
    // 60: 55                            pushl   %ebp
    // 61: ff d0                         calll   *%eax
    // 63: 83 c4 0c                      addl    $0xc, %esp
    // 66: 55                            pushl   %ebp
    // 67: e8 00 00 00 00                calll   0x6c <__JIT_ENTRY+0x6c>
    // 00000068:  IMAGE_REL_I386_REL32 __PyUnicode_ExactDealloc
    // 6c: 83 c4 04                      addl    $0x4, %esp
    // 6f: 8b 0c 24                      movl    (%esp), %ecx
    // 72: bd 00 00 00 00                movl    $0x0, %ebp
    // 00000073:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 77: 8b 44 af 28                   movl    0x28(%edi,%ebp,4), %eax
    // 7b: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 7f: 8d 44 24 04                   leal    0x4(%esp), %eax
    // 83: 51                            pushl   %ecx
    // 84: 50                            pushl   %eax
    // 85: e8 00 00 00 00                calll   0x8a <__JIT_ENTRY+0x8a>
    // 00000086:  IMAGE_REL_I386_REL32 _PyUnicode_Append
    // 8a: 8b 54 24 08                   movl    0x8(%esp), %edx
    // 8e: 83 c4 08                      addl    $0x8, %esp
    // 91: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 95: 89 44 af 28                   movl    %eax, 0x28(%edi,%ebp,4)
    // 99: 8b 0a                         movl    (%edx), %ecx
    // 9b: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // a1: 7f 32                         jg      0xd5 <__JIT_ENTRY+0xd5>
    // a3: 49                            decl    %ecx
    // a4: 89 0a                         movl    %ecx, (%edx)
    // a6: 75 24                         jne     0xcc <__JIT_ENTRY+0xcc>
    // a8: a1 50 14 00 00                movl    0x1450, %eax
    // 000000a9:  IMAGE_REL_I386_DIR32 __PyRuntime
    // ad: 85 c0                         testl   %eax, %eax
    // af: 74 12                         je      0xc3 <__JIT_ENTRY+0xc3>
    // b1: ff 35 54 14 00 00             pushl   0x1454
    // 000000b3:  IMAGE_REL_I386_DIR32 __PyRuntime
    // b7: 6a 01                         pushl   $0x1
    // b9: 52                            pushl   %edx
    // ba: ff d0                         calll   *%eax
    // bc: 8b 54 24 0c                   movl    0xc(%esp), %edx
    // c0: 83 c4 0c                      addl    $0xc, %esp
    // c3: 52                            pushl   %edx
    // c4: e8 00 00 00 00                calll   0xc9 <__JIT_ENTRY+0xc9>
    // 000000c5:  IMAGE_REL_I386_REL32 __PyUnicode_ExactDealloc
    // c9: 83 c4 04                      addl    $0x4, %esp
    // cc: b8 00 00 00 00                movl    $0x0, %eax
    // 000000cd:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // d1: 8b 44 87 28                   movl    0x28(%edi,%eax,4), %eax
    // d5: 83 c6 f8                      addl    $-0x8, %esi
    // d8: 85 c0                         testl   %eax, %eax
    // da: 74 18                         je      0xf4 <__JIT_ENTRY+0xf4>
    // dc: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // e0: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // e4: 89 5c 24 24                   movl    %ebx, 0x24(%esp)
    // e8: 83 c4 08                      addl    $0x8, %esp
    // eb: 5e                            popl    %esi
    // ec: 5f                            popl    %edi
    // ed: 5b                            popl    %ebx
    // ee: 5d                            popl    %ebp
    // ef: e9 00 00 00 00                jmp     0xf4 <__JIT_ENTRY+0xf4>
    // 000000f0:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // f4: 89 5c 24 24                   movl    %ebx, 0x24(%esp)
    // f8: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // fc: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 100: 83 c4 08                      addl    $0x8, %esp
    // 103: 5e                            popl    %esi
    // 104: 5f                            popl    %edi
    // 105: 5b                            popl    %ebx
    // 106: 5d                            popl    %ebp
    // 107: e9 00 00 00 00                jmp     0x10c <__JIT_ENTRY+0x10c>
    // 00000108:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[268] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x5c, 0x24, 0x24, 0x8b, 0x74, 0x24, 0x20, 0x8b,
        0x7c, 0x24, 0x1c, 0x8b, 0x6e, 0xf8, 0xb8, 0x00,
        0x00, 0x00, 0x00, 0x39, 0x6c, 0x87, 0x28, 0x74,
        0x18, 0x89, 0x5c, 0x24, 0x24, 0x89, 0x74, 0x24,
        0x20, 0x89, 0x7c, 0x24, 0x1c, 0x83, 0xc4, 0x08,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x4e, 0xfc, 0x8b, 0x45, 0x00, 0x3d,
        0xff, 0xff, 0xff, 0x3f, 0x89, 0x0c, 0x24, 0x7f,
        0x29, 0x48, 0x89, 0x45, 0x00, 0x75, 0x23, 0xa1,
        0x50, 0x14, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0e,
        0xff, 0x35, 0x54, 0x14, 0x00, 0x00, 0x6a, 0x01,
        0x55, 0xff, 0xd0, 0x83, 0xc4, 0x0c, 0x55, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b,
        0x0c, 0x24, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x44, 0xaf, 0x28, 0x89, 0x44, 0x24, 0x04, 0x8d,
        0x44, 0x24, 0x04, 0x51, 0x50, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x54, 0x24, 0x08, 0x83, 0xc4,
        0x08, 0x8b, 0x44, 0x24, 0x04, 0x89, 0x44, 0xaf,
        0x28, 0x8b, 0x0a, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x32, 0x49, 0x89, 0x0a, 0x75, 0x24,
        0xa1, 0x50, 0x14, 0x00, 0x00, 0x85, 0xc0, 0x74,
        0x12, 0xff, 0x35, 0x54, 0x14, 0x00, 0x00, 0x6a,
        0x01, 0x52, 0xff, 0xd0, 0x8b, 0x54, 0x24, 0x0c,
        0x83, 0xc4, 0x0c, 0x52, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x04, 0xb8, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x44, 0x87, 0x28, 0x83, 0xc6, 0xf8,
        0x85, 0xc0, 0x74, 0x18, 0x89, 0x7c, 0x24, 0x1c,
        0x89, 0x74, 0x24, 0x20, 0x89, 0x5c, 0x24, 0x24,
        0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x89, 0x5c, 0x24, 0x24,
        0x89, 0x74, 0x24, 0x20, 0x89, 0x7c, 0x24, 0x1c,
        0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x17, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x35, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32(code + 0x50, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x5a, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)&_PyUnicode_ExactDealloc + -0x4);
    patch_32(code + 0x73, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x86, (uintptr_t)&PyUnicode_Append + -0x4);
    patch_32(code + 0xa9, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0xb3, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0xc5, (uintptr_t)&_PyUnicode_ExactDealloc + -0x4);
    patch_32(code + 0xcd, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0xf0, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x108, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_MULTIPLY_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_MULTIPLY_FLOAT.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 10                      subl    $0x10, %esp
    // 7: 8b 7c 24 2c                   movl    0x2c(%esp), %edi
    // b: 8b 74 24 24                   movl    0x24(%esp), %esi
    // f: 8b 5c 24 28                   movl    0x28(%esp), %ebx
    // 13: 8b 43 f8                      movl    -0x8(%ebx), %eax
    // 16: 8b 4b fc                      movl    -0x4(%ebx), %ecx
    // 19: 8d 6b f8                      leal    -0x8(%ebx), %ebp
    // 1c: f2 0f 10 40 08                movsd   0x8(%eax), %xmm0
    // 21: f2 0f 59 41 08                mulsd   0x8(%ecx), %xmm0
    // 26: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%esp)
    // 2c: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 30: 89 04 24                      movl    %eax, (%esp)
    // 33: e8 00 00 00 00                calll   0x38 <__JIT_ENTRY+0x38>
    // 00000034:  IMAGE_REL_I386_REL32 __PyFloat_FromDouble_ConsumeInputs
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 74 1e                         je      0x5a <__JIT_ENTRY+0x5a>
    // 3c: 83 c3 fc                      addl    $-0x4, %ebx
    // 3f: 89 45 00                      movl    %eax, (%ebp)
    // 42: 89 7c 24 2c                   movl    %edi, 0x2c(%esp)
    // 46: 89 5c 24 28                   movl    %ebx, 0x28(%esp)
    // 4a: 89 74 24 24                   movl    %esi, 0x24(%esp)
    // 4e: 83 c4 10                      addl    $0x10, %esp
    // 51: 5e                            popl    %esi
    // 52: 5f                            popl    %edi
    // 53: 5b                            popl    %ebx
    // 54: 5d                            popl    %ebp
    // 55: e9 00 00 00 00                jmp     0x5a <__JIT_ENTRY+0x5a>
    // 00000056:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 5a: 89 7c 24 2c                   movl    %edi, 0x2c(%esp)
    // 5e: 89 6c 24 28                   movl    %ebp, 0x28(%esp)
    // 62: 89 74 24 24                   movl    %esi, 0x24(%esp)
    // 66: 83 c4 10                      addl    $0x10, %esp
    // 69: 5e                            popl    %esi
    // 6a: 5f                            popl    %edi
    // 6b: 5b                            popl    %ebx
    // 6c: 5d                            popl    %ebp
    // 6d: e9 00 00 00 00                jmp     0x72 <__JIT_ENTRY+0x72>
    // 0000006e:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[114] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x10, 0x8b,
        0x7c, 0x24, 0x2c, 0x8b, 0x74, 0x24, 0x24, 0x8b,
        0x5c, 0x24, 0x28, 0x8b, 0x43, 0xf8, 0x8b, 0x4b,
        0xfc, 0x8d, 0x6b, 0xf8, 0xf2, 0x0f, 0x10, 0x40,
        0x08, 0xf2, 0x0f, 0x59, 0x41, 0x08, 0xf2, 0x0f,
        0x11, 0x44, 0x24, 0x08, 0x89, 0x4c, 0x24, 0x04,
        0x89, 0x04, 0x24, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x74, 0x1e, 0x83, 0xc3, 0xfc, 0x89,
        0x45, 0x00, 0x89, 0x7c, 0x24, 0x2c, 0x89, 0x5c,
        0x24, 0x28, 0x89, 0x74, 0x24, 0x24, 0x83, 0xc4,
        0x10, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x7c, 0x24, 0x2c, 0x89, 0x6c,
        0x24, 0x28, 0x89, 0x74, 0x24, 0x24, 0x83, 0xc4,
        0x10, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x34, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs + -0x4);
    patch_x86_64_32rx(code + 0x56, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x6e, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_MULTIPLY_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_MULTIPLY_INT.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 44 24 24                   movl    0x24(%esp), %eax
    // b: 89 04 24                      movl    %eax, (%esp)
    // e: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 12: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 16: 8b 6c 24 20                   movl    0x20(%esp), %ebp
    // 1a: 8b 7d f8                      movl    -0x8(%ebp), %edi
    // 1d: 8b 5d fc                      movl    -0x4(%ebp), %ebx
    // 20: 53                            pushl   %ebx
    // 21: 57                            pushl   %edi
    // 22: e8 00 00 00 00                calll   0x27 <__JIT_ENTRY+0x27>
    // 00000023:  IMAGE_REL_I386_REL32 __PyLong_Multiply
    // 27: 83 c4 08                      addl    $0x8, %esp
    // 2a: 89 c6                         movl    %eax, %esi
    // 2c: 8b 03                         movl    (%ebx), %eax
    // 2e: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 33: 7f 05                         jg      0x3a <__JIT_ENTRY+0x3a>
    // 35: 48                            decl    %eax
    // 36: 89 03                         movl    %eax, (%ebx)
    // 38: 74 30                         je      0x6a <__JIT_ENTRY+0x6a>
    // 3a: 8b 07                         movl    (%edi), %eax
    // 3c: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 41: 7f 50                         jg      0x93 <__JIT_ENTRY+0x93>
    // 43: 48                            decl    %eax
    // 44: 89 07                         movl    %eax, (%edi)
    // 46: 75 4b                         jne     0x93 <__JIT_ENTRY+0x93>
    // 48: a1 50 14 00 00                movl    0x1450, %eax
    // 00000049:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 4d: 85 c0                         testl   %eax, %eax
    // 4f: 74 0e                         je      0x5f <__JIT_ENTRY+0x5f>
    // 51: ff 35 54 14 00 00             pushl   0x1454
    // 00000053:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 57: 6a 01                         pushl   $0x1
    // 59: 57                            pushl   %edi
    // 5a: ff d0                         calll   *%eax
    // 5c: 83 c4 0c                      addl    $0xc, %esp
    // 5f: 57                            pushl   %edi
    // 60: e8 00 00 00 00                calll   0x65 <__JIT_ENTRY+0x65>
    // 00000061:  IMAGE_REL_I386_REL32 __PyLong_ExactDealloc
    // 65: 83 c4 04                      addl    $0x4, %esp
    // 68: eb 29                         jmp     0x93 <__JIT_ENTRY+0x93>
    // 6a: a1 50 14 00 00                movl    0x1450, %eax
    // 0000006b:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 6f: 85 c0                         testl   %eax, %eax
    // 71: 74 0e                         je      0x81 <__JIT_ENTRY+0x81>
    // 73: ff 35 54 14 00 00             pushl   0x1454
    // 00000075:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 79: 6a 01                         pushl   $0x1
    // 7b: 53                            pushl   %ebx
    // 7c: ff d0                         calll   *%eax
    // 7e: 83 c4 0c                      addl    $0xc, %esp
    // 81: 53                            pushl   %ebx
    // 82: e8 00 00 00 00                calll   0x87 <__JIT_ENTRY+0x87>
    // 00000083:  IMAGE_REL_I386_REL32 __PyLong_ExactDealloc
    // 87: 83 c4 04                      addl    $0x4, %esp
    // 8a: 8b 07                         movl    (%edi), %eax
    // 8c: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 91: 7e b0                         jle     0x43 <__JIT_ENTRY+0x43>
    // 93: 8d 45 f8                      leal    -0x8(%ebp), %eax
    // 96: 85 f6                         testl   %esi, %esi
    // 98: 74 24                         je      0xbe <__JIT_ENTRY+0xbe>
    // 9a: 83 c5 fc                      addl    $-0x4, %ebp
    // 9d: 89 30                         movl    %esi, (%eax)
    // 9f: 8b 04 24                      movl    (%esp), %eax
    // a2: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // a6: 89 6c 24 20                   movl    %ebp, 0x20(%esp)
    // aa: 8b 44 24 04                   movl    0x4(%esp), %eax
    // ae: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // b2: 83 c4 08                      addl    $0x8, %esp
    // b5: 5e                            popl    %esi
    // b6: 5f                            popl    %edi
    // b7: 5b                            popl    %ebx
    // b8: 5d                            popl    %ebp
    // b9: e9 00 00 00 00                jmp     0xbe <__JIT_ENTRY+0xbe>
    // 000000ba:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // be: 8b 0c 24                      movl    (%esp), %ecx
    // c1: 89 4c 24 24                   movl    %ecx, 0x24(%esp)
    // c5: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // c9: 8b 44 24 04                   movl    0x4(%esp), %eax
    // cd: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // d1: 83 c4 08                      addl    $0x8, %esp
    // d4: 5e                            popl    %esi
    // d5: 5f                            popl    %edi
    // d6: 5b                            popl    %ebx
    // d7: 5d                            popl    %ebp
    // d8: e9 00 00 00 00                jmp     0xdd <__JIT_ENTRY+0xdd>
    // 000000d9:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[221] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x44, 0x24, 0x24, 0x89, 0x04, 0x24, 0x8b, 0x44,
        0x24, 0x1c, 0x89, 0x44, 0x24, 0x04, 0x8b, 0x6c,
        0x24, 0x20, 0x8b, 0x7d, 0xf8, 0x8b, 0x5d, 0xfc,
        0x53, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x08, 0x89, 0xc6, 0x8b, 0x03, 0x3d, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x05, 0x48, 0x89, 0x03,
        0x74, 0x30, 0x8b, 0x07, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x50, 0x48, 0x89, 0x07, 0x75, 0x4b,
        0xa1, 0x50, 0x14, 0x00, 0x00, 0x85, 0xc0, 0x74,
        0x0e, 0xff, 0x35, 0x54, 0x14, 0x00, 0x00, 0x6a,
        0x01, 0x57, 0xff, 0xd0, 0x83, 0xc4, 0x0c, 0x57,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04,
        0xeb, 0x29, 0xa1, 0x50, 0x14, 0x00, 0x00, 0x85,
        0xc0, 0x74, 0x0e, 0xff, 0x35, 0x54, 0x14, 0x00,
        0x00, 0x6a, 0x01, 0x53, 0xff, 0xd0, 0x83, 0xc4,
        0x0c, 0x53, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x8b, 0x07, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7e, 0xb0, 0x8d, 0x45, 0xf8, 0x85, 0xf6,
        0x74, 0x24, 0x83, 0xc5, 0xfc, 0x89, 0x30, 0x8b,
        0x04, 0x24, 0x89, 0x44, 0x24, 0x24, 0x89, 0x6c,
        0x24, 0x20, 0x8b, 0x44, 0x24, 0x04, 0x89, 0x44,
        0x24, 0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0c,
        0x24, 0x89, 0x4c, 0x24, 0x24, 0x89, 0x44, 0x24,
        0x20, 0x8b, 0x44, 0x24, 0x04, 0x89, 0x44, 0x24,
        0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x23, (uintptr_t)&_PyLong_Multiply + -0x4);
    patch_32(code + 0x49, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x53, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)&_PyLong_ExactDealloc + -0x4);
    patch_32(code + 0x6b, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x75, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x83, (uintptr_t)&_PyLong_ExactDealloc + -0x4);
    patch_x86_64_32rx(code + 0xba, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xd9, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_SUBSCR_CHECK_FUNC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_CHECK_FUNC.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 54 24 1c                   movl    0x1c(%esp), %edx
    // 8: 8b 4c 24 18                   movl    0x18(%esp), %ecx
    // c: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 10: 8b 71 f8                      movl    -0x8(%ecx), %esi
    // 13: 8b 7e 04                      movl    0x4(%esi), %edi
    // 16: f6 47 55 02                   testb   $0x2, 0x55(%edi)
    // 1a: 74 59                         je      0x75 <__JIT_ENTRY+0x75>
    // 1c: 8b b7 c8 01 00 00             movl    0x1c8(%edi), %esi
    // 22: 85 f6                         testl   %esi, %esi
    // 24: 74 4f                         je      0x75 <__JIT_ENTRY+0x75>
    // 26: 8b 5e 48                      movl    0x48(%esi), %ebx
    // 29: 3b 9f cc 01 00 00             cmpl    0x1cc(%edi), %ebx
    // 2f: 75 44                         jne     0x75 <__JIT_ENTRY+0x75>
    // 31: 8b ba 94 00 00 00             movl    0x94(%edx), %edi
    // 37: 85 ff                         testl   %edi, %edi
    // 39: 74 3a                         je      0x75 <__JIT_ENTRY+0x75>
    // 3b: 8b 5e 18                      movl    0x18(%esi), %ebx
    // 3e: 8b aa 98 00 00 00             movl    0x98(%edx), %ebp
    // 44: 29 fd                         subl    %edi, %ebp
    // 46: c1 fd 02                      sarl    $0x2, %ebp
    // 49: 3b 6b 34                      cmpl    0x34(%ebx), %ebp
    // 4c: 7e 27                         jle     0x75 <__JIT_ENTRY+0x75>
    // 4e: 8b 3e                         movl    (%esi), %edi
    // 50: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 56: 7f 03                         jg      0x5b <__JIT_ENTRY+0x5b>
    // 58: 47                            incl    %edi
    // 59: 89 3e                         movl    %edi, (%esi)
    // 5b: 89 31                         movl    %esi, (%ecx)
    // 5d: 83 c1 04                      addl    $0x4, %ecx
    // 60: 89 54 24 1c                   movl    %edx, 0x1c(%esp)
    // 64: 89 4c 24 18                   movl    %ecx, 0x18(%esp)
    // 68: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 6c: 5e                            popl    %esi
    // 6d: 5f                            popl    %edi
    // 6e: 5b                            popl    %ebx
    // 6f: 5d                            popl    %ebp
    // 70: e9 00 00 00 00                jmp     0x75 <__JIT_ENTRY+0x75>
    // 00000071:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 75: 89 54 24 1c                   movl    %edx, 0x1c(%esp)
    // 79: 89 4c 24 18                   movl    %ecx, 0x18(%esp)
    // 7d: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 81: 5e                            popl    %esi
    // 82: 5f                            popl    %edi
    // 83: 5b                            popl    %ebx
    // 84: 5d                            popl    %ebp
    // 85: e9 00 00 00 00                jmp     0x8a <__JIT_ENTRY+0x8a>
    // 00000086:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[138] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x54, 0x24, 0x1c,
        0x8b, 0x4c, 0x24, 0x18, 0x8b, 0x44, 0x24, 0x14,
        0x8b, 0x71, 0xf8, 0x8b, 0x7e, 0x04, 0xf6, 0x47,
        0x55, 0x02, 0x74, 0x59, 0x8b, 0xb7, 0xc8, 0x01,
        0x00, 0x00, 0x85, 0xf6, 0x74, 0x4f, 0x8b, 0x5e,
        0x48, 0x3b, 0x9f, 0xcc, 0x01, 0x00, 0x00, 0x75,
        0x44, 0x8b, 0xba, 0x94, 0x00, 0x00, 0x00, 0x85,
        0xff, 0x74, 0x3a, 0x8b, 0x5e, 0x18, 0x8b, 0xaa,
        0x98, 0x00, 0x00, 0x00, 0x29, 0xfd, 0xc1, 0xfd,
        0x02, 0x3b, 0x6b, 0x34, 0x7e, 0x27, 0x8b, 0x3e,
        0x81, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03,
        0x47, 0x89, 0x3e, 0x89, 0x31, 0x83, 0xc1, 0x04,
        0x89, 0x54, 0x24, 0x1c, 0x89, 0x4c, 0x24, 0x18,
        0x89, 0x44, 0x24, 0x14, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54, 0x24,
        0x1c, 0x89, 0x4c, 0x24, 0x18, 0x89, 0x44, 0x24,
        0x14, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x71, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x86, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__BINARY_OP_SUBSCR_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_DICT.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 4c 24 24                   movl    0x24(%esp), %ecx
    // b: 8b 44 24 20                   movl    0x20(%esp), %eax
    // f: 8b 5c 24 1c                   movl    0x1c(%esp), %ebx
    // 13: 8b 78 f8                      movl    -0x8(%eax), %edi
    // 16: 81 7f 04 00 00 00 00          cmpl    $0x0, 0x4(%edi)
    // 00000019:  IMAGE_REL_I386_DIR32 _PyDict_Type
    // 1d: 74 18                         je      0x37 <__JIT_ENTRY+0x37>
    // 1f: 89 4c 24 24                   movl    %ecx, 0x24(%esp)
    // 23: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 27: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 2b: 83 c4 08                      addl    $0x8, %esp
    // 2e: 5e                            popl    %esi
    // 2f: 5f                            popl    %edi
    // 30: 5b                            popl    %ebx
    // 31: 5d                            popl    %ebp
    // 32: e9 00 00 00 00                jmp     0x37 <__JIT_ENTRY+0x37>
    // 00000033:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 37: 89 0c 24                      movl    %ecx, (%esp)
    // 3a: 8b 70 fc                      movl    -0x4(%eax), %esi
    // 3d: 89 43 20                      movl    %eax, 0x20(%ebx)
    // 40: 8d 44 24 04                   leal    0x4(%esp), %eax
    // 44: 50                            pushl   %eax
    // 45: 56                            pushl   %esi
    // 46: 57                            pushl   %edi
    // 47: e8 00 00 00 00                calll   0x4c <__JIT_ENTRY+0x4c>
    // 00000048:  IMAGE_REL_I386_REL32 _PyDict_GetItemRef
    // 4c: 83 c4 0c                      addl    $0xc, %esp
    // 4f: 8b 6b 20                      movl    0x20(%ebx), %ebp
    // 52: c7 43 20 00 00 00 00          movl    $0x0, 0x20(%ebx)
    // 59: 85 c0                         testl   %eax, %eax
    // 5b: 74 0c                         je      0x69 <__JIT_ENTRY+0x69>
    // 5d: 8b 0f                         movl    (%edi), %ecx
    // 5f: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 65: 7e 26                         jle     0x8d <__JIT_ENTRY+0x8d>
    // 67: eb 36                         jmp     0x9f <__JIT_ENTRY+0x9f>
    // 69: 89 6b 20                      movl    %ebp, 0x20(%ebx)
    // 6c: 56                            pushl   %esi
    // 6d: 89 c5                         movl    %eax, %ebp
    // 6f: e8 00 00 00 00                calll   0x74 <__JIT_ENTRY+0x74>
    // 00000070:  IMAGE_REL_I386_REL32 __PyErr_SetKeyError
    // 74: 89 e8                         movl    %ebp, %eax
    // 76: 83 c4 04                      addl    $0x4, %esp
    // 79: 8b 6b 20                      movl    0x20(%ebx), %ebp
    // 7c: c7 43 20 00 00 00 00          movl    $0x0, 0x20(%ebx)
    // 83: 8b 0f                         movl    (%edi), %ecx
    // 85: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 8b: 7f 12                         jg      0x9f <__JIT_ENTRY+0x9f>
    // 8d: 49                            decl    %ecx
    // 8e: 89 0f                         movl    %ecx, (%edi)
    // 90: 75 0d                         jne     0x9f <__JIT_ENTRY+0x9f>
    // 92: 57                            pushl   %edi
    // 93: 89 c7                         movl    %eax, %edi
    // 95: e8 00 00 00 00                calll   0x9a <__JIT_ENTRY+0x9a>
    // 00000096:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 9a: 89 f8                         movl    %edi, %eax
    // 9c: 83 c4 04                      addl    $0x4, %esp
    // 9f: 8b 0e                         movl    (%esi), %ecx
    // a1: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // a7: 7f 05                         jg      0xae <__JIT_ENTRY+0xae>
    // a9: 49                            decl    %ecx
    // aa: 89 0e                         movl    %ecx, (%esi)
    // ac: 74 29                         je      0xd7 <__JIT_ENTRY+0xd7>
    // ae: 85 c0                         testl   %eax, %eax
    // b0: 7e 36                         jle     0xe8 <__JIT_ENTRY+0xe8>
    // b2: 8b 44 24 04                   movl    0x4(%esp), %eax
    // b6: 89 45 f8                      movl    %eax, -0x8(%ebp)
    // b9: 83 c5 fc                      addl    $-0x4, %ebp
    // bc: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // c0: 89 6c 24 20                   movl    %ebp, 0x20(%esp)
    // c4: 8b 04 24                      movl    (%esp), %eax
    // c7: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // cb: 83 c4 08                      addl    $0x8, %esp
    // ce: 5e                            popl    %esi
    // cf: 5f                            popl    %edi
    // d0: 5b                            popl    %ebx
    // d1: 5d                            popl    %ebp
    // d2: e9 00 00 00 00                jmp     0xd7 <__JIT_ENTRY+0xd7>
    // 000000d3:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // d7: 56                            pushl   %esi
    // d8: 89 c6                         movl    %eax, %esi
    // da: e8 00 00 00 00                calll   0xdf <__JIT_ENTRY+0xdf>
    // 000000db:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // df: 89 f0                         movl    %esi, %eax
    // e1: 83 c4 04                      addl    $0x4, %esp
    // e4: 85 c0                         testl   %eax, %eax
    // e6: 7f ca                         jg      0xb2 <__JIT_ENTRY+0xb2>
    // e8: 83 c5 f8                      addl    $-0x8, %ebp
    // eb: 8b 04 24                      movl    (%esp), %eax
    // ee: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // f2: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // f6: 89 6c 24 20                   movl    %ebp, 0x20(%esp)
    // fa: 83 c4 08                      addl    $0x8, %esp
    // fd: 5e                            popl    %esi
    // fe: 5f                            popl    %edi
    // ff: 5b                            popl    %ebx
    // 100: 5d                            popl    %ebp
    // 101: e9 00 00 00 00                jmp     0x106 <__JIT_ENTRY+0x106>
    // 00000102:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[262] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x4c, 0x24, 0x24, 0x8b, 0x44, 0x24, 0x20, 0x8b,
        0x5c, 0x24, 0x1c, 0x8b, 0x78, 0xf8, 0x81, 0x7f,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x74, 0x18, 0x89,
        0x4c, 0x24, 0x24, 0x89, 0x44, 0x24, 0x20, 0x89,
        0x5c, 0x24, 0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89,
        0x0c, 0x24, 0x8b, 0x70, 0xfc, 0x89, 0x43, 0x20,
        0x8d, 0x44, 0x24, 0x04, 0x50, 0x56, 0x57, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b,
        0x6b, 0x20, 0xc7, 0x43, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xc0, 0x74, 0x0c, 0x8b, 0x0f, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7e, 0x26, 0xeb,
        0x36, 0x89, 0x6b, 0x20, 0x56, 0x89, 0xc5, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xe8, 0x83, 0xc4,
        0x04, 0x8b, 0x6b, 0x20, 0xc7, 0x43, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x0f, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x12, 0x49, 0x89, 0x0f,
        0x75, 0x0d, 0x57, 0x89, 0xc7, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xf8, 0x83, 0xc4, 0x04, 0x8b,
        0x0e, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x05, 0x49, 0x89, 0x0e, 0x74, 0x29, 0x85, 0xc0,
        0x7e, 0x36, 0x8b, 0x44, 0x24, 0x04, 0x89, 0x45,
        0xf8, 0x83, 0xc5, 0xfc, 0x89, 0x5c, 0x24, 0x1c,
        0x89, 0x6c, 0x24, 0x20, 0x8b, 0x04, 0x24, 0x89,
        0x44, 0x24, 0x24, 0x83, 0xc4, 0x08, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x56,
        0x89, 0xc6, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xf0, 0x83, 0xc4, 0x04, 0x85, 0xc0, 0x7f, 0xca,
        0x83, 0xc5, 0xf8, 0x8b, 0x04, 0x24, 0x89, 0x44,
        0x24, 0x24, 0x89, 0x5c, 0x24, 0x1c, 0x89, 0x6c,
        0x24, 0x20, 0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x19, (uintptr_t)&PyDict_Type);
    patch_x86_64_32rx(code + 0x33, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x48, (uintptr_t)&PyDict_GetItemRef + -0x4);
    patch_x86_64_32rx(code + 0x70, (uintptr_t)&_PyErr_SetKeyError + -0x4);
    patch_x86_64_32rx(code + 0x96, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xd3, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xdb, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x102, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_SUBSCR_INIT_CALL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_INIT_CALL.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 4c 24 1c                   movl    0x1c(%esp), %ecx
    // 8: 8b 54 24 18                   movl    0x18(%esp), %edx
    // c: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 10: 8b 5a fc                      movl    -0x4(%edx), %ebx
    // 13: f2 0f 10 42 f4                movsd   -0xc(%edx), %xmm0
    // 18: 8b 7b 18                      movl    0x18(%ebx), %edi
    // 1b: 8b b1 94 00 00 00             movl    0x94(%ecx), %esi
    // 21: 8b 6f 34                      movl    0x34(%edi), %ebp
    // 24: 8d 2c ae                      leal    (%esi,%ebp,4), %ebp
    // 27: 89 a9 94 00 00 00             movl    %ebp, 0x94(%ecx)
    // 2d: 89 46 04                      movl    %eax, 0x4(%esi)
    // 30: 89 5e 08                      movl    %ebx, 0x8(%esi)
    // 33: 8b 2f                         movl    (%edi), %ebp
    // 35: 81 fd ff ff ff 3f             cmpl    $0x3fffffff, %ebp       # imm = 0x3FFFFFFF
    // 3b: 7f 03                         jg      0x40 <__JIT_ENTRY+0x40>
    // 3d: 45                            incl    %ebp
    // 3e: 89 2f                         movl    %ebp, (%edi)
    // 40: 89 3e                         movl    %edi, (%esi)
    // 42: 8b 6b 0c                      movl    0xc(%ebx), %ebp
    // 45: 89 6e 10                      movl    %ebp, 0x10(%esi)
    // 48: 8b 5b 08                      movl    0x8(%ebx), %ebx
    // 4b: 89 5e 0c                      movl    %ebx, 0xc(%esi)
    // 4e: c7 46 14 00 00 00 00          movl    $0x0, 0x14(%esi)
    // 55: 8b 5f 30                      movl    0x30(%edi), %ebx
    // 58: 8d 5c 9e 28                   leal    0x28(%esi,%ebx,4), %ebx
    // 5c: 89 5e 20                      movl    %ebx, 0x20(%esi)
    // 5f: c7 46 18 00 00 00 00          movl    $0x0, 0x18(%esi)
    // 66: 8d 9f 80 00 00 00             leal    0x80(%edi), %ebx
    // 6c: 89 5e 1c                      movl    %ebx, 0x1c(%esi)
    // 6f: c7 46 24 00 00 00 00          movl    $0x0, 0x24(%esi)
    // 76: 83 7f 30 03                   cmpl    $0x3, 0x30(%edi)
    // 7a: 7c 28                         jl      0xa4 <__JIT_ENTRY+0xa4>
    // 7c: bb 0c 00 00 00                movl    $0xc, %ebx
    // 81: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%eax,%eax)
    // 90: c7 04 9e 00 00 00 00          movl    $0x0, (%esi,%ebx,4)
    // 97: 8d 6b 01                      leal    0x1(%ebx), %ebp
    // 9a: 83 c3 f7                      addl    $-0x9, %ebx
    // 9d: 3b 5f 30                      cmpl    0x30(%edi), %ebx
    // a0: 89 eb                         movl    %ebp, %ebx
    // a2: 7c ec                         jl      0x90 <__JIT_ENTRY+0x90>
    // a4: 0f 13 46 28                   movlps  %xmm0, 0x28(%esi)
    // a8: 66 c7 40 24 06 00             movw    $0x6, 0x24(%eax)
    // ae: 89 72 f4                      movl    %esi, -0xc(%edx)
    // b1: 83 c2 f8                      addl    $-0x8, %edx
    // b4: 89 4c 24 1c                   movl    %ecx, 0x1c(%esp)
    // b8: 89 54 24 18                   movl    %edx, 0x18(%esp)
    // bc: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // c0: 5e                            popl    %esi
    // c1: 5f                            popl    %edi
    // c2: 5b                            popl    %ebx
    // c3: 5d                            popl    %ebp
    // c4: e9 00 00 00 00                jmp     0xc9 <__JIT_ENTRY+0xc9>
    // 000000c5:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[196] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x4c, 0x24, 0x1c,
        0x8b, 0x54, 0x24, 0x18, 0x8b, 0x44, 0x24, 0x14,
        0x8b, 0x5a, 0xfc, 0xf2, 0x0f, 0x10, 0x42, 0xf4,
        0x8b, 0x7b, 0x18, 0x8b, 0xb1, 0x94, 0x00, 0x00,
        0x00, 0x8b, 0x6f, 0x34, 0x8d, 0x2c, 0xae, 0x89,
        0xa9, 0x94, 0x00, 0x00, 0x00, 0x89, 0x46, 0x04,
        0x89, 0x5e, 0x08, 0x8b, 0x2f, 0x81, 0xfd, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x03, 0x45, 0x89, 0x2f,
        0x89, 0x3e, 0x8b, 0x6b, 0x0c, 0x89, 0x6e, 0x10,
        0x8b, 0x5b, 0x08, 0x89, 0x5e, 0x0c, 0xc7, 0x46,
        0x14, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x5f, 0x30,
        0x8d, 0x5c, 0x9e, 0x28, 0x89, 0x5e, 0x20, 0xc7,
        0x46, 0x18, 0x00, 0x00, 0x00, 0x00, 0x8d, 0x9f,
        0x80, 0x00, 0x00, 0x00, 0x89, 0x5e, 0x1c, 0xc7,
        0x46, 0x24, 0x00, 0x00, 0x00, 0x00, 0x83, 0x7f,
        0x30, 0x03, 0x7c, 0x28, 0xbb, 0x0c, 0x00, 0x00,
        0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xc7, 0x04, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x8d,
        0x6b, 0x01, 0x83, 0xc3, 0xf7, 0x3b, 0x5f, 0x30,
        0x89, 0xeb, 0x7c, 0xec, 0x0f, 0x13, 0x46, 0x28,
        0x66, 0xc7, 0x40, 0x24, 0x06, 0x00, 0x89, 0x72,
        0xf4, 0x83, 0xc2, 0xf8, 0x89, 0x4c, 0x24, 0x1c,
        0x89, 0x54, 0x24, 0x18, 0x89, 0x44, 0x24, 0x14,
        0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__BINARY_OP_SUBSCR_LIST_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_LIST_INT.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 7c 24 24                   movl    0x24(%esp), %edi
    // b: 8b 5c 24 20                   movl    0x20(%esp), %ebx
    // f: 8b 74 24 1c                   movl    0x1c(%esp), %esi
    // 13: 8b 6b fc                      movl    -0x4(%ebx), %ebp
    // 16: 81 7d 04 00 00 00 00          cmpl    $0x0, 0x4(%ebp)
    // 00000019:  IMAGE_REL_I386_DIR32 _PyLong_Type
    // 1d: 0f 85 c3 00 00 00             jne     0xe6 <__JIT_ENTRY+0xe6>
    // 23: 8b 53 f8                      movl    -0x8(%ebx), %edx
    // 26: 81 7a 04 00 00 00 00          cmpl    $0x0, 0x4(%edx)
    // 00000029:  IMAGE_REL_I386_DIR32 _PyList_Type
    // 2d: 0f 85 b3 00 00 00             jne     0xe6 <__JIT_ENTRY+0xe6>
    // 33: 8b 45 08                      movl    0x8(%ebp), %eax
    // 36: 83 e0 fb                      andl    $-0x5, %eax
    // 39: 83 f8 09                      cmpl    $0x9, %eax
    // 3c: 0f 83 a4 00 00 00             jae     0xe6 <__JIT_ENTRY+0xe6>
    // 42: 8b 45 0c                      movl    0xc(%ebp), %eax
    // 45: 3b 42 08                      cmpl    0x8(%edx), %eax
    // 48: 0f 8d 98 00 00 00             jge     0xe6 <__JIT_ENTRY+0xe6>
    // 4e: 8b 4a 0c                      movl    0xc(%edx), %ecx
    // 51: 8b 0c 81                      movl    (%ecx,%eax,4), %ecx
    // 54: 8b 01                         movl    (%ecx), %eax
    // 56: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 5b: 7f 03                         jg      0x60 <__JIT_ENTRY+0x60>
    // 5d: 40                            incl    %eax
    // 5e: 89 01                         movl    %eax, (%ecx)
    // 60: 83 c3 f8                      addl    $-0x8, %ebx
    // 63: 8b 45 00                      movl    (%ebp), %eax
    // 66: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 6b: 7f 34                         jg      0xa1 <__JIT_ENTRY+0xa1>
    // 6d: 48                            decl    %eax
    // 6e: 89 45 00                      movl    %eax, (%ebp)
    // 71: 75 2e                         jne     0xa1 <__JIT_ENTRY+0xa1>
    // 73: 89 0c 24                      movl    %ecx, (%esp)
    // 76: 89 54 24 04                   movl    %edx, 0x4(%esp)
    // 7a: a1 50 14 00 00                movl    0x1450, %eax
    // 0000007b:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 7f: 85 c0                         testl   %eax, %eax
    // 81: 74 0e                         je      0x91 <__JIT_ENTRY+0x91>
    // 83: ff 35 54 14 00 00             pushl   0x1454
    // 00000085:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 89: 6a 01                         pushl   $0x1
    // 8b: 55                            pushl   %ebp
    // 8c: ff d0                         calll   *%eax
    // 8e: 83 c4 0c                      addl    $0xc, %esp
    // 91: 55                            pushl   %ebp
    // 92: e8 00 00 00 00                calll   0x97 <__JIT_ENTRY+0x97>
    // 00000093:  IMAGE_REL_I386_REL32 __PyLong_ExactDealloc
    // 97: 83 c4 04                      addl    $0x4, %esp
    // 9a: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 9e: 8b 0c 24                      movl    (%esp), %ecx
    // a1: 89 5e 20                      movl    %ebx, 0x20(%esi)
    // a4: 8b 02                         movl    (%edx), %eax
    // a6: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // ab: 7f 12                         jg      0xbf <__JIT_ENTRY+0xbf>
    // ad: 48                            decl    %eax
    // ae: 89 02                         movl    %eax, (%edx)
    // b0: 75 0d                         jne     0xbf <__JIT_ENTRY+0xbf>
    // b2: 52                            pushl   %edx
    // b3: 89 cb                         movl    %ecx, %ebx
    // b5: e8 00 00 00 00                calll   0xba <__JIT_ENTRY+0xba>
    // 000000b6:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // ba: 89 d9                         movl    %ebx, %ecx
    // bc: 83 c4 04                      addl    $0x4, %esp
    // bf: 8b 46 20                      movl    0x20(%esi), %eax
    // c2: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // c9: 89 08                         movl    %ecx, (%eax)
    // cb: 83 c0 04                      addl    $0x4, %eax
    // ce: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // d2: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // d6: 89 74 24 1c                   movl    %esi, 0x1c(%esp)
    // da: 83 c4 08                      addl    $0x8, %esp
    // dd: 5e                            popl    %esi
    // de: 5f                            popl    %edi
    // df: 5b                            popl    %ebx
    // e0: 5d                            popl    %ebp
    // e1: e9 00 00 00 00                jmp     0xe6 <__JIT_ENTRY+0xe6>
    // 000000e2:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // e6: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // ea: 89 5c 24 20                   movl    %ebx, 0x20(%esp)
    // ee: 89 74 24 1c                   movl    %esi, 0x1c(%esp)
    // f2: 83 c4 08                      addl    $0x8, %esp
    // f5: 5e                            popl    %esi
    // f6: 5f                            popl    %edi
    // f7: 5b                            popl    %ebx
    // f8: 5d                            popl    %ebp
    // f9: e9 00 00 00 00                jmp     0xfe <__JIT_ENTRY+0xfe>
    // 000000fa:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[254] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x7c, 0x24, 0x24, 0x8b, 0x5c, 0x24, 0x20, 0x8b,
        0x74, 0x24, 0x1c, 0x8b, 0x6b, 0xfc, 0x81, 0x7d,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xc3,
        0x00, 0x00, 0x00, 0x8b, 0x53, 0xf8, 0x81, 0x7a,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xb3,
        0x00, 0x00, 0x00, 0x8b, 0x45, 0x08, 0x83, 0xe0,
        0xfb, 0x83, 0xf8, 0x09, 0x0f, 0x83, 0xa4, 0x00,
        0x00, 0x00, 0x8b, 0x45, 0x0c, 0x3b, 0x42, 0x08,
        0x0f, 0x8d, 0x98, 0x00, 0x00, 0x00, 0x8b, 0x4a,
        0x0c, 0x8b, 0x0c, 0x81, 0x8b, 0x01, 0x3d, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x03, 0x40, 0x89, 0x01,
        0x83, 0xc3, 0xf8, 0x8b, 0x45, 0x00, 0x3d, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x34, 0x48, 0x89, 0x45,
        0x00, 0x75, 0x2e, 0x89, 0x0c, 0x24, 0x89, 0x54,
        0x24, 0x04, 0xa1, 0x50, 0x14, 0x00, 0x00, 0x85,
        0xc0, 0x74, 0x0e, 0xff, 0x35, 0x54, 0x14, 0x00,
        0x00, 0x6a, 0x01, 0x55, 0xff, 0xd0, 0x83, 0xc4,
        0x0c, 0x55, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x8b, 0x54, 0x24, 0x04, 0x8b, 0x0c,
        0x24, 0x89, 0x5e, 0x20, 0x8b, 0x02, 0x3d, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x12, 0x48, 0x89, 0x02,
        0x75, 0x0d, 0x52, 0x89, 0xcb, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xd9, 0x83, 0xc4, 0x04, 0x8b,
        0x46, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x08, 0x83, 0xc0, 0x04, 0x89, 0x7c,
        0x24, 0x24, 0x89, 0x44, 0x24, 0x20, 0x89, 0x74,
        0x24, 0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x7c,
        0x24, 0x24, 0x89, 0x5c, 0x24, 0x20, 0x89, 0x74,
        0x24, 0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x19, (uintptr_t)&PyLong_Type);
    patch_32(code + 0x29, (uintptr_t)&PyList_Type);
    patch_32(code + 0x7b, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x85, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x93, (uintptr_t)&_PyLong_ExactDealloc + -0x4);
    patch_x86_64_32rx(code + 0xb6, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xe2, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xfa, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__BINARY_OP_SUBSCR_STR_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_STR_INT.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 7c 24 24                   movl    0x24(%esp), %edi
    // b: 8b 5c 24 20                   movl    0x20(%esp), %ebx
    // f: 8b 74 24 1c                   movl    0x1c(%esp), %esi
    // 13: 8b 6b fc                      movl    -0x4(%ebx), %ebp
    // 16: 81 7d 04 00 00 00 00          cmpl    $0x0, 0x4(%ebp)
    // 00000019:  IMAGE_REL_I386_DIR32 _PyLong_Type
    // 1d: 0f 85 c3 00 00 00             jne     0xe6 <__JIT_ENTRY+0xe6>
    // 23: 8b 4b f8                      movl    -0x8(%ebx), %ecx
    // 26: 81 79 04 00 00 00 00          cmpl    $0x0, 0x4(%ecx)
    // 00000029:  IMAGE_REL_I386_DIR32 _PyUnicode_Type
    // 2d: 0f 85 b3 00 00 00             jne     0xe6 <__JIT_ENTRY+0xe6>
    // 33: 8b 45 08                      movl    0x8(%ebp), %eax
    // 36: 83 e0 fb                      andl    $-0x5, %eax
    // 39: 83 f8 09                      cmpl    $0x9, %eax
    // 3c: 0f 83 a4 00 00 00             jae     0xe6 <__JIT_ENTRY+0xe6>
    // 42: 8b 45 0c                      movl    0xc(%ebp), %eax
    // 45: 39 41 08                      cmpl    %eax, 0x8(%ecx)
    // 48: 0f 8e 98 00 00 00             jle     0xe6 <__JIT_ENTRY+0xe6>
    // 4e: 89 0c 24                      movl    %ecx, (%esp)
    // 51: 0f b7 49 12                   movzwl  0x12(%ecx), %ecx
    // 55: 89 ca                         movl    %ecx, %edx
    // 57: 83 e2 07                      andl    $0x7, %edx
    // 5a: 83 fa 02                      cmpl    $0x2, %edx
    // 5d: 74 16                         je      0x75 <__JIT_ENTRY+0x75>
    // 5f: 83 fa 01                      cmpl    $0x1, %edx
    // 62: 75 22                         jne     0x86 <__JIT_ENTRY+0x86>
    // 64: f6 c1 08                      testb   $0x8, %cl
    // 67: 75 2a                         jne     0x93 <__JIT_ENTRY+0x93>
    // 69: 8b 14 24                      movl    (%esp), %edx
    // 6c: 8b 4a 1c                      movl    0x1c(%edx), %ecx
    // 6f: 0f b6 0c 01                   movzbl  (%ecx,%eax), %ecx
    // 73: eb 69                         jmp     0xde <__JIT_ENTRY+0xde>
    // 75: f6 c1 08                      testb   $0x8, %cl
    // 78: 75 33                         jne     0xad <__JIT_ENTRY+0xad>
    // 7a: 8b 14 24                      movl    (%esp), %edx
    // 7d: 8b 4a 1c                      movl    0x1c(%edx), %ecx
    // 80: 0f b7 0c 41                   movzwl  (%ecx,%eax,2), %ecx
    // 84: eb 58                         jmp     0xde <__JIT_ENTRY+0xde>
    // 86: f6 c1 08                      testb   $0x8, %cl
    // 89: 75 3c                         jne     0xc7 <__JIT_ENTRY+0xc7>
    // 8b: 8b 14 24                      movl    (%esp), %edx
    // 8e: 8b 4a 1c                      movl    0x1c(%edx), %ecx
    // 91: eb 48                         jmp     0xdb <__JIT_ENTRY+0xdb>
    // 93: 31 d2                         xorl    %edx, %edx
    // 95: f6 c1 10                      testb   $0x10, %cl
    // 98: 0f 94 c2                      sete    %dl
    // 9b: 8b 0c 24                      movl    (%esp), %ecx
    // 9e: 8d 0c d1                      leal    (%ecx,%edx,8), %ecx
    // a1: 83 c1 14                      addl    $0x14, %ecx
    // a4: 8b 14 24                      movl    (%esp), %edx
    // a7: 0f b6 0c 01                   movzbl  (%ecx,%eax), %ecx
    // ab: eb 31                         jmp     0xde <__JIT_ENTRY+0xde>
    // ad: 31 d2                         xorl    %edx, %edx
    // af: f6 c1 10                      testb   $0x10, %cl
    // b2: 0f 94 c2                      sete    %dl
    // b5: 8b 0c 24                      movl    (%esp), %ecx
    // b8: 8d 0c d1                      leal    (%ecx,%edx,8), %ecx
    // bb: 83 c1 14                      addl    $0x14, %ecx
    // be: 8b 14 24                      movl    (%esp), %edx
    // c1: 0f b7 0c 41                   movzwl  (%ecx,%eax,2), %ecx
    // c5: eb 17                         jmp     0xde <__JIT_ENTRY+0xde>
    // c7: 31 d2                         xorl    %edx, %edx
    // c9: f6 c1 10                      testb   $0x10, %cl
    // cc: 0f 94 c2                      sete    %dl
    // cf: 8b 0c 24                      movl    (%esp), %ecx
    // d2: 8d 0c d1                      leal    (%ecx,%edx,8), %ecx
    // d5: 83 c1 14                      addl    $0x14, %ecx
    // d8: 8b 14 24                      movl    (%esp), %edx
    // db: 8b 0c 81                      movl    (%ecx,%eax,4), %ecx
    // de: 81 f9 80 00 00 00             cmpl    $0x80, %ecx
    // e4: 72 18                         jb      0xfe <__JIT_ENTRY+0xfe>
    // e6: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // ea: 89 5c 24 20                   movl    %ebx, 0x20(%esp)
    // ee: 89 74 24 1c                   movl    %esi, 0x1c(%esp)
    // f2: 83 c4 08                      addl    $0x8, %esp
    // f5: 5e                            popl    %esi
    // f6: 5f                            popl    %edi
    // f7: 5b                            popl    %ebx
    // f8: 5d                            popl    %ebp
    // f9: e9 00 00 00 00                jmp     0xfe <__JIT_ENTRY+0xfe>
    // 000000fa:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // fe: 83 c3 f8                      addl    $-0x8, %ebx
    // 101: 8b 45 00                      movl    (%ebp), %eax
    // 104: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 109: 7f 31                         jg      0x13c <__JIT_ENTRY+0x13c>
    // 10b: 48                            decl    %eax
    // 10c: 89 45 00                      movl    %eax, (%ebp)
    // 10f: 75 2b                         jne     0x13c <__JIT_ENTRY+0x13c>
    // 111: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 115: a1 50 14 00 00                movl    0x1450, %eax
    // 00000116:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 11a: 85 c0                         testl   %eax, %eax
    // 11c: 74 0e                         je      0x12c <__JIT_ENTRY+0x12c>
    // 11e: ff 35 54 14 00 00             pushl   0x1454
    // 00000120:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 124: 6a 01                         pushl   $0x1
    // 126: 55                            pushl   %ebp
    // 127: ff d0                         calll   *%eax
    // 129: 83 c4 0c                      addl    $0xc, %esp
    // 12c: 55                            pushl   %ebp
    // 12d: e8 00 00 00 00                calll   0x132 <__JIT_ENTRY+0x132>
    // 0000012e:  IMAGE_REL_I386_REL32 __PyLong_ExactDealloc
    // 132: 83 c4 04                      addl    $0x4, %esp
    // 135: 8b 14 24                      movl    (%esp), %edx
    // 138: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 13c: 89 5e 20                      movl    %ebx, 0x20(%esi)
    // 13f: 8b 02                         movl    (%edx), %eax
    // 141: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 146: 7f 12                         jg      0x15a <__JIT_ENTRY+0x15a>
    // 148: 48                            decl    %eax
    // 149: 89 02                         movl    %eax, (%edx)
    // 14b: 75 0d                         jne     0x15a <__JIT_ENTRY+0x15a>
    // 14d: 52                            pushl   %edx
    // 14e: 89 cb                         movl    %ecx, %ebx
    // 150: e8 00 00 00 00                calll   0x155 <__JIT_ENTRY+0x155>
    // 00000151:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 155: 89 d9                         movl    %ebx, %ecx
    // 157: 83 c4 04                      addl    $0x4, %esp
    // 15a: 8d 04 49                      leal    (%ecx,%ecx,2), %eax
    // 15d: 8d 04 c5 3c a6 00 00          leal    0xa63c(,%eax,8), %eax
    // 00000160:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 164: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 167: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 16e: 89 01                         movl    %eax, (%ecx)
    // 170: 83 c1 04                      addl    $0x4, %ecx
    // 173: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // 177: 89 4c 24 20                   movl    %ecx, 0x20(%esp)
    // 17b: 89 74 24 1c                   movl    %esi, 0x1c(%esp)
    // 17f: 83 c4 08                      addl    $0x8, %esp
    // 182: 5e                            popl    %esi
    // 183: 5f                            popl    %edi
    // 184: 5b                            popl    %ebx
    // 185: 5d                            popl    %ebp
    // 186: e9 00 00 00 00                jmp     0x18b <__JIT_ENTRY+0x18b>
    // 00000187:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[390] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x7c, 0x24, 0x24, 0x8b, 0x5c, 0x24, 0x20, 0x8b,
        0x74, 0x24, 0x1c, 0x8b, 0x6b, 0xfc, 0x81, 0x7d,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xc3,
        0x00, 0x00, 0x00, 0x8b, 0x4b, 0xf8, 0x81, 0x79,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xb3,
        0x00, 0x00, 0x00, 0x8b, 0x45, 0x08, 0x83, 0xe0,
        0xfb, 0x83, 0xf8, 0x09, 0x0f, 0x83, 0xa4, 0x00,
        0x00, 0x00, 0x8b, 0x45, 0x0c, 0x39, 0x41, 0x08,
        0x0f, 0x8e, 0x98, 0x00, 0x00, 0x00, 0x89, 0x0c,
        0x24, 0x0f, 0xb7, 0x49, 0x12, 0x89, 0xca, 0x83,
        0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x16, 0x83,
        0xfa, 0x01, 0x75, 0x22, 0xf6, 0xc1, 0x08, 0x75,
        0x2a, 0x8b, 0x14, 0x24, 0x8b, 0x4a, 0x1c, 0x0f,
        0xb6, 0x0c, 0x01, 0xeb, 0x69, 0xf6, 0xc1, 0x08,
        0x75, 0x33, 0x8b, 0x14, 0x24, 0x8b, 0x4a, 0x1c,
        0x0f, 0xb7, 0x0c, 0x41, 0xeb, 0x58, 0xf6, 0xc1,
        0x08, 0x75, 0x3c, 0x8b, 0x14, 0x24, 0x8b, 0x4a,
        0x1c, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x10,
        0x0f, 0x94, 0xc2, 0x8b, 0x0c, 0x24, 0x8d, 0x0c,
        0xd1, 0x83, 0xc1, 0x14, 0x8b, 0x14, 0x24, 0x0f,
        0xb6, 0x0c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6,
        0xc1, 0x10, 0x0f, 0x94, 0xc2, 0x8b, 0x0c, 0x24,
        0x8d, 0x0c, 0xd1, 0x83, 0xc1, 0x14, 0x8b, 0x14,
        0x24, 0x0f, 0xb7, 0x0c, 0x41, 0xeb, 0x17, 0x31,
        0xd2, 0xf6, 0xc1, 0x10, 0x0f, 0x94, 0xc2, 0x8b,
        0x0c, 0x24, 0x8d, 0x0c, 0xd1, 0x83, 0xc1, 0x14,
        0x8b, 0x14, 0x24, 0x8b, 0x0c, 0x81, 0x81, 0xf9,
        0x80, 0x00, 0x00, 0x00, 0x72, 0x18, 0x89, 0x7c,
        0x24, 0x24, 0x89, 0x5c, 0x24, 0x20, 0x89, 0x74,
        0x24, 0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc3,
        0xf8, 0x8b, 0x45, 0x00, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x31, 0x48, 0x89, 0x45, 0x00, 0x75,
        0x2b, 0x89, 0x4c, 0x24, 0x04, 0xa1, 0x50, 0x14,
        0x00, 0x00, 0x85, 0xc0, 0x74, 0x0e, 0xff, 0x35,
        0x54, 0x14, 0x00, 0x00, 0x6a, 0x01, 0x55, 0xff,
        0xd0, 0x83, 0xc4, 0x0c, 0x55, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b, 0x14, 0x24,
        0x8b, 0x4c, 0x24, 0x04, 0x89, 0x5e, 0x20, 0x8b,
        0x02, 0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x12,
        0x48, 0x89, 0x02, 0x75, 0x0d, 0x52, 0x89, 0xcb,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0xd9, 0x83,
        0xc4, 0x04, 0x8d, 0x04, 0x49, 0x8d, 0x04, 0xc5,
        0x3c, 0xa6, 0x00, 0x00, 0x8b, 0x4e, 0x20, 0xc7,
        0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x89, 0x01,
        0x83, 0xc1, 0x04, 0x89, 0x7c, 0x24, 0x24, 0x89,
        0x4c, 0x24, 0x20, 0x89, 0x74, 0x24, 0x1c, 0x83,
        0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x19, (uintptr_t)&PyLong_Type);
    patch_32(code + 0x29, (uintptr_t)&PyUnicode_Type);
    patch_x86_64_32rx(code + 0xfa, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32(code + 0x116, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x120, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x12e, (uintptr_t)&_PyLong_ExactDealloc + -0x4);
    patch_x86_64_32rx(code + 0x151, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x160, (uintptr_t)&_PyRuntime + 0xa63c);
}

void
emit__BINARY_OP_SUBSCR_TUPLE_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_TUPLE_INT.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 7c 24 24                   movl    0x24(%esp), %edi
    // b: 8b 5c 24 20                   movl    0x20(%esp), %ebx
    // f: 8b 74 24 1c                   movl    0x1c(%esp), %esi
    // 13: 8b 6b fc                      movl    -0x4(%ebx), %ebp
    // 16: 81 7d 04 00 00 00 00          cmpl    $0x0, 0x4(%ebp)
    // 00000019:  IMAGE_REL_I386_DIR32 _PyLong_Type
    // 1d: 0f 85 c1 00 00 00             jne     0xe4 <__JIT_ENTRY+0xe4>
    // 23: 8b 4b f8                      movl    -0x8(%ebx), %ecx
    // 26: 81 79 04 00 00 00 00          cmpl    $0x0, 0x4(%ecx)
    // 00000029:  IMAGE_REL_I386_DIR32 _PyTuple_Type
    // 2d: 0f 85 b1 00 00 00             jne     0xe4 <__JIT_ENTRY+0xe4>
    // 33: 8b 45 08                      movl    0x8(%ebp), %eax
    // 36: 83 e0 fb                      andl    $-0x5, %eax
    // 39: 83 f8 09                      cmpl    $0x9, %eax
    // 3c: 0f 83 a2 00 00 00             jae     0xe4 <__JIT_ENTRY+0xe4>
    // 42: 8b 45 0c                      movl    0xc(%ebp), %eax
    // 45: 3b 41 08                      cmpl    0x8(%ecx), %eax
    // 48: 0f 8d 96 00 00 00             jge     0xe4 <__JIT_ENTRY+0xe4>
    // 4e: 8b 54 81 0c                   movl    0xc(%ecx,%eax,4), %edx
    // 52: 8b 02                         movl    (%edx), %eax
    // 54: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 59: 7f 03                         jg      0x5e <__JIT_ENTRY+0x5e>
    // 5b: 40                            incl    %eax
    // 5c: 89 02                         movl    %eax, (%edx)
    // 5e: 83 c3 f8                      addl    $-0x8, %ebx
    // 61: 8b 45 00                      movl    (%ebp), %eax
    // 64: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 69: 7f 34                         jg      0x9f <__JIT_ENTRY+0x9f>
    // 6b: 48                            decl    %eax
    // 6c: 89 45 00                      movl    %eax, (%ebp)
    // 6f: 75 2e                         jne     0x9f <__JIT_ENTRY+0x9f>
    // 71: 89 14 24                      movl    %edx, (%esp)
    // 74: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 78: a1 50 14 00 00                movl    0x1450, %eax
    // 00000079:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 7d: 85 c0                         testl   %eax, %eax
    // 7f: 74 0e                         je      0x8f <__JIT_ENTRY+0x8f>
    // 81: ff 35 54 14 00 00             pushl   0x1454
    // 00000083:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 87: 6a 01                         pushl   $0x1
    // 89: 55                            pushl   %ebp
    // 8a: ff d0                         calll   *%eax
    // 8c: 83 c4 0c                      addl    $0xc, %esp
    // 8f: 55                            pushl   %ebp
    // 90: e8 00 00 00 00                calll   0x95 <__JIT_ENTRY+0x95>
    // 00000091:  IMAGE_REL_I386_REL32 __PyLong_ExactDealloc
    // 95: 83 c4 04                      addl    $0x4, %esp
    // 98: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 9c: 8b 14 24                      movl    (%esp), %edx
    // 9f: 89 5e 20                      movl    %ebx, 0x20(%esi)
    // a2: 8b 01                         movl    (%ecx), %eax
    // a4: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // a9: 7f 12                         jg      0xbd <__JIT_ENTRY+0xbd>
    // ab: 48                            decl    %eax
    // ac: 89 01                         movl    %eax, (%ecx)
    // ae: 75 0d                         jne     0xbd <__JIT_ENTRY+0xbd>
    // b0: 51                            pushl   %ecx
    // b1: 89 d3                         movl    %edx, %ebx
    // b3: e8 00 00 00 00                calll   0xb8 <__JIT_ENTRY+0xb8>
    // 000000b4:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // b8: 89 da                         movl    %ebx, %edx
    // ba: 83 c4 04                      addl    $0x4, %esp
    // bd: 8b 46 20                      movl    0x20(%esi), %eax
    // c0: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // c7: 89 10                         movl    %edx, (%eax)
    // c9: 83 c0 04                      addl    $0x4, %eax
    // cc: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // d0: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // d4: 89 74 24 1c                   movl    %esi, 0x1c(%esp)
    // d8: 83 c4 08                      addl    $0x8, %esp
    // db: 5e                            popl    %esi
    // dc: 5f                            popl    %edi
    // dd: 5b                            popl    %ebx
    // de: 5d                            popl    %ebp
    // df: e9 00 00 00 00                jmp     0xe4 <__JIT_ENTRY+0xe4>
    // 000000e0:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // e4: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // e8: 89 5c 24 20                   movl    %ebx, 0x20(%esp)
    // ec: 89 74 24 1c                   movl    %esi, 0x1c(%esp)
    // f0: 83 c4 08                      addl    $0x8, %esp
    // f3: 5e                            popl    %esi
    // f4: 5f                            popl    %edi
    // f5: 5b                            popl    %ebx
    // f6: 5d                            popl    %ebp
    // f7: e9 00 00 00 00                jmp     0xfc <__JIT_ENTRY+0xfc>
    // 000000f8:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[252] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x7c, 0x24, 0x24, 0x8b, 0x5c, 0x24, 0x20, 0x8b,
        0x74, 0x24, 0x1c, 0x8b, 0x6b, 0xfc, 0x81, 0x7d,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xc1,
        0x00, 0x00, 0x00, 0x8b, 0x4b, 0xf8, 0x81, 0x79,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xb1,
        0x00, 0x00, 0x00, 0x8b, 0x45, 0x08, 0x83, 0xe0,
        0xfb, 0x83, 0xf8, 0x09, 0x0f, 0x83, 0xa2, 0x00,
        0x00, 0x00, 0x8b, 0x45, 0x0c, 0x3b, 0x41, 0x08,
        0x0f, 0x8d, 0x96, 0x00, 0x00, 0x00, 0x8b, 0x54,
        0x81, 0x0c, 0x8b, 0x02, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x03, 0x40, 0x89, 0x02, 0x83, 0xc3,
        0xf8, 0x8b, 0x45, 0x00, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x34, 0x48, 0x89, 0x45, 0x00, 0x75,
        0x2e, 0x89, 0x14, 0x24, 0x89, 0x4c, 0x24, 0x04,
        0xa1, 0x50, 0x14, 0x00, 0x00, 0x85, 0xc0, 0x74,
        0x0e, 0xff, 0x35, 0x54, 0x14, 0x00, 0x00, 0x6a,
        0x01, 0x55, 0xff, 0xd0, 0x83, 0xc4, 0x0c, 0x55,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04,
        0x8b, 0x4c, 0x24, 0x04, 0x8b, 0x14, 0x24, 0x89,
        0x5e, 0x20, 0x8b, 0x01, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x12, 0x48, 0x89, 0x01, 0x75, 0x0d,
        0x51, 0x89, 0xd3, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xda, 0x83, 0xc4, 0x04, 0x8b, 0x46, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x89,
        0x10, 0x83, 0xc0, 0x04, 0x89, 0x7c, 0x24, 0x24,
        0x89, 0x44, 0x24, 0x20, 0x89, 0x74, 0x24, 0x1c,
        0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x24,
        0x89, 0x5c, 0x24, 0x20, 0x89, 0x74, 0x24, 0x1c,
        0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x19, (uintptr_t)&PyLong_Type);
    patch_32(code + 0x29, (uintptr_t)&PyTuple_Type);
    patch_32(code + 0x79, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x83, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x91, (uintptr_t)&_PyLong_ExactDealloc + -0x4);
    patch_x86_64_32rx(code + 0xb4, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xe0, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xf8, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__BINARY_OP_SUBTRACT_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBTRACT_FLOAT.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 10                      subl    $0x10, %esp
    // 7: 8b 7c 24 2c                   movl    0x2c(%esp), %edi
    // b: 8b 74 24 24                   movl    0x24(%esp), %esi
    // f: 8b 5c 24 28                   movl    0x28(%esp), %ebx
    // 13: 8b 43 f8                      movl    -0x8(%ebx), %eax
    // 16: 8b 4b fc                      movl    -0x4(%ebx), %ecx
    // 19: 8d 6b f8                      leal    -0x8(%ebx), %ebp
    // 1c: f2 0f 10 40 08                movsd   0x8(%eax), %xmm0
    // 21: f2 0f 5c 41 08                subsd   0x8(%ecx), %xmm0
    // 26: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%esp)
    // 2c: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 30: 89 04 24                      movl    %eax, (%esp)
    // 33: e8 00 00 00 00                calll   0x38 <__JIT_ENTRY+0x38>
    // 00000034:  IMAGE_REL_I386_REL32 __PyFloat_FromDouble_ConsumeInputs
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 74 1e                         je      0x5a <__JIT_ENTRY+0x5a>
    // 3c: 83 c3 fc                      addl    $-0x4, %ebx
    // 3f: 89 45 00                      movl    %eax, (%ebp)
    // 42: 89 7c 24 2c                   movl    %edi, 0x2c(%esp)
    // 46: 89 5c 24 28                   movl    %ebx, 0x28(%esp)
    // 4a: 89 74 24 24                   movl    %esi, 0x24(%esp)
    // 4e: 83 c4 10                      addl    $0x10, %esp
    // 51: 5e                            popl    %esi
    // 52: 5f                            popl    %edi
    // 53: 5b                            popl    %ebx
    // 54: 5d                            popl    %ebp
    // 55: e9 00 00 00 00                jmp     0x5a <__JIT_ENTRY+0x5a>
    // 00000056:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 5a: 89 7c 24 2c                   movl    %edi, 0x2c(%esp)
    // 5e: 89 6c 24 28                   movl    %ebp, 0x28(%esp)
    // 62: 89 74 24 24                   movl    %esi, 0x24(%esp)
    // 66: 83 c4 10                      addl    $0x10, %esp
    // 69: 5e                            popl    %esi
    // 6a: 5f                            popl    %edi
    // 6b: 5b                            popl    %ebx
    // 6c: 5d                            popl    %ebp
    // 6d: e9 00 00 00 00                jmp     0x72 <__JIT_ENTRY+0x72>
    // 0000006e:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[114] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x10, 0x8b,
        0x7c, 0x24, 0x2c, 0x8b, 0x74, 0x24, 0x24, 0x8b,
        0x5c, 0x24, 0x28, 0x8b, 0x43, 0xf8, 0x8b, 0x4b,
        0xfc, 0x8d, 0x6b, 0xf8, 0xf2, 0x0f, 0x10, 0x40,
        0x08, 0xf2, 0x0f, 0x5c, 0x41, 0x08, 0xf2, 0x0f,
        0x11, 0x44, 0x24, 0x08, 0x89, 0x4c, 0x24, 0x04,
        0x89, 0x04, 0x24, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x74, 0x1e, 0x83, 0xc3, 0xfc, 0x89,
        0x45, 0x00, 0x89, 0x7c, 0x24, 0x2c, 0x89, 0x5c,
        0x24, 0x28, 0x89, 0x74, 0x24, 0x24, 0x83, 0xc4,
        0x10, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x7c, 0x24, 0x2c, 0x89, 0x6c,
        0x24, 0x28, 0x89, 0x74, 0x24, 0x24, 0x83, 0xc4,
        0x10, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x34, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs + -0x4);
    patch_x86_64_32rx(code + 0x56, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x6e, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_SUBTRACT_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBTRACT_INT.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 44 24 24                   movl    0x24(%esp), %eax
    // b: 89 04 24                      movl    %eax, (%esp)
    // e: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 12: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 16: 8b 6c 24 20                   movl    0x20(%esp), %ebp
    // 1a: 8b 7d f8                      movl    -0x8(%ebp), %edi
    // 1d: 8b 5d fc                      movl    -0x4(%ebp), %ebx
    // 20: 53                            pushl   %ebx
    // 21: 57                            pushl   %edi
    // 22: e8 00 00 00 00                calll   0x27 <__JIT_ENTRY+0x27>
    // 00000023:  IMAGE_REL_I386_REL32 __PyLong_Subtract
    // 27: 83 c4 08                      addl    $0x8, %esp
    // 2a: 89 c6                         movl    %eax, %esi
    // 2c: 8b 03                         movl    (%ebx), %eax
    // 2e: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 33: 7f 05                         jg      0x3a <__JIT_ENTRY+0x3a>
    // 35: 48                            decl    %eax
    // 36: 89 03                         movl    %eax, (%ebx)
    // 38: 74 30                         je      0x6a <__JIT_ENTRY+0x6a>
    // 3a: 8b 07                         movl    (%edi), %eax
    // 3c: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 41: 7f 50                         jg      0x93 <__JIT_ENTRY+0x93>
    // 43: 48                            decl    %eax
    // 44: 89 07                         movl    %eax, (%edi)
    // 46: 75 4b                         jne     0x93 <__JIT_ENTRY+0x93>
    // 48: a1 50 14 00 00                movl    0x1450, %eax
    // 00000049:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 4d: 85 c0                         testl   %eax, %eax
    // 4f: 74 0e                         je      0x5f <__JIT_ENTRY+0x5f>
    // 51: ff 35 54 14 00 00             pushl   0x1454
    // 00000053:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 57: 6a 01                         pushl   $0x1
    // 59: 57                            pushl   %edi
    // 5a: ff d0                         calll   *%eax
    // 5c: 83 c4 0c                      addl    $0xc, %esp
    // 5f: 57                            pushl   %edi
    // 60: e8 00 00 00 00                calll   0x65 <__JIT_ENTRY+0x65>
    // 00000061:  IMAGE_REL_I386_REL32 __PyLong_ExactDealloc
    // 65: 83 c4 04                      addl    $0x4, %esp
    // 68: eb 29                         jmp     0x93 <__JIT_ENTRY+0x93>
    // 6a: a1 50 14 00 00                movl    0x1450, %eax
    // 0000006b:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 6f: 85 c0                         testl   %eax, %eax
    // 71: 74 0e                         je      0x81 <__JIT_ENTRY+0x81>
    // 73: ff 35 54 14 00 00             pushl   0x1454
    // 00000075:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 79: 6a 01                         pushl   $0x1
    // 7b: 53                            pushl   %ebx
    // 7c: ff d0                         calll   *%eax
    // 7e: 83 c4 0c                      addl    $0xc, %esp
    // 81: 53                            pushl   %ebx
    // 82: e8 00 00 00 00                calll   0x87 <__JIT_ENTRY+0x87>
    // 00000083:  IMAGE_REL_I386_REL32 __PyLong_ExactDealloc
    // 87: 83 c4 04                      addl    $0x4, %esp
    // 8a: 8b 07                         movl    (%edi), %eax
    // 8c: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 91: 7e b0                         jle     0x43 <__JIT_ENTRY+0x43>
    // 93: 8d 45 f8                      leal    -0x8(%ebp), %eax
    // 96: 85 f6                         testl   %esi, %esi
    // 98: 74 24                         je      0xbe <__JIT_ENTRY+0xbe>
    // 9a: 83 c5 fc                      addl    $-0x4, %ebp
    // 9d: 89 30                         movl    %esi, (%eax)
    // 9f: 8b 04 24                      movl    (%esp), %eax
    // a2: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // a6: 89 6c 24 20                   movl    %ebp, 0x20(%esp)
    // aa: 8b 44 24 04                   movl    0x4(%esp), %eax
    // ae: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // b2: 83 c4 08                      addl    $0x8, %esp
    // b5: 5e                            popl    %esi
    // b6: 5f                            popl    %edi
    // b7: 5b                            popl    %ebx
    // b8: 5d                            popl    %ebp
    // b9: e9 00 00 00 00                jmp     0xbe <__JIT_ENTRY+0xbe>
    // 000000ba:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // be: 8b 0c 24                      movl    (%esp), %ecx
    // c1: 89 4c 24 24                   movl    %ecx, 0x24(%esp)
    // c5: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // c9: 8b 44 24 04                   movl    0x4(%esp), %eax
    // cd: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // d1: 83 c4 08                      addl    $0x8, %esp
    // d4: 5e                            popl    %esi
    // d5: 5f                            popl    %edi
    // d6: 5b                            popl    %ebx
    // d7: 5d                            popl    %ebp
    // d8: e9 00 00 00 00                jmp     0xdd <__JIT_ENTRY+0xdd>
    // 000000d9:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[221] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x44, 0x24, 0x24, 0x89, 0x04, 0x24, 0x8b, 0x44,
        0x24, 0x1c, 0x89, 0x44, 0x24, 0x04, 0x8b, 0x6c,
        0x24, 0x20, 0x8b, 0x7d, 0xf8, 0x8b, 0x5d, 0xfc,
        0x53, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x08, 0x89, 0xc6, 0x8b, 0x03, 0x3d, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x05, 0x48, 0x89, 0x03,
        0x74, 0x30, 0x8b, 0x07, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x50, 0x48, 0x89, 0x07, 0x75, 0x4b,
        0xa1, 0x50, 0x14, 0x00, 0x00, 0x85, 0xc0, 0x74,
        0x0e, 0xff, 0x35, 0x54, 0x14, 0x00, 0x00, 0x6a,
        0x01, 0x57, 0xff, 0xd0, 0x83, 0xc4, 0x0c, 0x57,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04,
        0xeb, 0x29, 0xa1, 0x50, 0x14, 0x00, 0x00, 0x85,
        0xc0, 0x74, 0x0e, 0xff, 0x35, 0x54, 0x14, 0x00,
        0x00, 0x6a, 0x01, 0x53, 0xff, 0xd0, 0x83, 0xc4,
        0x0c, 0x53, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x8b, 0x07, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7e, 0xb0, 0x8d, 0x45, 0xf8, 0x85, 0xf6,
        0x74, 0x24, 0x83, 0xc5, 0xfc, 0x89, 0x30, 0x8b,
        0x04, 0x24, 0x89, 0x44, 0x24, 0x24, 0x89, 0x6c,
        0x24, 0x20, 0x8b, 0x44, 0x24, 0x04, 0x89, 0x44,
        0x24, 0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0c,
        0x24, 0x89, 0x4c, 0x24, 0x24, 0x89, 0x44, 0x24,
        0x20, 0x8b, 0x44, 0x24, 0x04, 0x89, 0x44, 0x24,
        0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x23, (uintptr_t)&_PyLong_Subtract + -0x4);
    patch_32(code + 0x49, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x53, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)&_PyLong_ExactDealloc + -0x4);
    patch_32(code + 0x6b, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x75, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x83, (uintptr_t)&_PyLong_ExactDealloc + -0x4);
    patch_x86_64_32rx(code + 0xba, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xd9, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_SLICE.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 9: 89 04 24                      movl    %eax, (%esp)
    // c: 8b 5c 24 18                   movl    0x18(%esp), %ebx
    // 10: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 14: 8b 48 fc                      movl    -0x4(%eax), %ecx
    // 17: 8b 68 f4                      movl    -0xc(%eax), %ebp
    // 1a: 8b 50 f8                      movl    -0x8(%eax), %edx
    // 1d: 89 43 20                      movl    %eax, 0x20(%ebx)
    // 20: 51                            pushl   %ecx
    // 21: 52                            pushl   %edx
    // 22: e8 00 00 00 00                calll   0x27 <__JIT_ENTRY+0x27>
    // 00000023:  IMAGE_REL_I386_REL32 __PyBuildSlice_ConsumeRefs
    // 27: 83 c4 08                      addl    $0x8, %esp
    // 2a: 89 c7                         movl    %eax, %edi
    // 2c: 8b 43 20                      movl    0x20(%ebx), %eax
    // 2f: 85 ff                         testl   %edi, %edi
    // 31: 74 31                         je      0x64 <__JIT_ENTRY+0x64>
    // 33: 83 c0 f8                      addl    $-0x8, %eax
    // 36: 89 43 20                      movl    %eax, 0x20(%ebx)
    // 39: 57                            pushl   %edi
    // 3a: 55                            pushl   %ebp
    // 3b: e8 00 00 00 00                calll   0x40 <__JIT_ENTRY+0x40>
    // 0000003c:  IMAGE_REL_I386_REL32 _PyObject_GetItem
    // 40: 83 c4 08                      addl    $0x8, %esp
    // 43: 89 c6                         movl    %eax, %esi
    // 45: 8b 07                         movl    (%edi), %eax
    // 47: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 4c: 7f 0e                         jg      0x5c <__JIT_ENTRY+0x5c>
    // 4e: 48                            decl    %eax
    // 4f: 89 07                         movl    %eax, (%edi)
    // 51: 75 09                         jne     0x5c <__JIT_ENTRY+0x5c>
    // 53: 57                            pushl   %edi
    // 54: e8 00 00 00 00                calll   0x59 <__JIT_ENTRY+0x59>
    // 00000055:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 59: 83 c4 04                      addl    $0x4, %esp
    // 5c: 8b 43 20                      movl    0x20(%ebx), %eax
    // 5f: 83 c0 08                      addl    $0x8, %eax
    // 62: eb 02                         jmp     0x66 <__JIT_ENTRY+0x66>
    // 64: 31 f6                         xorl    %esi, %esi
    // 66: 83 c0 f4                      addl    $-0xc, %eax
    // 69: 89 43 20                      movl    %eax, 0x20(%ebx)
    // 6c: 8b 45 00                      movl    (%ebp), %eax
    // 6f: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 74: 7f 06                         jg      0x7c <__JIT_ENTRY+0x7c>
    // 76: 48                            decl    %eax
    // 77: 89 45 00                      movl    %eax, (%ebp)
    // 7a: 74 2e                         je      0xaa <__JIT_ENTRY+0xaa>
    // 7c: 8b 43 20                      movl    0x20(%ebx), %eax
    // 7f: c7 43 20 00 00 00 00          movl    $0x0, 0x20(%ebx)
    // 86: 85 f6                         testl   %esi, %esi
    // 88: 74 37                         je      0xc1 <__JIT_ENTRY+0xc1>
    // 8a: 89 30                         movl    %esi, (%eax)
    // 8c: 83 c0 04                      addl    $0x4, %eax
    // 8f: 8b 0c 24                      movl    (%esp), %ecx
    // 92: 89 4c 24 20                   movl    %ecx, 0x20(%esp)
    // 96: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // 9a: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 9e: 83 c4 04                      addl    $0x4, %esp
    // a1: 5e                            popl    %esi
    // a2: 5f                            popl    %edi
    // a3: 5b                            popl    %ebx
    // a4: 5d                            popl    %ebp
    // a5: e9 00 00 00 00                jmp     0xaa <__JIT_ENTRY+0xaa>
    // 000000a6:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // aa: 55                            pushl   %ebp
    // ab: e8 00 00 00 00                calll   0xb0 <__JIT_ENTRY+0xb0>
    // 000000ac:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // b0: 83 c4 04                      addl    $0x4, %esp
    // b3: 8b 43 20                      movl    0x20(%ebx), %eax
    // b6: c7 43 20 00 00 00 00          movl    $0x0, 0x20(%ebx)
    // bd: 85 f6                         testl   %esi, %esi
    // bf: 75 c9                         jne     0x8a <__JIT_ENTRY+0x8a>
    // c1: 8b 0c 24                      movl    (%esp), %ecx
    // c4: 89 4c 24 20                   movl    %ecx, 0x20(%esp)
    // c8: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // cc: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // d0: 83 c4 04                      addl    $0x4, %esp
    // d3: 5e                            popl    %esi
    // d4: 5f                            popl    %edi
    // d5: 5b                            popl    %ebx
    // d6: 5d                            popl    %ebp
    // d7: e9 00 00 00 00                jmp     0xdc <__JIT_ENTRY+0xdc>
    // 000000d8:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[220] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x44, 0x24,
        0x20, 0x89, 0x04, 0x24, 0x8b, 0x5c, 0x24, 0x18,
        0x8b, 0x44, 0x24, 0x1c, 0x8b, 0x48, 0xfc, 0x8b,
        0x68, 0xf4, 0x8b, 0x50, 0xf8, 0x89, 0x43, 0x20,
        0x51, 0x52, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x08, 0x89, 0xc7, 0x8b, 0x43, 0x20, 0x85,
        0xff, 0x74, 0x31, 0x83, 0xc0, 0xf8, 0x89, 0x43,
        0x20, 0x57, 0x55, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x08, 0x89, 0xc6, 0x8b, 0x07, 0x3d,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x48, 0x89,
        0x07, 0x75, 0x09, 0x57, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x04, 0x8b, 0x43, 0x20, 0x83,
        0xc0, 0x08, 0xeb, 0x02, 0x31, 0xf6, 0x83, 0xc0,
        0xf4, 0x89, 0x43, 0x20, 0x8b, 0x45, 0x00, 0x3d,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x06, 0x48, 0x89,
        0x45, 0x00, 0x74, 0x2e, 0x8b, 0x43, 0x20, 0xc7,
        0x43, 0x20, 0x00, 0x00, 0x00, 0x00, 0x85, 0xf6,
        0x74, 0x37, 0x89, 0x30, 0x83, 0xc0, 0x04, 0x8b,
        0x0c, 0x24, 0x89, 0x4c, 0x24, 0x20, 0x89, 0x44,
        0x24, 0x1c, 0x89, 0x5c, 0x24, 0x18, 0x83, 0xc4,
        0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x55, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0x8b, 0x43, 0x20, 0xc7, 0x43,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x85, 0xf6, 0x75,
        0xc9, 0x8b, 0x0c, 0x24, 0x89, 0x4c, 0x24, 0x20,
        0x89, 0x44, 0x24, 0x1c, 0x89, 0x5c, 0x24, 0x18,
        0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x23, (uintptr_t)&_PyBuildSlice_ConsumeRefs + -0x4);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)&PyObject_GetItem + -0x4);
    patch_x86_64_32rx(code + 0x55, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xa6, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xac, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xd8, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BUILD_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_LIST.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 7c 24 20                   movl    0x20(%esp), %edi
    // 9: 8b 74 24 1c                   movl    0x1c(%esp), %esi
    // d: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 11: 89 04 24                      movl    %eax, (%esp)
    // 14: b8 00 00 00 00                movl    $0x0, %eax
    // 00000015:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 19: 0f b7 e8                      movzwl  %ax, %ebp
    // 1c: 8d 04 ad 00 00 00 00          leal    (,%ebp,4), %eax
    // 23: 89 f3                         movl    %esi, %ebx
    // 25: 29 c3                         subl    %eax, %ebx
    // 27: 55                            pushl   %ebp
    // 28: 53                            pushl   %ebx
    // 29: e8 00 00 00 00                calll   0x2e <__JIT_ENTRY+0x2e>
    // 0000002a:  IMAGE_REL_I386_REL32 __PyList_FromStackRefStealOnSuccess
    // 2e: 83 c4 08                      addl    $0x8, %esp
    // 31: 85 c0                         testl   %eax, %eax
    // 33: 74 27                         je      0x5c <__JIT_ENTRY+0x5c>
    // 35: 89 03                         movl    %eax, (%ebx)
    // 37: b8 01 00 00 00                movl    $0x1, %eax
    // 3c: 29 e8                         subl    %ebp, %eax
    // 3e: 8d 04 86                      leal    (%esi,%eax,4), %eax
    // 41: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // 45: 8b 0c 24                      movl    (%esp), %ecx
    // 48: 89 4c 24 18                   movl    %ecx, 0x18(%esp)
    // 4c: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // 50: 83 c4 04                      addl    $0x4, %esp
    // 53: 5e                            popl    %esi
    // 54: 5f                            popl    %edi
    // 55: 5b                            popl    %ebx
    // 56: 5d                            popl    %ebp
    // 57: e9 00 00 00 00                jmp     0x5c <__JIT_ENTRY+0x5c>
    // 00000058:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 5c: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // 60: 89 74 24 1c                   movl    %esi, 0x1c(%esp)
    // 64: 8b 04 24                      movl    (%esp), %eax
    // 67: 89 44 24 18                   movl    %eax, 0x18(%esp)
    // 6b: 83 c4 04                      addl    $0x4, %esp
    // 6e: 5e                            popl    %esi
    // 6f: 5f                            popl    %edi
    // 70: 5b                            popl    %ebx
    // 71: 5d                            popl    %ebp
    // 72: e9 00 00 00 00                jmp     0x77 <__JIT_ENTRY+0x77>
    // 00000073:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[119] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x7c, 0x24,
        0x20, 0x8b, 0x74, 0x24, 0x1c, 0x8b, 0x44, 0x24,
        0x18, 0x89, 0x04, 0x24, 0xb8, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xb7, 0xe8, 0x8d, 0x04, 0xad, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xf3, 0x29, 0xc3, 0x55,
        0x53, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x08, 0x85, 0xc0, 0x74, 0x27, 0x89, 0x03, 0xb8,
        0x01, 0x00, 0x00, 0x00, 0x29, 0xe8, 0x8d, 0x04,
        0x86, 0x89, 0x7c, 0x24, 0x20, 0x8b, 0x0c, 0x24,
        0x89, 0x4c, 0x24, 0x18, 0x89, 0x44, 0x24, 0x1c,
        0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x20,
        0x89, 0x74, 0x24, 0x1c, 0x8b, 0x04, 0x24, 0x89,
        0x44, 0x24, 0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x15, instruction->oparg);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)&_PyList_FromStackRefStealOnSuccess + -0x4);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x73, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BUILD_MAP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_MAP.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 0c                      subl    $0xc, %esp
    // 7: 8b 44 24 28                   movl    0x28(%esp), %eax
    // b: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // f: 8b 5c 24 24                   movl    0x24(%esp), %ebx
    // 13: 8b 7c 24 20                   movl    0x20(%esp), %edi
    // 17: b8 00 00 00 00                movl    $0x0, %eax
    // 00000018:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 1c: 0f b7 e8                      movzwl  %ax, %ebp
    // 1f: 8d 44 2d 00                   leal    (%ebp,%ebp), %eax
    // 23: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 27: 8d 0c ed 00 00 00 00          leal    (,%ebp,8), %ecx
    // 2e: 89 d8                         movl    %ebx, %eax
    // 30: 29 c8                         subl    %ecx, %eax
    // 32: 89 5f 20                      movl    %ebx, 0x20(%edi)
    // 35: f7 d9                         negl    %ecx
    // 37: 01 d9                         addl    %ebx, %ecx
    // 39: 83 c1 04                      addl    $0x4, %ecx
    // 3c: 55                            pushl   %ebp
    // 3d: 6a 02                         pushl   $0x2
    // 3f: 51                            pushl   %ecx
    // 40: 6a 02                         pushl   $0x2
    // 42: 50                            pushl   %eax
    // 43: e8 00 00 00 00                calll   0x48 <__JIT_ENTRY+0x48>
    // 00000044:  IMAGE_REL_I386_REL32 __PyDict_FromItems
    // 48: 83 c4 14                      addl    $0x14, %esp
    // 4b: 89 c6                         movl    %eax, %esi
    // 4d: 8b 47 20                      movl    0x20(%edi), %eax
    // 50: 89 04 24                      movl    %eax, (%esp)
    // 53: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 5a: 66 85 ed                      testw   %bp, %bp
    // 5d: 74 36                         je      0x95 <__JIT_ENTRY+0x95>
    // 5f: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 63: 8d 68 01                      leal    0x1(%eax), %ebp
    // 66: 83 c3 fc                      addl    $-0x4, %ebx
    // 69: eb 0e                         jmp     0x79 <__JIT_ENTRY+0x79>
    // 6b: 0f 1f 44 00 00                nopl    (%eax,%eax)
    // 70: 4d                            decl    %ebp
    // 71: 83 c3 fc                      addl    $-0x4, %ebx
    // 74: 83 fd 01                      cmpl    $0x1, %ebp
    // 77: 76 1c                         jbe     0x95 <__JIT_ENTRY+0x95>
    // 79: 8b 03                         movl    (%ebx), %eax
    // 7b: 8b 08                         movl    (%eax), %ecx
    // 7d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 83: 7f eb                         jg      0x70 <__JIT_ENTRY+0x70>
    // 85: 49                            decl    %ecx
    // 86: 89 08                         movl    %ecx, (%eax)
    // 88: 75 e6                         jne     0x70 <__JIT_ENTRY+0x70>
    // 8a: 50                            pushl   %eax
    // 8b: e8 00 00 00 00                calll   0x90 <__JIT_ENTRY+0x90>
    // 0000008c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 90: 83 c4 04                      addl    $0x4, %esp
    // 93: eb db                         jmp     0x70 <__JIT_ENTRY+0x70>
    // 95: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 99: 89 c8                         movl    %ecx, %eax
    // 9b: f7 d8                         negl    %eax
    // 9d: 85 f6                         testl   %esi, %esi
    // 9f: 74 2c                         je      0xcd <__JIT_ENTRY+0xcd>
    // a1: 8b 14 24                      movl    (%esp), %edx
    // a4: 89 34 82                      movl    %esi, (%edx,%eax,4)
    // a7: b8 01 00 00 00                movl    $0x1, %eax
    // ac: 29 c8                         subl    %ecx, %eax
    // ae: 8d 04 82                      leal    (%edx,%eax,4), %eax
    // b1: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // b5: 89 4c 24 28                   movl    %ecx, 0x28(%esp)
    // b9: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // bd: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // c1: 83 c4 0c                      addl    $0xc, %esp
    // c4: 5e                            popl    %esi
    // c5: 5f                            popl    %edi
    // c6: 5b                            popl    %ebx
    // c7: 5d                            popl    %ebp
    // c8: e9 00 00 00 00                jmp     0xcd <__JIT_ENTRY+0xcd>
    // 000000c9:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // cd: 8b 0c 24                      movl    (%esp), %ecx
    // d0: 8d 04 81                      leal    (%ecx,%eax,4), %eax
    // d3: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // d7: 89 4c 24 28                   movl    %ecx, 0x28(%esp)
    // db: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // df: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // e3: 83 c4 0c                      addl    $0xc, %esp
    // e6: 5e                            popl    %esi
    // e7: 5f                            popl    %edi
    // e8: 5b                            popl    %ebx
    // e9: 5d                            popl    %ebp
    // ea: e9 00 00 00 00                jmp     0xef <__JIT_ENTRY+0xef>
    // 000000eb:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[239] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x0c, 0x8b,
        0x44, 0x24, 0x28, 0x89, 0x44, 0x24, 0x04, 0x8b,
        0x5c, 0x24, 0x24, 0x8b, 0x7c, 0x24, 0x20, 0xb8,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x8d,
        0x44, 0x2d, 0x00, 0x89, 0x44, 0x24, 0x08, 0x8d,
        0x0c, 0xed, 0x00, 0x00, 0x00, 0x00, 0x89, 0xd8,
        0x29, 0xc8, 0x89, 0x5f, 0x20, 0xf7, 0xd9, 0x01,
        0xd9, 0x83, 0xc1, 0x04, 0x55, 0x6a, 0x02, 0x51,
        0x6a, 0x02, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x14, 0x89, 0xc6, 0x8b, 0x47, 0x20,
        0x89, 0x04, 0x24, 0xc7, 0x47, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x66, 0x85, 0xed, 0x74, 0x36, 0x8b,
        0x44, 0x24, 0x08, 0x8d, 0x68, 0x01, 0x83, 0xc3,
        0xfc, 0xeb, 0x0e, 0x0f, 0x1f, 0x44, 0x00, 0x00,
        0x4d, 0x83, 0xc3, 0xfc, 0x83, 0xfd, 0x01, 0x76,
        0x1c, 0x8b, 0x03, 0x8b, 0x08, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0xeb, 0x49, 0x89, 0x08,
        0x75, 0xe6, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0xeb, 0xdb, 0x8b, 0x4c, 0x24,
        0x08, 0x89, 0xc8, 0xf7, 0xd8, 0x85, 0xf6, 0x74,
        0x2c, 0x8b, 0x14, 0x24, 0x89, 0x34, 0x82, 0xb8,
        0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x8d, 0x04,
        0x82, 0x8b, 0x4c, 0x24, 0x04, 0x89, 0x4c, 0x24,
        0x28, 0x89, 0x7c, 0x24, 0x20, 0x89, 0x44, 0x24,
        0x24, 0x83, 0xc4, 0x0c, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0c, 0x24,
        0x8d, 0x04, 0x81, 0x8b, 0x4c, 0x24, 0x04, 0x89,
        0x4c, 0x24, 0x28, 0x89, 0x7c, 0x24, 0x20, 0x89,
        0x44, 0x24, 0x24, 0x83, 0xc4, 0x0c, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x18, instruction->oparg);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)&_PyDict_FromItems + -0x4);
    patch_x86_64_32rx(code + 0x8c, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xc9, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xeb, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BUILD_SET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_SET.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 14                      subl    $0x14, %esp
    // 7: 8b 74 24 30                   movl    0x30(%esp), %esi
    // b: 8b 5c 24 2c                   movl    0x2c(%esp), %ebx
    // f: 8b 7c 24 28                   movl    0x28(%esp), %edi
    // 13: b8 00 00 00 00                movl    $0x0, %eax
    // 00000014:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 18: 0f b7 e8                      movzwl  %ax, %ebp
    // 1b: 89 e8                         movl    %ebp, %eax
    // 1d: f7 d8                         negl    %eax
    // 1f: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 23: 89 5f 20                      movl    %ebx, 0x20(%edi)
    // 26: 6a 00                         pushl   $0x0
    // 28: e8 00 00 00 00                calll   0x2d <__JIT_ENTRY+0x2d>
    // 00000029:  IMAGE_REL_I386_REL32 _PySet_New
    // 2d: 83 c4 04                      addl    $0x4, %esp
    // 30: 8b 4f 20                      movl    0x20(%edi), %ecx
    // 33: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 3a: 85 c0                         testl   %eax, %eax
    // 3c: 0f 84 e7 00 00 00             je      0x129 <__JIT_ENTRY+0x129>
    // 42: 89 c2                         movl    %eax, %edx
    // 44: b8 00 00 00 00                movl    $0x0, %eax
    // 00000045:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 49: 66 85 c0                      testw   %ax, %ax
    // 4c: 0f 84 40 01 00 00             je      0x192 <__JIT_ENTRY+0x192>
    // 52: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 56: 31 c0                         xorl    %eax, %eax
    // 58: 8b 74 24 04                   movl    0x4(%esp), %esi
    // 5c: 89 54 24 08                   movl    %edx, 0x8(%esp)
    // 60: eb 11                         jmp     0x73 <__JIT_ENTRY+0x73>
    // 62: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%eax,%eax)
    // 70: 46                            incl    %esi
    // 71: 74 23                         je      0x96 <__JIT_ENTRY+0x96>
    // 73: 85 c0                         testl   %eax, %eax
    // 75: 75 f9                         jne     0x70 <__JIT_ENTRY+0x70>
    // 77: 89 4f 20                      movl    %ecx, 0x20(%edi)
    // 7a: ff 34 b3                      pushl   (%ebx,%esi,4)
    // 7d: 52                            pushl   %edx
    // 7e: e8 00 00 00 00                calll   0x83 <__JIT_ENTRY+0x83>
    // 0000007f:  IMAGE_REL_I386_REL32 _PySet_Add
    // 83: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 87: 83 c4 08                      addl    $0x8, %esp
    // 8a: 8b 4f 20                      movl    0x20(%edi), %ecx
    // 8d: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 94: eb da                         jmp     0x70 <__JIT_ENTRY+0x70>
    // 96: 89 0c 24                      movl    %ecx, (%esp)
    // 99: b9 00 00 00 00                movl    $0x0, %ecx
    // 0000009a:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 9e: 66 85 c9                      testw   %cx, %cx
    // a1: 74 3a                         je      0xdd <__JIT_ENTRY+0xdd>
    // a3: 8d 75 01                      leal    0x1(%ebp), %esi
    // a6: 83 c3 fc                      addl    $-0x4, %ebx
    // a9: 89 7c 24 10                   movl    %edi, 0x10(%esp)
    // ad: eb 0a                         jmp     0xb9 <__JIT_ENTRY+0xb9>
    // af: 90                            nop
    // b0: 4e                            decl    %esi
    // b1: 83 c3 fc                      addl    $-0x4, %ebx
    // b4: 83 fe 01                      cmpl    $0x1, %esi
    // b7: 7e 24                         jle     0xdd <__JIT_ENTRY+0xdd>
    // b9: 8b 0b                         movl    (%ebx), %ecx
    // bb: 8b 11                         movl    (%ecx), %edx
    // bd: 81 fa ff ff ff 3f             cmpl    $0x3fffffff, %edx       # imm = 0x3FFFFFFF
    // c3: 7f eb                         jg      0xb0 <__JIT_ENTRY+0xb0>
    // c5: 4a                            decl    %edx
    // c6: 89 11                         movl    %edx, (%ecx)
    // c8: 75 e6                         jne     0xb0 <__JIT_ENTRY+0xb0>
    // ca: 51                            pushl   %ecx
    // cb: 89 c7                         movl    %eax, %edi
    // cd: e8 00 00 00 00                calll   0xd2 <__JIT_ENTRY+0xd2>
    // 000000ce:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // d2: 89 f8                         movl    %edi, %eax
    // d4: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // d8: 83 c4 04                      addl    $0x4, %esp
    // db: eb d3                         jmp     0xb0 <__JIT_ENTRY+0xb0>
    // dd: 85 c0                         testl   %eax, %eax
    // df: 0f 84 a2 00 00 00             je      0x187 <__JIT_ENTRY+0x187>
    // e5: 8b 44 24 04                   movl    0x4(%esp), %eax
    // e9: 8b 0c 24                      movl    (%esp), %ecx
    // ec: 8d 04 81                      leal    (%ecx,%eax,4), %eax
    // ef: 89 47 20                      movl    %eax, 0x20(%edi)
    // f2: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // f6: 8b 01                         movl    (%ecx), %eax
    // f8: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // fd: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // 101: 7f 0e                         jg      0x111 <__JIT_ENTRY+0x111>
    // 103: 48                            decl    %eax
    // 104: 89 01                         movl    %eax, (%ecx)
    // 106: 75 09                         jne     0x111 <__JIT_ENTRY+0x111>
    // 108: 51                            pushl   %ecx
    // 109: e8 00 00 00 00                calll   0x10e <__JIT_ENTRY+0x10e>
    // 0000010a:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 10e: 83 c4 04                      addl    $0x4, %esp
    // 111: 8b 47 20                      movl    0x20(%edi), %eax
    // 114: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 11b: 89 74 24 30                   movl    %esi, 0x30(%esp)
    // 11f: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 123: 89 7c 24 28                   movl    %edi, 0x28(%esp)
    // 127: eb 52                         jmp     0x17b <__JIT_ENTRY+0x17b>
    // 129: 89 0c 24                      movl    %ecx, (%esp)
    // 12c: b8 00 00 00 00                movl    $0x0, %eax
    // 0000012d:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 131: 66 85 c0                      testw   %ax, %ax
    // 134: 74 2f                         je      0x165 <__JIT_ENTRY+0x165>
    // 136: 45                            incl    %ebp
    // 137: 83 c3 fc                      addl    $-0x4, %ebx
    // 13a: eb 0d                         jmp     0x149 <__JIT_ENTRY+0x149>
    // 13c: 0f 1f 40 00                   nopl    (%eax)
    // 140: 4d                            decl    %ebp
    // 141: 83 c3 fc                      addl    $-0x4, %ebx
    // 144: 83 fd 01                      cmpl    $0x1, %ebp
    // 147: 76 1c                         jbe     0x165 <__JIT_ENTRY+0x165>
    // 149: 8b 03                         movl    (%ebx), %eax
    // 14b: 8b 08                         movl    (%eax), %ecx
    // 14d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 153: 7f eb                         jg      0x140 <__JIT_ENTRY+0x140>
    // 155: 49                            decl    %ecx
    // 156: 89 08                         movl    %ecx, (%eax)
    // 158: 75 e6                         jne     0x140 <__JIT_ENTRY+0x140>
    // 15a: 50                            pushl   %eax
    // 15b: e8 00 00 00 00                calll   0x160 <__JIT_ENTRY+0x160>
    // 0000015c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 160: 83 c4 04                      addl    $0x4, %esp
    // 163: eb db                         jmp     0x140 <__JIT_ENTRY+0x140>
    // 165: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 169: 8b 0c 24                      movl    (%esp), %ecx
    // 16c: 8d 04 81                      leal    (%ecx,%eax,4), %eax
    // 16f: 89 74 24 30                   movl    %esi, 0x30(%esp)
    // 173: 89 7c 24 28                   movl    %edi, 0x28(%esp)
    // 177: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 17b: 83 c4 14                      addl    $0x14, %esp
    // 17e: 5e                            popl    %esi
    // 17f: 5f                            popl    %edi
    // 180: 5b                            popl    %ebx
    // 181: 5d                            popl    %ebp
    // 182: e9 00 00 00 00                jmp     0x187 <__JIT_ENTRY+0x187>
    // 00000183:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // 187: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // 18b: 8b 0c 24                      movl    (%esp), %ecx
    // 18e: 8b 54 24 08                   movl    0x8(%esp), %edx
    // 192: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 196: 89 14 81                      movl    %edx, (%ecx,%eax,4)
    // 199: b8 01 00 00 00                movl    $0x1, %eax
    // 19e: 29 e8                         subl    %ebp, %eax
    // 1a0: 8d 04 81                      leal    (%ecx,%eax,4), %eax
    // 1a3: 89 74 24 30                   movl    %esi, 0x30(%esp)
    // 1a7: 89 7c 24 28                   movl    %edi, 0x28(%esp)
    // 1ab: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 1af: 83 c4 14                      addl    $0x14, %esp
    // 1b2: 5e                            popl    %esi
    // 1b3: 5f                            popl    %edi
    // 1b4: 5b                            popl    %ebx
    // 1b5: 5d                            popl    %ebp
    // 1b6: e9 00 00 00 00                jmp     0x1bb <__JIT_ENTRY+0x1bb>
    // 000001b7:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[438] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x14, 0x8b,
        0x74, 0x24, 0x30, 0x8b, 0x5c, 0x24, 0x2c, 0x8b,
        0x7c, 0x24, 0x28, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xe8, 0x89, 0xe8, 0xf7, 0xd8, 0x89,
        0x44, 0x24, 0x04, 0x89, 0x5f, 0x20, 0x6a, 0x00,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04,
        0x8b, 0x4f, 0x20, 0xc7, 0x47, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00,
        0x00, 0x00, 0x89, 0xc2, 0xb8, 0x00, 0x00, 0x00,
        0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x40, 0x01,
        0x00, 0x00, 0x89, 0x74, 0x24, 0x0c, 0x31, 0xc0,
        0x8b, 0x74, 0x24, 0x04, 0x89, 0x54, 0x24, 0x08,
        0xeb, 0x11, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x46, 0x74, 0x23, 0x85, 0xc0, 0x75, 0xf9, 0x89,
        0x4f, 0x20, 0xff, 0x34, 0xb3, 0x52, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x54, 0x24, 0x10, 0x83,
        0xc4, 0x08, 0x8b, 0x4f, 0x20, 0xc7, 0x47, 0x20,
        0x00, 0x00, 0x00, 0x00, 0xeb, 0xda, 0x89, 0x0c,
        0x24, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85,
        0xc9, 0x74, 0x3a, 0x8d, 0x75, 0x01, 0x83, 0xc3,
        0xfc, 0x89, 0x7c, 0x24, 0x10, 0xeb, 0x0a, 0x90,
        0x4e, 0x83, 0xc3, 0xfc, 0x83, 0xfe, 0x01, 0x7e,
        0x24, 0x8b, 0x0b, 0x8b, 0x11, 0x81, 0xfa, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0xeb, 0x4a, 0x89, 0x11,
        0x75, 0xe6, 0x51, 0x89, 0xc7, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xf8, 0x8b, 0x7c, 0x24, 0x14,
        0x83, 0xc4, 0x04, 0xeb, 0xd3, 0x85, 0xc0, 0x0f,
        0x84, 0xa2, 0x00, 0x00, 0x00, 0x8b, 0x44, 0x24,
        0x04, 0x8b, 0x0c, 0x24, 0x8d, 0x04, 0x81, 0x89,
        0x47, 0x20, 0x8b, 0x4c, 0x24, 0x08, 0x8b, 0x01,
        0x3d, 0xff, 0xff, 0xff, 0x3f, 0x8b, 0x74, 0x24,
        0x0c, 0x7f, 0x0e, 0x48, 0x89, 0x01, 0x75, 0x09,
        0x51, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x8b, 0x47, 0x20, 0xc7, 0x47, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x74, 0x24, 0x30, 0x89,
        0x44, 0x24, 0x2c, 0x89, 0x7c, 0x24, 0x28, 0xeb,
        0x52, 0x89, 0x0c, 0x24, 0xb8, 0x00, 0x00, 0x00,
        0x00, 0x66, 0x85, 0xc0, 0x74, 0x2f, 0x45, 0x83,
        0xc3, 0xfc, 0xeb, 0x0d, 0x0f, 0x1f, 0x40, 0x00,
        0x4d, 0x83, 0xc3, 0xfc, 0x83, 0xfd, 0x01, 0x76,
        0x1c, 0x8b, 0x03, 0x8b, 0x08, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0xeb, 0x49, 0x89, 0x08,
        0x75, 0xe6, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0xeb, 0xdb, 0x8b, 0x44, 0x24,
        0x04, 0x8b, 0x0c, 0x24, 0x8d, 0x04, 0x81, 0x89,
        0x74, 0x24, 0x30, 0x89, 0x7c, 0x24, 0x28, 0x89,
        0x44, 0x24, 0x2c, 0x83, 0xc4, 0x14, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x74, 0x24, 0x0c, 0x8b, 0x0c, 0x24, 0x8b, 0x54,
        0x24, 0x08, 0x8b, 0x44, 0x24, 0x04, 0x89, 0x14,
        0x81, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xe8,
        0x8d, 0x04, 0x81, 0x89, 0x74, 0x24, 0x30, 0x89,
        0x7c, 0x24, 0x28, 0x89, 0x44, 0x24, 0x2c, 0x83,
        0xc4, 0x14, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, instruction->oparg);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)&PySet_New + -0x4);
    patch_32(code + 0x45, instruction->oparg);
    patch_x86_64_32rx(code + 0x7f, (uintptr_t)&PySet_Add + -0x4);
    patch_32(code + 0x9a, instruction->oparg);
    patch_x86_64_32rx(code + 0xce, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x10a, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x12d, instruction->oparg);
    patch_x86_64_32rx(code + 0x15c, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x183, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BUILD_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_SLICE.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 10                      subl    $0x10, %esp
    // 7: 8b 54 24 28                   movl    0x28(%esp), %edx
    // b: b8 00 00 00 00                movl    $0x0, %eax
    // 0000000c:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 10: 0f b7 d8                      movzwl  %ax, %ebx
    // 13: 8d 0c 9d 00 00 00 00          leal    (,%ebx,4), %ecx
    // 1a: 89 d5                         movl    %edx, %ebp
    // 1c: 29 cd                         subl    %ecx, %ebp
    // 1e: 8b 45 00                      movl    (%ebp), %eax
    // 21: f7 d9                         negl    %ecx
    // 23: 89 54 24 08                   movl    %edx, 0x8(%esp)
    // 27: 8b 4c 0a 04                   movl    0x4(%edx,%ecx), %ecx
    // 2b: 31 d2                         xorl    %edx, %edx
    // 2d: 66 83 fb 03                   cmpw    $0x3, %bx
    // 31: 75 03                         jne     0x36 <__JIT_ENTRY+0x36>
    // 33: 8b 55 08                      movl    0x8(%ebp), %edx
    // 36: 8b 74 24 2c                   movl    0x2c(%esp), %esi
    // 3a: 89 34 24                      movl    %esi, (%esp)
    // 3d: 8b 74 24 24                   movl    0x24(%esp), %esi
    // 41: 89 74 24 04                   movl    %esi, 0x4(%esp)
    // 45: 52                            pushl   %edx
    // 46: 51                            pushl   %ecx
    // 47: 50                            pushl   %eax
    // 48: e8 00 00 00 00                calll   0x4d <__JIT_ENTRY+0x4d>
    // 00000049:  IMAGE_REL_I386_REL32 _PySlice_New
    // 4d: 83 c4 0c                      addl    $0xc, %esp
    // 50: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 54: b8 00 00 00 00                movl    $0x0, %eax
    // 00000055:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 59: 66 85 c0                      testw   %ax, %ax
    // 5c: 74 37                         je      0x95 <__JIT_ENTRY+0x95>
    // 5e: 8d 73 01                      leal    0x1(%ebx), %esi
    // 61: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 65: 8d 78 fc                      leal    -0x4(%eax), %edi
    // 68: eb 0f                         jmp     0x79 <__JIT_ENTRY+0x79>
    // 6a: 66 0f 1f 44 00 00             nopw    (%eax,%eax)
    // 70: 4e                            decl    %esi
    // 71: 83 c7 fc                      addl    $-0x4, %edi
    // 74: 83 fe 01                      cmpl    $0x1, %esi
    // 77: 76 1c                         jbe     0x95 <__JIT_ENTRY+0x95>
    // 79: 8b 07                         movl    (%edi), %eax
    // 7b: 8b 08                         movl    (%eax), %ecx
    // 7d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 83: 7f eb                         jg      0x70 <__JIT_ENTRY+0x70>
    // 85: 49                            decl    %ecx
    // 86: 89 08                         movl    %ecx, (%eax)
    // 88: 75 e6                         jne     0x70 <__JIT_ENTRY+0x70>
    // 8a: 50                            pushl   %eax
    // 8b: e8 00 00 00 00                calll   0x90 <__JIT_ENTRY+0x90>
    // 0000008c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 90: 83 c4 04                      addl    $0x4, %esp
    // 93: eb db                         jmp     0x70 <__JIT_ENTRY+0x70>
    // 95: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 99: 85 c0                         testl   %eax, %eax
    // 9b: 74 30                         je      0xcd <__JIT_ENTRY+0xcd>
    // 9d: 89 45 00                      movl    %eax, (%ebp)
    // a0: b8 01 00 00 00                movl    $0x1, %eax
    // a5: 29 d8                         subl    %ebx, %eax
    // a7: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // ab: 8d 04 81                      leal    (%ecx,%eax,4), %eax
    // ae: 8b 0c 24                      movl    (%esp), %ecx
    // b1: 89 4c 24 2c                   movl    %ecx, 0x2c(%esp)
    // b5: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // b9: 89 4c 24 24                   movl    %ecx, 0x24(%esp)
    // bd: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // c1: 83 c4 10                      addl    $0x10, %esp
    // c4: 5e                            popl    %esi
    // c5: 5f                            popl    %edi
    // c6: 5b                            popl    %ebx
    // c7: 5d                            popl    %ebp
    // c8: e9 00 00 00 00                jmp     0xcd <__JIT_ENTRY+0xcd>
    // 000000c9:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // cd: 8b 04 24                      movl    (%esp), %eax
    // d0: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // d4: 89 6c 24 28                   movl    %ebp, 0x28(%esp)
    // d8: 8b 44 24 04                   movl    0x4(%esp), %eax
    // dc: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // e0: 83 c4 10                      addl    $0x10, %esp
    // e3: 5e                            popl    %esi
    // e4: 5f                            popl    %edi
    // e5: 5b                            popl    %ebx
    // e6: 5d                            popl    %ebp
    // e7: e9 00 00 00 00                jmp     0xec <__JIT_ENTRY+0xec>
    // 000000e8:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[236] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x10, 0x8b,
        0x54, 0x24, 0x28, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xd8, 0x8d, 0x0c, 0x9d, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xd5, 0x29, 0xcd, 0x8b, 0x45,
        0x00, 0xf7, 0xd9, 0x89, 0x54, 0x24, 0x08, 0x8b,
        0x4c, 0x0a, 0x04, 0x31, 0xd2, 0x66, 0x83, 0xfb,
        0x03, 0x75, 0x03, 0x8b, 0x55, 0x08, 0x8b, 0x74,
        0x24, 0x2c, 0x89, 0x34, 0x24, 0x8b, 0x74, 0x24,
        0x24, 0x89, 0x74, 0x24, 0x04, 0x52, 0x51, 0x50,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x0c,
        0x89, 0x44, 0x24, 0x0c, 0xb8, 0x00, 0x00, 0x00,
        0x00, 0x66, 0x85, 0xc0, 0x74, 0x37, 0x8d, 0x73,
        0x01, 0x8b, 0x44, 0x24, 0x08, 0x8d, 0x78, 0xfc,
        0xeb, 0x0f, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00,
        0x4e, 0x83, 0xc7, 0xfc, 0x83, 0xfe, 0x01, 0x76,
        0x1c, 0x8b, 0x07, 0x8b, 0x08, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0xeb, 0x49, 0x89, 0x08,
        0x75, 0xe6, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0xeb, 0xdb, 0x8b, 0x44, 0x24,
        0x0c, 0x85, 0xc0, 0x74, 0x30, 0x89, 0x45, 0x00,
        0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd8, 0x8b,
        0x4c, 0x24, 0x08, 0x8d, 0x04, 0x81, 0x8b, 0x0c,
        0x24, 0x89, 0x4c, 0x24, 0x2c, 0x8b, 0x4c, 0x24,
        0x04, 0x89, 0x4c, 0x24, 0x24, 0x89, 0x44, 0x24,
        0x28, 0x83, 0xc4, 0x10, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x04, 0x24,
        0x89, 0x44, 0x24, 0x2c, 0x89, 0x6c, 0x24, 0x28,
        0x8b, 0x44, 0x24, 0x04, 0x89, 0x44, 0x24, 0x24,
        0x83, 0xc4, 0x10, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xc, instruction->oparg);
    patch_x86_64_32rx(code + 0x49, (uintptr_t)&PySlice_New + -0x4);
    patch_32(code + 0x55, instruction->oparg);
    patch_x86_64_32rx(code + 0x8c, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xc9, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xe8, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BUILD_STRING(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_STRING.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 10                      subl    $0x10, %esp
    // 7: 8b 44 24 2c                   movl    0x2c(%esp), %eax
    // b: 89 04 24                      movl    %eax, (%esp)
    // e: 8b 6c 24 28                   movl    0x28(%esp), %ebp
    // 12: 8b 44 24 24                   movl    0x24(%esp), %eax
    // 16: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 1a: b8 00 00 00 00                movl    $0x0, %eax
    // 0000001b:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 1f: 0f b7 f8                      movzwl  %ax, %edi
    // 22: 8d 04 bd 00 00 00 00          leal    (,%edi,4), %eax
    // 29: 89 6c 24 08                   movl    %ebp, 0x8(%esp)
    // 2d: 29 c5                         subl    %eax, %ebp
    // 2f: 57                            pushl   %edi
    // 30: 55                            pushl   %ebp
    // 31: 68 04 4c 00 00                pushl   $0x4c04                 # imm = 0x4C04
    // 00000032:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 36: e8 00 00 00 00                calll   0x3b <__JIT_ENTRY+0x3b>
    // 00000037:  IMAGE_REL_I386_REL32 __PyUnicode_JoinArray
    // 3b: 83 c4 0c                      addl    $0xc, %esp
    // 3e: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 42: 66 85 ff                      testw   %di, %di
    // 45: 74 3e                         je      0x85 <__JIT_ENTRY+0x85>
    // 47: 8d 5f 01                      leal    0x1(%edi), %ebx
    // 4a: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 4e: 8d 70 fc                      leal    -0x4(%eax), %esi
    // 51: eb 16                         jmp     0x69 <__JIT_ENTRY+0x69>
    // 53: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%eax,%eax)
    // 60: 4b                            decl    %ebx
    // 61: 83 c6 fc                      addl    $-0x4, %esi
    // 64: 83 fb 01                      cmpl    $0x1, %ebx
    // 67: 76 1c                         jbe     0x85 <__JIT_ENTRY+0x85>
    // 69: 8b 06                         movl    (%esi), %eax
    // 6b: 8b 08                         movl    (%eax), %ecx
    // 6d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 73: 7f eb                         jg      0x60 <__JIT_ENTRY+0x60>
    // 75: 49                            decl    %ecx
    // 76: 89 08                         movl    %ecx, (%eax)
    // 78: 75 e6                         jne     0x60 <__JIT_ENTRY+0x60>
    // 7a: 50                            pushl   %eax
    // 7b: e8 00 00 00 00                calll   0x80 <__JIT_ENTRY+0x80>
    // 0000007c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 80: 83 c4 04                      addl    $0x4, %esp
    // 83: eb db                         jmp     0x60 <__JIT_ENTRY+0x60>
    // 85: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 89: 85 c0                         testl   %eax, %eax
    // 8b: 74 30                         je      0xbd <__JIT_ENTRY+0xbd>
    // 8d: 89 45 00                      movl    %eax, (%ebp)
    // 90: b8 01 00 00 00                movl    $0x1, %eax
    // 95: 29 f8                         subl    %edi, %eax
    // 97: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 9b: 8d 04 81                      leal    (%ecx,%eax,4), %eax
    // 9e: 8b 0c 24                      movl    (%esp), %ecx
    // a1: 89 4c 24 2c                   movl    %ecx, 0x2c(%esp)
    // a5: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // a9: 89 4c 24 24                   movl    %ecx, 0x24(%esp)
    // ad: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // b1: 83 c4 10                      addl    $0x10, %esp
    // b4: 5e                            popl    %esi
    // b5: 5f                            popl    %edi
    // b6: 5b                            popl    %ebx
    // b7: 5d                            popl    %ebp
    // b8: e9 00 00 00 00                jmp     0xbd <__JIT_ENTRY+0xbd>
    // 000000b9:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // bd: 8b 04 24                      movl    (%esp), %eax
    // c0: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // c4: 89 6c 24 28                   movl    %ebp, 0x28(%esp)
    // c8: 8b 44 24 04                   movl    0x4(%esp), %eax
    // cc: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // d0: 83 c4 10                      addl    $0x10, %esp
    // d3: 5e                            popl    %esi
    // d4: 5f                            popl    %edi
    // d5: 5b                            popl    %ebx
    // d6: 5d                            popl    %ebp
    // d7: e9 00 00 00 00                jmp     0xdc <__JIT_ENTRY+0xdc>
    // 000000d8:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[220] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x10, 0x8b,
        0x44, 0x24, 0x2c, 0x89, 0x04, 0x24, 0x8b, 0x6c,
        0x24, 0x28, 0x8b, 0x44, 0x24, 0x24, 0x89, 0x44,
        0x24, 0x04, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0xb7, 0xf8, 0x8d, 0x04, 0xbd, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x6c, 0x24, 0x08, 0x29, 0xc5, 0x57,
        0x55, 0x68, 0x04, 0x4c, 0x00, 0x00, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x89, 0x44,
        0x24, 0x0c, 0x66, 0x85, 0xff, 0x74, 0x3e, 0x8d,
        0x5f, 0x01, 0x8b, 0x44, 0x24, 0x08, 0x8d, 0x70,
        0xfc, 0xeb, 0x16, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4b, 0x83, 0xc6, 0xfc, 0x83, 0xfb, 0x01, 0x76,
        0x1c, 0x8b, 0x06, 0x8b, 0x08, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0xeb, 0x49, 0x89, 0x08,
        0x75, 0xe6, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0xeb, 0xdb, 0x8b, 0x44, 0x24,
        0x0c, 0x85, 0xc0, 0x74, 0x30, 0x89, 0x45, 0x00,
        0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xf8, 0x8b,
        0x4c, 0x24, 0x08, 0x8d, 0x04, 0x81, 0x8b, 0x0c,
        0x24, 0x89, 0x4c, 0x24, 0x2c, 0x8b, 0x4c, 0x24,
        0x04, 0x89, 0x4c, 0x24, 0x24, 0x89, 0x44, 0x24,
        0x28, 0x83, 0xc4, 0x10, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x04, 0x24,
        0x89, 0x44, 0x24, 0x2c, 0x89, 0x6c, 0x24, 0x28,
        0x8b, 0x44, 0x24, 0x04, 0x89, 0x44, 0x24, 0x24,
        0x83, 0xc4, 0x10, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x1b, instruction->oparg);
    patch_32(code + 0x32, (uintptr_t)&_PyRuntime + 0x4c04);
    patch_x86_64_32rx(code + 0x37, (uintptr_t)&_PyUnicode_JoinArray + -0x4);
    patch_x86_64_32rx(code + 0x7c, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xb9, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xd8, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BUILD_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_TUPLE.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 7c 24 20                   movl    0x20(%esp), %edi
    // 9: 8b 74 24 1c                   movl    0x1c(%esp), %esi
    // d: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 11: 89 04 24                      movl    %eax, (%esp)
    // 14: b8 00 00 00 00                movl    $0x0, %eax
    // 00000015:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 19: 0f b7 e8                      movzwl  %ax, %ebp
    // 1c: 8d 04 ad 00 00 00 00          leal    (,%ebp,4), %eax
    // 23: 89 f3                         movl    %esi, %ebx
    // 25: 29 c3                         subl    %eax, %ebx
    // 27: 55                            pushl   %ebp
    // 28: 53                            pushl   %ebx
    // 29: e8 00 00 00 00                calll   0x2e <__JIT_ENTRY+0x2e>
    // 0000002a:  IMAGE_REL_I386_REL32 __PyTuple_FromStackRefStealOnSuccess
    // 2e: 83 c4 08                      addl    $0x8, %esp
    // 31: 85 c0                         testl   %eax, %eax
    // 33: 74 27                         je      0x5c <__JIT_ENTRY+0x5c>
    // 35: 89 03                         movl    %eax, (%ebx)
    // 37: b8 01 00 00 00                movl    $0x1, %eax
    // 3c: 29 e8                         subl    %ebp, %eax
    // 3e: 8d 04 86                      leal    (%esi,%eax,4), %eax
    // 41: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // 45: 8b 0c 24                      movl    (%esp), %ecx
    // 48: 89 4c 24 18                   movl    %ecx, 0x18(%esp)
    // 4c: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // 50: 83 c4 04                      addl    $0x4, %esp
    // 53: 5e                            popl    %esi
    // 54: 5f                            popl    %edi
    // 55: 5b                            popl    %ebx
    // 56: 5d                            popl    %ebp
    // 57: e9 00 00 00 00                jmp     0x5c <__JIT_ENTRY+0x5c>
    // 00000058:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 5c: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // 60: 89 74 24 1c                   movl    %esi, 0x1c(%esp)
    // 64: 8b 04 24                      movl    (%esp), %eax
    // 67: 89 44 24 18                   movl    %eax, 0x18(%esp)
    // 6b: 83 c4 04                      addl    $0x4, %esp
    // 6e: 5e                            popl    %esi
    // 6f: 5f                            popl    %edi
    // 70: 5b                            popl    %ebx
    // 71: 5d                            popl    %ebp
    // 72: e9 00 00 00 00                jmp     0x77 <__JIT_ENTRY+0x77>
    // 00000073:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[119] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x7c, 0x24,
        0x20, 0x8b, 0x74, 0x24, 0x1c, 0x8b, 0x44, 0x24,
        0x18, 0x89, 0x04, 0x24, 0xb8, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xb7, 0xe8, 0x8d, 0x04, 0xad, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xf3, 0x29, 0xc3, 0x55,
        0x53, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x08, 0x85, 0xc0, 0x74, 0x27, 0x89, 0x03, 0xb8,
        0x01, 0x00, 0x00, 0x00, 0x29, 0xe8, 0x8d, 0x04,
        0x86, 0x89, 0x7c, 0x24, 0x20, 0x8b, 0x0c, 0x24,
        0x89, 0x4c, 0x24, 0x18, 0x89, 0x44, 0x24, 0x1c,
        0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x20,
        0x89, 0x74, 0x24, 0x1c, 0x8b, 0x04, 0x24, 0x89,
        0x44, 0x24, 0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x15, instruction->oparg);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)&_PyTuple_FromStackRefStealOnSuccess + -0x4);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x73, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_BUILTIN_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_BUILTIN_CLASS.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 14                      subl    $0x14, %esp
    // 7: 8b 7c 24 30                   movl    0x30(%esp), %edi
    // b: 8b 6c 24 2c                   movl    0x2c(%esp), %ebp
    // f: 8b 54 24 28                   movl    0x28(%esp), %edx
    // 13: b8 00 00 00 00                movl    $0x0, %eax
    // 00000014:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 18: 0f b7 d8                      movzwl  %ax, %ebx
    // 1b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
    // 20: 29 de                         subl    %ebx, %esi
    // 22: 8b 44 b5 00                   movl    (%ebp,%esi,4), %eax
    // 26: 8b 48 04                      movl    0x4(%eax), %ecx
    // 29: 83 79 54 00                   cmpl    $0x0, 0x54(%ecx)
    // 2d: 78 18                         js      0x47 <__JIT_ENTRY+0x47>
    // 2f: 89 7c 24 30                   movl    %edi, 0x30(%esp)
    // 33: 89 6c 24 2c                   movl    %ebp, 0x2c(%esp)
    // 37: 89 54 24 28                   movl    %edx, 0x28(%esp)
    // 3b: 83 c4 14                      addl    $0x14, %esp
    // 3e: 5e                            popl    %esi
    // 3f: 5f                            popl    %edi
    // 40: 5b                            popl    %ebx
    // 41: 5d                            popl    %ebp
    // 42: e9 00 00 00 00                jmp     0x47 <__JIT_ENTRY+0x47>
    // 00000043:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 47: 83 b8 c8 00 00 00 00          cmpl    $0x0, 0xc8(%eax)
    // 4e: 74 df                         je      0x2f <__JIT_ENTRY+0x2f>
    // 50: 89 7c 24 04                   movl    %edi, 0x4(%esp)
    // 54: 8d 0c 9d 00 00 00 00          leal    (,%ebx,4), %ecx
    // 5b: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 5f: 89 ef                         movl    %ebp, %edi
    // 61: 29 cf                         subl    %ecx, %edi
    // 63: 89 d9                         movl    %ebx, %ecx
    // 65: f7 d1                         notl    %ecx
    // 67: 31 d2                         xorl    %edx, %edx
    // 69: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 6d: 83 7c 8d 00 00                cmpl    $0x0, (%ebp,%ecx,4)
    // 72: b9 00 00 00 00                movl    $0x0, %ecx
    // 77: 0f 94 c1                      sete    %cl
    // 7a: 0f 95 c2                      setne   %dl
    // 7d: 01 da                         addl    %ebx, %edx
    // 7f: 8d 0c 8f                      leal    (%edi,%ecx,4), %ecx
    // 82: 83 c1 fc                      addl    $-0x4, %ecx
    // 85: 8b 7c 24 10                   movl    0x10(%esp), %edi
    // 89: 89 6f 20                      movl    %ebp, 0x20(%edi)
    // 8c: 6a 00                         pushl   $0x0
    // 8e: 52                            pushl   %edx
    // 8f: 51                            pushl   %ecx
    // 90: 50                            pushl   %eax
    // 91: ff 90 c8 00 00 00             calll   *0xc8(%eax)
    // 97: 83 c4 10                      addl    $0x10, %esp
    // 9a: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 9e: 8b 47 20                      movl    0x20(%edi), %eax
    // a1: 89 04 24                      movl    %eax, (%esp)
    // a4: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // ab: 8b 44 b5 00                   movl    (%ebp,%esi,4), %eax
    // af: 8b 08                         movl    (%eax), %ecx
    // b1: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // b7: 7f 0e                         jg      0xc7 <__JIT_ENTRY+0xc7>
    // b9: 49                            decl    %ecx
    // ba: 89 08                         movl    %ecx, (%eax)
    // bc: 75 09                         jne     0xc7 <__JIT_ENTRY+0xc7>
    // be: 50                            pushl   %eax
    // bf: e8 00 00 00 00                calll   0xc4 <__JIT_ENTRY+0xc4>
    // 000000c0:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // c4: 83 c4 04                      addl    $0x4, %esp
    // c7: 8b 44 24 08                   movl    0x8(%esp), %eax
    // cb: 8b 44 85 00                   movl    (%ebp,%eax,4), %eax
    // cf: 85 c0                         testl   %eax, %eax
    // d1: 74 18                         je      0xeb <__JIT_ENTRY+0xeb>
    // d3: 8b 08                         movl    (%eax), %ecx
    // d5: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // db: 7f 0e                         jg      0xeb <__JIT_ENTRY+0xeb>
    // dd: 49                            decl    %ecx
    // de: 89 08                         movl    %ecx, (%eax)
    // e0: 75 09                         jne     0xeb <__JIT_ENTRY+0xeb>
    // e2: 50                            pushl   %eax
    // e3: e8 00 00 00 00                calll   0xe8 <__JIT_ENTRY+0xe8>
    // 000000e4:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // e8: 83 c4 04                      addl    $0x4, %esp
    // eb: b8 00 00 00 00                movl    $0x0, %eax
    // 000000ec:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // f0: 66 85 c0                      testw   %ax, %ax
    // f3: 74 31                         je      0x126 <__JIT_ENTRY+0x126>
    // f5: 43                            incl    %ebx
    // f6: 83 c5 fc                      addl    $-0x4, %ebp
    // f9: eb 0e                         jmp     0x109 <__JIT_ENTRY+0x109>
    // fb: 0f 1f 44 00 00                nopl    (%eax,%eax)
    // 100: 4b                            decl    %ebx
    // 101: 83 c5 fc                      addl    $-0x4, %ebp
    // 104: 83 fb 01                      cmpl    $0x1, %ebx
    // 107: 76 1d                         jbe     0x126 <__JIT_ENTRY+0x126>
    // 109: 8b 45 00                      movl    (%ebp), %eax
    // 10c: 8b 08                         movl    (%eax), %ecx
    // 10e: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 114: 7f ea                         jg      0x100 <__JIT_ENTRY+0x100>
    // 116: 49                            decl    %ecx
    // 117: 89 08                         movl    %ecx, (%eax)
    // 119: 75 e5                         jne     0x100 <__JIT_ENTRY+0x100>
    // 11b: 50                            pushl   %eax
    // 11c: e8 00 00 00 00                calll   0x121 <__JIT_ENTRY+0x121>
    // 0000011d:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 121: 83 c4 04                      addl    $0x4, %esp
    // 124: eb da                         jmp     0x100 <__JIT_ENTRY+0x100>
    // 126: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 12a: 85 c0                         testl   %eax, %eax
    // 12c: 74 29                         je      0x157 <__JIT_ENTRY+0x157>
    // 12e: 8b 0c 24                      movl    (%esp), %ecx
    // 131: 89 04 b1                      movl    %eax, (%ecx,%esi,4)
    // 134: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 138: 8d 04 81                      leal    (%ecx,%eax,4), %eax
    // 13b: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 13f: 89 4c 24 30                   movl    %ecx, 0x30(%esp)
    // 143: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 147: 89 7c 24 28                   movl    %edi, 0x28(%esp)
    // 14b: 83 c4 14                      addl    $0x14, %esp
    // 14e: 5e                            popl    %esi
    // 14f: 5f                            popl    %edi
    // 150: 5b                            popl    %ebx
    // 151: 5d                            popl    %ebp
    // 152: e9 00 00 00 00                jmp     0x157 <__JIT_ENTRY+0x157>
    // 00000153:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 157: 8b 04 24                      movl    (%esp), %eax
    // 15a: 8d 04 b0                      leal    (%eax,%esi,4), %eax
    // 15d: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 161: 89 4c 24 30                   movl    %ecx, 0x30(%esp)
    // 165: 89 7c 24 28                   movl    %edi, 0x28(%esp)
    // 169: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 16d: 83 c4 14                      addl    $0x14, %esp
    // 170: 5e                            popl    %esi
    // 171: 5f                            popl    %edi
    // 172: 5b                            popl    %ebx
    // 173: 5d                            popl    %ebp
    // 174: e9 00 00 00 00                jmp     0x179 <__JIT_ENTRY+0x179>
    // 00000175:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[377] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x14, 0x8b,
        0x7c, 0x24, 0x30, 0x8b, 0x6c, 0x24, 0x2c, 0x8b,
        0x54, 0x24, 0x28, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xd8, 0xbe, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xde, 0x8b, 0x44, 0xb5, 0x00, 0x8b, 0x48,
        0x04, 0x83, 0x79, 0x54, 0x00, 0x78, 0x18, 0x89,
        0x7c, 0x24, 0x30, 0x89, 0x6c, 0x24, 0x2c, 0x89,
        0x54, 0x24, 0x28, 0x83, 0xc4, 0x14, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xb8, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x74, 0xdf,
        0x89, 0x7c, 0x24, 0x04, 0x8d, 0x0c, 0x9d, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x10, 0x89,
        0xef, 0x29, 0xcf, 0x89, 0xd9, 0xf7, 0xd1, 0x31,
        0xd2, 0x89, 0x4c, 0x24, 0x08, 0x83, 0x7c, 0x8d,
        0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x94, 0xc1, 0x0f, 0x95, 0xc2, 0x01, 0xda, 0x8d,
        0x0c, 0x8f, 0x83, 0xc1, 0xfc, 0x8b, 0x7c, 0x24,
        0x10, 0x89, 0x6f, 0x20, 0x6a, 0x00, 0x52, 0x51,
        0x50, 0xff, 0x90, 0xc8, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x8b, 0x47,
        0x20, 0x89, 0x04, 0x24, 0xc7, 0x47, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x44, 0xb5, 0x00, 0x8b,
        0x08, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x0e, 0x49, 0x89, 0x08, 0x75, 0x09, 0x50, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b,
        0x44, 0x24, 0x08, 0x8b, 0x44, 0x85, 0x00, 0x85,
        0xc0, 0x74, 0x18, 0x8b, 0x08, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08,
        0x75, 0x09, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0x66, 0x85, 0xc0, 0x74, 0x31, 0x43, 0x83, 0xc5,
        0xfc, 0xeb, 0x0e, 0x0f, 0x1f, 0x44, 0x00, 0x00,
        0x4b, 0x83, 0xc5, 0xfc, 0x83, 0xfb, 0x01, 0x76,
        0x1d, 0x8b, 0x45, 0x00, 0x8b, 0x08, 0x81, 0xf9,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0xea, 0x49, 0x89,
        0x08, 0x75, 0xe5, 0x50, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x04, 0xeb, 0xda, 0x8b, 0x44,
        0x24, 0x0c, 0x85, 0xc0, 0x74, 0x29, 0x8b, 0x0c,
        0x24, 0x89, 0x04, 0xb1, 0x8b, 0x44, 0x24, 0x08,
        0x8d, 0x04, 0x81, 0x8b, 0x4c, 0x24, 0x04, 0x89,
        0x4c, 0x24, 0x30, 0x89, 0x44, 0x24, 0x2c, 0x89,
        0x7c, 0x24, 0x28, 0x83, 0xc4, 0x14, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x04, 0x24, 0x8d, 0x04, 0xb0, 0x8b, 0x4c, 0x24,
        0x04, 0x89, 0x4c, 0x24, 0x30, 0x89, 0x7c, 0x24,
        0x28, 0x89, 0x44, 0x24, 0x2c, 0x83, 0xc4, 0x14,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, instruction->oparg);
    patch_x86_64_32rx(code + 0x43, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0xc0, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xe4, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0xec, instruction->oparg);
    patch_x86_64_32rx(code + 0x11d, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x153, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x175, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_BUILTIN_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_BUILTIN_FAST.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 18                      subl    $0x18, %esp
    // 7: 8b 7c 24 30                   movl    0x30(%esp), %edi
    // b: b8 00 00 00 00                movl    $0x0, %eax
    // 0000000c:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 10: 0f b7 d8                      movzwl  %ax, %ebx
    // 13: 89 dd                         movl    %ebx, %ebp
    // 15: f7 d5                         notl    %ebp
    // 17: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
    // 1c: 29 d8                         subl    %ebx, %eax
    // 1e: 83 3c af 00                   cmpl    $0x0, (%edi,%ebp,4)
    // 22: 0f 95 04 24                   setne   (%esp)
    // 26: 0f 94 44 24 08                sete    0x8(%esp)
    // 2b: 8b 0c 87                      movl    (%edi,%eax,4), %ecx
    // 2e: 81 79 04 00 00 00 00          cmpl    $0x0, 0x4(%ecx)
    // 00000031:  IMAGE_REL_I386_DIR32 _PyCFunction_Type
    // 35: 8b 54 24 34                   movl    0x34(%esp), %edx
    // 39: 8b 74 24 2c                   movl    0x2c(%esp), %esi
    // 3d: 74 11                         je      0x50 <__JIT_ENTRY+0x50>
    // 3f: 89 54 24 34                   movl    %edx, 0x34(%esp)
    // 43: 89 7c 24 30                   movl    %edi, 0x30(%esp)
    // 47: 89 74 24 2c                   movl    %esi, 0x2c(%esp)
    // 4b: e9 2d 01 00 00                jmp     0x17d <__JIT_ENTRY+0x17d>
    // 50: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 54: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 58: 89 74 24 04                   movl    %esi, 0x4(%esp)
    // 5c: 8b 71 08                      movl    0x8(%ecx), %esi
    // 5f: 81 7e 08 80 00 00 00          cmpl    $0x80, 0x8(%esi)
    // 66: 0f 85 fd 00 00 00             jne     0x169 <__JIT_ENTRY+0x169>
    // 6c: 89 6c 24 10                   movl    %ebp, 0x10(%esp)
    // 70: 8d 14 9d 00 00 00 00          leal    (,%ebx,4), %edx
    // 77: 89 fd                         movl    %edi, %ebp
    // 79: 29 d5                         subl    %edx, %ebp
    // 7b: 31 c0                         xorl    %eax, %eax
    // 7d: 0f b6 54 24 08                movzbl  0x8(%esp), %edx
    // 82: 88 d0                         movb    %dl, %al
    // 84: 8d 04 85 fc ff ff ff          leal    -0x4(,%eax,4), %eax
    // 8b: 01 e8                         addl    %ebp, %eax
    // 8d: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 91: 31 c0                         xorl    %eax, %eax
    // 93: 0f b6 14 24                   movzbl  (%esp), %edx
    // 97: 88 d0                         movb    %dl, %al
    // 99: 01 d8                         addl    %ebx, %eax
    // 9b: 8b 56 04                      movl    0x4(%esi), %edx
    // 9e: 89 14 24                      movl    %edx, (%esp)
    // a1: 8b 54 24 04                   movl    0x4(%esp), %edx
    // a5: 89 7a 20                      movl    %edi, 0x20(%edx)
    // a8: 8b 69 08                      movl    0x8(%ecx), %ebp
    // ab: 31 d2                         xorl    %edx, %edx
    // ad: f6 45 08 20                   testb   $0x20, 0x8(%ebp)
    // b1: 75 03                         jne     0xb6 <__JIT_ENTRY+0xb6>
    // b3: 8b 51 0c                      movl    0xc(%ecx), %edx
    // b6: 50                            pushl   %eax
    // b7: ff 74 24 0c                   pushl   0xc(%esp)
    // bb: 52                            pushl   %edx
    // bc: ff 54 24 0c                   calll   *0xc(%esp)
    // c0: 83 c4 0c                      addl    $0xc, %esp
    // c3: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // c7: 8b 54 24 04                   movl    0x4(%esp), %edx
    // cb: 8b 42 20                      movl    0x20(%edx), %eax
    // ce: 89 04 24                      movl    %eax, (%esp)
    // d1: c7 42 20 00 00 00 00          movl    $0x0, 0x20(%edx)
    // d8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // dc: 8b 04 b7                      movl    (%edi,%esi,4), %eax
    // df: 8b 08                         movl    (%eax), %ecx
    // e1: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // e7: 8b 6c 24 10                   movl    0x10(%esp), %ebp
    // eb: 7f 12                         jg      0xff <__JIT_ENTRY+0xff>
    // ed: 49                            decl    %ecx
    // ee: 89 08                         movl    %ecx, (%eax)
    // f0: 75 0d                         jne     0xff <__JIT_ENTRY+0xff>
    // f2: 50                            pushl   %eax
    // f3: e8 00 00 00 00                calll   0xf8 <__JIT_ENTRY+0xf8>
    // 000000f4:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // f8: 8b 54 24 08                   movl    0x8(%esp), %edx
    // fc: 83 c4 04                      addl    $0x4, %esp
    // ff: 8b 04 af                      movl    (%edi,%ebp,4), %eax
    // 102: 85 c0                         testl   %eax, %eax
    // 104: 74 1c                         je      0x122 <__JIT_ENTRY+0x122>
    // 106: 8b 08                         movl    (%eax), %ecx
    // 108: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 10e: 7f 12                         jg      0x122 <__JIT_ENTRY+0x122>
    // 110: 49                            decl    %ecx
    // 111: 89 08                         movl    %ecx, (%eax)
    // 113: 75 0d                         jne     0x122 <__JIT_ENTRY+0x122>
    // 115: 50                            pushl   %eax
    // 116: e8 00 00 00 00                calll   0x11b <__JIT_ENTRY+0x11b>
    // 00000117:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 11b: 8b 54 24 08                   movl    0x8(%esp), %edx
    // 11f: 83 c4 04                      addl    $0x4, %esp
    // 122: b8 00 00 00 00                movl    $0x0, %eax
    // 00000123:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 127: 66 85 c0                      testw   %ax, %ax
    // 12a: 74 5d                         je      0x189 <__JIT_ENTRY+0x189>
    // 12c: 43                            incl    %ebx
    // 12d: 83 c7 fc                      addl    $-0x4, %edi
    // 130: eb 17                         jmp     0x149 <__JIT_ENTRY+0x149>
    // 132: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%eax,%eax)
    // 140: 4b                            decl    %ebx
    // 141: 83 c7 fc                      addl    $-0x4, %edi
    // 144: 83 fb 01                      cmpl    $0x1, %ebx
    // 147: 76 40                         jbe     0x189 <__JIT_ENTRY+0x189>
    // 149: 8b 07                         movl    (%edi), %eax
    // 14b: 8b 08                         movl    (%eax), %ecx
    // 14d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 153: 7f eb                         jg      0x140 <__JIT_ENTRY+0x140>
    // 155: 49                            decl    %ecx
    // 156: 89 08                         movl    %ecx, (%eax)
    // 158: 75 e6                         jne     0x140 <__JIT_ENTRY+0x140>
    // 15a: 50                            pushl   %eax
    // 15b: e8 00 00 00 00                calll   0x160 <__JIT_ENTRY+0x160>
    // 0000015c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 160: 8b 54 24 08                   movl    0x8(%esp), %edx
    // 164: 83 c4 04                      addl    $0x4, %esp
    // 167: eb d7                         jmp     0x140 <__JIT_ENTRY+0x140>
    // 169: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 16d: 89 44 24 34                   movl    %eax, 0x34(%esp)
    // 171: 89 7c 24 30                   movl    %edi, 0x30(%esp)
    // 175: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 179: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 17d: 83 c4 18                      addl    $0x18, %esp
    // 180: 5e                            popl    %esi
    // 181: 5f                            popl    %edi
    // 182: 5b                            popl    %ebx
    // 183: 5d                            popl    %ebp
    // 184: e9 00 00 00 00                jmp     0x189 <__JIT_ENTRY+0x189>
    // 00000185:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 189: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 18d: 85 c9                         testl   %ecx, %ecx
    // 18f: 74 25                         je      0x1b6 <__JIT_ENTRY+0x1b6>
    // 191: 8b 04 24                      movl    (%esp), %eax
    // 194: 89 0c b0                      movl    %ecx, (%eax,%esi,4)
    // 197: 8d 04 a8                      leal    (%eax,%ebp,4), %eax
    // 19a: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 19e: 89 4c 24 34                   movl    %ecx, 0x34(%esp)
    // 1a2: 89 44 24 30                   movl    %eax, 0x30(%esp)
    // 1a6: 89 54 24 2c                   movl    %edx, 0x2c(%esp)
    // 1aa: 83 c4 18                      addl    $0x18, %esp
    // 1ad: 5e                            popl    %esi
    // 1ae: 5f                            popl    %edi
    // 1af: 5b                            popl    %ebx
    // 1b0: 5d                            popl    %ebp
    // 1b1: e9 00 00 00 00                jmp     0x1b6 <__JIT_ENTRY+0x1b6>
    // 000001b2:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 1b6: 8b 04 24                      movl    (%esp), %eax
    // 1b9: 8d 04 b0                      leal    (%eax,%esi,4), %eax
    // 1bc: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 1c0: 89 4c 24 34                   movl    %ecx, 0x34(%esp)
    // 1c4: 89 54 24 2c                   movl    %edx, 0x2c(%esp)
    // 1c8: 89 44 24 30                   movl    %eax, 0x30(%esp)
    // 1cc: 83 c4 18                      addl    $0x18, %esp
    // 1cf: 5e                            popl    %esi
    // 1d0: 5f                            popl    %edi
    // 1d1: 5b                            popl    %ebx
    // 1d2: 5d                            popl    %ebp
    // 1d3: e9 00 00 00 00                jmp     0x1d8 <__JIT_ENTRY+0x1d8>
    // 000001d4:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[472] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x18, 0x8b,
        0x7c, 0x24, 0x30, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xd8, 0x89, 0xdd, 0xf7, 0xd5, 0xb8,
        0xfe, 0xff, 0xff, 0xff, 0x29, 0xd8, 0x83, 0x3c,
        0xaf, 0x00, 0x0f, 0x95, 0x04, 0x24, 0x0f, 0x94,
        0x44, 0x24, 0x08, 0x8b, 0x0c, 0x87, 0x81, 0x79,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x54, 0x24,
        0x34, 0x8b, 0x74, 0x24, 0x2c, 0x74, 0x11, 0x89,
        0x54, 0x24, 0x34, 0x89, 0x7c, 0x24, 0x30, 0x89,
        0x74, 0x24, 0x2c, 0xe9, 0x2d, 0x01, 0x00, 0x00,
        0x89, 0x54, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x14,
        0x89, 0x74, 0x24, 0x04, 0x8b, 0x71, 0x08, 0x81,
        0x7e, 0x08, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85,
        0xfd, 0x00, 0x00, 0x00, 0x89, 0x6c, 0x24, 0x10,
        0x8d, 0x14, 0x9d, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xfd, 0x29, 0xd5, 0x31, 0xc0, 0x0f, 0xb6, 0x54,
        0x24, 0x08, 0x88, 0xd0, 0x8d, 0x04, 0x85, 0xfc,
        0xff, 0xff, 0xff, 0x01, 0xe8, 0x89, 0x44, 0x24,
        0x08, 0x31, 0xc0, 0x0f, 0xb6, 0x14, 0x24, 0x88,
        0xd0, 0x01, 0xd8, 0x8b, 0x56, 0x04, 0x89, 0x14,
        0x24, 0x8b, 0x54, 0x24, 0x04, 0x89, 0x7a, 0x20,
        0x8b, 0x69, 0x08, 0x31, 0xd2, 0xf6, 0x45, 0x08,
        0x20, 0x75, 0x03, 0x8b, 0x51, 0x0c, 0x50, 0xff,
        0x74, 0x24, 0x0c, 0x52, 0xff, 0x54, 0x24, 0x0c,
        0x83, 0xc4, 0x0c, 0x89, 0x44, 0x24, 0x08, 0x8b,
        0x54, 0x24, 0x04, 0x8b, 0x42, 0x20, 0x89, 0x04,
        0x24, 0xc7, 0x42, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x04, 0xb7, 0x8b,
        0x08, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x8b,
        0x6c, 0x24, 0x10, 0x7f, 0x12, 0x49, 0x89, 0x08,
        0x75, 0x0d, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x54, 0x24, 0x08, 0x83, 0xc4, 0x04, 0x8b,
        0x04, 0xaf, 0x85, 0xc0, 0x74, 0x1c, 0x8b, 0x08,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x12,
        0x49, 0x89, 0x08, 0x75, 0x0d, 0x50, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x54, 0x24, 0x08, 0x83,
        0xc4, 0x04, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x66,
        0x85, 0xc0, 0x74, 0x5d, 0x43, 0x83, 0xc7, 0xfc,
        0xeb, 0x17, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4b, 0x83, 0xc7, 0xfc, 0x83, 0xfb, 0x01, 0x76,
        0x40, 0x8b, 0x07, 0x8b, 0x08, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0xeb, 0x49, 0x89, 0x08,
        0x75, 0xe6, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x54, 0x24, 0x08, 0x83, 0xc4, 0x04, 0xeb,
        0xd7, 0x8b, 0x44, 0x24, 0x0c, 0x89, 0x44, 0x24,
        0x34, 0x89, 0x7c, 0x24, 0x30, 0x8b, 0x44, 0x24,
        0x04, 0x89, 0x44, 0x24, 0x2c, 0x83, 0xc4, 0x18,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x4c, 0x24, 0x08, 0x85, 0xc9, 0x74,
        0x25, 0x8b, 0x04, 0x24, 0x89, 0x0c, 0xb0, 0x8d,
        0x04, 0xa8, 0x8b, 0x4c, 0x24, 0x0c, 0x89, 0x4c,
        0x24, 0x34, 0x89, 0x44, 0x24, 0x30, 0x89, 0x54,
        0x24, 0x2c, 0x83, 0xc4, 0x18, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x04,
        0x24, 0x8d, 0x04, 0xb0, 0x8b, 0x4c, 0x24, 0x0c,
        0x89, 0x4c, 0x24, 0x34, 0x89, 0x54, 0x24, 0x2c,
        0x89, 0x44, 0x24, 0x30, 0x83, 0xc4, 0x18, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xc, instruction->oparg);
    patch_32(code + 0x31, (uintptr_t)&PyCFunction_Type);
    patch_x86_64_32rx(code + 0xf4, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x117, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x123, instruction->oparg);
    patch_x86_64_32rx(code + 0x15c, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x185, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x1b2, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x1d4, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_BUILTIN_FAST_WITH_KEYWORDS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_BUILTIN_FAST_WITH_KEYWORDS.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 18                      subl    $0x18, %esp
    // 7: 8b 7c 24 30                   movl    0x30(%esp), %edi
    // b: b8 00 00 00 00                movl    $0x0, %eax
    // 0000000c:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 10: 0f b7 d8                      movzwl  %ax, %ebx
    // 13: 89 de                         movl    %ebx, %esi
    // 15: f7 d6                         notl    %esi
    // 17: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
    // 1c: 29 d8                         subl    %ebx, %eax
    // 1e: 83 3c b7 00                   cmpl    $0x0, (%edi,%esi,4)
    // 22: 0f 95 44 24 04                setne   0x4(%esp)
    // 27: 0f 94 04 24                   sete    (%esp)
    // 2b: 8b 0c 87                      movl    (%edi,%eax,4), %ecx
    // 2e: 81 79 04 00 00 00 00          cmpl    $0x0, 0x4(%ecx)
    // 00000031:  IMAGE_REL_I386_DIR32 _PyCFunction_Type
    // 35: 8b 54 24 34                   movl    0x34(%esp), %edx
    // 39: 8b 6c 24 2c                   movl    0x2c(%esp), %ebp
    // 3d: 74 11                         je      0x50 <__JIT_ENTRY+0x50>
    // 3f: 89 54 24 34                   movl    %edx, 0x34(%esp)
    // 43: 89 7c 24 30                   movl    %edi, 0x30(%esp)
    // 47: 89 6c 24 2c                   movl    %ebp, 0x2c(%esp)
    // 4b: e9 1d 01 00 00                jmp     0x16d <__JIT_ENTRY+0x16d>
    // 50: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 54: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 58: 89 6c 24 10                   movl    %ebp, 0x10(%esp)
    // 5c: 8b 69 08                      movl    0x8(%ecx), %ebp
    // 5f: 81 7d 08 82 00 00 00          cmpl    $0x82, 0x8(%ebp)
    // 66: 0f 85 ed 00 00 00             jne     0x159 <__JIT_ENTRY+0x159>
    // 6c: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 70: 8d 2c 9d 00 00 00 00          leal    (,%ebx,4), %ebp
    // 77: 89 fe                         movl    %edi, %esi
    // 79: 29 ee                         subl    %ebp, %esi
    // 7b: 31 c0                         xorl    %eax, %eax
    // 7d: 0f b6 14 24                   movzbl  (%esp), %edx
    // 81: 88 d0                         movb    %dl, %al
    // 83: 8d 04 86                      leal    (%esi,%eax,4), %eax
    // 86: 83 c0 fc                      addl    $-0x4, %eax
    // 89: 89 04 24                      movl    %eax, (%esp)
    // 8c: 31 c0                         xorl    %eax, %eax
    // 8e: 0f b6 54 24 04                movzbl  0x4(%esp), %edx
    // 93: 88 d0                         movb    %dl, %al
    // 95: 01 d8                         addl    %ebx, %eax
    // 97: 89 c6                         movl    %eax, %esi
    // 99: 8b 6c 24 10                   movl    0x10(%esp), %ebp
    // 9d: 89 7d 20                      movl    %edi, 0x20(%ebp)
    // a0: 8b 51 08                      movl    0x8(%ecx), %edx
    // a3: 31 c0                         xorl    %eax, %eax
    // a5: f6 42 08 20                   testb   $0x20, 0x8(%edx)
    // a9: 8b 52 04                      movl    0x4(%edx), %edx
    // ac: 75 03                         jne     0xb1 <__JIT_ENTRY+0xb1>
    // ae: 8b 41 0c                      movl    0xc(%ecx), %eax
    // b1: 6a 00                         pushl   $0x0
    // b3: 56                            pushl   %esi
    // b4: ff 74 24 08                   pushl   0x8(%esp)
    // b8: 50                            pushl   %eax
    // b9: ff d2                         calll   *%edx
    // bb: 83 c4 10                      addl    $0x10, %esp
    // be: 89 04 24                      movl    %eax, (%esp)
    // c1: 8b 45 20                      movl    0x20(%ebp), %eax
    // c4: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // c8: c7 45 20 00 00 00 00          movl    $0x0, 0x20(%ebp)
    // cf: 8b 54 24 08                   movl    0x8(%esp), %edx
    // d3: 8b 04 97                      movl    (%edi,%edx,4), %eax
    // d6: 8b 08                         movl    (%eax), %ecx
    // d8: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // de: 8b 74 24 14                   movl    0x14(%esp), %esi
    // e2: 7f 12                         jg      0xf6 <__JIT_ENTRY+0xf6>
    // e4: 49                            decl    %ecx
    // e5: 89 08                         movl    %ecx, (%eax)
    // e7: 75 0d                         jne     0xf6 <__JIT_ENTRY+0xf6>
    // e9: 50                            pushl   %eax
    // ea: e8 00 00 00 00                calll   0xef <__JIT_ENTRY+0xef>
    // 000000eb:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // ef: 8b 54 24 0c                   movl    0xc(%esp), %edx
    // f3: 83 c4 04                      addl    $0x4, %esp
    // f6: 8b 04 b7                      movl    (%edi,%esi,4), %eax
    // f9: 85 c0                         testl   %eax, %eax
    // fb: 74 1c                         je      0x119 <__JIT_ENTRY+0x119>
    // fd: 8b 08                         movl    (%eax), %ecx
    // ff: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 105: 7f 12                         jg      0x119 <__JIT_ENTRY+0x119>
    // 107: 49                            decl    %ecx
    // 108: 89 08                         movl    %ecx, (%eax)
    // 10a: 75 0d                         jne     0x119 <__JIT_ENTRY+0x119>
    // 10c: 50                            pushl   %eax
    // 10d: e8 00 00 00 00                calll   0x112 <__JIT_ENTRY+0x112>
    // 0000010e:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 112: 8b 54 24 0c                   movl    0xc(%esp), %edx
    // 116: 83 c4 04                      addl    $0x4, %esp
    // 119: b8 00 00 00 00                movl    $0x0, %eax
    // 0000011a:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 11e: 66 85 c0                      testw   %ax, %ax
    // 121: 74 56                         je      0x179 <__JIT_ENTRY+0x179>
    // 123: 43                            incl    %ebx
    // 124: 83 c7 fc                      addl    $-0x4, %edi
    // 127: eb 10                         jmp     0x139 <__JIT_ENTRY+0x139>
    // 129: 0f 1f 80 00 00 00 00          nopl    (%eax)
    // 130: 4b                            decl    %ebx
    // 131: 83 c7 fc                      addl    $-0x4, %edi
    // 134: 83 fb 01                      cmpl    $0x1, %ebx
    // 137: 76 40                         jbe     0x179 <__JIT_ENTRY+0x179>
    // 139: 8b 07                         movl    (%edi), %eax
    // 13b: 8b 08                         movl    (%eax), %ecx
    // 13d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 143: 7f eb                         jg      0x130 <__JIT_ENTRY+0x130>
    // 145: 49                            decl    %ecx
    // 146: 89 08                         movl    %ecx, (%eax)
    // 148: 75 e6                         jne     0x130 <__JIT_ENTRY+0x130>
    // 14a: 50                            pushl   %eax
    // 14b: e8 00 00 00 00                calll   0x150 <__JIT_ENTRY+0x150>
    // 0000014c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 150: 8b 54 24 0c                   movl    0xc(%esp), %edx
    // 154: 83 c4 04                      addl    $0x4, %esp
    // 157: eb d7                         jmp     0x130 <__JIT_ENTRY+0x130>
    // 159: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 15d: 89 44 24 34                   movl    %eax, 0x34(%esp)
    // 161: 89 7c 24 30                   movl    %edi, 0x30(%esp)
    // 165: 8b 44 24 10                   movl    0x10(%esp), %eax
    // 169: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 16d: 83 c4 18                      addl    $0x18, %esp
    // 170: 5e                            popl    %esi
    // 171: 5f                            popl    %edi
    // 172: 5b                            popl    %ebx
    // 173: 5d                            popl    %ebp
    // 174: e9 00 00 00 00                jmp     0x179 <__JIT_ENTRY+0x179>
    // 00000175:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 179: 8b 0c 24                      movl    (%esp), %ecx
    // 17c: 85 c9                         testl   %ecx, %ecx
    // 17e: 74 26                         je      0x1a6 <__JIT_ENTRY+0x1a6>
    // 180: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 184: 89 0c 90                      movl    %ecx, (%eax,%edx,4)
    // 187: 8d 04 b0                      leal    (%eax,%esi,4), %eax
    // 18a: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 18e: 89 4c 24 34                   movl    %ecx, 0x34(%esp)
    // 192: 89 44 24 30                   movl    %eax, 0x30(%esp)
    // 196: 89 6c 24 2c                   movl    %ebp, 0x2c(%esp)
    // 19a: 83 c4 18                      addl    $0x18, %esp
    // 19d: 5e                            popl    %esi
    // 19e: 5f                            popl    %edi
    // 19f: 5b                            popl    %ebx
    // 1a0: 5d                            popl    %ebp
    // 1a1: e9 00 00 00 00                jmp     0x1a6 <__JIT_ENTRY+0x1a6>
    // 000001a2:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 1a6: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 1aa: 8d 04 90                      leal    (%eax,%edx,4), %eax
    // 1ad: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 1b1: 89 4c 24 34                   movl    %ecx, 0x34(%esp)
    // 1b5: 89 6c 24 2c                   movl    %ebp, 0x2c(%esp)
    // 1b9: 89 44 24 30                   movl    %eax, 0x30(%esp)
    // 1bd: 83 c4 18                      addl    $0x18, %esp
    // 1c0: 5e                            popl    %esi
    // 1c1: 5f                            popl    %edi
    // 1c2: 5b                            popl    %ebx
    // 1c3: 5d                            popl    %ebp
    // 1c4: e9 00 00 00 00                jmp     0x1c9 <__JIT_ENTRY+0x1c9>
    // 000001c5:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[457] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x18, 0x8b,
        0x7c, 0x24, 0x30, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xd8, 0x89, 0xde, 0xf7, 0xd6, 0xb8,
        0xfe, 0xff, 0xff, 0xff, 0x29, 0xd8, 0x83, 0x3c,
        0xb7, 0x00, 0x0f, 0x95, 0x44, 0x24, 0x04, 0x0f,
        0x94, 0x04, 0x24, 0x8b, 0x0c, 0x87, 0x81, 0x79,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x54, 0x24,
        0x34, 0x8b, 0x6c, 0x24, 0x2c, 0x74, 0x11, 0x89,
        0x54, 0x24, 0x34, 0x89, 0x7c, 0x24, 0x30, 0x89,
        0x6c, 0x24, 0x2c, 0xe9, 0x1d, 0x01, 0x00, 0x00,
        0x89, 0x54, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08,
        0x89, 0x6c, 0x24, 0x10, 0x8b, 0x69, 0x08, 0x81,
        0x7d, 0x08, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85,
        0xed, 0x00, 0x00, 0x00, 0x89, 0x74, 0x24, 0x14,
        0x8d, 0x2c, 0x9d, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xfe, 0x29, 0xee, 0x31, 0xc0, 0x0f, 0xb6, 0x14,
        0x24, 0x88, 0xd0, 0x8d, 0x04, 0x86, 0x83, 0xc0,
        0xfc, 0x89, 0x04, 0x24, 0x31, 0xc0, 0x0f, 0xb6,
        0x54, 0x24, 0x04, 0x88, 0xd0, 0x01, 0xd8, 0x89,
        0xc6, 0x8b, 0x6c, 0x24, 0x10, 0x89, 0x7d, 0x20,
        0x8b, 0x51, 0x08, 0x31, 0xc0, 0xf6, 0x42, 0x08,
        0x20, 0x8b, 0x52, 0x04, 0x75, 0x03, 0x8b, 0x41,
        0x0c, 0x6a, 0x00, 0x56, 0xff, 0x74, 0x24, 0x08,
        0x50, 0xff, 0xd2, 0x83, 0xc4, 0x10, 0x89, 0x04,
        0x24, 0x8b, 0x45, 0x20, 0x89, 0x44, 0x24, 0x04,
        0xc7, 0x45, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x54, 0x24, 0x08, 0x8b, 0x04, 0x97, 0x8b, 0x08,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x8b, 0x74,
        0x24, 0x14, 0x7f, 0x12, 0x49, 0x89, 0x08, 0x75,
        0x0d, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x54, 0x24, 0x0c, 0x83, 0xc4, 0x04, 0x8b, 0x04,
        0xb7, 0x85, 0xc0, 0x74, 0x1c, 0x8b, 0x08, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x12, 0x49,
        0x89, 0x08, 0x75, 0x0d, 0x50, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x54, 0x24, 0x0c, 0x83, 0xc4,
        0x04, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85,
        0xc0, 0x74, 0x56, 0x43, 0x83, 0xc7, 0xfc, 0xeb,
        0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00,
        0x4b, 0x83, 0xc7, 0xfc, 0x83, 0xfb, 0x01, 0x76,
        0x40, 0x8b, 0x07, 0x8b, 0x08, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0xeb, 0x49, 0x89, 0x08,
        0x75, 0xe6, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x54, 0x24, 0x0c, 0x83, 0xc4, 0x04, 0xeb,
        0xd7, 0x8b, 0x44, 0x24, 0x0c, 0x89, 0x44, 0x24,
        0x34, 0x89, 0x7c, 0x24, 0x30, 0x8b, 0x44, 0x24,
        0x10, 0x89, 0x44, 0x24, 0x2c, 0x83, 0xc4, 0x18,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x0c, 0x24, 0x85, 0xc9, 0x74, 0x26,
        0x8b, 0x44, 0x24, 0x04, 0x89, 0x0c, 0x90, 0x8d,
        0x04, 0xb0, 0x8b, 0x4c, 0x24, 0x0c, 0x89, 0x4c,
        0x24, 0x34, 0x89, 0x44, 0x24, 0x30, 0x89, 0x6c,
        0x24, 0x2c, 0x83, 0xc4, 0x18, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x44,
        0x24, 0x04, 0x8d, 0x04, 0x90, 0x8b, 0x4c, 0x24,
        0x0c, 0x89, 0x4c, 0x24, 0x34, 0x89, 0x6c, 0x24,
        0x2c, 0x89, 0x44, 0x24, 0x30, 0x83, 0xc4, 0x18,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xc, instruction->oparg);
    patch_32(code + 0x31, (uintptr_t)&PyCFunction_Type);
    patch_x86_64_32rx(code + 0xeb, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x10e, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x11a, instruction->oparg);
    patch_x86_64_32rx(code + 0x14c, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x175, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x1a2, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x1c5, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_BUILTIN_O(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_BUILTIN_O.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 10                      subl    $0x10, %esp
    // 7: 8b 74 24 2c                   movl    0x2c(%esp), %esi
    // b: 8b 6c 24 28                   movl    0x28(%esp), %ebp
    // f: 8b 7c 24 24                   movl    0x24(%esp), %edi
    // 13: b8 00 00 00 00                movl    $0x0, %eax
    // 00000014:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 18: 0f b7 c0                      movzwl  %ax, %eax
    // 1b: 89 c2                         movl    %eax, %edx
    // 1d: f7 d2                         notl    %edx
    // 1f: 31 c9                         xorl    %ecx, %ecx
    // 21: 31 db                         xorl    %ebx, %ebx
    // 23: 83 7c 95 00 00                cmpl    $0x0, (%ebp,%edx,4)
    // 28: 0f 94 c2                      sete    %dl
    // 2b: 0f 95 c3                      setne   %bl
    // 2e: 01 c3                         addl    %eax, %ebx
    // 30: 83 fb 01                      cmpl    $0x1, %ebx
    // 33: 0f 85 1f 01 00 00             jne     0x158 <__JIT_ENTRY+0x158>
    // 39: 88 54 24 04                   movb    %dl, 0x4(%esp)
    // 3d: 89 34 24                      movl    %esi, (%esp)
    // 40: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
    // 45: 29 c6                         subl    %eax, %esi
    // 47: 8b 54 b5 00                   movl    (%ebp,%esi,4), %edx
    // 4b: 81 7a 04 00 00 00 00          cmpl    $0x0, 0x4(%edx)
    // 0000004e:  IMAGE_REL_I386_DIR32 _PyCFunction_Type
    // 52: 0f 85 06 01 00 00             jne     0x15e <__JIT_ENTRY+0x15e>
    // 58: 8b 5a 08                      movl    0x8(%edx), %ebx
    // 5b: 83 7b 08 08                   cmpl    $0x8, 0x8(%ebx)
    // 5f: 0f 85 f9 00 00 00             jne     0x15e <__JIT_ENTRY+0x15e>
    // 65: 89 5c 24 08                   movl    %ebx, 0x8(%esp)
    // 69: 8b 1c 24                      movl    (%esp), %ebx
    // 6c: 8b 5b 24                      movl    0x24(%ebx), %ebx
    // 6f: 85 db                         testl   %ebx, %ebx
    // 71: 0f 8e e7 00 00 00             jle     0x15e <__JIT_ENTRY+0x15e>
    // 77: c1 e0 02                      shll    $0x2, %eax
    // 7a: 89 6c 24 0c                   movl    %ebp, 0xc(%esp)
    // 7e: 29 44 24 0c                   subl    %eax, 0xc(%esp)
    // 82: 0f b6 44 24 04                movzbl  0x4(%esp), %eax
    // 87: 88 c1                         movb    %al, %cl
    // 89: 8d 0c 8d fc ff ff ff          leal    -0x4(,%ecx,4), %ecx
    // 90: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 94: 8b 40 04                      movl    0x4(%eax), %eax
    // 97: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 9b: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 9f: 8b 04 08                      movl    (%eax,%ecx), %eax
    // a2: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // a6: 4b                            decl    %ebx
    // a7: 8b 04 24                      movl    (%esp), %eax
    // aa: 89 58 24                      movl    %ebx, 0x24(%eax)
    // ad: 89 6f 20                      movl    %ebp, 0x20(%edi)
    // b0: 8b 42 08                      movl    0x8(%edx), %eax
    // b3: 31 c9                         xorl    %ecx, %ecx
    // b5: f6 40 08 20                   testb   $0x20, 0x8(%eax)
    // b9: 75 03                         jne     0xbe <__JIT_ENTRY+0xbe>
    // bb: 8b 4a 0c                      movl    0xc(%edx), %ecx
    // be: 8b 5c 24 04                   movl    0x4(%esp), %ebx
    // c2: 53                            pushl   %ebx
    // c3: 51                            pushl   %ecx
    // c4: ff 54 24 10                   calll   *0x10(%esp)
    // c8: 89 da                         movl    %ebx, %edx
    // ca: 83 c4 08                      addl    $0x8, %esp
    // cd: 8b 4f 20                      movl    0x20(%edi), %ecx
    // d0: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // d7: 8b 1c 24                      movl    (%esp), %ebx
    // da: ff 43 24                      incl    0x24(%ebx)
    // dd: 89 4f 20                      movl    %ecx, 0x20(%edi)
    // e0: 8b 0a                         movl    (%edx), %ecx
    // e2: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // e8: 7f 16                         jg      0x100 <__JIT_ENTRY+0x100>
    // ea: 49                            decl    %ecx
    // eb: 89 0a                         movl    %ecx, (%edx)
    // ed: 75 11                         jne     0x100 <__JIT_ENTRY+0x100>
    // ef: 52                            pushl   %edx
    // f0: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // f4: e8 00 00 00 00                calll   0xf9 <__JIT_ENTRY+0xf9>
    // 000000f5:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // f9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // fd: 83 c4 04                      addl    $0x4, %esp
    // 100: 8d 0c b5 00 00 00 00          leal    (,%esi,4), %ecx
    // 107: 01 4f 20                      addl    %ecx, 0x20(%edi)
    // 10a: 8b 54 b5 00                   movl    (%ebp,%esi,4), %edx
    // 10e: 8b 0a                         movl    (%edx), %ecx
    // 110: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 116: 7f 12                         jg      0x12a <__JIT_ENTRY+0x12a>
    // 118: 49                            decl    %ecx
    // 119: 89 0a                         movl    %ecx, (%edx)
    // 11b: 75 0d                         jne     0x12a <__JIT_ENTRY+0x12a>
    // 11d: 52                            pushl   %edx
    // 11e: 89 c6                         movl    %eax, %esi
    // 120: e8 00 00 00 00                calll   0x125 <__JIT_ENTRY+0x125>
    // 00000121:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 125: 89 f0                         movl    %esi, %eax
    // 127: 83 c4 04                      addl    $0x4, %esp
    // 12a: 8b 4f 20                      movl    0x20(%edi), %ecx
    // 12d: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 134: 85 c0                         testl   %eax, %eax
    // 136: 8b 1c 24                      movl    (%esp), %ebx
    // 139: 74 3e                         je      0x179 <__JIT_ENTRY+0x179>
    // 13b: 89 01                         movl    %eax, (%ecx)
    // 13d: 83 c1 04                      addl    $0x4, %ecx
    // 140: 89 5c 24 2c                   movl    %ebx, 0x2c(%esp)
    // 144: 89 4c 24 28                   movl    %ecx, 0x28(%esp)
    // 148: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // 14c: 83 c4 10                      addl    $0x10, %esp
    // 14f: 5e                            popl    %esi
    // 150: 5f                            popl    %edi
    // 151: 5b                            popl    %ebx
    // 152: 5d                            popl    %ebp
    // 153: e9 00 00 00 00                jmp     0x158 <__JIT_ENTRY+0x158>
    // 00000154:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 158: 89 74 24 2c                   movl    %esi, 0x2c(%esp)
    // 15c: eb 07                         jmp     0x165 <__JIT_ENTRY+0x165>
    // 15e: 8b 04 24                      movl    (%esp), %eax
    // 161: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 165: 89 6c 24 28                   movl    %ebp, 0x28(%esp)
    // 169: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // 16d: 83 c4 10                      addl    $0x10, %esp
    // 170: 5e                            popl    %esi
    // 171: 5f                            popl    %edi
    // 172: 5b                            popl    %ebx
    // 173: 5d                            popl    %ebp
    // 174: e9 00 00 00 00                jmp     0x179 <__JIT_ENTRY+0x179>
    // 00000175:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 179: 89 5c 24 2c                   movl    %ebx, 0x2c(%esp)
    // 17d: 89 4c 24 28                   movl    %ecx, 0x28(%esp)
    // 181: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // 185: 83 c4 10                      addl    $0x10, %esp
    // 188: 5e                            popl    %esi
    // 189: 5f                            popl    %edi
    // 18a: 5b                            popl    %ebx
    // 18b: 5d                            popl    %ebp
    // 18c: e9 00 00 00 00                jmp     0x191 <__JIT_ENTRY+0x191>
    // 0000018d:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[401] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x10, 0x8b,
        0x74, 0x24, 0x2c, 0x8b, 0x6c, 0x24, 0x28, 0x8b,
        0x7c, 0x24, 0x24, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xc0, 0x89, 0xc2, 0xf7, 0xd2, 0x31,
        0xc9, 0x31, 0xdb, 0x83, 0x7c, 0x95, 0x00, 0x00,
        0x0f, 0x94, 0xc2, 0x0f, 0x95, 0xc3, 0x01, 0xc3,
        0x83, 0xfb, 0x01, 0x0f, 0x85, 0x1f, 0x01, 0x00,
        0x00, 0x88, 0x54, 0x24, 0x04, 0x89, 0x34, 0x24,
        0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x8b,
        0x54, 0xb5, 0x00, 0x81, 0x7a, 0x04, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0x85, 0x06, 0x01, 0x00, 0x00,
        0x8b, 0x5a, 0x08, 0x83, 0x7b, 0x08, 0x08, 0x0f,
        0x85, 0xf9, 0x00, 0x00, 0x00, 0x89, 0x5c, 0x24,
        0x08, 0x8b, 0x1c, 0x24, 0x8b, 0x5b, 0x24, 0x85,
        0xdb, 0x0f, 0x8e, 0xe7, 0x00, 0x00, 0x00, 0xc1,
        0xe0, 0x02, 0x89, 0x6c, 0x24, 0x0c, 0x29, 0x44,
        0x24, 0x0c, 0x0f, 0xb6, 0x44, 0x24, 0x04, 0x88,
        0xc1, 0x8d, 0x0c, 0x8d, 0xfc, 0xff, 0xff, 0xff,
        0x8b, 0x44, 0x24, 0x08, 0x8b, 0x40, 0x04, 0x89,
        0x44, 0x24, 0x08, 0x8b, 0x44, 0x24, 0x0c, 0x8b,
        0x04, 0x08, 0x89, 0x44, 0x24, 0x04, 0x4b, 0x8b,
        0x04, 0x24, 0x89, 0x58, 0x24, 0x89, 0x6f, 0x20,
        0x8b, 0x42, 0x08, 0x31, 0xc9, 0xf6, 0x40, 0x08,
        0x20, 0x75, 0x03, 0x8b, 0x4a, 0x0c, 0x8b, 0x5c,
        0x24, 0x04, 0x53, 0x51, 0xff, 0x54, 0x24, 0x10,
        0x89, 0xda, 0x83, 0xc4, 0x08, 0x8b, 0x4f, 0x20,
        0xc7, 0x47, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x1c, 0x24, 0xff, 0x43, 0x24, 0x89, 0x4f, 0x20,
        0x8b, 0x0a, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x16, 0x49, 0x89, 0x0a, 0x75, 0x11, 0x52,
        0x89, 0x44, 0x24, 0x08, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x44, 0x24, 0x08, 0x83, 0xc4, 0x04,
        0x8d, 0x0c, 0xb5, 0x00, 0x00, 0x00, 0x00, 0x01,
        0x4f, 0x20, 0x8b, 0x54, 0xb5, 0x00, 0x8b, 0x0a,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x12,
        0x49, 0x89, 0x0a, 0x75, 0x0d, 0x52, 0x89, 0xc6,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf0, 0x83,
        0xc4, 0x04, 0x8b, 0x4f, 0x20, 0xc7, 0x47, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x8b, 0x1c,
        0x24, 0x74, 0x3e, 0x89, 0x01, 0x83, 0xc1, 0x04,
        0x89, 0x5c, 0x24, 0x2c, 0x89, 0x4c, 0x24, 0x28,
        0x89, 0x7c, 0x24, 0x24, 0x83, 0xc4, 0x10, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x74, 0x24, 0x2c, 0xeb, 0x07, 0x8b, 0x04,
        0x24, 0x89, 0x44, 0x24, 0x2c, 0x89, 0x6c, 0x24,
        0x28, 0x89, 0x7c, 0x24, 0x24, 0x83, 0xc4, 0x10,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x5c, 0x24, 0x2c, 0x89, 0x4c, 0x24,
        0x28, 0x89, 0x7c, 0x24, 0x24, 0x83, 0xc4, 0x10,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, instruction->oparg);
    patch_32(code + 0x4e, (uintptr_t)&PyCFunction_Type);
    patch_x86_64_32rx(code + 0xf5, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x121, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x154, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x175, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x18d, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_INTRINSIC_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_INTRINSIC_1.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 10: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000011:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 15: 0f b7 c9                      movzwl  %cx, %ecx
    // 18: 8b 68 fc                      movl    -0x4(%eax), %ebp
    // 1b: 89 46 20                      movl    %eax, 0x20(%esi)
    // 1e: 55                            pushl   %ebp
    // 1f: 57                            pushl   %edi
    // 20: ff 14 cd 00 00 00 00          calll   *(,%ecx,8)
    // 00000023:  IMAGE_REL_I386_DIR32 __PyIntrinsics_UnaryFunctions
    // 27: 83 c4 08                      addl    $0x8, %esp
    // 2a: 8b 5e 20                      movl    0x20(%esi), %ebx
    // 2d: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 34: 8b 4d 00                      movl    (%ebp), %ecx
    // 37: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 3d: 7f 06                         jg      0x45 <__JIT_ENTRY+0x45>
    // 3f: 49                            decl    %ecx
    // 40: 89 4d 00                      movl    %ecx, (%ebp)
    // 43: 74 1c                         je      0x61 <__JIT_ENTRY+0x61>
    // 45: 85 c0                         testl   %eax, %eax
    // 47: 74 29                         je      0x72 <__JIT_ENTRY+0x72>
    // 49: 89 43 fc                      movl    %eax, -0x4(%ebx)
    // 4c: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 50: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 54: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 58: 5e                            popl    %esi
    // 59: 5f                            popl    %edi
    // 5a: 5b                            popl    %ebx
    // 5b: 5d                            popl    %ebp
    // 5c: e9 00 00 00 00                jmp     0x61 <__JIT_ENTRY+0x61>
    // 0000005d:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 61: 55                            pushl   %ebp
    // 62: 89 c5                         movl    %eax, %ebp
    // 64: e8 00 00 00 00                calll   0x69 <__JIT_ENTRY+0x69>
    // 00000065:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 69: 89 e8                         movl    %ebp, %eax
    // 6b: 83 c4 04                      addl    $0x4, %esp
    // 6e: 85 c0                         testl   %eax, %eax
    // 70: 75 d7                         jne     0x49 <__JIT_ENTRY+0x49>
    // 72: 83 c3 fc                      addl    $-0x4, %ebx
    // 75: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 79: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 7d: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 81: 5e                            popl    %esi
    // 82: 5f                            popl    %edi
    // 83: 5b                            popl    %ebx
    // 84: 5d                            popl    %ebp
    // 85: e9 00 00 00 00                jmp     0x8a <__JIT_ENTRY+0x8a>
    // 00000086:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[138] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x18,
        0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9,
        0x8b, 0x68, 0xfc, 0x89, 0x46, 0x20, 0x55, 0x57,
        0xff, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x08, 0x8b, 0x5e, 0x20, 0xc7, 0x46, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x4d, 0x00, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x06, 0x49,
        0x89, 0x4d, 0x00, 0x74, 0x1c, 0x85, 0xc0, 0x74,
        0x29, 0x89, 0x43, 0xfc, 0x89, 0x7c, 0x24, 0x1c,
        0x89, 0x5c, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x55, 0x89, 0xc5, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xe8, 0x83, 0xc4, 0x04, 0x85, 0xc0,
        0x75, 0xd7, 0x83, 0xc3, 0xfc, 0x89, 0x7c, 0x24,
        0x1c, 0x89, 0x74, 0x24, 0x14, 0x89, 0x5c, 0x24,
        0x18, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x11, instruction->oparg);
    patch_32(code + 0x23, (uintptr_t)&_PyIntrinsics_UnaryFunctions);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x65, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x86, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_INTRINSIC_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_INTRINSIC_2.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 54 24 20                   movl    0x20(%esp), %edx
    // 9: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // d: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 11: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000012:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 16: 0f b7 c9                      movzwl  %cx, %ecx
    // 19: 8b 70 f8                      movl    -0x8(%eax), %esi
    // 1c: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 1f: 89 47 20                      movl    %eax, 0x20(%edi)
    // 22: 53                            pushl   %ebx
    // 23: 56                            pushl   %esi
    // 24: 89 54 24 08                   movl    %edx, 0x8(%esp)
    // 28: 52                            pushl   %edx
    // 29: ff 14 cd 00 00 00 00          calll   *(,%ecx,8)
    // 0000002c:  IMAGE_REL_I386_DIR32 __PyIntrinsics_BinaryFunctions
    // 30: 83 c4 0c                      addl    $0xc, %esp
    // 33: 8b 6f 20                      movl    0x20(%edi), %ebp
    // 36: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 3d: 8b 0e                         movl    (%esi), %ecx
    // 3f: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 45: 7f 05                         jg      0x4c <__JIT_ENTRY+0x4c>
    // 47: 49                            decl    %ecx
    // 48: 89 0e                         movl    %ecx, (%esi)
    // 4a: 74 1e                         je      0x6a <__JIT_ENTRY+0x6a>
    // 4c: 8b 0b                         movl    (%ebx), %ecx
    // 4e: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 54: 7f 2b                         jg      0x81 <__JIT_ENTRY+0x81>
    // 56: 49                            decl    %ecx
    // 57: 89 0b                         movl    %ecx, (%ebx)
    // 59: 75 26                         jne     0x81 <__JIT_ENTRY+0x81>
    // 5b: 53                            pushl   %ebx
    // 5c: 89 c6                         movl    %eax, %esi
    // 5e: e8 00 00 00 00                calll   0x63 <__JIT_ENTRY+0x63>
    // 0000005f:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 63: 89 f0                         movl    %esi, %eax
    // 65: 83 c4 04                      addl    $0x4, %esp
    // 68: eb 17                         jmp     0x81 <__JIT_ENTRY+0x81>
    // 6a: 56                            pushl   %esi
    // 6b: 89 c6                         movl    %eax, %esi
    // 6d: e8 00 00 00 00                calll   0x72 <__JIT_ENTRY+0x72>
    // 0000006e:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 72: 89 f0                         movl    %esi, %eax
    // 74: 83 c4 04                      addl    $0x4, %esp
    // 77: 8b 0b                         movl    (%ebx), %ecx
    // 79: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 7f: 7e d5                         jle     0x56 <__JIT_ENTRY+0x56>
    // 81: 85 c0                         testl   %eax, %eax
    // 83: 74 21                         je      0xa6 <__JIT_ENTRY+0xa6>
    // 85: 89 45 f8                      movl    %eax, -0x8(%ebp)
    // 88: 83 c5 fc                      addl    $-0x4, %ebp
    // 8b: 8b 04 24                      movl    (%esp), %eax
    // 8e: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 92: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // 96: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 9a: 83 c4 04                      addl    $0x4, %esp
    // 9d: 5e                            popl    %esi
    // 9e: 5f                            popl    %edi
    // 9f: 5b                            popl    %ebx
    // a0: 5d                            popl    %ebp
    // a1: e9 00 00 00 00                jmp     0xa6 <__JIT_ENTRY+0xa6>
    // 000000a2:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // a6: 83 c5 f8                      addl    $-0x8, %ebp
    // a9: 8b 04 24                      movl    (%esp), %eax
    // ac: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // b0: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // b4: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // b8: 83 c4 04                      addl    $0x4, %esp
    // bb: 5e                            popl    %esi
    // bc: 5f                            popl    %edi
    // bd: 5b                            popl    %ebx
    // be: 5d                            popl    %ebp
    // bf: e9 00 00 00 00                jmp     0xc4 <__JIT_ENTRY+0xc4>
    // 000000c0:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[196] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x54, 0x24,
        0x20, 0x8b, 0x7c, 0x24, 0x18, 0x8b, 0x44, 0x24,
        0x1c, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xc9, 0x8b, 0x70, 0xf8, 0x8b, 0x58, 0xfc, 0x89,
        0x47, 0x20, 0x53, 0x56, 0x89, 0x54, 0x24, 0x08,
        0x52, 0xff, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x0c, 0x8b, 0x6f, 0x20, 0xc7, 0x47,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0e, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x05, 0x49,
        0x89, 0x0e, 0x74, 0x1e, 0x8b, 0x0b, 0x81, 0xf9,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x2b, 0x49, 0x89,
        0x0b, 0x75, 0x26, 0x53, 0x89, 0xc6, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xf0, 0x83, 0xc4, 0x04,
        0xeb, 0x17, 0x56, 0x89, 0xc6, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xf0, 0x83, 0xc4, 0x04, 0x8b,
        0x0b, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7e,
        0xd5, 0x85, 0xc0, 0x74, 0x21, 0x89, 0x45, 0xf8,
        0x83, 0xc5, 0xfc, 0x8b, 0x04, 0x24, 0x89, 0x44,
        0x24, 0x20, 0x89, 0x6c, 0x24, 0x1c, 0x89, 0x7c,
        0x24, 0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc5,
        0xf8, 0x8b, 0x04, 0x24, 0x89, 0x44, 0x24, 0x20,
        0x89, 0x7c, 0x24, 0x18, 0x89, 0x6c, 0x24, 0x1c,
        0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x12, instruction->oparg);
    patch_32(code + 0x2c, (uintptr_t)&_PyIntrinsics_BinaryFunctions);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x6e, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xa2, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xc0, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_ISINSTANCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_ISINSTANCE.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 10                      subl    $0x10, %esp
    // 7: 8b 6c 24 2c                   movl    0x2c(%esp), %ebp
    // b: 8b 5c 24 28                   movl    0x28(%esp), %ebx
    // f: b8 00 00 00 00                movl    $0x0, %eax
    // 00000010:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 14: 0f b7 f0                      movzwl  %ax, %esi
    // 17: 89 f7                         movl    %esi, %edi
    // 19: f7 d7                         notl    %edi
    // 1b: 31 d2                         xorl    %edx, %edx
    // 1d: 31 c0                         xorl    %eax, %eax
    // 1f: 83 3c bb 00                   cmpl    $0x0, (%ebx,%edi,4)
    // 23: 0f 95 c2                      setne   %dl
    // 26: 0f 94 44 24 04                sete    0x4(%esp)
    // 2b: 01 f2                         addl    %esi, %edx
    // 2d: 8b 4c 24 24                   movl    0x24(%esp), %ecx
    // 31: 83 fa 02                      cmpl    $0x2, %edx
    // 34: 75 29                         jne     0x5f <__JIT_ENTRY+0x5f>
    // 36: 89 0c 24                      movl    %ecx, (%esp)
    // 39: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 3e: 29 f1                         subl    %esi, %ecx
    // 40: 8b 55 08                      movl    0x8(%ebp), %edx
    // 43: 8b 92 b8 bb 01 00             movl    0x1bbb8(%edx), %edx
    // 49: 3b 14 8b                      cmpl    (%ebx,%ecx,4), %edx
    // 4c: 74 29                         je      0x77 <__JIT_ENTRY+0x77>
    // 4e: 89 6c 24 2c                   movl    %ebp, 0x2c(%esp)
    // 52: 89 5c 24 28                   movl    %ebx, 0x28(%esp)
    // 56: 8b 04 24                      movl    (%esp), %eax
    // 59: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // 5d: eb 0c                         jmp     0x6b <__JIT_ENTRY+0x6b>
    // 5f: 89 6c 24 2c                   movl    %ebp, 0x2c(%esp)
    // 63: 89 5c 24 28                   movl    %ebx, 0x28(%esp)
    // 67: 89 4c 24 24                   movl    %ecx, 0x24(%esp)
    // 6b: 83 c4 10                      addl    $0x10, %esp
    // 6e: 5e                            popl    %esi
    // 6f: 5f                            popl    %edi
    // 70: 5b                            popl    %ebx
    // 71: 5d                            popl    %ebp
    // 72: e9 00 00 00 00                jmp     0x77 <__JIT_ENTRY+0x77>
    // 00000073:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 77: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 7b: 89 6c 24 08                   movl    %ebp, 0x8(%esp)
    // 7f: 8d 14 b5 00 00 00 00          leal    (,%esi,4), %edx
    // 86: 89 dd                         movl    %ebx, %ebp
    // 88: 29 d5                         subl    %edx, %ebp
    // 8a: 0f b6 4c 24 04                movzbl  0x4(%esp), %ecx
    // 8f: 88 c8                         movb    %cl, %al
    // 91: 8d 04 85 fc ff ff ff          leal    -0x4(,%eax,4), %eax
    // 98: 8b 4c 05 00                   movl    (%ebp,%eax), %ecx
    // 9c: 8b 44 05 04                   movl    0x4(%ebp,%eax), %eax
    // a0: 8b 2c 24                      movl    (%esp), %ebp
    // a3: 89 5d 20                      movl    %ebx, 0x20(%ebp)
    // a6: 50                            pushl   %eax
    // a7: 51                            pushl   %ecx
    // a8: e8 00 00 00 00                calll   0xad <__JIT_ENTRY+0xad>
    // 000000a9:  IMAGE_REL_I386_REL32 _PyObject_IsInstance
    // ad: 83 c4 08                      addl    $0x8, %esp
    // b0: 8b 4d 20                      movl    0x20(%ebp), %ecx
    // b3: c7 45 20 00 00 00 00          movl    $0x0, 0x20(%ebp)
    // ba: 85 c0                         testl   %eax, %eax
    // bc: 0f 88 bf 00 00 00             js      0x181 <__JIT_ENTRY+0x181>
    // c2: 89 c5                         movl    %eax, %ebp
    // c4: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // c8: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // cc: 8b 04 83                      movl    (%ebx,%eax,4), %eax
    // cf: 8b 08                         movl    (%eax), %ecx
    // d1: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // d7: 7f 0e                         jg      0xe7 <__JIT_ENTRY+0xe7>
    // d9: 49                            decl    %ecx
    // da: 89 08                         movl    %ecx, (%eax)
    // dc: 75 09                         jne     0xe7 <__JIT_ENTRY+0xe7>
    // de: 50                            pushl   %eax
    // df: e8 00 00 00 00                calll   0xe4 <__JIT_ENTRY+0xe4>
    // 000000e0:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // e4: 83 c4 04                      addl    $0x4, %esp
    // e7: 8b 04 bb                      movl    (%ebx,%edi,4), %eax
    // ea: 85 c0                         testl   %eax, %eax
    // ec: 74 18                         je      0x106 <__JIT_ENTRY+0x106>
    // ee: 8b 08                         movl    (%eax), %ecx
    // f0: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // f6: 7f 0e                         jg      0x106 <__JIT_ENTRY+0x106>
    // f8: 49                            decl    %ecx
    // f9: 89 08                         movl    %ecx, (%eax)
    // fb: 75 09                         jne     0x106 <__JIT_ENTRY+0x106>
    // fd: 50                            pushl   %eax
    // fe: e8 00 00 00 00                calll   0x103 <__JIT_ENTRY+0x103>
    // 000000ff:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 103: 83 c4 04                      addl    $0x4, %esp
    // 106: b8 00 00 00 00                movl    $0x0, %eax
    // 00000107:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 10b: 66 85 c0                      testw   %ax, %ax
    // 10e: 74 35                         je      0x145 <__JIT_ENTRY+0x145>
    // 110: 46                            incl    %esi
    // 111: 83 c3 fc                      addl    $-0x4, %ebx
    // 114: eb 13                         jmp     0x129 <__JIT_ENTRY+0x129>
    // 116: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%eax,%eax)
    // 120: 4e                            decl    %esi
    // 121: 83 c3 fc                      addl    $-0x4, %ebx
    // 124: 83 fe 01                      cmpl    $0x1, %esi
    // 127: 76 1c                         jbe     0x145 <__JIT_ENTRY+0x145>
    // 129: 8b 03                         movl    (%ebx), %eax
    // 12b: 8b 08                         movl    (%eax), %ecx
    // 12d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 133: 7f eb                         jg      0x120 <__JIT_ENTRY+0x120>
    // 135: 49                            decl    %ecx
    // 136: 89 08                         movl    %ecx, (%eax)
    // 138: 75 e6                         jne     0x120 <__JIT_ENTRY+0x120>
    // 13a: 50                            pushl   %eax
    // 13b: e8 00 00 00 00                calll   0x140 <__JIT_ENTRY+0x140>
    // 0000013c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 140: 83 c4 04                      addl    $0x4, %esp
    // 143: eb db                         jmp     0x120 <__JIT_ENTRY+0x120>
    // 145: 85 ed                         testl   %ebp, %ebp
    // 147: b8 00 00 00 00                movl    $0x0, %eax
    // 00000148:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 14c: b9 00 00 00 00                movl    $0x0, %ecx
    // 0000014d:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 151: 0f 44 c8                      cmovel  %eax, %ecx
    // 154: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 158: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 15c: 89 0c 82                      movl    %ecx, (%edx,%eax,4)
    // 15f: 8d 04 ba                      leal    (%edx,%edi,4), %eax
    // 162: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 166: 89 4c 24 2c                   movl    %ecx, 0x2c(%esp)
    // 16a: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // 16e: 8b 04 24                      movl    (%esp), %eax
    // 171: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // 175: 83 c4 10                      addl    $0x10, %esp
    // 178: 5e                            popl    %esi
    // 179: 5f                            popl    %edi
    // 17a: 5b                            popl    %ebx
    // 17b: 5d                            popl    %ebp
    // 17c: e9 00 00 00 00                jmp     0x181 <__JIT_ENTRY+0x181>
    // 0000017d:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 181: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 185: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 189: 89 4c 24 28                   movl    %ecx, 0x28(%esp)
    // 18d: 89 6c 24 24                   movl    %ebp, 0x24(%esp)
    // 191: 83 c4 10                      addl    $0x10, %esp
    // 194: 5e                            popl    %esi
    // 195: 5f                            popl    %edi
    // 196: 5b                            popl    %ebx
    // 197: 5d                            popl    %ebp
    // 198: e9 00 00 00 00                jmp     0x19d <__JIT_ENTRY+0x19d>
    // 00000199:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[413] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x10, 0x8b,
        0x6c, 0x24, 0x2c, 0x8b, 0x5c, 0x24, 0x28, 0xb8,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x89,
        0xf7, 0xf7, 0xd7, 0x31, 0xd2, 0x31, 0xc0, 0x83,
        0x3c, 0xbb, 0x00, 0x0f, 0x95, 0xc2, 0x0f, 0x94,
        0x44, 0x24, 0x04, 0x01, 0xf2, 0x8b, 0x4c, 0x24,
        0x24, 0x83, 0xfa, 0x02, 0x75, 0x29, 0x89, 0x0c,
        0x24, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf1,
        0x8b, 0x55, 0x08, 0x8b, 0x92, 0xb8, 0xbb, 0x01,
        0x00, 0x3b, 0x14, 0x8b, 0x74, 0x29, 0x89, 0x6c,
        0x24, 0x2c, 0x89, 0x5c, 0x24, 0x28, 0x8b, 0x04,
        0x24, 0x89, 0x44, 0x24, 0x24, 0xeb, 0x0c, 0x89,
        0x6c, 0x24, 0x2c, 0x89, 0x5c, 0x24, 0x28, 0x89,
        0x4c, 0x24, 0x24, 0x83, 0xc4, 0x10, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89,
        0x4c, 0x24, 0x0c, 0x89, 0x6c, 0x24, 0x08, 0x8d,
        0x14, 0xb5, 0x00, 0x00, 0x00, 0x00, 0x89, 0xdd,
        0x29, 0xd5, 0x0f, 0xb6, 0x4c, 0x24, 0x04, 0x88,
        0xc8, 0x8d, 0x04, 0x85, 0xfc, 0xff, 0xff, 0xff,
        0x8b, 0x4c, 0x05, 0x00, 0x8b, 0x44, 0x05, 0x04,
        0x8b, 0x2c, 0x24, 0x89, 0x5d, 0x20, 0x50, 0x51,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x08,
        0x8b, 0x4d, 0x20, 0xc7, 0x45, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xbf, 0x00,
        0x00, 0x00, 0x89, 0xc5, 0x89, 0x4c, 0x24, 0x04,
        0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x04, 0x83, 0x8b,
        0x08, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x0e, 0x49, 0x89, 0x08, 0x75, 0x09, 0x50, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b,
        0x04, 0xbb, 0x85, 0xc0, 0x74, 0x18, 0x8b, 0x08,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e,
        0x49, 0x89, 0x08, 0x75, 0x09, 0x50, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0xb8, 0x00,
        0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x35,
        0x46, 0x83, 0xc3, 0xfc, 0xeb, 0x13, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4e, 0x83, 0xc3, 0xfc, 0x83, 0xfe, 0x01, 0x76,
        0x1c, 0x8b, 0x03, 0x8b, 0x08, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0xeb, 0x49, 0x89, 0x08,
        0x75, 0xe6, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0xeb, 0xdb, 0x85, 0xed, 0xb8,
        0x00, 0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0x44, 0xc8, 0x8b, 0x44, 0x24, 0x0c,
        0x8b, 0x54, 0x24, 0x04, 0x89, 0x0c, 0x82, 0x8d,
        0x04, 0xba, 0x8b, 0x4c, 0x24, 0x08, 0x89, 0x4c,
        0x24, 0x2c, 0x89, 0x44, 0x24, 0x28, 0x8b, 0x04,
        0x24, 0x89, 0x44, 0x24, 0x24, 0x83, 0xc4, 0x10,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x44, 0x24, 0x08, 0x89, 0x44, 0x24,
        0x2c, 0x89, 0x4c, 0x24, 0x28, 0x89, 0x6c, 0x24,
        0x24, 0x83, 0xc4, 0x10, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x10, instruction->oparg);
    patch_x86_64_32rx(code + 0x73, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0xa9, (uintptr_t)&PyObject_IsInstance + -0x4);
    patch_x86_64_32rx(code + 0xe0, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xff, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x107, instruction->oparg);
    patch_x86_64_32rx(code + 0x13c, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x148, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0x14d, (uintptr_t)&_Py_TrueStruct);
    patch_x86_64_32rx(code + 0x17d, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x199, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_KW_NON_PY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_KW_NON_PY.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 18                      subl    $0x18, %esp
    // 7: 8b 5c 24 30                   movl    0x30(%esp), %ebx
    // b: b8 00 00 00 00                movl    $0x0, %eax
    // 0000000c:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 10: 0f b7 f8                      movzwl  %ax, %edi
    // 13: 89 fa                         movl    %edi, %edx
    // 15: f7 d2                         notl    %edx
    // 17: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
    // 1c: 29 fe                         subl    %edi, %esi
    // 1e: bd fd ff ff ff                movl    $0xfffffffd, %ebp       # imm = 0xFFFFFFFD
    // 23: 29 fd                         subl    %edi, %ebp
    // 25: 31 c9                         xorl    %ecx, %ecx
    // 27: 31 c0                         xorl    %eax, %eax
    // 29: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 2d: 83 3c b3 00                   cmpl    $0x0, (%ebx,%esi,4)
    // 31: 0f 94 c0                      sete    %al
    // 34: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 38: 8d 14 93                      leal    (%ebx,%edx,4), %edx
    // 3b: 8d 44 82 fc                   leal    -0x4(%edx,%eax,4), %eax
    // 3f: 89 04 24                      movl    %eax, (%esp)
    // 42: 0f 95 c1                      setne   %cl
    // 45: 8b 43 fc                      movl    -0x4(%ebx), %eax
    // 48: 89 fa                         movl    %edi, %edx
    // 4a: 2b 50 08                      subl    0x8(%eax), %edx
    // 4d: 01 ca                         addl    %ecx, %edx
    // 4f: 8b 4c 24 34                   movl    0x34(%esp), %ecx
    // 53: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 57: 8b 74 24 2c                   movl    0x2c(%esp), %esi
    // 5b: 89 6c 24 10                   movl    %ebp, 0x10(%esp)
    // 5f: 8b 0c ab                      movl    (%ebx,%ebp,4), %ecx
    // 62: 89 5e 20                      movl    %ebx, 0x20(%esi)
    // 65: 81 ca 00 00 00 80             orl     $0x80000000, %edx       # imm = 0x80000000
    // 6b: 89 c5                         movl    %eax, %ebp
    // 6d: 50                            pushl   %eax
    // 6e: 52                            pushl   %edx
    // 6f: ff 74 24 08                   pushl   0x8(%esp)
    // 73: 51                            pushl   %ecx
    // 74: e8 00 00 00 00                calll   0x79 <__JIT_ENTRY+0x79>
    // 00000075:  IMAGE_REL_I386_REL32 _PyObject_Vectorcall
    // 79: 89 e9                         movl    %ebp, %ecx
    // 7b: 83 c4 10                      addl    $0x10, %esp
    // 7e: 89 34 24                      movl    %esi, (%esp)
    // 81: 83 46 20 fc                   addl    $-0x4, 0x20(%esi)
    // 85: 89 c5                         movl    %eax, %ebp
    // 87: 8b 01                         movl    (%ecx), %eax
    // 89: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 8e: 7f 0e                         jg      0x9e <__JIT_ENTRY+0x9e>
    // 90: 48                            decl    %eax
    // 91: 89 01                         movl    %eax, (%ecx)
    // 93: 75 09                         jne     0x9e <__JIT_ENTRY+0x9e>
    // 95: 51                            pushl   %ecx
    // 96: e8 00 00 00 00                calll   0x9b <__JIT_ENTRY+0x9b>
    // 00000097:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 9b: 83 c4 04                      addl    $0x4, %esp
    // 9e: 8b 04 24                      movl    (%esp), %eax
    // a1: 8b 48 20                      movl    0x20(%eax), %ecx
    // a4: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // a8: c7 40 20 00 00 00 00          movl    $0x0, 0x20(%eax)
    // af: 8b 44 24 10                   movl    0x10(%esp), %eax
    // b3: 8b 04 83                      movl    (%ebx,%eax,4), %eax
    // b6: 8b 08                         movl    (%eax), %ecx
    // b8: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // be: 7f 0e                         jg      0xce <__JIT_ENTRY+0xce>
    // c0: 49                            decl    %ecx
    // c1: 89 08                         movl    %ecx, (%eax)
    // c3: 75 09                         jne     0xce <__JIT_ENTRY+0xce>
    // c5: 50                            pushl   %eax
    // c6: e8 00 00 00 00                calll   0xcb <__JIT_ENTRY+0xcb>
    // 000000c7:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // cb: 83 c4 04                      addl    $0x4, %esp
    // ce: 8b 74 24 14                   movl    0x14(%esp), %esi
    // d2: 8b 04 b3                      movl    (%ebx,%esi,4), %eax
    // d5: 85 c0                         testl   %eax, %eax
    // d7: 74 18                         je      0xf1 <__JIT_ENTRY+0xf1>
    // d9: 8b 08                         movl    (%eax), %ecx
    // db: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // e1: 7f 0e                         jg      0xf1 <__JIT_ENTRY+0xf1>
    // e3: 49                            decl    %ecx
    // e4: 89 08                         movl    %ecx, (%eax)
    // e6: 75 09                         jne     0xf1 <__JIT_ENTRY+0xf1>
    // e8: 50                            pushl   %eax
    // e9: e8 00 00 00 00                calll   0xee <__JIT_ENTRY+0xee>
    // 000000ea:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // ee: 83 c4 04                      addl    $0x4, %esp
    // f1: b8 00 00 00 00                movl    $0x0, %eax
    // 000000f2:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // f6: 66 85 c0                      testw   %ax, %ax
    // f9: 74 3a                         je      0x135 <__JIT_ENTRY+0x135>
    // fb: 47                            incl    %edi
    // fc: 83 c3 f8                      addl    $-0x8, %ebx
    // ff: eb 18                         jmp     0x119 <__JIT_ENTRY+0x119>
    // 101: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%eax,%eax)
    // 110: 4f                            decl    %edi
    // 111: 83 c3 fc                      addl    $-0x4, %ebx
    // 114: 83 ff 01                      cmpl    $0x1, %edi
    // 117: 76 1c                         jbe     0x135 <__JIT_ENTRY+0x135>
    // 119: 8b 03                         movl    (%ebx), %eax
    // 11b: 8b 08                         movl    (%eax), %ecx
    // 11d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 123: 7f eb                         jg      0x110 <__JIT_ENTRY+0x110>
    // 125: 49                            decl    %ecx
    // 126: 89 08                         movl    %ecx, (%eax)
    // 128: 75 e6                         jne     0x110 <__JIT_ENTRY+0x110>
    // 12a: 50                            pushl   %eax
    // 12b: e8 00 00 00 00                calll   0x130 <__JIT_ENTRY+0x130>
    // 0000012c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 130: 83 c4 04                      addl    $0x4, %esp
    // 133: eb db                         jmp     0x110 <__JIT_ENTRY+0x110>
    // 135: 85 ed                         testl   %ebp, %ebp
    // 137: 74 2d                         je      0x166 <__JIT_ENTRY+0x166>
    // 139: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 13d: 89 2c b1                      movl    %ebp, (%ecx,%esi,4)
    // 140: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 144: 8d 04 81                      leal    (%ecx,%eax,4), %eax
    // 147: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 14b: 89 4c 24 34                   movl    %ecx, 0x34(%esp)
    // 14f: 89 44 24 30                   movl    %eax, 0x30(%esp)
    // 153: 8b 04 24                      movl    (%esp), %eax
    // 156: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 15a: 83 c4 18                      addl    $0x18, %esp
    // 15d: 5e                            popl    %esi
    // 15e: 5f                            popl    %edi
    // 15f: 5b                            popl    %ebx
    // 160: 5d                            popl    %ebp
    // 161: e9 00 00 00 00                jmp     0x166 <__JIT_ENTRY+0x166>
    // 00000162:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 166: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 16a: 8d 04 b0                      leal    (%eax,%esi,4), %eax
    // 16d: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 171: 89 4c 24 34                   movl    %ecx, 0x34(%esp)
    // 175: 8b 0c 24                      movl    (%esp), %ecx
    // 178: 89 4c 24 2c                   movl    %ecx, 0x2c(%esp)
    // 17c: 89 44 24 30                   movl    %eax, 0x30(%esp)
    // 180: 83 c4 18                      addl    $0x18, %esp
    // 183: 5e                            popl    %esi
    // 184: 5f                            popl    %edi
    // 185: 5b                            popl    %ebx
    // 186: 5d                            popl    %ebp
    // 187: e9 00 00 00 00                jmp     0x18c <__JIT_ENTRY+0x18c>
    // 00000188:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[396] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x18, 0x8b,
        0x5c, 0x24, 0x30, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xf8, 0x89, 0xfa, 0xf7, 0xd2, 0xbe,
        0xfe, 0xff, 0xff, 0xff, 0x29, 0xfe, 0xbd, 0xfd,
        0xff, 0xff, 0xff, 0x29, 0xfd, 0x31, 0xc9, 0x31,
        0xc0, 0x89, 0x74, 0x24, 0x14, 0x83, 0x3c, 0xb3,
        0x00, 0x0f, 0x94, 0xc0, 0x89, 0x54, 0x24, 0x0c,
        0x8d, 0x14, 0x93, 0x8d, 0x44, 0x82, 0xfc, 0x89,
        0x04, 0x24, 0x0f, 0x95, 0xc1, 0x8b, 0x43, 0xfc,
        0x89, 0xfa, 0x2b, 0x50, 0x08, 0x01, 0xca, 0x8b,
        0x4c, 0x24, 0x34, 0x89, 0x4c, 0x24, 0x08, 0x8b,
        0x74, 0x24, 0x2c, 0x89, 0x6c, 0x24, 0x10, 0x8b,
        0x0c, 0xab, 0x89, 0x5e, 0x20, 0x81, 0xca, 0x00,
        0x00, 0x00, 0x80, 0x89, 0xc5, 0x50, 0x52, 0xff,
        0x74, 0x24, 0x08, 0x51, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xe9, 0x83, 0xc4, 0x10, 0x89, 0x34,
        0x24, 0x83, 0x46, 0x20, 0xfc, 0x89, 0xc5, 0x8b,
        0x01, 0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e,
        0x48, 0x89, 0x01, 0x75, 0x09, 0x51, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b, 0x04,
        0x24, 0x8b, 0x48, 0x20, 0x89, 0x4c, 0x24, 0x04,
        0xc7, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x44, 0x24, 0x10, 0x8b, 0x04, 0x83, 0x8b, 0x08,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e,
        0x49, 0x89, 0x08, 0x75, 0x09, 0x50, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b, 0x74,
        0x24, 0x14, 0x8b, 0x04, 0xb3, 0x85, 0xc0, 0x74,
        0x18, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75, 0x09,
        0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85,
        0xc0, 0x74, 0x3a, 0x47, 0x83, 0xc3, 0xf8, 0xeb,
        0x18, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x83, 0xc3, 0xfc, 0x83, 0xff, 0x01, 0x76,
        0x1c, 0x8b, 0x03, 0x8b, 0x08, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0xeb, 0x49, 0x89, 0x08,
        0x75, 0xe6, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0xeb, 0xdb, 0x85, 0xed, 0x74,
        0x2d, 0x8b, 0x4c, 0x24, 0x04, 0x89, 0x2c, 0xb1,
        0x8b, 0x44, 0x24, 0x0c, 0x8d, 0x04, 0x81, 0x8b,
        0x4c, 0x24, 0x08, 0x89, 0x4c, 0x24, 0x34, 0x89,
        0x44, 0x24, 0x30, 0x8b, 0x04, 0x24, 0x89, 0x44,
        0x24, 0x2c, 0x83, 0xc4, 0x18, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x44,
        0x24, 0x04, 0x8d, 0x04, 0xb0, 0x8b, 0x4c, 0x24,
        0x08, 0x89, 0x4c, 0x24, 0x34, 0x8b, 0x0c, 0x24,
        0x89, 0x4c, 0x24, 0x2c, 0x89, 0x44, 0x24, 0x30,
        0x83, 0xc4, 0x18, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xc, instruction->oparg);
    patch_x86_64_32rx(code + 0x75, (uintptr_t)&PyObject_Vectorcall + -0x4);
    patch_x86_64_32rx(code + 0x97, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xc7, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xea, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0xf2, instruction->oparg);
    patch_x86_64_32rx(code + 0x12c, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x162, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x188, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_LEN(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_LEN.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 7c 24 24                   movl    0x24(%esp), %edi
    // b: 8b 5c 24 20                   movl    0x20(%esp), %ebx
    // f: 8b 74 24 1c                   movl    0x1c(%esp), %esi
    // 13: b8 00 00 00 00                movl    $0x0, %eax
    // 00000014:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 18: 0f b7 c0                      movzwl  %ax, %eax
    // 1b: 89 c2                         movl    %eax, %edx
    // 1d: f7 d2                         notl    %edx
    // 1f: 31 c9                         xorl    %ecx, %ecx
    // 21: 83 3c 93 00                   cmpl    $0x0, (%ebx,%edx,4)
    // 25: 0f 94 c2                      sete    %dl
    // 28: 0f 95 c1                      setne   %cl
    // 2b: 01 c1                         addl    %eax, %ecx
    // 2d: 83 f9 01                      cmpl    $0x1, %ecx
    // 30: 75 15                         jne     0x47 <__JIT_ENTRY+0x47>
    // 32: bd fe ff ff ff                movl    $0xfffffffe, %ebp       # imm = 0xFFFFFFFE
    // 37: 29 c5                         subl    %eax, %ebp
    // 39: 8b 4f 08                      movl    0x8(%edi), %ecx
    // 3c: 8b 89 bc bb 01 00             movl    0x1bbbc(%ecx), %ecx
    // 42: 3b 0c ab                      cmpl    (%ebx,%ebp,4), %ecx
    // 45: 74 18                         je      0x5f <__JIT_ENTRY+0x5f>
    // 47: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // 4b: 89 5c 24 20                   movl    %ebx, 0x20(%esp)
    // 4f: 89 74 24 1c                   movl    %esi, 0x1c(%esp)
    // 53: 83 c4 08                      addl    $0x8, %esp
    // 56: 5e                            popl    %esi
    // 57: 5f                            popl    %edi
    // 58: 5b                            popl    %ebx
    // 59: 5d                            popl    %ebp
    // 5a: e9 00 00 00 00                jmp     0x5f <__JIT_ENTRY+0x5f>
    // 0000005b:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 5f: c1 e0 02                      shll    $0x2, %eax
    // 62: 89 d9                         movl    %ebx, %ecx
    // 64: 29 c1                         subl    %eax, %ecx
    // 66: 31 c0                         xorl    %eax, %eax
    // 68: 88 d0                         movb    %dl, %al
    // 6a: 8d 04 85 fc ff ff ff          leal    -0x4(,%eax,4), %eax
    // 71: 8b 04 01                      movl    (%ecx,%eax), %eax
    // 74: 89 5e 20                      movl    %ebx, 0x20(%esi)
    // 77: 89 04 24                      movl    %eax, (%esp)
    // 7a: 50                            pushl   %eax
    // 7b: e8 00 00 00 00                calll   0x80 <__JIT_ENTRY+0x80>
    // 0000007c:  IMAGE_REL_I386_REL32 _PyObject_Size
    // 80: 83 c4 04                      addl    $0x4, %esp
    // 83: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 86: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 8d: 85 c0                         testl   %eax, %eax
    // 8f: 0f 88 8f 00 00 00             js      0x124 <__JIT_ENTRY+0x124>
    // 95: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 99: 50                            pushl   %eax
    // 9a: e8 00 00 00 00                calll   0x9f <__JIT_ENTRY+0x9f>
    // 0000009b:  IMAGE_REL_I386_REL32 _PyLong_FromSsize_t
    // 9f: 83 c4 04                      addl    $0x4, %esp
    // a2: 85 c0                         testl   %eax, %eax
    // a4: 0f 84 84 00 00 00             je      0x12e <__JIT_ENTRY+0x12e>
    // aa: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // ae: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // b1: 8b 14 24                      movl    (%esp), %edx
    // b4: 8b 0a                         movl    (%edx), %ecx
    // b6: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // bc: 7f 16                         jg      0xd4 <__JIT_ENTRY+0xd4>
    // be: 49                            decl    %ecx
    // bf: 89 0a                         movl    %ecx, (%edx)
    // c1: 75 11                         jne     0xd4 <__JIT_ENTRY+0xd4>
    // c3: 52                            pushl   %edx
    // c4: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // c8: e8 00 00 00 00                calll   0xcd <__JIT_ENTRY+0xcd>
    // 000000c9:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // cd: 8b 44 24 04                   movl    0x4(%esp), %eax
    // d1: 83 c4 04                      addl    $0x4, %esp
    // d4: 8d 0c ad 00 00 00 00          leal    (,%ebp,4), %ecx
    // db: 01 4e 20                      addl    %ecx, 0x20(%esi)
    // de: 8b 0c ab                      movl    (%ebx,%ebp,4), %ecx
    // e1: 8b 11                         movl    (%ecx), %edx
    // e3: 81 fa ff ff ff 3f             cmpl    $0x3fffffff, %edx       # imm = 0x3FFFFFFF
    // e9: 7f 12                         jg      0xfd <__JIT_ENTRY+0xfd>
    // eb: 4a                            decl    %edx
    // ec: 89 11                         movl    %edx, (%ecx)
    // ee: 75 0d                         jne     0xfd <__JIT_ENTRY+0xfd>
    // f0: 51                            pushl   %ecx
    // f1: 89 c3                         movl    %eax, %ebx
    // f3: e8 00 00 00 00                calll   0xf8 <__JIT_ENTRY+0xf8>
    // 000000f4:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // f8: 89 d8                         movl    %ebx, %eax
    // fa: 83 c4 04                      addl    $0x4, %esp
    // fd: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 100: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 107: 89 01                         movl    %eax, (%ecx)
    // 109: 83 c1 04                      addl    $0x4, %ecx
    // 10c: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // 110: 89 4c 24 20                   movl    %ecx, 0x20(%esp)
    // 114: 89 74 24 1c                   movl    %esi, 0x1c(%esp)
    // 118: 83 c4 08                      addl    $0x8, %esp
    // 11b: 5e                            popl    %esi
    // 11c: 5f                            popl    %edi
    // 11d: 5b                            popl    %ebx
    // 11e: 5d                            popl    %ebp
    // 11f: e9 00 00 00 00                jmp     0x124 <__JIT_ENTRY+0x124>
    // 00000120:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 124: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // 128: 89 4c 24 20                   movl    %ecx, 0x20(%esp)
    // 12c: eb 0c                         jmp     0x13a <__JIT_ENTRY+0x13a>
    // 12e: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // 132: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 136: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 13a: 89 74 24 1c                   movl    %esi, 0x1c(%esp)
    // 13e: 83 c4 08                      addl    $0x8, %esp
    // 141: 5e                            popl    %esi
    // 142: 5f                            popl    %edi
    // 143: 5b                            popl    %ebx
    // 144: 5d                            popl    %ebp
    // 145: e9 00 00 00 00                jmp     0x14a <__JIT_ENTRY+0x14a>
    // 00000146:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[330] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x7c, 0x24, 0x24, 0x8b, 0x5c, 0x24, 0x20, 0x8b,
        0x74, 0x24, 0x1c, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xc0, 0x89, 0xc2, 0xf7, 0xd2, 0x31,
        0xc9, 0x83, 0x3c, 0x93, 0x00, 0x0f, 0x94, 0xc2,
        0x0f, 0x95, 0xc1, 0x01, 0xc1, 0x83, 0xf9, 0x01,
        0x75, 0x15, 0xbd, 0xfe, 0xff, 0xff, 0xff, 0x29,
        0xc5, 0x8b, 0x4f, 0x08, 0x8b, 0x89, 0xbc, 0xbb,
        0x01, 0x00, 0x3b, 0x0c, 0xab, 0x74, 0x18, 0x89,
        0x7c, 0x24, 0x24, 0x89, 0x5c, 0x24, 0x20, 0x89,
        0x74, 0x24, 0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0xc1,
        0xe0, 0x02, 0x89, 0xd9, 0x29, 0xc1, 0x31, 0xc0,
        0x88, 0xd0, 0x8d, 0x04, 0x85, 0xfc, 0xff, 0xff,
        0xff, 0x8b, 0x04, 0x01, 0x89, 0x5e, 0x20, 0x89,
        0x04, 0x24, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0x8b, 0x4e, 0x20, 0xc7, 0x46,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f,
        0x88, 0x8f, 0x00, 0x00, 0x00, 0x89, 0x4c, 0x24,
        0x04, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00,
        0x00, 0x00, 0x8b, 0x4c, 0x24, 0x04, 0x89, 0x4e,
        0x20, 0x8b, 0x14, 0x24, 0x8b, 0x0a, 0x81, 0xf9,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x16, 0x49, 0x89,
        0x0a, 0x75, 0x11, 0x52, 0x89, 0x44, 0x24, 0x04,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x44, 0x24,
        0x04, 0x83, 0xc4, 0x04, 0x8d, 0x0c, 0xad, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x4e, 0x20, 0x8b, 0x0c,
        0xab, 0x8b, 0x11, 0x81, 0xfa, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x12, 0x4a, 0x89, 0x11, 0x75, 0x0d,
        0x51, 0x89, 0xc3, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xd8, 0x83, 0xc4, 0x04, 0x8b, 0x4e, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x89,
        0x01, 0x83, 0xc1, 0x04, 0x89, 0x7c, 0x24, 0x24,
        0x89, 0x4c, 0x24, 0x20, 0x89, 0x74, 0x24, 0x1c,
        0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x24,
        0x89, 0x4c, 0x24, 0x20, 0xeb, 0x0c, 0x89, 0x7c,
        0x24, 0x24, 0x8b, 0x44, 0x24, 0x04, 0x89, 0x44,
        0x24, 0x20, 0x89, 0x74, 0x24, 0x1c, 0x83, 0xc4,
        0x08, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, instruction->oparg);
    patch_x86_64_32rx(code + 0x5b, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x7c, (uintptr_t)&PyObject_Size + -0x4);
    patch_x86_64_32rx(code + 0x9b, (uintptr_t)&PyLong_FromSsize_t + -0x4);
    patch_x86_64_32rx(code + 0xc9, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xf4, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x120, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x146, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_LIST_APPEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_LIST_APPEND.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 7c 24 24                   movl    0x24(%esp), %edi
    // b: 8b 74 24 20                   movl    0x20(%esp), %esi
    // f: 8b 4c 24 1c                   movl    0x1c(%esp), %ecx
    // 13: 8b 5e f4                      movl    -0xc(%esi), %ebx
    // 16: 8b 47 08                      movl    0x8(%edi), %eax
    // 19: 39 98 c0 bb 01 00             cmpl    %ebx, 0x1bbc0(%eax)
    // 1f: 75 0c                         jne     0x2d <__JIT_ENTRY+0x2d>
    // 21: 8b 6e f8                      movl    -0x8(%esi), %ebp
    // 24: 8b 45 04                      movl    0x4(%ebp), %eax
    // 27: f6 40 57 02                   testb   $0x2, 0x57(%eax)
    // 2b: 75 18                         jne     0x45 <__JIT_ENTRY+0x45>
    // 2d: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // 31: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // 35: 89 4c 24 1c                   movl    %ecx, 0x1c(%esp)
    // 39: 83 c4 08                      addl    $0x8, %esp
    // 3c: 5e                            popl    %esi
    // 3d: 5f                            popl    %edi
    // 3e: 5b                            popl    %ebx
    // 3f: 5d                            popl    %ebp
    // 40: e9 00 00 00 00                jmp     0x45 <__JIT_ENTRY+0x45>
    // 00000041:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 45: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 49: 8b 46 fc                      movl    -0x4(%esi), %eax
    // 4c: 83 c6 f8                      addl    $-0x8, %esi
    // 4f: 8b 4d 08                      movl    0x8(%ebp), %ecx
    // 52: 39 4d 10                      cmpl    %ecx, 0x10(%ebp)
    // 55: 7e 0e                         jle     0x65 <__JIT_ENTRY+0x65>
    // 57: 8b 55 0c                      movl    0xc(%ebp), %edx
    // 5a: 89 04 8a                      movl    %eax, (%edx,%ecx,4)
    // 5d: 41                            incl    %ecx
    // 5e: 89 4d 08                      movl    %ecx, 0x8(%ebp)
    // 61: b2 01                         movb    $0x1, %dl
    // 63: eb 0f                         jmp     0x74 <__JIT_ENTRY+0x74>
    // 65: 50                            pushl   %eax
    // 66: 55                            pushl   %ebp
    // 67: e8 00 00 00 00                calll   0x6c <__JIT_ENTRY+0x6c>
    // 00000068:  IMAGE_REL_I386_REL32 __PyList_AppendTakeRefListResize
    // 6c: 83 c4 08                      addl    $0x8, %esp
    // 6f: 85 c0                         testl   %eax, %eax
    // 71: 0f 94 c2                      sete    %dl
    // 74: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 78: 89 71 20                      movl    %esi, 0x20(%ecx)
    // 7b: 8b 45 00                      movl    (%ebp), %eax
    // 7e: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 83: 7f 1c                         jg      0xa1 <__JIT_ENTRY+0xa1>
    // 85: 48                            decl    %eax
    // 86: 89 45 00                      movl    %eax, (%ebp)
    // 89: 75 16                         jne     0xa1 <__JIT_ENTRY+0xa1>
    // 8b: 55                            pushl   %ebp
    // 8c: 88 54 24 07                   movb    %dl, 0x7(%esp)
    // 90: e8 00 00 00 00                calll   0x95 <__JIT_ENTRY+0x95>
    // 00000091:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 95: 0f b6 54 24 07                movzbl  0x7(%esp), %edx
    // 9a: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 9e: 83 c4 04                      addl    $0x4, %esp
    // a1: 83 41 20 fc                   addl    $-0x4, 0x20(%ecx)
    // a5: 8b 03                         movl    (%ebx), %eax
    // a7: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // ac: 7f 05                         jg      0xb3 <__JIT_ENTRY+0xb3>
    // ae: 48                            decl    %eax
    // af: 89 03                         movl    %eax, (%ebx)
    // b1: 74 26                         je      0xd9 <__JIT_ENTRY+0xd9>
    // b3: 8b 41 20                      movl    0x20(%ecx), %eax
    // b6: c7 41 20 00 00 00 00          movl    $0x0, 0x20(%ecx)
    // bd: 84 d2                         testb   %dl, %dl
    // bf: 74 37                         je      0xf8 <__JIT_ENTRY+0xf8>
    // c1: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // c5: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // c9: 89 4c 24 1c                   movl    %ecx, 0x1c(%esp)
    // cd: 83 c4 08                      addl    $0x8, %esp
    // d0: 5e                            popl    %esi
    // d1: 5f                            popl    %edi
    // d2: 5b                            popl    %ebx
    // d3: 5d                            popl    %ebp
    // d4: e9 00 00 00 00                jmp     0xd9 <__JIT_ENTRY+0xd9>
    // 000000d5:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // d9: 53                            pushl   %ebx
    // da: 89 d3                         movl    %edx, %ebx
    // dc: e8 00 00 00 00                calll   0xe1 <__JIT_ENTRY+0xe1>
    // 000000dd:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // e1: 89 da                         movl    %ebx, %edx
    // e3: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // e7: 83 c4 04                      addl    $0x4, %esp
    // ea: 8b 41 20                      movl    0x20(%ecx), %eax
    // ed: c7 41 20 00 00 00 00          movl    $0x0, 0x20(%ecx)
    // f4: 84 d2                         testb   %dl, %dl
    // f6: 75 c9                         jne     0xc1 <__JIT_ENTRY+0xc1>
    // f8: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // fc: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 100: 89 4c 24 1c                   movl    %ecx, 0x1c(%esp)
    // 104: 83 c4 08                      addl    $0x8, %esp
    // 107: 5e                            popl    %esi
    // 108: 5f                            popl    %edi
    // 109: 5b                            popl    %ebx
    // 10a: 5d                            popl    %ebp
    // 10b: e9 00 00 00 00                jmp     0x110 <__JIT_ENTRY+0x110>
    // 0000010c:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[272] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x7c, 0x24, 0x24, 0x8b, 0x74, 0x24, 0x20, 0x8b,
        0x4c, 0x24, 0x1c, 0x8b, 0x5e, 0xf4, 0x8b, 0x47,
        0x08, 0x39, 0x98, 0xc0, 0xbb, 0x01, 0x00, 0x75,
        0x0c, 0x8b, 0x6e, 0xf8, 0x8b, 0x45, 0x04, 0xf6,
        0x40, 0x57, 0x02, 0x75, 0x18, 0x89, 0x7c, 0x24,
        0x24, 0x89, 0x74, 0x24, 0x20, 0x89, 0x4c, 0x24,
        0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x4c, 0x24,
        0x04, 0x8b, 0x46, 0xfc, 0x83, 0xc6, 0xf8, 0x8b,
        0x4d, 0x08, 0x39, 0x4d, 0x10, 0x7e, 0x0e, 0x8b,
        0x55, 0x0c, 0x89, 0x04, 0x8a, 0x41, 0x89, 0x4d,
        0x08, 0xb2, 0x01, 0xeb, 0x0f, 0x50, 0x55, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x08, 0x85,
        0xc0, 0x0f, 0x94, 0xc2, 0x8b, 0x4c, 0x24, 0x04,
        0x89, 0x71, 0x20, 0x8b, 0x45, 0x00, 0x3d, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x1c, 0x48, 0x89, 0x45,
        0x00, 0x75, 0x16, 0x55, 0x88, 0x54, 0x24, 0x07,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0x54,
        0x24, 0x07, 0x8b, 0x4c, 0x24, 0x08, 0x83, 0xc4,
        0x04, 0x83, 0x41, 0x20, 0xfc, 0x8b, 0x03, 0x3d,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x05, 0x48, 0x89,
        0x03, 0x74, 0x26, 0x8b, 0x41, 0x20, 0xc7, 0x41,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x84, 0xd2, 0x74,
        0x37, 0x89, 0x7c, 0x24, 0x24, 0x89, 0x44, 0x24,
        0x20, 0x89, 0x4c, 0x24, 0x1c, 0x83, 0xc4, 0x08,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x53, 0x89, 0xd3, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xda, 0x8b, 0x4c, 0x24, 0x08, 0x83,
        0xc4, 0x04, 0x8b, 0x41, 0x20, 0xc7, 0x41, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x84, 0xd2, 0x75, 0xc9,
        0x89, 0x7c, 0x24, 0x24, 0x89, 0x44, 0x24, 0x20,
        0x89, 0x4c, 0x24, 0x1c, 0x83, 0xc4, 0x08, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x41, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)&_PyList_AppendTakeRefListResize + -0x4);
    patch_x86_64_32rx(code + 0x91, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xd5, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xdd, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x10c, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_METHOD_DESCRIPTOR_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_METHOD_DESCRIPTOR_FAST.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 18                      subl    $0x18, %esp
    // 7: 8b 7c 24 30                   movl    0x30(%esp), %edi
    // b: b8 00 00 00 00                movl    $0x0, %eax
    // 0000000c:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 10: 0f b7 f0                      movzwl  %ax, %esi
    // 13: 89 f5                         movl    %esi, %ebp
    // 15: f7 d5                         notl    %ebp
    // 17: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
    // 1c: 29 f0                         subl    %esi, %eax
    // 1e: 83 3c af 00                   cmpl    $0x0, (%edi,%ebp,4)
    // 22: 0f 95 44 24 0c                setne   0xc(%esp)
    // 27: 0f 94 44 24 08                sete    0x8(%esp)
    // 2c: 8b 14 87                      movl    (%edi,%eax,4), %edx
    // 2f: 81 7a 04 00 00 00 00          cmpl    $0x0, 0x4(%edx)
    // 00000032:  IMAGE_REL_I386_DIR32 _PyMethodDescr_Type
    // 36: 8b 4c 24 34                   movl    0x34(%esp), %ecx
    // 3a: 8b 5c 24 2c                   movl    0x2c(%esp), %ebx
    // 3e: 74 06                         je      0x46 <__JIT_ENTRY+0x46>
    // 40: 89 4c 24 34                   movl    %ecx, 0x34(%esp)
    // 44: eb 5d                         jmp     0xa3 <__JIT_ENTRY+0xa3>
    // 46: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 4a: 89 04 24                      movl    %eax, (%esp)
    // 4d: 89 6c 24 14                   movl    %ebp, 0x14(%esp)
    // 51: 8b 6a 14                      movl    0x14(%edx), %ebp
    // 54: 81 7d 08 80 00 00 00          cmpl    $0x80, 0x8(%ebp)
    // 5b: 75 3e                         jne     0x9b <__JIT_ENTRY+0x9b>
    // 5d: 89 5c 24 10                   movl    %ebx, 0x10(%esp)
    // 61: 8d 04 b5 00 00 00 00          leal    (,%esi,4), %eax
    // 68: 89 fb                         movl    %edi, %ebx
    // 6a: 29 c3                         subl    %eax, %ebx
    // 6c: 31 c0                         xorl    %eax, %eax
    // 6e: 0f b6 4c 24 08                movzbl  0x8(%esp), %ecx
    // 73: 88 c8                         movb    %cl, %al
    // 75: 8d 04 83                      leal    (%ebx,%eax,4), %eax
    // 78: 83 c0 fc                      addl    $-0x4, %eax
    // 7b: 8b 08                         movl    (%eax), %ecx
    // 7d: 8b 59 04                      movl    0x4(%ecx), %ebx
    // 80: 3b 5a 08                      cmpl    0x8(%edx), %ebx
    // 83: 74 32                         je      0xb7 <__JIT_ENTRY+0xb7>
    // 85: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 89: 89 44 24 34                   movl    %eax, 0x34(%esp)
    // 8d: 89 7c 24 30                   movl    %edi, 0x30(%esp)
    // 91: 8b 44 24 10                   movl    0x10(%esp), %eax
    // 95: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 99: eb 10                         jmp     0xab <__JIT_ENTRY+0xab>
    // 9b: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 9f: 89 44 24 34                   movl    %eax, 0x34(%esp)
    // a3: 89 7c 24 30                   movl    %edi, 0x30(%esp)
    // a7: 89 5c 24 2c                   movl    %ebx, 0x2c(%esp)
    // ab: 83 c4 18                      addl    $0x18, %esp
    // ae: 5e                            popl    %esi
    // af: 5f                            popl    %edi
    // b0: 5b                            popl    %ebx
    // b1: 5d                            popl    %ebp
    // b2: e9 00 00 00 00                jmp     0xb7 <__JIT_ENTRY+0xb7>
    // 000000b3:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // b7: 31 d2                         xorl    %edx, %edx
    // b9: 0f b6 5c 24 0c                movzbl  0xc(%esp), %ebx
    // be: 88 da                         movb    %bl, %dl
    // c0: 01 f2                         addl    %esi, %edx
    // c2: 4a                            decl    %edx
    // c3: 8b 5c 24 10                   movl    0x10(%esp), %ebx
    // c7: 89 7b 20                      movl    %edi, 0x20(%ebx)
    // ca: 83 c0 04                      addl    $0x4, %eax
    // cd: 52                            pushl   %edx
    // ce: 50                            pushl   %eax
    // cf: 51                            pushl   %ecx
    // d0: ff 55 04                      calll   *0x4(%ebp)
    // d3: 83 c4 0c                      addl    $0xc, %esp
    // d6: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // da: 8b 43 20                      movl    0x20(%ebx), %eax
    // dd: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // e1: c7 43 20 00 00 00 00          movl    $0x0, 0x20(%ebx)
    // e8: 8b 14 24                      movl    (%esp), %edx
    // eb: 8b 04 97                      movl    (%edi,%edx,4), %eax
    // ee: 8b 08                         movl    (%eax), %ecx
    // f0: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // f6: 7f 12                         jg      0x10a <__JIT_ENTRY+0x10a>
    // f8: 49                            decl    %ecx
    // f9: 89 08                         movl    %ecx, (%eax)
    // fb: 75 0d                         jne     0x10a <__JIT_ENTRY+0x10a>
    // fd: 50                            pushl   %eax
    // fe: e8 00 00 00 00                calll   0x103 <__JIT_ENTRY+0x103>
    // 000000ff:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 103: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 107: 83 c4 04                      addl    $0x4, %esp
    // 10a: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 10e: 8b 04 87                      movl    (%edi,%eax,4), %eax
    // 111: 85 c0                         testl   %eax, %eax
    // 113: 74 1c                         je      0x131 <__JIT_ENTRY+0x131>
    // 115: 8b 08                         movl    (%eax), %ecx
    // 117: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 11d: 7f 12                         jg      0x131 <__JIT_ENTRY+0x131>
    // 11f: 49                            decl    %ecx
    // 120: 89 08                         movl    %ecx, (%eax)
    // 122: 75 0d                         jne     0x131 <__JIT_ENTRY+0x131>
    // 124: 50                            pushl   %eax
    // 125: e8 00 00 00 00                calll   0x12a <__JIT_ENTRY+0x12a>
    // 00000126:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 12a: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 12e: 83 c4 04                      addl    $0x4, %esp
    // 131: b8 00 00 00 00                movl    $0x0, %eax
    // 00000132:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 136: 66 85 c0                      testw   %ax, %ax
    // 139: 74 3e                         je      0x179 <__JIT_ENTRY+0x179>
    // 13b: 46                            incl    %esi
    // 13c: 83 c7 fc                      addl    $-0x4, %edi
    // 13f: eb 18                         jmp     0x159 <__JIT_ENTRY+0x159>
    // 141: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%eax,%eax)
    // 150: 4e                            decl    %esi
    // 151: 83 c7 fc                      addl    $-0x4, %edi
    // 154: 83 fe 01                      cmpl    $0x1, %esi
    // 157: 76 20                         jbe     0x179 <__JIT_ENTRY+0x179>
    // 159: 8b 07                         movl    (%edi), %eax
    // 15b: 8b 08                         movl    (%eax), %ecx
    // 15d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 163: 7f eb                         jg      0x150 <__JIT_ENTRY+0x150>
    // 165: 49                            decl    %ecx
    // 166: 89 08                         movl    %ecx, (%eax)
    // 168: 75 e6                         jne     0x150 <__JIT_ENTRY+0x150>
    // 16a: 50                            pushl   %eax
    // 16b: e8 00 00 00 00                calll   0x170 <__JIT_ENTRY+0x170>
    // 0000016c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 170: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 174: 83 c4 04                      addl    $0x4, %esp
    // 177: eb d7                         jmp     0x150 <__JIT_ENTRY+0x150>
    // 179: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 17d: 85 c9                         testl   %ecx, %ecx
    // 17f: 8b 6c 24 14                   movl    0x14(%esp), %ebp
    // 183: 74 26                         je      0x1ab <__JIT_ENTRY+0x1ab>
    // 185: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 189: 89 0c 90                      movl    %ecx, (%eax,%edx,4)
    // 18c: 8d 04 a8                      leal    (%eax,%ebp,4), %eax
    // 18f: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 193: 89 4c 24 34                   movl    %ecx, 0x34(%esp)
    // 197: 89 44 24 30                   movl    %eax, 0x30(%esp)
    // 19b: 89 5c 24 2c                   movl    %ebx, 0x2c(%esp)
    // 19f: 83 c4 18                      addl    $0x18, %esp
    // 1a2: 5e                            popl    %esi
    // 1a3: 5f                            popl    %edi
    // 1a4: 5b                            popl    %ebx
    // 1a5: 5d                            popl    %ebp
    // 1a6: e9 00 00 00 00                jmp     0x1ab <__JIT_ENTRY+0x1ab>
    // 000001a7:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 1ab: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 1af: 8d 04 90                      leal    (%eax,%edx,4), %eax
    // 1b2: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 1b6: 89 4c 24 34                   movl    %ecx, 0x34(%esp)
    // 1ba: 89 5c 24 2c                   movl    %ebx, 0x2c(%esp)
    // 1be: 89 44 24 30                   movl    %eax, 0x30(%esp)
    // 1c2: 83 c4 18                      addl    $0x18, %esp
    // 1c5: 5e                            popl    %esi
    // 1c6: 5f                            popl    %edi
    // 1c7: 5b                            popl    %ebx
    // 1c8: 5d                            popl    %ebp
    // 1c9: e9 00 00 00 00                jmp     0x1ce <__JIT_ENTRY+0x1ce>
    // 000001ca:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[462] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x18, 0x8b,
        0x7c, 0x24, 0x30, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xf0, 0x89, 0xf5, 0xf7, 0xd5, 0xb8,
        0xfe, 0xff, 0xff, 0xff, 0x29, 0xf0, 0x83, 0x3c,
        0xaf, 0x00, 0x0f, 0x95, 0x44, 0x24, 0x0c, 0x0f,
        0x94, 0x44, 0x24, 0x08, 0x8b, 0x14, 0x87, 0x81,
        0x7a, 0x04, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x4c,
        0x24, 0x34, 0x8b, 0x5c, 0x24, 0x2c, 0x74, 0x06,
        0x89, 0x4c, 0x24, 0x34, 0xeb, 0x5d, 0x89, 0x4c,
        0x24, 0x04, 0x89, 0x04, 0x24, 0x89, 0x6c, 0x24,
        0x14, 0x8b, 0x6a, 0x14, 0x81, 0x7d, 0x08, 0x80,
        0x00, 0x00, 0x00, 0x75, 0x3e, 0x89, 0x5c, 0x24,
        0x10, 0x8d, 0x04, 0xb5, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xfb, 0x29, 0xc3, 0x31, 0xc0, 0x0f, 0xb6,
        0x4c, 0x24, 0x08, 0x88, 0xc8, 0x8d, 0x04, 0x83,
        0x83, 0xc0, 0xfc, 0x8b, 0x08, 0x8b, 0x59, 0x04,
        0x3b, 0x5a, 0x08, 0x74, 0x32, 0x8b, 0x44, 0x24,
        0x04, 0x89, 0x44, 0x24, 0x34, 0x89, 0x7c, 0x24,
        0x30, 0x8b, 0x44, 0x24, 0x10, 0x89, 0x44, 0x24,
        0x2c, 0xeb, 0x10, 0x8b, 0x44, 0x24, 0x04, 0x89,
        0x44, 0x24, 0x34, 0x89, 0x7c, 0x24, 0x30, 0x89,
        0x5c, 0x24, 0x2c, 0x83, 0xc4, 0x18, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x31,
        0xd2, 0x0f, 0xb6, 0x5c, 0x24, 0x0c, 0x88, 0xda,
        0x01, 0xf2, 0x4a, 0x8b, 0x5c, 0x24, 0x10, 0x89,
        0x7b, 0x20, 0x83, 0xc0, 0x04, 0x52, 0x50, 0x51,
        0xff, 0x55, 0x04, 0x83, 0xc4, 0x0c, 0x89, 0x44,
        0x24, 0x0c, 0x8b, 0x43, 0x20, 0x89, 0x44, 0x24,
        0x08, 0xc7, 0x43, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x14, 0x24, 0x8b, 0x04, 0x97, 0x8b, 0x08,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x12,
        0x49, 0x89, 0x08, 0x75, 0x0d, 0x50, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x54, 0x24, 0x04, 0x83,
        0xc4, 0x04, 0x8b, 0x44, 0x24, 0x14, 0x8b, 0x04,
        0x87, 0x85, 0xc0, 0x74, 0x1c, 0x8b, 0x08, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x12, 0x49,
        0x89, 0x08, 0x75, 0x0d, 0x50, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x54, 0x24, 0x04, 0x83, 0xc4,
        0x04, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85,
        0xc0, 0x74, 0x3e, 0x46, 0x83, 0xc7, 0xfc, 0xeb,
        0x18, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4e, 0x83, 0xc7, 0xfc, 0x83, 0xfe, 0x01, 0x76,
        0x20, 0x8b, 0x07, 0x8b, 0x08, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0xeb, 0x49, 0x89, 0x08,
        0x75, 0xe6, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x54, 0x24, 0x04, 0x83, 0xc4, 0x04, 0xeb,
        0xd7, 0x8b, 0x4c, 0x24, 0x0c, 0x85, 0xc9, 0x8b,
        0x6c, 0x24, 0x14, 0x74, 0x26, 0x8b, 0x44, 0x24,
        0x08, 0x89, 0x0c, 0x90, 0x8d, 0x04, 0xa8, 0x8b,
        0x4c, 0x24, 0x04, 0x89, 0x4c, 0x24, 0x34, 0x89,
        0x44, 0x24, 0x30, 0x89, 0x5c, 0x24, 0x2c, 0x83,
        0xc4, 0x18, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x44, 0x24, 0x08, 0x8d,
        0x04, 0x90, 0x8b, 0x4c, 0x24, 0x04, 0x89, 0x4c,
        0x24, 0x34, 0x89, 0x5c, 0x24, 0x2c, 0x89, 0x44,
        0x24, 0x30, 0x83, 0xc4, 0x18, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xc, instruction->oparg);
    patch_32(code + 0x32, (uintptr_t)&PyMethodDescr_Type);
    patch_x86_64_32rx(code + 0xb3, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0xff, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x126, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x132, instruction->oparg);
    patch_x86_64_32rx(code + 0x16c, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x1a7, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x1ca, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 18                      subl    $0x18, %esp
    // 7: 8b 7c 24 30                   movl    0x30(%esp), %edi
    // b: b8 00 00 00 00                movl    $0x0, %eax
    // 0000000c:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 10: 0f b7 f0                      movzwl  %ax, %esi
    // 13: 89 f5                         movl    %esi, %ebp
    // 15: f7 d5                         notl    %ebp
    // 17: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 1c: 29 f1                         subl    %esi, %ecx
    // 1e: 83 3c af 00                   cmpl    $0x0, (%edi,%ebp,4)
    // 22: 0f 95 44 24 0c                setne   0xc(%esp)
    // 27: 0f 94 44 24 08                sete    0x8(%esp)
    // 2c: 8b 14 8f                      movl    (%edi,%ecx,4), %edx
    // 2f: 81 7a 04 00 00 00 00          cmpl    $0x0, 0x4(%edx)
    // 00000032:  IMAGE_REL_I386_DIR32 _PyMethodDescr_Type
    // 36: 8b 44 24 34                   movl    0x34(%esp), %eax
    // 3a: 8b 5c 24 2c                   movl    0x2c(%esp), %ebx
    // 3e: 75 59                         jne     0x99 <__JIT_ENTRY+0x99>
    // 40: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 44: 89 0c 24                      movl    %ecx, (%esp)
    // 47: 89 6c 24 14                   movl    %ebp, 0x14(%esp)
    // 4b: 8b 6a 14                      movl    0x14(%edx), %ebp
    // 4e: 81 7d 08 82 00 00 00          cmpl    $0x82, 0x8(%ebp)
    // 55: 75 3e                         jne     0x95 <__JIT_ENTRY+0x95>
    // 57: 89 5c 24 10                   movl    %ebx, 0x10(%esp)
    // 5b: 8d 04 b5 00 00 00 00          leal    (,%esi,4), %eax
    // 62: 89 fb                         movl    %edi, %ebx
    // 64: 29 c3                         subl    %eax, %ebx
    // 66: 31 c0                         xorl    %eax, %eax
    // 68: 0f b6 4c 24 08                movzbl  0x8(%esp), %ecx
    // 6d: 88 c8                         movb    %cl, %al
    // 6f: 8d 04 83                      leal    (%ebx,%eax,4), %eax
    // 72: 83 c0 fc                      addl    $-0x4, %eax
    // 75: 8b 18                         movl    (%eax), %ebx
    // 77: 8b 4b 04                      movl    0x4(%ebx), %ecx
    // 7a: 3b 4a 08                      cmpl    0x8(%edx), %ecx
    // 7d: 74 32                         je      0xb1 <__JIT_ENTRY+0xb1>
    // 7f: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 83: 89 44 24 34                   movl    %eax, 0x34(%esp)
    // 87: 89 7c 24 30                   movl    %edi, 0x30(%esp)
    // 8b: 8b 44 24 10                   movl    0x10(%esp), %eax
    // 8f: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 93: eb 10                         jmp     0xa5 <__JIT_ENTRY+0xa5>
    // 95: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 99: 89 44 24 34                   movl    %eax, 0x34(%esp)
    // 9d: 89 7c 24 30                   movl    %edi, 0x30(%esp)
    // a1: 89 5c 24 2c                   movl    %ebx, 0x2c(%esp)
    // a5: 83 c4 18                      addl    $0x18, %esp
    // a8: 5e                            popl    %esi
    // a9: 5f                            popl    %edi
    // aa: 5b                            popl    %ebx
    // ab: 5d                            popl    %ebp
    // ac: e9 00 00 00 00                jmp     0xb1 <__JIT_ENTRY+0xb1>
    // 000000ad:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // b1: 31 c9                         xorl    %ecx, %ecx
    // b3: 0f b6 54 24 0c                movzbl  0xc(%esp), %edx
    // b8: 88 d1                         movb    %dl, %cl
    // ba: 01 f1                         addl    %esi, %ecx
    // bc: 49                            decl    %ecx
    // bd: 89 da                         movl    %ebx, %edx
    // bf: 8b 5c 24 10                   movl    0x10(%esp), %ebx
    // c3: 89 7b 20                      movl    %edi, 0x20(%ebx)
    // c6: 83 c0 04                      addl    $0x4, %eax
    // c9: 6a 00                         pushl   $0x0
    // cb: 51                            pushl   %ecx
    // cc: 50                            pushl   %eax
    // cd: 52                            pushl   %edx
    // ce: ff 55 04                      calll   *0x4(%ebp)
    // d1: 83 c4 10                      addl    $0x10, %esp
    // d4: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // d8: 8b 43 20                      movl    0x20(%ebx), %eax
    // db: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // df: c7 43 20 00 00 00 00          movl    $0x0, 0x20(%ebx)
    // e6: 8b 14 24                      movl    (%esp), %edx
    // e9: 8b 04 97                      movl    (%edi,%edx,4), %eax
    // ec: 8b 08                         movl    (%eax), %ecx
    // ee: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // f4: 7f 12                         jg      0x108 <__JIT_ENTRY+0x108>
    // f6: 49                            decl    %ecx
    // f7: 89 08                         movl    %ecx, (%eax)
    // f9: 75 0d                         jne     0x108 <__JIT_ENTRY+0x108>
    // fb: 50                            pushl   %eax
    // fc: e8 00 00 00 00                calll   0x101 <__JIT_ENTRY+0x101>
    // 000000fd:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 101: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 105: 83 c4 04                      addl    $0x4, %esp
    // 108: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 10c: 8b 04 87                      movl    (%edi,%eax,4), %eax
    // 10f: 85 c0                         testl   %eax, %eax
    // 111: 74 1c                         je      0x12f <__JIT_ENTRY+0x12f>
    // 113: 8b 08                         movl    (%eax), %ecx
    // 115: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 11b: 7f 12                         jg      0x12f <__JIT_ENTRY+0x12f>
    // 11d: 49                            decl    %ecx
    // 11e: 89 08                         movl    %ecx, (%eax)
    // 120: 75 0d                         jne     0x12f <__JIT_ENTRY+0x12f>
    // 122: 50                            pushl   %eax
    // 123: e8 00 00 00 00                calll   0x128 <__JIT_ENTRY+0x128>
    // 00000124:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 128: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 12c: 83 c4 04                      addl    $0x4, %esp
    // 12f: b8 00 00 00 00                movl    $0x0, %eax
    // 00000130:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 134: 66 85 c0                      testw   %ax, %ax
    // 137: 74 30                         je      0x169 <__JIT_ENTRY+0x169>
    // 139: 46                            incl    %esi
    // 13a: 83 c7 fc                      addl    $-0x4, %edi
    // 13d: eb 0a                         jmp     0x149 <__JIT_ENTRY+0x149>
    // 13f: 90                            nop
    // 140: 4e                            decl    %esi
    // 141: 83 c7 fc                      addl    $-0x4, %edi
    // 144: 83 fe 01                      cmpl    $0x1, %esi
    // 147: 76 20                         jbe     0x169 <__JIT_ENTRY+0x169>
    // 149: 8b 07                         movl    (%edi), %eax
    // 14b: 8b 08                         movl    (%eax), %ecx
    // 14d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 153: 7f eb                         jg      0x140 <__JIT_ENTRY+0x140>
    // 155: 49                            decl    %ecx
    // 156: 89 08                         movl    %ecx, (%eax)
    // 158: 75 e6                         jne     0x140 <__JIT_ENTRY+0x140>
    // 15a: 50                            pushl   %eax
    // 15b: e8 00 00 00 00                calll   0x160 <__JIT_ENTRY+0x160>
    // 0000015c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 160: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 164: 83 c4 04                      addl    $0x4, %esp
    // 167: eb d7                         jmp     0x140 <__JIT_ENTRY+0x140>
    // 169: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 16d: 85 c9                         testl   %ecx, %ecx
    // 16f: 8b 6c 24 14                   movl    0x14(%esp), %ebp
    // 173: 74 26                         je      0x19b <__JIT_ENTRY+0x19b>
    // 175: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 179: 89 0c 90                      movl    %ecx, (%eax,%edx,4)
    // 17c: 8d 04 a8                      leal    (%eax,%ebp,4), %eax
    // 17f: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 183: 89 4c 24 34                   movl    %ecx, 0x34(%esp)
    // 187: 89 44 24 30                   movl    %eax, 0x30(%esp)
    // 18b: 89 5c 24 2c                   movl    %ebx, 0x2c(%esp)
    // 18f: 83 c4 18                      addl    $0x18, %esp
    // 192: 5e                            popl    %esi
    // 193: 5f                            popl    %edi
    // 194: 5b                            popl    %ebx
    // 195: 5d                            popl    %ebp
    // 196: e9 00 00 00 00                jmp     0x19b <__JIT_ENTRY+0x19b>
    // 00000197:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 19b: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 19f: 8d 04 90                      leal    (%eax,%edx,4), %eax
    // 1a2: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 1a6: 89 4c 24 34                   movl    %ecx, 0x34(%esp)
    // 1aa: 89 5c 24 2c                   movl    %ebx, 0x2c(%esp)
    // 1ae: 89 44 24 30                   movl    %eax, 0x30(%esp)
    // 1b2: 83 c4 18                      addl    $0x18, %esp
    // 1b5: 5e                            popl    %esi
    // 1b6: 5f                            popl    %edi
    // 1b7: 5b                            popl    %ebx
    // 1b8: 5d                            popl    %ebp
    // 1b9: e9 00 00 00 00                jmp     0x1be <__JIT_ENTRY+0x1be>
    // 000001ba:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[446] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x18, 0x8b,
        0x7c, 0x24, 0x30, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xf0, 0x89, 0xf5, 0xf7, 0xd5, 0xb9,
        0xfe, 0xff, 0xff, 0xff, 0x29, 0xf1, 0x83, 0x3c,
        0xaf, 0x00, 0x0f, 0x95, 0x44, 0x24, 0x0c, 0x0f,
        0x94, 0x44, 0x24, 0x08, 0x8b, 0x14, 0x8f, 0x81,
        0x7a, 0x04, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x44,
        0x24, 0x34, 0x8b, 0x5c, 0x24, 0x2c, 0x75, 0x59,
        0x89, 0x44, 0x24, 0x04, 0x89, 0x0c, 0x24, 0x89,
        0x6c, 0x24, 0x14, 0x8b, 0x6a, 0x14, 0x81, 0x7d,
        0x08, 0x82, 0x00, 0x00, 0x00, 0x75, 0x3e, 0x89,
        0x5c, 0x24, 0x10, 0x8d, 0x04, 0xb5, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xfb, 0x29, 0xc3, 0x31, 0xc0,
        0x0f, 0xb6, 0x4c, 0x24, 0x08, 0x88, 0xc8, 0x8d,
        0x04, 0x83, 0x83, 0xc0, 0xfc, 0x8b, 0x18, 0x8b,
        0x4b, 0x04, 0x3b, 0x4a, 0x08, 0x74, 0x32, 0x8b,
        0x44, 0x24, 0x04, 0x89, 0x44, 0x24, 0x34, 0x89,
        0x7c, 0x24, 0x30, 0x8b, 0x44, 0x24, 0x10, 0x89,
        0x44, 0x24, 0x2c, 0xeb, 0x10, 0x8b, 0x44, 0x24,
        0x04, 0x89, 0x44, 0x24, 0x34, 0x89, 0x7c, 0x24,
        0x30, 0x89, 0x5c, 0x24, 0x2c, 0x83, 0xc4, 0x18,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x31, 0xc9, 0x0f, 0xb6, 0x54, 0x24, 0x0c,
        0x88, 0xd1, 0x01, 0xf1, 0x49, 0x89, 0xda, 0x8b,
        0x5c, 0x24, 0x10, 0x89, 0x7b, 0x20, 0x83, 0xc0,
        0x04, 0x6a, 0x00, 0x51, 0x50, 0x52, 0xff, 0x55,
        0x04, 0x83, 0xc4, 0x10, 0x89, 0x44, 0x24, 0x0c,
        0x8b, 0x43, 0x20, 0x89, 0x44, 0x24, 0x08, 0xc7,
        0x43, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x14,
        0x24, 0x8b, 0x04, 0x97, 0x8b, 0x08, 0x81, 0xf9,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x12, 0x49, 0x89,
        0x08, 0x75, 0x0d, 0x50, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x54, 0x24, 0x04, 0x83, 0xc4, 0x04,
        0x8b, 0x44, 0x24, 0x14, 0x8b, 0x04, 0x87, 0x85,
        0xc0, 0x74, 0x1c, 0x8b, 0x08, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x12, 0x49, 0x89, 0x08,
        0x75, 0x0d, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x54, 0x24, 0x04, 0x83, 0xc4, 0x04, 0xb8,
        0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74,
        0x30, 0x46, 0x83, 0xc7, 0xfc, 0xeb, 0x0a, 0x90,
        0x4e, 0x83, 0xc7, 0xfc, 0x83, 0xfe, 0x01, 0x76,
        0x20, 0x8b, 0x07, 0x8b, 0x08, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0xeb, 0x49, 0x89, 0x08,
        0x75, 0xe6, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x54, 0x24, 0x04, 0x83, 0xc4, 0x04, 0xeb,
        0xd7, 0x8b, 0x4c, 0x24, 0x0c, 0x85, 0xc9, 0x8b,
        0x6c, 0x24, 0x14, 0x74, 0x26, 0x8b, 0x44, 0x24,
        0x08, 0x89, 0x0c, 0x90, 0x8d, 0x04, 0xa8, 0x8b,
        0x4c, 0x24, 0x04, 0x89, 0x4c, 0x24, 0x34, 0x89,
        0x44, 0x24, 0x30, 0x89, 0x5c, 0x24, 0x2c, 0x83,
        0xc4, 0x18, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x44, 0x24, 0x08, 0x8d,
        0x04, 0x90, 0x8b, 0x4c, 0x24, 0x04, 0x89, 0x4c,
        0x24, 0x34, 0x89, 0x5c, 0x24, 0x2c, 0x89, 0x44,
        0x24, 0x30, 0x83, 0xc4, 0x18, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xc, instruction->oparg);
    patch_32(code + 0x32, (uintptr_t)&PyMethodDescr_Type);
    patch_x86_64_32rx(code + 0xad, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0xfd, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x124, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x130, instruction->oparg);
    patch_x86_64_32rx(code + 0x15c, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x197, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x1ba, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_METHOD_DESCRIPTOR_NOARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_METHOD_DESCRIPTOR_NOARGS.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 0c                      subl    $0xc, %esp
    // 7: 8b 7c 24 28                   movl    0x28(%esp), %edi
    // b: 8b 6c 24 24                   movl    0x24(%esp), %ebp
    // f: 8b 74 24 20                   movl    0x20(%esp), %esi
    // 13: b8 00 00 00 00                movl    $0x0, %eax
    // 00000014:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 18: 0f b7 c0                      movzwl  %ax, %eax
    // 1b: 89 c2                         movl    %eax, %edx
    // 1d: f7 d2                         notl    %edx
    // 1f: 31 c9                         xorl    %ecx, %ecx
    // 21: 31 db                         xorl    %ebx, %ebx
    // 23: 83 7c 95 00 00                cmpl    $0x0, (%ebp,%edx,4)
    // 28: 0f 94 c2                      sete    %dl
    // 2b: 0f 95 c3                      setne   %bl
    // 2e: 01 c3                         addl    %eax, %ebx
    // 30: 83 fb 01                      cmpl    $0x1, %ebx
    // 33: 0f 85 f4 00 00 00             jne     0x12d <__JIT_ENTRY+0x12d>
    // 39: 89 3c 24                      movl    %edi, (%esp)
    // 3c: 89 74 24 04                   movl    %esi, 0x4(%esp)
    // 40: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
    // 45: 29 c6                         subl    %eax, %esi
    // 47: 8b 7c b5 00                   movl    (%ebp,%esi,4), %edi
    // 4b: 81 7f 04 00 00 00 00          cmpl    $0x0, 0x4(%edi)
    // 0000004e:  IMAGE_REL_I386_DIR32 _PyMethodDescr_Type
    // 52: 0f 85 e3 00 00 00             jne     0x13b <__JIT_ENTRY+0x13b>
    // 58: c1 e0 02                      shll    $0x2, %eax
    // 5b: 89 eb                         movl    %ebp, %ebx
    // 5d: 29 c3                         subl    %eax, %ebx
    // 5f: 88 d1                         movb    %dl, %cl
    // 61: 8d 04 8d fc ff ff ff          leal    -0x4(,%ecx,4), %eax
    // 68: 8b 14 03                      movl    (%ebx,%eax), %edx
    // 6b: 8b 42 04                      movl    0x4(%edx), %eax
    // 6e: 3b 47 08                      cmpl    0x8(%edi), %eax
    // 71: 0f 85 c4 00 00 00             jne     0x13b <__JIT_ENTRY+0x13b>
    // 77: 8b 47 14                      movl    0x14(%edi), %eax
    // 7a: 83 78 08 04                   cmpl    $0x4, 0x8(%eax)
    // 7e: 0f 85 b7 00 00 00             jne     0x13b <__JIT_ENTRY+0x13b>
    // 84: 8b 1c 24                      movl    (%esp), %ebx
    // 87: 8b 4b 24                      movl    0x24(%ebx), %ecx
    // 8a: 85 c9                         testl   %ecx, %ecx
    // 8c: 8b 7c 24 04                   movl    0x4(%esp), %edi
    // 90: 0f 8e c4 00 00 00             jle     0x15a <__JIT_ENTRY+0x15a>
    // 96: 8b 40 04                      movl    0x4(%eax), %eax
    // 99: 49                            decl    %ecx
    // 9a: 89 4b 24                      movl    %ecx, 0x24(%ebx)
    // 9d: 89 6f 20                      movl    %ebp, 0x20(%edi)
    // a0: 6a 00                         pushl   $0x0
    // a2: 52                            pushl   %edx
    // a3: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // a7: ff d0                         calll   *%eax
    // a9: 8b 54 24 10                   movl    0x10(%esp), %edx
    // ad: 83 c4 08                      addl    $0x8, %esp
    // b0: 8b 4f 20                      movl    0x20(%edi), %ecx
    // b3: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // ba: ff 43 24                      incl    0x24(%ebx)
    // bd: 89 c3                         movl    %eax, %ebx
    // bf: 89 4f 20                      movl    %ecx, 0x20(%edi)
    // c2: 8b 02                         movl    (%edx), %eax
    // c4: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // c9: 7f 0e                         jg      0xd9 <__JIT_ENTRY+0xd9>
    // cb: 48                            decl    %eax
    // cc: 89 02                         movl    %eax, (%edx)
    // ce: 75 09                         jne     0xd9 <__JIT_ENTRY+0xd9>
    // d0: 52                            pushl   %edx
    // d1: e8 00 00 00 00                calll   0xd6 <__JIT_ENTRY+0xd6>
    // 000000d2:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // d6: 83 c4 04                      addl    $0x4, %esp
    // d9: 8d 04 b5 00 00 00 00          leal    (,%esi,4), %eax
    // e0: 01 47 20                      addl    %eax, 0x20(%edi)
    // e3: 8b 44 b5 00                   movl    (%ebp,%esi,4), %eax
    // e7: 8b 08                         movl    (%eax), %ecx
    // e9: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // ef: 7f 0e                         jg      0xff <__JIT_ENTRY+0xff>
    // f1: 49                            decl    %ecx
    // f2: 89 08                         movl    %ecx, (%eax)
    // f4: 75 09                         jne     0xff <__JIT_ENTRY+0xff>
    // f6: 50                            pushl   %eax
    // f7: e8 00 00 00 00                calll   0xfc <__JIT_ENTRY+0xfc>
    // 000000f8:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // fc: 83 c4 04                      addl    $0x4, %esp
    // ff: 8b 47 20                      movl    0x20(%edi), %eax
    // 102: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 109: 85 db                         testl   %ebx, %ebx
    // 10b: 74 5b                         je      0x168 <__JIT_ENTRY+0x168>
    // 10d: 89 18                         movl    %ebx, (%eax)
    // 10f: 83 c0 04                      addl    $0x4, %eax
    // 112: 8b 0c 24                      movl    (%esp), %ecx
    // 115: 89 4c 24 28                   movl    %ecx, 0x28(%esp)
    // 119: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // 11d: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // 121: 83 c4 0c                      addl    $0xc, %esp
    // 124: 5e                            popl    %esi
    // 125: 5f                            popl    %edi
    // 126: 5b                            popl    %ebx
    // 127: 5d                            popl    %ebp
    // 128: e9 00 00 00 00                jmp     0x12d <__JIT_ENTRY+0x12d>
    // 00000129:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 12d: 89 7c 24 28                   movl    %edi, 0x28(%esp)
    // 131: 89 6c 24 24                   movl    %ebp, 0x24(%esp)
    // 135: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // 139: eb 13                         jmp     0x14e <__JIT_ENTRY+0x14e>
    // 13b: 8b 04 24                      movl    (%esp), %eax
    // 13e: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // 142: 89 6c 24 24                   movl    %ebp, 0x24(%esp)
    // 146: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 14a: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 14e: 83 c4 0c                      addl    $0xc, %esp
    // 151: 5e                            popl    %esi
    // 152: 5f                            popl    %edi
    // 153: 5b                            popl    %ebx
    // 154: 5d                            popl    %ebp
    // 155: e9 00 00 00 00                jmp     0x15a <__JIT_ENTRY+0x15a>
    // 00000156:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 15a: 89 5c 24 28                   movl    %ebx, 0x28(%esp)
    // 15e: 89 6c 24 24                   movl    %ebp, 0x24(%esp)
    // 162: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // 166: eb e6                         jmp     0x14e <__JIT_ENTRY+0x14e>
    // 168: 8b 0c 24                      movl    (%esp), %ecx
    // 16b: 89 4c 24 28                   movl    %ecx, 0x28(%esp)
    // 16f: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // 173: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // 177: 83 c4 0c                      addl    $0xc, %esp
    // 17a: 5e                            popl    %esi
    // 17b: 5f                            popl    %edi
    // 17c: 5b                            popl    %ebx
    // 17d: 5d                            popl    %ebp
    // 17e: e9 00 00 00 00                jmp     0x183 <__JIT_ENTRY+0x183>
    // 0000017f:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[387] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x0c, 0x8b,
        0x7c, 0x24, 0x28, 0x8b, 0x6c, 0x24, 0x24, 0x8b,
        0x74, 0x24, 0x20, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xc0, 0x89, 0xc2, 0xf7, 0xd2, 0x31,
        0xc9, 0x31, 0xdb, 0x83, 0x7c, 0x95, 0x00, 0x00,
        0x0f, 0x94, 0xc2, 0x0f, 0x95, 0xc3, 0x01, 0xc3,
        0x83, 0xfb, 0x01, 0x0f, 0x85, 0xf4, 0x00, 0x00,
        0x00, 0x89, 0x3c, 0x24, 0x89, 0x74, 0x24, 0x04,
        0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x8b,
        0x7c, 0xb5, 0x00, 0x81, 0x7f, 0x04, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0x85, 0xe3, 0x00, 0x00, 0x00,
        0xc1, 0xe0, 0x02, 0x89, 0xeb, 0x29, 0xc3, 0x88,
        0xd1, 0x8d, 0x04, 0x8d, 0xfc, 0xff, 0xff, 0xff,
        0x8b, 0x14, 0x03, 0x8b, 0x42, 0x04, 0x3b, 0x47,
        0x08, 0x0f, 0x85, 0xc4, 0x00, 0x00, 0x00, 0x8b,
        0x47, 0x14, 0x83, 0x78, 0x08, 0x04, 0x0f, 0x85,
        0xb7, 0x00, 0x00, 0x00, 0x8b, 0x1c, 0x24, 0x8b,
        0x4b, 0x24, 0x85, 0xc9, 0x8b, 0x7c, 0x24, 0x04,
        0x0f, 0x8e, 0xc4, 0x00, 0x00, 0x00, 0x8b, 0x40,
        0x04, 0x49, 0x89, 0x4b, 0x24, 0x89, 0x6f, 0x20,
        0x6a, 0x00, 0x52, 0x89, 0x54, 0x24, 0x10, 0xff,
        0xd0, 0x8b, 0x54, 0x24, 0x10, 0x83, 0xc4, 0x08,
        0x8b, 0x4f, 0x20, 0xc7, 0x47, 0x20, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x43, 0x24, 0x89, 0xc3, 0x89,
        0x4f, 0x20, 0x8b, 0x02, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x0e, 0x48, 0x89, 0x02, 0x75, 0x09,
        0x52, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x8d, 0x04, 0xb5, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x47, 0x20, 0x8b, 0x44, 0xb5, 0x00, 0x8b,
        0x08, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x0e, 0x49, 0x89, 0x08, 0x75, 0x09, 0x50, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b,
        0x47, 0x20, 0xc7, 0x47, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xdb, 0x74, 0x5b, 0x89, 0x18, 0x83,
        0xc0, 0x04, 0x8b, 0x0c, 0x24, 0x89, 0x4c, 0x24,
        0x28, 0x89, 0x44, 0x24, 0x24, 0x89, 0x7c, 0x24,
        0x20, 0x83, 0xc4, 0x0c, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24,
        0x28, 0x89, 0x6c, 0x24, 0x24, 0x89, 0x74, 0x24,
        0x20, 0xeb, 0x13, 0x8b, 0x04, 0x24, 0x89, 0x44,
        0x24, 0x28, 0x89, 0x6c, 0x24, 0x24, 0x8b, 0x44,
        0x24, 0x04, 0x89, 0x44, 0x24, 0x20, 0x83, 0xc4,
        0x0c, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x5c, 0x24, 0x28, 0x89, 0x6c,
        0x24, 0x24, 0x89, 0x7c, 0x24, 0x20, 0xeb, 0xe6,
        0x8b, 0x0c, 0x24, 0x89, 0x4c, 0x24, 0x28, 0x89,
        0x44, 0x24, 0x24, 0x89, 0x7c, 0x24, 0x20, 0x83,
        0xc4, 0x0c, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, instruction->oparg);
    patch_32(code + 0x4e, (uintptr_t)&PyMethodDescr_Type);
    patch_x86_64_32rx(code + 0xd2, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xf8, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x129, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x156, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x17f, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_METHOD_DESCRIPTOR_O(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_METHOD_DESCRIPTOR_O.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 1c                      subl    $0x1c, %esp
    // 7: 8b 7c 24 38                   movl    0x38(%esp), %edi
    // b: 8b 6c 24 34                   movl    0x34(%esp), %ebp
    // f: b8 00 00 00 00                movl    $0x0, %eax
    // 00000010:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 14: 0f b7 f0                      movzwl  %ax, %esi
    // 17: 89 f3                         movl    %esi, %ebx
    // 19: f7 d3                         notl    %ebx
    // 1b: 31 d2                         xorl    %edx, %edx
    // 1d: 31 c0                         xorl    %eax, %eax
    // 1f: 83 7c 9d 00 00                cmpl    $0x0, (%ebp,%ebx,4)
    // 24: 0f 95 c2                      setne   %dl
    // 27: 0f 94 44 24 08                sete    0x8(%esp)
    // 2c: 01 f2                         addl    %esi, %edx
    // 2e: 8b 4c 24 30                   movl    0x30(%esp), %ecx
    // 32: 83 fa 02                      cmpl    $0x2, %edx
    // 35: 75 7c                         jne     0xb3 <__JIT_ENTRY+0xb3>
    // 37: 89 0c 24                      movl    %ecx, (%esp)
    // 3a: 89 7c 24 04                   movl    %edi, 0x4(%esp)
    // 3e: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
    // 43: 29 f7                         subl    %esi, %edi
    // 45: 8b 54 bd 00                   movl    (%ebp,%edi,4), %edx
    // 49: 81 7a 04 00 00 00 00          cmpl    $0x0, 0x4(%edx)
    // 0000004c:  IMAGE_REL_I386_DIR32 _PyMethodDescr_Type
    // 50: 75 4c                         jne     0x9e <__JIT_ENTRY+0x9e>
    // 52: 8b 4a 14                      movl    0x14(%edx), %ecx
    // 55: 83 79 08 08                   cmpl    $0x8, 0x8(%ecx)
    // 59: 75 43                         jne     0x9e <__JIT_ENTRY+0x9e>
    // 5b: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 5f: 8b 7c 24 04                   movl    0x4(%esp), %edi
    // 63: 8b 7f 24                      movl    0x24(%edi), %edi
    // 66: 89 7c 24 10                   movl    %edi, 0x10(%esp)
    // 6a: 85 ff                         testl   %edi, %edi
    // 6c: 7e 30                         jle     0x9e <__JIT_ENTRY+0x9e>
    // 6e: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 72: 8d 0c b5 00 00 00 00          leal    (,%esi,4), %ecx
    // 79: 89 ef                         movl    %ebp, %edi
    // 7b: 29 cf                         subl    %ecx, %edi
    // 7d: 0f b6 4c 24 08                movzbl  0x8(%esp), %ecx
    // 82: 88 c8                         movb    %cl, %al
    // 84: 8d 0c 85 fc ff ff ff          leal    -0x4(,%eax,4), %ecx
    // 8b: 89 7c 24 0c                   movl    %edi, 0xc(%esp)
    // 8f: 8b 04 0f                      movl    (%edi,%ecx), %eax
    // 92: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 96: 8b 40 04                      movl    0x4(%eax), %eax
    // 99: 3b 42 08                      cmpl    0x8(%edx), %eax
    // 9c: 74 2d                         je      0xcb <__JIT_ENTRY+0xcb>
    // 9e: 8b 44 24 04                   movl    0x4(%esp), %eax
    // a2: 89 44 24 38                   movl    %eax, 0x38(%esp)
    // a6: 89 6c 24 34                   movl    %ebp, 0x34(%esp)
    // aa: 8b 04 24                      movl    (%esp), %eax
    // ad: 89 44 24 30                   movl    %eax, 0x30(%esp)
    // b1: eb 0c                         jmp     0xbf <__JIT_ENTRY+0xbf>
    // b3: 89 7c 24 38                   movl    %edi, 0x38(%esp)
    // b7: 89 6c 24 34                   movl    %ebp, 0x34(%esp)
    // bb: 89 4c 24 30                   movl    %ecx, 0x30(%esp)
    // bf: 83 c4 1c                      addl    $0x1c, %esp
    // c2: 5e                            popl    %esi
    // c3: 5f                            popl    %edi
    // c4: 5b                            popl    %ebx
    // c5: 5d                            popl    %ebp
    // c6: e9 00 00 00 00                jmp     0xcb <__JIT_ENTRY+0xcb>
    // 000000c7:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // cb: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // cf: 8b 44 08 04                   movl    0x4(%eax,%ecx), %eax
    // d3: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // d7: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // db: 8b 49 04                      movl    0x4(%ecx), %ecx
    // de: 8b 54 24 10                   movl    0x10(%esp), %edx
    // e2: 4a                            decl    %edx
    // e3: 8b 44 24 04                   movl    0x4(%esp), %eax
    // e7: 89 50 24                      movl    %edx, 0x24(%eax)
    // ea: 8b 04 24                      movl    (%esp), %eax
    // ed: 89 68 20                      movl    %ebp, 0x20(%eax)
    // f0: ff 74 24 0c                   pushl   0xc(%esp)
    // f4: ff 74 24 0c                   pushl   0xc(%esp)
    // f8: ff d1                         calll   *%ecx
    // fa: 8b 54 24 08                   movl    0x8(%esp), %edx
    // fe: 83 c4 08                      addl    $0x8, %esp
    // 101: 8b 4a 20                      movl    0x20(%edx), %ecx
    // 104: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 108: c7 42 20 00 00 00 00          movl    $0x0, 0x20(%edx)
    // 10f: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 113: ff 41 24                      incl    0x24(%ecx)
    // 116: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 11a: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 11e: 8b 44 bd 00                   movl    (%ebp,%edi,4), %eax
    // 122: 8b 08                         movl    (%eax), %ecx
    // 124: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 12a: 7f 12                         jg      0x13e <__JIT_ENTRY+0x13e>
    // 12c: 49                            decl    %ecx
    // 12d: 89 08                         movl    %ecx, (%eax)
    // 12f: 75 0d                         jne     0x13e <__JIT_ENTRY+0x13e>
    // 131: 50                            pushl   %eax
    // 132: e8 00 00 00 00                calll   0x137 <__JIT_ENTRY+0x137>
    // 00000133:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 137: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 13b: 83 c4 04                      addl    $0x4, %esp
    // 13e: 8b 44 9d 00                   movl    (%ebp,%ebx,4), %eax
    // 142: 85 c0                         testl   %eax, %eax
    // 144: 74 1c                         je      0x162 <__JIT_ENTRY+0x162>
    // 146: 8b 08                         movl    (%eax), %ecx
    // 148: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 14e: 7f 12                         jg      0x162 <__JIT_ENTRY+0x162>
    // 150: 49                            decl    %ecx
    // 151: 89 08                         movl    %ecx, (%eax)
    // 153: 75 0d                         jne     0x162 <__JIT_ENTRY+0x162>
    // 155: 50                            pushl   %eax
    // 156: e8 00 00 00 00                calll   0x15b <__JIT_ENTRY+0x15b>
    // 00000157:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 15b: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 15f: 83 c4 04                      addl    $0x4, %esp
    // 162: b8 00 00 00 00                movl    $0x0, %eax
    // 00000163:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 167: 66 85 c0                      testw   %ax, %ax
    // 16a: 74 3e                         je      0x1aa <__JIT_ENTRY+0x1aa>
    // 16c: 46                            incl    %esi
    // 16d: 83 c5 fc                      addl    $-0x4, %ebp
    // 170: eb 17                         jmp     0x189 <__JIT_ENTRY+0x189>
    // 172: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%eax,%eax)
    // 180: 4e                            decl    %esi
    // 181: 83 c5 fc                      addl    $-0x4, %ebp
    // 184: 83 fe 01                      cmpl    $0x1, %esi
    // 187: 76 21                         jbe     0x1aa <__JIT_ENTRY+0x1aa>
    // 189: 8b 45 00                      movl    (%ebp), %eax
    // 18c: 8b 08                         movl    (%eax), %ecx
    // 18e: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 194: 7f ea                         jg      0x180 <__JIT_ENTRY+0x180>
    // 196: 49                            decl    %ecx
    // 197: 89 08                         movl    %ecx, (%eax)
    // 199: 75 e5                         jne     0x180 <__JIT_ENTRY+0x180>
    // 19b: 50                            pushl   %eax
    // 19c: e8 00 00 00 00                calll   0x1a1 <__JIT_ENTRY+0x1a1>
    // 0000019d:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 1a1: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 1a5: 83 c4 04                      addl    $0x4, %esp
    // 1a8: eb d6                         jmp     0x180 <__JIT_ENTRY+0x180>
    // 1aa: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // 1ae: 85 c9                         testl   %ecx, %ecx
    // 1b0: 74 26                         je      0x1d8 <__JIT_ENTRY+0x1d8>
    // 1b2: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 1b6: 89 0c b8                      movl    %ecx, (%eax,%edi,4)
    // 1b9: 8d 04 98                      leal    (%eax,%ebx,4), %eax
    // 1bc: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 1c0: 89 4c 24 38                   movl    %ecx, 0x38(%esp)
    // 1c4: 89 44 24 34                   movl    %eax, 0x34(%esp)
    // 1c8: 89 54 24 30                   movl    %edx, 0x30(%esp)
    // 1cc: 83 c4 1c                      addl    $0x1c, %esp
    // 1cf: 5e                            popl    %esi
    // 1d0: 5f                            popl    %edi
    // 1d1: 5b                            popl    %ebx
    // 1d2: 5d                            popl    %ebp
    // 1d3: e9 00 00 00 00                jmp     0x1d8 <__JIT_ENTRY+0x1d8>
    // 000001d4:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 1d8: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 1dc: 8d 04 b8                      leal    (%eax,%edi,4), %eax
    // 1df: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 1e3: 89 4c 24 38                   movl    %ecx, 0x38(%esp)
    // 1e7: 89 54 24 30                   movl    %edx, 0x30(%esp)
    // 1eb: 89 44 24 34                   movl    %eax, 0x34(%esp)
    // 1ef: 83 c4 1c                      addl    $0x1c, %esp
    // 1f2: 5e                            popl    %esi
    // 1f3: 5f                            popl    %edi
    // 1f4: 5b                            popl    %ebx
    // 1f5: 5d                            popl    %ebp
    // 1f6: e9 00 00 00 00                jmp     0x1fb <__JIT_ENTRY+0x1fb>
    // 000001f7:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[507] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x1c, 0x8b,
        0x7c, 0x24, 0x38, 0x8b, 0x6c, 0x24, 0x34, 0xb8,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x89,
        0xf3, 0xf7, 0xd3, 0x31, 0xd2, 0x31, 0xc0, 0x83,
        0x7c, 0x9d, 0x00, 0x00, 0x0f, 0x95, 0xc2, 0x0f,
        0x94, 0x44, 0x24, 0x08, 0x01, 0xf2, 0x8b, 0x4c,
        0x24, 0x30, 0x83, 0xfa, 0x02, 0x75, 0x7c, 0x89,
        0x0c, 0x24, 0x89, 0x7c, 0x24, 0x04, 0xbf, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xf7, 0x8b, 0x54, 0xbd,
        0x00, 0x81, 0x7a, 0x04, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x4c, 0x8b, 0x4a, 0x14, 0x83, 0x79, 0x08,
        0x08, 0x75, 0x43, 0x89, 0x7c, 0x24, 0x18, 0x8b,
        0x7c, 0x24, 0x04, 0x8b, 0x7f, 0x24, 0x89, 0x7c,
        0x24, 0x10, 0x85, 0xff, 0x7e, 0x30, 0x89, 0x4c,
        0x24, 0x14, 0x8d, 0x0c, 0xb5, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xef, 0x29, 0xcf, 0x0f, 0xb6, 0x4c,
        0x24, 0x08, 0x88, 0xc8, 0x8d, 0x0c, 0x85, 0xfc,
        0xff, 0xff, 0xff, 0x89, 0x7c, 0x24, 0x0c, 0x8b,
        0x04, 0x0f, 0x89, 0x44, 0x24, 0x08, 0x8b, 0x40,
        0x04, 0x3b, 0x42, 0x08, 0x74, 0x2d, 0x8b, 0x44,
        0x24, 0x04, 0x89, 0x44, 0x24, 0x38, 0x89, 0x6c,
        0x24, 0x34, 0x8b, 0x04, 0x24, 0x89, 0x44, 0x24,
        0x30, 0xeb, 0x0c, 0x89, 0x7c, 0x24, 0x38, 0x89,
        0x6c, 0x24, 0x34, 0x89, 0x4c, 0x24, 0x30, 0x83,
        0xc4, 0x1c, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x44, 0x24, 0x0c, 0x8b,
        0x44, 0x08, 0x04, 0x89, 0x44, 0x24, 0x0c, 0x8b,
        0x4c, 0x24, 0x14, 0x8b, 0x49, 0x04, 0x8b, 0x54,
        0x24, 0x10, 0x4a, 0x8b, 0x44, 0x24, 0x04, 0x89,
        0x50, 0x24, 0x8b, 0x04, 0x24, 0x89, 0x68, 0x20,
        0xff, 0x74, 0x24, 0x0c, 0xff, 0x74, 0x24, 0x0c,
        0xff, 0xd1, 0x8b, 0x54, 0x24, 0x08, 0x83, 0xc4,
        0x08, 0x8b, 0x4a, 0x20, 0x89, 0x4c, 0x24, 0x08,
        0xc7, 0x42, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x4c, 0x24, 0x04, 0xff, 0x41, 0x24, 0x89, 0x44,
        0x24, 0x10, 0x8b, 0x7c, 0x24, 0x18, 0x8b, 0x44,
        0xbd, 0x00, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x12, 0x49, 0x89, 0x08, 0x75,
        0x0d, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x54, 0x24, 0x04, 0x83, 0xc4, 0x04, 0x8b, 0x44,
        0x9d, 0x00, 0x85, 0xc0, 0x74, 0x1c, 0x8b, 0x08,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x12,
        0x49, 0x89, 0x08, 0x75, 0x0d, 0x50, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x54, 0x24, 0x04, 0x83,
        0xc4, 0x04, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x66,
        0x85, 0xc0, 0x74, 0x3e, 0x46, 0x83, 0xc5, 0xfc,
        0xeb, 0x17, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4e, 0x83, 0xc5, 0xfc, 0x83, 0xfe, 0x01, 0x76,
        0x21, 0x8b, 0x45, 0x00, 0x8b, 0x08, 0x81, 0xf9,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0xea, 0x49, 0x89,
        0x08, 0x75, 0xe5, 0x50, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x54, 0x24, 0x04, 0x83, 0xc4, 0x04,
        0xeb, 0xd6, 0x8b, 0x4c, 0x24, 0x10, 0x85, 0xc9,
        0x74, 0x26, 0x8b, 0x44, 0x24, 0x08, 0x89, 0x0c,
        0xb8, 0x8d, 0x04, 0x98, 0x8b, 0x4c, 0x24, 0x04,
        0x89, 0x4c, 0x24, 0x38, 0x89, 0x44, 0x24, 0x34,
        0x89, 0x54, 0x24, 0x30, 0x83, 0xc4, 0x1c, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x44, 0x24, 0x08, 0x8d, 0x04, 0xb8, 0x8b,
        0x4c, 0x24, 0x04, 0x89, 0x4c, 0x24, 0x38, 0x89,
        0x54, 0x24, 0x30, 0x89, 0x44, 0x24, 0x34, 0x83,
        0xc4, 0x1c, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x10, instruction->oparg);
    patch_32(code + 0x4c, (uintptr_t)&PyMethodDescr_Type);
    patch_x86_64_32rx(code + 0xc7, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x133, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x157, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x163, instruction->oparg);
    patch_x86_64_32rx(code + 0x19d, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x1d4, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x1f7, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_NON_PY_GENERAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_NON_PY_GENERAL.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 14                      subl    $0x14, %esp
    // 7: 8b 7c 24 2c                   movl    0x2c(%esp), %edi
    // b: b8 00 00 00 00                movl    $0x0, %eax
    // 0000000c:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 10: 0f b7 d8                      movzwl  %ax, %ebx
    // 13: 8d 0c 9d 00 00 00 00          leal    (,%ebx,4), %ecx
    // 1a: 89 f8                         movl    %edi, %eax
    // 1c: 29 c8                         subl    %ecx, %eax
    // 1e: 89 de                         movl    %ebx, %esi
    // 20: f7 d6                         notl    %esi
    // 22: bd fe ff ff ff                movl    $0xfffffffe, %ebp       # imm = 0xFFFFFFFE
    // 27: 29 dd                         subl    %ebx, %ebp
    // 29: 31 c9                         xorl    %ecx, %ecx
    // 2b: 31 d2                         xorl    %edx, %edx
    // 2d: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 31: 83 3c b7 00                   cmpl    $0x0, (%edi,%esi,4)
    // 35: 0f 94 c2                      sete    %dl
    // 38: 8d 44 90 fc                   leal    -0x4(%eax,%edx,4), %eax
    // 3c: 8b 54 24 30                   movl    0x30(%esp), %edx
    // 40: 89 54 24 04                   movl    %edx, 0x4(%esp)
    // 44: 0f 95 c1                      setne   %cl
    // 47: 8b 74 24 28                   movl    0x28(%esp), %esi
    // 4b: 8b 14 af                      movl    (%edi,%ebp,4), %edx
    // 4e: 89 7e 20                      movl    %edi, 0x20(%esi)
    // 51: 8d 8c 19 00 00 00 80          leal    -0x80000000(%ecx,%ebx), %ecx
    // 58: 6a 00                         pushl   $0x0
    // 5a: 51                            pushl   %ecx
    // 5b: 50                            pushl   %eax
    // 5c: 52                            pushl   %edx
    // 5d: e8 00 00 00 00                calll   0x62 <__JIT_ENTRY+0x62>
    // 0000005e:  IMAGE_REL_I386_REL32 _PyObject_Vectorcall
    // 62: 83 c4 10                      addl    $0x10, %esp
    // 65: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 69: 8b 46 20                      movl    0x20(%esi), %eax
    // 6c: 89 04 24                      movl    %eax, (%esp)
    // 6f: 89 74 24 08                   movl    %esi, 0x8(%esp)
    // 73: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 7a: 8b 04 af                      movl    (%edi,%ebp,4), %eax
    // 7d: 8b 08                         movl    (%eax), %ecx
    // 7f: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 85: 7f 0e                         jg      0x95 <__JIT_ENTRY+0x95>
    // 87: 49                            decl    %ecx
    // 88: 89 08                         movl    %ecx, (%eax)
    // 8a: 75 09                         jne     0x95 <__JIT_ENTRY+0x95>
    // 8c: 50                            pushl   %eax
    // 8d: e8 00 00 00 00                calll   0x92 <__JIT_ENTRY+0x92>
    // 0000008e:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 92: 83 c4 04                      addl    $0x4, %esp
    // 95: 8b 74 24 10                   movl    0x10(%esp), %esi
    // 99: 8b 04 b7                      movl    (%edi,%esi,4), %eax
    // 9c: 85 c0                         testl   %eax, %eax
    // 9e: 74 18                         je      0xb8 <__JIT_ENTRY+0xb8>
    // a0: 8b 08                         movl    (%eax), %ecx
    // a2: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // a8: 7f 0e                         jg      0xb8 <__JIT_ENTRY+0xb8>
    // aa: 49                            decl    %ecx
    // ab: 89 08                         movl    %ecx, (%eax)
    // ad: 75 09                         jne     0xb8 <__JIT_ENTRY+0xb8>
    // af: 50                            pushl   %eax
    // b0: e8 00 00 00 00                calll   0xb5 <__JIT_ENTRY+0xb5>
    // 000000b1:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // b5: 83 c4 04                      addl    $0x4, %esp
    // b8: b8 00 00 00 00                movl    $0x0, %eax
    // 000000b9:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // bd: 66 85 c0                      testw   %ax, %ax
    // c0: 74 33                         je      0xf5 <__JIT_ENTRY+0xf5>
    // c2: 43                            incl    %ebx
    // c3: 83 c7 fc                      addl    $-0x4, %edi
    // c6: eb 11                         jmp     0xd9 <__JIT_ENTRY+0xd9>
    // c8: 0f 1f 84 00 00 00 00 00       nopl    (%eax,%eax)
    // d0: 4b                            decl    %ebx
    // d1: 83 c7 fc                      addl    $-0x4, %edi
    // d4: 83 fb 01                      cmpl    $0x1, %ebx
    // d7: 76 1c                         jbe     0xf5 <__JIT_ENTRY+0xf5>
    // d9: 8b 07                         movl    (%edi), %eax
    // db: 8b 08                         movl    (%eax), %ecx
    // dd: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // e3: 7f eb                         jg      0xd0 <__JIT_ENTRY+0xd0>
    // e5: 49                            decl    %ecx
    // e6: 89 08                         movl    %ecx, (%eax)
    // e8: 75 e6                         jne     0xd0 <__JIT_ENTRY+0xd0>
    // ea: 50                            pushl   %eax
    // eb: e8 00 00 00 00                calll   0xf0 <__JIT_ENTRY+0xf0>
    // 000000ec:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // f0: 83 c4 04                      addl    $0x4, %esp
    // f3: eb db                         jmp     0xd0 <__JIT_ENTRY+0xd0>
    // f5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // f9: 85 c9                         testl   %ecx, %ecx
    // fb: 74 29                         je      0x126 <__JIT_ENTRY+0x126>
    // fd: 8b 04 24                      movl    (%esp), %eax
    // 100: 89 0c a8                      movl    %ecx, (%eax,%ebp,4)
    // 103: 8d 04 b0                      leal    (%eax,%esi,4), %eax
    // 106: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 10a: 89 4c 24 30                   movl    %ecx, 0x30(%esp)
    // 10e: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 112: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 116: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // 11a: 83 c4 14                      addl    $0x14, %esp
    // 11d: 5e                            popl    %esi
    // 11e: 5f                            popl    %edi
    // 11f: 5b                            popl    %ebx
    // 120: 5d                            popl    %ebp
    // 121: e9 00 00 00 00                jmp     0x126 <__JIT_ENTRY+0x126>
    // 00000122:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 126: 8b 04 24                      movl    (%esp), %eax
    // 129: 8d 04 a8                      leal    (%eax,%ebp,4), %eax
    // 12c: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 130: 89 4c 24 30                   movl    %ecx, 0x30(%esp)
    // 134: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 138: 89 4c 24 28                   movl    %ecx, 0x28(%esp)
    // 13c: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 140: 83 c4 14                      addl    $0x14, %esp
    // 143: 5e                            popl    %esi
    // 144: 5f                            popl    %edi
    // 145: 5b                            popl    %ebx
    // 146: 5d                            popl    %ebp
    // 147: e9 00 00 00 00                jmp     0x14c <__JIT_ENTRY+0x14c>
    // 00000148:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[332] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x14, 0x8b,
        0x7c, 0x24, 0x2c, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xd8, 0x8d, 0x0c, 0x9d, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xf8, 0x29, 0xc8, 0x89, 0xde,
        0xf7, 0xd6, 0xbd, 0xfe, 0xff, 0xff, 0xff, 0x29,
        0xdd, 0x31, 0xc9, 0x31, 0xd2, 0x89, 0x74, 0x24,
        0x10, 0x83, 0x3c, 0xb7, 0x00, 0x0f, 0x94, 0xc2,
        0x8d, 0x44, 0x90, 0xfc, 0x8b, 0x54, 0x24, 0x30,
        0x89, 0x54, 0x24, 0x04, 0x0f, 0x95, 0xc1, 0x8b,
        0x74, 0x24, 0x28, 0x8b, 0x14, 0xaf, 0x89, 0x7e,
        0x20, 0x8d, 0x8c, 0x19, 0x00, 0x00, 0x00, 0x80,
        0x6a, 0x00, 0x51, 0x50, 0x52, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x10, 0x89, 0x44, 0x24,
        0x0c, 0x8b, 0x46, 0x20, 0x89, 0x04, 0x24, 0x89,
        0x74, 0x24, 0x08, 0xc7, 0x46, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x04, 0xaf, 0x8b, 0x08, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x49,
        0x89, 0x08, 0x75, 0x09, 0x50, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b, 0x74, 0x24,
        0x10, 0x8b, 0x04, 0xb7, 0x85, 0xc0, 0x74, 0x18,
        0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75, 0x09, 0x50,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04,
        0xb8, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0,
        0x74, 0x33, 0x43, 0x83, 0xc7, 0xfc, 0xeb, 0x11,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4b, 0x83, 0xc7, 0xfc, 0x83, 0xfb, 0x01, 0x76,
        0x1c, 0x8b, 0x07, 0x8b, 0x08, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0xeb, 0x49, 0x89, 0x08,
        0x75, 0xe6, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0xeb, 0xdb, 0x8b, 0x4c, 0x24,
        0x0c, 0x85, 0xc9, 0x74, 0x29, 0x8b, 0x04, 0x24,
        0x89, 0x0c, 0xa8, 0x8d, 0x04, 0xb0, 0x8b, 0x4c,
        0x24, 0x04, 0x89, 0x4c, 0x24, 0x30, 0x89, 0x44,
        0x24, 0x2c, 0x8b, 0x44, 0x24, 0x08, 0x89, 0x44,
        0x24, 0x28, 0x83, 0xc4, 0x14, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x04,
        0x24, 0x8d, 0x04, 0xa8, 0x8b, 0x4c, 0x24, 0x04,
        0x89, 0x4c, 0x24, 0x30, 0x8b, 0x4c, 0x24, 0x08,
        0x89, 0x4c, 0x24, 0x28, 0x89, 0x44, 0x24, 0x2c,
        0x83, 0xc4, 0x14, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xc, instruction->oparg);
    patch_x86_64_32rx(code + 0x5e, (uintptr_t)&PyObject_Vectorcall + -0x4);
    patch_x86_64_32rx(code + 0x8e, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xb1, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0xb9, instruction->oparg);
    patch_x86_64_32rx(code + 0xec, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x122, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x148, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_STR_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_STR_1.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 7: 8b 44 24 14                   movl    0x14(%esp), %eax
    // b: 8b 74 24 10                   movl    0x10(%esp), %esi
    // f: 83 78 f8 00                   cmpl    $0x0, -0x8(%eax)
    // 13: 75 09                         jne     0x1e <__JIT_ENTRY+0x1e>
    // 15: 81 78 f4 00 00 00 00          cmpl    $0x0, -0xc(%eax)
    // 00000018:  IMAGE_REL_I386_DIR32 _PyUnicode_Type
    // 1c: 74 14                         je      0x32 <__JIT_ENTRY+0x32>
    // 1e: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 22: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 26: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 2a: 5e                            popl    %esi
    // 2b: 5f                            popl    %edi
    // 2c: 5b                            popl    %ebx
    // 2d: e9 00 00 00 00                jmp     0x32 <__JIT_ENTRY+0x32>
    // 0000002e:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 32: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 35: 89 46 20                      movl    %eax, 0x20(%esi)
    // 38: 53                            pushl   %ebx
    // 39: e8 00 00 00 00                calll   0x3e <__JIT_ENTRY+0x3e>
    // 0000003a:  IMAGE_REL_I386_REL32 _PyObject_Str
    // 3e: 83 c4 04                      addl    $0x4, %esp
    // 41: 83 46 20 f4                   addl    $-0xc, 0x20(%esi)
    // 45: 8b 0b                         movl    (%ebx), %ecx
    // 47: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 4d: 7f 12                         jg      0x61 <__JIT_ENTRY+0x61>
    // 4f: 49                            decl    %ecx
    // 50: 89 0b                         movl    %ecx, (%ebx)
    // 52: 75 0d                         jne     0x61 <__JIT_ENTRY+0x61>
    // 54: 53                            pushl   %ebx
    // 55: 89 c3                         movl    %eax, %ebx
    // 57: e8 00 00 00 00                calll   0x5c <__JIT_ENTRY+0x5c>
    // 00000058:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 5c: 89 d8                         movl    %ebx, %eax
    // 5e: 83 c4 04                      addl    $0x4, %esp
    // 61: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 64: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 6b: 85 c0                         testl   %eax, %eax
    // 6d: 74 19                         je      0x88 <__JIT_ENTRY+0x88>
    // 6f: 89 01                         movl    %eax, (%ecx)
    // 71: 83 c1 04                      addl    $0x4, %ecx
    // 74: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 78: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 7c: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 80: 5e                            popl    %esi
    // 81: 5f                            popl    %edi
    // 82: 5b                            popl    %ebx
    // 83: e9 00 00 00 00                jmp     0x88 <__JIT_ENTRY+0x88>
    // 00000084:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 88: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 8c: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 90: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 94: 5e                            popl    %esi
    // 95: 5f                            popl    %edi
    // 96: 5b                            popl    %ebx
    // 97: e9 00 00 00 00                jmp     0x9c <__JIT_ENTRY+0x9c>
    // 00000098:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[156] = {
        0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x18, 0x8b,
        0x44, 0x24, 0x14, 0x8b, 0x74, 0x24, 0x10, 0x83,
        0x78, 0xf8, 0x00, 0x75, 0x09, 0x81, 0x78, 0xf4,
        0x00, 0x00, 0x00, 0x00, 0x74, 0x14, 0x89, 0x7c,
        0x24, 0x18, 0x89, 0x44, 0x24, 0x14, 0x89, 0x74,
        0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x58, 0xfc, 0x89, 0x46, 0x20,
        0x53, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x83, 0x46, 0x20, 0xf4, 0x8b, 0x0b, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x12, 0x49,
        0x89, 0x0b, 0x75, 0x0d, 0x53, 0x89, 0xc3, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xd8, 0x83, 0xc4,
        0x04, 0x8b, 0x4e, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x19, 0x89,
        0x01, 0x83, 0xc1, 0x04, 0x89, 0x7c, 0x24, 0x18,
        0x89, 0x4c, 0x24, 0x14, 0x89, 0x74, 0x24, 0x10,
        0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x7c, 0x24, 0x18, 0x89, 0x4c, 0x24, 0x14,
        0x89, 0x74, 0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x18, (uintptr_t)&PyUnicode_Type);
    patch_x86_64_32rx(code + 0x2e, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)&PyObject_Str + -0x4);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x84, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x98, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_TUPLE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_TUPLE_1.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 7: 8b 44 24 14                   movl    0x14(%esp), %eax
    // b: 8b 74 24 10                   movl    0x10(%esp), %esi
    // f: 83 78 f8 00                   cmpl    $0x0, -0x8(%eax)
    // 13: 75 09                         jne     0x1e <__JIT_ENTRY+0x1e>
    // 15: 81 78 f4 00 00 00 00          cmpl    $0x0, -0xc(%eax)
    // 00000018:  IMAGE_REL_I386_DIR32 _PyTuple_Type
    // 1c: 74 14                         je      0x32 <__JIT_ENTRY+0x32>
    // 1e: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 22: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 26: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 2a: 5e                            popl    %esi
    // 2b: 5f                            popl    %edi
    // 2c: 5b                            popl    %ebx
    // 2d: e9 00 00 00 00                jmp     0x32 <__JIT_ENTRY+0x32>
    // 0000002e:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 32: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 35: 89 46 20                      movl    %eax, 0x20(%esi)
    // 38: 53                            pushl   %ebx
    // 39: e8 00 00 00 00                calll   0x3e <__JIT_ENTRY+0x3e>
    // 0000003a:  IMAGE_REL_I386_REL32 _PySequence_Tuple
    // 3e: 83 c4 04                      addl    $0x4, %esp
    // 41: 83 46 20 f4                   addl    $-0xc, 0x20(%esi)
    // 45: 8b 0b                         movl    (%ebx), %ecx
    // 47: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 4d: 7f 12                         jg      0x61 <__JIT_ENTRY+0x61>
    // 4f: 49                            decl    %ecx
    // 50: 89 0b                         movl    %ecx, (%ebx)
    // 52: 75 0d                         jne     0x61 <__JIT_ENTRY+0x61>
    // 54: 53                            pushl   %ebx
    // 55: 89 c3                         movl    %eax, %ebx
    // 57: e8 00 00 00 00                calll   0x5c <__JIT_ENTRY+0x5c>
    // 00000058:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 5c: 89 d8                         movl    %ebx, %eax
    // 5e: 83 c4 04                      addl    $0x4, %esp
    // 61: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 64: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 6b: 85 c0                         testl   %eax, %eax
    // 6d: 74 19                         je      0x88 <__JIT_ENTRY+0x88>
    // 6f: 89 01                         movl    %eax, (%ecx)
    // 71: 83 c1 04                      addl    $0x4, %ecx
    // 74: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 78: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 7c: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 80: 5e                            popl    %esi
    // 81: 5f                            popl    %edi
    // 82: 5b                            popl    %ebx
    // 83: e9 00 00 00 00                jmp     0x88 <__JIT_ENTRY+0x88>
    // 00000084:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 88: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 8c: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 90: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 94: 5e                            popl    %esi
    // 95: 5f                            popl    %edi
    // 96: 5b                            popl    %ebx
    // 97: e9 00 00 00 00                jmp     0x9c <__JIT_ENTRY+0x9c>
    // 00000098:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[156] = {
        0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x18, 0x8b,
        0x44, 0x24, 0x14, 0x8b, 0x74, 0x24, 0x10, 0x83,
        0x78, 0xf8, 0x00, 0x75, 0x09, 0x81, 0x78, 0xf4,
        0x00, 0x00, 0x00, 0x00, 0x74, 0x14, 0x89, 0x7c,
        0x24, 0x18, 0x89, 0x44, 0x24, 0x14, 0x89, 0x74,
        0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x58, 0xfc, 0x89, 0x46, 0x20,
        0x53, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x83, 0x46, 0x20, 0xf4, 0x8b, 0x0b, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x12, 0x49,
        0x89, 0x0b, 0x75, 0x0d, 0x53, 0x89, 0xc3, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xd8, 0x83, 0xc4,
        0x04, 0x8b, 0x4e, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x19, 0x89,
        0x01, 0x83, 0xc1, 0x04, 0x89, 0x7c, 0x24, 0x18,
        0x89, 0x4c, 0x24, 0x14, 0x89, 0x74, 0x24, 0x10,
        0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x7c, 0x24, 0x18, 0x89, 0x4c, 0x24, 0x14,
        0x89, 0x74, 0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x18, (uintptr_t)&PyTuple_Type);
    patch_x86_64_32rx(code + 0x2e, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)&PySequence_Tuple + -0x4);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x84, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x98, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_TYPE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_TYPE_1.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 44 24 18                   movl    0x18(%esp), %eax
    // c: 8b 74 24 14                   movl    0x14(%esp), %esi
    // 10: 83 78 f8 00                   cmpl    $0x0, -0x8(%eax)
    // 14: 75 09                         jne     0x1f <__JIT_ENTRY+0x1f>
    // 16: 81 78 f4 00 00 00 00          cmpl    $0x0, -0xc(%eax)
    // 00000019:  IMAGE_REL_I386_DIR32 _PyType_Type
    // 1d: 74 15                         je      0x34 <__JIT_ENTRY+0x34>
    // 1f: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 23: 89 44 24 18                   movl    %eax, 0x18(%esp)
    // 27: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 2b: 5e                            popl    %esi
    // 2c: 5f                            popl    %edi
    // 2d: 5b                            popl    %ebx
    // 2e: 5d                            popl    %ebp
    // 2f: e9 00 00 00 00                jmp     0x34 <__JIT_ENTRY+0x34>
    // 00000030:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 34: 8b 48 fc                      movl    -0x4(%eax), %ecx
    // 37: 8d 50 f8                      leal    -0x8(%eax), %edx
    // 3a: 8b 59 04                      movl    0x4(%ecx), %ebx
    // 3d: 8b 2b                         movl    (%ebx), %ebp
    // 3f: 81 fd ff ff ff 3f             cmpl    $0x3fffffff, %ebp       # imm = 0x3FFFFFFF
    // 45: 7f 03                         jg      0x4a <__JIT_ENTRY+0x4a>
    // 47: 45                            incl    %ebp
    // 48: 89 2b                         movl    %ebp, (%ebx)
    // 4a: 89 58 f4                      movl    %ebx, -0xc(%eax)
    // 4d: 89 56 20                      movl    %edx, 0x20(%esi)
    // 50: 8b 01                         movl    (%ecx), %eax
    // 52: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 57: 7f 0e                         jg      0x67 <__JIT_ENTRY+0x67>
    // 59: 48                            decl    %eax
    // 5a: 89 01                         movl    %eax, (%ecx)
    // 5c: 75 09                         jne     0x67 <__JIT_ENTRY+0x67>
    // 5e: 51                            pushl   %ecx
    // 5f: e8 00 00 00 00                calll   0x64 <__JIT_ENTRY+0x64>
    // 00000060:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 64: 83 c4 04                      addl    $0x4, %esp
    // 67: 8b 46 20                      movl    0x20(%esi), %eax
    // 6a: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 71: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 75: 89 44 24 18                   movl    %eax, 0x18(%esp)
    // 79: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 7d: 5e                            popl    %esi
    // 7e: 5f                            popl    %edi
    // 7f: 5b                            popl    %ebx
    // 80: 5d                            popl    %ebp
    // 81: e9 00 00 00 00                jmp     0x86 <__JIT_ENTRY+0x86>
    // 00000082:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[129] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x44, 0x24, 0x18, 0x8b, 0x74, 0x24, 0x14,
        0x83, 0x78, 0xf8, 0x00, 0x75, 0x09, 0x81, 0x78,
        0xf4, 0x00, 0x00, 0x00, 0x00, 0x74, 0x15, 0x89,
        0x7c, 0x24, 0x1c, 0x89, 0x44, 0x24, 0x18, 0x89,
        0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x48, 0xfc, 0x8d,
        0x50, 0xf8, 0x8b, 0x59, 0x04, 0x8b, 0x2b, 0x81,
        0xfd, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03, 0x45,
        0x89, 0x2b, 0x89, 0x58, 0xf4, 0x89, 0x56, 0x20,
        0x8b, 0x01, 0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x0e, 0x48, 0x89, 0x01, 0x75, 0x09, 0x51, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b,
        0x46, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x7c, 0x24, 0x1c, 0x89, 0x44, 0x24,
        0x18, 0x89, 0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b,
        0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x19, (uintptr_t)&PyType_Type);
    patch_x86_64_32rx(code + 0x30, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x60, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__CHECK_AND_ALLOCATE_OBJECT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_AND_ALLOCATE_OBJECT.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 14                      subl    $0x14, %esp
    // 7: 8b 7c 24 30                   movl    0x30(%esp), %edi
    // b: 8b 5c 24 2c                   movl    0x2c(%esp), %ebx
    // f: 8b 54 24 28                   movl    0x28(%esp), %edx
    // 13: b8 00 00 00 00                movl    $0x0, %eax
    // 00000014:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 18: 0f b7 c0                      movzwl  %ax, %eax
    // 1b: 89 c6                         movl    %eax, %esi
    // 1d: f7 d6                         notl    %esi
    // 1f: 83 3c b3 00                   cmpl    $0x0, (%ebx,%esi,4)
    // 23: 0f 85 ff 00 00 00             jne     0x128 <__JIT_ENTRY+0x128>
    // 29: bd fe ff ff ff                movl    $0xfffffffe, %ebp       # imm = 0xFFFFFFFE
    // 2e: 29 c5                         subl    %eax, %ebp
    // 30: 8b 04 ab                      movl    (%ebx,%ebp,4), %eax
    // 33: 8b 48 04                      movl    0x4(%eax), %ecx
    // 36: 83 79 54 00                   cmpl    $0x0, 0x54(%ecx)
    // 3a: 0f 89 e8 00 00 00             jns     0x128 <__JIT_ENTRY+0x128>
    // 40: 81 b8 c0 00 00 00 00 00 00 00 cmpl    $0x0, 0xc0(%eax)
    // 00000046:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 4a: 0f 85 d8 00 00 00             jne     0x128 <__JIT_ENTRY+0x128>
    // 50: 8b 8f 94 00 00 00             movl    0x94(%edi), %ecx
    // 56: 85 c9                         testl   %ecx, %ecx
    // 58: 0f 84 ca 00 00 00             je      0x128 <__JIT_ENTRY+0x128>
    // 5e: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 62: 8b 88 d0 01 00 00             movl    0x1d0(%eax), %ecx
    // 68: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 6c: 8b 49 18                      movl    0x18(%ecx), %ecx
    // 6f: 89 0c 24                      movl    %ecx, (%esp)
    // 72: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 76: a1 34 00 00 00                movl    0x34, %eax
    // 00000077:  IMAGE_REL_I386_DIR32 __Py_InitCleanup
    // 7b: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 7f: 8b 0c 24                      movl    (%esp), %ecx
    // 82: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 86: 03 41 34                      addl    0x34(%ecx), %eax
    // 89: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 8d: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 91: 89 14 24                      movl    %edx, (%esp)
    // 94: 8b 97 98 00 00 00             movl    0x98(%edi), %edx
    // 9a: 2b 54 24 10                   subl    0x10(%esp), %edx
    // 9e: c1 fa 02                      sarl    $0x2, %edx
    // a1: 3b 54 24 04                   cmpl    0x4(%esp), %edx
    // a5: 8b 14 24                      movl    (%esp), %edx
    // a8: 7e 7e                         jle     0x128 <__JIT_ENTRY+0x128>
    // aa: 89 5a 20                      movl    %ebx, 0x20(%edx)
    // ad: 6a 00                         pushl   $0x0
    // af: 50                            pushl   %eax
    // b0: e8 00 00 00 00                calll   0xb5 <__JIT_ENTRY+0xb5>
    // 000000b1:  IMAGE_REL_I386_REL32 _PyType_GenericAlloc
    // b5: 8b 54 24 08                   movl    0x8(%esp), %edx
    // b9: 83 c4 08                      addl    $0x8, %esp
    // bc: 8b 4a 20                      movl    0x20(%edx), %ecx
    // bf: c7 42 20 00 00 00 00          movl    $0x0, 0x20(%edx)
    // c6: 85 c0                         testl   %eax, %eax
    // c8: 74 76                         je      0x140 <__JIT_ENTRY+0x140>
    // ca: 89 04 b3                      movl    %eax, (%ebx,%esi,4)
    // cd: 8b 04 ab                      movl    (%ebx,%ebp,4), %eax
    // d0: 8b 74 24 08                   movl    0x8(%esp), %esi
    // d4: 8b 16                         movl    (%esi), %edx
    // d6: 81 fa ff ff ff 3f             cmpl    $0x3fffffff, %edx       # imm = 0x3FFFFFFF
    // dc: 7f 03                         jg      0xe1 <__JIT_ENTRY+0xe1>
    // de: 42                            incl    %edx
    // df: 89 16                         movl    %edx, (%esi)
    // e1: 89 34 ab                      movl    %esi, (%ebx,%ebp,4)
    // e4: 8b 14 24                      movl    (%esp), %edx
    // e7: 89 4a 20                      movl    %ecx, 0x20(%edx)
    // ea: 8b 08                         movl    (%eax), %ecx
    // ec: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // f2: 7f 12                         jg      0x106 <__JIT_ENTRY+0x106>
    // f4: 49                            decl    %ecx
    // f5: 89 08                         movl    %ecx, (%eax)
    // f7: 75 0d                         jne     0x106 <__JIT_ENTRY+0x106>
    // f9: 50                            pushl   %eax
    // fa: e8 00 00 00 00                calll   0xff <__JIT_ENTRY+0xff>
    // 000000fb:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // ff: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 103: 83 c4 04                      addl    $0x4, %esp
    // 106: 8b 42 20                      movl    0x20(%edx), %eax
    // 109: c7 42 20 00 00 00 00          movl    $0x0, 0x20(%edx)
    // 110: 89 7c 24 30                   movl    %edi, 0x30(%esp)
    // 114: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 118: 89 54 24 28                   movl    %edx, 0x28(%esp)
    // 11c: 83 c4 14                      addl    $0x14, %esp
    // 11f: 5e                            popl    %esi
    // 120: 5f                            popl    %edi
    // 121: 5b                            popl    %ebx
    // 122: 5d                            popl    %ebp
    // 123: e9 00 00 00 00                jmp     0x128 <__JIT_ENTRY+0x128>
    // 00000124:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 128: 89 7c 24 30                   movl    %edi, 0x30(%esp)
    // 12c: 89 5c 24 2c                   movl    %ebx, 0x2c(%esp)
    // 130: 89 54 24 28                   movl    %edx, 0x28(%esp)
    // 134: 83 c4 14                      addl    $0x14, %esp
    // 137: 5e                            popl    %esi
    // 138: 5f                            popl    %edi
    // 139: 5b                            popl    %ebx
    // 13a: 5d                            popl    %ebp
    // 13b: e9 00 00 00 00                jmp     0x140 <__JIT_ENTRY+0x140>
    // 0000013c:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 140: 89 7c 24 30                   movl    %edi, 0x30(%esp)
    // 144: 89 4c 24 2c                   movl    %ecx, 0x2c(%esp)
    // 148: 89 54 24 28                   movl    %edx, 0x28(%esp)
    // 14c: 83 c4 14                      addl    $0x14, %esp
    // 14f: 5e                            popl    %esi
    // 150: 5f                            popl    %edi
    // 151: 5b                            popl    %ebx
    // 152: 5d                            popl    %ebp
    // 153: e9 00 00 00 00                jmp     0x158 <__JIT_ENTRY+0x158>
    // 00000154:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[344] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x14, 0x8b,
        0x7c, 0x24, 0x30, 0x8b, 0x5c, 0x24, 0x2c, 0x8b,
        0x54, 0x24, 0x28, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xc0, 0x89, 0xc6, 0xf7, 0xd6, 0x83,
        0x3c, 0xb3, 0x00, 0x0f, 0x85, 0xff, 0x00, 0x00,
        0x00, 0xbd, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc5,
        0x8b, 0x04, 0xab, 0x8b, 0x48, 0x04, 0x83, 0x79,
        0x54, 0x00, 0x0f, 0x89, 0xe8, 0x00, 0x00, 0x00,
        0x81, 0xb8, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0x85, 0xd8, 0x00, 0x00, 0x00,
        0x8b, 0x8f, 0x94, 0x00, 0x00, 0x00, 0x85, 0xc9,
        0x0f, 0x84, 0xca, 0x00, 0x00, 0x00, 0x89, 0x4c,
        0x24, 0x10, 0x8b, 0x88, 0xd0, 0x01, 0x00, 0x00,
        0x89, 0x4c, 0x24, 0x08, 0x8b, 0x49, 0x18, 0x89,
        0x0c, 0x24, 0x89, 0x44, 0x24, 0x0c, 0xa1, 0x34,
        0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x04, 0x8b,
        0x0c, 0x24, 0x8b, 0x44, 0x24, 0x04, 0x03, 0x41,
        0x34, 0x89, 0x44, 0x24, 0x04, 0x8b, 0x44, 0x24,
        0x0c, 0x89, 0x14, 0x24, 0x8b, 0x97, 0x98, 0x00,
        0x00, 0x00, 0x2b, 0x54, 0x24, 0x10, 0xc1, 0xfa,
        0x02, 0x3b, 0x54, 0x24, 0x04, 0x8b, 0x14, 0x24,
        0x7e, 0x7e, 0x89, 0x5a, 0x20, 0x6a, 0x00, 0x50,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x54, 0x24,
        0x08, 0x83, 0xc4, 0x08, 0x8b, 0x4a, 0x20, 0xc7,
        0x42, 0x20, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0,
        0x74, 0x76, 0x89, 0x04, 0xb3, 0x8b, 0x04, 0xab,
        0x8b, 0x74, 0x24, 0x08, 0x8b, 0x16, 0x81, 0xfa,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03, 0x42, 0x89,
        0x16, 0x89, 0x34, 0xab, 0x8b, 0x14, 0x24, 0x89,
        0x4a, 0x20, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x12, 0x49, 0x89, 0x08, 0x75,
        0x0d, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x54, 0x24, 0x04, 0x83, 0xc4, 0x04, 0x8b, 0x42,
        0x20, 0xc7, 0x42, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x7c, 0x24, 0x30, 0x89, 0x44, 0x24, 0x2c,
        0x89, 0x54, 0x24, 0x28, 0x83, 0xc4, 0x14, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x7c, 0x24, 0x30, 0x89, 0x5c, 0x24, 0x2c,
        0x89, 0x54, 0x24, 0x28, 0x83, 0xc4, 0x14, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x7c, 0x24, 0x30, 0x89, 0x4c, 0x24, 0x2c,
        0x89, 0x54, 0x24, 0x28, 0x83, 0xc4, 0x14, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, instruction->oparg);
    patch_32(code + 0x46, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x77, (uintptr_t)&_Py_InitCleanup + 0x34);
    patch_x86_64_32rx(code + 0xb1, (uintptr_t)&PyType_GenericAlloc + -0x4);
    patch_x86_64_32rx(code + 0xfb, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x124, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x13c, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x154, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CHECK_ATTR_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_ATTR_CLASS.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 11: 8b 7e 04                      movl    0x4(%esi), %edi
    // 14: 83 7f 54 00                   cmpl    $0x0, 0x54(%edi)
    // 18: 79 1f                         jns     0x39 <__JIT_ENTRY+0x39>
    // 1a: 81 be c0 00 00 00 00 00 00 00 cmpl    $0x0, 0xc0(%esi)
    // 00000020:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 24: 75 13                         jne     0x39 <__JIT_ENTRY+0x39>
    // 26: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 2a: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 2e: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 32: 5e                            popl    %esi
    // 33: 5f                            popl    %edi
    // 34: e9 00 00 00 00                jmp     0x39 <__JIT_ENTRY+0x39>
    // 00000035:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 39: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 3d: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 41: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 45: 5e                            popl    %esi
    // 46: 5f                            popl    %edi
    // 47: e9 00 00 00 00                jmp     0x4c <__JIT_ENTRY+0x4c>
    // 00000048:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[76] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x71,
        0xfc, 0x8b, 0x7e, 0x04, 0x83, 0x7f, 0x54, 0x00,
        0x79, 0x1f, 0x81, 0xbe, 0xc0, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x13, 0x89, 0x54,
        0x24, 0x14, 0x89, 0x4c, 0x24, 0x10, 0x89, 0x44,
        0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x54, 0x24, 0x14, 0x89, 0x4c, 0x24,
        0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x20, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x35, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x48, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_ATTR_METHOD_LAZY_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_ATTR_METHOD_LAZY_DICT.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 11: bf 00 00 00 00                movl    $0x0, %edi
    // 00000012:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 16: 0f b7 ff                      movzwl  %di, %edi
    // 19: 83 7c 3e f4 00                cmpl    $0x0, -0xc(%esi,%edi)
    // 1e: 74 13                         je      0x33 <__JIT_ENTRY+0x33>
    // 20: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 24: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 28: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 2c: 5e                            popl    %esi
    // 2d: 5f                            popl    %edi
    // 2e: e9 00 00 00 00                jmp     0x33 <__JIT_ENTRY+0x33>
    // 0000002f:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 33: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 37: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 3b: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3f: 5e                            popl    %esi
    // 40: 5f                            popl    %edi
    // 41: e9 00 00 00 00                jmp     0x46 <__JIT_ENTRY+0x46>
    // 00000042:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[65] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x71,
        0xfc, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xff, 0x83, 0x7c, 0x3e, 0xf4, 0x00, 0x74, 0x13,
        0x89, 0x54, 0x24, 0x14, 0x89, 0x4c, 0x24, 0x10,
        0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x14, 0x89,
        0x4c, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x12, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x2f, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_ATTR_MODULE_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_ATTR_MODULE_PUSH_KEYS.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 11: 8b 7e 04                      movl    0x4(%esi), %edi
    // 14: 8b 7f 48                      movl    0x48(%edi), %edi
    // 17: 3b 3d 48 00 00 00             cmpl    0x48, %edi
    // 00000019:  IMAGE_REL_I386_DIR32 _PyModule_Type
    // 1d: 75 27                         jne     0x46 <__JIT_ENTRY+0x46>
    // 1f: 8b 76 08                      movl    0x8(%esi), %esi
    // 22: 8b 76 18                      movl    0x18(%esi), %esi
    // 25: 81 7e 08 00 00 00 00          cmpl    $0x0, 0x8(%esi)
    // 00000028:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 2c: 75 18                         jne     0x46 <__JIT_ENTRY+0x46>
    // 2e: 89 31                         movl    %esi, (%ecx)
    // 30: 83 c1 04                      addl    $0x4, %ecx
    // 33: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 37: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 3b: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3f: 5e                            popl    %esi
    // 40: 5f                            popl    %edi
    // 41: e9 00 00 00 00                jmp     0x46 <__JIT_ENTRY+0x46>
    // 00000042:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 46: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 4a: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 4e: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 52: 5e                            popl    %esi
    // 53: 5f                            popl    %edi
    // 54: e9 00 00 00 00                jmp     0x59 <__JIT_ENTRY+0x59>
    // 00000055:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[89] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x71,
        0xfc, 0x8b, 0x7e, 0x04, 0x8b, 0x7f, 0x48, 0x3b,
        0x3d, 0x48, 0x00, 0x00, 0x00, 0x75, 0x27, 0x8b,
        0x76, 0x08, 0x8b, 0x76, 0x18, 0x81, 0x7e, 0x08,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x18, 0x89, 0x31,
        0x83, 0xc1, 0x04, 0x89, 0x54, 0x24, 0x14, 0x89,
        0x4c, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e,
        0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54,
        0x24, 0x14, 0x89, 0x4c, 0x24, 0x10, 0x89, 0x44,
        0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x19, (uintptr_t)&PyModule_Type + 0x48);
    patch_32(code + 0x28, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x42, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x55, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_ATTR_WITH_HINT.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 10: 8b 76 f4                      movl    -0xc(%esi), %esi
    // 13: 85 f6                         testl   %esi, %esi
    // 15: 74 17                         je      0x2e <__JIT_ENTRY+0x2e>
    // 17: 89 31                         movl    %esi, (%ecx)
    // 19: 83 c1 04                      addl    $0x4, %ecx
    // 1c: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 20: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 24: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 28: 5e                            popl    %esi
    // 29: e9 00 00 00 00                jmp     0x2e <__JIT_ENTRY+0x2e>
    // 0000002a:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 2e: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 32: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 36: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 3a: 5e                            popl    %esi
    // 3b: e9 00 00 00 00                jmp     0x40 <__JIT_ENTRY+0x40>
    // 0000003c:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[64] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x71, 0xfc,
        0x8b, 0x76, 0xf4, 0x85, 0xf6, 0x74, 0x17, 0x89,
        0x31, 0x83, 0xc1, 0x04, 0x89, 0x54, 0x24, 0x10,
        0x89, 0x4c, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08,
        0x5e, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54,
        0x24, 0x10, 0x89, 0x4c, 0x24, 0x0c, 0x89, 0x44,
        0x24, 0x08, 0x5e, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x3c, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_CALL_BOUND_METHOD_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: be 00 00 00 00                movl    $0x0, %esi
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 f6                      movzwl  %si, %esi
    // 16: 89 f7                         movl    %esi, %edi
    // 18: f7 d7                         notl    %edi
    // 1a: 83 3c b9 00                   cmpl    $0x0, (%ecx,%edi,4)
    // 1e: 75 13                         jne     0x33 <__JIT_ENTRY+0x33>
    // 20: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
    // 25: 29 f7                         subl    %esi, %edi
    // 27: 8b 34 b9                      movl    (%ecx,%edi,4), %esi
    // 2a: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 0000002d:  IMAGE_REL_I386_DIR32 _PyMethod_Type
    // 31: 74 13                         je      0x46 <__JIT_ENTRY+0x46>
    // 33: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 37: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 3b: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3f: 5e                            popl    %esi
    // 40: 5f                            popl    %edi
    // 41: e9 00 00 00 00                jmp     0x46 <__JIT_ENTRY+0x46>
    // 00000042:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 46: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 4a: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 4e: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 52: 5e                            popl    %esi
    // 53: 5f                            popl    %edi
    // 54: e9 00 00 00 00                jmp     0x59 <__JIT_ENTRY+0x59>
    // 00000055:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[84] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0xbe, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6, 0x89, 0xf7,
        0xf7, 0xd7, 0x83, 0x3c, 0xb9, 0x00, 0x75, 0x13,
        0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x8b,
        0x34, 0xb9, 0x81, 0x7e, 0x04, 0x00, 0x00, 0x00,
        0x00, 0x74, 0x13, 0x89, 0x54, 0x24, 0x14, 0x89,
        0x4c, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e,
        0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54,
        0x24, 0x14, 0x89, 0x4c, 0x24, 0x10, 0x89, 0x44,
        0x24, 0x0c, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
    patch_32(code + 0x2d, (uintptr_t)&PyMethod_Type);
    patch_x86_64_32rx(code + 0x42, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_EG_MATCH(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_EG_MATCH.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 0c                      subl    $0xc, %esp
    // 7: 8b 4c 24 28                   movl    0x28(%esp), %ecx
    // b: 8b 7c 24 20                   movl    0x20(%esp), %edi
    // f: 8b 44 24 24                   movl    0x24(%esp), %eax
    // 13: 8b 70 f8                      movl    -0x8(%eax), %esi
    // 16: 8b 68 fc                      movl    -0x4(%eax), %ebp
    // 19: 89 47 20                      movl    %eax, 0x20(%edi)
    // 1c: 55                            pushl   %ebp
    // 1d: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 21: 51                            pushl   %ecx
    // 22: e8 00 00 00 00                calll   0x27 <__JIT_ENTRY+0x27>
    // 00000023:  IMAGE_REL_I386_REL32 __PyEval_CheckExceptStarTypeValid
    // 27: 83 c4 08                      addl    $0x8, %esp
    // 2a: 8b 5f 20                      movl    0x20(%edi), %ebx
    // 2d: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 34: 85 c0                         testl   %eax, %eax
    // 36: 0f 88 98 00 00 00             js      0xd4 <__JIT_ENTRY+0xd4>
    // 3c: c7 44 24 04 00 00 00 00       movl    $0x0, 0x4(%esp)
    // 44: c7 44 24 08 00 00 00 00       movl    $0x0, 0x8(%esp)
    // 4c: 89 5f 20                      movl    %ebx, 0x20(%edi)
    // 4f: 8d 44 24 08                   leal    0x8(%esp), %eax
    // 53: 8d 4c 24 04                   leal    0x4(%esp), %ecx
    // 57: 50                            pushl   %eax
    // 58: 51                            pushl   %ecx
    // 59: 55                            pushl   %ebp
    // 5a: 56                            pushl   %esi
    // 5b: 57                            pushl   %edi
    // 5c: e8 00 00 00 00                calll   0x61 <__JIT_ENTRY+0x61>
    // 0000005d:  IMAGE_REL_I386_REL32 __PyEval_ExceptionGroupMatch
    // 61: 83 c4 14                      addl    $0x14, %esp
    // 64: 8b 5f 20                      movl    0x20(%edi), %ebx
    // 67: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 6e: 8b 0e                         movl    (%esi), %ecx
    // 70: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 76: 7f 12                         jg      0x8a <__JIT_ENTRY+0x8a>
    // 78: 49                            decl    %ecx
    // 79: 89 0e                         movl    %ecx, (%esi)
    // 7b: 75 0d                         jne     0x8a <__JIT_ENTRY+0x8a>
    // 7d: 56                            pushl   %esi
    // 7e: 89 c6                         movl    %eax, %esi
    // 80: e8 00 00 00 00                calll   0x85 <__JIT_ENTRY+0x85>
    // 00000081:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 85: 89 f0                         movl    %esi, %eax
    // 87: 83 c4 04                      addl    $0x4, %esp
    // 8a: 8b 4d 00                      movl    (%ebp), %ecx
    // 8d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 93: 7f 06                         jg      0x9b <__JIT_ENTRY+0x9b>
    // 95: 49                            decl    %ecx
    // 96: 89 4d 00                      movl    %ecx, (%ebp)
    // 99: 74 6b                         je      0x106 <__JIT_ENTRY+0x106>
    // 9b: 85 c0                         testl   %eax, %eax
    // 9d: 78 78                         js      0x117 <__JIT_ENTRY+0x117>
    // 9f: 8b 44 24 04                   movl    0x4(%esp), %eax
    // a3: 85 c0                         testl   %eax, %eax
    // a5: 74 70                         je      0x117 <__JIT_ENTRY+0x117>
    // a7: 3d 00 00 00 00                cmpl    $0x0, %eax
    // 000000a8:  IMAGE_REL_I386_DIR32 __Py_NoneStruct
    // ac: 0f 84 83 00 00 00             je      0x135 <__JIT_ENTRY+0x135>
    // b2: 83 c3 f8                      addl    $-0x8, %ebx
    // b5: 89 5f 20                      movl    %ebx, 0x20(%edi)
    // b8: 50                            pushl   %eax
    // b9: e8 00 00 00 00                calll   0xbe <__JIT_ENTRY+0xbe>
    // 000000ba:  IMAGE_REL_I386_REL32 _PyErr_SetHandledException
    // be: 83 c4 04                      addl    $0x4, %esp
    // c1: 8b 5f 20                      movl    0x20(%edi), %ebx
    // c4: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // cb: 83 c3 08                      addl    $0x8, %ebx
    // ce: 8b 44 24 04                   movl    0x4(%esp), %eax
    // d2: eb 66                         jmp     0x13a <__JIT_ENTRY+0x13a>
    // d4: 8b 06                         movl    (%esi), %eax
    // d6: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // db: 7f 0e                         jg      0xeb <__JIT_ENTRY+0xeb>
    // dd: 48                            decl    %eax
    // de: 89 06                         movl    %eax, (%esi)
    // e0: 75 09                         jne     0xeb <__JIT_ENTRY+0xeb>
    // e2: 56                            pushl   %esi
    // e3: e8 00 00 00 00                calll   0xe8 <__JIT_ENTRY+0xe8>
    // 000000e4:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // e8: 83 c4 04                      addl    $0x4, %esp
    // eb: 8b 45 00                      movl    (%ebp), %eax
    // ee: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // f3: 7f 22                         jg      0x117 <__JIT_ENTRY+0x117>
    // f5: 48                            decl    %eax
    // f6: 89 45 00                      movl    %eax, (%ebp)
    // f9: 75 1c                         jne     0x117 <__JIT_ENTRY+0x117>
    // fb: 55                            pushl   %ebp
    // fc: e8 00 00 00 00                calll   0x101 <__JIT_ENTRY+0x101>
    // 000000fd:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 101: 83 c4 04                      addl    $0x4, %esp
    // 104: eb 11                         jmp     0x117 <__JIT_ENTRY+0x117>
    // 106: 55                            pushl   %ebp
    // 107: 89 c6                         movl    %eax, %esi
    // 109: e8 00 00 00 00                calll   0x10e <__JIT_ENTRY+0x10e>
    // 0000010a:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 10e: 89 f0                         movl    %esi, %eax
    // 110: 83 c4 04                      addl    $0x4, %esp
    // 113: 85 c0                         testl   %eax, %eax
    // 115: 79 88                         jns     0x9f <__JIT_ENTRY+0x9f>
    // 117: 83 c3 f8                      addl    $-0x8, %ebx
    // 11a: 8b 04 24                      movl    (%esp), %eax
    // 11d: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // 121: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // 125: 89 5c 24 24                   movl    %ebx, 0x24(%esp)
    // 129: 83 c4 0c                      addl    $0xc, %esp
    // 12c: 5e                            popl    %esi
    // 12d: 5f                            popl    %edi
    // 12e: 5b                            popl    %ebx
    // 12f: 5d                            popl    %ebp
    // 130: e9 00 00 00 00                jmp     0x135 <__JIT_ENTRY+0x135>
    // 00000131:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // 135: b8 00 00 00 00                movl    $0x0, %eax
    // 00000136:  IMAGE_REL_I386_DIR32 __Py_NoneStruct
    // 13a: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 13e: 89 4b f8                      movl    %ecx, -0x8(%ebx)
    // 141: 89 43 fc                      movl    %eax, -0x4(%ebx)
    // 144: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // 148: 89 5c 24 24                   movl    %ebx, 0x24(%esp)
    // 14c: 8b 04 24                      movl    (%esp), %eax
    // 14f: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // 153: 83 c4 0c                      addl    $0xc, %esp
    // 156: 5e                            popl    %esi
    // 157: 5f                            popl    %edi
    // 158: 5b                            popl    %ebx
    // 159: 5d                            popl    %ebp
    // 15a: e9 00 00 00 00                jmp     0x15f <__JIT_ENTRY+0x15f>
    // 0000015b:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[346] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x0c, 0x8b,
        0x4c, 0x24, 0x28, 0x8b, 0x7c, 0x24, 0x20, 0x8b,
        0x44, 0x24, 0x24, 0x8b, 0x70, 0xf8, 0x8b, 0x68,
        0xfc, 0x89, 0x47, 0x20, 0x55, 0x89, 0x4c, 0x24,
        0x04, 0x51, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x08, 0x8b, 0x5f, 0x20, 0xc7, 0x47, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88,
        0x98, 0x00, 0x00, 0x00, 0xc7, 0x44, 0x24, 0x04,
        0x00, 0x00, 0x00, 0x00, 0xc7, 0x44, 0x24, 0x08,
        0x00, 0x00, 0x00, 0x00, 0x89, 0x5f, 0x20, 0x8d,
        0x44, 0x24, 0x08, 0x8d, 0x4c, 0x24, 0x04, 0x50,
        0x51, 0x55, 0x56, 0x57, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x14, 0x8b, 0x5f, 0x20, 0xc7,
        0x47, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0e,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x12,
        0x49, 0x89, 0x0e, 0x75, 0x0d, 0x56, 0x89, 0xc6,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf0, 0x83,
        0xc4, 0x04, 0x8b, 0x4d, 0x00, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x06, 0x49, 0x89, 0x4d,
        0x00, 0x74, 0x6b, 0x85, 0xc0, 0x78, 0x78, 0x8b,
        0x44, 0x24, 0x04, 0x85, 0xc0, 0x74, 0x70, 0x3d,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0x84, 0x83, 0x00,
        0x00, 0x00, 0x83, 0xc3, 0xf8, 0x89, 0x5f, 0x20,
        0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x8b, 0x5f, 0x20, 0xc7, 0x47, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc3, 0x08, 0x8b, 0x44,
        0x24, 0x04, 0xeb, 0x66, 0x8b, 0x06, 0x3d, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x48, 0x89, 0x06,
        0x75, 0x09, 0x56, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0x8b, 0x45, 0x00, 0x3d, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x22, 0x48, 0x89, 0x45,
        0x00, 0x75, 0x1c, 0x55, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x04, 0xeb, 0x11, 0x55, 0x89,
        0xc6, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf0,
        0x83, 0xc4, 0x04, 0x85, 0xc0, 0x79, 0x88, 0x83,
        0xc3, 0xf8, 0x8b, 0x04, 0x24, 0x89, 0x44, 0x24,
        0x28, 0x89, 0x7c, 0x24, 0x20, 0x89, 0x5c, 0x24,
        0x24, 0x83, 0xc4, 0x0c, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x4c, 0x24, 0x08, 0x89, 0x4b,
        0xf8, 0x89, 0x43, 0xfc, 0x89, 0x7c, 0x24, 0x20,
        0x89, 0x5c, 0x24, 0x24, 0x8b, 0x04, 0x24, 0x89,
        0x44, 0x24, 0x28, 0x83, 0xc4, 0x0c, 0x5e, 0x5f,
        0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x23, (uintptr_t)&_PyEval_CheckExceptStarTypeValid + -0x4);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)&_PyEval_ExceptionGroupMatch + -0x4);
    patch_x86_64_32rx(code + 0x81, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0xa8, (uintptr_t)&_Py_NoneStruct);
    patch_x86_64_32rx(code + 0xba, (uintptr_t)&PyErr_SetHandledException + -0x4);
    patch_x86_64_32rx(code + 0xe4, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xfd, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x10a, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x131, state->instruction_starts[instruction->error_target] + -0x4);
    patch_32(code + 0x136, (uintptr_t)&_Py_NoneStruct);
}

void
emit__CHECK_EXC_MATCH(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_EXC_MATCH.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 4c 24 20                   movl    0x20(%esp), %ecx
    // 9: 8b 74 24 18                   movl    0x18(%esp), %esi
    // d: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 11: 8b 78 f8                      movl    -0x8(%eax), %edi
    // 14: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 17: 89 46 20                      movl    %eax, 0x20(%esi)
    // 1a: 53                            pushl   %ebx
    // 1b: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 1f: 51                            pushl   %ecx
    // 20: e8 00 00 00 00                calll   0x25 <__JIT_ENTRY+0x25>
    // 00000021:  IMAGE_REL_I386_REL32 __PyEval_CheckExceptTypeValid
    // 25: 83 c4 08                      addl    $0x8, %esp
    // 28: 8b 6e 20                      movl    0x20(%esi), %ebp
    // 2b: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 32: 85 c0                         testl   %eax, %eax
    // 34: 78 60                         js      0x96 <__JIT_ENTRY+0x96>
    // 36: 89 6e 20                      movl    %ebp, 0x20(%esi)
    // 39: 53                            pushl   %ebx
    // 3a: 57                            pushl   %edi
    // 3b: e8 00 00 00 00                calll   0x40 <__JIT_ENTRY+0x40>
    // 0000003c:  IMAGE_REL_I386_REL32 _PyErr_GivenExceptionMatches
    // 40: 83 c4 08                      addl    $0x8, %esp
    // 43: 8b 6e 20                      movl    0x20(%esi), %ebp
    // 46: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 4d: 8b 0b                         movl    (%ebx), %ecx
    // 4f: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 55: 7f 12                         jg      0x69 <__JIT_ENTRY+0x69>
    // 57: 49                            decl    %ecx
    // 58: 89 0b                         movl    %ecx, (%ebx)
    // 5a: 75 0d                         jne     0x69 <__JIT_ENTRY+0x69>
    // 5c: 53                            pushl   %ebx
    // 5d: 89 c7                         movl    %eax, %edi
    // 5f: e8 00 00 00 00                calll   0x64 <__JIT_ENTRY+0x64>
    // 00000060:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 64: 89 f8                         movl    %edi, %eax
    // 66: 83 c4 04                      addl    $0x4, %esp
    // 69: 85 c0                         testl   %eax, %eax
    // 6b: b8 00 00 00 00                movl    $0x0, %eax
    // 0000006c:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 70: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000071:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 75: 0f 44 c8                      cmovel  %eax, %ecx
    // 78: 89 4d fc                      movl    %ecx, -0x4(%ebp)
    // 7b: 8b 04 24                      movl    (%esp), %eax
    // 7e: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 82: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // 86: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 8a: 83 c4 04                      addl    $0x4, %esp
    // 8d: 5e                            popl    %esi
    // 8e: 5f                            popl    %edi
    // 8f: 5b                            popl    %ebx
    // 90: 5d                            popl    %ebp
    // 91: e9 00 00 00 00                jmp     0x96 <__JIT_ENTRY+0x96>
    // 00000092:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 96: 8b 03                         movl    (%ebx), %eax
    // 98: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 9d: 7f 0e                         jg      0xad <__JIT_ENTRY+0xad>
    // 9f: 48                            decl    %eax
    // a0: 89 03                         movl    %eax, (%ebx)
    // a2: 75 09                         jne     0xad <__JIT_ENTRY+0xad>
    // a4: 53                            pushl   %ebx
    // a5: e8 00 00 00 00                calll   0xaa <__JIT_ENTRY+0xaa>
    // 000000a6:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // aa: 83 c4 04                      addl    $0x4, %esp
    // ad: 83 c5 fc                      addl    $-0x4, %ebp
    // b0: 8b 04 24                      movl    (%esp), %eax
    // b3: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // b7: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // bb: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // bf: 83 c4 04                      addl    $0x4, %esp
    // c2: 5e                            popl    %esi
    // c3: 5f                            popl    %edi
    // c4: 5b                            popl    %ebx
    // c5: 5d                            popl    %ebp
    // c6: e9 00 00 00 00                jmp     0xcb <__JIT_ENTRY+0xcb>
    // 000000c7:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[203] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x4c, 0x24,
        0x20, 0x8b, 0x74, 0x24, 0x18, 0x8b, 0x44, 0x24,
        0x1c, 0x8b, 0x78, 0xf8, 0x8b, 0x58, 0xfc, 0x89,
        0x46, 0x20, 0x53, 0x89, 0x4c, 0x24, 0x04, 0x51,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x08,
        0x8b, 0x6e, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x78, 0x60, 0x89, 0x6e,
        0x20, 0x53, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x08, 0x8b, 0x6e, 0x20, 0xc7, 0x46,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0b, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x12, 0x49,
        0x89, 0x0b, 0x75, 0x0d, 0x53, 0x89, 0xc7, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xf8, 0x83, 0xc4,
        0x04, 0x85, 0xc0, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x44, 0xc8,
        0x89, 0x4d, 0xfc, 0x8b, 0x04, 0x24, 0x89, 0x44,
        0x24, 0x20, 0x89, 0x6c, 0x24, 0x1c, 0x89, 0x74,
        0x24, 0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03,
        0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x48,
        0x89, 0x03, 0x75, 0x09, 0x53, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0x83, 0xc5, 0xfc,
        0x8b, 0x04, 0x24, 0x89, 0x44, 0x24, 0x20, 0x89,
        0x74, 0x24, 0x18, 0x89, 0x6c, 0x24, 0x1c, 0x83,
        0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x21, (uintptr_t)&_PyEval_CheckExceptTypeValid + -0x4);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)&PyErr_GivenExceptionMatches + -0x4);
    patch_x86_64_32rx(code + 0x60, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x6c, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0x71, (uintptr_t)&_Py_TrueStruct);
    patch_x86_64_32rx(code + 0x92, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xa6, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xc7, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CHECK_FUNCTION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_FUNCTION.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 70 08                      movl    0x8(%eax), %esi
    // 10: 81 7e 48 00 00 00 00          cmpl    $0x0, 0x48(%esi)
    // 00000013:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 17: 75 12                         jne     0x2b <__JIT_ENTRY+0x2b>
    // 19: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 1d: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 21: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 25: 5e                            popl    %esi
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 00000027:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 2b: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2f: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 33: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 37: 5e                            popl    %esi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[61] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x70, 0x08,
        0x81, 0x7e, 0x48, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x12, 0x89, 0x54, 0x24, 0x10, 0x89, 0x4c, 0x24,
        0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x10, 0x89,
        0x4c, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x27, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x39, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_FUNCTION_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_FUNCTION_EXACT_ARGS.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 54 24 18                   movl    0x18(%esp), %edx
    // 7: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // b: 8b 44 24 10                   movl    0x10(%esp), %eax
    // f: be 00 00 00 00                movl    $0x0, %esi
    // 00000010:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 14: 0f b7 f6                      movzwl  %si, %esi
    // 17: 89 f7                         movl    %esi, %edi
    // 19: f7 d7                         notl    %edi
    // 1b: bb fe ff ff ff                movl    $0xfffffffe, %ebx       # imm = 0xFFFFFFFE
    // 20: 29 f3                         subl    %esi, %ebx
    // 22: 8b 1c 99                      movl    (%ecx,%ebx,4), %ebx
    // 25: 8b 5b 18                      movl    0x18(%ebx), %ebx
    // 28: 83 3c b9 01                   cmpl    $0x1, (%ecx,%edi,4)
    // 2c: 83 de ff                      sbbl    $-0x1, %esi
    // 2f: 39 73 1c                      cmpl    %esi, 0x1c(%ebx)
    // 32: 75 14                         jne     0x48 <__JIT_ENTRY+0x48>
    // 34: 89 54 24 18                   movl    %edx, 0x18(%esp)
    // 38: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 3c: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 40: 5e                            popl    %esi
    // 41: 5f                            popl    %edi
    // 42: 5b                            popl    %ebx
    // 43: e9 00 00 00 00                jmp     0x48 <__JIT_ENTRY+0x48>
    // 00000044:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 48: 89 54 24 18                   movl    %edx, 0x18(%esp)
    // 4c: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 50: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 54: 5e                            popl    %esi
    // 55: 5f                            popl    %edi
    // 56: 5b                            popl    %ebx
    // 57: e9 00 00 00 00                jmp     0x5c <__JIT_ENTRY+0x5c>
    // 00000058:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[92] = {
        0x53, 0x57, 0x56, 0x8b, 0x54, 0x24, 0x18, 0x8b,
        0x4c, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x10, 0xbe,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6, 0x89,
        0xf7, 0xf7, 0xd7, 0xbb, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xf3, 0x8b, 0x1c, 0x99, 0x8b, 0x5b, 0x18,
        0x83, 0x3c, 0xb9, 0x01, 0x83, 0xde, 0xff, 0x39,
        0x73, 0x1c, 0x75, 0x14, 0x89, 0x54, 0x24, 0x18,
        0x89, 0x4c, 0x24, 0x14, 0x89, 0x44, 0x24, 0x10,
        0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x54, 0x24, 0x18, 0x89, 0x4c, 0x24, 0x14,
        0x89, 0x44, 0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x10, instruction->oparg);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x58, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_FUNCTION_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_FUNCTION_VERSION.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: be 00 00 00 00                movl    $0x0, %esi
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 f6                      movzwl  %si, %esi
    // 16: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
    // 1b: 29 f7                         subl    %esi, %edi
    // 1d: 8b 34 b9                      movl    (%ecx,%edi,4), %esi
    // 20: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000023:  IMAGE_REL_I386_DIR32 _PyFunction_Type
    // 27: 75 1c                         jne     0x45 <__JIT_ENTRY+0x45>
    // 29: 81 7e 48 00 00 00 00          cmpl    $0x0, 0x48(%esi)
    // 0000002c:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 30: 75 13                         jne     0x45 <__JIT_ENTRY+0x45>
    // 32: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 36: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 3a: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3e: 5e                            popl    %esi
    // 3f: 5f                            popl    %edi
    // 40: e9 00 00 00 00                jmp     0x45 <__JIT_ENTRY+0x45>
    // 00000041:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 45: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 49: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 4d: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 51: 5e                            popl    %esi
    // 52: 5f                            popl    %edi
    // 53: e9 00 00 00 00                jmp     0x58 <__JIT_ENTRY+0x58>
    // 00000054:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[88] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0xbe, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6, 0xbf, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xf7, 0x8b, 0x34, 0xb9,
        0x81, 0x7e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x1c, 0x81, 0x7e, 0x48, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x13, 0x89, 0x54, 0x24, 0x14, 0x89, 0x4c,
        0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54, 0x24,
        0x14, 0x89, 0x4c, 0x24, 0x10, 0x89, 0x44, 0x24,
        0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
    patch_32(code + 0x23, (uintptr_t)&PyFunction_Type);
    patch_32(code + 0x2c, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x41, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x54, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_FUNCTION_VERSION_INLINE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_FUNCTION_VERSION_INLINE.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 8b 54 24 0c                   movl    0xc(%esp), %edx
    // 4: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 8: 8b 44 24 04                   movl    0x4(%esp), %eax
    // c: 81 3d 48 00 00 00 00 00 00 00 cmpl    $0x0, 0x48
    // 0000000e:  IMAGE_REL_I386_DIR32 __JIT_OPERAND1_LO
    // 00000012:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 16: 75 11                         jne     0x29 <__JIT_ENTRY+0x29>
    // 18: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 1c: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 20: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 24: e9 00 00 00 00                jmp     0x29 <__JIT_ENTRY+0x29>
    // 00000025:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 29: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 2d: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 31: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 35: e9 00 00 00 00                jmp     0x3a <__JIT_ENTRY+0x3a>
    // 00000036:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[58] = {
        0x8b, 0x54, 0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x08,
        0x8b, 0x44, 0x24, 0x04, 0x81, 0x3d, 0x48, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x11,
        0x89, 0x54, 0x24, 0x0c, 0x89, 0x4c, 0x24, 0x08,
        0x89, 0x44, 0x24, 0x04, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x54, 0x24, 0x0c, 0x89, 0x4c, 0x24,
        0x08, 0x89, 0x44, 0x24, 0x04, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xe, (instruction->operand1 & UINT32_MAX) + 0x48);
    patch_32(code + 0x12, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x25, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x36, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_FUNCTION_VERSION_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_FUNCTION_VERSION_KW.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: be 00 00 00 00                movl    $0x0, %esi
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 f6                      movzwl  %si, %esi
    // 16: bf fd ff ff ff                movl    $0xfffffffd, %edi       # imm = 0xFFFFFFFD
    // 1b: 29 f7                         subl    %esi, %edi
    // 1d: 8b 34 b9                      movl    (%ecx,%edi,4), %esi
    // 20: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000023:  IMAGE_REL_I386_DIR32 _PyFunction_Type
    // 27: 75 1c                         jne     0x45 <__JIT_ENTRY+0x45>
    // 29: 81 7e 48 00 00 00 00          cmpl    $0x0, 0x48(%esi)
    // 0000002c:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 30: 75 13                         jne     0x45 <__JIT_ENTRY+0x45>
    // 32: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 36: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 3a: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3e: 5e                            popl    %esi
    // 3f: 5f                            popl    %edi
    // 40: e9 00 00 00 00                jmp     0x45 <__JIT_ENTRY+0x45>
    // 00000041:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 45: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 49: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 4d: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 51: 5e                            popl    %esi
    // 52: 5f                            popl    %edi
    // 53: e9 00 00 00 00                jmp     0x58 <__JIT_ENTRY+0x58>
    // 00000054:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[88] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0xbe, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6, 0xbf, 0xfd,
        0xff, 0xff, 0xff, 0x29, 0xf7, 0x8b, 0x34, 0xb9,
        0x81, 0x7e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x1c, 0x81, 0x7e, 0x48, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x13, 0x89, 0x54, 0x24, 0x14, 0x89, 0x4c,
        0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54, 0x24,
        0x14, 0x89, 0x4c, 0x24, 0x10, 0x89, 0x44, 0x24,
        0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
    patch_32(code + 0x23, (uintptr_t)&PyFunction_Type);
    patch_32(code + 0x2c, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x41, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x54, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_IS_NOT_PY_CALLABLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_IS_NOT_PY_CALLABLE.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: be 00 00 00 00                movl    $0x0, %esi
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 f6                      movzwl  %si, %esi
    // 16: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
    // 1b: 29 f7                         subl    %esi, %edi
    // 1d: 8b 34 b9                      movl    (%ecx,%edi,4), %esi
    // 20: 8b 76 04                      movl    0x4(%esi), %esi
    // 23: 81 fe 00 00 00 00             cmpl    $0x0, %esi
    // 00000025:  IMAGE_REL_I386_DIR32 _PyFunction_Type
    // 29: 74 1b                         je      0x46 <__JIT_ENTRY+0x46>
    // 2b: 81 fe 00 00 00 00             cmpl    $0x0, %esi
    // 0000002d:  IMAGE_REL_I386_DIR32 _PyMethod_Type
    // 31: 74 13                         je      0x46 <__JIT_ENTRY+0x46>
    // 33: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 37: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 3b: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3f: 5e                            popl    %esi
    // 40: 5f                            popl    %edi
    // 41: e9 00 00 00 00                jmp     0x46 <__JIT_ENTRY+0x46>
    // 00000042:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 46: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 4a: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 4e: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 52: 5e                            popl    %esi
    // 53: 5f                            popl    %edi
    // 54: e9 00 00 00 00                jmp     0x59 <__JIT_ENTRY+0x59>
    // 00000055:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[89] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0xbe, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6, 0xbf, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xf7, 0x8b, 0x34, 0xb9,
        0x8b, 0x76, 0x04, 0x81, 0xfe, 0x00, 0x00, 0x00,
        0x00, 0x74, 0x1b, 0x81, 0xfe, 0x00, 0x00, 0x00,
        0x00, 0x74, 0x13, 0x89, 0x54, 0x24, 0x14, 0x89,
        0x4c, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e,
        0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54,
        0x24, 0x14, 0x89, 0x4c, 0x24, 0x10, 0x89, 0x44,
        0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
    patch_32(code + 0x25, (uintptr_t)&PyFunction_Type);
    patch_32(code + 0x2d, (uintptr_t)&PyMethod_Type);
    patch_x86_64_32rx(code + 0x42, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x55, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_IS_NOT_PY_CALLABLE_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_IS_NOT_PY_CALLABLE_KW.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: be 00 00 00 00                movl    $0x0, %esi
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 f6                      movzwl  %si, %esi
    // 16: bf fd ff ff ff                movl    $0xfffffffd, %edi       # imm = 0xFFFFFFFD
    // 1b: 29 f7                         subl    %esi, %edi
    // 1d: 8b 34 b9                      movl    (%ecx,%edi,4), %esi
    // 20: 8b 76 04                      movl    0x4(%esi), %esi
    // 23: 81 fe 00 00 00 00             cmpl    $0x0, %esi
    // 00000025:  IMAGE_REL_I386_DIR32 _PyFunction_Type
    // 29: 74 1b                         je      0x46 <__JIT_ENTRY+0x46>
    // 2b: 81 fe 00 00 00 00             cmpl    $0x0, %esi
    // 0000002d:  IMAGE_REL_I386_DIR32 _PyMethod_Type
    // 31: 74 13                         je      0x46 <__JIT_ENTRY+0x46>
    // 33: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 37: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 3b: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3f: 5e                            popl    %esi
    // 40: 5f                            popl    %edi
    // 41: e9 00 00 00 00                jmp     0x46 <__JIT_ENTRY+0x46>
    // 00000042:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 46: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 4a: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 4e: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 52: 5e                            popl    %esi
    // 53: 5f                            popl    %edi
    // 54: e9 00 00 00 00                jmp     0x59 <__JIT_ENTRY+0x59>
    // 00000055:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[89] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0xbe, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6, 0xbf, 0xfd,
        0xff, 0xff, 0xff, 0x29, 0xf7, 0x8b, 0x34, 0xb9,
        0x8b, 0x76, 0x04, 0x81, 0xfe, 0x00, 0x00, 0x00,
        0x00, 0x74, 0x1b, 0x81, 0xfe, 0x00, 0x00, 0x00,
        0x00, 0x74, 0x13, 0x89, 0x54, 0x24, 0x14, 0x89,
        0x4c, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e,
        0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54,
        0x24, 0x14, 0x89, 0x4c, 0x24, 0x10, 0x89, 0x44,
        0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
    patch_32(code + 0x25, (uintptr_t)&PyFunction_Type);
    patch_32(code + 0x2d, (uintptr_t)&PyMethod_Type);
    patch_x86_64_32rx(code + 0x42, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x55, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_MANAGED_OBJECT_HAS_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_MANAGED_OBJECT_HAS_VALUES.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 11: 8b 7e 04                      movl    0x4(%esi), %edi
    // 14: 8b 7f 10                      movl    0x10(%edi), %edi
    // 17: 80 7c 3e 03 00                cmpb    $0x0, 0x3(%esi,%edi)
    // 1c: 74 13                         je      0x31 <__JIT_ENTRY+0x31>
    // 1e: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 22: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 26: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 2a: 5e                            popl    %esi
    // 2b: 5f                            popl    %edi
    // 2c: e9 00 00 00 00                jmp     0x31 <__JIT_ENTRY+0x31>
    // 0000002d:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 31: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 35: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 39: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3d: 5e                            popl    %esi
    // 3e: 5f                            popl    %edi
    // 3f: e9 00 00 00 00                jmp     0x44 <__JIT_ENTRY+0x44>
    // 00000040:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[68] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x71,
        0xfc, 0x8b, 0x7e, 0x04, 0x8b, 0x7f, 0x10, 0x80,
        0x7c, 0x3e, 0x03, 0x00, 0x74, 0x13, 0x89, 0x54,
        0x24, 0x14, 0x89, 0x4c, 0x24, 0x10, 0x89, 0x44,
        0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x54, 0x24, 0x14, 0x89, 0x4c, 0x24,
        0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x40, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_METHOD_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_METHOD_VERSION.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: be 00 00 00 00                movl    $0x0, %esi
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 f6                      movzwl  %si, %esi
    // 16: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
    // 1b: 29 f7                         subl    %esi, %edi
    // 1d: 8b 3c b9                      movl    (%ecx,%edi,4), %edi
    // 20: 81 7f 04 00 00 00 00          cmpl    $0x0, 0x4(%edi)
    // 00000023:  IMAGE_REL_I386_DIR32 _PyMethod_Type
    // 27: 75 1d                         jne     0x46 <__JIT_ENTRY+0x46>
    // 29: 8b 7f 08                      movl    0x8(%edi), %edi
    // 2c: 81 7f 04 00 00 00 00          cmpl    $0x0, 0x4(%edi)
    // 0000002f:  IMAGE_REL_I386_DIR32 _PyFunction_Type
    // 33: 75 11                         jne     0x46 <__JIT_ENTRY+0x46>
    // 35: 81 7f 48 00 00 00 00          cmpl    $0x0, 0x48(%edi)
    // 00000038:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 3c: 75 08                         jne     0x46 <__JIT_ENTRY+0x46>
    // 3e: f7 d6                         notl    %esi
    // 40: 83 3c b1 00                   cmpl    $0x0, (%ecx,%esi,4)
    // 44: 74 13                         je      0x59 <__JIT_ENTRY+0x59>
    // 46: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 4a: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 4e: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 52: 5e                            popl    %esi
    // 53: 5f                            popl    %edi
    // 54: e9 00 00 00 00                jmp     0x59 <__JIT_ENTRY+0x59>
    // 00000055:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 59: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 5d: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 61: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 65: 5e                            popl    %esi
    // 66: 5f                            popl    %edi
    // 67: e9 00 00 00 00                jmp     0x6c <__JIT_ENTRY+0x6c>
    // 00000068:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[103] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0xbe, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6, 0xbf, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xf7, 0x8b, 0x3c, 0xb9,
        0x81, 0x7f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x1d, 0x8b, 0x7f, 0x08, 0x81, 0x7f, 0x04, 0x00,
        0x00, 0x00, 0x00, 0x75, 0x11, 0x81, 0x7f, 0x48,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x08, 0xf7, 0xd6,
        0x83, 0x3c, 0xb1, 0x00, 0x74, 0x13, 0x89, 0x54,
        0x24, 0x14, 0x89, 0x4c, 0x24, 0x10, 0x89, 0x44,
        0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x54, 0x24, 0x14, 0x89, 0x4c, 0x24,
        0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
    patch_32(code + 0x23, (uintptr_t)&PyMethod_Type);
    patch_32(code + 0x2f, (uintptr_t)&PyFunction_Type);
    patch_32(code + 0x38, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x55, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_METHOD_VERSION_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_METHOD_VERSION_KW.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: be 00 00 00 00                movl    $0x0, %esi
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 f6                      movzwl  %si, %esi
    // 16: bf fd ff ff ff                movl    $0xfffffffd, %edi       # imm = 0xFFFFFFFD
    // 1b: 29 f7                         subl    %esi, %edi
    // 1d: 8b 3c b9                      movl    (%ecx,%edi,4), %edi
    // 20: 81 7f 04 00 00 00 00          cmpl    $0x0, 0x4(%edi)
    // 00000023:  IMAGE_REL_I386_DIR32 _PyMethod_Type
    // 27: 75 22                         jne     0x4b <__JIT_ENTRY+0x4b>
    // 29: 8b 7f 08                      movl    0x8(%edi), %edi
    // 2c: 81 7f 04 00 00 00 00          cmpl    $0x0, 0x4(%edi)
    // 0000002f:  IMAGE_REL_I386_DIR32 _PyFunction_Type
    // 33: 75 16                         jne     0x4b <__JIT_ENTRY+0x4b>
    // 35: 81 7f 48 00 00 00 00          cmpl    $0x0, 0x48(%edi)
    // 00000038:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 3c: 75 0d                         jne     0x4b <__JIT_ENTRY+0x4b>
    // 3e: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
    // 43: 29 f7                         subl    %esi, %edi
    // 45: 83 3c b9 00                   cmpl    $0x0, (%ecx,%edi,4)
    // 49: 74 13                         je      0x5e <__JIT_ENTRY+0x5e>
    // 4b: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 4f: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 53: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 57: 5e                            popl    %esi
    // 58: 5f                            popl    %edi
    // 59: e9 00 00 00 00                jmp     0x5e <__JIT_ENTRY+0x5e>
    // 0000005a:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 5e: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 62: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 66: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 6a: 5e                            popl    %esi
    // 6b: 5f                            popl    %edi
    // 6c: e9 00 00 00 00                jmp     0x71 <__JIT_ENTRY+0x71>
    // 0000006d:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[108] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0xbe, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6, 0xbf, 0xfd,
        0xff, 0xff, 0xff, 0x29, 0xf7, 0x8b, 0x3c, 0xb9,
        0x81, 0x7f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x22, 0x8b, 0x7f, 0x08, 0x81, 0x7f, 0x04, 0x00,
        0x00, 0x00, 0x00, 0x75, 0x16, 0x81, 0x7f, 0x48,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x0d, 0xbf, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xf7, 0x83, 0x3c, 0xb9,
        0x00, 0x74, 0x13, 0x89, 0x54, 0x24, 0x14, 0x89,
        0x4c, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e,
        0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54,
        0x24, 0x14, 0x89, 0x4c, 0x24, 0x10, 0x89, 0x44,
        0x24, 0x0c, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
    patch_32(code + 0x23, (uintptr_t)&PyMethod_Type);
    patch_32(code + 0x2f, (uintptr_t)&PyFunction_Type);
    patch_32(code + 0x38, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x5a, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_PEP_523(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_PEP_523.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 72 08                      movl    0x8(%edx), %esi
    // 10: 83 be d8 10 00 00 00          cmpl    $0x0, 0x10d8(%esi)
    // 17: 74 12                         je      0x2b <__JIT_ENTRY+0x2b>
    // 19: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 1d: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 21: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 25: 5e                            popl    %esi
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 00000027:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 2b: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2f: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 33: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 37: 5e                            popl    %esi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x72, 0x08,
        0x83, 0xbe, 0xd8, 0x10, 0x00, 0x00, 0x00, 0x74,
        0x12, 0x89, 0x54, 0x24, 0x10, 0x89, 0x4c, 0x24,
        0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x10, 0x89,
        0x4c, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x27, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_PERIODIC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_PERIODIC.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // e: 8b 47 0c                      movl    0xc(%edi), %eax
    // 11: 84 c0                         testb   %al, %al
    // 13: 74 2d                         je      0x42 <__JIT_ENTRY+0x42>
    // 15: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 18: 57                            pushl   %edi
    // 19: e8 00 00 00 00                calll   0x1e <__JIT_ENTRY+0x1e>
    // 0000001a:  IMAGE_REL_I386_REL32 __Py_HandlePending
    // 1e: 83 c4 04                      addl    $0x4, %esp
    // 21: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 24: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 2b: 85 c0                         testl   %eax, %eax
    // 2d: 74 13                         je      0x42 <__JIT_ENTRY+0x42>
    // 2f: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 33: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 37: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 3b: 5e                            popl    %esi
    // 3c: 5f                            popl    %edi
    // 3d: e9 00 00 00 00                jmp     0x42 <__JIT_ENTRY+0x42>
    // 0000003e:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // 42: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 46: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 4a: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 4e: 5e                            popl    %esi
    // 4f: 5f                            popl    %edi
    // 50: e9 00 00 00 00                jmp     0x55 <__JIT_ENTRY+0x55>
    // 00000051:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[80] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x74, 0x24, 0x0c, 0x8b, 0x47,
        0x0c, 0x84, 0xc0, 0x74, 0x2d, 0x89, 0x4e, 0x20,
        0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x8b, 0x4e, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x13, 0x89,
        0x7c, 0x24, 0x14, 0x89, 0x4c, 0x24, 0x10, 0x89,
        0x74, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89, 0x4c,
        0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)&_Py_HandlePending + -0x4);
    patch_x86_64_32rx(code + 0x3e, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CHECK_PERIODIC_IF_NOT_YIELD_FROM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_PERIODIC_IF_NOT_YIELD_FROM.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // e: b8 00 00 00 00                movl    $0x0, %eax
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: a8 02                         testb   $0x2, %al
    // 15: 75 34                         jne     0x4b <__JIT_ENTRY+0x4b>
    // 17: 8b 47 0c                      movl    0xc(%edi), %eax
    // 1a: 84 c0                         testb   %al, %al
    // 1c: 74 2d                         je      0x4b <__JIT_ENTRY+0x4b>
    // 1e: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 21: 57                            pushl   %edi
    // 22: e8 00 00 00 00                calll   0x27 <__JIT_ENTRY+0x27>
    // 00000023:  IMAGE_REL_I386_REL32 __Py_HandlePending
    // 27: 83 c4 04                      addl    $0x4, %esp
    // 2a: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 2d: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 34: 85 c0                         testl   %eax, %eax
    // 36: 74 13                         je      0x4b <__JIT_ENTRY+0x4b>
    // 38: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 3c: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 40: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 44: 5e                            popl    %esi
    // 45: 5f                            popl    %edi
    // 46: e9 00 00 00 00                jmp     0x4b <__JIT_ENTRY+0x4b>
    // 00000047:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // 4b: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 4f: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 53: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 57: 5e                            popl    %esi
    // 58: 5f                            popl    %edi
    // 59: e9 00 00 00 00                jmp     0x5e <__JIT_ENTRY+0x5e>
    // 0000005a:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[89] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x74, 0x24, 0x0c, 0xb8, 0x00,
        0x00, 0x00, 0x00, 0xa8, 0x02, 0x75, 0x34, 0x8b,
        0x47, 0x0c, 0x84, 0xc0, 0x74, 0x2d, 0x89, 0x4e,
        0x20, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x8b, 0x4e, 0x20, 0xc7, 0x46, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x13,
        0x89, 0x7c, 0x24, 0x14, 0x89, 0x4c, 0x24, 0x10,
        0x89, 0x74, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x4c, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
    patch_x86_64_32rx(code + 0x23, (uintptr_t)&_Py_HandlePending + -0x4);
    patch_x86_64_32rx(code + 0x47, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CHECK_STACK_SPACE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_STACK_SPACE.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 54 24 18                   movl    0x18(%esp), %edx
    // 7: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // b: 8b 44 24 10                   movl    0x10(%esp), %eax
    // f: 8b b2 94 00 00 00             movl    0x94(%edx), %esi
    // 15: 85 f6                         testl   %esi, %esi
    // 17: 74 2b                         je      0x44 <__JIT_ENTRY+0x44>
    // 19: bf 00 00 00 00                movl    $0x0, %edi
    // 0000001a:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 1e: 0f b7 ff                      movzwl  %di, %edi
    // 21: bb fe ff ff ff                movl    $0xfffffffe, %ebx       # imm = 0xFFFFFFFE
    // 26: 29 fb                         subl    %edi, %ebx
    // 28: 8b 3c 99                      movl    (%ecx,%ebx,4), %edi
    // 2b: 8b 7f 18                      movl    0x18(%edi), %edi
    // 2e: 8b 9a 98 00 00 00             movl    0x98(%edx), %ebx
    // 34: 29 f3                         subl    %esi, %ebx
    // 36: c1 fb 02                      sarl    $0x2, %ebx
    // 39: 3b 5f 34                      cmpl    0x34(%edi), %ebx
    // 3c: 7e 06                         jle     0x44 <__JIT_ENTRY+0x44>
    // 3e: 83 7a 1c 01                   cmpl    $0x1, 0x1c(%edx)
    // 42: 7f 14                         jg      0x58 <__JIT_ENTRY+0x58>
    // 44: 89 54 24 18                   movl    %edx, 0x18(%esp)
    // 48: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 4c: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 50: 5e                            popl    %esi
    // 51: 5f                            popl    %edi
    // 52: 5b                            popl    %ebx
    // 53: e9 00 00 00 00                jmp     0x58 <__JIT_ENTRY+0x58>
    // 00000054:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 58: 89 54 24 18                   movl    %edx, 0x18(%esp)
    // 5c: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 60: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 64: 5e                            popl    %esi
    // 65: 5f                            popl    %edi
    // 66: 5b                            popl    %ebx
    // 67: e9 00 00 00 00                jmp     0x6c <__JIT_ENTRY+0x6c>
    // 00000068:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[103] = {
        0x53, 0x57, 0x56, 0x8b, 0x54, 0x24, 0x18, 0x8b,
        0x4c, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x10, 0x8b,
        0xb2, 0x94, 0x00, 0x00, 0x00, 0x85, 0xf6, 0x74,
        0x2b, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xff, 0xbb, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xfb,
        0x8b, 0x3c, 0x99, 0x8b, 0x7f, 0x18, 0x8b, 0x9a,
        0x98, 0x00, 0x00, 0x00, 0x29, 0xf3, 0xc1, 0xfb,
        0x02, 0x3b, 0x5f, 0x34, 0x7e, 0x06, 0x83, 0x7a,
        0x1c, 0x01, 0x7f, 0x14, 0x89, 0x54, 0x24, 0x18,
        0x89, 0x4c, 0x24, 0x14, 0x89, 0x44, 0x24, 0x10,
        0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x54, 0x24, 0x18, 0x89, 0x4c, 0x24, 0x14,
        0x89, 0x44, 0x24, 0x10, 0x5e, 0x5f, 0x5b,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x1a, instruction->oparg);
    patch_x86_64_32rx(code + 0x54, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_STACK_SPACE_OPERAND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_STACK_SPACE_OPERAND.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b b2 94 00 00 00             movl    0x94(%edx), %esi
    // 14: 85 f6                         testl   %esi, %esi
    // 16: 74 19                         je      0x31 <__JIT_ENTRY+0x31>
    // 18: 8b ba 98 00 00 00             movl    0x98(%edx), %edi
    // 1e: 29 f7                         subl    %esi, %edi
    // 20: c1 ff 02                      sarl    $0x2, %edi
    // 23: 81 ff 00 00 00 00             cmpl    $0x0, %edi
    // 00000025:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 29: 7e 06                         jle     0x31 <__JIT_ENTRY+0x31>
    // 2b: 83 7a 1c 01                   cmpl    $0x1, 0x1c(%edx)
    // 2f: 7f 13                         jg      0x44 <__JIT_ENTRY+0x44>
    // 31: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 35: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 39: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3d: 5e                            popl    %esi
    // 3e: 5f                            popl    %edi
    // 3f: e9 00 00 00 00                jmp     0x44 <__JIT_ENTRY+0x44>
    // 00000040:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 44: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 48: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 4c: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 50: 5e                            popl    %esi
    // 51: 5f                            popl    %edi
    // 52: e9 00 00 00 00                jmp     0x57 <__JIT_ENTRY+0x57>
    // 00000053:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[82] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0xb2,
        0x94, 0x00, 0x00, 0x00, 0x85, 0xf6, 0x74, 0x19,
        0x8b, 0xba, 0x98, 0x00, 0x00, 0x00, 0x29, 0xf7,
        0xc1, 0xff, 0x02, 0x81, 0xff, 0x00, 0x00, 0x00,
        0x00, 0x7e, 0x06, 0x83, 0x7a, 0x1c, 0x01, 0x7f,
        0x13, 0x89, 0x54, 0x24, 0x14, 0x89, 0x4c, 0x24,
        0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x14,
        0x89, 0x4c, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c,
        0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x25, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x40, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_VALIDITY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_VALIDITY.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 8b 54 24 0c                   movl    0xc(%esp), %edx
    // 4: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 8: 8b 44 24 04                   movl    0x4(%esp), %eax
    // c: f6 05 12 00 00 00 01          testb   $0x1, 0x12
    // 0000000e:  IMAGE_REL_I386_DIR32 __JIT_EXECUTOR
    // 13: 75 11                         jne     0x26 <__JIT_ENTRY+0x26>
    // 15: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 19: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 1d: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 21: e9 00 00 00 00                jmp     0x26 <__JIT_ENTRY+0x26>
    // 00000022:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 26: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 2a: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 2e: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 32: e9 00 00 00 00                jmp     0x37 <__JIT_ENTRY+0x37>
    // 00000033:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[50] = {
        0x8b, 0x54, 0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x08,
        0x8b, 0x44, 0x24, 0x04, 0xf6, 0x05, 0x12, 0x00,
        0x00, 0x00, 0x01, 0x75, 0x11, 0x89, 0x54, 0x24,
        0x0c, 0x89, 0x4c, 0x24, 0x08, 0x89, 0x44, 0x24,
        0x04, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54,
        0x24, 0x0c, 0x89, 0x4c, 0x24, 0x08, 0x89, 0x44,
        0x24, 0x04,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xe, (uintptr_t)executor + 0x12);
    patch_x86_64_32rx(code + 0x22, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_VALIDITY_AND_SET_IP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_VALIDITY_AND_SET_IP.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 8b 54 24 0c                   movl    0xc(%esp), %edx
    // 4: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 8: 8b 44 24 04                   movl    0x4(%esp), %eax
    // c: f6 05 12 00 00 00 01          testb   $0x1, 0x12
    // 0000000e:  IMAGE_REL_I386_DIR32 __JIT_EXECUTOR
    // 13: 75 11                         jne     0x26 <__JIT_ENTRY+0x26>
    // 15: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 19: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 1d: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 21: e9 00 00 00 00                jmp     0x26 <__JIT_ENTRY+0x26>
    // 00000022:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 26: c7 40 1c 00 00 00 00          movl    $0x0, 0x1c(%eax)
    // 00000029:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 2d: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 31: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 35: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 39: e9 00 00 00 00                jmp     0x3e <__JIT_ENTRY+0x3e>
    // 0000003a:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[57] = {
        0x8b, 0x54, 0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x08,
        0x8b, 0x44, 0x24, 0x04, 0xf6, 0x05, 0x12, 0x00,
        0x00, 0x00, 0x01, 0x75, 0x11, 0x89, 0x54, 0x24,
        0x0c, 0x89, 0x4c, 0x24, 0x08, 0x89, 0x44, 0x24,
        0x04, 0xe9, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x40,
        0x1c, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54, 0x24,
        0x0c, 0x89, 0x4c, 0x24, 0x08, 0x89, 0x44, 0x24,
        0x04,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xe, (uintptr_t)executor + 0x12);
    patch_x86_64_32rx(code + 0x22, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32(code + 0x29, (instruction->operand0 & UINT32_MAX));
}

void
emit__COMPARE_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COMPARE_OP.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 44 24 24                   movl    0x24(%esp), %eax
    // b: 89 04 24                      movl    %eax, (%esp)
    // e: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 12: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 16: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000017:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 1b: 0f b7 c9                      movzwl  %cx, %ecx
    // 1e: 8b 70 f8                      movl    -0x8(%eax), %esi
    // 21: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 24: 89 47 20                      movl    %eax, 0x20(%edi)
    // 27: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 2b: 89 c8                         movl    %ecx, %eax
    // 2d: c1 e8 05                      shrl    $0x5, %eax
    // 30: 50                            pushl   %eax
    // 31: 53                            pushl   %ebx
    // 32: 56                            pushl   %esi
    // 33: e8 00 00 00 00                calll   0x38 <__JIT_ENTRY+0x38>
    // 00000034:  IMAGE_REL_I386_REL32 _PyObject_RichCompare
    // 38: 83 c4 0c                      addl    $0xc, %esp
    // 3b: 8b 6f 20                      movl    0x20(%edi), %ebp
    // 3e: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 45: 8b 0e                         movl    (%esi), %ecx
    // 47: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 4d: 7f 05                         jg      0x54 <__JIT_ENTRY+0x54>
    // 4f: 49                            decl    %ecx
    // 50: 89 0e                         movl    %ecx, (%esi)
    // 52: 74 1e                         je      0x72 <__JIT_ENTRY+0x72>
    // 54: 8b 0b                         movl    (%ebx), %ecx
    // 56: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 5c: 7f 2b                         jg      0x89 <__JIT_ENTRY+0x89>
    // 5e: 49                            decl    %ecx
    // 5f: 89 0b                         movl    %ecx, (%ebx)
    // 61: 75 26                         jne     0x89 <__JIT_ENTRY+0x89>
    // 63: 53                            pushl   %ebx
    // 64: 89 c6                         movl    %eax, %esi
    // 66: e8 00 00 00 00                calll   0x6b <__JIT_ENTRY+0x6b>
    // 00000067:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 6b: 89 f0                         movl    %esi, %eax
    // 6d: 83 c4 04                      addl    $0x4, %esp
    // 70: eb 17                         jmp     0x89 <__JIT_ENTRY+0x89>
    // 72: 56                            pushl   %esi
    // 73: 89 c6                         movl    %eax, %esi
    // 75: e8 00 00 00 00                calll   0x7a <__JIT_ENTRY+0x7a>
    // 00000076:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 7a: 89 f0                         movl    %esi, %eax
    // 7c: 83 c4 04                      addl    $0x4, %esp
    // 7f: 8b 0b                         movl    (%ebx), %ecx
    // 81: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 87: 7e d5                         jle     0x5e <__JIT_ENTRY+0x5e>
    // 89: 85 c0                         testl   %eax, %eax
    // 8b: 74 0c                         je      0x99 <__JIT_ENTRY+0x99>
    // 8d: f6 44 24 04 10                testb   $0x10, 0x4(%esp)
    // 92: 75 1c                         jne     0xb0 <__JIT_ENTRY+0xb0>
    // 94: 83 c5 f8                      addl    $-0x8, %ebp
    // 97: eb 54                         jmp     0xed <__JIT_ENTRY+0xed>
    // 99: 83 c5 f8                      addl    $-0x8, %ebp
    // 9c: 8b 04 24                      movl    (%esp), %eax
    // 9f: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // a3: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // a7: 89 6c 24 20                   movl    %ebp, 0x20(%esp)
    // ab: e9 88 00 00 00                jmp     0x138 <__JIT_ENTRY+0x138>
    // b0: 83 c5 f8                      addl    $-0x8, %ebp
    // b3: 89 6f 20                      movl    %ebp, 0x20(%edi)
    // b6: 50                            pushl   %eax
    // b7: 89 c6                         movl    %eax, %esi
    // b9: e8 00 00 00 00                calll   0xbe <__JIT_ENTRY+0xbe>
    // 000000ba:  IMAGE_REL_I386_REL32 _PyObject_IsTrue
    // be: 83 c4 04                      addl    $0x4, %esp
    // c1: 8b 0e                         movl    (%esi), %ecx
    // c3: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // c9: 7f 07                         jg      0xd2 <__JIT_ENTRY+0xd2>
    // cb: 89 f2                         movl    %esi, %edx
    // cd: 49                            decl    %ecx
    // ce: 89 0e                         movl    %ecx, (%esi)
    // d0: 74 3c                         je      0x10e <__JIT_ENTRY+0x10e>
    // d2: 8b 6f 20                      movl    0x20(%edi), %ebp
    // d5: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // dc: 85 c0                         testl   %eax, %eax
    // de: 78 49                         js      0x129 <__JIT_ENTRY+0x129>
    // e0: b9 00 00 00 00                movl    $0x0, %ecx
    // 000000e1:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // e5: b8 00 00 00 00                movl    $0x0, %eax
    // 000000e6:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // ea: 0f 44 c1                      cmovel  %ecx, %eax
    // ed: 89 45 00                      movl    %eax, (%ebp)
    // f0: 83 c5 04                      addl    $0x4, %ebp
    // f3: 8b 04 24                      movl    (%esp), %eax
    // f6: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // fa: 89 6c 24 20                   movl    %ebp, 0x20(%esp)
    // fe: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 102: 83 c4 08                      addl    $0x8, %esp
    // 105: 5e                            popl    %esi
    // 106: 5f                            popl    %edi
    // 107: 5b                            popl    %ebx
    // 108: 5d                            popl    %ebp
    // 109: e9 00 00 00 00                jmp     0x10e <__JIT_ENTRY+0x10e>
    // 0000010a:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 10e: 52                            pushl   %edx
    // 10f: 89 c6                         movl    %eax, %esi
    // 111: e8 00 00 00 00                calll   0x116 <__JIT_ENTRY+0x116>
    // 00000112:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 116: 89 f0                         movl    %esi, %eax
    // 118: 83 c4 04                      addl    $0x4, %esp
    // 11b: 8b 6f 20                      movl    0x20(%edi), %ebp
    // 11e: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 125: 85 c0                         testl   %eax, %eax
    // 127: 79 b7                         jns     0xe0 <__JIT_ENTRY+0xe0>
    // 129: 8b 04 24                      movl    (%esp), %eax
    // 12c: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // 130: 89 6c 24 20                   movl    %ebp, 0x20(%esp)
    // 134: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 138: 83 c4 08                      addl    $0x8, %esp
    // 13b: 5e                            popl    %esi
    // 13c: 5f                            popl    %edi
    // 13d: 5b                            popl    %ebx
    // 13e: 5d                            popl    %ebp
    // 13f: e9 00 00 00 00                jmp     0x144 <__JIT_ENTRY+0x144>
    // 00000140:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[324] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x44, 0x24, 0x24, 0x89, 0x04, 0x24, 0x8b, 0x7c,
        0x24, 0x1c, 0x8b, 0x44, 0x24, 0x20, 0xb9, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x8b, 0x70,
        0xf8, 0x8b, 0x58, 0xfc, 0x89, 0x47, 0x20, 0x89,
        0x4c, 0x24, 0x04, 0x89, 0xc8, 0xc1, 0xe8, 0x05,
        0x50, 0x53, 0x56, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x0c, 0x8b, 0x6f, 0x20, 0xc7, 0x47,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0e, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x05, 0x49,
        0x89, 0x0e, 0x74, 0x1e, 0x8b, 0x0b, 0x81, 0xf9,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x2b, 0x49, 0x89,
        0x0b, 0x75, 0x26, 0x53, 0x89, 0xc6, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xf0, 0x83, 0xc4, 0x04,
        0xeb, 0x17, 0x56, 0x89, 0xc6, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xf0, 0x83, 0xc4, 0x04, 0x8b,
        0x0b, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7e,
        0xd5, 0x85, 0xc0, 0x74, 0x0c, 0xf6, 0x44, 0x24,
        0x04, 0x10, 0x75, 0x1c, 0x83, 0xc5, 0xf8, 0xeb,
        0x54, 0x83, 0xc5, 0xf8, 0x8b, 0x04, 0x24, 0x89,
        0x44, 0x24, 0x24, 0x89, 0x7c, 0x24, 0x1c, 0x89,
        0x6c, 0x24, 0x20, 0xe9, 0x88, 0x00, 0x00, 0x00,
        0x83, 0xc5, 0xf8, 0x89, 0x6f, 0x20, 0x50, 0x89,
        0xc6, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x8b, 0x0e, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x07, 0x89, 0xf2, 0x49, 0x89, 0x0e,
        0x74, 0x3c, 0x8b, 0x6f, 0x20, 0xc7, 0x47, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x49,
        0xb9, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0x44, 0xc1, 0x89, 0x45, 0x00,
        0x83, 0xc5, 0x04, 0x8b, 0x04, 0x24, 0x89, 0x44,
        0x24, 0x24, 0x89, 0x6c, 0x24, 0x20, 0x89, 0x7c,
        0x24, 0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x52, 0x89,
        0xc6, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf0,
        0x83, 0xc4, 0x04, 0x8b, 0x6f, 0x20, 0xc7, 0x47,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79,
        0xb7, 0x8b, 0x04, 0x24, 0x89, 0x44, 0x24, 0x24,
        0x89, 0x6c, 0x24, 0x20, 0x89, 0x7c, 0x24, 0x1c,
        0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x17, instruction->oparg);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)&PyObject_RichCompare + -0x4);
    patch_x86_64_32rx(code + 0x67, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x76, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xba, (uintptr_t)&PyObject_IsTrue + -0x4);
    patch_32(code + 0xe1, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0xe6, (uintptr_t)&_Py_TrueStruct);
    patch_x86_64_32rx(code + 0x10a, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x112, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x140, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__COMPARE_OP_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COMPARE_OP_FLOAT.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 14                      subl    $0x14, %esp
    // 7: 8b 7c 24 30                   movl    0x30(%esp), %edi
    // b: 8b 5c 24 2c                   movl    0x2c(%esp), %ebx
    // f: 8b 54 24 28                   movl    0x28(%esp), %edx
    // 13: 8b 73 f8                      movl    -0x8(%ebx), %esi
    // 16: 8b 6b fc                      movl    -0x4(%ebx), %ebp
    // 19: f2 0f 10 46 08                movsd   0x8(%esi), %xmm0
    // 1e: f2 0f 10 4d 08                movsd   0x8(%ebp), %xmm1
    // 23: 8b 06                         movl    (%esi), %eax
    // 25: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 2a: 7f 05                         jg      0x31 <__JIT_ENTRY+0x31>
    // 2c: 48                            decl    %eax
    // 2d: 89 06                         movl    %eax, (%esi)
    // 2f: 74 5b                         je      0x8c <__JIT_ENTRY+0x8c>
    // 31: 8d 73 fc                      leal    -0x4(%ebx), %esi
    // 34: 8b 45 00                      movl    (%ebp), %eax
    // 37: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 3c: 0f 8f 99 00 00 00             jg      0xdb <__JIT_ENTRY+0xdb>
    // 42: 48                            decl    %eax
    // 43: 89 45 00                      movl    %eax, (%ebp)
    // 46: 0f 85 8f 00 00 00             jne     0xdb <__JIT_ENTRY+0xdb>
    // 4c: f2 0f 11 4c 24 04             movsd   %xmm1, 0x4(%esp)
    // 52: f2 0f 11 44 24 0c             movsd   %xmm0, 0xc(%esp)
    // 58: 89 14 24                      movl    %edx, (%esp)
    // 5b: a1 50 14 00 00                movl    0x1450, %eax
    // 0000005c:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 60: 85 c0                         testl   %eax, %eax
    // 62: 74 0e                         je      0x72 <__JIT_ENTRY+0x72>
    // 64: ff 35 54 14 00 00             pushl   0x1454
    // 00000066:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 6a: 6a 01                         pushl   $0x1
    // 6c: 55                            pushl   %ebp
    // 6d: ff d0                         calll   *%eax
    // 6f: 83 c4 0c                      addl    $0xc, %esp
    // 72: 55                            pushl   %ebp
    // 73: e8 00 00 00 00                calll   0x78 <__JIT_ENTRY+0x78>
    // 00000074:  IMAGE_REL_I386_REL32 __PyFloat_ExactDealloc
    // 78: 83 c4 04                      addl    $0x4, %esp
    // 7b: 8b 14 24                      movl    (%esp), %edx
    // 7e: f2 0f 10 44 24 0c             movsd   0xc(%esp), %xmm0
    // 84: f2 0f 10 4c 24 04             movsd   0x4(%esp), %xmm1
    // 8a: eb 4f                         jmp     0xdb <__JIT_ENTRY+0xdb>
    // 8c: f2 0f 11 4c 24 04             movsd   %xmm1, 0x4(%esp)
    // 92: f2 0f 11 44 24 0c             movsd   %xmm0, 0xc(%esp)
    // 98: 89 14 24                      movl    %edx, (%esp)
    // 9b: a1 50 14 00 00                movl    0x1450, %eax
    // 0000009c:  IMAGE_REL_I386_DIR32 __PyRuntime
    // a0: 85 c0                         testl   %eax, %eax
    // a2: 74 0e                         je      0xb2 <__JIT_ENTRY+0xb2>
    // a4: ff 35 54 14 00 00             pushl   0x1454
    // 000000a6:  IMAGE_REL_I386_DIR32 __PyRuntime
    // aa: 6a 01                         pushl   $0x1
    // ac: 56                            pushl   %esi
    // ad: ff d0                         calll   *%eax
    // af: 83 c4 0c                      addl    $0xc, %esp
    // b2: 56                            pushl   %esi
    // b3: e8 00 00 00 00                calll   0xb8 <__JIT_ENTRY+0xb8>
    // 000000b4:  IMAGE_REL_I386_REL32 __PyFloat_ExactDealloc
    // b8: 83 c4 04                      addl    $0x4, %esp
    // bb: 8b 14 24                      movl    (%esp), %edx
    // be: f2 0f 10 44 24 0c             movsd   0xc(%esp), %xmm0
    // c4: f2 0f 10 4c 24 04             movsd   0x4(%esp), %xmm1
    // ca: 8d 73 fc                      leal    -0x4(%ebx), %esi
    // cd: 8b 45 00                      movl    (%ebp), %eax
    // d0: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // d5: 0f 8e 67 ff ff ff             jle     0x42 <__JIT_ENTRY+0x42>
    // db: 31 c0                         xorl    %eax, %eax
    // dd: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
    // e1: 0f 93 c0                      setae   %al
    // e4: 01 c0                         addl    %eax, %eax
    // e6: 31 c9                         xorl    %ecx, %ecx
    // e8: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
    // ec: 0f 93 c1                      setae   %cl
    // ef: 09 c1                         orl     %eax, %ecx
    // f1: b8 00 00 00 00                movl    $0x0, %eax
    // 000000f2:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // f6: 0f a3 c8                      btl     %ecx, %eax
    // f9: b8 00 00 00 00                movl    $0x0, %eax
    // 000000fa:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // fe: b9 00 00 00 00                movl    $0x0, %ecx
    // 000000ff:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 103: 0f 43 c8                      cmovael %eax, %ecx
    // 106: 89 4b f8                      movl    %ecx, -0x8(%ebx)
    // 109: 89 7c 24 30                   movl    %edi, 0x30(%esp)
    // 10d: 89 74 24 2c                   movl    %esi, 0x2c(%esp)
    // 111: 89 54 24 28                   movl    %edx, 0x28(%esp)
    // 115: 83 c4 14                      addl    $0x14, %esp
    // 118: 5e                            popl    %esi
    // 119: 5f                            popl    %edi
    // 11a: 5b                            popl    %ebx
    // 11b: 5d                            popl    %ebp
    // 11c: e9 00 00 00 00                jmp     0x121 <__JIT_ENTRY+0x121>
    // 0000011d:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[284] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x14, 0x8b,
        0x7c, 0x24, 0x30, 0x8b, 0x5c, 0x24, 0x2c, 0x8b,
        0x54, 0x24, 0x28, 0x8b, 0x73, 0xf8, 0x8b, 0x6b,
        0xfc, 0xf2, 0x0f, 0x10, 0x46, 0x08, 0xf2, 0x0f,
        0x10, 0x4d, 0x08, 0x8b, 0x06, 0x3d, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x05, 0x48, 0x89, 0x06, 0x74,
        0x5b, 0x8d, 0x73, 0xfc, 0x8b, 0x45, 0x00, 0x3d,
        0xff, 0xff, 0xff, 0x3f, 0x0f, 0x8f, 0x99, 0x00,
        0x00, 0x00, 0x48, 0x89, 0x45, 0x00, 0x0f, 0x85,
        0x8f, 0x00, 0x00, 0x00, 0xf2, 0x0f, 0x11, 0x4c,
        0x24, 0x04, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x0c,
        0x89, 0x14, 0x24, 0xa1, 0x50, 0x14, 0x00, 0x00,
        0x85, 0xc0, 0x74, 0x0e, 0xff, 0x35, 0x54, 0x14,
        0x00, 0x00, 0x6a, 0x01, 0x55, 0xff, 0xd0, 0x83,
        0xc4, 0x0c, 0x55, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0x8b, 0x14, 0x24, 0xf2, 0x0f,
        0x10, 0x44, 0x24, 0x0c, 0xf2, 0x0f, 0x10, 0x4c,
        0x24, 0x04, 0xeb, 0x4f, 0xf2, 0x0f, 0x11, 0x4c,
        0x24, 0x04, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x0c,
        0x89, 0x14, 0x24, 0xa1, 0x50, 0x14, 0x00, 0x00,
        0x85, 0xc0, 0x74, 0x0e, 0xff, 0x35, 0x54, 0x14,
        0x00, 0x00, 0x6a, 0x01, 0x56, 0xff, 0xd0, 0x83,
        0xc4, 0x0c, 0x56, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0x8b, 0x14, 0x24, 0xf2, 0x0f,
        0x10, 0x44, 0x24, 0x0c, 0xf2, 0x0f, 0x10, 0x4c,
        0x24, 0x04, 0x8d, 0x73, 0xfc, 0x8b, 0x45, 0x00,
        0x3d, 0xff, 0xff, 0xff, 0x3f, 0x0f, 0x8e, 0x67,
        0xff, 0xff, 0xff, 0x31, 0xc0, 0x66, 0x0f, 0x2e,
        0xc1, 0x0f, 0x93, 0xc0, 0x01, 0xc0, 0x31, 0xc9,
        0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc1, 0x09,
        0xc1, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3,
        0xc8, 0xb8, 0x00, 0x00, 0x00, 0x00, 0xb9, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0x43, 0xc8, 0x89, 0x4b,
        0xf8, 0x89, 0x7c, 0x24, 0x30, 0x89, 0x74, 0x24,
        0x2c, 0x89, 0x54, 0x24, 0x28, 0x83, 0xc4, 0x14,
        0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x5c, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x66, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x74, (uintptr_t)&_PyFloat_ExactDealloc + -0x4);
    patch_32(code + 0x9c, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0xa6, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0xb4, (uintptr_t)&_PyFloat_ExactDealloc + -0x4);
    patch_32(code + 0xf2, instruction->oparg);
    patch_32(code + 0xfa, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0xff, (uintptr_t)&_Py_TrueStruct);
}

void
emit__COMPARE_OP_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COMPARE_OP_INT.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 18                      subl    $0x18, %esp
    // 7: 8b 44 24 34                   movl    0x34(%esp), %eax
    // b: 8b 7c 24 30                   movl    0x30(%esp), %edi
    // f: 8b 54 24 2c                   movl    0x2c(%esp), %edx
    // 13: 8b 6f f8                      movl    -0x8(%edi), %ebp
    // 16: 8b 75 08                      movl    0x8(%ebp), %esi
    // 19: 83 fe 10                      cmpl    $0x10, %esi
    // 1c: 73 0b                         jae     0x29 <__JIT_ENTRY+0x29>
    // 1e: 8b 5f fc                      movl    -0x4(%edi), %ebx
    // 21: 8b 4b 08                      movl    0x8(%ebx), %ecx
    // 24: 83 f9 10                      cmpl    $0x10, %ecx
    // 27: 72 18                         jb      0x41 <__JIT_ENTRY+0x41>
    // 29: 89 44 24 34                   movl    %eax, 0x34(%esp)
    // 2d: 89 7c 24 30                   movl    %edi, 0x30(%esp)
    // 31: 89 54 24 2c                   movl    %edx, 0x2c(%esp)
    // 35: 83 c4 18                      addl    $0x18, %esp
    // 38: 5e                            popl    %esi
    // 39: 5f                            popl    %edi
    // 3a: 5b                            popl    %ebx
    // 3b: 5d                            popl    %ebp
    // 3c: e9 00 00 00 00                jmp     0x41 <__JIT_ENTRY+0x41>
    // 0000003d:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 41: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 45: 8b 45 00                      movl    (%ebp), %eax
    // 48: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 4c: 89 da                         movl    %ebx, %edx
    // 4e: 8b 5d 0c                      movl    0xc(%ebp), %ebx
    // 51: 89 5c 24 0c                   movl    %ebx, 0xc(%esp)
    // 55: 89 54 24 08                   movl    %edx, 0x8(%esp)
    // 59: 8b 5a 0c                      movl    0xc(%edx), %ebx
    // 5c: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 61: 7f 2c                         jg      0x8f <__JIT_ENTRY+0x8f>
    // 63: 48                            decl    %eax
    // 64: 89 45 00                      movl    %eax, (%ebp)
    // 67: 75 26                         jne     0x8f <__JIT_ENTRY+0x8f>
    // 69: 89 0c 24                      movl    %ecx, (%esp)
    // 6c: a1 50 14 00 00                movl    0x1450, %eax
    // 0000006d:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 71: 85 c0                         testl   %eax, %eax
    // 73: 74 0e                         je      0x83 <__JIT_ENTRY+0x83>
    // 75: ff 35 54 14 00 00             pushl   0x1454
    // 00000077:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 7b: 6a 01                         pushl   $0x1
    // 7d: 55                            pushl   %ebp
    // 7e: ff d0                         calll   *%eax
    // 80: 83 c4 0c                      addl    $0xc, %esp
    // 83: 55                            pushl   %ebp
    // 84: e8 00 00 00 00                calll   0x89 <__JIT_ENTRY+0x89>
    // 00000085:  IMAGE_REL_I386_REL32 __PyLong_ExactDealloc
    // 89: 83 c4 04                      addl    $0x4, %esp
    // 8c: 8b 0c 24                      movl    (%esp), %ecx
    // 8f: 8d 57 fc                      leal    -0x4(%edi), %edx
    // 92: 8b 6c 24 08                   movl    0x8(%esp), %ebp
    // 96: 8b 45 00                      movl    (%ebp), %eax
    // 99: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 9e: 7f 34                         jg      0xd4 <__JIT_ENTRY+0xd4>
    // a0: 48                            decl    %eax
    // a1: 89 45 00                      movl    %eax, (%ebp)
    // a4: 75 2e                         jne     0xd4 <__JIT_ENTRY+0xd4>
    // a6: 89 54 24 04                   movl    %edx, 0x4(%esp)
    // aa: 89 0c 24                      movl    %ecx, (%esp)
    // ad: a1 50 14 00 00                movl    0x1450, %eax
    // 000000ae:  IMAGE_REL_I386_DIR32 __PyRuntime
    // b2: 85 c0                         testl   %eax, %eax
    // b4: 74 0e                         je      0xc4 <__JIT_ENTRY+0xc4>
    // b6: ff 35 54 14 00 00             pushl   0x1454
    // 000000b8:  IMAGE_REL_I386_DIR32 __PyRuntime
    // bc: 6a 01                         pushl   $0x1
    // be: 55                            pushl   %ebp
    // bf: ff d0                         calll   *%eax
    // c1: 83 c4 0c                      addl    $0xc, %esp
    // c4: 55                            pushl   %ebp
    // c5: e8 00 00 00 00                calll   0xca <__JIT_ENTRY+0xca>
    // 000000c6:  IMAGE_REL_I386_REL32 __PyLong_ExactDealloc
    // ca: 83 c4 04                      addl    $0x4, %esp
    // cd: 8b 0c 24                      movl    (%esp), %ecx
    // d0: 8b 54 24 04                   movl    0x4(%esp), %edx
    // d4: 83 e6 03                      andl    $0x3, %esi
    // d7: b8 01 00 00 00                movl    $0x1, %eax
    // dc: 29 f0                         subl    %esi, %eax
    // de: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // e2: 0f af f0                      imull   %eax, %esi
    // e5: 83 e1 03                      andl    $0x3, %ecx
    // e8: b8 01 00 00 00                movl    $0x1, %eax
    // ed: 29 c8                         subl    %ecx, %eax
    // ef: 0f af d8                      imull   %eax, %ebx
    // f2: 31 c9                         xorl    %ecx, %ecx
    // f4: 31 c0                         xorl    %eax, %eax
    // f6: 39 de                         cmpl    %ebx, %esi
    // f8: 0f 9d c1                      setge   %cl
    // fb: 0f 9e c0                      setle   %al
    // fe: 01 c9                         addl    %ecx, %ecx
    // 100: 09 c8                         orl     %ecx, %eax
    // 102: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000103:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 107: 0f a3 c1                      btl     %eax, %ecx
    // 10a: b8 00 00 00 00                movl    $0x0, %eax
    // 0000010b:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 10f: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000110:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 114: 0f 43 c8                      cmovael %eax, %ecx
    // 117: 89 4f f8                      movl    %ecx, -0x8(%edi)
    // 11a: 8b 44 24 10                   movl    0x10(%esp), %eax
    // 11e: 89 44 24 34                   movl    %eax, 0x34(%esp)
    // 122: 89 54 24 30                   movl    %edx, 0x30(%esp)
    // 126: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 12a: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 12e: 83 c4 18                      addl    $0x18, %esp
    // 131: 5e                            popl    %esi
    // 132: 5f                            popl    %edi
    // 133: 5b                            popl    %ebx
    // 134: 5d                            popl    %ebp
    // 135: e9 00 00 00 00                jmp     0x13a <__JIT_ENTRY+0x13a>
    // 00000136:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[309] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x18, 0x8b,
        0x44, 0x24, 0x34, 0x8b, 0x7c, 0x24, 0x30, 0x8b,
        0x54, 0x24, 0x2c, 0x8b, 0x6f, 0xf8, 0x8b, 0x75,
        0x08, 0x83, 0xfe, 0x10, 0x73, 0x0b, 0x8b, 0x5f,
        0xfc, 0x8b, 0x4b, 0x08, 0x83, 0xf9, 0x10, 0x72,
        0x18, 0x89, 0x44, 0x24, 0x34, 0x89, 0x7c, 0x24,
        0x30, 0x89, 0x54, 0x24, 0x2c, 0x83, 0xc4, 0x18,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x44, 0x24, 0x10, 0x8b, 0x45, 0x00,
        0x89, 0x54, 0x24, 0x14, 0x89, 0xda, 0x8b, 0x5d,
        0x0c, 0x89, 0x5c, 0x24, 0x0c, 0x89, 0x54, 0x24,
        0x08, 0x8b, 0x5a, 0x0c, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x2c, 0x48, 0x89, 0x45, 0x00, 0x75,
        0x26, 0x89, 0x0c, 0x24, 0xa1, 0x50, 0x14, 0x00,
        0x00, 0x85, 0xc0, 0x74, 0x0e, 0xff, 0x35, 0x54,
        0x14, 0x00, 0x00, 0x6a, 0x01, 0x55, 0xff, 0xd0,
        0x83, 0xc4, 0x0c, 0x55, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x04, 0x8b, 0x0c, 0x24, 0x8d,
        0x57, 0xfc, 0x8b, 0x6c, 0x24, 0x08, 0x8b, 0x45,
        0x00, 0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x34,
        0x48, 0x89, 0x45, 0x00, 0x75, 0x2e, 0x89, 0x54,
        0x24, 0x04, 0x89, 0x0c, 0x24, 0xa1, 0x50, 0x14,
        0x00, 0x00, 0x85, 0xc0, 0x74, 0x0e, 0xff, 0x35,
        0x54, 0x14, 0x00, 0x00, 0x6a, 0x01, 0x55, 0xff,
        0xd0, 0x83, 0xc4, 0x0c, 0x55, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b, 0x0c, 0x24,
        0x8b, 0x54, 0x24, 0x04, 0x83, 0xe6, 0x03, 0xb8,
        0x01, 0x00, 0x00, 0x00, 0x29, 0xf0, 0x8b, 0x74,
        0x24, 0x0c, 0x0f, 0xaf, 0xf0, 0x83, 0xe1, 0x03,
        0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x0f,
        0xaf, 0xd8, 0x31, 0xc9, 0x31, 0xc0, 0x39, 0xde,
        0x0f, 0x9d, 0xc1, 0x0f, 0x9e, 0xc0, 0x01, 0xc9,
        0x09, 0xc8, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0xa3, 0xc1, 0xb8, 0x00, 0x00, 0x00, 0x00, 0xb9,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xc8, 0x89,
        0x4f, 0xf8, 0x8b, 0x44, 0x24, 0x10, 0x89, 0x44,
        0x24, 0x34, 0x89, 0x54, 0x24, 0x30, 0x8b, 0x44,
        0x24, 0x14, 0x89, 0x44, 0x24, 0x2c, 0x83, 0xc4,
        0x18, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3d, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32(code + 0x6d, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x77, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x85, (uintptr_t)&_PyLong_ExactDealloc + -0x4);
    patch_32(code + 0xae, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0xb8, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0xc6, (uintptr_t)&_PyLong_ExactDealloc + -0x4);
    patch_32(code + 0x103, instruction->oparg);
    patch_32(code + 0x10b, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0x110, (uintptr_t)&_Py_TrueStruct);
}

void
emit__COMPARE_OP_STR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COMPARE_OP_STR.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 44 24 24                   movl    0x24(%esp), %eax
    // b: 89 04 24                      movl    %eax, (%esp)
    // e: 8b 6c 24 20                   movl    0x20(%esp), %ebp
    // 12: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 16: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 1a: 8b 5d f8                      movl    -0x8(%ebp), %ebx
    // 1d: 8b 7d fc                      movl    -0x4(%ebp), %edi
    // 20: 57                            pushl   %edi
    // 21: 53                            pushl   %ebx
    // 22: e8 00 00 00 00                calll   0x27 <__JIT_ENTRY+0x27>
    // 00000023:  IMAGE_REL_I386_REL32 __PyUnicode_Equal
    // 27: 83 c4 08                      addl    $0x8, %esp
    // 2a: 89 c6                         movl    %eax, %esi
    // 2c: 8b 03                         movl    (%ebx), %eax
    // 2e: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 33: 7f 05                         jg      0x3a <__JIT_ENTRY+0x3a>
    // 35: 48                            decl    %eax
    // 36: 89 03                         movl    %eax, (%ebx)
    // 38: 74 33                         je      0x6d <__JIT_ENTRY+0x6d>
    // 3a: 8d 5d fc                      leal    -0x4(%ebp), %ebx
    // 3d: 8b 07                         movl    (%edi), %eax
    // 3f: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 44: 7f 53                         jg      0x99 <__JIT_ENTRY+0x99>
    // 46: 48                            decl    %eax
    // 47: 89 07                         movl    %eax, (%edi)
    // 49: 75 4e                         jne     0x99 <__JIT_ENTRY+0x99>
    // 4b: a1 50 14 00 00                movl    0x1450, %eax
    // 0000004c:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 50: 85 c0                         testl   %eax, %eax
    // 52: 74 0e                         je      0x62 <__JIT_ENTRY+0x62>
    // 54: ff 35 54 14 00 00             pushl   0x1454
    // 00000056:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 5a: 6a 01                         pushl   $0x1
    // 5c: 57                            pushl   %edi
    // 5d: ff d0                         calll   *%eax
    // 5f: 83 c4 0c                      addl    $0xc, %esp
    // 62: 57                            pushl   %edi
    // 63: e8 00 00 00 00                calll   0x68 <__JIT_ENTRY+0x68>
    // 00000064:  IMAGE_REL_I386_REL32 __PyUnicode_ExactDealloc
    // 68: 83 c4 04                      addl    $0x4, %esp
    // 6b: eb 2c                         jmp     0x99 <__JIT_ENTRY+0x99>
    // 6d: a1 50 14 00 00                movl    0x1450, %eax
    // 0000006e:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 72: 85 c0                         testl   %eax, %eax
    // 74: 74 0e                         je      0x84 <__JIT_ENTRY+0x84>
    // 76: ff 35 54 14 00 00             pushl   0x1454
    // 00000078:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 7c: 6a 01                         pushl   $0x1
    // 7e: 53                            pushl   %ebx
    // 7f: ff d0                         calll   *%eax
    // 81: 83 c4 0c                      addl    $0xc, %esp
    // 84: 53                            pushl   %ebx
    // 85: e8 00 00 00 00                calll   0x8a <__JIT_ENTRY+0x8a>
    // 00000086:  IMAGE_REL_I386_REL32 __PyUnicode_ExactDealloc
    // 8a: 83 c4 04                      addl    $0x4, %esp
    // 8d: 8d 5d fc                      leal    -0x4(%ebp), %ebx
    // 90: 8b 07                         movl    (%edi), %eax
    // 92: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 97: 7e ad                         jle     0x46 <__JIT_ENTRY+0x46>
    // 99: b8 00 00 00 00                movl    $0x0, %eax
    // 0000009a:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 9e: 83 c6 07                      addl    $0x7, %esi
    // a1: 66 85 c6                      testw   %ax, %si
    // a4: b8 00 00 00 00                movl    $0x0, %eax
    // 000000a5:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // a9: b9 00 00 00 00                movl    $0x0, %ecx
    // 000000aa:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // ae: 0f 44 c8                      cmovel  %eax, %ecx
    // b1: 89 4d f8                      movl    %ecx, -0x8(%ebp)
    // b4: 8b 04 24                      movl    (%esp), %eax
    // b7: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // bb: 89 5c 24 20                   movl    %ebx, 0x20(%esp)
    // bf: 8b 44 24 04                   movl    0x4(%esp), %eax
    // c3: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // c7: 83 c4 08                      addl    $0x8, %esp
    // ca: 5e                            popl    %esi
    // cb: 5f                            popl    %edi
    // cc: 5b                            popl    %ebx
    // cd: 5d                            popl    %ebp
    // ce: e9 00 00 00 00                jmp     0xd3 <__JIT_ENTRY+0xd3>
    // 000000cf:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[206] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x44, 0x24, 0x24, 0x89, 0x04, 0x24, 0x8b, 0x6c,
        0x24, 0x20, 0x8b, 0x44, 0x24, 0x1c, 0x89, 0x44,
        0x24, 0x04, 0x8b, 0x5d, 0xf8, 0x8b, 0x7d, 0xfc,
        0x57, 0x53, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x08, 0x89, 0xc6, 0x8b, 0x03, 0x3d, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x05, 0x48, 0x89, 0x03,
        0x74, 0x33, 0x8d, 0x5d, 0xfc, 0x8b, 0x07, 0x3d,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x53, 0x48, 0x89,
        0x07, 0x75, 0x4e, 0xa1, 0x50, 0x14, 0x00, 0x00,
        0x85, 0xc0, 0x74, 0x0e, 0xff, 0x35, 0x54, 0x14,
        0x00, 0x00, 0x6a, 0x01, 0x57, 0xff, 0xd0, 0x83,
        0xc4, 0x0c, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0xeb, 0x2c, 0xa1, 0x50, 0x14,
        0x00, 0x00, 0x85, 0xc0, 0x74, 0x0e, 0xff, 0x35,
        0x54, 0x14, 0x00, 0x00, 0x6a, 0x01, 0x53, 0xff,
        0xd0, 0x83, 0xc4, 0x0c, 0x53, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0x8d, 0x5d, 0xfc,
        0x8b, 0x07, 0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7e,
        0xad, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc6,
        0x07, 0x66, 0x85, 0xc6, 0xb8, 0x00, 0x00, 0x00,
        0x00, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x44,
        0xc8, 0x89, 0x4d, 0xf8, 0x8b, 0x04, 0x24, 0x89,
        0x44, 0x24, 0x24, 0x89, 0x5c, 0x24, 0x20, 0x8b,
        0x44, 0x24, 0x04, 0x89, 0x44, 0x24, 0x1c, 0x83,
        0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x23, (uintptr_t)&_PyUnicode_Equal + -0x4);
    patch_32(code + 0x4c, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x56, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x64, (uintptr_t)&_PyUnicode_ExactDealloc + -0x4);
    patch_32(code + 0x6e, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x78, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x86, (uintptr_t)&_PyUnicode_ExactDealloc + -0x4);
    patch_32(code + 0x9a, instruction->oparg);
    patch_32(code + 0xa5, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0xaa, (uintptr_t)&_Py_TrueStruct);
}

void
emit__CONTAINS_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CONTAINS_OP.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 9: 89 04 24                      movl    %eax, (%esp)
    // c: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 10: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 14: 8b 70 f8                      movl    -0x8(%eax), %esi
    // 17: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 1a: 89 47 20                      movl    %eax, 0x20(%edi)
    // 1d: 56                            pushl   %esi
    // 1e: 53                            pushl   %ebx
    // 1f: e8 00 00 00 00                calll   0x24 <__JIT_ENTRY+0x24>
    // 00000020:  IMAGE_REL_I386_REL32 _PySequence_Contains
    // 24: 83 c4 08                      addl    $0x8, %esp
    // 27: 8b 6f 20                      movl    0x20(%edi), %ebp
    // 2a: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 31: 8b 0e                         movl    (%esi), %ecx
    // 33: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 39: 7f 05                         jg      0x40 <__JIT_ENTRY+0x40>
    // 3b: 49                            decl    %ecx
    // 3c: 89 0e                         movl    %ecx, (%esi)
    // 3e: 74 1e                         je      0x5e <__JIT_ENTRY+0x5e>
    // 40: 8b 0b                         movl    (%ebx), %ecx
    // 42: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 48: 7f 2b                         jg      0x75 <__JIT_ENTRY+0x75>
    // 4a: 49                            decl    %ecx
    // 4b: 89 0b                         movl    %ecx, (%ebx)
    // 4d: 75 26                         jne     0x75 <__JIT_ENTRY+0x75>
    // 4f: 53                            pushl   %ebx
    // 50: 89 c6                         movl    %eax, %esi
    // 52: e8 00 00 00 00                calll   0x57 <__JIT_ENTRY+0x57>
    // 00000053:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 57: 89 f0                         movl    %esi, %eax
    // 59: 83 c4 04                      addl    $0x4, %esp
    // 5c: eb 17                         jmp     0x75 <__JIT_ENTRY+0x75>
    // 5e: 56                            pushl   %esi
    // 5f: 89 c6                         movl    %eax, %esi
    // 61: e8 00 00 00 00                calll   0x66 <__JIT_ENTRY+0x66>
    // 00000062:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 66: 89 f0                         movl    %esi, %eax
    // 68: 83 c4 04                      addl    $0x4, %esp
    // 6b: 8b 0b                         movl    (%ebx), %ecx
    // 6d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 73: 7e d5                         jle     0x4a <__JIT_ENTRY+0x4a>
    // 75: 85 c0                         testl   %eax, %eax
    // 77: 78 38                         js      0xb1 <__JIT_ENTRY+0xb1>
    // 79: b9 00 00 00 00                movl    $0x0, %ecx
    // 0000007a:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 7e: 0f b7 c9                      movzwl  %cx, %ecx
    // 81: 39 c8                         cmpl    %ecx, %eax
    // 83: b8 00 00 00 00                movl    $0x0, %eax
    // 00000084:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 88: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000089:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 8d: 0f 44 c8                      cmovel  %eax, %ecx
    // 90: 89 4d f8                      movl    %ecx, -0x8(%ebp)
    // 93: 83 c5 fc                      addl    $-0x4, %ebp
    // 96: 8b 04 24                      movl    (%esp), %eax
    // 99: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 9d: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // a1: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // a5: 83 c4 04                      addl    $0x4, %esp
    // a8: 5e                            popl    %esi
    // a9: 5f                            popl    %edi
    // aa: 5b                            popl    %ebx
    // ab: 5d                            popl    %ebp
    // ac: e9 00 00 00 00                jmp     0xb1 <__JIT_ENTRY+0xb1>
    // 000000ad:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // b1: 83 c5 f8                      addl    $-0x8, %ebp
    // b4: 8b 04 24                      movl    (%esp), %eax
    // b7: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // bb: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // bf: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // c3: 83 c4 04                      addl    $0x4, %esp
    // c6: 5e                            popl    %esi
    // c7: 5f                            popl    %edi
    // c8: 5b                            popl    %ebx
    // c9: 5d                            popl    %ebp
    // ca: e9 00 00 00 00                jmp     0xcf <__JIT_ENTRY+0xcf>
    // 000000cb:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[207] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x44, 0x24,
        0x20, 0x89, 0x04, 0x24, 0x8b, 0x7c, 0x24, 0x18,
        0x8b, 0x44, 0x24, 0x1c, 0x8b, 0x70, 0xf8, 0x8b,
        0x58, 0xfc, 0x89, 0x47, 0x20, 0x56, 0x53, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x08, 0x8b,
        0x6f, 0x20, 0xc7, 0x47, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x0e, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x05, 0x49, 0x89, 0x0e, 0x74, 0x1e,
        0x8b, 0x0b, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x2b, 0x49, 0x89, 0x0b, 0x75, 0x26, 0x53,
        0x89, 0xc6, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xf0, 0x83, 0xc4, 0x04, 0xeb, 0x17, 0x56, 0x89,
        0xc6, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf0,
        0x83, 0xc4, 0x04, 0x8b, 0x0b, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7e, 0xd5, 0x85, 0xc0, 0x78,
        0x38, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xc9, 0x39, 0xc8, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x44, 0xc8,
        0x89, 0x4d, 0xf8, 0x83, 0xc5, 0xfc, 0x8b, 0x04,
        0x24, 0x89, 0x44, 0x24, 0x20, 0x89, 0x6c, 0x24,
        0x1c, 0x89, 0x7c, 0x24, 0x18, 0x83, 0xc4, 0x04,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc5, 0xf8, 0x8b, 0x04, 0x24, 0x89,
        0x44, 0x24, 0x20, 0x89, 0x7c, 0x24, 0x18, 0x89,
        0x6c, 0x24, 0x1c, 0x83, 0xc4, 0x04, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x20, (uintptr_t)&PySequence_Contains + -0x4);
    patch_x86_64_32rx(code + 0x53, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x62, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x7a, instruction->oparg);
    patch_32(code + 0x84, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0x89, (uintptr_t)&_Py_TrueStruct);
    patch_x86_64_32rx(code + 0xad, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xcb, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CONTAINS_OP_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CONTAINS_OP_DICT.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 4c 24 20                   movl    0x20(%esp), %ecx
    // 9: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // d: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 11: 8b 70 fc                      movl    -0x4(%eax), %esi
    // 14: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000017:  IMAGE_REL_I386_DIR32 _PyDict_Type
    // 1b: 74 18                         je      0x35 <__JIT_ENTRY+0x35>
    // 1d: 89 4c 24 20                   movl    %ecx, 0x20(%esp)
    // 21: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // 25: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 29: 83 c4 04                      addl    $0x4, %esp
    // 2c: 5e                            popl    %esi
    // 2d: 5f                            popl    %edi
    // 2e: 5b                            popl    %ebx
    // 2f: 5d                            popl    %ebp
    // 30: e9 00 00 00 00                jmp     0x35 <__JIT_ENTRY+0x35>
    // 00000031:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 35: 89 0c 24                      movl    %ecx, (%esp)
    // 38: 8b 58 f8                      movl    -0x8(%eax), %ebx
    // 3b: 89 47 20                      movl    %eax, 0x20(%edi)
    // 3e: 53                            pushl   %ebx
    // 3f: 56                            pushl   %esi
    // 40: e8 00 00 00 00                calll   0x45 <__JIT_ENTRY+0x45>
    // 00000041:  IMAGE_REL_I386_REL32 _PyDict_Contains
    // 45: 83 c4 08                      addl    $0x8, %esp
    // 48: 8b 6f 20                      movl    0x20(%edi), %ebp
    // 4b: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 52: 8b 0b                         movl    (%ebx), %ecx
    // 54: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 5a: 7f 12                         jg      0x6e <__JIT_ENTRY+0x6e>
    // 5c: 49                            decl    %ecx
    // 5d: 89 0b                         movl    %ecx, (%ebx)
    // 5f: 75 0d                         jne     0x6e <__JIT_ENTRY+0x6e>
    // 61: 53                            pushl   %ebx
    // 62: 89 c3                         movl    %eax, %ebx
    // 64: e8 00 00 00 00                calll   0x69 <__JIT_ENTRY+0x69>
    // 00000065:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 69: 89 d8                         movl    %ebx, %eax
    // 6b: 83 c4 04                      addl    $0x4, %esp
    // 6e: 8b 0e                         movl    (%esi), %ecx
    // 70: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 76: 7f 05                         jg      0x7d <__JIT_ENTRY+0x7d>
    // 78: 49                            decl    %ecx
    // 79: 89 0e                         movl    %ecx, (%esi)
    // 7b: 74 3c                         je      0xb9 <__JIT_ENTRY+0xb9>
    // 7d: 85 c0                         testl   %eax, %eax
    // 7f: 78 49                         js      0xca <__JIT_ENTRY+0xca>
    // 81: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000082:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 86: 0f b7 c9                      movzwl  %cx, %ecx
    // 89: 39 c8                         cmpl    %ecx, %eax
    // 8b: b8 00 00 00 00                movl    $0x0, %eax
    // 0000008c:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 90: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000091:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 95: 0f 44 c8                      cmovel  %eax, %ecx
    // 98: 89 4d f8                      movl    %ecx, -0x8(%ebp)
    // 9b: 83 c5 fc                      addl    $-0x4, %ebp
    // 9e: 8b 04 24                      movl    (%esp), %eax
    // a1: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // a5: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // a9: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // ad: 83 c4 04                      addl    $0x4, %esp
    // b0: 5e                            popl    %esi
    // b1: 5f                            popl    %edi
    // b2: 5b                            popl    %ebx
    // b3: 5d                            popl    %ebp
    // b4: e9 00 00 00 00                jmp     0xb9 <__JIT_ENTRY+0xb9>
    // 000000b5:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // b9: 56                            pushl   %esi
    // ba: 89 c6                         movl    %eax, %esi
    // bc: e8 00 00 00 00                calll   0xc1 <__JIT_ENTRY+0xc1>
    // 000000bd:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // c1: 89 f0                         movl    %esi, %eax
    // c3: 83 c4 04                      addl    $0x4, %esp
    // c6: 85 c0                         testl   %eax, %eax
    // c8: 79 b7                         jns     0x81 <__JIT_ENTRY+0x81>
    // ca: 83 c5 f8                      addl    $-0x8, %ebp
    // cd: 8b 04 24                      movl    (%esp), %eax
    // d0: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // d4: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // d8: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // dc: 83 c4 04                      addl    $0x4, %esp
    // df: 5e                            popl    %esi
    // e0: 5f                            popl    %edi
    // e1: 5b                            popl    %ebx
    // e2: 5d                            popl    %ebp
    // e3: e9 00 00 00 00                jmp     0xe8 <__JIT_ENTRY+0xe8>
    // 000000e4:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[232] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x4c, 0x24,
        0x20, 0x8b, 0x44, 0x24, 0x1c, 0x8b, 0x7c, 0x24,
        0x18, 0x8b, 0x70, 0xfc, 0x81, 0x7e, 0x04, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x18, 0x89, 0x4c, 0x24,
        0x20, 0x89, 0x44, 0x24, 0x1c, 0x89, 0x7c, 0x24,
        0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x0c, 0x24,
        0x8b, 0x58, 0xf8, 0x89, 0x47, 0x20, 0x53, 0x56,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x08,
        0x8b, 0x6f, 0x20, 0xc7, 0x47, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x0b, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x12, 0x49, 0x89, 0x0b, 0x75,
        0x0d, 0x53, 0x89, 0xc3, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xd8, 0x83, 0xc4, 0x04, 0x8b, 0x0e,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x05,
        0x49, 0x89, 0x0e, 0x74, 0x3c, 0x85, 0xc0, 0x78,
        0x49, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xc9, 0x39, 0xc8, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x44, 0xc8,
        0x89, 0x4d, 0xf8, 0x83, 0xc5, 0xfc, 0x8b, 0x04,
        0x24, 0x89, 0x44, 0x24, 0x20, 0x89, 0x6c, 0x24,
        0x1c, 0x89, 0x7c, 0x24, 0x18, 0x83, 0xc4, 0x04,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x56, 0x89, 0xc6, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xf0, 0x83, 0xc4, 0x04, 0x85, 0xc0,
        0x79, 0xb7, 0x83, 0xc5, 0xf8, 0x8b, 0x04, 0x24,
        0x89, 0x44, 0x24, 0x20, 0x89, 0x7c, 0x24, 0x18,
        0x89, 0x6c, 0x24, 0x1c, 0x83, 0xc4, 0x04, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x17, (uintptr_t)&PyDict_Type);
    patch_x86_64_32rx(code + 0x31, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)&PyDict_Contains + -0x4);
    patch_x86_64_32rx(code + 0x65, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x82, instruction->oparg);
    patch_32(code + 0x8c, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0x91, (uintptr_t)&_Py_TrueStruct);
    patch_x86_64_32rx(code + 0xb5, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xbd, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xe4, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CONTAINS_OP_SET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CONTAINS_OP_SET.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 74 24 20                   movl    0x20(%esp), %esi
    // 9: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // d: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 11: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 14: 8b 4b 04                      movl    0x4(%ebx), %ecx
    // 17: 81 f9 00 00 00 00             cmpl    $0x0, %ecx
    // 00000019:  IMAGE_REL_I386_DIR32 _PySet_Type
    // 1d: 0f 94 c2                      sete    %dl
    // 20: 81 f9 00 00 00 00             cmpl    $0x0, %ecx
    // 00000022:  IMAGE_REL_I386_DIR32 _PyFrozenSet_Type
    // 26: 0f 94 c1                      sete    %cl
    // 29: 08 d1                         orb     %dl, %cl
    // 2b: 0f 84 84 00 00 00             je      0xb5 <__JIT_ENTRY+0xb5>
    // 31: 89 34 24                      movl    %esi, (%esp)
    // 34: 8b 70 f8                      movl    -0x8(%eax), %esi
    // 37: 89 47 20                      movl    %eax, 0x20(%edi)
    // 3a: 56                            pushl   %esi
    // 3b: 53                            pushl   %ebx
    // 3c: e8 00 00 00 00                calll   0x41 <__JIT_ENTRY+0x41>
    // 0000003d:  IMAGE_REL_I386_REL32 __PySet_Contains
    // 41: 83 c4 08                      addl    $0x8, %esp
    // 44: 8b 6f 20                      movl    0x20(%edi), %ebp
    // 47: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 4e: 8b 0e                         movl    (%esi), %ecx
    // 50: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 56: 7f 12                         jg      0x6a <__JIT_ENTRY+0x6a>
    // 58: 49                            decl    %ecx
    // 59: 89 0e                         movl    %ecx, (%esi)
    // 5b: 75 0d                         jne     0x6a <__JIT_ENTRY+0x6a>
    // 5d: 56                            pushl   %esi
    // 5e: 89 c6                         movl    %eax, %esi
    // 60: e8 00 00 00 00                calll   0x65 <__JIT_ENTRY+0x65>
    // 00000061:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 65: 89 f0                         movl    %esi, %eax
    // 67: 83 c4 04                      addl    $0x4, %esp
    // 6a: 8b 0b                         movl    (%ebx), %ecx
    // 6c: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 72: 7f 05                         jg      0x79 <__JIT_ENTRY+0x79>
    // 74: 49                            decl    %ecx
    // 75: 89 0b                         movl    %ecx, (%ebx)
    // 77: 74 54                         je      0xcd <__JIT_ENTRY+0xcd>
    // 79: 85 c0                         testl   %eax, %eax
    // 7b: 8b 14 24                      movl    (%esp), %edx
    // 7e: 78 61                         js      0xe1 <__JIT_ENTRY+0xe1>
    // 80: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000081:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 85: 0f b7 c9                      movzwl  %cx, %ecx
    // 88: 39 c8                         cmpl    %ecx, %eax
    // 8a: b8 00 00 00 00                movl    $0x0, %eax
    // 0000008b:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 8f: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000090:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 94: 0f 44 c8                      cmovel  %eax, %ecx
    // 97: 89 4d f8                      movl    %ecx, -0x8(%ebp)
    // 9a: 83 c5 fc                      addl    $-0x4, %ebp
    // 9d: 89 54 24 20                   movl    %edx, 0x20(%esp)
    // a1: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // a5: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // a9: 83 c4 04                      addl    $0x4, %esp
    // ac: 5e                            popl    %esi
    // ad: 5f                            popl    %edi
    // ae: 5b                            popl    %ebx
    // af: 5d                            popl    %ebp
    // b0: e9 00 00 00 00                jmp     0xb5 <__JIT_ENTRY+0xb5>
    // 000000b1:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // b5: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // b9: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // bd: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // c1: 83 c4 04                      addl    $0x4, %esp
    // c4: 5e                            popl    %esi
    // c5: 5f                            popl    %edi
    // c6: 5b                            popl    %ebx
    // c7: 5d                            popl    %ebp
    // c8: e9 00 00 00 00                jmp     0xcd <__JIT_ENTRY+0xcd>
    // 000000c9:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // cd: 53                            pushl   %ebx
    // ce: 89 c6                         movl    %eax, %esi
    // d0: e8 00 00 00 00                calll   0xd5 <__JIT_ENTRY+0xd5>
    // 000000d1:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // d5: 89 f0                         movl    %esi, %eax
    // d7: 83 c4 04                      addl    $0x4, %esp
    // da: 85 c0                         testl   %eax, %eax
    // dc: 8b 14 24                      movl    (%esp), %edx
    // df: 79 9f                         jns     0x80 <__JIT_ENTRY+0x80>
    // e1: 83 c5 f8                      addl    $-0x8, %ebp
    // e4: 89 54 24 20                   movl    %edx, 0x20(%esp)
    // e8: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // ec: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // f0: 83 c4 04                      addl    $0x4, %esp
    // f3: 5e                            popl    %esi
    // f4: 5f                            popl    %edi
    // f5: 5b                            popl    %ebx
    // f6: 5d                            popl    %ebp
    // f7: e9 00 00 00 00                jmp     0xfc <__JIT_ENTRY+0xfc>
    // 000000f8:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[252] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x74, 0x24,
        0x20, 0x8b, 0x44, 0x24, 0x1c, 0x8b, 0x7c, 0x24,
        0x18, 0x8b, 0x58, 0xfc, 0x8b, 0x4b, 0x04, 0x81,
        0xf9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x94, 0xc2,
        0x81, 0xf9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x94,
        0xc1, 0x08, 0xd1, 0x0f, 0x84, 0x84, 0x00, 0x00,
        0x00, 0x89, 0x34, 0x24, 0x8b, 0x70, 0xf8, 0x89,
        0x47, 0x20, 0x56, 0x53, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x08, 0x8b, 0x6f, 0x20, 0xc7,
        0x47, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0e,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x12,
        0x49, 0x89, 0x0e, 0x75, 0x0d, 0x56, 0x89, 0xc6,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf0, 0x83,
        0xc4, 0x04, 0x8b, 0x0b, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x05, 0x49, 0x89, 0x0b, 0x74,
        0x54, 0x85, 0xc0, 0x8b, 0x14, 0x24, 0x78, 0x61,
        0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9,
        0x39, 0xc8, 0xb8, 0x00, 0x00, 0x00, 0x00, 0xb9,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0x44, 0xc8, 0x89,
        0x4d, 0xf8, 0x83, 0xc5, 0xfc, 0x89, 0x54, 0x24,
        0x20, 0x89, 0x6c, 0x24, 0x1c, 0x89, 0x7c, 0x24,
        0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x74, 0x24,
        0x20, 0x89, 0x44, 0x24, 0x1c, 0x89, 0x7c, 0x24,
        0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x53, 0x89, 0xc6,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf0, 0x83,
        0xc4, 0x04, 0x85, 0xc0, 0x8b, 0x14, 0x24, 0x79,
        0x9f, 0x83, 0xc5, 0xf8, 0x89, 0x54, 0x24, 0x20,
        0x89, 0x7c, 0x24, 0x18, 0x89, 0x6c, 0x24, 0x1c,
        0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x19, (uintptr_t)&PySet_Type);
    patch_32(code + 0x22, (uintptr_t)&PyFrozenSet_Type);
    patch_x86_64_32rx(code + 0x3d, (uintptr_t)&_PySet_Contains + -0x4);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x81, instruction->oparg);
    patch_32(code + 0x8b, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0x90, (uintptr_t)&_Py_TrueStruct);
    patch_x86_64_32rx(code + 0xb1, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xc9, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0xd1, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xf8, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CONVERT_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CONVERT_VALUE.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 7: 8b 74 24 10                   movl    0x10(%esp), %esi
    // b: 8b 44 24 14                   movl    0x14(%esp), %eax
    // f: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000010:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 14: 0f b7 c9                      movzwl  %cx, %ecx
    // 17: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 1a: 89 46 20                      movl    %eax, 0x20(%esi)
    // 1d: 53                            pushl   %ebx
    // 1e: ff 14 8d 00 00 00 00          calll   *(,%ecx,4)
    // 00000021:  IMAGE_REL_I386_DIR32 __PyEval_ConversionFuncs
    // 25: 83 c4 04                      addl    $0x4, %esp
    // 28: 83 46 20 fc                   addl    $-0x4, 0x20(%esi)
    // 2c: 8b 0b                         movl    (%ebx), %ecx
    // 2e: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 34: 7f 05                         jg      0x3b <__JIT_ENTRY+0x3b>
    // 36: 49                            decl    %ecx
    // 37: 89 0b                         movl    %ecx, (%ebx)
    // 39: 74 27                         je      0x62 <__JIT_ENTRY+0x62>
    // 3b: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 3e: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 45: 85 c0                         testl   %eax, %eax
    // 47: 74 34                         je      0x7d <__JIT_ENTRY+0x7d>
    // 49: 89 01                         movl    %eax, (%ecx)
    // 4b: 83 c1 04                      addl    $0x4, %ecx
    // 4e: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 52: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 56: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 5a: 5e                            popl    %esi
    // 5b: 5f                            popl    %edi
    // 5c: 5b                            popl    %ebx
    // 5d: e9 00 00 00 00                jmp     0x62 <__JIT_ENTRY+0x62>
    // 0000005e:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 62: 53                            pushl   %ebx
    // 63: 89 c3                         movl    %eax, %ebx
    // 65: e8 00 00 00 00                calll   0x6a <__JIT_ENTRY+0x6a>
    // 00000066:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 6a: 89 d8                         movl    %ebx, %eax
    // 6c: 83 c4 04                      addl    $0x4, %esp
    // 6f: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 72: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 79: 85 c0                         testl   %eax, %eax
    // 7b: 75 cc                         jne     0x49 <__JIT_ENTRY+0x49>
    // 7d: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 81: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 85: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 89: 5e                            popl    %esi
    // 8a: 5f                            popl    %edi
    // 8b: 5b                            popl    %ebx
    // 8c: e9 00 00 00 00                jmp     0x91 <__JIT_ENTRY+0x91>
    // 0000008d:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[145] = {
        0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x18, 0x8b,
        0x74, 0x24, 0x10, 0x8b, 0x44, 0x24, 0x14, 0xb9,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x8b,
        0x58, 0xfc, 0x89, 0x46, 0x20, 0x53, 0xff, 0x14,
        0x8d, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04,
        0x83, 0x46, 0x20, 0xfc, 0x8b, 0x0b, 0x81, 0xf9,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x05, 0x49, 0x89,
        0x0b, 0x74, 0x27, 0x8b, 0x4e, 0x20, 0xc7, 0x46,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74,
        0x34, 0x89, 0x01, 0x83, 0xc1, 0x04, 0x89, 0x7c,
        0x24, 0x18, 0x89, 0x4c, 0x24, 0x14, 0x89, 0x74,
        0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x53, 0x89, 0xc3, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xd8, 0x83, 0xc4, 0x04, 0x8b,
        0x4e, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xc0, 0x75, 0xcc, 0x89, 0x7c, 0x24,
        0x18, 0x89, 0x4c, 0x24, 0x14, 0x89, 0x74, 0x24,
        0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x10, instruction->oparg);
    patch_32(code + 0x21, (uintptr_t)&_PyEval_ConversionFuncs);
    patch_x86_64_32rx(code + 0x5e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x66, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x8d, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__COPY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COPY.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // 6: 8b 54 24 10                   movl    0x10(%esp), %edx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: be 00 00 00 00                movl    $0x0, %esi
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 f6                      movzwl  %si, %esi
    // 16: c1 e6 02                      shll    $0x2, %esi
    // 19: f7 de                         negl    %esi
    // 1b: 8b 34 32                      movl    (%edx,%esi), %esi
    // 1e: 8b 3e                         movl    (%esi), %edi
    // 20: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 26: 7f 03                         jg      0x2b <__JIT_ENTRY+0x2b>
    // 28: 47                            incl    %edi
    // 29: 89 3e                         movl    %edi, (%esi)
    // 2b: 89 32                         movl    %esi, (%edx)
    // 2d: 83 c2 04                      addl    $0x4, %edx
    // 30: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 34: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 38: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3c: 5e                            popl    %esi
    // 3d: 5f                            popl    %edi
    // 3e: e9 00 00 00 00                jmp     0x43 <__JIT_ENTRY+0x43>
    // 0000003f:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[62] = {
        0x57, 0x56, 0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x54,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0xbe, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6, 0xc1, 0xe6,
        0x02, 0xf7, 0xde, 0x8b, 0x34, 0x32, 0x8b, 0x3e,
        0x81, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03,
        0x47, 0x89, 0x3e, 0x89, 0x32, 0x83, 0xc2, 0x04,
        0x89, 0x4c, 0x24, 0x14, 0x89, 0x54, 0x24, 0x10,
        0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
}

void
emit__COPY_FREE_VARS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COPY_FREE_VARS.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 10                      subl    $0x10, %esp
    // 7: 8b 5c 24 2c                   movl    0x2c(%esp), %ebx
    // b: 8b 74 24 28                   movl    0x28(%esp), %esi
    // f: 8b 44 24 24                   movl    0x24(%esp), %eax
    // 13: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000014:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 18: 66 85 c9                      testw   %cx, %cx
    // 1b: 74 5a                         je      0x77 <__JIT_ENTRY+0x77>
    // 1d: 89 5c 24 08                   movl    %ebx, 0x8(%esp)
    // 21: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 25: 0f b7 c9                      movzwl  %cx, %ecx
    // 28: 89 0c 24                      movl    %ecx, (%esp)
    // 2b: 8b 08                         movl    (%eax), %ecx
    // 2d: 8b 49 30                      movl    0x30(%ecx), %ecx
    // 30: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 34: 8b 48 08                      movl    0x8(%eax), %ecx
    // 37: 8b 79 24                      movl    0x24(%ecx), %edi
    // 3a: b9 00 00 00 00                movl    $0x0, %ecx
    // 0000003b:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 3f: 31 ed                         xorl    %ebp, %ebp
    // 41: 66 83 f9 01                   cmpw    $0x1, %cx
    // 45: 75 48                         jne     0x8f <__JIT_ENTRY+0x8f>
    // 47: 8b 14 24                      movl    (%esp), %edx
    // 4a: f6 c2 01                      testb   $0x1, %dl
    // 4d: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // 51: 8b 5c 24 08                   movl    0x8(%esp), %ebx
    // 55: 74 20                         je      0x77 <__JIT_ENTRY+0x77>
    // 57: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 5b: 2b 14 24                      subl    (%esp), %edx
    // 5e: 8b 4c af 0c                   movl    0xc(%edi,%ebp,4), %ecx
    // 62: 01 ea                         addl    %ebp, %edx
    // 64: 89 d7                         movl    %edx, %edi
    // 66: 8b 11                         movl    (%ecx), %edx
    // 68: 81 fa ff ff ff 3f             cmpl    $0x3fffffff, %edx       # imm = 0x3FFFFFFF
    // 6e: 7f 03                         jg      0x73 <__JIT_ENTRY+0x73>
    // 70: 42                            incl    %edx
    // 71: 89 11                         movl    %edx, (%ecx)
    // 73: 89 4c b8 28                   movl    %ecx, 0x28(%eax,%edi,4)
    // 77: 89 5c 24 2c                   movl    %ebx, 0x2c(%esp)
    // 7b: 89 74 24 28                   movl    %esi, 0x28(%esp)
    // 7f: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // 83: 83 c4 10                      addl    $0x10, %esp
    // 86: 5e                            popl    %esi
    // 87: 5f                            popl    %edi
    // 88: 5b                            popl    %ebx
    // 89: 5d                            popl    %ebp
    // 8a: e9 00 00 00 00                jmp     0x8f <__JIT_ENTRY+0x8f>
    // 0000008b:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 8f: 8b 14 24                      movl    (%esp), %edx
    // 92: 89 d3                         movl    %edx, %ebx
    // 94: 83 e3 fe                      andl    $-0x2, %ebx
    // 97: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 9b: 8d 0c 8d 00 00 00 00          leal    (,%ecx,4), %ecx
    // a2: 8d 14 95 00 00 00 00          leal    (,%edx,4), %edx
    // a9: 29 d1                         subl    %edx, %ecx
    // ab: 8d 14 01                      leal    (%ecx,%eax), %edx
    // ae: 83 c2 2c                      addl    $0x2c, %edx
    // b1: 31 ed                         xorl    %ebp, %ebp
    // b3: eb 19                         jmp     0xce <__JIT_ENTRY+0xce>
    // b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%eax,%eax)
    // c0: 89 0c aa                      movl    %ecx, (%edx,%ebp,4)
    // c3: 83 c5 02                      addl    $0x2, %ebp
    // c6: 39 eb                         cmpl    %ebp, %ebx
    // c8: 0f 84 79 ff ff ff             je      0x47 <__JIT_ENTRY+0x47>
    // ce: 8b 4c af 0c                   movl    0xc(%edi,%ebp,4), %ecx
    // d2: 8b 31                         movl    (%ecx), %esi
    // d4: 81 fe ff ff ff 3f             cmpl    $0x3fffffff, %esi       # imm = 0x3FFFFFFF
    // da: 7f 03                         jg      0xdf <__JIT_ENTRY+0xdf>
    // dc: 46                            incl    %esi
    // dd: 89 31                         movl    %esi, (%ecx)
    // df: 89 4c aa fc                   movl    %ecx, -0x4(%edx,%ebp,4)
    // e3: 8b 4c af 10                   movl    0x10(%edi,%ebp,4), %ecx
    // e7: 8b 31                         movl    (%ecx), %esi
    // e9: 81 fe ff ff ff 3f             cmpl    $0x3fffffff, %esi       # imm = 0x3FFFFFFF
    // ef: 7f cf                         jg      0xc0 <__JIT_ENTRY+0xc0>
    // f1: 46                            incl    %esi
    // f2: 89 31                         movl    %esi, (%ecx)
    // f4: eb ca                         jmp     0xc0 <__JIT_ENTRY+0xc0>
    const unsigned char code_body[246] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x10, 0x8b,
        0x5c, 0x24, 0x2c, 0x8b, 0x74, 0x24, 0x28, 0x8b,
        0x44, 0x24, 0x24, 0xb9, 0x00, 0x00, 0x00, 0x00,
        0x66, 0x85, 0xc9, 0x74, 0x5a, 0x89, 0x5c, 0x24,
        0x08, 0x89, 0x74, 0x24, 0x0c, 0x0f, 0xb7, 0xc9,
        0x89, 0x0c, 0x24, 0x8b, 0x08, 0x8b, 0x49, 0x30,
        0x89, 0x4c, 0x24, 0x04, 0x8b, 0x48, 0x08, 0x8b,
        0x79, 0x24, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x31,
        0xed, 0x66, 0x83, 0xf9, 0x01, 0x75, 0x48, 0x8b,
        0x14, 0x24, 0xf6, 0xc2, 0x01, 0x8b, 0x74, 0x24,
        0x0c, 0x8b, 0x5c, 0x24, 0x08, 0x74, 0x20, 0x8b,
        0x54, 0x24, 0x04, 0x2b, 0x14, 0x24, 0x8b, 0x4c,
        0xaf, 0x0c, 0x01, 0xea, 0x89, 0xd7, 0x8b, 0x11,
        0x81, 0xfa, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03,
        0x42, 0x89, 0x11, 0x89, 0x4c, 0xb8, 0x28, 0x89,
        0x5c, 0x24, 0x2c, 0x89, 0x74, 0x24, 0x28, 0x89,
        0x44, 0x24, 0x24, 0x83, 0xc4, 0x10, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x14, 0x24, 0x89, 0xd3, 0x83, 0xe3, 0xfe, 0x8b,
        0x4c, 0x24, 0x04, 0x8d, 0x0c, 0x8d, 0x00, 0x00,
        0x00, 0x00, 0x8d, 0x14, 0x95, 0x00, 0x00, 0x00,
        0x00, 0x29, 0xd1, 0x8d, 0x14, 0x01, 0x83, 0xc2,
        0x2c, 0x31, 0xed, 0xeb, 0x19, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x0c, 0xaa, 0x83, 0xc5, 0x02, 0x39, 0xeb,
        0x0f, 0x84, 0x79, 0xff, 0xff, 0xff, 0x8b, 0x4c,
        0xaf, 0x0c, 0x8b, 0x31, 0x81, 0xfe, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x03, 0x46, 0x89, 0x31, 0x89,
        0x4c, 0xaa, 0xfc, 0x8b, 0x4c, 0xaf, 0x10, 0x8b,
        0x31, 0x81, 0xfe, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0xcf, 0x46, 0x89, 0x31, 0xeb, 0xca,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, instruction->oparg);
    patch_32(code + 0x3b, instruction->oparg);
    patch_x86_64_32rx(code + 0x8b, (uintptr_t)code + sizeof(code_body) + -0x4);
}

void
emit__CREATE_INIT_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CREATE_INIT_FRAME.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 10                      subl    $0x10, %esp
    // 7: 8b 7c 24 2c                   movl    0x2c(%esp), %edi
    // b: 8b 6c 24 28                   movl    0x28(%esp), %ebp
    // f: 8b 74 24 24                   movl    0x24(%esp), %esi
    // 13: b8 00 00 00 00                movl    $0x0, %eax
    // 00000014:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 18: 0f b7 c8                      movzwl  %ax, %ecx
    // 1b: 8d 04 8d 00 00 00 00          leal    (,%ecx,4), %eax
    // 22: 89 ea                         movl    %ebp, %edx
    // 24: 29 c2                         subl    %eax, %edx
    // 26: 89 14 24                      movl    %edx, (%esp)
    // 29: 89 6e 20                      movl    %ebp, 0x20(%esi)
    // 2c: 8b 9f 94 00 00 00             movl    0x94(%edi), %ebx
    // 32: a1 34 00 00 00                movl    0x34, %eax
    // 00000033:  IMAGE_REL_I386_DIR32 __Py_InitCleanup
    // 37: 8d 04 83                      leal    (%ebx,%eax,4), %eax
    // 3a: 89 7c 24 0c                   movl    %edi, 0xc(%esp)
    // 3e: 89 87 94 00 00 00             movl    %eax, 0x94(%edi)
    // 44: 89 73 04                      movl    %esi, 0x4(%ebx)
    // 47: c7 43 08 00 00 00 00          movl    $0x0, 0x8(%ebx)
    // 0000004a:  IMAGE_REL_I386_DIR32 __Py_NoneStruct
    // 4e: c7 03 00 00 00 00             movl    $0x0, (%ebx)
    // 00000050:  IMAGE_REL_I386_DIR32 __Py_InitCleanup
    // 54: c7 43 14 00 00 00 00          movl    $0x0, 0x14(%ebx)
    // 5b: a1 30 00 00 00                movl    0x30, %eax
    // 0000005c:  IMAGE_REL_I386_DIR32 __Py_InitCleanup
    // 60: 8d 44 83 2c                   leal    0x2c(%ebx,%eax,4), %eax
    // 64: 89 43 20                      movl    %eax, 0x20(%ebx)
    // 67: 89 c8                         movl    %ecx, %eax
    // 69: f7 d0                         notl    %eax
    // 6b: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
    // 70: 29 cf                         subl    %ecx, %edi
    // 72: c7 43 18 00 00 00 00          movl    $0x0, 0x18(%ebx)
    // 79: c7 43 1c 80 00 00 00          movl    $0x80, 0x1c(%ebx)
    // 0000007c:  IMAGE_REL_I386_DIR32 __Py_InitCleanup
    // 80: c7 43 24 00 00 00 00          movl    $0x0, 0x24(%ebx)
    // 87: 8b 56 20                      movl    0x20(%esi), %edx
    // 8a: 89 54 24 04                   movl    %edx, 0x4(%esp)
    // 8e: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 95: 89 6c 24 08                   movl    %ebp, 0x8(%esp)
    // 99: 8b 6c 85 00                   movl    (%ebp,%eax,4), %ebp
    // 9d: 8b 45 00                      movl    (%ebp), %eax
    // a0: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // a5: 7f 04                         jg      0xab <__JIT_ENTRY+0xab>
    // a7: 40                            incl    %eax
    // a8: 89 45 00                      movl    %eax, (%ebp)
    // ab: 89 6b 28                      movl    %ebp, 0x28(%ebx)
    // ae: 8b 44 24 04                   movl    0x4(%esp), %eax
    // b2: 89 46 20                      movl    %eax, 0x20(%esi)
    // b5: 41                            incl    %ecx
    // b6: 8b 04 24                      movl    (%esp), %eax
    // b9: 83 c0 fc                      addl    $-0x4, %eax
    // bc: 8d 2c bd 00 00 00 00          leal    (,%edi,4), %ebp
    // c3: 53                            pushl   %ebx
    // c4: 6a 00                         pushl   $0x0
    // c6: 51                            pushl   %ecx
    // c7: 50                            pushl   %eax
    // c8: 6a 00                         pushl   $0x0
    // ca: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // ce: ff 34 b8                      pushl   (%eax,%edi,4)
    // d1: 8b 7c 24 24                   movl    0x24(%esp), %edi
    // d5: 57                            pushl   %edi
    // d6: e8 00 00 00 00                calll   0xdb <__JIT_ENTRY+0xdb>
    // 000000d7:  IMAGE_REL_I386_REL32 __PyEvalFramePushAndInit
    // db: 83 c4 1c                      addl    $0x1c, %esp
    // de: 03 6e 20                      addl    0x20(%esi), %ebp
    // e1: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // e8: 85 c0                         testl   %eax, %eax
    // ea: 74 27                         je      0x113 <__JIT_ENTRY+0x113>
    // ec: 66 c7 46 24 04 00             movw    $0x4, 0x24(%esi)
    // f2: ff 4f 1c                      decl    0x1c(%edi)
    // f5: 89 45 00                      movl    %eax, (%ebp)
    // f8: 83 c5 04                      addl    $0x4, %ebp
    // fb: 89 7c 24 2c                   movl    %edi, 0x2c(%esp)
    // ff: 89 6c 24 28                   movl    %ebp, 0x28(%esp)
    // 103: 89 74 24 24                   movl    %esi, 0x24(%esp)
    // 107: 83 c4 10                      addl    $0x10, %esp
    // 10a: 5e                            popl    %esi
    // 10b: 5f                            popl    %edi
    // 10c: 5b                            popl    %ebx
    // 10d: 5d                            popl    %ebp
    // 10e: e9 00 00 00 00                jmp     0x113 <__JIT_ENTRY+0x113>
    // 0000010f:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 113: 53                            pushl   %ebx
    // 114: 57                            pushl   %edi
    // 115: e8 00 00 00 00                calll   0x11a <__JIT_ENTRY+0x11a>
    // 00000116:  IMAGE_REL_I386_REL32 __PyEval_FrameClearAndPop
    // 11a: 83 c4 08                      addl    $0x8, %esp
    // 11d: 89 7c 24 2c                   movl    %edi, 0x2c(%esp)
    // 121: 89 6c 24 28                   movl    %ebp, 0x28(%esp)
    // 125: 89 74 24 24                   movl    %esi, 0x24(%esp)
    // 129: 83 c4 10                      addl    $0x10, %esp
    // 12c: 5e                            popl    %esi
    // 12d: 5f                            popl    %edi
    // 12e: 5b                            popl    %ebx
    // 12f: 5d                            popl    %ebp
    // 130: e9 00 00 00 00                jmp     0x135 <__JIT_ENTRY+0x135>
    // 00000131:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[309] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x10, 0x8b,
        0x7c, 0x24, 0x2c, 0x8b, 0x6c, 0x24, 0x28, 0x8b,
        0x74, 0x24, 0x24, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xc8, 0x8d, 0x04, 0x8d, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xea, 0x29, 0xc2, 0x89, 0x14,
        0x24, 0x89, 0x6e, 0x20, 0x8b, 0x9f, 0x94, 0x00,
        0x00, 0x00, 0xa1, 0x34, 0x00, 0x00, 0x00, 0x8d,
        0x04, 0x83, 0x89, 0x7c, 0x24, 0x0c, 0x89, 0x87,
        0x94, 0x00, 0x00, 0x00, 0x89, 0x73, 0x04, 0xc7,
        0x43, 0x08, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x03,
        0x00, 0x00, 0x00, 0x00, 0xc7, 0x43, 0x14, 0x00,
        0x00, 0x00, 0x00, 0xa1, 0x30, 0x00, 0x00, 0x00,
        0x8d, 0x44, 0x83, 0x2c, 0x89, 0x43, 0x20, 0x89,
        0xc8, 0xf7, 0xd0, 0xbf, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xcf, 0xc7, 0x43, 0x18, 0x00, 0x00, 0x00,
        0x00, 0xc7, 0x43, 0x1c, 0x80, 0x00, 0x00, 0x00,
        0xc7, 0x43, 0x24, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x56, 0x20, 0x89, 0x54, 0x24, 0x04, 0xc7, 0x46,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x89, 0x6c, 0x24,
        0x08, 0x8b, 0x6c, 0x85, 0x00, 0x8b, 0x45, 0x00,
        0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x04, 0x40,
        0x89, 0x45, 0x00, 0x89, 0x6b, 0x28, 0x8b, 0x44,
        0x24, 0x04, 0x89, 0x46, 0x20, 0x41, 0x8b, 0x04,
        0x24, 0x83, 0xc0, 0xfc, 0x8d, 0x2c, 0xbd, 0x00,
        0x00, 0x00, 0x00, 0x53, 0x6a, 0x00, 0x51, 0x50,
        0x6a, 0x00, 0x8b, 0x44, 0x24, 0x1c, 0xff, 0x34,
        0xb8, 0x8b, 0x7c, 0x24, 0x24, 0x57, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x1c, 0x03, 0x6e,
        0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x74, 0x27, 0x66, 0xc7, 0x46, 0x24,
        0x04, 0x00, 0xff, 0x4f, 0x1c, 0x89, 0x45, 0x00,
        0x83, 0xc5, 0x04, 0x89, 0x7c, 0x24, 0x2c, 0x89,
        0x6c, 0x24, 0x28, 0x89, 0x74, 0x24, 0x24, 0x83,
        0xc4, 0x10, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x53, 0x57, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x08, 0x89, 0x7c, 0x24,
        0x2c, 0x89, 0x6c, 0x24, 0x28, 0x89, 0x74, 0x24,
        0x24, 0x83, 0xc4, 0x10, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, instruction->oparg);
    patch_32(code + 0x33, (uintptr_t)&_Py_InitCleanup + 0x34);
    patch_32(code + 0x4a, (uintptr_t)&_Py_NoneStruct);
    patch_32(code + 0x50, (uintptr_t)&_Py_InitCleanup);
    patch_32(code + 0x5c, (uintptr_t)&_Py_InitCleanup + 0x30);
    patch_32(code + 0x7c, (uintptr_t)&_Py_InitCleanup + 0x80);
    patch_x86_64_32rx(code + 0xd7, (uintptr_t)&_PyEvalFramePushAndInit + -0x4);
    patch_x86_64_32rx(code + 0x10f, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x116, (uintptr_t)&_PyEval_FrameClearAndPop + -0x4);
    patch_x86_64_32rx(code + 0x131, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__DELETE_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_ATTR.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 10: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000011:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 15: 0f b7 c9                      movzwl  %cx, %ecx
    // 18: 8b 68 fc                      movl    -0x4(%eax), %ebp
    // 1b: 8b 16                         movl    (%esi), %edx
    // 1d: 8b 52 10                      movl    0x10(%edx), %edx
    // 20: 8b 4c 8a 0c                   movl    0xc(%edx,%ecx,4), %ecx
    // 24: 89 46 20                      movl    %eax, 0x20(%esi)
    // 27: 51                            pushl   %ecx
    // 28: 55                            pushl   %ebp
    // 29: e8 00 00 00 00                calll   0x2e <__JIT_ENTRY+0x2e>
    // 0000002a:  IMAGE_REL_I386_REL32 _PyObject_DelAttr
    // 2e: 83 c4 08                      addl    $0x8, %esp
    // 31: 8b 5e 20                      movl    0x20(%esi), %ebx
    // 34: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 3b: 8b 4d 00                      movl    (%ebp), %ecx
    // 3e: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 44: 7f 06                         jg      0x4c <__JIT_ENTRY+0x4c>
    // 46: 49                            decl    %ecx
    // 47: 89 4d 00                      movl    %ecx, (%ebp)
    // 4a: 74 1c                         je      0x68 <__JIT_ENTRY+0x68>
    // 4c: 83 c3 fc                      addl    $-0x4, %ebx
    // 4f: 85 c0                         testl   %eax, %eax
    // 51: 74 29                         je      0x7c <__JIT_ENTRY+0x7c>
    // 53: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 57: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 5b: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 5f: 5e                            popl    %esi
    // 60: 5f                            popl    %edi
    // 61: 5b                            popl    %ebx
    // 62: 5d                            popl    %ebp
    // 63: e9 00 00 00 00                jmp     0x68 <__JIT_ENTRY+0x68>
    // 00000064:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // 68: 55                            pushl   %ebp
    // 69: 89 c5                         movl    %eax, %ebp
    // 6b: e8 00 00 00 00                calll   0x70 <__JIT_ENTRY+0x70>
    // 0000006c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 70: 89 e8                         movl    %ebp, %eax
    // 72: 83 c4 04                      addl    $0x4, %esp
    // 75: 83 c3 fc                      addl    $-0x4, %ebx
    // 78: 85 c0                         testl   %eax, %eax
    // 7a: 75 d7                         jne     0x53 <__JIT_ENTRY+0x53>
    // 7c: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 80: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 84: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 88: 5e                            popl    %esi
    // 89: 5f                            popl    %edi
    // 8a: 5b                            popl    %ebx
    // 8b: 5d                            popl    %ebp
    // 8c: e9 00 00 00 00                jmp     0x91 <__JIT_ENTRY+0x91>
    // 0000008d:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[140] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x18,
        0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9,
        0x8b, 0x68, 0xfc, 0x8b, 0x16, 0x8b, 0x52, 0x10,
        0x8b, 0x4c, 0x8a, 0x0c, 0x89, 0x46, 0x20, 0x51,
        0x55, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x08, 0x8b, 0x5e, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x4d, 0x00, 0x81, 0xf9,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x06, 0x49, 0x89,
        0x4d, 0x00, 0x74, 0x1c, 0x83, 0xc3, 0xfc, 0x85,
        0xc0, 0x74, 0x29, 0x89, 0x7c, 0x24, 0x1c, 0x89,
        0x5c, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x55, 0x89, 0xc5, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xe8, 0x83, 0xc4, 0x04, 0x83, 0xc3, 0xfc,
        0x85, 0xc0, 0x75, 0xd7, 0x89, 0x7c, 0x24, 0x1c,
        0x89, 0x5c, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14,
        0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x11, instruction->oparg);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)&PyObject_DelAttr + -0x4);
    patch_x86_64_32rx(code + 0x64, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x6c, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__DELETE_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_DEREF.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 7: 8b 74 24 10                   movl    0x10(%esp), %esi
    // b: 8b 54 24 14                   movl    0x14(%esp), %edx
    // f: b8 00 00 00 00                movl    $0x0, %eax
    // 00000010:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 14: 0f b7 c8                      movzwl  %ax, %ecx
    // 17: 8b 5c 8e 28                   movl    0x28(%esi,%ecx,4), %ebx
    // 1b: 8b 43 08                      movl    0x8(%ebx), %eax
    // 1e: c7 43 08 00 00 00 00          movl    $0x0, 0x8(%ebx)
    // 25: 89 56 20                      movl    %edx, 0x20(%esi)
    // 28: 85 c0                         testl   %eax, %eax
    // 2a: 74 36                         je      0x62 <__JIT_ENTRY+0x62>
    // 2c: 8b 08                         movl    (%eax), %ecx
    // 2e: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 34: 7f 0e                         jg      0x44 <__JIT_ENTRY+0x44>
    // 36: 49                            decl    %ecx
    // 37: 89 08                         movl    %ecx, (%eax)
    // 39: 75 09                         jne     0x44 <__JIT_ENTRY+0x44>
    // 3b: 50                            pushl   %eax
    // 3c: e8 00 00 00 00                calll   0x41 <__JIT_ENTRY+0x41>
    // 0000003d:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 41: 83 c4 04                      addl    $0x4, %esp
    // 44: 8b 46 20                      movl    0x20(%esi), %eax
    // 47: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 4e: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 52: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 56: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 5a: 5e                            popl    %esi
    // 5b: 5f                            popl    %edi
    // 5c: 5b                            popl    %ebx
    // 5d: e9 00 00 00 00                jmp     0x62 <__JIT_ENTRY+0x62>
    // 0000005e:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 62: 51                            pushl   %ecx
    // 63: ff 36                         pushl   (%esi)
    // 65: 57                            pushl   %edi
    // 66: e8 00 00 00 00                calll   0x6b <__JIT_ENTRY+0x6b>
    // 00000067:  IMAGE_REL_I386_REL32 __PyEval_FormatExcUnbound
    // 6b: 83 c4 0c                      addl    $0xc, %esp
    // 6e: 8b 46 20                      movl    0x20(%esi), %eax
    // 71: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 78: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 7c: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 80: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 84: 5e                            popl    %esi
    // 85: 5f                            popl    %edi
    // 86: 5b                            popl    %ebx
    // 87: e9 00 00 00 00                jmp     0x8c <__JIT_ENTRY+0x8c>
    // 00000088:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[140] = {
        0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x18, 0x8b,
        0x74, 0x24, 0x10, 0x8b, 0x54, 0x24, 0x14, 0xb8,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x8b,
        0x5c, 0x8e, 0x28, 0x8b, 0x43, 0x08, 0xc7, 0x43,
        0x08, 0x00, 0x00, 0x00, 0x00, 0x89, 0x56, 0x20,
        0x85, 0xc0, 0x74, 0x36, 0x8b, 0x08, 0x81, 0xf9,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x49, 0x89,
        0x08, 0x75, 0x09, 0x50, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x04, 0x8b, 0x46, 0x20, 0xc7,
        0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x89, 0x7c,
        0x24, 0x18, 0x89, 0x44, 0x24, 0x14, 0x89, 0x74,
        0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x51, 0xff, 0x36, 0x57, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b, 0x46,
        0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x7c, 0x24, 0x18, 0x89, 0x44, 0x24, 0x14,
        0x89, 0x74, 0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x10, instruction->oparg);
    patch_x86_64_32rx(code + 0x3d, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x5e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x67, (uintptr_t)&_PyEval_FormatExcUnbound + -0x4);
    patch_x86_64_32rx(code + 0x88, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__DELETE_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_FAST.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // e: b8 00 00 00 00                movl    $0x0, %eax
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 d0                      movzwl  %ax, %edx
    // 16: 8b 44 96 28                   movl    0x28(%esi,%edx,4), %eax
    // 1a: 85 c0                         testl   %eax, %eax
    // 1c: 74 40                         je      0x5e <__JIT_ENTRY+0x5e>
    // 1e: c7 44 96 28 00 00 00 00       movl    $0x0, 0x28(%esi,%edx,4)
    // 26: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 29: 8b 08                         movl    (%eax), %ecx
    // 2b: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 31: 7f 0e                         jg      0x41 <__JIT_ENTRY+0x41>
    // 33: 49                            decl    %ecx
    // 34: 89 08                         movl    %ecx, (%eax)
    // 36: 75 09                         jne     0x41 <__JIT_ENTRY+0x41>
    // 38: 50                            pushl   %eax
    // 39: e8 00 00 00 00                calll   0x3e <__JIT_ENTRY+0x3e>
    // 0000003a:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 3e: 83 c4 04                      addl    $0x4, %esp
    // 41: 8b 46 20                      movl    0x20(%esi), %eax
    // 44: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 4b: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 4f: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 53: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 57: 5e                            popl    %esi
    // 58: 5f                            popl    %edi
    // 59: e9 00 00 00 00                jmp     0x5e <__JIT_ENTRY+0x5e>
    // 0000005a:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 5e: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 61: 8b 06                         movl    (%esi), %eax
    // 63: 52                            pushl   %edx
    // 64: ff 70 48                      pushl   0x48(%eax)
    // 67: e8 00 00 00 00                calll   0x6c <__JIT_ENTRY+0x6c>
    // 00000068:  IMAGE_REL_I386_REL32 _PyTuple_GetItem
    // 6c: 83 c4 08                      addl    $0x8, %esp
    // 6f: 50                            pushl   %eax
    // 70: 68 00 00 00 00                pushl   $0x0
    // 00000071:  IMAGE_REL_I386_DIR32 ??_C@_0EK@CHGBBAMA@cannot?5access?5local?5variable?5?8?$CFs@
    // 75: ff 35 00 00 00 00             pushl   0x0
    // 00000077:  IMAGE_REL_I386_DIR32 _PyExc_UnboundLocalError
    // 7b: 57                            pushl   %edi
    // 7c: e8 00 00 00 00                calll   0x81 <__JIT_ENTRY+0x81>
    // 0000007d:  IMAGE_REL_I386_REL32 __PyEval_FormatExcCheckArg
    // 81: 83 c4 10                      addl    $0x10, %esp
    // 84: 8b 46 20                      movl    0x20(%esi), %eax
    // 87: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 8e: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 92: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 96: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 9a: 5e                            popl    %esi
    // 9b: 5f                            popl    %edi
    // 9c: e9 00 00 00 00                jmp     0xa1 <__JIT_ENTRY+0xa1>
    // 0000009d:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[161] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x74, 0x24, 0x0c, 0xb8, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x8b, 0x44,
        0x96, 0x28, 0x85, 0xc0, 0x74, 0x40, 0xc7, 0x44,
        0x96, 0x28, 0x00, 0x00, 0x00, 0x00, 0x89, 0x4e,
        0x20, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75, 0x09,
        0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x44, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x4e,
        0x20, 0x8b, 0x06, 0x52, 0xff, 0x70, 0x48, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x08, 0x50,
        0x68, 0x00, 0x00, 0x00, 0x00, 0xff, 0x35, 0x00,
        0x00, 0x00, 0x00, 0x57, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x10, 0x8b, 0x46, 0x20, 0xc7,
        0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x89, 0x7c,
        0x24, 0x14, 0x89, 0x44, 0x24, 0x10, 0x89, 0x74,
        0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: "cannot access local variable '%s' where it is not associated with a value\x00"
    // 4a: 00 00 00 00 00 00
    const unsigned char data_body[80] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69,
        0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73,
        0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
        0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
        0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
        0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
        0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75,
        0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)&PyTuple_GetItem + -0x4);
    patch_32(code + 0x71, (uintptr_t)data);
    patch_32(code + 0x77, (uintptr_t)&PyExc_UnboundLocalError);
    patch_x86_64_32rx(code + 0x7d, (uintptr_t)&_PyEval_FormatExcCheckArg + -0x4);
    patch_x86_64_32rx(code + 0x9d, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__DELETE_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_GLOBAL.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 10: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000011:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 15: 0f b7 c9                      movzwl  %cx, %ecx
    // 18: 8b 16                         movl    (%esi), %edx
    // 1a: 8b 6e 0c                      movl    0xc(%esi), %ebp
    // 1d: 8b 52 10                      movl    0x10(%edx), %edx
    // 20: 8b 5c 8a 0c                   movl    0xc(%edx,%ecx,4), %ebx
    // 24: 89 46 20                      movl    %eax, 0x20(%esi)
    // 27: 6a 00                         pushl   $0x0
    // 29: 53                            pushl   %ebx
    // 2a: 55                            pushl   %ebp
    // 2b: e8 00 00 00 00                calll   0x30 <__JIT_ENTRY+0x30>
    // 0000002c:  IMAGE_REL_I386_REL32 _PyDict_Pop
    // 30: 83 c4 0c                      addl    $0xc, %esp
    // 33: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 36: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 3d: 85 c0                         testl   %eax, %eax
    // 3f: 78 17                         js      0x58 <__JIT_ENTRY+0x58>
    // 41: 74 1f                         je      0x62 <__JIT_ENTRY+0x62>
    // 43: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 47: 89 4c 24 18                   movl    %ecx, 0x18(%esp)
    // 4b: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 4f: 5e                            popl    %esi
    // 50: 5f                            popl    %edi
    // 51: 5b                            popl    %ebx
    // 52: 5d                            popl    %ebp
    // 53: e9 00 00 00 00                jmp     0x58 <__JIT_ENTRY+0x58>
    // 00000054:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 58: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 5c: 89 4c 24 18                   movl    %ecx, 0x18(%esp)
    // 60: eb 2a                         jmp     0x8c <__JIT_ENTRY+0x8c>
    // 62: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 65: 53                            pushl   %ebx
    // 66: 68 00 00 00 00                pushl   $0x0
    // 00000067:  IMAGE_REL_I386_DIR32 ??_C@_0BN@DBLGJMNF@name?5?8?$CF?4200s?8?5is?5not?5defined?$AA@
    // 6b: ff 35 00 00 00 00             pushl   0x0
    // 0000006d:  IMAGE_REL_I386_DIR32 _PyExc_NameError
    // 71: 57                            pushl   %edi
    // 72: e8 00 00 00 00                calll   0x77 <__JIT_ENTRY+0x77>
    // 00000073:  IMAGE_REL_I386_REL32 __PyEval_FormatExcCheckArg
    // 77: 83 c4 10                      addl    $0x10, %esp
    // 7a: 8b 46 20                      movl    0x20(%esi), %eax
    // 7d: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 84: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 88: 89 44 24 18                   movl    %eax, 0x18(%esp)
    // 8c: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 90: 5e                            popl    %esi
    // 91: 5f                            popl    %edi
    // 92: 5b                            popl    %ebx
    // 93: 5d                            popl    %ebp
    // 94: e9 00 00 00 00                jmp     0x99 <__JIT_ENTRY+0x99>
    // 00000095:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[153] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x18,
        0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9,
        0x8b, 0x16, 0x8b, 0x6e, 0x0c, 0x8b, 0x52, 0x10,
        0x8b, 0x5c, 0x8a, 0x0c, 0x89, 0x46, 0x20, 0x6a,
        0x00, 0x53, 0x55, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x0c, 0x8b, 0x4e, 0x20, 0xc7, 0x46,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78,
        0x17, 0x74, 0x1f, 0x89, 0x7c, 0x24, 0x1c, 0x89,
        0x4c, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x7c, 0x24, 0x1c, 0x89, 0x4c, 0x24, 0x18,
        0xeb, 0x2a, 0x89, 0x4e, 0x20, 0x53, 0x68, 0x00,
        0x00, 0x00, 0x00, 0xff, 0x35, 0x00, 0x00, 0x00,
        0x00, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x10, 0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x1c,
        0x89, 0x44, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: "name '%.200s' is not defined\x00"
    // 1d: 00 00 00
    const unsigned char data_body[32] = {
        0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e,
        0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73,
        0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66,
        0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x11, instruction->oparg);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)&PyDict_Pop + -0x4);
    patch_x86_64_32rx(code + 0x54, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32(code + 0x67, (uintptr_t)data);
    patch_32(code + 0x6d, (uintptr_t)&PyExc_NameError);
    patch_x86_64_32rx(code + 0x73, (uintptr_t)&_PyEval_FormatExcCheckArg + -0x4);
    patch_x86_64_32rx(code + 0x95, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__DELETE_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_NAME.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 7: 8b 74 24 10                   movl    0x10(%esp), %esi
    // b: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // f: b8 00 00 00 00                movl    $0x0, %eax
    // 00000010:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 14: 0f b7 d0                      movzwl  %ax, %edx
    // 17: 8b 1e                         movl    (%esi), %ebx
    // 19: 8b 46 14                      movl    0x14(%esi), %eax
    // 1c: 8b 5b 10                      movl    0x10(%ebx), %ebx
    // 1f: 8b 5c 93 0c                   movl    0xc(%ebx,%edx,4), %ebx
    // 23: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 26: 85 c0                         testl   %eax, %eax
    // 28: 74 44                         je      0x6e <__JIT_ENTRY+0x6e>
    // 2a: 53                            pushl   %ebx
    // 2b: 50                            pushl   %eax
    // 2c: e8 00 00 00 00                calll   0x31 <__JIT_ENTRY+0x31>
    // 0000002d:  IMAGE_REL_I386_REL32 _PyObject_DelItem
    // 31: 83 c4 08                      addl    $0x8, %esp
    // 34: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 37: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 3e: 85 c0                         testl   %eax, %eax
    // 40: 74 5f                         je      0xa1 <__JIT_ENTRY+0xa1>
    // 42: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 45: 53                            pushl   %ebx
    // 46: 68 00 00 00 00                pushl   $0x0
    // 00000047:  IMAGE_REL_I386_DIR32 ??_C@_0BN@DBLGJMNF@name?5?8?$CF?4200s?8?5is?5not?5defined?$AA@
    // 4b: ff 35 00 00 00 00             pushl   0x0
    // 0000004d:  IMAGE_REL_I386_DIR32 _PyExc_NameError
    // 51: 57                            pushl   %edi
    // 52: e8 00 00 00 00                calll   0x57 <__JIT_ENTRY+0x57>
    // 00000053:  IMAGE_REL_I386_REL32 __PyEval_FormatExcCheckArg
    // 57: 83 c4 10                      addl    $0x10, %esp
    // 5a: 8b 46 20                      movl    0x20(%esi), %eax
    // 5d: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 64: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 68: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 6c: eb 27                         jmp     0x95 <__JIT_ENTRY+0x95>
    // 6e: 53                            pushl   %ebx
    // 6f: 68 00 00 00 00                pushl   $0x0
    // 00000070:  IMAGE_REL_I386_DIR32 ??_C@_0BL@HJKLBJNK@no?5locals?5when?5deleting?5?$CFR?$AA@
    // 74: ff 35 00 00 00 00             pushl   0x0
    // 00000076:  IMAGE_REL_I386_DIR32 _PyExc_SystemError
    // 7a: 57                            pushl   %edi
    // 7b: e8 00 00 00 00                calll   0x80 <__JIT_ENTRY+0x80>
    // 0000007c:  IMAGE_REL_I386_REL32 __PyErr_Format
    // 80: 83 c4 10                      addl    $0x10, %esp
    // 83: 8b 46 20                      movl    0x20(%esi), %eax
    // 86: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 8d: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 91: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 95: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 99: 5e                            popl    %esi
    // 9a: 5f                            popl    %edi
    // 9b: 5b                            popl    %ebx
    // 9c: e9 00 00 00 00                jmp     0xa1 <__JIT_ENTRY+0xa1>
    // 0000009d:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // a1: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // a5: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // a9: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // ad: 5e                            popl    %esi
    // ae: 5f                            popl    %edi
    // af: 5b                            popl    %ebx
    // b0: e9 00 00 00 00                jmp     0xb5 <__JIT_ENTRY+0xb5>
    // 000000b1:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[176] = {
        0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x18, 0x8b,
        0x74, 0x24, 0x10, 0x8b, 0x4c, 0x24, 0x14, 0xb8,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x8b,
        0x1e, 0x8b, 0x46, 0x14, 0x8b, 0x5b, 0x10, 0x8b,
        0x5c, 0x93, 0x0c, 0x89, 0x4e, 0x20, 0x85, 0xc0,
        0x74, 0x44, 0x53, 0x50, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x08, 0x8b, 0x4e, 0x20, 0xc7,
        0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0,
        0x74, 0x5f, 0x89, 0x4e, 0x20, 0x53, 0x68, 0x00,
        0x00, 0x00, 0x00, 0xff, 0x35, 0x00, 0x00, 0x00,
        0x00, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x10, 0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x18,
        0x89, 0x44, 0x24, 0x14, 0xeb, 0x27, 0x53, 0x68,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x35, 0x00, 0x00,
        0x00, 0x00, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x10, 0x8b, 0x46, 0x20, 0xc7, 0x46,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24,
        0x14, 0x89, 0x7c, 0x24, 0x18, 0x89, 0x74, 0x24,
        0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x7c, 0x24, 0x18, 0x89, 0x4c, 0x24,
        0x14, 0x89, 0x74, 0x24, 0x10, 0x5e, 0x5f, 0x5b,
    };
    // 0: "no locals when deleting %R\x00name '%.200s' is not defined\x00"
    const unsigned char data_body[56] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64,
        0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20,
        0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20,
        0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27,
        0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
        0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x10, instruction->oparg);
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)&PyObject_DelItem + -0x4);
    patch_32(code + 0x47, (uintptr_t)data + 0x1b);
    patch_32(code + 0x4d, (uintptr_t)&PyExc_NameError);
    patch_x86_64_32rx(code + 0x53, (uintptr_t)&_PyEval_FormatExcCheckArg + -0x4);
    patch_32(code + 0x70, (uintptr_t)data);
    patch_32(code + 0x76, (uintptr_t)&PyExc_SystemError);
    patch_x86_64_32rx(code + 0x7c, (uintptr_t)&_PyErr_Format + -0x4);
    patch_x86_64_32rx(code + 0x9d, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__DELETE_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_SUBSCR.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 9: 89 04 24                      movl    %eax, (%esp)
    // c: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 10: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 14: 8b 70 f8                      movl    -0x8(%eax), %esi
    // 17: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 1a: 89 47 20                      movl    %eax, 0x20(%edi)
    // 1d: 53                            pushl   %ebx
    // 1e: 56                            pushl   %esi
    // 1f: e8 00 00 00 00                calll   0x24 <__JIT_ENTRY+0x24>
    // 00000020:  IMAGE_REL_I386_REL32 _PyObject_DelItem
    // 24: 83 c4 08                      addl    $0x8, %esp
    // 27: 8b 6f 20                      movl    0x20(%edi), %ebp
    // 2a: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 31: 8b 0e                         movl    (%esi), %ecx
    // 33: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 39: 7f 05                         jg      0x40 <__JIT_ENTRY+0x40>
    // 3b: 49                            decl    %ecx
    // 3c: 89 0e                         movl    %ecx, (%esi)
    // 3e: 74 1e                         je      0x5e <__JIT_ENTRY+0x5e>
    // 40: 8b 0b                         movl    (%ebx), %ecx
    // 42: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 48: 7f 2b                         jg      0x75 <__JIT_ENTRY+0x75>
    // 4a: 49                            decl    %ecx
    // 4b: 89 0b                         movl    %ecx, (%ebx)
    // 4d: 75 26                         jne     0x75 <__JIT_ENTRY+0x75>
    // 4f: 53                            pushl   %ebx
    // 50: 89 c6                         movl    %eax, %esi
    // 52: e8 00 00 00 00                calll   0x57 <__JIT_ENTRY+0x57>
    // 00000053:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 57: 89 f0                         movl    %esi, %eax
    // 59: 83 c4 04                      addl    $0x4, %esp
    // 5c: eb 17                         jmp     0x75 <__JIT_ENTRY+0x75>
    // 5e: 56                            pushl   %esi
    // 5f: 89 c6                         movl    %eax, %esi
    // 61: e8 00 00 00 00                calll   0x66 <__JIT_ENTRY+0x66>
    // 00000062:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 66: 89 f0                         movl    %esi, %eax
    // 68: 83 c4 04                      addl    $0x4, %esp
    // 6b: 8b 0b                         movl    (%ebx), %ecx
    // 6d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 73: 7e d5                         jle     0x4a <__JIT_ENTRY+0x4a>
    // 75: 83 c5 f8                      addl    $-0x8, %ebp
    // 78: 85 c0                         testl   %eax, %eax
    // 7a: 74 1b                         je      0x97 <__JIT_ENTRY+0x97>
    // 7c: 8b 04 24                      movl    (%esp), %eax
    // 7f: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 83: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // 87: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 8b: 83 c4 04                      addl    $0x4, %esp
    // 8e: 5e                            popl    %esi
    // 8f: 5f                            popl    %edi
    // 90: 5b                            popl    %ebx
    // 91: 5d                            popl    %ebp
    // 92: e9 00 00 00 00                jmp     0x97 <__JIT_ENTRY+0x97>
    // 00000093:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // 97: 8b 04 24                      movl    (%esp), %eax
    // 9a: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 9e: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // a2: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // a6: 83 c4 04                      addl    $0x4, %esp
    // a9: 5e                            popl    %esi
    // aa: 5f                            popl    %edi
    // ab: 5b                            popl    %ebx
    // ac: 5d                            popl    %ebp
    // ad: e9 00 00 00 00                jmp     0xb2 <__JIT_ENTRY+0xb2>
    // 000000ae:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[173] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x44, 0x24,
        0x20, 0x89, 0x04, 0x24, 0x8b, 0x7c, 0x24, 0x18,
        0x8b, 0x44, 0x24, 0x1c, 0x8b, 0x70, 0xf8, 0x8b,
        0x58, 0xfc, 0x89, 0x47, 0x20, 0x53, 0x56, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x08, 0x8b,
        0x6f, 0x20, 0xc7, 0x47, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x0e, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x05, 0x49, 0x89, 0x0e, 0x74, 0x1e,
        0x8b, 0x0b, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x2b, 0x49, 0x89, 0x0b, 0x75, 0x26, 0x53,
        0x89, 0xc6, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xf0, 0x83, 0xc4, 0x04, 0xeb, 0x17, 0x56, 0x89,
        0xc6, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf0,
        0x83, 0xc4, 0x04, 0x8b, 0x0b, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7e, 0xd5, 0x83, 0xc5, 0xf8,
        0x85, 0xc0, 0x74, 0x1b, 0x8b, 0x04, 0x24, 0x89,
        0x44, 0x24, 0x20, 0x89, 0x6c, 0x24, 0x1c, 0x89,
        0x7c, 0x24, 0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x04, 0x24, 0x89, 0x44, 0x24, 0x20, 0x89, 0x6c,
        0x24, 0x1c, 0x89, 0x7c, 0x24, 0x18, 0x83, 0xc4,
        0x04, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x20, (uintptr_t)&PyObject_DelItem + -0x4);
    patch_x86_64_32rx(code + 0x53, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x62, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x93, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__DEOPT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DEOPT.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 4: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 8: 8b 54 24 0c                   movl    0xc(%esp), %edx
    // c: c7 82 a4 00 00 00 00 00 00 00 movl    $0x0, 0xa4(%edx)
    // 00000012:  IMAGE_REL_I386_DIR32 __JIT_EXECUTOR
    // 16: 89 41 20                      movl    %eax, 0x20(%ecx)
    // 19: 8b 01                         movl    (%ecx), %eax
    // 1b: b9 00 00 00 00                movl    $0x0, %ecx
    // 0000001c:  IMAGE_REL_I386_DIR32 __JIT_TARGET
    // 20: 8d 04 48                      leal    (%eax,%ecx,2), %eax
    // 23: 05 80 00 00 00                addl    $0x80, %eax
    // 28: c3                            retl
    const unsigned char code_body[41] = {
        0x8b, 0x44, 0x24, 0x08, 0x8b, 0x4c, 0x24, 0x04,
        0x8b, 0x54, 0x24, 0x0c, 0xc7, 0x82, 0xa4, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x41,
        0x20, 0x8b, 0x01, 0xb9, 0x00, 0x00, 0x00, 0x00,
        0x8d, 0x04, 0x48, 0x05, 0x80, 0x00, 0x00, 0x00,
        0xc3,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x12, (uintptr_t)executor);
    patch_32(code + 0x1c, instruction->target);
}

void
emit__DICT_MERGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DICT_MERGE.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 7c 24 20                   movl    0x20(%esp), %edi
    // 9: 8b 74 24 18                   movl    0x18(%esp), %esi
    // d: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 11: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000012:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 16: 0f b7 c9                      movzwl  %cx, %ecx
    // 19: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 1c: ba fc ff ff ff                movl    $0xfffffffc, %edx       # imm = 0xFFFFFFFC
    // 21: 29 ca                         subl    %ecx, %edx
    // 23: f7 d1                         notl    %ecx
    // 25: 8b 0c 88                      movl    (%eax,%ecx,4), %ecx
    // 28: 8b 14 90                      movl    (%eax,%edx,4), %edx
    // 2b: 89 14 24                      movl    %edx, (%esp)
    // 2e: 89 46 20                      movl    %eax, 0x20(%esi)
    // 31: 6a 02                         pushl   $0x2
    // 33: 53                            pushl   %ebx
    // 34: 51                            pushl   %ecx
    // 35: e8 00 00 00 00                calll   0x3a <__JIT_ENTRY+0x3a>
    // 00000036:  IMAGE_REL_I386_REL32 __PyDict_MergeEx
    // 3a: 83 c4 0c                      addl    $0xc, %esp
    // 3d: 8b 6e 20                      movl    0x20(%esi), %ebp
    // 40: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 47: 85 c0                         testl   %eax, %eax
    // 49: 78 32                         js      0x7d <__JIT_ENTRY+0x7d>
    // 4b: 8b 03                         movl    (%ebx), %eax
    // 4d: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 52: 7f 0e                         jg      0x62 <__JIT_ENTRY+0x62>
    // 54: 48                            decl    %eax
    // 55: 89 03                         movl    %eax, (%ebx)
    // 57: 75 09                         jne     0x62 <__JIT_ENTRY+0x62>
    // 59: 53                            pushl   %ebx
    // 5a: e8 00 00 00 00                calll   0x5f <__JIT_ENTRY+0x5f>
    // 0000005b:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 5f: 83 c4 04                      addl    $0x4, %esp
    // 62: 83 c5 fc                      addl    $-0x4, %ebp
    // 65: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // 69: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 6d: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // 71: 83 c4 04                      addl    $0x4, %esp
    // 74: 5e                            popl    %esi
    // 75: 5f                            popl    %edi
    // 76: 5b                            popl    %ebx
    // 77: 5d                            popl    %ebp
    // 78: e9 00 00 00 00                jmp     0x7d <__JIT_ENTRY+0x7d>
    // 00000079:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 7d: 89 6e 20                      movl    %ebp, 0x20(%esi)
    // 80: 53                            pushl   %ebx
    // 81: ff 74 24 04                   pushl   0x4(%esp)
    // 85: 57                            pushl   %edi
    // 86: e8 00 00 00 00                calll   0x8b <__JIT_ENTRY+0x8b>
    // 00000087:  IMAGE_REL_I386_REL32 __PyEval_FormatKwargsError
    // 8b: 83 c4 0c                      addl    $0xc, %esp
    // 8e: 8b 6e 20                      movl    0x20(%esi), %ebp
    // 91: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 98: 8b 03                         movl    (%ebx), %eax
    // 9a: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 9f: 7f 0e                         jg      0xaf <__JIT_ENTRY+0xaf>
    // a1: 48                            decl    %eax
    // a2: 89 03                         movl    %eax, (%ebx)
    // a4: 75 09                         jne     0xaf <__JIT_ENTRY+0xaf>
    // a6: 53                            pushl   %ebx
    // a7: e8 00 00 00 00                calll   0xac <__JIT_ENTRY+0xac>
    // 000000a8:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // ac: 83 c4 04                      addl    $0x4, %esp
    // af: 83 c5 fc                      addl    $-0x4, %ebp
    // b2: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // b6: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // ba: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // be: 83 c4 04                      addl    $0x4, %esp
    // c1: 5e                            popl    %esi
    // c2: 5f                            popl    %edi
    // c3: 5b                            popl    %ebx
    // c4: 5d                            popl    %ebp
    // c5: e9 00 00 00 00                jmp     0xca <__JIT_ENTRY+0xca>
    // 000000c6:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[202] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x7c, 0x24,
        0x20, 0x8b, 0x74, 0x24, 0x18, 0x8b, 0x44, 0x24,
        0x1c, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xc9, 0x8b, 0x58, 0xfc, 0xba, 0xfc, 0xff, 0xff,
        0xff, 0x29, 0xca, 0xf7, 0xd1, 0x8b, 0x0c, 0x88,
        0x8b, 0x14, 0x90, 0x89, 0x14, 0x24, 0x89, 0x46,
        0x20, 0x6a, 0x02, 0x53, 0x51, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b, 0x6e, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x85,
        0xc0, 0x78, 0x32, 0x8b, 0x03, 0x3d, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x0e, 0x48, 0x89, 0x03, 0x75,
        0x09, 0x53, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x83, 0xc5, 0xfc, 0x89, 0x7c, 0x24,
        0x20, 0x89, 0x74, 0x24, 0x18, 0x89, 0x6c, 0x24,
        0x1c, 0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x6e, 0x20,
        0x53, 0xff, 0x74, 0x24, 0x04, 0x57, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b, 0x6e,
        0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x03, 0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x0e, 0x48, 0x89, 0x03, 0x75, 0x09, 0x53, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x83,
        0xc5, 0xfc, 0x89, 0x7c, 0x24, 0x20, 0x89, 0x74,
        0x24, 0x18, 0x89, 0x6c, 0x24, 0x1c, 0x83, 0xc4,
        0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x12, instruction->oparg);
    patch_x86_64_32rx(code + 0x36, (uintptr_t)&_PyDict_MergeEx + -0x4);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x79, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x87, (uintptr_t)&_PyEval_FormatKwargsError + -0x4);
    patch_x86_64_32rx(code + 0xa8, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xc6, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__DICT_UPDATE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DICT_UPDATE.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 10: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000011:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 15: f7 d1                         notl    %ecx
    // 17: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 1a: c1 e1 02                      shll    $0x2, %ecx
    // 1d: 81 c9 00 00 fc ff             orl     $0xfffc0000, %ecx       # imm = 0xFFFC0000
    // 23: 8b 0c 08                      movl    (%eax,%ecx), %ecx
    // 26: 89 46 20                      movl    %eax, 0x20(%esi)
    // 29: 53                            pushl   %ebx
    // 2a: 51                            pushl   %ecx
    // 2b: e8 00 00 00 00                calll   0x30 <__JIT_ENTRY+0x30>
    // 0000002c:  IMAGE_REL_I386_REL32 _PyDict_Update
    // 30: 83 c4 08                      addl    $0x8, %esp
    // 33: 8b 6e 20                      movl    0x20(%esi), %ebp
    // 36: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 3d: 85 c0                         testl   %eax, %eax
    // 3f: 78 2f                         js      0x70 <__JIT_ENTRY+0x70>
    // 41: 8b 03                         movl    (%ebx), %eax
    // 43: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 48: 7f 0e                         jg      0x58 <__JIT_ENTRY+0x58>
    // 4a: 48                            decl    %eax
    // 4b: 89 03                         movl    %eax, (%ebx)
    // 4d: 75 09                         jne     0x58 <__JIT_ENTRY+0x58>
    // 4f: 53                            pushl   %ebx
    // 50: e8 00 00 00 00                calll   0x55 <__JIT_ENTRY+0x55>
    // 00000051:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 55: 83 c4 04                      addl    $0x4, %esp
    // 58: 83 c5 fc                      addl    $-0x4, %ebp
    // 5b: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 5f: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 63: 89 6c 24 18                   movl    %ebp, 0x18(%esp)
    // 67: 5e                            popl    %esi
    // 68: 5f                            popl    %edi
    // 69: 5b                            popl    %ebx
    // 6a: 5d                            popl    %ebp
    // 6b: e9 00 00 00 00                jmp     0x70 <__JIT_ENTRY+0x70>
    // 0000006c:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 70: 89 6e 20                      movl    %ebp, 0x20(%esi)
    // 73: ff 35 00 00 00 00             pushl   0x0
    // 00000075:  IMAGE_REL_I386_DIR32 _PyExc_AttributeError
    // 79: 57                            pushl   %edi
    // 7a: e8 00 00 00 00                calll   0x7f <__JIT_ENTRY+0x7f>
    // 0000007b:  IMAGE_REL_I386_REL32 __PyErr_ExceptionMatches
    // 7f: 83 c4 08                      addl    $0x8, %esp
    // 82: 8b 6e 20                      movl    0x20(%esi), %ebp
    // 85: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 8c: 85 c0                         testl   %eax, %eax
    // 8e: 74 27                         je      0xb7 <__JIT_ENTRY+0xb7>
    // 90: 89 6e 20                      movl    %ebp, 0x20(%esi)
    // 93: 8b 43 04                      movl    0x4(%ebx), %eax
    // 96: ff 70 0c                      pushl   0xc(%eax)
    // 99: 68 00 00 00 00                pushl   $0x0
    // 0000009a:  IMAGE_REL_I386_DIR32 ??_C@_0CB@CMJMJEG@?8?$CF?4200s?8?5object?5is?5not?5a?5mapping@
    // 9e: ff 35 00 00 00 00             pushl   0x0
    // 000000a0:  IMAGE_REL_I386_DIR32 _PyExc_TypeError
    // a4: 57                            pushl   %edi
    // a5: e8 00 00 00 00                calll   0xaa <__JIT_ENTRY+0xaa>
    // 000000a6:  IMAGE_REL_I386_REL32 __PyErr_Format
    // aa: 83 c4 10                      addl    $0x10, %esp
    // ad: 8b 6e 20                      movl    0x20(%esi), %ebp
    // b0: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // b7: 8b 03                         movl    (%ebx), %eax
    // b9: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // be: 7f 0e                         jg      0xce <__JIT_ENTRY+0xce>
    // c0: 48                            decl    %eax
    // c1: 89 03                         movl    %eax, (%ebx)
    // c3: 75 09                         jne     0xce <__JIT_ENTRY+0xce>
    // c5: 53                            pushl   %ebx
    // c6: e8 00 00 00 00                calll   0xcb <__JIT_ENTRY+0xcb>
    // 000000c7:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // cb: 83 c4 04                      addl    $0x4, %esp
    // ce: 83 c5 fc                      addl    $-0x4, %ebp
    // d1: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // d5: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // d9: 89 6c 24 18                   movl    %ebp, 0x18(%esp)
    // dd: 5e                            popl    %esi
    // de: 5f                            popl    %edi
    // df: 5b                            popl    %ebx
    // e0: 5d                            popl    %ebp
    // e1: e9 00 00 00 00                jmp     0xe6 <__JIT_ENTRY+0xe6>
    // 000000e2:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[230] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x18,
        0xb9, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x8b,
        0x58, 0xfc, 0xc1, 0xe1, 0x02, 0x81, 0xc9, 0x00,
        0x00, 0xfc, 0xff, 0x8b, 0x0c, 0x08, 0x89, 0x46,
        0x20, 0x53, 0x51, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x08, 0x8b, 0x6e, 0x20, 0xc7, 0x46,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78,
        0x2f, 0x8b, 0x03, 0x3d, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x0e, 0x48, 0x89, 0x03, 0x75, 0x09, 0x53,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04,
        0x83, 0xc5, 0xfc, 0x89, 0x7c, 0x24, 0x1c, 0x89,
        0x74, 0x24, 0x14, 0x89, 0x6c, 0x24, 0x18, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x6e, 0x20, 0xff, 0x35, 0x00, 0x00, 0x00,
        0x00, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x08, 0x8b, 0x6e, 0x20, 0xc7, 0x46, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x27,
        0x89, 0x6e, 0x20, 0x8b, 0x43, 0x04, 0xff, 0x70,
        0x0c, 0x68, 0x00, 0x00, 0x00, 0x00, 0xff, 0x35,
        0x00, 0x00, 0x00, 0x00, 0x57, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x10, 0x8b, 0x6e, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x03, 0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e,
        0x48, 0x89, 0x03, 0x75, 0x09, 0x53, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x83, 0xc5,
        0xfc, 0x89, 0x7c, 0x24, 0x1c, 0x89, 0x74, 0x24,
        0x14, 0x89, 0x6c, 0x24, 0x18, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: "'%.200s' object is not a mapping\x00"
    // 21: 00 00 00 00 00 00 00
    const unsigned char data_body[40] = {
        0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27,
        0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
        0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x11, instruction->oparg);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)&PyDict_Update + -0x4);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x6c, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32(code + 0x75, (uintptr_t)&PyExc_AttributeError);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)&_PyErr_ExceptionMatches + -0x4);
    patch_32(code + 0x9a, (uintptr_t)data);
    patch_32(code + 0xa0, (uintptr_t)&PyExc_TypeError);
    patch_x86_64_32rx(code + 0xa6, (uintptr_t)&_PyErr_Format + -0x4);
    patch_x86_64_32rx(code + 0xc7, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xe2, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__END_FOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _END_FOR.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // e: 8b 41 fc                      movl    -0x4(%ecx), %eax
    // 11: 83 c1 fc                      addl    $-0x4, %ecx
    // 14: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 17: 8b 08                         movl    (%eax), %ecx
    // 19: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 1f: 7f 0e                         jg      0x2f <__JIT_ENTRY+0x2f>
    // 21: 49                            decl    %ecx
    // 22: 89 08                         movl    %ecx, (%eax)
    // 24: 75 09                         jne     0x2f <__JIT_ENTRY+0x2f>
    // 26: 50                            pushl   %eax
    // 27: e8 00 00 00 00                calll   0x2c <__JIT_ENTRY+0x2c>
    // 00000028:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 2c: 83 c4 04                      addl    $0x4, %esp
    // 2f: 8b 46 20                      movl    0x20(%esi), %eax
    // 32: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 39: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 3d: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 41: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 45: 5e                            popl    %esi
    // 46: 5f                            popl    %edi
    // 47: e9 00 00 00 00                jmp     0x4c <__JIT_ENTRY+0x4c>
    // 00000048:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[71] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x10, 0x8b, 0x41,
        0xfc, 0x83, 0xc1, 0xfc, 0x89, 0x4e, 0x20, 0x8b,
        0x08, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x0e, 0x49, 0x89, 0x08, 0x75, 0x09, 0x50, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b,
        0x46, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x7c, 0x24, 0x14, 0x89, 0x44, 0x24,
        0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x28, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__END_SEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _END_SEND.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 7c 24 20                   movl    0x20(%esp), %edi
    // 9: 8b 6c 24 1c                   movl    0x1c(%esp), %ebp
    // d: 8b 54 24 18                   movl    0x18(%esp), %edx
    // 11: 8d 5d fc                      leal    -0x4(%ebp), %ebx
    // 14: 8b 45 f8                      movl    -0x8(%ebp), %eax
    // 17: 8b 75 fc                      movl    -0x4(%ebp), %esi
    // 1a: 8b 08                         movl    (%eax), %ecx
    // 1c: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 22: 7f 16                         jg      0x3a <__JIT_ENTRY+0x3a>
    // 24: 49                            decl    %ecx
    // 25: 89 08                         movl    %ecx, (%eax)
    // 27: 75 11                         jne     0x3a <__JIT_ENTRY+0x3a>
    // 29: 50                            pushl   %eax
    // 2a: 89 54 24 04                   movl    %edx, 0x4(%esp)
    // 2e: e8 00 00 00 00                calll   0x33 <__JIT_ENTRY+0x33>
    // 0000002f:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 33: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 37: 83 c4 04                      addl    $0x4, %esp
    // 3a: 89 75 f8                      movl    %esi, -0x8(%ebp)
    // 3d: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // 41: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 45: 89 54 24 18                   movl    %edx, 0x18(%esp)
    // 49: 83 c4 04                      addl    $0x4, %esp
    // 4c: 5e                            popl    %esi
    // 4d: 5f                            popl    %edi
    // 4e: 5b                            popl    %ebx
    // 4f: 5d                            popl    %ebp
    // 50: e9 00 00 00 00                jmp     0x55 <__JIT_ENTRY+0x55>
    // 00000051:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[80] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x7c, 0x24,
        0x20, 0x8b, 0x6c, 0x24, 0x1c, 0x8b, 0x54, 0x24,
        0x18, 0x8d, 0x5d, 0xfc, 0x8b, 0x45, 0xf8, 0x8b,
        0x75, 0xfc, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x16, 0x49, 0x89, 0x08, 0x75,
        0x11, 0x50, 0x89, 0x54, 0x24, 0x04, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x54, 0x24, 0x04, 0x83,
        0xc4, 0x04, 0x89, 0x75, 0xf8, 0x89, 0x7c, 0x24,
        0x20, 0x89, 0x5c, 0x24, 0x1c, 0x89, 0x54, 0x24,
        0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__ERROR_POP_N(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ERROR_POP_N.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 5: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 9: 8b 54 24 10                   movl    0x10(%esp), %edx
    // d: c7 82 a4 00 00 00 00 00 00 00 movl    $0x0, 0xa4(%edx)
    // 00000013:  IMAGE_REL_I386_DIR32 __JIT_EXECUTOR
    // 17: 8b 11                         movl    (%ecx), %edx
    // 19: be 00 00 00 00                movl    $0x0, %esi
    // 0000001a:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 1e: 8d 14 72                      leal    (%edx,%esi,2), %edx
    // 21: 81 c2 80 00 00 00             addl    $0x80, %edx
    // 27: 89 51 1c                      movl    %edx, 0x1c(%ecx)
    // 2a: 89 41 20                      movl    %eax, 0x20(%ecx)
    // 2d: 31 c0                         xorl    %eax, %eax
    // 2f: 5e                            popl    %esi
    // 30: c3                            retl
    const unsigned char code_body[49] = {
        0x56, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x4c, 0x24,
        0x08, 0x8b, 0x54, 0x24, 0x10, 0xc7, 0x82, 0xa4,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x11, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x8d, 0x14,
        0x72, 0x81, 0xc2, 0x80, 0x00, 0x00, 0x00, 0x89,
        0x51, 0x1c, 0x89, 0x41, 0x20, 0x31, 0xc0, 0x5e,
        0xc3,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (uintptr_t)executor);
    patch_32(code + 0x1a, (instruction->operand0 & UINT32_MAX));
}

void
emit__EXIT_INIT_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _EXIT_INIT_CHECK.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 44 24 10                   movl    0x10(%esp), %eax
    // a: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // e: 8b 48 fc                      movl    -0x4(%eax), %ecx
    // 11: 81 f9 00 00 00 00             cmpl    $0x0, %ecx
    // 00000013:  IMAGE_REL_I386_DIR32 __Py_NoneStruct
    // 17: 74 39                         je      0x52 <__JIT_ENTRY+0x52>
    // 19: 89 46 20                      movl    %eax, 0x20(%esi)
    // 1c: 8b 41 04                      movl    0x4(%ecx), %eax
    // 1f: ff 70 0c                      pushl   0xc(%eax)
    // 22: 68 00 00 00 00                pushl   $0x0
    // 00000023:  IMAGE_REL_I386_DIR32 ??_C@_0CM@HKPEOANK@__init__?$CI?$CJ?5should?5return?5None?0?5n@
    // 27: ff 35 00 00 00 00             pushl   0x0
    // 00000029:  IMAGE_REL_I386_DIR32 _PyExc_TypeError
    // 2d: e8 00 00 00 00                calll   0x32 <__JIT_ENTRY+0x32>
    // 0000002e:  IMAGE_REL_I386_REL32 _PyErr_Format
    // 32: 83 c4 0c                      addl    $0xc, %esp
    // 35: 8b 46 20                      movl    0x20(%esi), %eax
    // 38: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 3f: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 43: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 47: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 4b: 5e                            popl    %esi
    // 4c: 5f                            popl    %edi
    // 4d: e9 00 00 00 00                jmp     0x52 <__JIT_ENTRY+0x52>
    // 0000004e:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // 52: 83 c0 fc                      addl    $-0x4, %eax
    // 55: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 59: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 5d: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 61: 5e                            popl    %esi
    // 62: 5f                            popl    %edi
    // 63: e9 00 00 00 00                jmp     0x68 <__JIT_ENTRY+0x68>
    // 00000064:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[99] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x44,
        0x24, 0x10, 0x8b, 0x74, 0x24, 0x0c, 0x8b, 0x48,
        0xfc, 0x81, 0xf9, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x39, 0x89, 0x46, 0x20, 0x8b, 0x41, 0x04, 0xff,
        0x70, 0x0c, 0x68, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x35, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b, 0x46, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x89,
        0x44, 0x24, 0x10, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x74, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc0, 0xfc, 0x89, 0x7c, 0x24,
        0x14, 0x89, 0x44, 0x24, 0x10, 0x89, 0x74, 0x24,
        0x0c, 0x5e, 0x5f,
    };
    // 0: "__init__() should return None, not '%.200s'\x00"
    // 2c: 00 00 00 00
    const unsigned char data_body[48] = {
        0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f,
        0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
        0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
        0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e,
        0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30,
        0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (uintptr_t)&_Py_NoneStruct);
    patch_32(code + 0x23, (uintptr_t)data);
    patch_32(code + 0x29, (uintptr_t)&PyExc_TypeError);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)&PyErr_Format + -0x4);
    patch_x86_64_32rx(code + 0x4e, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__EXIT_TRACE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _EXIT_TRACE.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 7c 24 20                   movl    0x20(%esp), %edi
    // 9: 8b 54 24 1c                   movl    0x1c(%esp), %edx
    // d: 8b 74 24 18                   movl    0x18(%esp), %esi
    // 11: 8b 2e                         movl    (%esi), %ebp
    // 13: 8b 1d 00 00 00 00             movl    0x0, %ebx
    // 00000015:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 19: a1 08 00 00 00                movl    0x8, %eax
    // 0000001a:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 1e: 85 c0                         testl   %eax, %eax
    // 20: 0f 84 fa 00 00 00             je      0x120 <__JIT_ENTRY+0x120>
    // 26: f6 40 12 01                   testb   $0x1, 0x12(%eax)
    // 2a: 0f 85 b2 00 00 00             jne     0xe2 <__JIT_ENTRY+0xe2>
    // 30: 66 c7 05 04 00 00 00 fc ff    movw    $0xfffc, 0x4            # imm = 0xFFFC
    // 00000033:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 39: 89 56 20                      movl    %edx, 0x20(%esi)
    // 3c: c7 05 08 00 00 00 00 00 00 00 movl    $0x0, 0x8
    // 0000003e:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 46: 8b 08                         movl    (%eax), %ecx
    // 48: 81 f9 00 00 00 40             cmpl    $0x40000000, %ecx       # imm = 0x40000000
    // 4e: 0f 8d c2 00 00 00             jge     0x116 <__JIT_ENTRY+0x116>
    // 54: 49                            decl    %ecx
    // 55: 89 08                         movl    %ecx, (%eax)
    // 57: 75 09                         jne     0x62 <__JIT_ENTRY+0x62>
    // 59: 50                            pushl   %eax
    // 5a: e8 00 00 00 00                calll   0x5f <__JIT_ENTRY+0x5f>
    // 0000005b:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 5f: 83 c4 04                      addl    $0x4, %esp
    // 62: a1 08 00 00 00                movl    0x8, %eax
    // 00000063:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 67: 8b 56 20                      movl    0x20(%esi), %edx
    // 6a: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 71: c7 87 a4 00 00 00 00 00 00 00 movl    $0x0, 0xa4(%edi)
    // 00000077:  IMAGE_REL_I386_DIR32 __JIT_EXECUTOR
    // 7b: 85 c0                         testl   %eax, %eax
    // 7d: 75 6d                         jne     0xec <__JIT_ENTRY+0xec>
    // 7f: 8d 04 5d 80 00 00 00          leal    0x80(,%ebx,2), %eax
    // 86: 01 e8                         addl    %ebp, %eax
    // 88: 0f b7 1d 04 00 00 00          movzwl  0x4, %ebx
    // 0000008b:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 8f: 83 fb 0f                      cmpl    $0xf, %ebx
    // 92: 0f 83 ab 00 00 00             jae     0x143 <__JIT_ENTRY+0x143>
    // 98: 80 38 ff                      cmpb    $-0x1, (%eax)
    // 9b: 0f 84 b7 00 00 00             je      0x158 <__JIT_ENTRY+0x158>
    // a1: 0f b6 0d 12 00 00 00          movzbl  0x12, %ecx
    // 000000a4:  IMAGE_REL_I386_DIR32 __JIT_EXECUTOR
    // a8: c1 e9 02                      shrl    $0x2, %ecx
    // ab: 41                            incl    %ecx
    // ac: 89 56 20                      movl    %edx, 0x20(%esi)
    // af: 89 e2                         movl    %esp, %edx
    // b1: 51                            pushl   %ecx
    // b2: 52                            pushl   %edx
    // b3: 89 c5                         movl    %eax, %ebp
    // b5: 50                            pushl   %eax
    // b6: 56                            pushl   %esi
    // b7: e8 00 00 00 00                calll   0xbc <__JIT_ENTRY+0xbc>
    // 000000b8:  IMAGE_REL_I386_REL32 __PyOptimizer_Optimize
    // bc: 83 c4 10                      addl    $0x10, %esp
    // bf: 8b 56 20                      movl    0x20(%esi), %edx
    // c2: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // c9: 85 c0                         testl   %eax, %eax
    // cb: 0f 8e b7 00 00 00             jle     0x188 <__JIT_ENTRY+0x188>
    // d1: 66 c7 05 04 00 00 00 fc ff    movw    $0xfffc, 0x4            # imm = 0xFFFC
    // 000000d4:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // da: 8b 04 24                      movl    (%esp), %eax
    // dd: e9 8e 00 00 00                jmp     0x170 <__JIT_ENTRY+0x170>
    // e2: c7 87 a4 00 00 00 00 00 00 00 movl    $0x0, 0xa4(%edi)
    // 000000e8:  IMAGE_REL_I386_DIR32 __JIT_EXECUTOR
    // ec: 8b 08                         movl    (%eax), %ecx
    // ee: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // f4: 7f 08                         jg      0xfe <__JIT_ENTRY+0xfe>
    // f6: 41                            incl    %ecx
    // f7: 89 08                         movl    %ecx, (%eax)
    // f9: a1 08 00 00 00                movl    0x8, %eax
    // 000000fa:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // fe: 8b 40 54                      movl    0x54(%eax), %eax
    // 101: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // 105: 89 54 24 1c                   movl    %edx, 0x1c(%esp)
    // 109: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 10d: 83 c4 04                      addl    $0x4, %esp
    // 110: 5e                            popl    %esi
    // 111: 5f                            popl    %edi
    // 112: 5b                            popl    %ebx
    // 113: 5d                            popl    %ebp
    // 114: ff e0                         jmpl    *%eax
    // 116: 8b 56 20                      movl    0x20(%esi), %edx
    // 119: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 120: c7 87 a4 00 00 00 00 00 00 00 movl    $0x0, 0xa4(%edi)
    // 00000126:  IMAGE_REL_I386_DIR32 __JIT_EXECUTOR
    // 12a: 8d 04 5d 80 00 00 00          leal    0x80(,%ebx,2), %eax
    // 131: 01 e8                         addl    %ebp, %eax
    // 133: 0f b7 1d 04 00 00 00          movzwl  0x4, %ebx
    // 00000136:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 13a: 83 fb 0f                      cmpl    $0xf, %ebx
    // 13d: 0f 82 55 ff ff ff             jb      0x98 <__JIT_ENTRY+0x98>
    // 143: 83 c3 f0                      addl    $-0x10, %ebx
    // 146: 66 89 1d 04 00 00 00          movw    %bx, 0x4
    // 00000149:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 14d: 89 56 20                      movl    %edx, 0x20(%esi)
    // 150: 83 c4 04                      addl    $0x4, %esp
    // 153: 5e                            popl    %esi
    // 154: 5f                            popl    %edi
    // 155: 5b                            popl    %ebx
    // 156: 5d                            popl    %ebp
    // 157: c3                            retl
    // 158: 8b 4d 64                      movl    0x64(%ebp), %ecx
    // 15b: 0f b6 40 01                   movzbl  0x1(%eax), %eax
    // 15f: 8b 44 81 08                   movl    0x8(%ecx,%eax,4), %eax
    // 163: 8b 08                         movl    (%eax), %ecx
    // 165: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 16b: 7f 03                         jg      0x170 <__JIT_ENTRY+0x170>
    // 16d: 41                            incl    %ecx
    // 16e: 89 08                         movl    %ecx, (%eax)
    // 170: a3 08 00 00 00                movl    %eax, 0x8
    // 00000171:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 175: 8b 08                         movl    (%eax), %ecx
    // 177: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 17d: 0f 8e 73 ff ff ff             jle     0xf6 <__JIT_ENTRY+0xf6>
    // 183: e9 76 ff ff ff                jmp     0xfe <__JIT_ENTRY+0xfe>
    // 188: 66 bf fc ff                   movw    $0xfffc, %di            # imm = 0xFFFC
    // 18c: 66 83 fb 0b                   cmpw    $0xb, %bx
    // 190: 77 11                         ja      0x1a3 <__JIT_ENTRY+0x1a3>
    // 192: 43                            incl    %ebx
    // 193: bf ff ff ff ff                movl    $0xffffffff, %edi       # imm = 0xFFFFFFFF
    // 198: 89 d9                         movl    %ebx, %ecx
    // 19a: d3 e7                         shll    %cl, %edi
    // 19c: f7 d7                         notl    %edi
    // 19e: c1 e7 04                      shll    $0x4, %edi
    // 1a1: 09 df                         orl     %ebx, %edi
    // 1a3: 66 89 3d 04 00 00 00          movw    %di, 0x4
    // 000001a6:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 1aa: 89 56 20                      movl    %edx, 0x20(%esi)
    // 1ad: 31 c9                         xorl    %ecx, %ecx
    // 1af: 85 c0                         testl   %eax, %eax
    // 1b1: 89 e8                         movl    %ebp, %eax
    // 1b3: 0f 45 c1                      cmovnel %ecx, %eax
    // 1b6: eb 98                         jmp     0x150 <__JIT_ENTRY+0x150>
    const unsigned char code_body[440] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x7c, 0x24,
        0x20, 0x8b, 0x54, 0x24, 0x1c, 0x8b, 0x74, 0x24,
        0x18, 0x8b, 0x2e, 0x8b, 0x1d, 0x00, 0x00, 0x00,
        0x00, 0xa1, 0x08, 0x00, 0x00, 0x00, 0x85, 0xc0,
        0x0f, 0x84, 0xfa, 0x00, 0x00, 0x00, 0xf6, 0x40,
        0x12, 0x01, 0x0f, 0x85, 0xb2, 0x00, 0x00, 0x00,
        0x66, 0xc7, 0x05, 0x04, 0x00, 0x00, 0x00, 0xfc,
        0xff, 0x89, 0x56, 0x20, 0xc7, 0x05, 0x08, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x08,
        0x81, 0xf9, 0x00, 0x00, 0x00, 0x40, 0x0f, 0x8d,
        0xc2, 0x00, 0x00, 0x00, 0x49, 0x89, 0x08, 0x75,
        0x09, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0xa1, 0x08, 0x00, 0x00, 0x00, 0x8b,
        0x56, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0xc7, 0x87, 0xa4, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x75, 0x6d, 0x8d,
        0x04, 0x5d, 0x80, 0x00, 0x00, 0x00, 0x01, 0xe8,
        0x0f, 0xb7, 0x1d, 0x04, 0x00, 0x00, 0x00, 0x83,
        0xfb, 0x0f, 0x0f, 0x83, 0xab, 0x00, 0x00, 0x00,
        0x80, 0x38, 0xff, 0x0f, 0x84, 0xb7, 0x00, 0x00,
        0x00, 0x0f, 0xb6, 0x0d, 0x12, 0x00, 0x00, 0x00,
        0xc1, 0xe9, 0x02, 0x41, 0x89, 0x56, 0x20, 0x89,
        0xe2, 0x51, 0x52, 0x89, 0xc5, 0x50, 0x56, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x10, 0x8b,
        0x56, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xc0, 0x0f, 0x8e, 0xb7, 0x00, 0x00,
        0x00, 0x66, 0xc7, 0x05, 0x04, 0x00, 0x00, 0x00,
        0xfc, 0xff, 0x8b, 0x04, 0x24, 0xe9, 0x8e, 0x00,
        0x00, 0x00, 0xc7, 0x87, 0xa4, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x08, 0x81, 0xf9,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x08, 0x41, 0x89,
        0x08, 0xa1, 0x08, 0x00, 0x00, 0x00, 0x8b, 0x40,
        0x54, 0x89, 0x7c, 0x24, 0x20, 0x89, 0x54, 0x24,
        0x1c, 0x89, 0x74, 0x24, 0x18, 0x83, 0xc4, 0x04,
        0x5e, 0x5f, 0x5b, 0x5d, 0xff, 0xe0, 0x8b, 0x56,
        0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00,
        0xc7, 0x87, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x8d, 0x04, 0x5d, 0x80, 0x00, 0x00,
        0x00, 0x01, 0xe8, 0x0f, 0xb7, 0x1d, 0x04, 0x00,
        0x00, 0x00, 0x83, 0xfb, 0x0f, 0x0f, 0x82, 0x55,
        0xff, 0xff, 0xff, 0x83, 0xc3, 0xf0, 0x66, 0x89,
        0x1d, 0x04, 0x00, 0x00, 0x00, 0x89, 0x56, 0x20,
        0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xc3,
        0x8b, 0x4d, 0x64, 0x0f, 0xb6, 0x40, 0x01, 0x8b,
        0x44, 0x81, 0x08, 0x8b, 0x08, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x03, 0x41, 0x89, 0x08,
        0xa3, 0x08, 0x00, 0x00, 0x00, 0x8b, 0x08, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x0f, 0x8e, 0x73,
        0xff, 0xff, 0xff, 0xe9, 0x76, 0xff, 0xff, 0xff,
        0x66, 0xbf, 0xfc, 0xff, 0x66, 0x83, 0xfb, 0x0b,
        0x77, 0x11, 0x43, 0xbf, 0xff, 0xff, 0xff, 0xff,
        0x89, 0xd9, 0xd3, 0xe7, 0xf7, 0xd7, 0xc1, 0xe7,
        0x04, 0x09, 0xdf, 0x66, 0x89, 0x3d, 0x04, 0x00,
        0x00, 0x00, 0x89, 0x56, 0x20, 0x31, 0xc9, 0x85,
        0xc0, 0x89, 0xe8, 0x0f, 0x45, 0xc1, 0xeb, 0x98,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x15, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x1a, (instruction->operand0 & UINT32_MAX) + 0x8);
    patch_32(code + 0x33, (instruction->operand0 & UINT32_MAX) + 0x4);
    patch_32(code + 0x3e, (instruction->operand0 & UINT32_MAX) + 0x8);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x63, (instruction->operand0 & UINT32_MAX) + 0x8);
    patch_32(code + 0x77, (uintptr_t)executor);
    patch_32(code + 0x8b, (instruction->operand0 & UINT32_MAX) + 0x4);
    patch_32(code + 0xa4, (uintptr_t)executor + 0x12);
    patch_x86_64_32rx(code + 0xb8, (uintptr_t)&_PyOptimizer_Optimize + -0x4);
    patch_32(code + 0xd4, (instruction->operand0 & UINT32_MAX) + 0x4);
    patch_32(code + 0xe8, (uintptr_t)executor);
    patch_32(code + 0xfa, (instruction->operand0 & UINT32_MAX) + 0x8);
    patch_32(code + 0x126, (uintptr_t)executor);
    patch_32(code + 0x136, (instruction->operand0 & UINT32_MAX) + 0x4);
    patch_32(code + 0x149, (instruction->operand0 & UINT32_MAX) + 0x4);
    patch_32(code + 0x171, (instruction->operand0 & UINT32_MAX) + 0x8);
    patch_32(code + 0x1a6, (instruction->operand0 & UINT32_MAX) + 0x4);
}

void
emit__EXPAND_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _EXPAND_METHOD.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 9: 89 04 24                      movl    %eax, (%esp)
    // c: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 10: 8b 74 24 18                   movl    0x18(%esp), %esi
    // 14: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000015:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 19: 0f b7 d1                      movzwl  %cx, %edx
    // 1c: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 21: 29 d1                         subl    %edx, %ecx
    // 23: f7 d2                         notl    %edx
    // 25: 8b 1c 88                      movl    (%eax,%ecx,4), %ebx
    // 28: 8b 6b 0c                      movl    0xc(%ebx), %ebp
    // 2b: 8b 7d 00                      movl    (%ebp), %edi
    // 2e: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 34: 7f 04                         jg      0x3a <__JIT_ENTRY+0x3a>
    // 36: 47                            incl    %edi
    // 37: 89 7d 00                      movl    %edi, (%ebp)
    // 3a: 89 2c 90                      movl    %ebp, (%eax,%edx,4)
    // 3d: 8b 14 88                      movl    (%eax,%ecx,4), %edx
    // 40: 8b 5b 08                      movl    0x8(%ebx), %ebx
    // 43: 8b 3b                         movl    (%ebx), %edi
    // 45: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 4b: 7f 03                         jg      0x50 <__JIT_ENTRY+0x50>
    // 4d: 47                            incl    %edi
    // 4e: 89 3b                         movl    %edi, (%ebx)
    // 50: 89 1c 88                      movl    %ebx, (%eax,%ecx,4)
    // 53: 89 46 20                      movl    %eax, 0x20(%esi)
    // 56: 8b 02                         movl    (%edx), %eax
    // 58: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 5d: 7f 0e                         jg      0x6d <__JIT_ENTRY+0x6d>
    // 5f: 48                            decl    %eax
    // 60: 89 02                         movl    %eax, (%edx)
    // 62: 75 09                         jne     0x6d <__JIT_ENTRY+0x6d>
    // 64: 52                            pushl   %edx
    // 65: e8 00 00 00 00                calll   0x6a <__JIT_ENTRY+0x6a>
    // 00000066:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 6a: 83 c4 04                      addl    $0x4, %esp
    // 6d: 8b 46 20                      movl    0x20(%esi), %eax
    // 70: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 77: 8b 0c 24                      movl    (%esp), %ecx
    // 7a: 89 4c 24 20                   movl    %ecx, 0x20(%esp)
    // 7e: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // 82: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 86: 83 c4 04                      addl    $0x4, %esp
    // 89: 5e                            popl    %esi
    // 8a: 5f                            popl    %edi
    // 8b: 5b                            popl    %ebx
    // 8c: 5d                            popl    %ebp
    // 8d: e9 00 00 00 00                jmp     0x92 <__JIT_ENTRY+0x92>
    // 0000008e:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[141] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x44, 0x24,
        0x20, 0x89, 0x04, 0x24, 0x8b, 0x44, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x18, 0xb9, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xb7, 0xd1, 0xb9, 0xfe, 0xff, 0xff,
        0xff, 0x29, 0xd1, 0xf7, 0xd2, 0x8b, 0x1c, 0x88,
        0x8b, 0x6b, 0x0c, 0x8b, 0x7d, 0x00, 0x81, 0xff,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x04, 0x47, 0x89,
        0x7d, 0x00, 0x89, 0x2c, 0x90, 0x8b, 0x14, 0x88,
        0x8b, 0x5b, 0x08, 0x8b, 0x3b, 0x81, 0xff, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x03, 0x47, 0x89, 0x3b,
        0x89, 0x1c, 0x88, 0x89, 0x46, 0x20, 0x8b, 0x02,
        0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x48,
        0x89, 0x02, 0x75, 0x09, 0x52, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b, 0x46, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x0c, 0x24, 0x89, 0x4c, 0x24, 0x20, 0x89, 0x44,
        0x24, 0x1c, 0x89, 0x74, 0x24, 0x18, 0x83, 0xc4,
        0x04, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x15, instruction->oparg);
    patch_x86_64_32rx(code + 0x66, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__EXPAND_METHOD_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _EXPAND_METHOD_KW.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 9: 89 04 24                      movl    %eax, (%esp)
    // c: 8b 4c 24 1c                   movl    0x1c(%esp), %ecx
    // 10: 8b 74 24 18                   movl    0x18(%esp), %esi
    // 14: b8 00 00 00 00                movl    $0x0, %eax
    // 00000015:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 19: 0f b7 c0                      movzwl  %ax, %eax
    // 1c: bb fe ff ff ff                movl    $0xfffffffe, %ebx       # imm = 0xFFFFFFFE
    // 21: 29 c3                         subl    %eax, %ebx
    // 23: ba fd ff ff ff                movl    $0xfffffffd, %edx       # imm = 0xFFFFFFFD
    // 28: 29 c2                         subl    %eax, %edx
    // 2a: 8b 04 91                      movl    (%ecx,%edx,4), %eax
    // 2d: 8b 68 0c                      movl    0xc(%eax), %ebp
    // 30: 8b 7d 00                      movl    (%ebp), %edi
    // 33: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 39: 7f 04                         jg      0x3f <__JIT_ENTRY+0x3f>
    // 3b: 47                            incl    %edi
    // 3c: 89 7d 00                      movl    %edi, (%ebp)
    // 3f: 89 2c 99                      movl    %ebp, (%ecx,%ebx,4)
    // 42: 8b 58 08                      movl    0x8(%eax), %ebx
    // 45: 8b 3b                         movl    (%ebx), %edi
    // 47: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 4d: 7f 03                         jg      0x52 <__JIT_ENTRY+0x52>
    // 4f: 47                            incl    %edi
    // 50: 89 3b                         movl    %edi, (%ebx)
    // 52: 89 1c 91                      movl    %ebx, (%ecx,%edx,4)
    // 55: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 58: 8b 08                         movl    (%eax), %ecx
    // 5a: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 60: 7f 0e                         jg      0x70 <__JIT_ENTRY+0x70>
    // 62: 49                            decl    %ecx
    // 63: 89 08                         movl    %ecx, (%eax)
    // 65: 75 09                         jne     0x70 <__JIT_ENTRY+0x70>
    // 67: 50                            pushl   %eax
    // 68: e8 00 00 00 00                calll   0x6d <__JIT_ENTRY+0x6d>
    // 00000069:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 6d: 83 c4 04                      addl    $0x4, %esp
    // 70: 8b 46 20                      movl    0x20(%esi), %eax
    // 73: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 7a: 8b 0c 24                      movl    (%esp), %ecx
    // 7d: 89 4c 24 20                   movl    %ecx, 0x20(%esp)
    // 81: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // 85: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 89: 83 c4 04                      addl    $0x4, %esp
    // 8c: 5e                            popl    %esi
    // 8d: 5f                            popl    %edi
    // 8e: 5b                            popl    %ebx
    // 8f: 5d                            popl    %ebp
    // 90: e9 00 00 00 00                jmp     0x95 <__JIT_ENTRY+0x95>
    // 00000091:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[144] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x44, 0x24,
        0x20, 0x89, 0x04, 0x24, 0x8b, 0x4c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x18, 0xb8, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xb7, 0xc0, 0xbb, 0xfe, 0xff, 0xff,
        0xff, 0x29, 0xc3, 0xba, 0xfd, 0xff, 0xff, 0xff,
        0x29, 0xc2, 0x8b, 0x04, 0x91, 0x8b, 0x68, 0x0c,
        0x8b, 0x7d, 0x00, 0x81, 0xff, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x04, 0x47, 0x89, 0x7d, 0x00, 0x89,
        0x2c, 0x99, 0x8b, 0x58, 0x08, 0x8b, 0x3b, 0x81,
        0xff, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03, 0x47,
        0x89, 0x3b, 0x89, 0x1c, 0x91, 0x89, 0x4e, 0x20,
        0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75, 0x09, 0x50,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04,
        0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x0c, 0x24, 0x89, 0x4c, 0x24,
        0x20, 0x89, 0x44, 0x24, 0x1c, 0x89, 0x74, 0x24,
        0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x15, instruction->oparg);
    patch_x86_64_32rx(code + 0x69, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__FATAL_ERROR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _FATAL_ERROR.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 68 00 00 00 00                pushl   $0x0
    // 00000001:  IMAGE_REL_I386_DIR32 ??_C@_0BK@GCJGAMOK@Fatal?5error?5uop?5executed?4?$AA@
    // 5: 68 00 00 00 00                pushl   $0x0
    // 00000006:  IMAGE_REL_I386_DIR32 ??_C@_0L@HIBONIGH@_JIT_ENTRY?$AA@
    // a: e8 00 00 00 00                calll   0xf <__JIT_ENTRY+0xf>
    // 0000000b:  IMAGE_REL_I386_REL32 __Py_FatalErrorFunc
    const unsigned char code_body[15] = {
        0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00,
        0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 'Fatal error uop executed.\x00_JIT_ENTRY\x00'
    // 25: 00 00 00
    const unsigned char data_body[40] = {
        0x46, 0x61, 0x74, 0x61, 0x6c, 0x20, 0x65, 0x72,
        0x72, 0x6f, 0x72, 0x20, 0x75, 0x6f, 0x70, 0x20,
        0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
        0x2e, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45,
        0x4e, 0x54, 0x52, 0x59, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x1, (uintptr_t)data);
    patch_32(code + 0x6, (uintptr_t)data + 0x1a);
    patch_x86_64_32rx(code + 0xb, (uintptr_t)&_Py_FatalErrorFunc + -0x4);
}

void
emit__FORMAT_SIMPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _FORMAT_SIMPLE.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 7: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // b: 8b 74 24 10                   movl    0x10(%esp), %esi
    // f: 8b 59 fc                      movl    -0x4(%ecx), %ebx
    // 12: 81 7b 04 00 00 00 00          cmpl    $0x0, 0x4(%ebx)
    // 00000015:  IMAGE_REL_I386_DIR32 _PyUnicode_Type
    // 19: 74 33                         je      0x4e <__JIT_ENTRY+0x4e>
    // 1b: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 1e: 6a 00                         pushl   $0x0
    // 20: 53                            pushl   %ebx
    // 21: e8 00 00 00 00                calll   0x26 <__JIT_ENTRY+0x26>
    // 00000022:  IMAGE_REL_I386_REL32 _PyObject_Format
    // 26: 83 c4 08                      addl    $0x8, %esp
    // 29: 83 46 20 fc                   addl    $-0x4, 0x20(%esi)
    // 2d: 8b 0b                         movl    (%ebx), %ecx
    // 2f: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 35: 7f 05                         jg      0x3c <__JIT_ENTRY+0x3c>
    // 37: 49                            decl    %ecx
    // 38: 89 0b                         movl    %ecx, (%ebx)
    // 3a: 74 2e                         je      0x6a <__JIT_ENTRY+0x6a>
    // 3c: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 3f: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 46: 85 c0                         testl   %eax, %eax
    // 48: 74 3b                         je      0x85 <__JIT_ENTRY+0x85>
    // 4a: 89 c3                         movl    %eax, %ebx
    // 4c: eb 03                         jmp     0x51 <__JIT_ENTRY+0x51>
    // 4e: 83 c1 fc                      addl    $-0x4, %ecx
    // 51: 89 19                         movl    %ebx, (%ecx)
    // 53: 83 c1 04                      addl    $0x4, %ecx
    // 56: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 5a: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 5e: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 62: 5e                            popl    %esi
    // 63: 5f                            popl    %edi
    // 64: 5b                            popl    %ebx
    // 65: e9 00 00 00 00                jmp     0x6a <__JIT_ENTRY+0x6a>
    // 00000066:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 6a: 53                            pushl   %ebx
    // 6b: 89 c3                         movl    %eax, %ebx
    // 6d: e8 00 00 00 00                calll   0x72 <__JIT_ENTRY+0x72>
    // 0000006e:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 72: 89 d8                         movl    %ebx, %eax
    // 74: 83 c4 04                      addl    $0x4, %esp
    // 77: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 7a: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 81: 85 c0                         testl   %eax, %eax
    // 83: 75 c5                         jne     0x4a <__JIT_ENTRY+0x4a>
    // 85: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 89: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 8d: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 91: 5e                            popl    %esi
    // 92: 5f                            popl    %edi
    // 93: 5b                            popl    %ebx
    // 94: e9 00 00 00 00                jmp     0x99 <__JIT_ENTRY+0x99>
    // 00000095:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[153] = {
        0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x18, 0x8b,
        0x4c, 0x24, 0x14, 0x8b, 0x74, 0x24, 0x10, 0x8b,
        0x59, 0xfc, 0x81, 0x7b, 0x04, 0x00, 0x00, 0x00,
        0x00, 0x74, 0x33, 0x89, 0x4e, 0x20, 0x6a, 0x00,
        0x53, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x08, 0x83, 0x46, 0x20, 0xfc, 0x8b, 0x0b, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x05, 0x49,
        0x89, 0x0b, 0x74, 0x2e, 0x8b, 0x4e, 0x20, 0xc7,
        0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0,
        0x74, 0x3b, 0x89, 0xc3, 0xeb, 0x03, 0x83, 0xc1,
        0xfc, 0x89, 0x19, 0x83, 0xc1, 0x04, 0x89, 0x7c,
        0x24, 0x18, 0x89, 0x4c, 0x24, 0x14, 0x89, 0x74,
        0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x53, 0x89, 0xc3, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xd8, 0x83, 0xc4, 0x04, 0x8b,
        0x4e, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xc0, 0x75, 0xc5, 0x89, 0x7c, 0x24,
        0x18, 0x89, 0x4c, 0x24, 0x14, 0x89, 0x74, 0x24,
        0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x15, (uintptr_t)&PyUnicode_Type);
    patch_x86_64_32rx(code + 0x22, (uintptr_t)&PyObject_Format + -0x4);
    patch_x86_64_32rx(code + 0x66, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x6e, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x95, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__FORMAT_WITH_SPEC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _FORMAT_WITH_SPEC.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 9: 89 04 24                      movl    %eax, (%esp)
    // c: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 10: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 14: 8b 70 f8                      movl    -0x8(%eax), %esi
    // 17: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 1a: 89 47 20                      movl    %eax, 0x20(%edi)
    // 1d: 53                            pushl   %ebx
    // 1e: 56                            pushl   %esi
    // 1f: e8 00 00 00 00                calll   0x24 <__JIT_ENTRY+0x24>
    // 00000020:  IMAGE_REL_I386_REL32 _PyObject_Format
    // 24: 83 c4 08                      addl    $0x8, %esp
    // 27: 8b 6f 20                      movl    0x20(%edi), %ebp
    // 2a: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 31: 8b 0e                         movl    (%esi), %ecx
    // 33: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 39: 7f 05                         jg      0x40 <__JIT_ENTRY+0x40>
    // 3b: 49                            decl    %ecx
    // 3c: 89 0e                         movl    %ecx, (%esi)
    // 3e: 74 1e                         je      0x5e <__JIT_ENTRY+0x5e>
    // 40: 8b 0b                         movl    (%ebx), %ecx
    // 42: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 48: 7f 2b                         jg      0x75 <__JIT_ENTRY+0x75>
    // 4a: 49                            decl    %ecx
    // 4b: 89 0b                         movl    %ecx, (%ebx)
    // 4d: 75 26                         jne     0x75 <__JIT_ENTRY+0x75>
    // 4f: 53                            pushl   %ebx
    // 50: 89 c6                         movl    %eax, %esi
    // 52: e8 00 00 00 00                calll   0x57 <__JIT_ENTRY+0x57>
    // 00000053:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 57: 89 f0                         movl    %esi, %eax
    // 59: 83 c4 04                      addl    $0x4, %esp
    // 5c: eb 17                         jmp     0x75 <__JIT_ENTRY+0x75>
    // 5e: 56                            pushl   %esi
    // 5f: 89 c6                         movl    %eax, %esi
    // 61: e8 00 00 00 00                calll   0x66 <__JIT_ENTRY+0x66>
    // 00000062:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 66: 89 f0                         movl    %esi, %eax
    // 68: 83 c4 04                      addl    $0x4, %esp
    // 6b: 8b 0b                         movl    (%ebx), %ecx
    // 6d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 73: 7e d5                         jle     0x4a <__JIT_ENTRY+0x4a>
    // 75: 85 c0                         testl   %eax, %eax
    // 77: 74 21                         je      0x9a <__JIT_ENTRY+0x9a>
    // 79: 89 45 f8                      movl    %eax, -0x8(%ebp)
    // 7c: 83 c5 fc                      addl    $-0x4, %ebp
    // 7f: 8b 04 24                      movl    (%esp), %eax
    // 82: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 86: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // 8a: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 8e: 83 c4 04                      addl    $0x4, %esp
    // 91: 5e                            popl    %esi
    // 92: 5f                            popl    %edi
    // 93: 5b                            popl    %ebx
    // 94: 5d                            popl    %ebp
    // 95: e9 00 00 00 00                jmp     0x9a <__JIT_ENTRY+0x9a>
    // 00000096:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 9a: 83 c5 f8                      addl    $-0x8, %ebp
    // 9d: 8b 04 24                      movl    (%esp), %eax
    // a0: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // a4: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // a8: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // ac: 83 c4 04                      addl    $0x4, %esp
    // af: 5e                            popl    %esi
    // b0: 5f                            popl    %edi
    // b1: 5b                            popl    %ebx
    // b2: 5d                            popl    %ebp
    // b3: e9 00 00 00 00                jmp     0xb8 <__JIT_ENTRY+0xb8>
    // 000000b4:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[184] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x44, 0x24,
        0x20, 0x89, 0x04, 0x24, 0x8b, 0x7c, 0x24, 0x18,
        0x8b, 0x44, 0x24, 0x1c, 0x8b, 0x70, 0xf8, 0x8b,
        0x58, 0xfc, 0x89, 0x47, 0x20, 0x53, 0x56, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x08, 0x8b,
        0x6f, 0x20, 0xc7, 0x47, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x0e, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x05, 0x49, 0x89, 0x0e, 0x74, 0x1e,
        0x8b, 0x0b, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x2b, 0x49, 0x89, 0x0b, 0x75, 0x26, 0x53,
        0x89, 0xc6, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xf0, 0x83, 0xc4, 0x04, 0xeb, 0x17, 0x56, 0x89,
        0xc6, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf0,
        0x83, 0xc4, 0x04, 0x8b, 0x0b, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7e, 0xd5, 0x85, 0xc0, 0x74,
        0x21, 0x89, 0x45, 0xf8, 0x83, 0xc5, 0xfc, 0x8b,
        0x04, 0x24, 0x89, 0x44, 0x24, 0x20, 0x89, 0x6c,
        0x24, 0x1c, 0x89, 0x7c, 0x24, 0x18, 0x83, 0xc4,
        0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc5, 0xf8, 0x8b, 0x04, 0x24,
        0x89, 0x44, 0x24, 0x20, 0x89, 0x7c, 0x24, 0x18,
        0x89, 0x6c, 0x24, 0x1c, 0x83, 0xc4, 0x04, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x20, (uintptr_t)&PyObject_Format + -0x4);
    patch_x86_64_32rx(code + 0x53, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x62, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x96, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xb4, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__FOR_ITER_GEN_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _FOR_ITER_GEN_FRAME.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 54 24 1c                   movl    0x1c(%esp), %edx
    // 8: 8b 4c 24 18                   movl    0x18(%esp), %ecx
    // c: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 10: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 13: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000016:  IMAGE_REL_I386_DIR32 _PyGen_Type
    // 1a: 75 06                         jne     0x22 <__JIT_ENTRY+0x22>
    // 1c: 80 7e 23 00                   cmpb    $0x0, 0x23(%esi)
    // 20: 78 15                         js      0x37 <__JIT_ENTRY+0x37>
    // 22: 89 54 24 1c                   movl    %edx, 0x1c(%esp)
    // 26: 89 4c 24 18                   movl    %ecx, 0x18(%esp)
    // 2a: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 2e: 5e                            popl    %esi
    // 2f: 5f                            popl    %edi
    // 30: 5b                            popl    %ebx
    // 31: 5d                            popl    %ebp
    // 32: e9 00 00 00 00                jmp     0x37 <__JIT_ENTRY+0x37>
    // 00000033:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 37: 8d 7e 24                      leal    0x24(%esi), %edi
    // 3a: 8b 5e 44                      movl    0x44(%esi), %ebx
    // 3d: c7 03 00 00 00 00             movl    $0x0, (%ebx)
    // 0000003f:  IMAGE_REL_I386_DIR32 __Py_NoneStruct
    // 43: 83 46 44 04                   addl    $0x4, 0x44(%esi)
    // 47: c6 46 23 00                   movb    $0x0, 0x23(%esi)
    // 4b: 8b 5a 4c                      movl    0x4c(%edx), %ebx
    // 4e: 8d 6e 14                      leal    0x14(%esi), %ebp
    // 51: 89 5e 18                      movl    %ebx, 0x18(%esi)
    // 54: 89 6a 4c                      movl    %ebp, 0x4c(%edx)
    // 57: 89 46 28                      movl    %eax, 0x28(%esi)
    // 5a: 8d 35 02 00 00 00             leal    0x2, %esi
    // 0000005c:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 60: 66 89 70 24                   movw    %si, 0x24(%eax)
    // 64: 89 39                         movl    %edi, (%ecx)
    // 66: 83 c1 04                      addl    $0x4, %ecx
    // 69: 89 54 24 1c                   movl    %edx, 0x1c(%esp)
    // 6d: 89 4c 24 18                   movl    %ecx, 0x18(%esp)
    // 71: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 75: 5e                            popl    %esi
    // 76: 5f                            popl    %edi
    // 77: 5b                            popl    %ebx
    // 78: 5d                            popl    %ebp
    // 79: e9 00 00 00 00                jmp     0x7e <__JIT_ENTRY+0x7e>
    // 0000007a:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[121] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x54, 0x24, 0x1c,
        0x8b, 0x4c, 0x24, 0x18, 0x8b, 0x44, 0x24, 0x14,
        0x8b, 0x71, 0xfc, 0x81, 0x7e, 0x04, 0x00, 0x00,
        0x00, 0x00, 0x75, 0x06, 0x80, 0x7e, 0x23, 0x00,
        0x78, 0x15, 0x89, 0x54, 0x24, 0x1c, 0x89, 0x4c,
        0x24, 0x18, 0x89, 0x44, 0x24, 0x14, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8d,
        0x7e, 0x24, 0x8b, 0x5e, 0x44, 0xc7, 0x03, 0x00,
        0x00, 0x00, 0x00, 0x83, 0x46, 0x44, 0x04, 0xc6,
        0x46, 0x23, 0x00, 0x8b, 0x5a, 0x4c, 0x8d, 0x6e,
        0x14, 0x89, 0x5e, 0x18, 0x89, 0x6a, 0x4c, 0x89,
        0x46, 0x28, 0x8d, 0x35, 0x02, 0x00, 0x00, 0x00,
        0x66, 0x89, 0x70, 0x24, 0x89, 0x39, 0x83, 0xc1,
        0x04, 0x89, 0x54, 0x24, 0x1c, 0x89, 0x4c, 0x24,
        0x18, 0x89, 0x44, 0x24, 0x14, 0x5e, 0x5f, 0x5b,
        0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x16, (uintptr_t)&PyGen_Type);
    patch_x86_64_32rx(code + 0x33, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32(code + 0x3f, (uintptr_t)&_Py_NoneStruct);
    patch_32(code + 0x5c, instruction->oparg + 0x2);
}

void
emit__FOR_ITER_TIER_TWO(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _FOR_ITER_TIER_TWO.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 44 24 10                   movl    0x10(%esp), %eax
    // e: 8b 48 fc                      movl    -0x4(%eax), %ecx
    // 11: 89 46 20                      movl    %eax, 0x20(%esi)
    // 14: 8b 41 04                      movl    0x4(%ecx), %eax
    // 17: 51                            pushl   %ecx
    // 18: ff 50 70                      calll   *0x70(%eax)
    // 1b: 83 c4 04                      addl    $0x4, %esp
    // 1e: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 21: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 28: 85 c0                         testl   %eax, %eax
    // 2a: 74 18                         je      0x44 <__JIT_ENTRY+0x44>
    // 2c: 89 01                         movl    %eax, (%ecx)
    // 2e: 83 c1 04                      addl    $0x4, %ecx
    // 31: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 35: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 39: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 3d: 5e                            popl    %esi
    // 3e: 5f                            popl    %edi
    // 3f: e9 00 00 00 00                jmp     0x44 <__JIT_ENTRY+0x44>
    // 00000040:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 44: 8b 47 48                      movl    0x48(%edi), %eax
    // 47: 85 c0                         testl   %eax, %eax
    // 49: 74 49                         je      0x94 <__JIT_ENTRY+0x94>
    // 4b: 83 78 04 00                   cmpl    $0x0, 0x4(%eax)
    // 4f: 74 43                         je      0x94 <__JIT_ENTRY+0x94>
    // 51: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 54: ff 35 00 00 00 00             pushl   0x0
    // 00000056:  IMAGE_REL_I386_DIR32 _PyExc_StopIteration
    // 5a: 57                            pushl   %edi
    // 5b: e8 00 00 00 00                calll   0x60 <__JIT_ENTRY+0x60>
    // 0000005c:  IMAGE_REL_I386_REL32 __PyErr_ExceptionMatches
    // 60: 83 c4 08                      addl    $0x8, %esp
    // 63: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 66: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 6d: 85 c0                         testl   %eax, %eax
    // 6f: 74 36                         je      0xa7 <__JIT_ENTRY+0xa7>
    // 71: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 74: ff 76 1c                      pushl   0x1c(%esi)
    // 77: 56                            pushl   %esi
    // 78: 57                            pushl   %edi
    // 79: e8 00 00 00 00                calll   0x7e <__JIT_ENTRY+0x7e>
    // 0000007a:  IMAGE_REL_I386_REL32 __PyEval_MonitorRaise
    // 7e: 83 c4 0c                      addl    $0xc, %esp
    // 81: 57                            pushl   %edi
    // 82: e8 00 00 00 00                calll   0x87 <__JIT_ENTRY+0x87>
    // 00000083:  IMAGE_REL_I386_REL32 __PyErr_Clear
    // 87: 83 c4 04                      addl    $0x4, %esp
    // 8a: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 8d: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 94: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 98: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 9c: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // a0: 5e                            popl    %esi
    // a1: 5f                            popl    %edi
    // a2: e9 00 00 00 00                jmp     0xa7 <__JIT_ENTRY+0xa7>
    // 000000a3:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // a7: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // ab: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // af: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // b3: 5e                            popl    %esi
    // b4: 5f                            popl    %edi
    // b5: e9 00 00 00 00                jmp     0xba <__JIT_ENTRY+0xba>
    // 000000b6:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[186] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x48,
        0xfc, 0x89, 0x46, 0x20, 0x8b, 0x41, 0x04, 0x51,
        0xff, 0x50, 0x70, 0x83, 0xc4, 0x04, 0x8b, 0x4e,
        0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x74, 0x18, 0x89, 0x01, 0x83, 0xc1,
        0x04, 0x89, 0x7c, 0x24, 0x14, 0x89, 0x4c, 0x24,
        0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e, 0x5f, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x47, 0x48, 0x85,
        0xc0, 0x74, 0x49, 0x83, 0x78, 0x04, 0x00, 0x74,
        0x43, 0x89, 0x4e, 0x20, 0xff, 0x35, 0x00, 0x00,
        0x00, 0x00, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x08, 0x8b, 0x4e, 0x20, 0xc7, 0x46,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74,
        0x36, 0x89, 0x4e, 0x20, 0xff, 0x76, 0x1c, 0x56,
        0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x0c, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x8b, 0x4e, 0x20, 0xc7, 0x46, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14,
        0x89, 0x4c, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c,
        0x5e, 0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89,
        0x7c, 0x24, 0x14, 0x89, 0x4c, 0x24, 0x10, 0x89,
        0x74, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x40, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32(code + 0x56, (uintptr_t)&PyExc_StopIteration);
    patch_x86_64_32rx(code + 0x5c, (uintptr_t)&_PyErr_ExceptionMatches + -0x4);
    patch_x86_64_32rx(code + 0x7a, (uintptr_t)&_PyEval_MonitorRaise + -0x4);
    patch_x86_64_32rx(code + 0x83, (uintptr_t)&_PyErr_Clear + -0x4);
    patch_x86_64_32rx(code + 0xa3, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0xb6, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__GET_AITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_AITER.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 5c 24 1c                   movl    0x1c(%esp), %ebx
    // 8: 8b 44 24 18                   movl    0x18(%esp), %eax
    // c: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 10: 8b 68 fc                      movl    -0x4(%eax), %ebp
    // 13: 8b 4d 04                      movl    0x4(%ebp), %ecx
    // 16: 8b 51 28                      movl    0x28(%ecx), %edx
    // 19: 85 d2                         testl   %edx, %edx
    // 1b: 74 5b                         je      0x78 <__JIT_ENTRY+0x78>
    // 1d: 8b 52 04                      movl    0x4(%edx), %edx
    // 20: 85 d2                         testl   %edx, %edx
    // 22: 74 54                         je      0x78 <__JIT_ENTRY+0x78>
    // 24: 89 47 20                      movl    %eax, 0x20(%edi)
    // 27: 55                            pushl   %ebp
    // 28: ff d2                         calll   *%edx
    // 2a: 83 c4 04                      addl    $0x4, %esp
    // 2d: 8b 77 20                      movl    0x20(%edi), %esi
    // 30: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 37: 8b 4d 00                      movl    (%ebp), %ecx
    // 3a: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 40: 7f 0a                         jg      0x4c <__JIT_ENTRY+0x4c>
    // 42: 49                            decl    %ecx
    // 43: 89 4d 00                      movl    %ecx, (%ebp)
    // 46: 0f 84 d4 00 00 00             je      0x120 <__JIT_ENTRY+0x120>
    // 4c: 85 c0                         testl   %eax, %eax
    // 4e: 74 65                         je      0xb5 <__JIT_ENTRY+0xb5>
    // 50: 8b 48 04                      movl    0x4(%eax), %ecx
    // 53: 8b 49 28                      movl    0x28(%ecx), %ecx
    // 56: 85 c9                         testl   %ecx, %ecx
    // 58: 74 73                         je      0xcd <__JIT_ENTRY+0xcd>
    // 5a: 83 79 08 00                   cmpl    $0x0, 0x8(%ecx)
    // 5e: 74 6d                         je      0xcd <__JIT_ENTRY+0xcd>
    // 60: 89 46 fc                      movl    %eax, -0x4(%esi)
    // 63: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 67: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 6b: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 6f: 5e                            popl    %esi
    // 70: 5f                            popl    %edi
    // 71: 5b                            popl    %ebx
    // 72: 5d                            popl    %ebp
    // 73: e9 00 00 00 00                jmp     0x78 <__JIT_ENTRY+0x78>
    // 00000074:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 78: 89 47 20                      movl    %eax, 0x20(%edi)
    // 7b: ff 71 0c                      pushl   0xc(%ecx)
    // 7e: 68 00 00 00 00                pushl   $0x0
    // 0000007f:  IMAGE_REL_I386_DIR32 ??_C@_0EB@HAIFCLCF@?8async?5for?8?5requires?5an?5object?5w@
    // 83: ff 35 00 00 00 00             pushl   0x0
    // 00000085:  IMAGE_REL_I386_DIR32 _PyExc_TypeError
    // 89: 53                            pushl   %ebx
    // 8a: e8 00 00 00 00                calll   0x8f <__JIT_ENTRY+0x8f>
    // 0000008b:  IMAGE_REL_I386_REL32 __PyErr_Format
    // 8f: 83 c4 10                      addl    $0x10, %esp
    // 92: 8b 77 20                      movl    0x20(%edi), %esi
    // 95: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 9c: 8b 45 00                      movl    (%ebp), %eax
    // 9f: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // a4: 7f 0f                         jg      0xb5 <__JIT_ENTRY+0xb5>
    // a6: 48                            decl    %eax
    // a7: 89 45 00                      movl    %eax, (%ebp)
    // aa: 75 09                         jne     0xb5 <__JIT_ENTRY+0xb5>
    // ac: 55                            pushl   %ebp
    // ad: e8 00 00 00 00                calll   0xb2 <__JIT_ENTRY+0xb2>
    // 000000ae:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // b2: 83 c4 04                      addl    $0x4, %esp
    // b5: 83 c6 fc                      addl    $-0x4, %esi
    // b8: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // bc: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // c0: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // c4: 5e                            popl    %esi
    // c5: 5f                            popl    %edi
    // c6: 5b                            popl    %ebx
    // c7: 5d                            popl    %ebp
    // c8: e9 00 00 00 00                jmp     0xcd <__JIT_ENTRY+0xcd>
    // 000000c9:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // cd: 83 c6 fc                      addl    $-0x4, %esi
    // d0: 89 77 20                      movl    %esi, 0x20(%edi)
    // d3: 8b 48 04                      movl    0x4(%eax), %ecx
    // d6: ff 71 0c                      pushl   0xc(%ecx)
    // d9: 68 00 00 00 00                pushl   $0x0
    // 000000da:  IMAGE_REL_I386_DIR32 ??_C@_0FI@MHPMLJOA@?8async?5for?8?5received?5an?5object?5f@
    // de: ff 35 00 00 00 00             pushl   0x0
    // 000000e0:  IMAGE_REL_I386_DIR32 _PyExc_TypeError
    // e4: 53                            pushl   %ebx
    // e5: 89 c6                         movl    %eax, %esi
    // e7: e8 00 00 00 00                calll   0xec <__JIT_ENTRY+0xec>
    // 000000e8:  IMAGE_REL_I386_REL32 __PyErr_Format
    // ec: 83 c4 10                      addl    $0x10, %esp
    // ef: 8b 06                         movl    (%esi), %eax
    // f1: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // f6: 7f 10                         jg      0x108 <__JIT_ENTRY+0x108>
    // f8: 89 f1                         movl    %esi, %ecx
    // fa: 48                            decl    %eax
    // fb: 89 06                         movl    %eax, (%esi)
    // fd: 75 09                         jne     0x108 <__JIT_ENTRY+0x108>
    // ff: 51                            pushl   %ecx
    // 100: e8 00 00 00 00                calll   0x105 <__JIT_ENTRY+0x105>
    // 00000101:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 105: 83 c4 04                      addl    $0x4, %esp
    // 108: 8b 47 20                      movl    0x20(%edi), %eax
    // 10b: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 112: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 116: 89 44 24 18                   movl    %eax, 0x18(%esp)
    // 11a: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 11e: eb a4                         jmp     0xc4 <__JIT_ENTRY+0xc4>
    // 120: 55                            pushl   %ebp
    // 121: 89 c5                         movl    %eax, %ebp
    // 123: e8 00 00 00 00                calll   0x128 <__JIT_ENTRY+0x128>
    // 00000124:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 128: 89 e8                         movl    %ebp, %eax
    // 12a: 83 c4 04                      addl    $0x4, %esp
    // 12d: 85 c0                         testl   %eax, %eax
    // 12f: 0f 85 1b ff ff ff             jne     0x50 <__JIT_ENTRY+0x50>
    // 135: e9 7b ff ff ff                jmp     0xb5 <__JIT_ENTRY+0xb5>
    const unsigned char code_body[314] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x5c, 0x24, 0x1c,
        0x8b, 0x44, 0x24, 0x18, 0x8b, 0x7c, 0x24, 0x14,
        0x8b, 0x68, 0xfc, 0x8b, 0x4d, 0x04, 0x8b, 0x51,
        0x28, 0x85, 0xd2, 0x74, 0x5b, 0x8b, 0x52, 0x04,
        0x85, 0xd2, 0x74, 0x54, 0x89, 0x47, 0x20, 0x55,
        0xff, 0xd2, 0x83, 0xc4, 0x04, 0x8b, 0x77, 0x20,
        0xc7, 0x47, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x4d, 0x00, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x0a, 0x49, 0x89, 0x4d, 0x00, 0x0f, 0x84,
        0xd4, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x65,
        0x8b, 0x48, 0x04, 0x8b, 0x49, 0x28, 0x85, 0xc9,
        0x74, 0x73, 0x83, 0x79, 0x08, 0x00, 0x74, 0x6d,
        0x89, 0x46, 0xfc, 0x89, 0x5c, 0x24, 0x1c, 0x89,
        0x74, 0x24, 0x18, 0x89, 0x7c, 0x24, 0x14, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x47, 0x20, 0xff, 0x71, 0x0c, 0x68, 0x00,
        0x00, 0x00, 0x00, 0xff, 0x35, 0x00, 0x00, 0x00,
        0x00, 0x53, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x10, 0x8b, 0x77, 0x20, 0xc7, 0x47, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x00, 0x3d,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0f, 0x48, 0x89,
        0x45, 0x00, 0x75, 0x09, 0x55, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0x83, 0xc6, 0xfc,
        0x89, 0x5c, 0x24, 0x1c, 0x89, 0x7c, 0x24, 0x14,
        0x89, 0x74, 0x24, 0x18, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc6, 0xfc,
        0x89, 0x77, 0x20, 0x8b, 0x48, 0x04, 0xff, 0x71,
        0x0c, 0x68, 0x00, 0x00, 0x00, 0x00, 0xff, 0x35,
        0x00, 0x00, 0x00, 0x00, 0x53, 0x89, 0xc6, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x10, 0x8b,
        0x06, 0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x10,
        0x89, 0xf1, 0x48, 0x89, 0x06, 0x75, 0x09, 0x51,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04,
        0x8b, 0x47, 0x20, 0xc7, 0x47, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x5c, 0x24, 0x1c, 0x89, 0x44,
        0x24, 0x18, 0x89, 0x7c, 0x24, 0x14, 0xeb, 0xa4,
        0x55, 0x89, 0xc5, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xe8, 0x83, 0xc4, 0x04, 0x85, 0xc0, 0x0f,
        0x85, 0x1b, 0xff, 0xff, 0xff, 0xe9, 0x7b, 0xff,
        0xff, 0xff,
    };
    // 0: "'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
    // 99: 00 00 00 00 00 00 00
    const unsigned char data_body[160] = {
        0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66,
        0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75,
        0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20,
        0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77,
        0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69,
        0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65,
        0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f,
        0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73,
        0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20,
        0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63,
        0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e,
        0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
        0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61,
        0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74,
        0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73,
        0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70,
        0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f,
        0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f,
        0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x74, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32(code + 0x7f, (uintptr_t)data);
    patch_32(code + 0x85, (uintptr_t)&PyExc_TypeError);
    patch_x86_64_32rx(code + 0x8b, (uintptr_t)&_PyErr_Format + -0x4);
    patch_x86_64_32rx(code + 0xae, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xc9, state->instruction_starts[instruction->error_target] + -0x4);
    patch_32(code + 0xda, (uintptr_t)data + 0x41);
    patch_32(code + 0xe0, (uintptr_t)&PyExc_TypeError);
    patch_x86_64_32rx(code + 0xe8, (uintptr_t)&_PyErr_Format + -0x4);
    patch_x86_64_32rx(code + 0x101, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x124, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__GET_ANEXT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_ANEXT.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 44 24 10                   movl    0x10(%esp), %eax
    // e: 8b 48 fc                      movl    -0x4(%eax), %ecx
    // 11: 89 46 20                      movl    %eax, 0x20(%esi)
    // 14: 51                            pushl   %ecx
    // 15: e8 00 00 00 00                calll   0x1a <__JIT_ENTRY+0x1a>
    // 00000016:  IMAGE_REL_I386_REL32 __PyEval_GetANext
    // 1a: 83 c4 04                      addl    $0x4, %esp
    // 1d: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 20: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 27: 85 c0                         testl   %eax, %eax
    // 29: 74 18                         je      0x43 <__JIT_ENTRY+0x43>
    // 2b: 89 01                         movl    %eax, (%ecx)
    // 2d: 83 c1 04                      addl    $0x4, %ecx
    // 30: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 34: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 38: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 3c: 5e                            popl    %esi
    // 3d: 5f                            popl    %edi
    // 3e: e9 00 00 00 00                jmp     0x43 <__JIT_ENTRY+0x43>
    // 0000003f:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 43: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 47: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 4b: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 4f: 5e                            popl    %esi
    // 50: 5f                            popl    %edi
    // 51: e9 00 00 00 00                jmp     0x56 <__JIT_ENTRY+0x56>
    // 00000052:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[86] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x48,
        0xfc, 0x89, 0x46, 0x20, 0x51, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b, 0x4e, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x85,
        0xc0, 0x74, 0x18, 0x89, 0x01, 0x83, 0xc1, 0x04,
        0x89, 0x7c, 0x24, 0x14, 0x89, 0x4c, 0x24, 0x10,
        0x89, 0x74, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x4c, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x16, (uintptr_t)&_PyEval_GetANext + -0x4);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x52, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__GET_AWAITABLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_AWAITABLE.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 10: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000011:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 15: 0f b7 c9                      movzwl  %cx, %ecx
    // 18: 8b 68 fc                      movl    -0x4(%eax), %ebp
    // 1b: 89 46 20                      movl    %eax, 0x20(%esi)
    // 1e: 51                            pushl   %ecx
    // 1f: 55                            pushl   %ebp
    // 20: e8 00 00 00 00                calll   0x25 <__JIT_ENTRY+0x25>
    // 00000021:  IMAGE_REL_I386_REL32 __PyEval_GetAwaitable
    // 25: 83 c4 08                      addl    $0x8, %esp
    // 28: 8b 5e 20                      movl    0x20(%esi), %ebx
    // 2b: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 32: 8b 4d 00                      movl    (%ebp), %ecx
    // 35: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 3b: 7f 06                         jg      0x43 <__JIT_ENTRY+0x43>
    // 3d: 49                            decl    %ecx
    // 3e: 89 4d 00                      movl    %ecx, (%ebp)
    // 41: 74 1c                         je      0x5f <__JIT_ENTRY+0x5f>
    // 43: 85 c0                         testl   %eax, %eax
    // 45: 74 29                         je      0x70 <__JIT_ENTRY+0x70>
    // 47: 89 43 fc                      movl    %eax, -0x4(%ebx)
    // 4a: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 4e: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 52: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 56: 5e                            popl    %esi
    // 57: 5f                            popl    %edi
    // 58: 5b                            popl    %ebx
    // 59: 5d                            popl    %ebp
    // 5a: e9 00 00 00 00                jmp     0x5f <__JIT_ENTRY+0x5f>
    // 0000005b:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 5f: 55                            pushl   %ebp
    // 60: 89 c5                         movl    %eax, %ebp
    // 62: e8 00 00 00 00                calll   0x67 <__JIT_ENTRY+0x67>
    // 00000063:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 67: 89 e8                         movl    %ebp, %eax
    // 69: 83 c4 04                      addl    $0x4, %esp
    // 6c: 85 c0                         testl   %eax, %eax
    // 6e: 75 d7                         jne     0x47 <__JIT_ENTRY+0x47>
    // 70: 83 c3 fc                      addl    $-0x4, %ebx
    // 73: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 77: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 7b: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 7f: 5e                            popl    %esi
    // 80: 5f                            popl    %edi
    // 81: 5b                            popl    %ebx
    // 82: 5d                            popl    %ebp
    // 83: e9 00 00 00 00                jmp     0x88 <__JIT_ENTRY+0x88>
    // 00000084:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[136] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x18,
        0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9,
        0x8b, 0x68, 0xfc, 0x89, 0x46, 0x20, 0x51, 0x55,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x08,
        0x8b, 0x5e, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x4d, 0x00, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x06, 0x49, 0x89, 0x4d,
        0x00, 0x74, 0x1c, 0x85, 0xc0, 0x74, 0x29, 0x89,
        0x43, 0xfc, 0x89, 0x7c, 0x24, 0x1c, 0x89, 0x5c,
        0x24, 0x18, 0x89, 0x74, 0x24, 0x14, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x55,
        0x89, 0xc5, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xe8, 0x83, 0xc4, 0x04, 0x85, 0xc0, 0x75, 0xd7,
        0x83, 0xc3, 0xfc, 0x89, 0x7c, 0x24, 0x1c, 0x89,
        0x74, 0x24, 0x14, 0x89, 0x5c, 0x24, 0x18, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x11, instruction->oparg);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)&_PyEval_GetAwaitable + -0x4);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x63, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x84, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__GET_ITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_ITER.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 10: 8b 68 fc                      movl    -0x4(%eax), %ebp
    // 13: 89 46 20                      movl    %eax, 0x20(%esi)
    // 16: 55                            pushl   %ebp
    // 17: e8 00 00 00 00                calll   0x1c <__JIT_ENTRY+0x1c>
    // 00000018:  IMAGE_REL_I386_REL32 _PyObject_GetIter
    // 1c: 83 c4 04                      addl    $0x4, %esp
    // 1f: 8b 5e 20                      movl    0x20(%esi), %ebx
    // 22: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 29: 8b 4d 00                      movl    (%ebp), %ecx
    // 2c: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 32: 7f 06                         jg      0x3a <__JIT_ENTRY+0x3a>
    // 34: 49                            decl    %ecx
    // 35: 89 4d 00                      movl    %ecx, (%ebp)
    // 38: 74 1c                         je      0x56 <__JIT_ENTRY+0x56>
    // 3a: 85 c0                         testl   %eax, %eax
    // 3c: 74 29                         je      0x67 <__JIT_ENTRY+0x67>
    // 3e: 89 43 fc                      movl    %eax, -0x4(%ebx)
    // 41: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 45: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 49: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 4d: 5e                            popl    %esi
    // 4e: 5f                            popl    %edi
    // 4f: 5b                            popl    %ebx
    // 50: 5d                            popl    %ebp
    // 51: e9 00 00 00 00                jmp     0x56 <__JIT_ENTRY+0x56>
    // 00000052:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 56: 55                            pushl   %ebp
    // 57: 89 c5                         movl    %eax, %ebp
    // 59: e8 00 00 00 00                calll   0x5e <__JIT_ENTRY+0x5e>
    // 0000005a:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 5e: 89 e8                         movl    %ebp, %eax
    // 60: 83 c4 04                      addl    $0x4, %esp
    // 63: 85 c0                         testl   %eax, %eax
    // 65: 75 d7                         jne     0x3e <__JIT_ENTRY+0x3e>
    // 67: 83 c3 fc                      addl    $-0x4, %ebx
    // 6a: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 6e: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 72: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 76: 5e                            popl    %esi
    // 77: 5f                            popl    %edi
    // 78: 5b                            popl    %ebx
    // 79: 5d                            popl    %ebp
    // 7a: e9 00 00 00 00                jmp     0x7f <__JIT_ENTRY+0x7f>
    // 0000007b:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[127] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x18,
        0x8b, 0x68, 0xfc, 0x89, 0x46, 0x20, 0x55, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b,
        0x5e, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x4d, 0x00, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x06, 0x49, 0x89, 0x4d, 0x00,
        0x74, 0x1c, 0x85, 0xc0, 0x74, 0x29, 0x89, 0x43,
        0xfc, 0x89, 0x7c, 0x24, 0x1c, 0x89, 0x5c, 0x24,
        0x18, 0x89, 0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x55, 0x89,
        0xc5, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0xe8,
        0x83, 0xc4, 0x04, 0x85, 0xc0, 0x75, 0xd7, 0x83,
        0xc3, 0xfc, 0x89, 0x7c, 0x24, 0x1c, 0x89, 0x74,
        0x24, 0x14, 0x89, 0x5c, 0x24, 0x18, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x18, (uintptr_t)&PyObject_GetIter + -0x4);
    patch_x86_64_32rx(code + 0x52, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x7b, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__GET_LEN(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_LEN.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 7: 8b 74 24 10                   movl    0x10(%esp), %esi
    // b: 8b 44 24 14                   movl    0x14(%esp), %eax
    // f: 8b 48 fc                      movl    -0x4(%eax), %ecx
    // 12: 89 46 20                      movl    %eax, 0x20(%esi)
    // 15: 51                            pushl   %ecx
    // 16: e8 00 00 00 00                calll   0x1b <__JIT_ENTRY+0x1b>
    // 00000017:  IMAGE_REL_I386_REL32 _PyObject_Size
    // 1b: 83 c4 04                      addl    $0x4, %esp
    // 1e: 8b 5e 20                      movl    0x20(%esi), %ebx
    // 21: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 28: 85 c0                         testl   %eax, %eax
    // 2a: 78 26                         js      0x52 <__JIT_ENTRY+0x52>
    // 2c: 50                            pushl   %eax
    // 2d: e8 00 00 00 00                calll   0x32 <__JIT_ENTRY+0x32>
    // 0000002e:  IMAGE_REL_I386_REL32 _PyLong_FromSsize_t
    // 32: 83 c4 04                      addl    $0x4, %esp
    // 35: 85 c0                         testl   %eax, %eax
    // 37: 74 19                         je      0x52 <__JIT_ENTRY+0x52>
    // 39: 89 03                         movl    %eax, (%ebx)
    // 3b: 83 c3 04                      addl    $0x4, %ebx
    // 3e: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 42: 89 5c 24 14                   movl    %ebx, 0x14(%esp)
    // 46: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 4a: 5e                            popl    %esi
    // 4b: 5f                            popl    %edi
    // 4c: 5b                            popl    %ebx
    // 4d: e9 00 00 00 00                jmp     0x52 <__JIT_ENTRY+0x52>
    // 0000004e:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 52: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 56: 89 5c 24 14                   movl    %ebx, 0x14(%esp)
    // 5a: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 5e: 5e                            popl    %esi
    // 5f: 5f                            popl    %edi
    // 60: 5b                            popl    %ebx
    // 61: e9 00 00 00 00                jmp     0x66 <__JIT_ENTRY+0x66>
    // 00000062:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[102] = {
        0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x18, 0x8b,
        0x74, 0x24, 0x10, 0x8b, 0x44, 0x24, 0x14, 0x8b,
        0x48, 0xfc, 0x89, 0x46, 0x20, 0x51, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b, 0x5e,
        0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x78, 0x26, 0x50, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0x85, 0xc0, 0x74,
        0x19, 0x89, 0x03, 0x83, 0xc3, 0x04, 0x89, 0x7c,
        0x24, 0x18, 0x89, 0x5c, 0x24, 0x14, 0x89, 0x74,
        0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x7c, 0x24, 0x18, 0x89, 0x5c,
        0x24, 0x14, 0x89, 0x74, 0x24, 0x10, 0x5e, 0x5f,
        0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)&PyObject_Size + -0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)&PyLong_FromSsize_t + -0x4);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x62, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__GET_YIELD_FROM_ITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_YIELD_FROM_ITER.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 5c 24 18                   movl    0x18(%esp), %ebx
    // c: 8b 74 24 14                   movl    0x14(%esp), %esi
    // 10: 8b 6b fc                      movl    -0x4(%ebx), %ebp
    // 13: 8b 45 04                      movl    0x4(%ebp), %eax
    // 16: 3d 00 00 00 00                cmpl    $0x0, %eax
    // 00000017:  IMAGE_REL_I386_DIR32 _PyCoro_Type
    // 1b: 74 36                         je      0x53 <__JIT_ENTRY+0x53>
    // 1d: 3d 00 00 00 00                cmpl    $0x0, %eax
    // 0000001e:  IMAGE_REL_I386_DIR32 _PyGen_Type
    // 22: 74 3c                         je      0x60 <__JIT_ENTRY+0x60>
    // 24: 89 5e 20                      movl    %ebx, 0x20(%esi)
    // 27: 55                            pushl   %ebp
    // 28: e8 00 00 00 00                calll   0x2d <__JIT_ENTRY+0x2d>
    // 00000029:  IMAGE_REL_I386_REL32 _PyObject_GetIter
    // 2d: 83 c4 04                      addl    $0x4, %esp
    // 30: 8b 5e 20                      movl    0x20(%esi), %ebx
    // 33: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 3a: 85 c0                         testl   %eax, %eax
    // 3c: 74 3a                         je      0x78 <__JIT_ENTRY+0x78>
    // 3e: 8b 4d 00                      movl    (%ebp), %ecx
    // 41: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 47: 7f 06                         jg      0x4f <__JIT_ENTRY+0x4f>
    // 49: 49                            decl    %ecx
    // 4a: 89 4d 00                      movl    %ecx, (%ebp)
    // 4d: 74 69                         je      0xb8 <__JIT_ENTRY+0xb8>
    // 4f: 89 c5                         movl    %eax, %ebp
    // 51: eb 0d                         jmp     0x60 <__JIT_ENTRY+0x60>
    // 53: 8b 06                         movl    (%esi), %eax
    // 55: 0f b7 40 18                   movzwl  0x18(%eax), %eax
    // 59: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
    // 5e: 74 22                         je      0x82 <__JIT_ENTRY+0x82>
    // 60: 89 6b fc                      movl    %ebp, -0x4(%ebx)
    // 63: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 67: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 6b: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 6f: 5e                            popl    %esi
    // 70: 5f                            popl    %edi
    // 71: 5b                            popl    %ebx
    // 72: 5d                            popl    %ebp
    // 73: e9 00 00 00 00                jmp     0x78 <__JIT_ENTRY+0x78>
    // 00000074:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 78: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 7c: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 80: eb 29                         jmp     0xab <__JIT_ENTRY+0xab>
    // 82: 89 5e 20                      movl    %ebx, 0x20(%esi)
    // 85: 68 00 00 00 00                pushl   $0x0
    // 00000086:  IMAGE_REL_I386_DIR32 ??_C@_0EE@OKAKFBDN@cannot?5?8yield?5from?8?5a?5coroutine?5@
    // 8a: ff 35 00 00 00 00             pushl   0x0
    // 0000008c:  IMAGE_REL_I386_DIR32 _PyExc_TypeError
    // 90: 57                            pushl   %edi
    // 91: e8 00 00 00 00                calll   0x96 <__JIT_ENTRY+0x96>
    // 00000092:  IMAGE_REL_I386_REL32 __PyErr_SetString
    // 96: 83 c4 0c                      addl    $0xc, %esp
    // 99: 8b 46 20                      movl    0x20(%esi), %eax
    // 9c: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // a3: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // a7: 89 44 24 18                   movl    %eax, 0x18(%esp)
    // ab: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // af: 5e                            popl    %esi
    // b0: 5f                            popl    %edi
    // b1: 5b                            popl    %ebx
    // b2: 5d                            popl    %ebp
    // b3: e9 00 00 00 00                jmp     0xb8 <__JIT_ENTRY+0xb8>
    // 000000b4:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // b8: 55                            pushl   %ebp
    // b9: 89 c5                         movl    %eax, %ebp
    // bb: e8 00 00 00 00                calll   0xc0 <__JIT_ENTRY+0xc0>
    // 000000bc:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // c0: 83 c4 04                      addl    $0x4, %esp
    // c3: eb 9b                         jmp     0x60 <__JIT_ENTRY+0x60>
    const unsigned char code_body[197] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x5c, 0x24, 0x18, 0x8b, 0x74, 0x24, 0x14,
        0x8b, 0x6b, 0xfc, 0x8b, 0x45, 0x04, 0x3d, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x36, 0x3d, 0x00, 0x00,
        0x00, 0x00, 0x74, 0x3c, 0x89, 0x5e, 0x20, 0x55,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04,
        0x8b, 0x5e, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x74, 0x3a, 0x8b, 0x4d,
        0x00, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x06, 0x49, 0x89, 0x4d, 0x00, 0x74, 0x69, 0x89,
        0xc5, 0xeb, 0x0d, 0x8b, 0x06, 0x0f, 0xb7, 0x40,
        0x18, 0xa9, 0x80, 0x01, 0x00, 0x00, 0x74, 0x22,
        0x89, 0x6b, 0xfc, 0x89, 0x7c, 0x24, 0x1c, 0x89,
        0x5c, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x7c, 0x24, 0x1c, 0x89, 0x5c, 0x24, 0x18,
        0xeb, 0x29, 0x89, 0x5e, 0x20, 0x68, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x35, 0x00, 0x00, 0x00, 0x00,
        0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x0c, 0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x1c, 0x89,
        0x44, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x55, 0x89, 0xc5, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0xeb, 0x9b,
    };
    // 0: "cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
    // 44: 00 00 00 00
    const unsigned char data_body[72] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27,
        0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72,
        0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f,
        0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20,
        0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69,
        0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d,
        0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
        0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
        0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x17, (uintptr_t)&PyCoro_Type);
    patch_32(code + 0x1e, (uintptr_t)&PyGen_Type);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)&PyObject_GetIter + -0x4);
    patch_x86_64_32rx(code + 0x74, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32(code + 0x86, (uintptr_t)data);
    patch_32(code + 0x8c, (uintptr_t)&PyExc_TypeError);
    patch_x86_64_32rx(code + 0x92, (uintptr_t)&_PyErr_SetString + -0x4);
    patch_x86_64_32rx(code + 0xb4, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0xbc, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__GUARD_BINARY_OP_EXTEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_BINARY_OP_EXTEND.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 44 24 10                   movl    0x10(%esp), %eax
    // e: 8b 48 f8                      movl    -0x8(%eax), %ecx
    // 11: 8b 50 fc                      movl    -0x4(%eax), %edx
    // 14: 89 46 20                      movl    %eax, 0x20(%esi)
    // 17: 52                            pushl   %edx
    // 18: 51                            pushl   %ecx
    // 19: ff 15 04 00 00 00             calll   *0x4
    // 0000001b:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 1f: 83 c4 08                      addl    $0x8, %esp
    // 22: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 25: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 2c: 85 c0                         testl   %eax, %eax
    // 2e: 74 13                         je      0x43 <__JIT_ENTRY+0x43>
    // 30: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 34: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 38: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 3c: 5e                            popl    %esi
    // 3d: 5f                            popl    %edi
    // 3e: e9 00 00 00 00                jmp     0x43 <__JIT_ENTRY+0x43>
    // 0000003f:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 43: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 47: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 4b: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 4f: 5e                            popl    %esi
    // 50: 5f                            popl    %edi
    // 51: e9 00 00 00 00                jmp     0x56 <__JIT_ENTRY+0x56>
    // 00000052:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[86] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x48,
        0xf8, 0x8b, 0x50, 0xfc, 0x89, 0x46, 0x20, 0x52,
        0x51, 0xff, 0x15, 0x04, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x08, 0x8b, 0x4e, 0x20, 0xc7, 0x46, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x13,
        0x89, 0x7c, 0x24, 0x14, 0x89, 0x4c, 0x24, 0x10,
        0x89, 0x74, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x4c, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x1b, (instruction->operand0 & UINT32_MAX) + 0x4);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x52, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_BOTH_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_BOTH_FLOAT.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 71 f8                      movl    -0x8(%ecx), %esi
    // 10: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000013:  IMAGE_REL_I386_DIR32 _PyFloat_Type
    // 17: 75 0c                         jne     0x25 <__JIT_ENTRY+0x25>
    // 19: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 1c: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 0000001f:  IMAGE_REL_I386_DIR32 _PyFloat_Type
    // 23: 74 12                         je      0x37 <__JIT_ENTRY+0x37>
    // 25: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 29: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 2d: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 31: 5e                            popl    %esi
    // 32: e9 00 00 00 00                jmp     0x37 <__JIT_ENTRY+0x37>
    // 00000033:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 37: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 3b: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 3f: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 43: 5e                            popl    %esi
    // 44: e9 00 00 00 00                jmp     0x49 <__JIT_ENTRY+0x49>
    // 00000045:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[68] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x71, 0xf8,
        0x81, 0x7e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x0c, 0x8b, 0x71, 0xfc, 0x81, 0x7e, 0x04, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x12, 0x89, 0x54, 0x24,
        0x10, 0x89, 0x4c, 0x24, 0x0c, 0x89, 0x44, 0x24,
        0x08, 0x5e, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89,
        0x54, 0x24, 0x10, 0x89, 0x4c, 0x24, 0x0c, 0x89,
        0x44, 0x24, 0x08, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (uintptr_t)&PyFloat_Type);
    patch_32(code + 0x1f, (uintptr_t)&PyFloat_Type);
    patch_x86_64_32rx(code + 0x33, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_BOTH_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_BOTH_INT.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 71 f8                      movl    -0x8(%ecx), %esi
    // 10: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000013:  IMAGE_REL_I386_DIR32 _PyLong_Type
    // 17: 75 0c                         jne     0x25 <__JIT_ENTRY+0x25>
    // 19: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 1c: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 0000001f:  IMAGE_REL_I386_DIR32 _PyLong_Type
    // 23: 74 12                         je      0x37 <__JIT_ENTRY+0x37>
    // 25: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 29: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 2d: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 31: 5e                            popl    %esi
    // 32: e9 00 00 00 00                jmp     0x37 <__JIT_ENTRY+0x37>
    // 00000033:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 37: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 3b: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 3f: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 43: 5e                            popl    %esi
    // 44: e9 00 00 00 00                jmp     0x49 <__JIT_ENTRY+0x49>
    // 00000045:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[68] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x71, 0xf8,
        0x81, 0x7e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x0c, 0x8b, 0x71, 0xfc, 0x81, 0x7e, 0x04, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x12, 0x89, 0x54, 0x24,
        0x10, 0x89, 0x4c, 0x24, 0x0c, 0x89, 0x44, 0x24,
        0x08, 0x5e, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89,
        0x54, 0x24, 0x10, 0x89, 0x4c, 0x24, 0x0c, 0x89,
        0x44, 0x24, 0x08, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (uintptr_t)&PyLong_Type);
    patch_32(code + 0x1f, (uintptr_t)&PyLong_Type);
    patch_x86_64_32rx(code + 0x33, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_BOTH_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_BOTH_UNICODE.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 71 f8                      movl    -0x8(%ecx), %esi
    // 10: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000013:  IMAGE_REL_I386_DIR32 _PyUnicode_Type
    // 17: 75 0c                         jne     0x25 <__JIT_ENTRY+0x25>
    // 19: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 1c: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 0000001f:  IMAGE_REL_I386_DIR32 _PyUnicode_Type
    // 23: 74 12                         je      0x37 <__JIT_ENTRY+0x37>
    // 25: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 29: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 2d: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 31: 5e                            popl    %esi
    // 32: e9 00 00 00 00                jmp     0x37 <__JIT_ENTRY+0x37>
    // 00000033:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 37: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 3b: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 3f: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 43: 5e                            popl    %esi
    // 44: e9 00 00 00 00                jmp     0x49 <__JIT_ENTRY+0x49>
    // 00000045:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[68] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x71, 0xf8,
        0x81, 0x7e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x0c, 0x8b, 0x71, 0xfc, 0x81, 0x7e, 0x04, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x12, 0x89, 0x54, 0x24,
        0x10, 0x89, 0x4c, 0x24, 0x0c, 0x89, 0x44, 0x24,
        0x08, 0x5e, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89,
        0x54, 0x24, 0x10, 0x89, 0x4c, 0x24, 0x0c, 0x89,
        0x44, 0x24, 0x08, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (uintptr_t)&PyUnicode_Type);
    patch_32(code + 0x1f, (uintptr_t)&PyUnicode_Type);
    patch_x86_64_32rx(code + 0x33, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_BUILTINS_VERSION_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_BUILTINS_VERSION_PUSH_KEYS.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 70 10                      movl    0x10(%eax), %esi
    // 11: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000014:  IMAGE_REL_I386_DIR32 _PyDict_Type
    // 18: 75 28                         jne     0x42 <__JIT_ENTRY+0x42>
    // 1a: 8b 76 18                      movl    0x18(%esi), %esi
    // 1d: bf 00 00 00 00                movl    $0x0, %edi
    // 0000001e:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 22: 0f b7 ff                      movzwl  %di, %edi
    // 25: 39 7e 08                      cmpl    %edi, 0x8(%esi)
    // 28: 75 18                         jne     0x42 <__JIT_ENTRY+0x42>
    // 2a: 89 31                         movl    %esi, (%ecx)
    // 2c: 83 c1 04                      addl    $0x4, %ecx
    // 2f: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 33: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 37: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3b: 5e                            popl    %esi
    // 3c: 5f                            popl    %edi
    // 3d: e9 00 00 00 00                jmp     0x42 <__JIT_ENTRY+0x42>
    // 0000003e:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 42: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 46: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 4a: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 4e: 5e                            popl    %esi
    // 4f: 5f                            popl    %edi
    // 50: e9 00 00 00 00                jmp     0x55 <__JIT_ENTRY+0x55>
    // 00000051:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[85] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x70,
        0x10, 0x81, 0x7e, 0x04, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x28, 0x8b, 0x76, 0x18, 0xbf, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0xb7, 0xff, 0x39, 0x7e, 0x08,
        0x75, 0x18, 0x89, 0x31, 0x83, 0xc1, 0x04, 0x89,
        0x54, 0x24, 0x14, 0x89, 0x4c, 0x24, 0x10, 0x89,
        0x44, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x54, 0x24, 0x14, 0x89, 0x4c,
        0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, (uintptr_t)&PyDict_Type);
    patch_32(code + 0x1e, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x3e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x51, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_DORV_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_DORV_NO_DICT.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 11: 83 7e f4 00                   cmpl    $0x0, -0xc(%esi)
    // 15: 74 13                         je      0x2a <__JIT_ENTRY+0x2a>
    // 17: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 1b: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 1f: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 23: 5e                            popl    %esi
    // 24: 5f                            popl    %edi
    // 25: e9 00 00 00 00                jmp     0x2a <__JIT_ENTRY+0x2a>
    // 00000026:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 2a: 8b 7e 04                      movl    0x4(%esi), %edi
    // 2d: 8b 7f 10                      movl    0x10(%edi), %edi
    // 30: 80 7c 3e 03 00                cmpb    $0x0, 0x3(%esi,%edi)
    // 35: 74 e0                         je      0x17 <__JIT_ENTRY+0x17>
    // 37: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 3b: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 3f: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 43: 5e                            popl    %esi
    // 44: 5f                            popl    %edi
    // 45: e9 00 00 00 00                jmp     0x4a <__JIT_ENTRY+0x4a>
    // 00000046:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[69] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x71,
        0xfc, 0x83, 0x7e, 0xf4, 0x00, 0x74, 0x13, 0x89,
        0x54, 0x24, 0x14, 0x89, 0x4c, 0x24, 0x10, 0x89,
        0x44, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x7e, 0x04, 0x8b, 0x7f, 0x10,
        0x80, 0x7c, 0x3e, 0x03, 0x00, 0x74, 0xe0, 0x89,
        0x54, 0x24, 0x14, 0x89, 0x4c, 0x24, 0x10, 0x89,
        0x44, 0x24, 0x0c, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x26, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_DORV_VALUES_INST_ATTR_FROM_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 11: 8b 7e 04                      movl    0x4(%esi), %edi
    // 14: 8b 7f 10                      movl    0x10(%edi), %edi
    // 17: 80 7c 3e 03 00                cmpb    $0x0, 0x3(%esi,%edi)
    // 1c: 74 13                         je      0x31 <__JIT_ENTRY+0x31>
    // 1e: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 22: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 26: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 2a: 5e                            popl    %esi
    // 2b: 5f                            popl    %edi
    // 2c: e9 00 00 00 00                jmp     0x31 <__JIT_ENTRY+0x31>
    // 0000002d:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 31: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 35: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 39: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3d: 5e                            popl    %esi
    // 3e: 5f                            popl    %edi
    // 3f: e9 00 00 00 00                jmp     0x44 <__JIT_ENTRY+0x44>
    // 00000040:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[68] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x71,
        0xfc, 0x8b, 0x7e, 0x04, 0x8b, 0x7f, 0x10, 0x80,
        0x7c, 0x3e, 0x03, 0x00, 0x74, 0x13, 0x89, 0x54,
        0x24, 0x14, 0x89, 0x4c, 0x24, 0x10, 0x89, 0x44,
        0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x54, 0x24, 0x14, 0x89, 0x4c, 0x24,
        0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x40, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_GLOBALS_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_GLOBALS_VERSION.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 70 0c                      movl    0xc(%eax), %esi
    // 11: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000014:  IMAGE_REL_I386_DIR32 _PyDict_Type
    // 18: 75 23                         jne     0x3d <__JIT_ENTRY+0x3d>
    // 1a: 8b 76 18                      movl    0x18(%esi), %esi
    // 1d: bf 00 00 00 00                movl    $0x0, %edi
    // 0000001e:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 22: 0f b7 ff                      movzwl  %di, %edi
    // 25: 39 7e 08                      cmpl    %edi, 0x8(%esi)
    // 28: 75 13                         jne     0x3d <__JIT_ENTRY+0x3d>
    // 2a: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 2e: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 32: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 36: 5e                            popl    %esi
    // 37: 5f                            popl    %edi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 3d: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 41: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 45: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 49: 5e                            popl    %esi
    // 4a: 5f                            popl    %edi
    // 4b: e9 00 00 00 00                jmp     0x50 <__JIT_ENTRY+0x50>
    // 0000004c:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[80] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x70,
        0x0c, 0x81, 0x7e, 0x04, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x23, 0x8b, 0x76, 0x18, 0xbf, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0xb7, 0xff, 0x39, 0x7e, 0x08,
        0x75, 0x13, 0x89, 0x54, 0x24, 0x14, 0x89, 0x4c,
        0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54, 0x24,
        0x14, 0x89, 0x4c, 0x24, 0x10, 0x89, 0x44, 0x24,
        0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, (uintptr_t)&PyDict_Type);
    patch_32(code + 0x1e, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x39, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x4c, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_GLOBALS_VERSION_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_GLOBALS_VERSION_PUSH_KEYS.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 70 0c                      movl    0xc(%eax), %esi
    // 11: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000014:  IMAGE_REL_I386_DIR32 _PyDict_Type
    // 18: 75 28                         jne     0x42 <__JIT_ENTRY+0x42>
    // 1a: 8b 76 18                      movl    0x18(%esi), %esi
    // 1d: bf 00 00 00 00                movl    $0x0, %edi
    // 0000001e:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 22: 0f b7 ff                      movzwl  %di, %edi
    // 25: 39 7e 08                      cmpl    %edi, 0x8(%esi)
    // 28: 75 18                         jne     0x42 <__JIT_ENTRY+0x42>
    // 2a: 89 31                         movl    %esi, (%ecx)
    // 2c: 83 c1 04                      addl    $0x4, %ecx
    // 2f: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 33: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 37: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3b: 5e                            popl    %esi
    // 3c: 5f                            popl    %edi
    // 3d: e9 00 00 00 00                jmp     0x42 <__JIT_ENTRY+0x42>
    // 0000003e:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 42: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 46: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 4a: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 4e: 5e                            popl    %esi
    // 4f: 5f                            popl    %edi
    // 50: e9 00 00 00 00                jmp     0x55 <__JIT_ENTRY+0x55>
    // 00000051:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[85] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x70,
        0x0c, 0x81, 0x7e, 0x04, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x28, 0x8b, 0x76, 0x18, 0xbf, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0xb7, 0xff, 0x39, 0x7e, 0x08,
        0x75, 0x18, 0x89, 0x31, 0x83, 0xc1, 0x04, 0x89,
        0x54, 0x24, 0x14, 0x89, 0x4c, 0x24, 0x10, 0x89,
        0x44, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x54, 0x24, 0x14, 0x89, 0x4c,
        0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, (uintptr_t)&PyDict_Type);
    patch_32(code + 0x1e, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x3e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x51, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_IS_FALSE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_IS_FALSE_POP.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // 5: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 9: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // d: 8d 56 fc                      leal    -0x4(%esi), %edx
    // 10: 81 7e fc 00 00 00 00          cmpl    $0x0, -0x4(%esi)
    // 00000013:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 17: 74 12                         je      0x2b <__JIT_ENTRY+0x2b>
    // 19: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 1d: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 21: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 25: 5e                            popl    %esi
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 00000027:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 2b: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 2f: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 33: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 37: 5e                            popl    %esi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0x56, 0x8b, 0x4c, 0x24, 0x10, 0x8b, 0x44, 0x24,
        0x08, 0x8b, 0x74, 0x24, 0x0c, 0x8d, 0x56, 0xfc,
        0x81, 0x7e, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x12, 0x89, 0x4c, 0x24, 0x10, 0x89, 0x54, 0x24,
        0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x4c, 0x24, 0x10, 0x89,
        0x54, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (uintptr_t)&_Py_FalseStruct);
    patch_x86_64_32rx(code + 0x27, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_IS_NONE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_IS_NONE_POP.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // e: 8b 41 fc                      movl    -0x4(%ecx), %eax
    // 11: 83 c1 fc                      addl    $-0x4, %ecx
    // 14: 3d 00 00 00 00                cmpl    $0x0, %eax
    // 00000015:  IMAGE_REL_I386_DIR32 __Py_NoneStruct
    // 19: 74 38                         je      0x53 <__JIT_ENTRY+0x53>
    // 1b: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 1e: 8b 08                         movl    (%eax), %ecx
    // 20: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 26: 7f 0e                         jg      0x36 <__JIT_ENTRY+0x36>
    // 28: 49                            decl    %ecx
    // 29: 89 08                         movl    %ecx, (%eax)
    // 2b: 75 09                         jne     0x36 <__JIT_ENTRY+0x36>
    // 2d: 50                            pushl   %eax
    // 2e: e8 00 00 00 00                calll   0x33 <__JIT_ENTRY+0x33>
    // 0000002f:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 33: 83 c4 04                      addl    $0x4, %esp
    // 36: 8b 46 20                      movl    0x20(%esi), %eax
    // 39: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 40: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 44: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 48: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 4c: 5e                            popl    %esi
    // 4d: 5f                            popl    %edi
    // 4e: e9 00 00 00 00                jmp     0x53 <__JIT_ENTRY+0x53>
    // 0000004f:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 53: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 57: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 5b: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 5f: 5e                            popl    %esi
    // 60: 5f                            popl    %edi
    // 61: e9 00 00 00 00                jmp     0x66 <__JIT_ENTRY+0x66>
    // 00000062:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[97] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x10, 0x8b, 0x41,
        0xfc, 0x83, 0xc1, 0xfc, 0x3d, 0x00, 0x00, 0x00,
        0x00, 0x74, 0x38, 0x89, 0x4e, 0x20, 0x8b, 0x08,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e,
        0x49, 0x89, 0x08, 0x75, 0x09, 0x50, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b, 0x46,
        0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x7c, 0x24, 0x14, 0x89, 0x44, 0x24, 0x10,
        0x89, 0x74, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x4c, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x15, (uintptr_t)&_Py_NoneStruct);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x4f, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_IS_NOT_NONE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_IS_NOT_NONE_POP.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 7: 8b 74 24 10                   movl    0x10(%esp), %esi
    // b: 8b 44 24 14                   movl    0x14(%esp), %eax
    // f: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 12: 83 c0 fc                      addl    $-0x4, %eax
    // 15: 89 46 20                      movl    %eax, 0x20(%esi)
    // 18: 8b 03                         movl    (%ebx), %eax
    // 1a: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 1f: 7f 05                         jg      0x26 <__JIT_ENTRY+0x26>
    // 21: 48                            decl    %eax
    // 22: 89 03                         movl    %eax, (%ebx)
    // 24: 74 26                         je      0x4c <__JIT_ENTRY+0x4c>
    // 26: 8b 46 20                      movl    0x20(%esi), %eax
    // 29: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 30: 81 fb 00 00 00 00             cmpl    $0x0, %ebx
    // 00000032:  IMAGE_REL_I386_DIR32 __Py_NoneStruct
    // 36: 74 2f                         je      0x67 <__JIT_ENTRY+0x67>
    // 38: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 3c: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 40: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 44: 5e                            popl    %esi
    // 45: 5f                            popl    %edi
    // 46: 5b                            popl    %ebx
    // 47: e9 00 00 00 00                jmp     0x4c <__JIT_ENTRY+0x4c>
    // 00000048:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 4c: 53                            pushl   %ebx
    // 4d: e8 00 00 00 00                calll   0x52 <__JIT_ENTRY+0x52>
    // 0000004e:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 52: 83 c4 04                      addl    $0x4, %esp
    // 55: 8b 46 20                      movl    0x20(%esi), %eax
    // 58: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 5f: 81 fb 00 00 00 00             cmpl    $0x0, %ebx
    // 00000061:  IMAGE_REL_I386_DIR32 __Py_NoneStruct
    // 65: 75 d1                         jne     0x38 <__JIT_ENTRY+0x38>
    // 67: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 6b: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 6f: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 73: 5e                            popl    %esi
    // 74: 5f                            popl    %edi
    // 75: 5b                            popl    %ebx
    // 76: e9 00 00 00 00                jmp     0x7b <__JIT_ENTRY+0x7b>
    // 00000077:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[123] = {
        0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x18, 0x8b,
        0x74, 0x24, 0x10, 0x8b, 0x44, 0x24, 0x14, 0x8b,
        0x58, 0xfc, 0x83, 0xc0, 0xfc, 0x89, 0x46, 0x20,
        0x8b, 0x03, 0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x05, 0x48, 0x89, 0x03, 0x74, 0x26, 0x8b, 0x46,
        0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x81, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x74, 0x2f,
        0x89, 0x7c, 0x24, 0x18, 0x89, 0x44, 0x24, 0x14,
        0x89, 0x74, 0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x53, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b, 0x46, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x81,
        0xfb, 0x00, 0x00, 0x00, 0x00, 0x75, 0xd1, 0x89,
        0x7c, 0x24, 0x18, 0x89, 0x44, 0x24, 0x14, 0x89,
        0x74, 0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x32, (uintptr_t)&_Py_NoneStruct);
    patch_x86_64_32rx(code + 0x48, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x61, (uintptr_t)&_Py_NoneStruct);
    patch_x86_64_32rx(code + 0x77, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_IS_TRUE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_IS_TRUE_POP.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // 5: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 9: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // d: 8d 56 fc                      leal    -0x4(%esi), %edx
    // 10: 81 7e fc 00 00 00 00          cmpl    $0x0, -0x4(%esi)
    // 00000013:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 17: 74 12                         je      0x2b <__JIT_ENTRY+0x2b>
    // 19: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 1d: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 21: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 25: 5e                            popl    %esi
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 00000027:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 2b: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 2f: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 33: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 37: 5e                            popl    %esi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0x56, 0x8b, 0x4c, 0x24, 0x10, 0x8b, 0x44, 0x24,
        0x08, 0x8b, 0x74, 0x24, 0x0c, 0x8d, 0x56, 0xfc,
        0x81, 0x7e, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x12, 0x89, 0x4c, 0x24, 0x10, 0x89, 0x54, 0x24,
        0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x4c, 0x24, 0x10, 0x89,
        0x54, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (uintptr_t)&_Py_TrueStruct);
    patch_x86_64_32rx(code + 0x27, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_KEYS_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_KEYS_VERSION.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 10: 8b 76 04                      movl    0x4(%esi), %esi
    // 13: 8b b6 b8 01 00 00             movl    0x1b8(%esi), %esi
    // 19: 81 7e 08 00 00 00 00          cmpl    $0x0, 0x8(%esi)
    // 0000001c:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 20: 75 12                         jne     0x34 <__JIT_ENTRY+0x34>
    // 22: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 26: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 2a: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 2e: 5e                            popl    %esi
    // 2f: e9 00 00 00 00                jmp     0x34 <__JIT_ENTRY+0x34>
    // 00000030:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 34: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 38: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 3c: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 40: 5e                            popl    %esi
    // 41: e9 00 00 00 00                jmp     0x46 <__JIT_ENTRY+0x46>
    // 00000042:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[70] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x71, 0xfc,
        0x8b, 0x76, 0x04, 0x8b, 0xb6, 0xb8, 0x01, 0x00,
        0x00, 0x81, 0x7e, 0x08, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x12, 0x89, 0x54, 0x24, 0x10, 0x89, 0x4c,
        0x24, 0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x10,
        0x89, 0x4c, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08,
        0x5e, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x1c, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x30, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x42, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_NOS_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_NOS_FLOAT.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 71 f8                      movl    -0x8(%ecx), %esi
    // 10: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000013:  IMAGE_REL_I386_DIR32 _PyFloat_Type
    // 17: 74 12                         je      0x2b <__JIT_ENTRY+0x2b>
    // 19: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 1d: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 21: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 25: 5e                            popl    %esi
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 00000027:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 2b: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2f: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 33: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 37: 5e                            popl    %esi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x71, 0xf8,
        0x81, 0x7e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x12, 0x89, 0x54, 0x24, 0x10, 0x89, 0x4c, 0x24,
        0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x10, 0x89,
        0x4c, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (uintptr_t)&PyFloat_Type);
    patch_x86_64_32rx(code + 0x27, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_NOS_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_NOS_INT.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 71 f8                      movl    -0x8(%ecx), %esi
    // 10: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000013:  IMAGE_REL_I386_DIR32 _PyLong_Type
    // 17: 74 12                         je      0x2b <__JIT_ENTRY+0x2b>
    // 19: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 1d: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 21: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 25: 5e                            popl    %esi
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 00000027:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 2b: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2f: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 33: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 37: 5e                            popl    %esi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x71, 0xf8,
        0x81, 0x7e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x12, 0x89, 0x54, 0x24, 0x10, 0x89, 0x4c, 0x24,
        0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x10, 0x89,
        0x4c, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (uintptr_t)&PyLong_Type);
    patch_x86_64_32rx(code + 0x27, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_NOT_EXHAUSTED_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_NOT_EXHAUSTED_LIST.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 54 24 18                   movl    0x18(%esp), %edx
    // 7: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // b: 8b 44 24 10                   movl    0x10(%esp), %eax
    // f: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 12: 8b 7e 0c                      movl    0xc(%esi), %edi
    // 15: 85 ff                         testl   %edi, %edi
    // 17: 74 23                         je      0x3c <__JIT_ENTRY+0x3c>
    // 19: 8b 5e 08                      movl    0x8(%esi), %ebx
    // 1c: 3b 5f 08                      cmpl    0x8(%edi), %ebx
    // 1f: 73 14                         jae     0x35 <__JIT_ENTRY+0x35>
    // 21: 89 54 24 18                   movl    %edx, 0x18(%esp)
    // 25: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 29: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 2d: 5e                            popl    %esi
    // 2e: 5f                            popl    %edi
    // 2f: 5b                            popl    %ebx
    // 30: e9 00 00 00 00                jmp     0x35 <__JIT_ENTRY+0x35>
    // 00000031:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 35: c7 46 08 ff ff ff ff          movl    $0xffffffff, 0x8(%esi)  # imm = 0xFFFFFFFF
    // 3c: 89 54 24 18                   movl    %edx, 0x18(%esp)
    // 40: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 44: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 48: 5e                            popl    %esi
    // 49: 5f                            popl    %edi
    // 4a: 5b                            popl    %ebx
    // 4b: e9 00 00 00 00                jmp     0x50 <__JIT_ENTRY+0x50>
    // 0000004c:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[80] = {
        0x53, 0x57, 0x56, 0x8b, 0x54, 0x24, 0x18, 0x8b,
        0x4c, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x10, 0x8b,
        0x71, 0xfc, 0x8b, 0x7e, 0x0c, 0x85, 0xff, 0x74,
        0x23, 0x8b, 0x5e, 0x08, 0x3b, 0x5f, 0x08, 0x73,
        0x14, 0x89, 0x54, 0x24, 0x18, 0x89, 0x4c, 0x24,
        0x14, 0x89, 0x44, 0x24, 0x10, 0x5e, 0x5f, 0x5b,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x46, 0x08,
        0xff, 0xff, 0xff, 0xff, 0x89, 0x54, 0x24, 0x18,
        0x89, 0x4c, 0x24, 0x14, 0x89, 0x44, 0x24, 0x10,
        0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x31, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x4c, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_NOT_EXHAUSTED_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_NOT_EXHAUSTED_RANGE.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 10: 83 7e 10 00                   cmpl    $0x0, 0x10(%esi)
    // 14: 7e 12                         jle     0x28 <__JIT_ENTRY+0x28>
    // 16: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 1a: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 1e: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 22: 5e                            popl    %esi
    // 23: e9 00 00 00 00                jmp     0x28 <__JIT_ENTRY+0x28>
    // 00000024:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 28: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2c: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 30: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 34: 5e                            popl    %esi
    // 35: e9 00 00 00 00                jmp     0x3a <__JIT_ENTRY+0x3a>
    // 00000036:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[58] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x71, 0xfc,
        0x83, 0x7e, 0x10, 0x00, 0x7e, 0x12, 0x89, 0x54,
        0x24, 0x10, 0x89, 0x4c, 0x24, 0x0c, 0x89, 0x44,
        0x24, 0x08, 0x5e, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x54, 0x24, 0x10, 0x89, 0x4c, 0x24, 0x0c,
        0x89, 0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x24, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x36, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_NOT_EXHAUSTED_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_NOT_EXHAUSTED_TUPLE.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 11: 8b 7e 0c                      movl    0xc(%esi), %edi
    // 14: 85 ff                         testl   %edi, %edi
    // 16: 74 1b                         je      0x33 <__JIT_ENTRY+0x33>
    // 18: 8b 76 08                      movl    0x8(%esi), %esi
    // 1b: 3b 77 08                      cmpl    0x8(%edi), %esi
    // 1e: 7d 13                         jge     0x33 <__JIT_ENTRY+0x33>
    // 20: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 24: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 28: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 2c: 5e                            popl    %esi
    // 2d: 5f                            popl    %edi
    // 2e: e9 00 00 00 00                jmp     0x33 <__JIT_ENTRY+0x33>
    // 0000002f:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 33: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 37: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 3b: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3f: 5e                            popl    %esi
    // 40: 5f                            popl    %edi
    // 41: e9 00 00 00 00                jmp     0x46 <__JIT_ENTRY+0x46>
    // 00000042:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[70] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x71,
        0xfc, 0x8b, 0x7e, 0x0c, 0x85, 0xff, 0x74, 0x1b,
        0x8b, 0x76, 0x08, 0x3b, 0x77, 0x08, 0x7d, 0x13,
        0x89, 0x54, 0x24, 0x14, 0x89, 0x4c, 0x24, 0x10,
        0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x14, 0x89,
        0x4c, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e,
        0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x42, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_TOS_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_TOS_FLOAT.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 10: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000013:  IMAGE_REL_I386_DIR32 _PyFloat_Type
    // 17: 74 12                         je      0x2b <__JIT_ENTRY+0x2b>
    // 19: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 1d: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 21: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 25: 5e                            popl    %esi
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 00000027:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 2b: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2f: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 33: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 37: 5e                            popl    %esi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x71, 0xfc,
        0x81, 0x7e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x12, 0x89, 0x54, 0x24, 0x10, 0x89, 0x4c, 0x24,
        0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x10, 0x89,
        0x4c, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (uintptr_t)&PyFloat_Type);
    patch_x86_64_32rx(code + 0x27, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_TOS_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_TOS_INT.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 10: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000013:  IMAGE_REL_I386_DIR32 _PyLong_Type
    // 17: 74 12                         je      0x2b <__JIT_ENTRY+0x2b>
    // 19: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 1d: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 21: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 25: 5e                            popl    %esi
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 00000027:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 2b: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2f: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 33: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 37: 5e                            popl    %esi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x71, 0xfc,
        0x81, 0x7e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x12, 0x89, 0x54, 0x24, 0x10, 0x89, 0x4c, 0x24,
        0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x10, 0x89,
        0x4c, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (uintptr_t)&PyLong_Type);
    patch_x86_64_32rx(code + 0x27, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_TYPE_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_TYPE_VERSION.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 10: 8b 76 04                      movl    0x4(%esi), %esi
    // 13: 81 be c0 00 00 00 00 00 00 00 cmpl    $0x0, 0xc0(%esi)
    // 00000019:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 1d: 75 12                         jne     0x31 <__JIT_ENTRY+0x31>
    // 1f: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 23: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 27: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 2b: 5e                            popl    %esi
    // 2c: e9 00 00 00 00                jmp     0x31 <__JIT_ENTRY+0x31>
    // 0000002d:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 31: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 35: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 39: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 3d: 5e                            popl    %esi
    // 3e: e9 00 00 00 00                jmp     0x43 <__JIT_ENTRY+0x43>
    // 0000003f:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[67] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x71, 0xfc,
        0x8b, 0x76, 0x04, 0x81, 0xbe, 0xc0, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x12, 0x89,
        0x54, 0x24, 0x10, 0x89, 0x4c, 0x24, 0x0c, 0x89,
        0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x54, 0x24, 0x10, 0x89, 0x4c, 0x24,
        0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x19, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x3f, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_TYPE_VERSION_AND_LOCK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_TYPE_VERSION_AND_LOCK.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 10: 8b 76 04                      movl    0x4(%esi), %esi
    // 13: 81 be c0 00 00 00 00 00 00 00 cmpl    $0x0, 0xc0(%esi)
    // 00000019:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 1d: 75 12                         jne     0x31 <__JIT_ENTRY+0x31>
    // 1f: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 23: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 27: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 2b: 5e                            popl    %esi
    // 2c: e9 00 00 00 00                jmp     0x31 <__JIT_ENTRY+0x31>
    // 0000002d:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 31: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 35: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 39: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 3d: 5e                            popl    %esi
    // 3e: e9 00 00 00 00                jmp     0x43 <__JIT_ENTRY+0x43>
    // 0000003f:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[67] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x71, 0xfc,
        0x8b, 0x76, 0x04, 0x81, 0xbe, 0xc0, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x12, 0x89,
        0x54, 0x24, 0x10, 0x89, 0x4c, 0x24, 0x0c, 0x89,
        0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x54, 0x24, 0x10, 0x89, 0x4c, 0x24,
        0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x19, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x3f, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__IMPORT_FROM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _IMPORT_FROM.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 7: 8b 74 24 10                   movl    0x10(%esp), %esi
    // b: 8b 44 24 14                   movl    0x14(%esp), %eax
    // f: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000010:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 14: 0f b7 c9                      movzwl  %cx, %ecx
    // 17: 8b 50 fc                      movl    -0x4(%eax), %edx
    // 1a: 8b 1e                         movl    (%esi), %ebx
    // 1c: 8b 5b 10                      movl    0x10(%ebx), %ebx
    // 1f: 8b 4c 8b 0c                   movl    0xc(%ebx,%ecx,4), %ecx
    // 23: 89 46 20                      movl    %eax, 0x20(%esi)
    // 26: 51                            pushl   %ecx
    // 27: 52                            pushl   %edx
    // 28: 57                            pushl   %edi
    // 29: e8 00 00 00 00                calll   0x2e <__JIT_ENTRY+0x2e>
    // 0000002a:  IMAGE_REL_I386_REL32 __PyEval_ImportFrom
    // 2e: 83 c4 0c                      addl    $0xc, %esp
    // 31: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 34: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 3b: 85 c0                         testl   %eax, %eax
    // 3d: 74 19                         je      0x58 <__JIT_ENTRY+0x58>
    // 3f: 89 01                         movl    %eax, (%ecx)
    // 41: 83 c1 04                      addl    $0x4, %ecx
    // 44: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 48: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 4c: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 50: 5e                            popl    %esi
    // 51: 5f                            popl    %edi
    // 52: 5b                            popl    %ebx
    // 53: e9 00 00 00 00                jmp     0x58 <__JIT_ENTRY+0x58>
    // 00000054:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 58: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 5c: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 60: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 64: 5e                            popl    %esi
    // 65: 5f                            popl    %edi
    // 66: 5b                            popl    %ebx
    // 67: e9 00 00 00 00                jmp     0x6c <__JIT_ENTRY+0x6c>
    // 00000068:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[108] = {
        0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x18, 0x8b,
        0x74, 0x24, 0x10, 0x8b, 0x44, 0x24, 0x14, 0xb9,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x8b,
        0x50, 0xfc, 0x8b, 0x1e, 0x8b, 0x5b, 0x10, 0x8b,
        0x4c, 0x8b, 0x0c, 0x89, 0x46, 0x20, 0x51, 0x52,
        0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x0c, 0x8b, 0x4e, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x19, 0x89,
        0x01, 0x83, 0xc1, 0x04, 0x89, 0x7c, 0x24, 0x18,
        0x89, 0x4c, 0x24, 0x14, 0x89, 0x74, 0x24, 0x10,
        0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x7c, 0x24, 0x18, 0x89, 0x4c, 0x24, 0x14,
        0x89, 0x74, 0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x10, instruction->oparg);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)&_PyEval_ImportFrom + -0x4);
    patch_x86_64_32rx(code + 0x54, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x68, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__IMPORT_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _IMPORT_NAME.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 6c 24 20                   movl    0x20(%esp), %ebp
    // 9: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // d: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 11: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000012:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 16: 0f b7 c9                      movzwl  %cx, %ecx
    // 19: 8b 70 f8                      movl    -0x8(%eax), %esi
    // 1c: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 1f: 8b 17                         movl    (%edi), %edx
    // 21: 8b 52 10                      movl    0x10(%edx), %edx
    // 24: 8b 4c 8a 0c                   movl    0xc(%edx,%ecx,4), %ecx
    // 28: 89 47 20                      movl    %eax, 0x20(%edi)
    // 2b: 56                            pushl   %esi
    // 2c: 53                            pushl   %ebx
    // 2d: 51                            pushl   %ecx
    // 2e: 57                            pushl   %edi
    // 2f: 89 6c 24 10                   movl    %ebp, 0x10(%esp)
    // 33: 55                            pushl   %ebp
    // 34: e8 00 00 00 00                calll   0x39 <__JIT_ENTRY+0x39>
    // 00000035:  IMAGE_REL_I386_REL32 __PyEval_ImportName
    // 39: 83 c4 14                      addl    $0x14, %esp
    // 3c: 8b 6f 20                      movl    0x20(%edi), %ebp
    // 3f: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 46: 8b 0e                         movl    (%esi), %ecx
    // 48: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 4e: 7f 05                         jg      0x55 <__JIT_ENTRY+0x55>
    // 50: 49                            decl    %ecx
    // 51: 89 0e                         movl    %ecx, (%esi)
    // 53: 74 1e                         je      0x73 <__JIT_ENTRY+0x73>
    // 55: 8b 0b                         movl    (%ebx), %ecx
    // 57: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 5d: 7f 2b                         jg      0x8a <__JIT_ENTRY+0x8a>
    // 5f: 49                            decl    %ecx
    // 60: 89 0b                         movl    %ecx, (%ebx)
    // 62: 75 26                         jne     0x8a <__JIT_ENTRY+0x8a>
    // 64: 53                            pushl   %ebx
    // 65: 89 c6                         movl    %eax, %esi
    // 67: e8 00 00 00 00                calll   0x6c <__JIT_ENTRY+0x6c>
    // 00000068:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 6c: 89 f0                         movl    %esi, %eax
    // 6e: 83 c4 04                      addl    $0x4, %esp
    // 71: eb 17                         jmp     0x8a <__JIT_ENTRY+0x8a>
    // 73: 56                            pushl   %esi
    // 74: 89 c6                         movl    %eax, %esi
    // 76: e8 00 00 00 00                calll   0x7b <__JIT_ENTRY+0x7b>
    // 00000077:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 7b: 89 f0                         movl    %esi, %eax
    // 7d: 83 c4 04                      addl    $0x4, %esp
    // 80: 8b 0b                         movl    (%ebx), %ecx
    // 82: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 88: 7e d5                         jle     0x5f <__JIT_ENTRY+0x5f>
    // 8a: 85 c0                         testl   %eax, %eax
    // 8c: 74 21                         je      0xaf <__JIT_ENTRY+0xaf>
    // 8e: 89 45 f8                      movl    %eax, -0x8(%ebp)
    // 91: 83 c5 fc                      addl    $-0x4, %ebp
    // 94: 8b 04 24                      movl    (%esp), %eax
    // 97: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 9b: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // 9f: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // a3: 83 c4 04                      addl    $0x4, %esp
    // a6: 5e                            popl    %esi
    // a7: 5f                            popl    %edi
    // a8: 5b                            popl    %ebx
    // a9: 5d                            popl    %ebp
    // aa: e9 00 00 00 00                jmp     0xaf <__JIT_ENTRY+0xaf>
    // 000000ab:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // af: 83 c5 f8                      addl    $-0x8, %ebp
    // b2: 8b 04 24                      movl    (%esp), %eax
    // b5: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // b9: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // bd: 89 6c 24 1c                   movl    %ebp, 0x1c(%esp)
    // c1: 83 c4 04                      addl    $0x4, %esp
    // c4: 5e                            popl    %esi
    // c5: 5f                            popl    %edi
    // c6: 5b                            popl    %ebx
    // c7: 5d                            popl    %ebp
    // c8: e9 00 00 00 00                jmp     0xcd <__JIT_ENTRY+0xcd>
    // 000000c9:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[205] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x6c, 0x24,
        0x20, 0x8b, 0x7c, 0x24, 0x18, 0x8b, 0x44, 0x24,
        0x1c, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xc9, 0x8b, 0x70, 0xf8, 0x8b, 0x58, 0xfc, 0x8b,
        0x17, 0x8b, 0x52, 0x10, 0x8b, 0x4c, 0x8a, 0x0c,
        0x89, 0x47, 0x20, 0x56, 0x53, 0x51, 0x57, 0x89,
        0x6c, 0x24, 0x10, 0x55, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x14, 0x8b, 0x6f, 0x20, 0xc7,
        0x47, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0e,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x05,
        0x49, 0x89, 0x0e, 0x74, 0x1e, 0x8b, 0x0b, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x2b, 0x49,
        0x89, 0x0b, 0x75, 0x26, 0x53, 0x89, 0xc6, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xf0, 0x83, 0xc4,
        0x04, 0xeb, 0x17, 0x56, 0x89, 0xc6, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xf0, 0x83, 0xc4, 0x04,
        0x8b, 0x0b, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f,
        0x7e, 0xd5, 0x85, 0xc0, 0x74, 0x21, 0x89, 0x45,
        0xf8, 0x83, 0xc5, 0xfc, 0x8b, 0x04, 0x24, 0x89,
        0x44, 0x24, 0x20, 0x89, 0x6c, 0x24, 0x1c, 0x89,
        0x7c, 0x24, 0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc5, 0xf8, 0x8b, 0x04, 0x24, 0x89, 0x44, 0x24,
        0x20, 0x89, 0x7c, 0x24, 0x18, 0x89, 0x6c, 0x24,
        0x1c, 0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x12, instruction->oparg);
    patch_x86_64_32rx(code + 0x35, (uintptr_t)&_PyEval_ImportName + -0x4);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x77, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xab, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xc9, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__INIT_CALL_BOUND_METHOD_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 9: 89 04 24                      movl    %eax, (%esp)
    // c: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 10: 8b 74 24 18                   movl    0x18(%esp), %esi
    // 14: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000015:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 19: 0f b7 d1                      movzwl  %cx, %edx
    // 1c: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 21: 29 d1                         subl    %edx, %ecx
    // 23: f7 d2                         notl    %edx
    // 25: 8b 1c 88                      movl    (%eax,%ecx,4), %ebx
    // 28: 8b 6b 0c                      movl    0xc(%ebx), %ebp
    // 2b: 8b 7d 00                      movl    (%ebp), %edi
    // 2e: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 34: 7f 04                         jg      0x3a <__JIT_ENTRY+0x3a>
    // 36: 47                            incl    %edi
    // 37: 89 7d 00                      movl    %edi, (%ebp)
    // 3a: 89 2c 90                      movl    %ebp, (%eax,%edx,4)
    // 3d: 8b 14 88                      movl    (%eax,%ecx,4), %edx
    // 40: 8b 5b 08                      movl    0x8(%ebx), %ebx
    // 43: 8b 3b                         movl    (%ebx), %edi
    // 45: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 4b: 7f 03                         jg      0x50 <__JIT_ENTRY+0x50>
    // 4d: 47                            incl    %edi
    // 4e: 89 3b                         movl    %edi, (%ebx)
    // 50: 89 1c 88                      movl    %ebx, (%eax,%ecx,4)
    // 53: 89 46 20                      movl    %eax, 0x20(%esi)
    // 56: 8b 02                         movl    (%edx), %eax
    // 58: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 5d: 7f 0e                         jg      0x6d <__JIT_ENTRY+0x6d>
    // 5f: 48                            decl    %eax
    // 60: 89 02                         movl    %eax, (%edx)
    // 62: 75 09                         jne     0x6d <__JIT_ENTRY+0x6d>
    // 64: 52                            pushl   %edx
    // 65: e8 00 00 00 00                calll   0x6a <__JIT_ENTRY+0x6a>
    // 00000066:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 6a: 83 c4 04                      addl    $0x4, %esp
    // 6d: 8b 46 20                      movl    0x20(%esi), %eax
    // 70: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 77: 8b 0c 24                      movl    (%esp), %ecx
    // 7a: 89 4c 24 20                   movl    %ecx, 0x20(%esp)
    // 7e: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // 82: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 86: 83 c4 04                      addl    $0x4, %esp
    // 89: 5e                            popl    %esi
    // 8a: 5f                            popl    %edi
    // 8b: 5b                            popl    %ebx
    // 8c: 5d                            popl    %ebp
    // 8d: e9 00 00 00 00                jmp     0x92 <__JIT_ENTRY+0x92>
    // 0000008e:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[141] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x44, 0x24,
        0x20, 0x89, 0x04, 0x24, 0x8b, 0x44, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x18, 0xb9, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xb7, 0xd1, 0xb9, 0xfe, 0xff, 0xff,
        0xff, 0x29, 0xd1, 0xf7, 0xd2, 0x8b, 0x1c, 0x88,
        0x8b, 0x6b, 0x0c, 0x8b, 0x7d, 0x00, 0x81, 0xff,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x04, 0x47, 0x89,
        0x7d, 0x00, 0x89, 0x2c, 0x90, 0x8b, 0x14, 0x88,
        0x8b, 0x5b, 0x08, 0x8b, 0x3b, 0x81, 0xff, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x03, 0x47, 0x89, 0x3b,
        0x89, 0x1c, 0x88, 0x89, 0x46, 0x20, 0x8b, 0x02,
        0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x48,
        0x89, 0x02, 0x75, 0x09, 0x52, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b, 0x46, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x0c, 0x24, 0x89, 0x4c, 0x24, 0x20, 0x89, 0x44,
        0x24, 0x1c, 0x89, 0x74, 0x24, 0x18, 0x83, 0xc4,
        0x04, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x15, instruction->oparg);
    patch_x86_64_32rx(code + 0x66, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__INIT_CALL_PY_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 24                      subl    $0x24, %esp
    // 7: 8b 74 24 40                   movl    0x40(%esp), %esi
    // b: 8b 5c 24 3c                   movl    0x3c(%esp), %ebx
    // f: b8 00 00 00 00                movl    $0x0, %eax
    // 00000010:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 14: 0f b7 c0                      movzwl  %ax, %eax
    // 17: 89 04 24                      movl    %eax, (%esp)
    // 1a: 89 c7                         movl    %eax, %edi
    // 1c: f7 d7                         notl    %edi
    // 1e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 23: 29 c1                         subl    %eax, %ecx
    // 25: 89 4c 24 1c                   movl    %ecx, 0x1c(%esp)
    // 29: 8b 04 8b                      movl    (%ebx,%ecx,4), %eax
    // 2c: 8b 48 18                      movl    0x18(%eax), %ecx
    // 2f: 8b ae 94 00 00 00             movl    0x94(%esi), %ebp
    // 35: 89 6c 24 18                   movl    %ebp, 0x18(%esp)
    // 39: 8b 51 34                      movl    0x34(%ecx), %edx
    // 3c: 8d 54 95 00                   leal    (%ebp,%edx,4), %edx
    // 40: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 44: 89 c5                         movl    %eax, %ebp
    // 46: 8b 54 24 38                   movl    0x38(%esp), %edx
    // 4a: 89 5c 24 04                   movl    %ebx, 0x4(%esp)
    // 4e: 89 7c 24 0c                   movl    %edi, 0xc(%esp)
    // 52: 8b 3c bb                      movl    (%ebx,%edi,4), %edi
    // 55: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // 59: 8b 44 24 10                   movl    0x10(%esp), %eax
    // 5d: 89 86 94 00 00 00             movl    %eax, 0x94(%esi)
    // 63: 31 db                         xorl    %ebx, %ebx
    // 65: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 69: 85 ff                         testl   %edi, %edi
    // 6b: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 6f: 0f 95 c3                      setne   %bl
    // 72: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 76: 89 57 04                      movl    %edx, 0x4(%edi)
    // 79: 89 6f 08                      movl    %ebp, 0x8(%edi)
    // 7c: 89 5c 24 08                   movl    %ebx, 0x8(%esp)
    // 80: 8b 04 24                      movl    (%esp), %eax
    // 83: 8d 14 03                      leal    (%ebx,%eax), %edx
    // 86: 8b 19                         movl    (%ecx), %ebx
    // 88: 81 fb ff ff ff 3f             cmpl    $0x3fffffff, %ebx       # imm = 0x3FFFFFFF
    // 8e: 7f 03                         jg      0x93 <__JIT_ENTRY+0x93>
    // 90: 43                            incl    %ebx
    // 91: 89 19                         movl    %ebx, (%ecx)
    // 93: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 97: 8b 74 24 04                   movl    0x4(%esp), %esi
    // 9b: 8d 1c 86                      leal    (%esi,%eax,4), %ebx
    // 9e: 89 0f                         movl    %ecx, (%edi)
    // a0: 8b 45 0c                      movl    0xc(%ebp), %eax
    // a3: 89 47 10                      movl    %eax, 0x10(%edi)
    // a6: 8b 45 08                      movl    0x8(%ebp), %eax
    // a9: 89 47 0c                      movl    %eax, 0xc(%edi)
    // ac: c7 47 14 00 00 00 00          movl    $0x0, 0x14(%edi)
    // b3: 8d 47 28                      leal    0x28(%edi), %eax
    // b6: 8b 71 30                      movl    0x30(%ecx), %esi
    // b9: 8d 74 b7 28                   leal    0x28(%edi,%esi,4), %esi
    // bd: 89 77 20                      movl    %esi, 0x20(%edi)
    // c0: c7 47 18 00 00 00 00          movl    $0x0, 0x18(%edi)
    // c7: 8d b1 80 00 00 00             leal    0x80(%ecx), %esi
    // cd: 89 77 1c                      movl    %esi, 0x1c(%edi)
    // d0: c7 47 24 00 00 00 00          movl    $0x0, 0x24(%edi)
    // d7: 39 51 30                      cmpl    %edx, 0x30(%ecx)
    // da: 7e 11                         jle     0xed <__JIT_ENTRY+0xed>
    // dc: 0f 1f 40 00                   nopl    (%eax)
    // e0: c7 04 90 00 00 00 00          movl    $0x0, (%eax,%edx,4)
    // e7: 42                            incl    %edx
    // e8: 3b 51 30                      cmpl    0x30(%ecx), %edx
    // eb: 7c f3                         jl      0xe0 <__JIT_ENTRY+0xe0>
    // ed: 89 5c 24 0c                   movl    %ebx, 0xc(%esp)
    // f1: 8b 0b                         movl    (%ebx), %ecx
    // f3: 89 08                         movl    %ecx, (%eax)
    // f5: b9 00 00 00 00                movl    $0x0, %ecx
    // 000000f6:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // fa: 66 85 c9                      testw   %cx, %cx
    // fd: 8b 2c 24                      movl    (%esp), %ebp
    // 100: 8b 5c 24 04                   movl    0x4(%esp), %ebx
    // 104: 0f 84 db 00 00 00             je      0x1e5 <__JIT_ENTRY+0x1e5>
    // 10a: 8d 14 ad 00 00 00 00          leal    (,%ebp,4), %edx
    // 111: 89 d9                         movl    %ebx, %ecx
    // 113: 29 d1                         subl    %edx, %ecx
    // 115: ba 00 00 00 00                movl    $0x0, %edx
    // 00000116:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 11a: 31 f6                         xorl    %esi, %esi
    // 11c: 66 83 fa 13                   cmpw    $0x13, %dx
    // 120: 76 53                         jbe     0x175 <__JIT_ENTRY+0x175>
    // 122: 31 d2                         xorl    %edx, %edx
    // 124: 83 7c 24 14 00                cmpl    $0x0, 0x14(%esp)
    // 129: 0f 95 c2                      setne   %dl
    // 12c: 8d 14 97                      leal    (%edi,%edx,4), %edx
    // 12f: 8d 14 aa                      leal    (%edx,%ebp,4), %edx
    // 132: 29 da                         subl    %ebx, %edx
    // 134: 83 c2 28                      addl    $0x28, %edx
    // 137: 83 fa 20                      cmpl    $0x20, %edx
    // 13a: 72 39                         jb      0x175 <__JIT_ENTRY+0x175>
    // 13c: 89 ee                         movl    %ebp, %esi
    // 13e: 83 e6 f8                      andl    $-0x8, %esi
    // 141: 8b 54 24 08                   movl    0x8(%esp), %edx
    // 145: 8d 14 97                      leal    (%edi,%edx,4), %edx
    // 148: 83 c2 38                      addl    $0x38, %edx
    // 14b: 8d 69 10                      leal    0x10(%ecx), %ebp
    // 14e: 31 db                         xorl    %ebx, %ebx
    // 150: 0f 10 44 9d f0                movups  -0x10(%ebp,%ebx,4), %xmm0
    // 155: 0f 10 4c 9d 00                movups  (%ebp,%ebx,4), %xmm1
    // 15a: 0f 11 44 9a f0                movups  %xmm0, -0x10(%edx,%ebx,4)
    // 15f: 0f 11 0c 9a                   movups  %xmm1, (%edx,%ebx,4)
    // 163: 83 c3 08                      addl    $0x8, %ebx
    // 166: 39 de                         cmpl    %ebx, %esi
    // 168: 75 e6                         jne     0x150 <__JIT_ENTRY+0x150>
    // 16a: 8b 2c 24                      movl    (%esp), %ebp
    // 16d: 39 ee                         cmpl    %ebp, %esi
    // 16f: 8b 5c 24 04                   movl    0x4(%esp), %ebx
    // 173: 74 70                         je      0x1e5 <__JIT_ENTRY+0x1e5>
    // 175: 89 f2                         movl    %esi, %edx
    // 177: 83 e5 03                      andl    $0x3, %ebp
    // 17a: 74 1e                         je      0x19a <__JIT_ENTRY+0x19a>
    // 17c: 8b 54 24 08                   movl    0x8(%esp), %edx
    // 180: 8d 04 90                      leal    (%eax,%edx,4), %eax
    // 183: 89 f2                         movl    %esi, %edx
    // 185: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%eax,%eax)
    // 190: 8b 1c 91                      movl    (%ecx,%edx,4), %ebx
    // 193: 89 1c 90                      movl    %ebx, (%eax,%edx,4)
    // 196: 42                            incl    %edx
    // 197: 4d                            decl    %ebp
    // 198: 75 f6                         jne     0x190 <__JIT_ENTRY+0x190>
    // 19a: 8b 2c 24                      movl    (%esp), %ebp
    // 19d: 29 ee                         subl    %ebp, %esi
    // 19f: 83 fe fc                      cmpl    $-0x4, %esi
    // 1a2: 8b 5c 24 04                   movl    0x4(%esp), %ebx
    // 1a6: 77 3d                         ja      0x1e5 <__JIT_ENTRY+0x1e5>
    // 1a8: 83 c1 0c                      addl    $0xc, %ecx
    // 1ab: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 1af: 8d 04 87                      leal    (%edi,%eax,4), %eax
    // 1b2: 83 c0 34                      addl    $0x34, %eax
    // 1b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%eax,%eax)
    // 1c0: 8b 74 91 f4                   movl    -0xc(%ecx,%edx,4), %esi
    // 1c4: 89 74 90 f4                   movl    %esi, -0xc(%eax,%edx,4)
    // 1c8: 8b 74 91 f8                   movl    -0x8(%ecx,%edx,4), %esi
    // 1cc: 89 74 90 f8                   movl    %esi, -0x8(%eax,%edx,4)
    // 1d0: 8b 74 91 fc                   movl    -0x4(%ecx,%edx,4), %esi
    // 1d4: 89 74 90 fc                   movl    %esi, -0x4(%eax,%edx,4)
    // 1d8: 8b 34 91                      movl    (%ecx,%edx,4), %esi
    // 1db: 89 34 90                      movl    %esi, (%eax,%edx,4)
    // 1de: 83 c2 04                      addl    $0x4, %edx
    // 1e1: 39 d5                         cmpl    %edx, %ebp
    // 1e3: 75 db                         jne     0x1c0 <__JIT_ENTRY+0x1c0>
    // 1e5: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 1e9: 89 3c 83                      movl    %edi, (%ebx,%eax,4)
    // 1ec: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 1f0: 89 44 24 40                   movl    %eax, 0x40(%esp)
    // 1f4: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 1f8: 89 44 24 3c                   movl    %eax, 0x3c(%esp)
    // 1fc: 8b 44 24 10                   movl    0x10(%esp), %eax
    // 200: 89 44 24 38                   movl    %eax, 0x38(%esp)
    // 204: 83 c4 24                      addl    $0x24, %esp
    // 207: 5e                            popl    %esi
    // 208: 5f                            popl    %edi
    // 209: 5b                            popl    %ebx
    // 20a: 5d                            popl    %ebp
    // 20b: e9 00 00 00 00                jmp     0x210 <__JIT_ENTRY+0x210>
    // 0000020c:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[523] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x24, 0x8b,
        0x74, 0x24, 0x40, 0x8b, 0x5c, 0x24, 0x3c, 0xb8,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89,
        0x04, 0x24, 0x89, 0xc7, 0xf7, 0xd7, 0xb9, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xc1, 0x89, 0x4c, 0x24,
        0x1c, 0x8b, 0x04, 0x8b, 0x8b, 0x48, 0x18, 0x8b,
        0xae, 0x94, 0x00, 0x00, 0x00, 0x89, 0x6c, 0x24,
        0x18, 0x8b, 0x51, 0x34, 0x8d, 0x54, 0x95, 0x00,
        0x89, 0x54, 0x24, 0x10, 0x89, 0xc5, 0x8b, 0x54,
        0x24, 0x38, 0x89, 0x5c, 0x24, 0x04, 0x89, 0x7c,
        0x24, 0x0c, 0x8b, 0x3c, 0xbb, 0x89, 0x74, 0x24,
        0x20, 0x8b, 0x44, 0x24, 0x10, 0x89, 0x86, 0x94,
        0x00, 0x00, 0x00, 0x31, 0xdb, 0x89, 0x7c, 0x24,
        0x14, 0x85, 0xff, 0x8b, 0x7c, 0x24, 0x18, 0x0f,
        0x95, 0xc3, 0x89, 0x54, 0x24, 0x10, 0x89, 0x57,
        0x04, 0x89, 0x6f, 0x08, 0x89, 0x5c, 0x24, 0x08,
        0x8b, 0x04, 0x24, 0x8d, 0x14, 0x03, 0x8b, 0x19,
        0x81, 0xfb, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03,
        0x43, 0x89, 0x19, 0x8b, 0x44, 0x24, 0x0c, 0x8b,
        0x74, 0x24, 0x04, 0x8d, 0x1c, 0x86, 0x89, 0x0f,
        0x8b, 0x45, 0x0c, 0x89, 0x47, 0x10, 0x8b, 0x45,
        0x08, 0x89, 0x47, 0x0c, 0xc7, 0x47, 0x14, 0x00,
        0x00, 0x00, 0x00, 0x8d, 0x47, 0x28, 0x8b, 0x71,
        0x30, 0x8d, 0x74, 0xb7, 0x28, 0x89, 0x77, 0x20,
        0xc7, 0x47, 0x18, 0x00, 0x00, 0x00, 0x00, 0x8d,
        0xb1, 0x80, 0x00, 0x00, 0x00, 0x89, 0x77, 0x1c,
        0xc7, 0x47, 0x24, 0x00, 0x00, 0x00, 0x00, 0x39,
        0x51, 0x30, 0x7e, 0x11, 0x0f, 0x1f, 0x40, 0x00,
        0xc7, 0x04, 0x90, 0x00, 0x00, 0x00, 0x00, 0x42,
        0x3b, 0x51, 0x30, 0x7c, 0xf3, 0x89, 0x5c, 0x24,
        0x0c, 0x8b, 0x0b, 0x89, 0x08, 0xb9, 0x00, 0x00,
        0x00, 0x00, 0x66, 0x85, 0xc9, 0x8b, 0x2c, 0x24,
        0x8b, 0x5c, 0x24, 0x04, 0x0f, 0x84, 0xdb, 0x00,
        0x00, 0x00, 0x8d, 0x14, 0xad, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xd9, 0x29, 0xd1, 0xba, 0x00, 0x00,
        0x00, 0x00, 0x31, 0xf6, 0x66, 0x83, 0xfa, 0x13,
        0x76, 0x53, 0x31, 0xd2, 0x83, 0x7c, 0x24, 0x14,
        0x00, 0x0f, 0x95, 0xc2, 0x8d, 0x14, 0x97, 0x8d,
        0x14, 0xaa, 0x29, 0xda, 0x83, 0xc2, 0x28, 0x83,
        0xfa, 0x20, 0x72, 0x39, 0x89, 0xee, 0x83, 0xe6,
        0xf8, 0x8b, 0x54, 0x24, 0x08, 0x8d, 0x14, 0x97,
        0x83, 0xc2, 0x38, 0x8d, 0x69, 0x10, 0x31, 0xdb,
        0x0f, 0x10, 0x44, 0x9d, 0xf0, 0x0f, 0x10, 0x4c,
        0x9d, 0x00, 0x0f, 0x11, 0x44, 0x9a, 0xf0, 0x0f,
        0x11, 0x0c, 0x9a, 0x83, 0xc3, 0x08, 0x39, 0xde,
        0x75, 0xe6, 0x8b, 0x2c, 0x24, 0x39, 0xee, 0x8b,
        0x5c, 0x24, 0x04, 0x74, 0x70, 0x89, 0xf2, 0x83,
        0xe5, 0x03, 0x74, 0x1e, 0x8b, 0x54, 0x24, 0x08,
        0x8d, 0x04, 0x90, 0x89, 0xf2, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x1c, 0x91, 0x89, 0x1c, 0x90, 0x42, 0x4d,
        0x75, 0xf6, 0x8b, 0x2c, 0x24, 0x29, 0xee, 0x83,
        0xfe, 0xfc, 0x8b, 0x5c, 0x24, 0x04, 0x77, 0x3d,
        0x83, 0xc1, 0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8d,
        0x04, 0x87, 0x83, 0xc0, 0x34, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x74, 0x91, 0xf4, 0x89, 0x74, 0x90, 0xf4,
        0x8b, 0x74, 0x91, 0xf8, 0x89, 0x74, 0x90, 0xf8,
        0x8b, 0x74, 0x91, 0xfc, 0x89, 0x74, 0x90, 0xfc,
        0x8b, 0x34, 0x91, 0x89, 0x34, 0x90, 0x83, 0xc2,
        0x04, 0x39, 0xd5, 0x75, 0xdb, 0x8b, 0x44, 0x24,
        0x1c, 0x89, 0x3c, 0x83, 0x8b, 0x44, 0x24, 0x20,
        0x89, 0x44, 0x24, 0x40, 0x8b, 0x44, 0x24, 0x0c,
        0x89, 0x44, 0x24, 0x3c, 0x8b, 0x44, 0x24, 0x10,
        0x89, 0x44, 0x24, 0x38, 0x83, 0xc4, 0x24, 0x5e,
        0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x10, instruction->oparg);
    patch_32(code + 0xf6, instruction->oparg);
    patch_32(code + 0x116, instruction->oparg);
}

void
emit__INIT_CALL_PY_EXACT_ARGS_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS_0.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 0c                      subl    $0xc, %esp
    // 7: 8b 4c 24 28                   movl    0x28(%esp), %ecx
    // b: 8b 44 24 24                   movl    0x24(%esp), %eax
    // f: 31 d2                         xorl    %edx, %edx
    // 11: 83 78 fc 00                   cmpl    $0x0, -0x4(%eax)
    // 15: 89 04 24                      movl    %eax, (%esp)
    // 18: 8b 68 f8                      movl    -0x8(%eax), %ebp
    // 1b: 8b 5d 18                      movl    0x18(%ebp), %ebx
    // 1e: 8b b1 94 00 00 00             movl    0x94(%ecx), %esi
    // 24: 8b 7b 34                      movl    0x34(%ebx), %edi
    // 27: 8d 3c be                      leal    (%esi,%edi,4), %edi
    // 2a: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 2e: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 32: 89 b9 94 00 00 00             movl    %edi, 0x94(%ecx)
    // 38: 0f 95 c2                      setne   %dl
    // 3b: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 3f: 89 46 04                      movl    %eax, 0x4(%esi)
    // 42: 89 6e 08                      movl    %ebp, 0x8(%esi)
    // 45: 8b 3b                         movl    (%ebx), %edi
    // 47: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 4d: 7f 03                         jg      0x52 <__JIT_ENTRY+0x52>
    // 4f: 47                            incl    %edi
    // 50: 89 3b                         movl    %edi, (%ebx)
    // 52: 8b 04 24                      movl    (%esp), %eax
    // 55: 8d 48 fc                      leal    -0x4(%eax), %ecx
    // 58: 89 1e                         movl    %ebx, (%esi)
    // 5a: 8b 7d 0c                      movl    0xc(%ebp), %edi
    // 5d: 89 7e 10                      movl    %edi, 0x10(%esi)
    // 60: 8b 7d 08                      movl    0x8(%ebp), %edi
    // 63: 89 7e 0c                      movl    %edi, 0xc(%esi)
    // 66: c7 46 14 00 00 00 00          movl    $0x0, 0x14(%esi)
    // 6d: 8b 7b 30                      movl    0x30(%ebx), %edi
    // 70: 8d 7c be 28                   leal    0x28(%esi,%edi,4), %edi
    // 74: 89 7e 20                      movl    %edi, 0x20(%esi)
    // 77: c7 46 18 00 00 00 00          movl    $0x0, 0x18(%esi)
    // 7e: 8d bb 80 00 00 00             leal    0x80(%ebx), %edi
    // 84: 89 7e 1c                      movl    %edi, 0x1c(%esi)
    // 87: c7 46 24 00 00 00 00          movl    $0x0, 0x24(%esi)
    // 8e: 39 53 30                      cmpl    %edx, 0x30(%ebx)
    // 91: 7e 1b                         jle     0xae <__JIT_ENTRY+0xae>
    // 93: 8d 6e 28                      leal    0x28(%esi), %ebp
    // 96: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%eax,%eax)
    // a0: c7 44 95 00 00 00 00 00       movl    $0x0, (%ebp,%edx,4)
    // a8: 42                            incl    %edx
    // a9: 3b 53 30                      cmpl    0x30(%ebx), %edx
    // ac: 7c f2                         jl      0xa0 <__JIT_ENTRY+0xa0>
    // ae: 8b 50 fc                      movl    -0x4(%eax), %edx
    // b1: 89 56 28                      movl    %edx, 0x28(%esi)
    // b4: 89 70 f8                      movl    %esi, -0x8(%eax)
    // b7: 8b 44 24 04                   movl    0x4(%esp), %eax
    // bb: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // bf: 89 4c 24 24                   movl    %ecx, 0x24(%esp)
    // c3: 8b 44 24 08                   movl    0x8(%esp), %eax
    // c7: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // cb: 83 c4 0c                      addl    $0xc, %esp
    // ce: 5e                            popl    %esi
    // cf: 5f                            popl    %edi
    // d0: 5b                            popl    %ebx
    // d1: 5d                            popl    %ebp
    // d2: e9 00 00 00 00                jmp     0xd7 <__JIT_ENTRY+0xd7>
    // 000000d3:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[210] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x0c, 0x8b,
        0x4c, 0x24, 0x28, 0x8b, 0x44, 0x24, 0x24, 0x31,
        0xd2, 0x83, 0x78, 0xfc, 0x00, 0x89, 0x04, 0x24,
        0x8b, 0x68, 0xf8, 0x8b, 0x5d, 0x18, 0x8b, 0xb1,
        0x94, 0x00, 0x00, 0x00, 0x8b, 0x7b, 0x34, 0x8d,
        0x3c, 0xbe, 0x8b, 0x44, 0x24, 0x20, 0x89, 0x4c,
        0x24, 0x04, 0x89, 0xb9, 0x94, 0x00, 0x00, 0x00,
        0x0f, 0x95, 0xc2, 0x89, 0x44, 0x24, 0x08, 0x89,
        0x46, 0x04, 0x89, 0x6e, 0x08, 0x8b, 0x3b, 0x81,
        0xff, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03, 0x47,
        0x89, 0x3b, 0x8b, 0x04, 0x24, 0x8d, 0x48, 0xfc,
        0x89, 0x1e, 0x8b, 0x7d, 0x0c, 0x89, 0x7e, 0x10,
        0x8b, 0x7d, 0x08, 0x89, 0x7e, 0x0c, 0xc7, 0x46,
        0x14, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x7b, 0x30,
        0x8d, 0x7c, 0xbe, 0x28, 0x89, 0x7e, 0x20, 0xc7,
        0x46, 0x18, 0x00, 0x00, 0x00, 0x00, 0x8d, 0xbb,
        0x80, 0x00, 0x00, 0x00, 0x89, 0x7e, 0x1c, 0xc7,
        0x46, 0x24, 0x00, 0x00, 0x00, 0x00, 0x39, 0x53,
        0x30, 0x7e, 0x1b, 0x8d, 0x6e, 0x28, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xc7, 0x44, 0x95, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x42, 0x3b, 0x53, 0x30, 0x7c, 0xf2, 0x8b, 0x50,
        0xfc, 0x89, 0x56, 0x28, 0x89, 0x70, 0xf8, 0x8b,
        0x44, 0x24, 0x04, 0x89, 0x44, 0x24, 0x28, 0x89,
        0x4c, 0x24, 0x24, 0x8b, 0x44, 0x24, 0x08, 0x89,
        0x44, 0x24, 0x20, 0x83, 0xc4, 0x0c, 0x5e, 0x5f,
        0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS_1.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 0c                      subl    $0xc, %esp
    // 7: 8b 6c 24 28                   movl    0x28(%esp), %ebp
    // b: 8b 4c 24 24                   movl    0x24(%esp), %ecx
    // f: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 13: 89 04 24                      movl    %eax, (%esp)
    // 16: 8b 41 f4                      movl    -0xc(%ecx), %eax
    // 19: 8b 78 18                      movl    0x18(%eax), %edi
    // 1c: 8b b5 94 00 00 00             movl    0x94(%ebp), %esi
    // 22: 8b 5f 34                      movl    0x34(%edi), %ebx
    // 25: 8d 1c 9e                      leal    (%esi,%ebx,4), %ebx
    // 28: 8b 51 f8                      movl    -0x8(%ecx), %edx
    // 2b: 89 6c 24 08                   movl    %ebp, 0x8(%esp)
    // 2f: 89 9d 94 00 00 00             movl    %ebx, 0x94(%ebp)
    // 35: 89 54 24 04                   movl    %edx, 0x4(%esp)
    // 39: 83 fa 01                      cmpl    $0x1, %edx
    // 3c: bd 01 00 00 00                movl    $0x1, %ebp
    // 41: 83 dd ff                      sbbl    $-0x1, %ebp
    // 44: 8b 14 24                      movl    (%esp), %edx
    // 47: 89 56 04                      movl    %edx, 0x4(%esi)
    // 4a: 89 46 08                      movl    %eax, 0x8(%esi)
    // 4d: 8b 1f                         movl    (%edi), %ebx
    // 4f: 81 fb ff ff ff 3f             cmpl    $0x3fffffff, %ebx       # imm = 0x3FFFFFFF
    // 55: 7f 03                         jg      0x5a <__JIT_ENTRY+0x5a>
    // 57: 43                            incl    %ebx
    // 58: 89 1f                         movl    %ebx, (%edi)
    // 5a: 8d 51 f8                      leal    -0x8(%ecx), %edx
    // 5d: 89 3e                         movl    %edi, (%esi)
    // 5f: 8b 58 0c                      movl    0xc(%eax), %ebx
    // 62: 89 5e 10                      movl    %ebx, 0x10(%esi)
    // 65: 8b 40 08                      movl    0x8(%eax), %eax
    // 68: 89 46 0c                      movl    %eax, 0xc(%esi)
    // 6b: c7 46 14 00 00 00 00          movl    $0x0, 0x14(%esi)
    // 72: 8b 47 30                      movl    0x30(%edi), %eax
    // 75: 8d 44 86 28                   leal    0x28(%esi,%eax,4), %eax
    // 79: 89 46 20                      movl    %eax, 0x20(%esi)
    // 7c: c7 46 18 00 00 00 00          movl    $0x0, 0x18(%esi)
    // 83: 8d 87 80 00 00 00             leal    0x80(%edi), %eax
    // 89: 89 46 1c                      movl    %eax, 0x1c(%esi)
    // 8c: c7 46 24 00 00 00 00          movl    $0x0, 0x24(%esi)
    // 93: 39 6f 30                      cmpl    %ebp, 0x30(%edi)
    // 96: 7e 15                         jle     0xad <__JIT_ENTRY+0xad>
    // 98: 8d 46 28                      leal    0x28(%esi), %eax
    // 9b: 0f 1f 44 00 00                nopl    (%eax,%eax)
    // a0: c7 04 a8 00 00 00 00          movl    $0x0, (%eax,%ebp,4)
    // a7: 45                            incl    %ebp
    // a8: 3b 6f 30                      cmpl    0x30(%edi), %ebp
    // ab: 7c f3                         jl      0xa0 <__JIT_ENTRY+0xa0>
    // ad: 31 c0                         xorl    %eax, %eax
    // af: 83 7c 24 04 00                cmpl    $0x0, 0x4(%esp)
    // b4: 0f 95 c0                      setne   %al
    // b7: 8b 79 f8                      movl    -0x8(%ecx), %edi
    // ba: 89 7e 28                      movl    %edi, 0x28(%esi)
    // bd: 8b 79 fc                      movl    -0x4(%ecx), %edi
    // c0: 89 7c 86 28                   movl    %edi, 0x28(%esi,%eax,4)
    // c4: 89 71 f4                      movl    %esi, -0xc(%ecx)
    // c7: 8b 44 24 08                   movl    0x8(%esp), %eax
    // cb: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // cf: 89 54 24 24                   movl    %edx, 0x24(%esp)
    // d3: 8b 04 24                      movl    (%esp), %eax
    // d6: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // da: 83 c4 0c                      addl    $0xc, %esp
    // dd: 5e                            popl    %esi
    // de: 5f                            popl    %edi
    // df: 5b                            popl    %ebx
    // e0: 5d                            popl    %ebp
    // e1: e9 00 00 00 00                jmp     0xe6 <__JIT_ENTRY+0xe6>
    // 000000e2:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[225] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x0c, 0x8b,
        0x6c, 0x24, 0x28, 0x8b, 0x4c, 0x24, 0x24, 0x8b,
        0x44, 0x24, 0x20, 0x89, 0x04, 0x24, 0x8b, 0x41,
        0xf4, 0x8b, 0x78, 0x18, 0x8b, 0xb5, 0x94, 0x00,
        0x00, 0x00, 0x8b, 0x5f, 0x34, 0x8d, 0x1c, 0x9e,
        0x8b, 0x51, 0xf8, 0x89, 0x6c, 0x24, 0x08, 0x89,
        0x9d, 0x94, 0x00, 0x00, 0x00, 0x89, 0x54, 0x24,
        0x04, 0x83, 0xfa, 0x01, 0xbd, 0x01, 0x00, 0x00,
        0x00, 0x83, 0xdd, 0xff, 0x8b, 0x14, 0x24, 0x89,
        0x56, 0x04, 0x89, 0x46, 0x08, 0x8b, 0x1f, 0x81,
        0xfb, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03, 0x43,
        0x89, 0x1f, 0x8d, 0x51, 0xf8, 0x89, 0x3e, 0x8b,
        0x58, 0x0c, 0x89, 0x5e, 0x10, 0x8b, 0x40, 0x08,
        0x89, 0x46, 0x0c, 0xc7, 0x46, 0x14, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x47, 0x30, 0x8d, 0x44, 0x86,
        0x28, 0x89, 0x46, 0x20, 0xc7, 0x46, 0x18, 0x00,
        0x00, 0x00, 0x00, 0x8d, 0x87, 0x80, 0x00, 0x00,
        0x00, 0x89, 0x46, 0x1c, 0xc7, 0x46, 0x24, 0x00,
        0x00, 0x00, 0x00, 0x39, 0x6f, 0x30, 0x7e, 0x15,
        0x8d, 0x46, 0x28, 0x0f, 0x1f, 0x44, 0x00, 0x00,
        0xc7, 0x04, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x45,
        0x3b, 0x6f, 0x30, 0x7c, 0xf3, 0x31, 0xc0, 0x83,
        0x7c, 0x24, 0x04, 0x00, 0x0f, 0x95, 0xc0, 0x8b,
        0x79, 0xf8, 0x89, 0x7e, 0x28, 0x8b, 0x79, 0xfc,
        0x89, 0x7c, 0x86, 0x28, 0x89, 0x71, 0xf4, 0x8b,
        0x44, 0x24, 0x08, 0x89, 0x44, 0x24, 0x28, 0x89,
        0x54, 0x24, 0x24, 0x8b, 0x04, 0x24, 0x89, 0x44,
        0x24, 0x20, 0x83, 0xc4, 0x0c, 0x5e, 0x5f, 0x5b,
        0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS_2.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 0c                      subl    $0xc, %esp
    // 7: 8b 6c 24 28                   movl    0x28(%esp), %ebp
    // b: 8b 5c 24 24                   movl    0x24(%esp), %ebx
    // f: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 13: 89 04 24                      movl    %eax, (%esp)
    // 16: 8b 43 f0                      movl    -0x10(%ebx), %eax
    // 19: 8b 78 18                      movl    0x18(%eax), %edi
    // 1c: 8b b5 94 00 00 00             movl    0x94(%ebp), %esi
    // 22: 8b 4f 34                      movl    0x34(%edi), %ecx
    // 25: 8d 0c 8e                      leal    (%esi,%ecx,4), %ecx
    // 28: 8b 53 f4                      movl    -0xc(%ebx), %edx
    // 2b: 89 6c 24 08                   movl    %ebp, 0x8(%esp)
    // 2f: 89 8d 94 00 00 00             movl    %ecx, 0x94(%ebp)
    // 35: 89 54 24 04                   movl    %edx, 0x4(%esp)
    // 39: 83 fa 01                      cmpl    $0x1, %edx
    // 3c: bd 02 00 00 00                movl    $0x2, %ebp
    // 41: 83 dd ff                      sbbl    $-0x1, %ebp
    // 44: 8b 0c 24                      movl    (%esp), %ecx
    // 47: 89 4e 04                      movl    %ecx, 0x4(%esi)
    // 4a: 89 46 08                      movl    %eax, 0x8(%esi)
    // 4d: 8b 0f                         movl    (%edi), %ecx
    // 4f: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 55: 7f 03                         jg      0x5a <__JIT_ENTRY+0x5a>
    // 57: 41                            incl    %ecx
    // 58: 89 0f                         movl    %ecx, (%edi)
    // 5a: 8d 53 f4                      leal    -0xc(%ebx), %edx
    // 5d: 89 3e                         movl    %edi, (%esi)
    // 5f: 8b 48 0c                      movl    0xc(%eax), %ecx
    // 62: 89 4e 10                      movl    %ecx, 0x10(%esi)
    // 65: 8b 40 08                      movl    0x8(%eax), %eax
    // 68: 89 46 0c                      movl    %eax, 0xc(%esi)
    // 6b: c7 46 14 00 00 00 00          movl    $0x0, 0x14(%esi)
    // 72: 8b 47 30                      movl    0x30(%edi), %eax
    // 75: 8d 44 86 28                   leal    0x28(%esi,%eax,4), %eax
    // 79: 89 46 20                      movl    %eax, 0x20(%esi)
    // 7c: c7 46 18 00 00 00 00          movl    $0x0, 0x18(%esi)
    // 83: 8d 87 80 00 00 00             leal    0x80(%edi), %eax
    // 89: 89 46 1c                      movl    %eax, 0x1c(%esi)
    // 8c: c7 46 24 00 00 00 00          movl    $0x0, 0x24(%esi)
    // 93: 39 6f 30                      cmpl    %ebp, 0x30(%edi)
    // 96: 7e 15                         jle     0xad <__JIT_ENTRY+0xad>
    // 98: 8d 46 28                      leal    0x28(%esi), %eax
    // 9b: 0f 1f 44 00 00                nopl    (%eax,%eax)
    // a0: c7 04 a8 00 00 00 00          movl    $0x0, (%eax,%ebp,4)
    // a7: 45                            incl    %ebp
    // a8: 3b 6f 30                      cmpl    0x30(%edi), %ebp
    // ab: 7c f3                         jl      0xa0 <__JIT_ENTRY+0xa0>
    // ad: 31 c0                         xorl    %eax, %eax
    // af: 83 7c 24 04 00                cmpl    $0x0, 0x4(%esp)
    // b4: 0f 95 c0                      setne   %al
    // b7: 8b 4b f4                      movl    -0xc(%ebx), %ecx
    // ba: 89 4e 28                      movl    %ecx, 0x28(%esi)
    // bd: 8b 4b f8                      movl    -0x8(%ebx), %ecx
    // c0: 89 4c 86 28                   movl    %ecx, 0x28(%esi,%eax,4)
    // c4: 8b 4b fc                      movl    -0x4(%ebx), %ecx
    // c7: 89 4c 86 2c                   movl    %ecx, 0x2c(%esi,%eax,4)
    // cb: 89 73 f0                      movl    %esi, -0x10(%ebx)
    // ce: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d2: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // d6: 89 54 24 24                   movl    %edx, 0x24(%esp)
    // da: 8b 04 24                      movl    (%esp), %eax
    // dd: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // e1: 83 c4 0c                      addl    $0xc, %esp
    // e4: 5e                            popl    %esi
    // e5: 5f                            popl    %edi
    // e6: 5b                            popl    %ebx
    // e7: 5d                            popl    %ebp
    // e8: e9 00 00 00 00                jmp     0xed <__JIT_ENTRY+0xed>
    // 000000e9:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[232] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x0c, 0x8b,
        0x6c, 0x24, 0x28, 0x8b, 0x5c, 0x24, 0x24, 0x8b,
        0x44, 0x24, 0x20, 0x89, 0x04, 0x24, 0x8b, 0x43,
        0xf0, 0x8b, 0x78, 0x18, 0x8b, 0xb5, 0x94, 0x00,
        0x00, 0x00, 0x8b, 0x4f, 0x34, 0x8d, 0x0c, 0x8e,
        0x8b, 0x53, 0xf4, 0x89, 0x6c, 0x24, 0x08, 0x89,
        0x8d, 0x94, 0x00, 0x00, 0x00, 0x89, 0x54, 0x24,
        0x04, 0x83, 0xfa, 0x01, 0xbd, 0x02, 0x00, 0x00,
        0x00, 0x83, 0xdd, 0xff, 0x8b, 0x0c, 0x24, 0x89,
        0x4e, 0x04, 0x89, 0x46, 0x08, 0x8b, 0x0f, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03, 0x41,
        0x89, 0x0f, 0x8d, 0x53, 0xf4, 0x89, 0x3e, 0x8b,
        0x48, 0x0c, 0x89, 0x4e, 0x10, 0x8b, 0x40, 0x08,
        0x89, 0x46, 0x0c, 0xc7, 0x46, 0x14, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x47, 0x30, 0x8d, 0x44, 0x86,
        0x28, 0x89, 0x46, 0x20, 0xc7, 0x46, 0x18, 0x00,
        0x00, 0x00, 0x00, 0x8d, 0x87, 0x80, 0x00, 0x00,
        0x00, 0x89, 0x46, 0x1c, 0xc7, 0x46, 0x24, 0x00,
        0x00, 0x00, 0x00, 0x39, 0x6f, 0x30, 0x7e, 0x15,
        0x8d, 0x46, 0x28, 0x0f, 0x1f, 0x44, 0x00, 0x00,
        0xc7, 0x04, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x45,
        0x3b, 0x6f, 0x30, 0x7c, 0xf3, 0x31, 0xc0, 0x83,
        0x7c, 0x24, 0x04, 0x00, 0x0f, 0x95, 0xc0, 0x8b,
        0x4b, 0xf4, 0x89, 0x4e, 0x28, 0x8b, 0x4b, 0xf8,
        0x89, 0x4c, 0x86, 0x28, 0x8b, 0x4b, 0xfc, 0x89,
        0x4c, 0x86, 0x2c, 0x89, 0x73, 0xf0, 0x8b, 0x44,
        0x24, 0x08, 0x89, 0x44, 0x24, 0x28, 0x89, 0x54,
        0x24, 0x24, 0x8b, 0x04, 0x24, 0x89, 0x44, 0x24,
        0x20, 0x83, 0xc4, 0x0c, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS_3.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 10                      subl    $0x10, %esp
    // 7: 8b 6c 24 2c                   movl    0x2c(%esp), %ebp
    // b: 8b 54 24 28                   movl    0x28(%esp), %edx
    // f: 8b 44 24 24                   movl    0x24(%esp), %eax
    // 13: 89 04 24                      movl    %eax, (%esp)
    // 16: 8b 5a ec                      movl    -0x14(%edx), %ebx
    // 19: 8b 7b 18                      movl    0x18(%ebx), %edi
    // 1c: 8b b5 94 00 00 00             movl    0x94(%ebp), %esi
    // 22: 8b 4f 34                      movl    0x34(%edi), %ecx
    // 25: 8d 0c 8e                      leal    (%esi,%ecx,4), %ecx
    // 28: 8b 42 f0                      movl    -0x10(%edx), %eax
    // 2b: 89 6c 24 0c                   movl    %ebp, 0xc(%esp)
    // 2f: 89 8d 94 00 00 00             movl    %ecx, 0x94(%ebp)
    // 35: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 39: 83 f8 01                      cmpl    $0x1, %eax
    // 3c: bd 03 00 00 00                movl    $0x3, %ebp
    // 41: 83 dd ff                      sbbl    $-0x1, %ebp
    // 44: 8b 04 24                      movl    (%esp), %eax
    // 47: 89 46 04                      movl    %eax, 0x4(%esi)
    // 4a: 89 5e 08                      movl    %ebx, 0x8(%esi)
    // 4d: 8b 0f                         movl    (%edi), %ecx
    // 4f: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 55: 7f 03                         jg      0x5a <__JIT_ENTRY+0x5a>
    // 57: 41                            incl    %ecx
    // 58: 89 0f                         movl    %ecx, (%edi)
    // 5a: 8d 42 f0                      leal    -0x10(%edx), %eax
    // 5d: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 61: 89 3e                         movl    %edi, (%esi)
    // 63: 8b 4b 0c                      movl    0xc(%ebx), %ecx
    // 66: 89 4e 10                      movl    %ecx, 0x10(%esi)
    // 69: 8b 43 08                      movl    0x8(%ebx), %eax
    // 6c: 89 46 0c                      movl    %eax, 0xc(%esi)
    // 6f: c7 46 14 00 00 00 00          movl    $0x0, 0x14(%esi)
    // 76: 8b 47 30                      movl    0x30(%edi), %eax
    // 79: 8d 44 86 28                   leal    0x28(%esi,%eax,4), %eax
    // 7d: 89 46 20                      movl    %eax, 0x20(%esi)
    // 80: c7 46 18 00 00 00 00          movl    $0x0, 0x18(%esi)
    // 87: 8d 87 80 00 00 00             leal    0x80(%edi), %eax
    // 8d: 89 46 1c                      movl    %eax, 0x1c(%esi)
    // 90: c7 46 24 00 00 00 00          movl    $0x0, 0x24(%esi)
    // 97: 39 6f 30                      cmpl    %ebp, 0x30(%edi)
    // 9a: 7e 11                         jle     0xad <__JIT_ENTRY+0xad>
    // 9c: 8d 46 28                      leal    0x28(%esi), %eax
    // 9f: 90                            nop
    // a0: c7 04 a8 00 00 00 00          movl    $0x0, (%eax,%ebp,4)
    // a7: 45                            incl    %ebp
    // a8: 3b 6f 30                      cmpl    0x30(%edi), %ebp
    // ab: 7c f3                         jl      0xa0 <__JIT_ENTRY+0xa0>
    // ad: 31 c0                         xorl    %eax, %eax
    // af: 83 7c 24 08 00                cmpl    $0x0, 0x8(%esp)
    // b4: 0f 95 c0                      setne   %al
    // b7: 8b 4a f0                      movl    -0x10(%edx), %ecx
    // ba: 89 4e 28                      movl    %ecx, 0x28(%esi)
    // bd: 8b 4a f4                      movl    -0xc(%edx), %ecx
    // c0: 89 4c 86 28                   movl    %ecx, 0x28(%esi,%eax,4)
    // c4: 8b 4a f8                      movl    -0x8(%edx), %ecx
    // c7: 89 4c 86 2c                   movl    %ecx, 0x2c(%esi,%eax,4)
    // cb: 8b 4a fc                      movl    -0x4(%edx), %ecx
    // ce: 89 4c 86 30                   movl    %ecx, 0x30(%esi,%eax,4)
    // d2: 89 72 ec                      movl    %esi, -0x14(%edx)
    // d5: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // d9: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // dd: 8b 44 24 04                   movl    0x4(%esp), %eax
    // e1: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // e5: 8b 04 24                      movl    (%esp), %eax
    // e8: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // ec: 83 c4 10                      addl    $0x10, %esp
    // ef: 5e                            popl    %esi
    // f0: 5f                            popl    %edi
    // f1: 5b                            popl    %ebx
    // f2: 5d                            popl    %ebp
    // f3: e9 00 00 00 00                jmp     0xf8 <__JIT_ENTRY+0xf8>
    // 000000f4:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[243] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x10, 0x8b,
        0x6c, 0x24, 0x2c, 0x8b, 0x54, 0x24, 0x28, 0x8b,
        0x44, 0x24, 0x24, 0x89, 0x04, 0x24, 0x8b, 0x5a,
        0xec, 0x8b, 0x7b, 0x18, 0x8b, 0xb5, 0x94, 0x00,
        0x00, 0x00, 0x8b, 0x4f, 0x34, 0x8d, 0x0c, 0x8e,
        0x8b, 0x42, 0xf0, 0x89, 0x6c, 0x24, 0x0c, 0x89,
        0x8d, 0x94, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24,
        0x08, 0x83, 0xf8, 0x01, 0xbd, 0x03, 0x00, 0x00,
        0x00, 0x83, 0xdd, 0xff, 0x8b, 0x04, 0x24, 0x89,
        0x46, 0x04, 0x89, 0x5e, 0x08, 0x8b, 0x0f, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03, 0x41,
        0x89, 0x0f, 0x8d, 0x42, 0xf0, 0x89, 0x44, 0x24,
        0x04, 0x89, 0x3e, 0x8b, 0x4b, 0x0c, 0x89, 0x4e,
        0x10, 0x8b, 0x43, 0x08, 0x89, 0x46, 0x0c, 0xc7,
        0x46, 0x14, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x47,
        0x30, 0x8d, 0x44, 0x86, 0x28, 0x89, 0x46, 0x20,
        0xc7, 0x46, 0x18, 0x00, 0x00, 0x00, 0x00, 0x8d,
        0x87, 0x80, 0x00, 0x00, 0x00, 0x89, 0x46, 0x1c,
        0xc7, 0x46, 0x24, 0x00, 0x00, 0x00, 0x00, 0x39,
        0x6f, 0x30, 0x7e, 0x11, 0x8d, 0x46, 0x28, 0x90,
        0xc7, 0x04, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x45,
        0x3b, 0x6f, 0x30, 0x7c, 0xf3, 0x31, 0xc0, 0x83,
        0x7c, 0x24, 0x08, 0x00, 0x0f, 0x95, 0xc0, 0x8b,
        0x4a, 0xf0, 0x89, 0x4e, 0x28, 0x8b, 0x4a, 0xf4,
        0x89, 0x4c, 0x86, 0x28, 0x8b, 0x4a, 0xf8, 0x89,
        0x4c, 0x86, 0x2c, 0x8b, 0x4a, 0xfc, 0x89, 0x4c,
        0x86, 0x30, 0x89, 0x72, 0xec, 0x8b, 0x44, 0x24,
        0x0c, 0x89, 0x44, 0x24, 0x2c, 0x8b, 0x44, 0x24,
        0x04, 0x89, 0x44, 0x24, 0x28, 0x8b, 0x04, 0x24,
        0x89, 0x44, 0x24, 0x24, 0x83, 0xc4, 0x10, 0x5e,
        0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS_4.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 10                      subl    $0x10, %esp
    // 7: 8b 5c 24 2c                   movl    0x2c(%esp), %ebx
    // b: 8b 54 24 28                   movl    0x28(%esp), %edx
    // f: 8b 44 24 24                   movl    0x24(%esp), %eax
    // 13: 89 04 24                      movl    %eax, (%esp)
    // 16: 8b 6a e8                      movl    -0x18(%edx), %ebp
    // 19: 8b 7d 18                      movl    0x18(%ebp), %edi
    // 1c: 8b b3 94 00 00 00             movl    0x94(%ebx), %esi
    // 22: 8b 4f 34                      movl    0x34(%edi), %ecx
    // 25: 8d 0c 8e                      leal    (%esi,%ecx,4), %ecx
    // 28: 8b 42 ec                      movl    -0x14(%edx), %eax
    // 2b: 89 5c 24 0c                   movl    %ebx, 0xc(%esp)
    // 2f: 89 8b 94 00 00 00             movl    %ecx, 0x94(%ebx)
    // 35: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 39: 83 f8 01                      cmpl    $0x1, %eax
    // 3c: bb 04 00 00 00                movl    $0x4, %ebx
    // 41: 83 db ff                      sbbl    $-0x1, %ebx
    // 44: 8b 04 24                      movl    (%esp), %eax
    // 47: 89 46 04                      movl    %eax, 0x4(%esi)
    // 4a: 89 6e 08                      movl    %ebp, 0x8(%esi)
    // 4d: 8b 0f                         movl    (%edi), %ecx
    // 4f: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 55: 7f 03                         jg      0x5a <__JIT_ENTRY+0x5a>
    // 57: 41                            incl    %ecx
    // 58: 89 0f                         movl    %ecx, (%edi)
    // 5a: 8d 42 ec                      leal    -0x14(%edx), %eax
    // 5d: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 61: 89 3e                         movl    %edi, (%esi)
    // 63: 8b 4d 0c                      movl    0xc(%ebp), %ecx
    // 66: 89 4e 10                      movl    %ecx, 0x10(%esi)
    // 69: 8b 45 08                      movl    0x8(%ebp), %eax
    // 6c: 89 46 0c                      movl    %eax, 0xc(%esi)
    // 6f: c7 46 14 00 00 00 00          movl    $0x0, 0x14(%esi)
    // 76: 8b 47 30                      movl    0x30(%edi), %eax
    // 79: 8d 44 86 28                   leal    0x28(%esi,%eax,4), %eax
    // 7d: 89 46 20                      movl    %eax, 0x20(%esi)
    // 80: c7 46 18 00 00 00 00          movl    $0x0, 0x18(%esi)
    // 87: 8d 87 80 00 00 00             leal    0x80(%edi), %eax
    // 8d: 89 46 1c                      movl    %eax, 0x1c(%esi)
    // 90: c7 46 24 00 00 00 00          movl    $0x0, 0x24(%esi)
    // 97: 39 5f 30                      cmpl    %ebx, 0x30(%edi)
    // 9a: 7e 11                         jle     0xad <__JIT_ENTRY+0xad>
    // 9c: 8d 46 28                      leal    0x28(%esi), %eax
    // 9f: 90                            nop
    // a0: c7 04 98 00 00 00 00          movl    $0x0, (%eax,%ebx,4)
    // a7: 43                            incl    %ebx
    // a8: 3b 5f 30                      cmpl    0x30(%edi), %ebx
    // ab: 7c f3                         jl      0xa0 <__JIT_ENTRY+0xa0>
    // ad: 31 c0                         xorl    %eax, %eax
    // af: 83 7c 24 08 00                cmpl    $0x0, 0x8(%esp)
    // b4: 0f 95 c0                      setne   %al
    // b7: 8b 4a ec                      movl    -0x14(%edx), %ecx
    // ba: 89 4e 28                      movl    %ecx, 0x28(%esi)
    // bd: 8b 4a f0                      movl    -0x10(%edx), %ecx
    // c0: 89 4c 86 28                   movl    %ecx, 0x28(%esi,%eax,4)
    // c4: 8b 4a f4                      movl    -0xc(%edx), %ecx
    // c7: 89 4c 86 2c                   movl    %ecx, 0x2c(%esi,%eax,4)
    // cb: 8b 4a f8                      movl    -0x8(%edx), %ecx
    // ce: 89 4c 86 30                   movl    %ecx, 0x30(%esi,%eax,4)
    // d2: 8b 4a fc                      movl    -0x4(%edx), %ecx
    // d5: 89 4c 86 34                   movl    %ecx, 0x34(%esi,%eax,4)
    // d9: 89 72 e8                      movl    %esi, -0x18(%edx)
    // dc: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e0: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // e4: 8b 44 24 04                   movl    0x4(%esp), %eax
    // e8: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // ec: 8b 04 24                      movl    (%esp), %eax
    // ef: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // f3: 83 c4 10                      addl    $0x10, %esp
    // f6: 5e                            popl    %esi
    // f7: 5f                            popl    %edi
    // f8: 5b                            popl    %ebx
    // f9: 5d                            popl    %ebp
    // fa: e9 00 00 00 00                jmp     0xff <__JIT_ENTRY+0xff>
    // 000000fb:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[250] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x10, 0x8b,
        0x5c, 0x24, 0x2c, 0x8b, 0x54, 0x24, 0x28, 0x8b,
        0x44, 0x24, 0x24, 0x89, 0x04, 0x24, 0x8b, 0x6a,
        0xe8, 0x8b, 0x7d, 0x18, 0x8b, 0xb3, 0x94, 0x00,
        0x00, 0x00, 0x8b, 0x4f, 0x34, 0x8d, 0x0c, 0x8e,
        0x8b, 0x42, 0xec, 0x89, 0x5c, 0x24, 0x0c, 0x89,
        0x8b, 0x94, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24,
        0x08, 0x83, 0xf8, 0x01, 0xbb, 0x04, 0x00, 0x00,
        0x00, 0x83, 0xdb, 0xff, 0x8b, 0x04, 0x24, 0x89,
        0x46, 0x04, 0x89, 0x6e, 0x08, 0x8b, 0x0f, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03, 0x41,
        0x89, 0x0f, 0x8d, 0x42, 0xec, 0x89, 0x44, 0x24,
        0x04, 0x89, 0x3e, 0x8b, 0x4d, 0x0c, 0x89, 0x4e,
        0x10, 0x8b, 0x45, 0x08, 0x89, 0x46, 0x0c, 0xc7,
        0x46, 0x14, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x47,
        0x30, 0x8d, 0x44, 0x86, 0x28, 0x89, 0x46, 0x20,
        0xc7, 0x46, 0x18, 0x00, 0x00, 0x00, 0x00, 0x8d,
        0x87, 0x80, 0x00, 0x00, 0x00, 0x89, 0x46, 0x1c,
        0xc7, 0x46, 0x24, 0x00, 0x00, 0x00, 0x00, 0x39,
        0x5f, 0x30, 0x7e, 0x11, 0x8d, 0x46, 0x28, 0x90,
        0xc7, 0x04, 0x98, 0x00, 0x00, 0x00, 0x00, 0x43,
        0x3b, 0x5f, 0x30, 0x7c, 0xf3, 0x31, 0xc0, 0x83,
        0x7c, 0x24, 0x08, 0x00, 0x0f, 0x95, 0xc0, 0x8b,
        0x4a, 0xec, 0x89, 0x4e, 0x28, 0x8b, 0x4a, 0xf0,
        0x89, 0x4c, 0x86, 0x28, 0x8b, 0x4a, 0xf4, 0x89,
        0x4c, 0x86, 0x2c, 0x8b, 0x4a, 0xf8, 0x89, 0x4c,
        0x86, 0x30, 0x8b, 0x4a, 0xfc, 0x89, 0x4c, 0x86,
        0x34, 0x89, 0x72, 0xe8, 0x8b, 0x44, 0x24, 0x0c,
        0x89, 0x44, 0x24, 0x2c, 0x8b, 0x44, 0x24, 0x04,
        0x89, 0x44, 0x24, 0x28, 0x8b, 0x04, 0x24, 0x89,
        0x44, 0x24, 0x24, 0x83, 0xc4, 0x10, 0x5e, 0x5f,
        0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__IS_NONE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _IS_NONE.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 5c 24 1c                   movl    0x1c(%esp), %ebx
    // 8: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // c: 8b 74 24 14                   movl    0x14(%esp), %esi
    // 10: 8b 47 fc                      movl    -0x4(%edi), %eax
    // 13: 3d 00 00 00 00                cmpl    $0x0, %eax
    // 00000014:  IMAGE_REL_I386_DIR32 __Py_NoneStruct
    // 18: 74 1f                         je      0x39 <__JIT_ENTRY+0x39>
    // 1a: 8b 08                         movl    (%eax), %ecx
    // 1c: bd 00 00 00 00                movl    $0x0, %ebp
    // 0000001d:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 21: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 27: 7f 15                         jg      0x3e <__JIT_ENTRY+0x3e>
    // 29: 49                            decl    %ecx
    // 2a: 89 08                         movl    %ecx, (%eax)
    // 2c: 75 10                         jne     0x3e <__JIT_ENTRY+0x3e>
    // 2e: 50                            pushl   %eax
    // 2f: e8 00 00 00 00                calll   0x34 <__JIT_ENTRY+0x34>
    // 00000030:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 34: 83 c4 04                      addl    $0x4, %esp
    // 37: eb 05                         jmp     0x3e <__JIT_ENTRY+0x3e>
    // 39: bd 00 00 00 00                movl    $0x0, %ebp
    // 0000003a:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 3e: 89 6f fc                      movl    %ebp, -0x4(%edi)
    // 41: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 45: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 49: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 4d: 5e                            popl    %esi
    // 4e: 5f                            popl    %edi
    // 4f: 5b                            popl    %ebx
    // 50: 5d                            popl    %ebp
    // 51: e9 00 00 00 00                jmp     0x56 <__JIT_ENTRY+0x56>
    // 00000052:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[81] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x5c, 0x24, 0x1c,
        0x8b, 0x7c, 0x24, 0x18, 0x8b, 0x74, 0x24, 0x14,
        0x8b, 0x47, 0xfc, 0x3d, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x1f, 0x8b, 0x08, 0xbd, 0x00, 0x00, 0x00,
        0x00, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x15, 0x49, 0x89, 0x08, 0x75, 0x10, 0x50, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0xeb,
        0x05, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x89, 0x6f,
        0xfc, 0x89, 0x5c, 0x24, 0x1c, 0x89, 0x7c, 0x24,
        0x18, 0x89, 0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b,
        0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, (uintptr_t)&_Py_NoneStruct);
    patch_32(code + 0x1d, (uintptr_t)&_Py_FalseStruct);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x3a, (uintptr_t)&_Py_TrueStruct);
}

void
emit__IS_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _IS_OP.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 44 24 24                   movl    0x24(%esp), %eax
    // b: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // f: 8b 5c 24 20                   movl    0x20(%esp), %ebx
    // 13: 8b 54 24 1c                   movl    0x1c(%esp), %edx
    // 17: 8b 6b f8                      movl    -0x8(%ebx), %ebp
    // 1a: 8b 73 fc                      movl    -0x4(%ebx), %esi
    // 1d: 8b 45 00                      movl    (%ebp), %eax
    // 20: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 25: 7f 06                         jg      0x2d <__JIT_ENTRY+0x2d>
    // 27: 48                            decl    %eax
    // 28: 89 45 00                      movl    %eax, (%ebp)
    // 2b: 74 24                         je      0x51 <__JIT_ENTRY+0x51>
    // 2d: 8d 7b fc                      leal    -0x4(%ebx), %edi
    // 30: 8b 06                         movl    (%esi), %eax
    // 32: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 37: 7f 31                         jg      0x6a <__JIT_ENTRY+0x6a>
    // 39: 48                            decl    %eax
    // 3a: 89 06                         movl    %eax, (%esi)
    // 3c: 75 2c                         jne     0x6a <__JIT_ENTRY+0x6a>
    // 3e: 56                            pushl   %esi
    // 3f: 89 54 24 04                   movl    %edx, 0x4(%esp)
    // 43: e8 00 00 00 00                calll   0x48 <__JIT_ENTRY+0x48>
    // 00000044:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 48: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 4c: 83 c4 04                      addl    $0x4, %esp
    // 4f: eb 19                         jmp     0x6a <__JIT_ENTRY+0x6a>
    // 51: 55                            pushl   %ebp
    // 52: 89 d7                         movl    %edx, %edi
    // 54: e8 00 00 00 00                calll   0x59 <__JIT_ENTRY+0x59>
    // 00000055:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 59: 89 fa                         movl    %edi, %edx
    // 5b: 83 c4 04                      addl    $0x4, %esp
    // 5e: 8d 7b fc                      leal    -0x4(%ebx), %edi
    // 61: 8b 06                         movl    (%esi), %eax
    // 63: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 68: 7e cf                         jle     0x39 <__JIT_ENTRY+0x39>
    // 6a: 31 c0                         xorl    %eax, %eax
    // 6c: 39 f5                         cmpl    %esi, %ebp
    // 6e: 0f 94 c0                      sete    %al
    // 71: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000072:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 76: 66 39 c8                      cmpw    %cx, %ax
    // 79: b8 00 00 00 00                movl    $0x0, %eax
    // 0000007a:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 7e: b9 00 00 00 00                movl    $0x0, %ecx
    // 0000007f:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 83: 0f 44 c8                      cmovel  %eax, %ecx
    // 86: 89 4b f8                      movl    %ecx, -0x8(%ebx)
    // 89: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 8d: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // 91: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // 95: 89 54 24 1c                   movl    %edx, 0x1c(%esp)
    // 99: 83 c4 08                      addl    $0x8, %esp
    // 9c: 5e                            popl    %esi
    // 9d: 5f                            popl    %edi
    // 9e: 5b                            popl    %ebx
    // 9f: 5d                            popl    %ebp
    // a0: e9 00 00 00 00                jmp     0xa5 <__JIT_ENTRY+0xa5>
    // 000000a1:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[160] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x44, 0x24, 0x24, 0x89, 0x44, 0x24, 0x04, 0x8b,
        0x5c, 0x24, 0x20, 0x8b, 0x54, 0x24, 0x1c, 0x8b,
        0x6b, 0xf8, 0x8b, 0x73, 0xfc, 0x8b, 0x45, 0x00,
        0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x06, 0x48,
        0x89, 0x45, 0x00, 0x74, 0x24, 0x8d, 0x7b, 0xfc,
        0x8b, 0x06, 0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x31, 0x48, 0x89, 0x06, 0x75, 0x2c, 0x56, 0x89,
        0x54, 0x24, 0x04, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x54, 0x24, 0x04, 0x83, 0xc4, 0x04, 0xeb,
        0x19, 0x55, 0x89, 0xd7, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xfa, 0x83, 0xc4, 0x04, 0x8d, 0x7b,
        0xfc, 0x8b, 0x06, 0x3d, 0xff, 0xff, 0xff, 0x3f,
        0x7e, 0xcf, 0x31, 0xc0, 0x39, 0xf5, 0x0f, 0x94,
        0xc0, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39,
        0xc8, 0xb8, 0x00, 0x00, 0x00, 0x00, 0xb9, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0x44, 0xc8, 0x89, 0x4b,
        0xf8, 0x8b, 0x44, 0x24, 0x04, 0x89, 0x44, 0x24,
        0x24, 0x89, 0x7c, 0x24, 0x20, 0x89, 0x54, 0x24,
        0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x44, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x55, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x72, instruction->oparg);
    patch_32(code + 0x7a, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0x7f, (uintptr_t)&_Py_TrueStruct);
}

void
emit__ITER_CHECK_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_CHECK_LIST.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 10: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000013:  IMAGE_REL_I386_DIR32 _PyListIter_Type
    // 17: 74 12                         je      0x2b <__JIT_ENTRY+0x2b>
    // 19: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 1d: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 21: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 25: 5e                            popl    %esi
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 00000027:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 2b: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2f: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 33: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 37: 5e                            popl    %esi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x71, 0xfc,
        0x81, 0x7e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x12, 0x89, 0x54, 0x24, 0x10, 0x89, 0x4c, 0x24,
        0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x10, 0x89,
        0x4c, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (uintptr_t)&PyListIter_Type);
    patch_x86_64_32rx(code + 0x27, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__ITER_CHECK_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_CHECK_RANGE.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 10: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000013:  IMAGE_REL_I386_DIR32 _PyRangeIter_Type
    // 17: 74 12                         je      0x2b <__JIT_ENTRY+0x2b>
    // 19: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 1d: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 21: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 25: 5e                            popl    %esi
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 00000027:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 2b: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2f: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 33: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 37: 5e                            popl    %esi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x71, 0xfc,
        0x81, 0x7e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x12, 0x89, 0x54, 0x24, 0x10, 0x89, 0x4c, 0x24,
        0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x10, 0x89,
        0x4c, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (uintptr_t)&PyRangeIter_Type);
    patch_x86_64_32rx(code + 0x27, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__ITER_CHECK_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_CHECK_TUPLE.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 10: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000013:  IMAGE_REL_I386_DIR32 _PyTupleIter_Type
    // 17: 74 12                         je      0x2b <__JIT_ENTRY+0x2b>
    // 19: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 1d: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 21: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 25: 5e                            popl    %esi
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 00000027:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 2b: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2f: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 33: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 37: 5e                            popl    %esi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x71, 0xfc,
        0x81, 0x7e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x12, 0x89, 0x54, 0x24, 0x10, 0x89, 0x4c, 0x24,
        0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x10, 0x89,
        0x4c, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (uintptr_t)&PyTupleIter_Type);
    patch_x86_64_32rx(code + 0x27, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__ITER_NEXT_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_NEXT_LIST.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 4c 24 1c                   movl    0x1c(%esp), %ecx
    // 8: 8b 54 24 18                   movl    0x18(%esp), %edx
    // c: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 10: 8b 72 fc                      movl    -0x4(%edx), %esi
    // 13: 8b 7e 08                      movl    0x8(%esi), %edi
    // 16: 8b 5e 0c                      movl    0xc(%esi), %ebx
    // 19: 8b 5b 0c                      movl    0xc(%ebx), %ebx
    // 1c: 8d 6f 01                      leal    0x1(%edi), %ebp
    // 1f: 89 6e 08                      movl    %ebp, 0x8(%esi)
    // 22: 8b 34 bb                      movl    (%ebx,%edi,4), %esi
    // 25: 8b 3e                         movl    (%esi), %edi
    // 27: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 2d: 7f 03                         jg      0x32 <__JIT_ENTRY+0x32>
    // 2f: 47                            incl    %edi
    // 30: 89 3e                         movl    %edi, (%esi)
    // 32: 89 32                         movl    %esi, (%edx)
    // 34: 83 c2 04                      addl    $0x4, %edx
    // 37: 89 4c 24 1c                   movl    %ecx, 0x1c(%esp)
    // 3b: 89 54 24 18                   movl    %edx, 0x18(%esp)
    // 3f: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 43: 5e                            popl    %esi
    // 44: 5f                            popl    %edi
    // 45: 5b                            popl    %ebx
    // 46: 5d                            popl    %ebp
    // 47: e9 00 00 00 00                jmp     0x4c <__JIT_ENTRY+0x4c>
    // 00000048:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[71] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x4c, 0x24, 0x1c,
        0x8b, 0x54, 0x24, 0x18, 0x8b, 0x44, 0x24, 0x14,
        0x8b, 0x72, 0xfc, 0x8b, 0x7e, 0x08, 0x8b, 0x5e,
        0x0c, 0x8b, 0x5b, 0x0c, 0x8d, 0x6f, 0x01, 0x89,
        0x6e, 0x08, 0x8b, 0x34, 0xbb, 0x8b, 0x3e, 0x81,
        0xff, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03, 0x47,
        0x89, 0x3e, 0x89, 0x32, 0x83, 0xc2, 0x04, 0x89,
        0x4c, 0x24, 0x1c, 0x89, 0x54, 0x24, 0x18, 0x89,
        0x44, 0x24, 0x14, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__ITER_NEXT_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_NEXT_RANGE.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 5c 24 18                   movl    0x18(%esp), %ebx
    // 7: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // b: 8b 74 24 10                   movl    0x10(%esp), %esi
    // f: 8b 47 fc                      movl    -0x4(%edi), %eax
    // 12: 8b 48 08                      movl    0x8(%eax), %ecx
    // 15: 8b 50 0c                      movl    0xc(%eax), %edx
    // 18: 01 ca                         addl    %ecx, %edx
    // 1a: 89 50 08                      movl    %edx, 0x8(%eax)
    // 1d: ff 48 10                      decl    0x10(%eax)
    // 20: 51                            pushl   %ecx
    // 21: e8 00 00 00 00                calll   0x26 <__JIT_ENTRY+0x26>
    // 00000022:  IMAGE_REL_I386_REL32 _PyLong_FromLong
    // 26: 83 c4 04                      addl    $0x4, %esp
    // 29: 85 c0                         testl   %eax, %eax
    // 2b: 74 19                         je      0x46 <__JIT_ENTRY+0x46>
    // 2d: 89 07                         movl    %eax, (%edi)
    // 2f: 83 c7 04                      addl    $0x4, %edi
    // 32: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 36: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 3a: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 3e: 5e                            popl    %esi
    // 3f: 5f                            popl    %edi
    // 40: 5b                            popl    %ebx
    // 41: e9 00 00 00 00                jmp     0x46 <__JIT_ENTRY+0x46>
    // 00000042:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 46: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 4a: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 4e: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 52: 5e                            popl    %esi
    // 53: 5f                            popl    %edi
    // 54: 5b                            popl    %ebx
    // 55: e9 00 00 00 00                jmp     0x5a <__JIT_ENTRY+0x5a>
    // 00000056:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[90] = {
        0x53, 0x57, 0x56, 0x8b, 0x5c, 0x24, 0x18, 0x8b,
        0x7c, 0x24, 0x14, 0x8b, 0x74, 0x24, 0x10, 0x8b,
        0x47, 0xfc, 0x8b, 0x48, 0x08, 0x8b, 0x50, 0x0c,
        0x01, 0xca, 0x89, 0x50, 0x08, 0xff, 0x48, 0x10,
        0x51, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x85, 0xc0, 0x74, 0x19, 0x89, 0x07, 0x83,
        0xc7, 0x04, 0x89, 0x5c, 0x24, 0x18, 0x89, 0x7c,
        0x24, 0x14, 0x89, 0x74, 0x24, 0x10, 0x5e, 0x5f,
        0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x5c,
        0x24, 0x18, 0x89, 0x7c, 0x24, 0x14, 0x89, 0x74,
        0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x22, (uintptr_t)&PyLong_FromLong + -0x4);
    patch_x86_64_32rx(code + 0x42, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x56, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__ITER_NEXT_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_NEXT_TUPLE.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 4c 24 1c                   movl    0x1c(%esp), %ecx
    // 8: 8b 54 24 18                   movl    0x18(%esp), %edx
    // c: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 10: 8b 72 fc                      movl    -0x4(%edx), %esi
    // 13: 8b 7e 08                      movl    0x8(%esi), %edi
    // 16: 8b 5e 0c                      movl    0xc(%esi), %ebx
    // 19: 8d 6f 01                      leal    0x1(%edi), %ebp
    // 1c: 89 6e 08                      movl    %ebp, 0x8(%esi)
    // 1f: 8b 74 bb 0c                   movl    0xc(%ebx,%edi,4), %esi
    // 23: 8b 3e                         movl    (%esi), %edi
    // 25: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 2b: 7f 03                         jg      0x30 <__JIT_ENTRY+0x30>
    // 2d: 47                            incl    %edi
    // 2e: 89 3e                         movl    %edi, (%esi)
    // 30: 89 32                         movl    %esi, (%edx)
    // 32: 83 c2 04                      addl    $0x4, %edx
    // 35: 89 4c 24 1c                   movl    %ecx, 0x1c(%esp)
    // 39: 89 54 24 18                   movl    %edx, 0x18(%esp)
    // 3d: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 41: 5e                            popl    %esi
    // 42: 5f                            popl    %edi
    // 43: 5b                            popl    %ebx
    // 44: 5d                            popl    %ebp
    // 45: e9 00 00 00 00                jmp     0x4a <__JIT_ENTRY+0x4a>
    // 00000046:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[69] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x4c, 0x24, 0x1c,
        0x8b, 0x54, 0x24, 0x18, 0x8b, 0x44, 0x24, 0x14,
        0x8b, 0x72, 0xfc, 0x8b, 0x7e, 0x08, 0x8b, 0x5e,
        0x0c, 0x8d, 0x6f, 0x01, 0x89, 0x6e, 0x08, 0x8b,
        0x74, 0xbb, 0x0c, 0x8b, 0x3e, 0x81, 0xff, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x03, 0x47, 0x89, 0x3e,
        0x89, 0x32, 0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24,
        0x1c, 0x89, 0x54, 0x24, 0x18, 0x89, 0x44, 0x24,
        0x14, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__JUMP_TO_TOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _JUMP_TO_TOP.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 4: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 8: 8b 54 24 04                   movl    0x4(%esp), %edx
    // c: 89 54 24 04                   movl    %edx, 0x4(%esp)
    // 10: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 14: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 18: e9 00 00 00 00                jmp     0x1d <__JIT_ENTRY+0x1d>
    // 00000019:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[29] = {
        0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x08,
        0x8b, 0x54, 0x24, 0x04, 0x89, 0x54, 0x24, 0x04,
        0x89, 0x4c, 0x24, 0x08, 0x89, 0x44, 0x24, 0x0c,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x19, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__LIST_APPEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LIST_APPEND.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 4c 24 18                   movl    0x18(%esp), %ecx
    // 10: ba 00 00 00 00                movl    $0x0, %edx
    // 00000011:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 15: f7 d2                         notl    %edx
    // 17: 8d 59 fc                      leal    -0x4(%ecx), %ebx
    // 1a: 8b 41 fc                      movl    -0x4(%ecx), %eax
    // 1d: c1 e2 02                      shll    $0x2, %edx
    // 20: 81 ca 00 00 fc ff             orl     $0xfffc0000, %edx       # imm = 0xFFFC0000
    // 26: 8b 0c 11                      movl    (%ecx,%edx), %ecx
    // 29: 8b 51 08                      movl    0x8(%ecx), %edx
    // 2c: 39 51 10                      cmpl    %edx, 0x10(%ecx)
    // 2f: 7e 0d                         jle     0x3e <__JIT_ENTRY+0x3e>
    // 31: 8b 69 0c                      movl    0xc(%ecx), %ebp
    // 34: 89 44 95 00                   movl    %eax, (%ebp,%edx,4)
    // 38: 42                            incl    %edx
    // 39: 89 51 08                      movl    %edx, 0x8(%ecx)
    // 3c: eb 0e                         jmp     0x4c <__JIT_ENTRY+0x4c>
    // 3e: 50                            pushl   %eax
    // 3f: 51                            pushl   %ecx
    // 40: e8 00 00 00 00                calll   0x45 <__JIT_ENTRY+0x45>
    // 00000041:  IMAGE_REL_I386_REL32 __PyList_AppendTakeRefListResize
    // 45: 83 c4 08                      addl    $0x8, %esp
    // 48: 85 c0                         testl   %eax, %eax
    // 4a: 78 15                         js      0x61 <__JIT_ENTRY+0x61>
    // 4c: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 50: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 54: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 58: 5e                            popl    %esi
    // 59: 5f                            popl    %edi
    // 5a: 5b                            popl    %ebx
    // 5b: 5d                            popl    %ebp
    // 5c: e9 00 00 00 00                jmp     0x61 <__JIT_ENTRY+0x61>
    // 0000005d:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 61: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 65: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 69: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 6d: 5e                            popl    %esi
    // 6e: 5f                            popl    %edi
    // 6f: 5b                            popl    %ebx
    // 70: 5d                            popl    %ebp
    // 71: e9 00 00 00 00                jmp     0x76 <__JIT_ENTRY+0x76>
    // 00000072:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[118] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x4c, 0x24, 0x18,
        0xba, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd2, 0x8d,
        0x59, 0xfc, 0x8b, 0x41, 0xfc, 0xc1, 0xe2, 0x02,
        0x81, 0xca, 0x00, 0x00, 0xfc, 0xff, 0x8b, 0x0c,
        0x11, 0x8b, 0x51, 0x08, 0x39, 0x51, 0x10, 0x7e,
        0x0d, 0x8b, 0x69, 0x0c, 0x89, 0x44, 0x95, 0x00,
        0x42, 0x89, 0x51, 0x08, 0xeb, 0x0e, 0x50, 0x51,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x08,
        0x85, 0xc0, 0x78, 0x15, 0x89, 0x7c, 0x24, 0x1c,
        0x89, 0x5c, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x7c, 0x24, 0x1c, 0x89, 0x5c, 0x24,
        0x18, 0x89, 0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x11, instruction->oparg);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)&_PyList_AppendTakeRefListResize + -0x4);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x72, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LIST_EXTEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LIST_EXTEND.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 10: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000011:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 15: f7 d1                         notl    %ecx
    // 17: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 1a: c1 e1 02                      shll    $0x2, %ecx
    // 1d: 81 c9 00 00 fc ff             orl     $0xfffc0000, %ecx       # imm = 0xFFFC0000
    // 23: 8b 0c 08                      movl    (%eax,%ecx), %ecx
    // 26: 89 46 20                      movl    %eax, 0x20(%esi)
    // 29: 53                            pushl   %ebx
    // 2a: 51                            pushl   %ecx
    // 2b: e8 00 00 00 00                calll   0x30 <__JIT_ENTRY+0x30>
    // 0000002c:  IMAGE_REL_I386_REL32 __PyList_Extend
    // 30: 83 c4 08                      addl    $0x8, %esp
    // 33: 8b 6e 20                      movl    0x20(%esi), %ebp
    // 36: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 3d: 85 c0                         testl   %eax, %eax
    // 3f: 74 2f                         je      0x70 <__JIT_ENTRY+0x70>
    // 41: 8b 03                         movl    (%ebx), %eax
    // 43: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 48: 7f 0e                         jg      0x58 <__JIT_ENTRY+0x58>
    // 4a: 48                            decl    %eax
    // 4b: 89 03                         movl    %eax, (%ebx)
    // 4d: 75 09                         jne     0x58 <__JIT_ENTRY+0x58>
    // 4f: 53                            pushl   %ebx
    // 50: e8 00 00 00 00                calll   0x55 <__JIT_ENTRY+0x55>
    // 00000051:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 55: 83 c4 04                      addl    $0x4, %esp
    // 58: 83 c5 fc                      addl    $-0x4, %ebp
    // 5b: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 5f: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 63: 89 6c 24 18                   movl    %ebp, 0x18(%esp)
    // 67: 5e                            popl    %esi
    // 68: 5f                            popl    %edi
    // 69: 5b                            popl    %ebx
    // 6a: 5d                            popl    %ebp
    // 6b: e9 00 00 00 00                jmp     0x70 <__JIT_ENTRY+0x70>
    // 0000006c:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 70: 89 6e 20                      movl    %ebp, 0x20(%esi)
    // 73: ff 35 00 00 00 00             pushl   0x0
    // 00000075:  IMAGE_REL_I386_DIR32 _PyExc_TypeError
    // 79: 57                            pushl   %edi
    // 7a: e8 00 00 00 00                calll   0x7f <__JIT_ENTRY+0x7f>
    // 0000007b:  IMAGE_REL_I386_REL32 __PyErr_ExceptionMatches
    // 7f: 83 c4 08                      addl    $0x8, %esp
    // 82: 8b 6e 20                      movl    0x20(%esi), %ebp
    // 85: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 8c: 85 c0                         testl   %eax, %eax
    // 8e: 74 46                         je      0xd6 <__JIT_ENTRY+0xd6>
    // 90: 8b 43 04                      movl    0x4(%ebx), %eax
    // 93: 83 78 6c 00                   cmpl    $0x0, 0x6c(%eax)
    // 97: 75 3d                         jne     0xd6 <__JIT_ENTRY+0xd6>
    // 99: 53                            pushl   %ebx
    // 9a: e8 00 00 00 00                calll   0x9f <__JIT_ENTRY+0x9f>
    // 0000009b:  IMAGE_REL_I386_REL32 _PySequence_Check
    // 9f: 83 c4 04                      addl    $0x4, %esp
    // a2: 85 c0                         testl   %eax, %eax
    // a4: 75 30                         jne     0xd6 <__JIT_ENTRY+0xd6>
    // a6: 89 6e 20                      movl    %ebp, 0x20(%esi)
    // a9: 57                            pushl   %edi
    // aa: e8 00 00 00 00                calll   0xaf <__JIT_ENTRY+0xaf>
    // 000000ab:  IMAGE_REL_I386_REL32 __PyErr_Clear
    // af: 83 c4 04                      addl    $0x4, %esp
    // b2: 8b 43 04                      movl    0x4(%ebx), %eax
    // b5: ff 70 0c                      pushl   0xc(%eax)
    // b8: 68 00 00 00 00                pushl   $0x0
    // 000000b9:  IMAGE_REL_I386_DIR32 ??_C@_0CO@OBBMLOHJ@Value?5after?5?$CK?5must?5be?5an?5iterabl@
    // bd: ff 35 00 00 00 00             pushl   0x0
    // 000000bf:  IMAGE_REL_I386_DIR32 _PyExc_TypeError
    // c3: 57                            pushl   %edi
    // c4: e8 00 00 00 00                calll   0xc9 <__JIT_ENTRY+0xc9>
    // 000000c5:  IMAGE_REL_I386_REL32 __PyErr_Format
    // c9: 83 c4 10                      addl    $0x10, %esp
    // cc: 8b 6e 20                      movl    0x20(%esi), %ebp
    // cf: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // d6: 8b 03                         movl    (%ebx), %eax
    // d8: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // dd: 7f 0e                         jg      0xed <__JIT_ENTRY+0xed>
    // df: 48                            decl    %eax
    // e0: 89 03                         movl    %eax, (%ebx)
    // e2: 75 09                         jne     0xed <__JIT_ENTRY+0xed>
    // e4: 53                            pushl   %ebx
    // e5: e8 00 00 00 00                calll   0xea <__JIT_ENTRY+0xea>
    // 000000e6:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // ea: 83 c4 04                      addl    $0x4, %esp
    // ed: 83 c5 fc                      addl    $-0x4, %ebp
    // f0: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // f4: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // f8: 89 6c 24 18                   movl    %ebp, 0x18(%esp)
    // fc: 5e                            popl    %esi
    // fd: 5f                            popl    %edi
    // fe: 5b                            popl    %ebx
    // ff: 5d                            popl    %ebp
    // 100: e9 00 00 00 00                jmp     0x105 <__JIT_ENTRY+0x105>
    // 00000101:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[261] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x18,
        0xb9, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x8b,
        0x58, 0xfc, 0xc1, 0xe1, 0x02, 0x81, 0xc9, 0x00,
        0x00, 0xfc, 0xff, 0x8b, 0x0c, 0x08, 0x89, 0x46,
        0x20, 0x53, 0x51, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x08, 0x8b, 0x6e, 0x20, 0xc7, 0x46,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74,
        0x2f, 0x8b, 0x03, 0x3d, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x0e, 0x48, 0x89, 0x03, 0x75, 0x09, 0x53,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04,
        0x83, 0xc5, 0xfc, 0x89, 0x7c, 0x24, 0x1c, 0x89,
        0x74, 0x24, 0x14, 0x89, 0x6c, 0x24, 0x18, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x6e, 0x20, 0xff, 0x35, 0x00, 0x00, 0x00,
        0x00, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x08, 0x8b, 0x6e, 0x20, 0xc7, 0x46, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x46,
        0x8b, 0x43, 0x04, 0x83, 0x78, 0x6c, 0x00, 0x75,
        0x3d, 0x53, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x85, 0xc0, 0x75, 0x30, 0x89, 0x6e,
        0x20, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x8b, 0x43, 0x04, 0xff, 0x70, 0x0c,
        0x68, 0x00, 0x00, 0x00, 0x00, 0xff, 0x35, 0x00,
        0x00, 0x00, 0x00, 0x57, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x10, 0x8b, 0x6e, 0x20, 0xc7,
        0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03,
        0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x48,
        0x89, 0x03, 0x75, 0x09, 0x53, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0x83, 0xc5, 0xfc,
        0x89, 0x7c, 0x24, 0x1c, 0x89, 0x74, 0x24, 0x14,
        0x89, 0x6c, 0x24, 0x18, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 'Value after * must be an iterable, not %.200s\x00'
    // 2e: 00 00
    const unsigned char data_body[48] = {
        0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66,
        0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75,
        0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e,
        0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c,
        0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25,
        0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x11, instruction->oparg);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)&_PyList_Extend + -0x4);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x6c, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32(code + 0x75, (uintptr_t)&PyExc_TypeError);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)&_PyErr_ExceptionMatches + -0x4);
    patch_x86_64_32rx(code + 0x9b, (uintptr_t)&PySequence_Check + -0x4);
    patch_x86_64_32rx(code + 0xab, (uintptr_t)&_PyErr_Clear + -0x4);
    patch_32(code + 0xb9, (uintptr_t)data);
    patch_32(code + 0xbf, (uintptr_t)&PyExc_TypeError);
    patch_x86_64_32rx(code + 0xc5, (uintptr_t)&_PyErr_Format + -0x4);
    patch_x86_64_32rx(code + 0xe6, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x101, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 0c                      subl    $0xc, %esp
    // 7: 8b 44 24 28                   movl    0x28(%esp), %eax
    // b: 89 04 24                      movl    %eax, (%esp)
    // e: 8b 5c 24 24                   movl    0x24(%esp), %ebx
    // 12: 8b 7c 24 20                   movl    0x20(%esp), %edi
    // 16: ba 00 00 00 00                movl    $0x0, %edx
    // 00000017:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 1b: 8b 73 fc                      movl    -0x4(%ebx), %esi
    // 1e: 8b 07                         movl    (%edi), %eax
    // 20: 8b 40 10                      movl    0x10(%eax), %eax
    // 23: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000024:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 28: 81 e1 fe ff 00 00             andl    $0xfffe, %ecx           # imm = 0xFFFE
    // 2e: 8b 44 48 0c                   movl    0xc(%eax,%ecx,2), %eax
    // 32: 83 e2 01                      andl    $0x1, %edx
    // 35: 89 54 24 08                   movl    %edx, 0x8(%esp)
    // 39: 75 2f                         jne     0x6a <__JIT_ENTRY+0x6a>
    // 3b: 89 5f 20                      movl    %ebx, 0x20(%edi)
    // 3e: 50                            pushl   %eax
    // 3f: 56                            pushl   %esi
    // 40: e8 00 00 00 00                calll   0x45 <__JIT_ENTRY+0x45>
    // 00000041:  IMAGE_REL_I386_REL32 _PyObject_GetAttr
    // 45: 83 c4 08                      addl    $0x8, %esp
    // 48: 8b 6f 20                      movl    0x20(%edi), %ebp
    // 4b: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 52: 8b 0e                         movl    (%esi), %ecx
    // 54: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 5a: 7f 05                         jg      0x61 <__JIT_ENTRY+0x61>
    // 5c: 49                            decl    %ecx
    // 5d: 89 0e                         movl    %ecx, (%esi)
    // 5f: 74 5e                         je      0xbf <__JIT_ENTRY+0xbf>
    // 61: 85 c0                         testl   %eax, %eax
    // 63: 75 6b                         jne     0xd0 <__JIT_ENTRY+0xd0>
    // 65: e9 91 00 00 00                jmp     0xfb <__JIT_ENTRY+0xfb>
    // 6a: c7 44 24 04 00 00 00 00       movl    $0x0, 0x4(%esp)
    // 72: 89 5f 20                      movl    %ebx, 0x20(%edi)
    // 75: 8d 4c 24 04                   leal    0x4(%esp), %ecx
    // 79: 51                            pushl   %ecx
    // 7a: 50                            pushl   %eax
    // 7b: 56                            pushl   %esi
    // 7c: e8 00 00 00 00                calll   0x81 <__JIT_ENTRY+0x81>
    // 0000007d:  IMAGE_REL_I386_REL32 __PyObject_GetMethod
    // 81: 83 c4 0c                      addl    $0xc, %esp
    // 84: 8b 6f 20                      movl    0x20(%edi), %ebp
    // 87: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 8e: 85 c0                         testl   %eax, %eax
    // 90: 74 08                         je      0x9a <__JIT_ENTRY+0x9a>
    // 92: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 96: 89 33                         movl    %esi, (%ebx)
    // 98: eb 36                         jmp     0xd0 <__JIT_ENTRY+0xd0>
    // 9a: 8b 06                         movl    (%esi), %eax
    // 9c: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // a1: 7f 0e                         jg      0xb1 <__JIT_ENTRY+0xb1>
    // a3: 48                            decl    %eax
    // a4: 89 06                         movl    %eax, (%esi)
    // a6: 75 09                         jne     0xb1 <__JIT_ENTRY+0xb1>
    // a8: 56                            pushl   %esi
    // a9: e8 00 00 00 00                calll   0xae <__JIT_ENTRY+0xae>
    // 000000aa:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // ae: 83 c4 04                      addl    $0x4, %esp
    // b1: 8b 44 24 04                   movl    0x4(%esp), %eax
    // b5: 31 f6                         xorl    %esi, %esi
    // b7: 85 c0                         testl   %eax, %eax
    // b9: 74 40                         je      0xfb <__JIT_ENTRY+0xfb>
    // bb: 89 33                         movl    %esi, (%ebx)
    // bd: eb 11                         jmp     0xd0 <__JIT_ENTRY+0xd0>
    // bf: 56                            pushl   %esi
    // c0: 89 c6                         movl    %eax, %esi
    // c2: e8 00 00 00 00                calll   0xc7 <__JIT_ENTRY+0xc7>
    // 000000c3:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // c7: 89 f0                         movl    %esi, %eax
    // c9: 83 c4 04                      addl    $0x4, %esp
    // cc: 85 c0                         testl   %eax, %eax
    // ce: 74 2b                         je      0xfb <__JIT_ENTRY+0xfb>
    // d0: 89 45 fc                      movl    %eax, -0x4(%ebp)
    // d3: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d7: 8d 04 85 00 00 00 00          leal    (,%eax,4), %eax
    // de: 01 e8                         addl    %ebp, %eax
    // e0: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // e4: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // e8: 8b 04 24                      movl    (%esp), %eax
    // eb: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // ef: 83 c4 0c                      addl    $0xc, %esp
    // f2: 5e                            popl    %esi
    // f3: 5f                            popl    %edi
    // f4: 5b                            popl    %ebx
    // f5: 5d                            popl    %ebp
    // f6: e9 00 00 00 00                jmp     0xfb <__JIT_ENTRY+0xfb>
    // 000000f7:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // fb: 83 c5 fc                      addl    $-0x4, %ebp
    // fe: 8b 04 24                      movl    (%esp), %eax
    // 101: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // 105: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // 109: 89 6c 24 24                   movl    %ebp, 0x24(%esp)
    // 10d: 83 c4 0c                      addl    $0xc, %esp
    // 110: 5e                            popl    %esi
    // 111: 5f                            popl    %edi
    // 112: 5b                            popl    %ebx
    // 113: 5d                            popl    %ebp
    // 114: e9 00 00 00 00                jmp     0x119 <__JIT_ENTRY+0x119>
    // 00000115:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[281] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x0c, 0x8b,
        0x44, 0x24, 0x28, 0x89, 0x04, 0x24, 0x8b, 0x5c,
        0x24, 0x24, 0x8b, 0x7c, 0x24, 0x20, 0xba, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x73, 0xfc, 0x8b, 0x07,
        0x8b, 0x40, 0x10, 0xb9, 0x00, 0x00, 0x00, 0x00,
        0x81, 0xe1, 0xfe, 0xff, 0x00, 0x00, 0x8b, 0x44,
        0x48, 0x0c, 0x83, 0xe2, 0x01, 0x89, 0x54, 0x24,
        0x08, 0x75, 0x2f, 0x89, 0x5f, 0x20, 0x50, 0x56,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x08,
        0x8b, 0x6f, 0x20, 0xc7, 0x47, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x0e, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x05, 0x49, 0x89, 0x0e, 0x74,
        0x5e, 0x85, 0xc0, 0x75, 0x6b, 0xe9, 0x91, 0x00,
        0x00, 0x00, 0xc7, 0x44, 0x24, 0x04, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x5f, 0x20, 0x8d, 0x4c, 0x24,
        0x04, 0x51, 0x50, 0x56, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x0c, 0x8b, 0x6f, 0x20, 0xc7,
        0x47, 0x20, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0,
        0x74, 0x08, 0x8b, 0x44, 0x24, 0x04, 0x89, 0x33,
        0xeb, 0x36, 0x8b, 0x06, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x0e, 0x48, 0x89, 0x06, 0x75, 0x09,
        0x56, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x8b, 0x44, 0x24, 0x04, 0x31, 0xf6, 0x85,
        0xc0, 0x74, 0x40, 0x89, 0x33, 0xeb, 0x11, 0x56,
        0x89, 0xc6, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xf0, 0x83, 0xc4, 0x04, 0x85, 0xc0, 0x74, 0x2b,
        0x89, 0x45, 0xfc, 0x8b, 0x44, 0x24, 0x08, 0x8d,
        0x04, 0x85, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe8,
        0x89, 0x7c, 0x24, 0x20, 0x89, 0x44, 0x24, 0x24,
        0x8b, 0x04, 0x24, 0x89, 0x44, 0x24, 0x28, 0x83,
        0xc4, 0x0c, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc5, 0xfc, 0x8b, 0x04,
        0x24, 0x89, 0x44, 0x24, 0x28, 0x89, 0x7c, 0x24,
        0x20, 0x89, 0x6c, 0x24, 0x24, 0x83, 0xc4, 0x0c,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x17, instruction->oparg);
    patch_32(code + 0x24, instruction->oparg);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)&PyObject_GetAttr + -0x4);
    patch_x86_64_32rx(code + 0x7d, (uintptr_t)&_PyObject_GetMethod + -0x4);
    patch_x86_64_32rx(code + 0xaa, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xc3, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xf7, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x115, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_ATTR_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_CLASS.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 5c 24 18                   movl    0x18(%esp), %ebx
    // 7: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // b: 8b 74 24 10                   movl    0x10(%esp), %esi
    // f: 8b 47 fc                      movl    -0x4(%edi), %eax
    // 12: 8b 0d 00 00 00 00             movl    0x0, %ecx
    // 00000014:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 18: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 1e: 7f 07                         jg      0x27 <__JIT_ENTRY+0x27>
    // 20: 41                            incl    %ecx
    // 21: 89 0d 00 00 00 00             movl    %ecx, 0x0
    // 00000023:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 27: 8b 08                         movl    (%eax), %ecx
    // 29: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 2f: 7f 0e                         jg      0x3f <__JIT_ENTRY+0x3f>
    // 31: 49                            decl    %ecx
    // 32: 89 08                         movl    %ecx, (%eax)
    // 34: 75 09                         jne     0x3f <__JIT_ENTRY+0x3f>
    // 36: 50                            pushl   %eax
    // 37: e8 00 00 00 00                calll   0x3c <__JIT_ENTRY+0x3c>
    // 00000038:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 3c: 83 c4 04                      addl    $0x4, %esp
    // 3f: c7 47 fc 00 00 00 00          movl    $0x0, -0x4(%edi)
    // 00000042:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 46: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 4a: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 4e: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 52: 5e                            popl    %esi
    // 53: 5f                            popl    %edi
    // 54: 5b                            popl    %ebx
    // 55: e9 00 00 00 00                jmp     0x5a <__JIT_ENTRY+0x5a>
    // 00000056:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[85] = {
        0x53, 0x57, 0x56, 0x8b, 0x5c, 0x24, 0x18, 0x8b,
        0x7c, 0x24, 0x14, 0x8b, 0x74, 0x24, 0x10, 0x8b,
        0x47, 0xfc, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x07,
        0x41, 0x89, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x08, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x0e, 0x49, 0x89, 0x08, 0x75, 0x09, 0x50, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0xc7,
        0x47, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x89, 0x5c,
        0x24, 0x18, 0x89, 0x7c, 0x24, 0x14, 0x89, 0x74,
        0x24, 0x10, 0x5e, 0x5f, 0x5b,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x23, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x38, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x42, (instruction->operand0 & UINT32_MAX));
}

void
emit__LOAD_ATTR_INSTANCE_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_INSTANCE_VALUE.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 7: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // b: 8b 74 24 10                   movl    0x10(%esp), %esi
    // f: 8b 41 fc                      movl    -0x4(%ecx), %eax
    // 12: ba 00 00 00 00                movl    $0x0, %edx
    // 00000013:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 17: 0f b7 d2                      movzwl  %dx, %edx
    // 1a: 8b 14 10                      movl    (%eax,%edx), %edx
    // 1d: 85 d2                         testl   %edx, %edx
    // 1f: 74 49                         je      0x6a <__JIT_ENTRY+0x6a>
    // 21: 8b 1a                         movl    (%edx), %ebx
    // 23: 81 fb ff ff ff 3f             cmpl    $0x3fffffff, %ebx       # imm = 0x3FFFFFFF
    // 29: 7f 03                         jg      0x2e <__JIT_ENTRY+0x2e>
    // 2b: 43                            incl    %ebx
    // 2c: 89 1a                         movl    %ebx, (%edx)
    // 2e: 89 51 fc                      movl    %edx, -0x4(%ecx)
    // 31: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 34: 8b 08                         movl    (%eax), %ecx
    // 36: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 3c: 7f 0e                         jg      0x4c <__JIT_ENTRY+0x4c>
    // 3e: 49                            decl    %ecx
    // 3f: 89 08                         movl    %ecx, (%eax)
    // 41: 75 09                         jne     0x4c <__JIT_ENTRY+0x4c>
    // 43: 50                            pushl   %eax
    // 44: e8 00 00 00 00                calll   0x49 <__JIT_ENTRY+0x49>
    // 00000045:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 49: 83 c4 04                      addl    $0x4, %esp
    // 4c: 8b 46 20                      movl    0x20(%esi), %eax
    // 4f: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 56: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 5a: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 5e: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 62: 5e                            popl    %esi
    // 63: 5f                            popl    %edi
    // 64: 5b                            popl    %ebx
    // 65: e9 00 00 00 00                jmp     0x6a <__JIT_ENTRY+0x6a>
    // 00000066:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 6a: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 6e: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 72: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 76: 5e                            popl    %esi
    // 77: 5f                            popl    %edi
    // 78: 5b                            popl    %ebx
    // 79: e9 00 00 00 00                jmp     0x7e <__JIT_ENTRY+0x7e>
    // 0000007a:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[126] = {
        0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x18, 0x8b,
        0x4c, 0x24, 0x14, 0x8b, 0x74, 0x24, 0x10, 0x8b,
        0x41, 0xfc, 0xba, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0xb7, 0xd2, 0x8b, 0x14, 0x10, 0x85, 0xd2, 0x74,
        0x49, 0x8b, 0x1a, 0x81, 0xfb, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x03, 0x43, 0x89, 0x1a, 0x89, 0x51,
        0xfc, 0x89, 0x4e, 0x20, 0x8b, 0x08, 0x81, 0xf9,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x49, 0x89,
        0x08, 0x75, 0x09, 0x50, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x04, 0x8b, 0x46, 0x20, 0xc7,
        0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x89, 0x7c,
        0x24, 0x18, 0x89, 0x44, 0x24, 0x14, 0x89, 0x74,
        0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x7c, 0x24, 0x18, 0x89, 0x4c,
        0x24, 0x14, 0x89, 0x74, 0x24, 0x10, 0x5e, 0x5f,
        0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x45, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x66, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x7a, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__LOAD_ATTR_METHOD_LAZY_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_METHOD_LAZY_DICT.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // 6: 8b 54 24 10                   movl    0x10(%esp), %edx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 72 fc                      movl    -0x4(%edx), %esi
    // 11: 8b 3d 00 00 00 00             movl    0x0, %edi
    // 00000013:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 17: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 1d: 7f 07                         jg      0x26 <__JIT_ENTRY+0x26>
    // 1f: 47                            incl    %edi
    // 20: 89 3d 00 00 00 00             movl    %edi, 0x0
    // 00000022:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 26: c7 42 fc 00 00 00 00          movl    $0x0, -0x4(%edx)
    // 00000029:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 2d: 89 32                         movl    %esi, (%edx)
    // 2f: 83 c2 04                      addl    $0x4, %edx
    // 32: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 36: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 3a: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3e: 5e                            popl    %esi
    // 3f: 5f                            popl    %edi
    // 40: e9 00 00 00 00                jmp     0x45 <__JIT_ENTRY+0x45>
    // 00000041:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[64] = {
        0x57, 0x56, 0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x54,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x72,
        0xfc, 0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x81,
        0xff, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x07, 0x47,
        0x89, 0x3d, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x42,
        0xfc, 0x00, 0x00, 0x00, 0x00, 0x89, 0x32, 0x83,
        0xc2, 0x04, 0x89, 0x4c, 0x24, 0x14, 0x89, 0x54,
        0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x22, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x29, (instruction->operand0 & UINT32_MAX));
}

void
emit__LOAD_ATTR_METHOD_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_METHOD_NO_DICT.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // 6: 8b 54 24 10                   movl    0x10(%esp), %edx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 72 fc                      movl    -0x4(%edx), %esi
    // 11: 8b 3d 00 00 00 00             movl    0x0, %edi
    // 00000013:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 17: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 1d: 7f 07                         jg      0x26 <__JIT_ENTRY+0x26>
    // 1f: 47                            incl    %edi
    // 20: 89 3d 00 00 00 00             movl    %edi, 0x0
    // 00000022:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 26: c7 42 fc 00 00 00 00          movl    $0x0, -0x4(%edx)
    // 00000029:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 2d: 89 32                         movl    %esi, (%edx)
    // 2f: 83 c2 04                      addl    $0x4, %edx
    // 32: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 36: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 3a: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3e: 5e                            popl    %esi
    // 3f: 5f                            popl    %edi
    // 40: e9 00 00 00 00                jmp     0x45 <__JIT_ENTRY+0x45>
    // 00000041:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[64] = {
        0x57, 0x56, 0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x54,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x72,
        0xfc, 0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x81,
        0xff, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x07, 0x47,
        0x89, 0x3d, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x42,
        0xfc, 0x00, 0x00, 0x00, 0x00, 0x89, 0x32, 0x83,
        0xc2, 0x04, 0x89, 0x4c, 0x24, 0x14, 0x89, 0x54,
        0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x22, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x29, (instruction->operand0 & UINT32_MAX));
}

void
emit__LOAD_ATTR_METHOD_WITH_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_METHOD_WITH_VALUES.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // 6: 8b 54 24 10                   movl    0x10(%esp), %edx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 72 fc                      movl    -0x4(%edx), %esi
    // 11: 8b 3d 00 00 00 00             movl    0x0, %edi
    // 00000013:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 17: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 1d: 7f 07                         jg      0x26 <__JIT_ENTRY+0x26>
    // 1f: 47                            incl    %edi
    // 20: 89 3d 00 00 00 00             movl    %edi, 0x0
    // 00000022:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 26: c7 42 fc 00 00 00 00          movl    $0x0, -0x4(%edx)
    // 00000029:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 2d: 89 32                         movl    %esi, (%edx)
    // 2f: 83 c2 04                      addl    $0x4, %edx
    // 32: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 36: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 3a: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3e: 5e                            popl    %esi
    // 3f: 5f                            popl    %edi
    // 40: e9 00 00 00 00                jmp     0x45 <__JIT_ENTRY+0x45>
    // 00000041:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[64] = {
        0x57, 0x56, 0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x54,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x72,
        0xfc, 0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x81,
        0xff, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x07, 0x47,
        0x89, 0x3d, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x42,
        0xfc, 0x00, 0x00, 0x00, 0x00, 0x89, 0x32, 0x83,
        0xc2, 0x04, 0x89, 0x4c, 0x24, 0x14, 0x89, 0x54,
        0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x22, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x29, (instruction->operand0 & UINT32_MAX));
}

void
emit__LOAD_ATTR_MODULE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_MODULE.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 5c 24 1c                   movl    0x1c(%esp), %ebx
    // 8: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // c: 8b 74 24 14                   movl    0x14(%esp), %esi
    // 10: 8b 47 fc                      movl    -0x4(%edi), %eax
    // 13: 8b 48 08                      movl    0x8(%eax), %ecx
    // 16: 8b 51 18                      movl    0x18(%ecx), %edx
    // 19: 0f b6 4a 05                   movzbl  0x5(%edx), %ecx
    // 1d: bd 01 00 00 00                movl    $0x1, %ebp
    // 22: d3 e5                         shll    %cl, %ebp
    // 24: 01 d5                         addl    %edx, %ebp
    // 26: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000027:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 2b: 0f b7 c9                      movzwl  %cx, %ecx
    // 2e: 8b 6c cd 18                   movl    0x18(%ebp,%ecx,8), %ebp
    // 32: 85 ed                         testl   %ebp, %ebp
    // 34: 74 3f                         je      0x75 <__JIT_ENTRY+0x75>
    // 36: 8b 4d 00                      movl    (%ebp), %ecx
    // 39: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 3f: 7f 04                         jg      0x45 <__JIT_ENTRY+0x45>
    // 41: 41                            incl    %ecx
    // 42: 89 4d 00                      movl    %ecx, (%ebp)
    // 45: 8b 08                         movl    (%eax), %ecx
    // 47: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 4d: 7f 0e                         jg      0x5d <__JIT_ENTRY+0x5d>
    // 4f: 49                            decl    %ecx
    // 50: 89 08                         movl    %ecx, (%eax)
    // 52: 75 09                         jne     0x5d <__JIT_ENTRY+0x5d>
    // 54: 50                            pushl   %eax
    // 55: e8 00 00 00 00                calll   0x5a <__JIT_ENTRY+0x5a>
    // 00000056:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 5a: 83 c4 04                      addl    $0x4, %esp
    // 5d: 89 6f fc                      movl    %ebp, -0x4(%edi)
    // 60: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 64: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 68: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 6c: 5e                            popl    %esi
    // 6d: 5f                            popl    %edi
    // 6e: 5b                            popl    %ebx
    // 6f: 5d                            popl    %ebp
    // 70: e9 00 00 00 00                jmp     0x75 <__JIT_ENTRY+0x75>
    // 00000071:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 75: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 79: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 7d: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 81: 5e                            popl    %esi
    // 82: 5f                            popl    %edi
    // 83: 5b                            popl    %ebx
    // 84: 5d                            popl    %ebp
    // 85: e9 00 00 00 00                jmp     0x8a <__JIT_ENTRY+0x8a>
    // 00000086:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[138] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x5c, 0x24, 0x1c,
        0x8b, 0x7c, 0x24, 0x18, 0x8b, 0x74, 0x24, 0x14,
        0x8b, 0x47, 0xfc, 0x8b, 0x48, 0x08, 0x8b, 0x51,
        0x18, 0x0f, 0xb6, 0x4a, 0x05, 0xbd, 0x01, 0x00,
        0x00, 0x00, 0xd3, 0xe5, 0x01, 0xd5, 0xb9, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x8b, 0x6c,
        0xcd, 0x18, 0x85, 0xed, 0x74, 0x3f, 0x8b, 0x4d,
        0x00, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x04, 0x41, 0x89, 0x4d, 0x00, 0x8b, 0x08, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x49,
        0x89, 0x08, 0x75, 0x09, 0x50, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0x89, 0x6f, 0xfc,
        0x89, 0x5c, 0x24, 0x1c, 0x89, 0x7c, 0x24, 0x18,
        0x89, 0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x5c, 0x24,
        0x1c, 0x89, 0x7c, 0x24, 0x18, 0x89, 0x74, 0x24,
        0x14, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x27, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x56, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x71, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x86, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__LOAD_ATTR_MODULE_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_MODULE_FROM_KEYS.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 54 24 18                   movl    0x18(%esp), %edx
    // c: 8b 74 24 14                   movl    0x14(%esp), %esi
    // 10: 8d 42 fc                      leal    -0x4(%edx), %eax
    // 13: 8b 5a fc                      movl    -0x4(%edx), %ebx
    // 16: 0f b6 4b 05                   movzbl  0x5(%ebx), %ecx
    // 1a: bd 01 00 00 00                movl    $0x1, %ebp
    // 1f: d3 e5                         shll    %cl, %ebp
    // 21: 01 dd                         addl    %ebx, %ebp
    // 23: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000024:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 28: 0f b7 c9                      movzwl  %cx, %ecx
    // 2b: 8b 5c cd 18                   movl    0x18(%ebp,%ecx,8), %ebx
    // 2f: 85 db                         testl   %ebx, %ebx
    // 31: 74 4c                         je      0x7f <__JIT_ENTRY+0x7f>
    // 33: 8b 4a f8                      movl    -0x8(%edx), %ecx
    // 36: 8b 2b                         movl    (%ebx), %ebp
    // 38: 81 fd ff ff ff 3f             cmpl    $0x3fffffff, %ebp       # imm = 0x3FFFFFFF
    // 3e: 7f 03                         jg      0x43 <__JIT_ENTRY+0x43>
    // 40: 45                            incl    %ebp
    // 41: 89 2b                         movl    %ebp, (%ebx)
    // 43: 89 5a f8                      movl    %ebx, -0x8(%edx)
    // 46: 89 46 20                      movl    %eax, 0x20(%esi)
    // 49: 8b 01                         movl    (%ecx), %eax
    // 4b: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 50: 7f 0e                         jg      0x60 <__JIT_ENTRY+0x60>
    // 52: 48                            decl    %eax
    // 53: 89 01                         movl    %eax, (%ecx)
    // 55: 75 09                         jne     0x60 <__JIT_ENTRY+0x60>
    // 57: 51                            pushl   %ecx
    // 58: e8 00 00 00 00                calll   0x5d <__JIT_ENTRY+0x5d>
    // 00000059:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 5d: 83 c4 04                      addl    $0x4, %esp
    // 60: 8b 46 20                      movl    0x20(%esi), %eax
    // 63: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 6a: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 6e: 89 44 24 18                   movl    %eax, 0x18(%esp)
    // 72: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 76: 5e                            popl    %esi
    // 77: 5f                            popl    %edi
    // 78: 5b                            popl    %ebx
    // 79: 5d                            popl    %ebp
    // 7a: e9 00 00 00 00                jmp     0x7f <__JIT_ENTRY+0x7f>
    // 0000007b:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 7f: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 83: 89 44 24 18                   movl    %eax, 0x18(%esp)
    // 87: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 8b: 5e                            popl    %esi
    // 8c: 5f                            popl    %edi
    // 8d: 5b                            popl    %ebx
    // 8e: 5d                            popl    %ebp
    // 8f: e9 00 00 00 00                jmp     0x94 <__JIT_ENTRY+0x94>
    // 00000090:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[148] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x54, 0x24, 0x18, 0x8b, 0x74, 0x24, 0x14,
        0x8d, 0x42, 0xfc, 0x8b, 0x5a, 0xfc, 0x0f, 0xb6,
        0x4b, 0x05, 0xbd, 0x01, 0x00, 0x00, 0x00, 0xd3,
        0xe5, 0x01, 0xdd, 0xb9, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xc9, 0x8b, 0x5c, 0xcd, 0x18, 0x85,
        0xdb, 0x74, 0x4c, 0x8b, 0x4a, 0xf8, 0x8b, 0x2b,
        0x81, 0xfd, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03,
        0x45, 0x89, 0x2b, 0x89, 0x5a, 0xf8, 0x89, 0x46,
        0x20, 0x8b, 0x01, 0x3d, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x0e, 0x48, 0x89, 0x01, 0x75, 0x09, 0x51,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04,
        0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x7c, 0x24, 0x1c, 0x89, 0x44,
        0x24, 0x18, 0x89, 0x74, 0x24, 0x14, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89,
        0x7c, 0x24, 0x1c, 0x89, 0x44, 0x24, 0x18, 0x89,
        0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x24, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x59, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x90, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__LOAD_ATTR_NONDESCRIPTOR_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 5c 24 18                   movl    0x18(%esp), %ebx
    // 7: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // b: 8b 74 24 10                   movl    0x10(%esp), %esi
    // f: 8b 47 fc                      movl    -0x4(%edi), %eax
    // 12: 8b 08                         movl    (%eax), %ecx
    // 14: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 1a: 7f 05                         jg      0x21 <__JIT_ENTRY+0x21>
    // 1c: 49                            decl    %ecx
    // 1d: 89 08                         movl    %ecx, (%eax)
    // 1f: 74 2d                         je      0x4e <__JIT_ENTRY+0x4e>
    // 21: a1 00 00 00 00                movl    0x0, %eax
    // 00000022:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 26: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 2b: 7f 06                         jg      0x33 <__JIT_ENTRY+0x33>
    // 2d: 40                            incl    %eax
    // 2e: a3 00 00 00 00                movl    %eax, 0x0
    // 0000002f:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 33: c7 47 fc 00 00 00 00          movl    $0x0, -0x4(%edi)
    // 00000036:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 3a: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 3e: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 42: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 46: 5e                            popl    %esi
    // 47: 5f                            popl    %edi
    // 48: 5b                            popl    %ebx
    // 49: e9 00 00 00 00                jmp     0x4e <__JIT_ENTRY+0x4e>
    // 0000004a:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 4e: 50                            pushl   %eax
    // 4f: e8 00 00 00 00                calll   0x54 <__JIT_ENTRY+0x54>
    // 00000050:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 54: 83 c4 04                      addl    $0x4, %esp
    // 57: a1 00 00 00 00                movl    0x0, %eax
    // 00000058:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 5c: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 61: 7e ca                         jle     0x2d <__JIT_ENTRY+0x2d>
    // 63: eb ce                         jmp     0x33 <__JIT_ENTRY+0x33>
    const unsigned char code_body[101] = {
        0x53, 0x57, 0x56, 0x8b, 0x5c, 0x24, 0x18, 0x8b,
        0x7c, 0x24, 0x14, 0x8b, 0x74, 0x24, 0x10, 0x8b,
        0x47, 0xfc, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x05, 0x49, 0x89, 0x08, 0x74,
        0x2d, 0xa1, 0x00, 0x00, 0x00, 0x00, 0x3d, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x06, 0x40, 0xa3, 0x00,
        0x00, 0x00, 0x00, 0xc7, 0x47, 0xfc, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x5c, 0x24, 0x18, 0x89, 0x7c,
        0x24, 0x14, 0x89, 0x74, 0x24, 0x10, 0x5e, 0x5f,
        0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x50, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0xa1,
        0x00, 0x00, 0x00, 0x00, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7e, 0xca, 0xeb, 0xce,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x22, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x2f, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x36, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x58, (instruction->operand0 & UINT32_MAX));
}

void
emit__LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 5c 24 18                   movl    0x18(%esp), %ebx
    // 7: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // b: 8b 74 24 10                   movl    0x10(%esp), %esi
    // f: 8b 47 fc                      movl    -0x4(%edi), %eax
    // 12: 8b 08                         movl    (%eax), %ecx
    // 14: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 1a: 7f 05                         jg      0x21 <__JIT_ENTRY+0x21>
    // 1c: 49                            decl    %ecx
    // 1d: 89 08                         movl    %ecx, (%eax)
    // 1f: 74 2d                         je      0x4e <__JIT_ENTRY+0x4e>
    // 21: a1 00 00 00 00                movl    0x0, %eax
    // 00000022:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 26: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 2b: 7f 06                         jg      0x33 <__JIT_ENTRY+0x33>
    // 2d: 40                            incl    %eax
    // 2e: a3 00 00 00 00                movl    %eax, 0x0
    // 0000002f:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 33: c7 47 fc 00 00 00 00          movl    $0x0, -0x4(%edi)
    // 00000036:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 3a: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 3e: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 42: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 46: 5e                            popl    %esi
    // 47: 5f                            popl    %edi
    // 48: 5b                            popl    %ebx
    // 49: e9 00 00 00 00                jmp     0x4e <__JIT_ENTRY+0x4e>
    // 0000004a:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 4e: 50                            pushl   %eax
    // 4f: e8 00 00 00 00                calll   0x54 <__JIT_ENTRY+0x54>
    // 00000050:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 54: 83 c4 04                      addl    $0x4, %esp
    // 57: a1 00 00 00 00                movl    0x0, %eax
    // 00000058:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 5c: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 61: 7e ca                         jle     0x2d <__JIT_ENTRY+0x2d>
    // 63: eb ce                         jmp     0x33 <__JIT_ENTRY+0x33>
    const unsigned char code_body[101] = {
        0x53, 0x57, 0x56, 0x8b, 0x5c, 0x24, 0x18, 0x8b,
        0x7c, 0x24, 0x14, 0x8b, 0x74, 0x24, 0x10, 0x8b,
        0x47, 0xfc, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x05, 0x49, 0x89, 0x08, 0x74,
        0x2d, 0xa1, 0x00, 0x00, 0x00, 0x00, 0x3d, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x06, 0x40, 0xa3, 0x00,
        0x00, 0x00, 0x00, 0xc7, 0x47, 0xfc, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x5c, 0x24, 0x18, 0x89, 0x7c,
        0x24, 0x14, 0x89, 0x74, 0x24, 0x10, 0x5e, 0x5f,
        0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x50, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0xa1,
        0x00, 0x00, 0x00, 0x00, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7e, 0xca, 0xeb, 0xce,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x22, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x2f, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x36, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x58, (instruction->operand0 & UINT32_MAX));
}

void
emit__LOAD_ATTR_PROPERTY_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_PROPERTY_FRAME.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 54 24 20                   movl    0x20(%esp), %edx
    // 9: 8b 4c 24 1c                   movl    0x1c(%esp), %ecx
    // d: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 11: 8b 35 18 00 00 00             movl    0x18, %esi
    // 00000013:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 17: 8b 7e 18                      movl    0x18(%esi), %edi
    // 1a: 83 e7 0d                      andl    $0xd, %edi
    // 1d: 83 ff 01                      cmpl    $0x1, %edi
    // 20: 0f 85 ef 00 00 00             jne     0x115 <__JIT_ENTRY+0x115>
    // 26: 83 7e 24 00                   cmpl    $0x0, 0x24(%esi)
    // 2a: 0f 85 e5 00 00 00             jne     0x115 <__JIT_ENTRY+0x115>
    // 30: 83 7e 1c 01                   cmpl    $0x1, 0x1c(%esi)
    // 34: 0f 85 db 00 00 00             jne     0x115 <__JIT_ENTRY+0x115>
    // 3a: 8b ba 94 00 00 00             movl    0x94(%edx), %edi
    // 40: 85 ff                         testl   %edi, %edi
    // 42: 0f 84 cd 00 00 00             je      0x115 <__JIT_ENTRY+0x115>
    // 48: 8b 6e 34                      movl    0x34(%esi), %ebp
    // 4b: 8b 9a 98 00 00 00             movl    0x98(%edx), %ebx
    // 51: 29 fb                         subl    %edi, %ebx
    // 53: c1 fb 02                      sarl    $0x2, %ebx
    // 56: 39 eb                         cmpl    %ebp, %ebx
    // 58: 0f 8e b7 00 00 00             jle     0x115 <__JIT_ENTRY+0x115>
    // 5e: 8b 59 fc                      movl    -0x4(%ecx), %ebx
    // 61: 89 1c 24                      movl    %ebx, (%esp)
    // 64: 8b 1d 00 00 00 00             movl    0x0, %ebx
    // 00000066:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 6a: 81 fb ff ff ff 3f             cmpl    $0x3fffffff, %ebx       # imm = 0x3FFFFFFF
    // 70: 7f 07                         jg      0x79 <__JIT_ENTRY+0x79>
    // 72: 43                            incl    %ebx
    // 73: 89 1d 00 00 00 00             movl    %ebx, 0x0
    // 00000075:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 79: 8d 1c af                      leal    (%edi,%ebp,4), %ebx
    // 7c: 89 9a 94 00 00 00             movl    %ebx, 0x94(%edx)
    // 82: 89 47 04                      movl    %eax, 0x4(%edi)
    // 85: c7 47 08 00 00 00 00          movl    $0x0, 0x8(%edi)
    // 00000088:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 8c: 8b 1e                         movl    (%esi), %ebx
    // 8e: 81 fb ff ff ff 3f             cmpl    $0x3fffffff, %ebx       # imm = 0x3FFFFFFF
    // 94: 7f 03                         jg      0x99 <__JIT_ENTRY+0x99>
    // 96: 43                            incl    %ebx
    // 97: 89 1e                         movl    %ebx, (%esi)
    // 99: 89 37                         movl    %esi, (%edi)
    // 9b: f2 0f 10 05 08 00 00 00       movsd   0x8, %xmm0
    // 0000009f:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // a3: f2 0f 11 47 0c                movsd   %xmm0, 0xc(%edi)
    // a8: c7 47 14 00 00 00 00          movl    $0x0, 0x14(%edi)
    // af: 8b 5e 30                      movl    0x30(%esi), %ebx
    // b2: 8d 5c 9f 28                   leal    0x28(%edi,%ebx,4), %ebx
    // b6: 89 5f 20                      movl    %ebx, 0x20(%edi)
    // b9: c7 47 18 00 00 00 00          movl    $0x0, 0x18(%edi)
    // c0: 8d 9e 80 00 00 00             leal    0x80(%esi), %ebx
    // c6: 89 5f 1c                      movl    %ebx, 0x1c(%edi)
    // c9: c7 47 24 00 00 00 00          movl    $0x0, 0x24(%edi)
    // d0: 83 7e 30 02                   cmpl    $0x2, 0x30(%esi)
    // d4: 7c 1e                         jl      0xf4 <__JIT_ENTRY+0xf4>
    // d6: bd 0b 00 00 00                movl    $0xb, %ebp
    // db: 0f 1f 44 00 00                nopl    (%eax,%eax)
    // e0: c7 04 af 00 00 00 00          movl    $0x0, (%edi,%ebp,4)
    // e7: 8d 5d 01                      leal    0x1(%ebp), %ebx
    // ea: 83 c5 f7                      addl    $-0x9, %ebp
    // ed: 3b 6e 30                      cmpl    0x30(%esi), %ebp
    // f0: 89 dd                         movl    %ebx, %ebp
    // f2: 7c ec                         jl      0xe0 <__JIT_ENTRY+0xe0>
    // f4: 8b 34 24                      movl    (%esp), %esi
    // f7: 89 77 28                      movl    %esi, 0x28(%edi)
    // fa: 89 79 fc                      movl    %edi, -0x4(%ecx)
    // fd: 89 54 24 20                   movl    %edx, 0x20(%esp)
    // 101: 89 4c 24 1c                   movl    %ecx, 0x1c(%esp)
    // 105: 89 44 24 18                   movl    %eax, 0x18(%esp)
    // 109: 83 c4 04                      addl    $0x4, %esp
    // 10c: 5e                            popl    %esi
    // 10d: 5f                            popl    %edi
    // 10e: 5b                            popl    %ebx
    // 10f: 5d                            popl    %ebp
    // 110: e9 00 00 00 00                jmp     0x115 <__JIT_ENTRY+0x115>
    // 00000111:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 115: 89 54 24 20                   movl    %edx, 0x20(%esp)
    // 119: 89 4c 24 1c                   movl    %ecx, 0x1c(%esp)
    // 11d: 89 44 24 18                   movl    %eax, 0x18(%esp)
    // 121: 83 c4 04                      addl    $0x4, %esp
    // 124: 5e                            popl    %esi
    // 125: 5f                            popl    %edi
    // 126: 5b                            popl    %ebx
    // 127: 5d                            popl    %ebp
    // 128: e9 00 00 00 00                jmp     0x12d <__JIT_ENTRY+0x12d>
    // 00000129:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[301] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x54, 0x24,
        0x20, 0x8b, 0x4c, 0x24, 0x1c, 0x8b, 0x44, 0x24,
        0x18, 0x8b, 0x35, 0x18, 0x00, 0x00, 0x00, 0x8b,
        0x7e, 0x18, 0x83, 0xe7, 0x0d, 0x83, 0xff, 0x01,
        0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x83, 0x7e,
        0x24, 0x00, 0x0f, 0x85, 0xe5, 0x00, 0x00, 0x00,
        0x83, 0x7e, 0x1c, 0x01, 0x0f, 0x85, 0xdb, 0x00,
        0x00, 0x00, 0x8b, 0xba, 0x94, 0x00, 0x00, 0x00,
        0x85, 0xff, 0x0f, 0x84, 0xcd, 0x00, 0x00, 0x00,
        0x8b, 0x6e, 0x34, 0x8b, 0x9a, 0x98, 0x00, 0x00,
        0x00, 0x29, 0xfb, 0xc1, 0xfb, 0x02, 0x39, 0xeb,
        0x0f, 0x8e, 0xb7, 0x00, 0x00, 0x00, 0x8b, 0x59,
        0xfc, 0x89, 0x1c, 0x24, 0x8b, 0x1d, 0x00, 0x00,
        0x00, 0x00, 0x81, 0xfb, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x07, 0x43, 0x89, 0x1d, 0x00, 0x00, 0x00,
        0x00, 0x8d, 0x1c, 0xaf, 0x89, 0x9a, 0x94, 0x00,
        0x00, 0x00, 0x89, 0x47, 0x04, 0xc7, 0x47, 0x08,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x1e, 0x81, 0xfb,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03, 0x43, 0x89,
        0x1e, 0x89, 0x37, 0xf2, 0x0f, 0x10, 0x05, 0x08,
        0x00, 0x00, 0x00, 0xf2, 0x0f, 0x11, 0x47, 0x0c,
        0xc7, 0x47, 0x14, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x5e, 0x30, 0x8d, 0x5c, 0x9f, 0x28, 0x89, 0x5f,
        0x20, 0xc7, 0x47, 0x18, 0x00, 0x00, 0x00, 0x00,
        0x8d, 0x9e, 0x80, 0x00, 0x00, 0x00, 0x89, 0x5f,
        0x1c, 0xc7, 0x47, 0x24, 0x00, 0x00, 0x00, 0x00,
        0x83, 0x7e, 0x30, 0x02, 0x7c, 0x1e, 0xbd, 0x0b,
        0x00, 0x00, 0x00, 0x0f, 0x1f, 0x44, 0x00, 0x00,
        0xc7, 0x04, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x8d,
        0x5d, 0x01, 0x83, 0xc5, 0xf7, 0x3b, 0x6e, 0x30,
        0x89, 0xdd, 0x7c, 0xec, 0x8b, 0x34, 0x24, 0x89,
        0x77, 0x28, 0x89, 0x79, 0xfc, 0x89, 0x54, 0x24,
        0x20, 0x89, 0x4c, 0x24, 0x1c, 0x89, 0x44, 0x24,
        0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54, 0x24,
        0x20, 0x89, 0x4c, 0x24, 0x1c, 0x89, 0x44, 0x24,
        0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (instruction->operand0 & UINT32_MAX) + 0x18);
    patch_32(code + 0x66, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x75, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x88, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x9f, (instruction->operand0 & UINT32_MAX) + 0x8);
    patch_x86_64_32rx(code + 0x111, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x129, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__LOAD_ATTR_SLOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_SLOT.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 5c 24 1c                   movl    0x1c(%esp), %ebx
    // 8: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // c: 8b 74 24 14                   movl    0x14(%esp), %esi
    // 10: 8b 47 fc                      movl    -0x4(%edi), %eax
    // 13: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000014:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 18: 0f b7 c9                      movzwl  %cx, %ecx
    // 1b: 8b 2c 08                      movl    (%eax,%ecx), %ebp
    // 1e: 85 ed                         testl   %ebp, %ebp
    // 20: 74 3f                         je      0x61 <__JIT_ENTRY+0x61>
    // 22: 8b 4d 00                      movl    (%ebp), %ecx
    // 25: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 2b: 7f 04                         jg      0x31 <__JIT_ENTRY+0x31>
    // 2d: 41                            incl    %ecx
    // 2e: 89 4d 00                      movl    %ecx, (%ebp)
    // 31: 8b 08                         movl    (%eax), %ecx
    // 33: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 39: 7f 0e                         jg      0x49 <__JIT_ENTRY+0x49>
    // 3b: 49                            decl    %ecx
    // 3c: 89 08                         movl    %ecx, (%eax)
    // 3e: 75 09                         jne     0x49 <__JIT_ENTRY+0x49>
    // 40: 50                            pushl   %eax
    // 41: e8 00 00 00 00                calll   0x46 <__JIT_ENTRY+0x46>
    // 00000042:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 46: 83 c4 04                      addl    $0x4, %esp
    // 49: 89 6f fc                      movl    %ebp, -0x4(%edi)
    // 4c: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 50: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 54: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 58: 5e                            popl    %esi
    // 59: 5f                            popl    %edi
    // 5a: 5b                            popl    %ebx
    // 5b: 5d                            popl    %ebp
    // 5c: e9 00 00 00 00                jmp     0x61 <__JIT_ENTRY+0x61>
    // 0000005d:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 61: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 65: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 69: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 6d: 5e                            popl    %esi
    // 6e: 5f                            popl    %edi
    // 6f: 5b                            popl    %ebx
    // 70: 5d                            popl    %ebp
    // 71: e9 00 00 00 00                jmp     0x76 <__JIT_ENTRY+0x76>
    // 00000072:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[118] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x5c, 0x24, 0x1c,
        0x8b, 0x7c, 0x24, 0x18, 0x8b, 0x74, 0x24, 0x14,
        0x8b, 0x47, 0xfc, 0xb9, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xc9, 0x8b, 0x2c, 0x08, 0x85, 0xed,
        0x74, 0x3f, 0x8b, 0x4d, 0x00, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x04, 0x41, 0x89, 0x4d,
        0x00, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75, 0x09,
        0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x89, 0x6f, 0xfc, 0x89, 0x5c, 0x24, 0x1c,
        0x89, 0x7c, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x5c, 0x24, 0x1c, 0x89, 0x7c, 0x24,
        0x18, 0x89, 0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x42, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x72, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__LOAD_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_WITH_HINT.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 10                      subl    $0x10, %esp
    // 7: 8b 5c 24 2c                   movl    0x2c(%esp), %ebx
    // b: 8b 6c 24 28                   movl    0x28(%esp), %ebp
    // f: 8b 74 24 24                   movl    0x24(%esp), %esi
    // 13: 8d 7d fc                      leal    -0x4(%ebp), %edi
    // 16: 8b 4d fc                      movl    -0x4(%ebp), %ecx
    // 19: b8 00 00 00 00                movl    $0x0, %eax
    // 0000001a:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 1e: 0f b7 c0                      movzwl  %ax, %eax
    // 21: 8b 51 18                      movl    0x18(%ecx), %edx
    // 24: 39 42 10                      cmpl    %eax, 0x10(%edx)
    // 27: 76 5a                         jbe     0x83 <__JIT_ENTRY+0x83>
    // 29: 80 7a 06 01                   cmpb    $0x1, 0x6(%edx)
    // 2d: 75 54                         jne     0x83 <__JIT_ENTRY+0x83>
    // 2f: 89 5c 24 0c                   movl    %ebx, 0xc(%esp)
    // 33: 89 7c 24 04                   movl    %edi, 0x4(%esp)
    // 37: 8b 0e                         movl    (%esi), %ecx
    // 39: 8b 49 10                      movl    0x10(%ecx), %ecx
    // 3c: 89 0c 24                      movl    %ecx, (%esp)
    // 3f: bb 00 00 00 00                movl    $0x0, %ebx
    // 00000040:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 44: 81 e3 fe ff 00 00             andl    $0xfffe, %ebx           # imm = 0xFFFE
    // 4a: 0f b6 4a 05                   movzbl  0x5(%edx), %ecx
    // 4e: bf 01 00 00 00                movl    $0x1, %edi
    // 53: d3 e7                         shll    %cl, %edi
    // 55: 8d 0c 3a                      leal    (%edx,%edi), %ecx
    // 58: 8b 4c c1 14                   movl    0x14(%ecx,%eax,8), %ecx
    // 5c: 89 74 24 08                   movl    %esi, 0x8(%esp)
    // 60: 8b 34 24                      movl    (%esp), %esi
    // 63: 3b 4c 5e 0c                   cmpl    0xc(%esi,%ebx,2), %ecx
    // 67: 74 32                         je      0x9b <__JIT_ENTRY+0x9b>
    // 69: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 6d: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 71: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 75: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // 79: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 7d: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // 81: eb 0c                         jmp     0x8f <__JIT_ENTRY+0x8f>
    // 83: 89 5c 24 2c                   movl    %ebx, 0x2c(%esp)
    // 87: 89 7c 24 28                   movl    %edi, 0x28(%esp)
    // 8b: 89 74 24 24                   movl    %esi, 0x24(%esp)
    // 8f: 83 c4 10                      addl    $0x10, %esp
    // 92: 5e                            popl    %esi
    // 93: 5f                            popl    %edi
    // 94: 5b                            popl    %ebx
    // 95: 5d                            popl    %ebp
    // 96: e9 00 00 00 00                jmp     0x9b <__JIT_ENTRY+0x9b>
    // 00000097:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 9b: 8b 74 24 08                   movl    0x8(%esp), %esi
    // 9f: 8d 0c 3a                      leal    (%edx,%edi), %ecx
    // a2: 83 c1 14                      addl    $0x14, %ecx
    // a5: 8b 54 c1 04                   movl    0x4(%ecx,%eax,8), %edx
    // a9: 85 d2                         testl   %edx, %edx
    // ab: 8b 5c 24 0c                   movl    0xc(%esp), %ebx
    // af: 74 4f                         je      0x100 <__JIT_ENTRY+0x100>
    // b1: 8b 45 f8                      movl    -0x8(%ebp), %eax
    // b4: 8b 0a                         movl    (%edx), %ecx
    // b6: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // bc: 8b 7c 24 04                   movl    0x4(%esp), %edi
    // c0: 7f 03                         jg      0xc5 <__JIT_ENTRY+0xc5>
    // c2: 41                            incl    %ecx
    // c3: 89 0a                         movl    %ecx, (%edx)
    // c5: 8b 08                         movl    (%eax), %ecx
    // c7: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // cd: 7f 16                         jg      0xe5 <__JIT_ENTRY+0xe5>
    // cf: 49                            decl    %ecx
    // d0: 89 08                         movl    %ecx, (%eax)
    // d2: 75 11                         jne     0xe5 <__JIT_ENTRY+0xe5>
    // d4: 50                            pushl   %eax
    // d5: 89 54 24 04                   movl    %edx, 0x4(%esp)
    // d9: e8 00 00 00 00                calll   0xde <__JIT_ENTRY+0xde>
    // 000000da:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // de: 8b 54 24 04                   movl    0x4(%esp), %edx
    // e2: 83 c4 04                      addl    $0x4, %esp
    // e5: 89 55 f8                      movl    %edx, -0x8(%ebp)
    // e8: 89 5c 24 2c                   movl    %ebx, 0x2c(%esp)
    // ec: 89 7c 24 28                   movl    %edi, 0x28(%esp)
    // f0: 89 74 24 24                   movl    %esi, 0x24(%esp)
    // f4: 83 c4 10                      addl    $0x10, %esp
    // f7: 5e                            popl    %esi
    // f8: 5f                            popl    %edi
    // f9: 5b                            popl    %ebx
    // fa: 5d                            popl    %ebp
    // fb: e9 00 00 00 00                jmp     0x100 <__JIT_ENTRY+0x100>
    // 000000fc:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 100: 89 5c 24 2c                   movl    %ebx, 0x2c(%esp)
    // 104: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 108: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // 10c: e9 7a ff ff ff                jmp     0x8b <__JIT_ENTRY+0x8b>
    const unsigned char code_body[273] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x10, 0x8b,
        0x5c, 0x24, 0x2c, 0x8b, 0x6c, 0x24, 0x28, 0x8b,
        0x74, 0x24, 0x24, 0x8d, 0x7d, 0xfc, 0x8b, 0x4d,
        0xfc, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xc0, 0x8b, 0x51, 0x18, 0x39, 0x42, 0x10, 0x76,
        0x5a, 0x80, 0x7a, 0x06, 0x01, 0x75, 0x54, 0x89,
        0x5c, 0x24, 0x0c, 0x89, 0x7c, 0x24, 0x04, 0x8b,
        0x0e, 0x8b, 0x49, 0x10, 0x89, 0x0c, 0x24, 0xbb,
        0x00, 0x00, 0x00, 0x00, 0x81, 0xe3, 0xfe, 0xff,
        0x00, 0x00, 0x0f, 0xb6, 0x4a, 0x05, 0xbf, 0x01,
        0x00, 0x00, 0x00, 0xd3, 0xe7, 0x8d, 0x0c, 0x3a,
        0x8b, 0x4c, 0xc1, 0x14, 0x89, 0x74, 0x24, 0x08,
        0x8b, 0x34, 0x24, 0x3b, 0x4c, 0x5e, 0x0c, 0x74,
        0x32, 0x8b, 0x44, 0x24, 0x0c, 0x89, 0x44, 0x24,
        0x2c, 0x8b, 0x44, 0x24, 0x04, 0x89, 0x44, 0x24,
        0x28, 0x8b, 0x44, 0x24, 0x08, 0x89, 0x44, 0x24,
        0x24, 0xeb, 0x0c, 0x89, 0x5c, 0x24, 0x2c, 0x89,
        0x7c, 0x24, 0x28, 0x89, 0x74, 0x24, 0x24, 0x83,
        0xc4, 0x10, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x74, 0x24, 0x08, 0x8d,
        0x0c, 0x3a, 0x83, 0xc1, 0x14, 0x8b, 0x54, 0xc1,
        0x04, 0x85, 0xd2, 0x8b, 0x5c, 0x24, 0x0c, 0x74,
        0x4f, 0x8b, 0x45, 0xf8, 0x8b, 0x0a, 0x81, 0xf9,
        0xff, 0xff, 0xff, 0x3f, 0x8b, 0x7c, 0x24, 0x04,
        0x7f, 0x03, 0x41, 0x89, 0x0a, 0x8b, 0x08, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x16, 0x49,
        0x89, 0x08, 0x75, 0x11, 0x50, 0x89, 0x54, 0x24,
        0x04, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x54,
        0x24, 0x04, 0x83, 0xc4, 0x04, 0x89, 0x55, 0xf8,
        0x89, 0x5c, 0x24, 0x2c, 0x89, 0x7c, 0x24, 0x28,
        0x89, 0x74, 0x24, 0x24, 0x83, 0xc4, 0x10, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x5c, 0x24, 0x2c, 0x8b, 0x44, 0x24, 0x04,
        0x89, 0x44, 0x24, 0x28, 0xe9, 0x7a, 0xff, 0xff,
        0xff,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x1a, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x40, instruction->oparg);
    patch_x86_64_32rx(code + 0x97, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0xda, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xfc, (uintptr_t)code + sizeof(code_body) + -0x4);
}

void
emit__LOAD_BUILD_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_BUILD_CLASS.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 50                            pushl   %eax
    // 3: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 7: 8b 74 24 10                   movl    0x10(%esp), %esi
    // b: 8b 44 24 14                   movl    0x14(%esp), %eax
    // f: 89 46 20                      movl    %eax, 0x20(%esi)
    // 12: 89 e0                         movl    %esp, %eax
    // 14: 50                            pushl   %eax
    // 15: 68 b4 50 00 00                pushl   $0x50b4                 # imm = 0x50B4
    // 00000016:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 1a: ff 76 10                      pushl   0x10(%esi)
    // 1d: e8 00 00 00 00                calll   0x22 <__JIT_ENTRY+0x22>
    // 0000001e:  IMAGE_REL_I386_REL32 _PyMapping_GetOptionalItem
    // 22: 83 c4 0c                      addl    $0xc, %esp
    // 25: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 28: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 2f: 85 c0                         testl   %eax, %eax
    // 31: 78 22                         js      0x55 <__JIT_ENTRY+0x55>
    // 33: 8b 04 24                      movl    (%esp), %eax
    // 36: 85 c0                         testl   %eax, %eax
    // 38: 74 25                         je      0x5f <__JIT_ENTRY+0x5f>
    // 3a: 89 01                         movl    %eax, (%ecx)
    // 3c: 83 c1 04                      addl    $0x4, %ecx
    // 3f: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 43: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 47: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 4b: 83 c4 04                      addl    $0x4, %esp
    // 4e: 5e                            popl    %esi
    // 4f: 5f                            popl    %edi
    // 50: e9 00 00 00 00                jmp     0x55 <__JIT_ENTRY+0x55>
    // 00000051:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 55: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 59: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 5d: eb 29                         jmp     0x88 <__JIT_ENTRY+0x88>
    // 5f: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 62: 68 00 00 00 00                pushl   $0x0
    // 00000063:  IMAGE_REL_I386_DIR32 ??_C@_0BK@IAGNFEAN@__build_class__?5not?5found?$AA@
    // 67: ff 35 00 00 00 00             pushl   0x0
    // 00000069:  IMAGE_REL_I386_DIR32 _PyExc_NameError
    // 6d: 57                            pushl   %edi
    // 6e: e8 00 00 00 00                calll   0x73 <__JIT_ENTRY+0x73>
    // 0000006f:  IMAGE_REL_I386_REL32 __PyErr_SetString
    // 73: 83 c4 0c                      addl    $0xc, %esp
    // 76: 8b 46 20                      movl    0x20(%esi), %eax
    // 79: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 80: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 84: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 88: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 8c: 83 c4 04                      addl    $0x4, %esp
    // 8f: 5e                            popl    %esi
    // 90: 5f                            popl    %edi
    // 91: e9 00 00 00 00                jmp     0x96 <__JIT_ENTRY+0x96>
    // 00000092:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[150] = {
        0x57, 0x56, 0x50, 0x8b, 0x7c, 0x24, 0x18, 0x8b,
        0x74, 0x24, 0x10, 0x8b, 0x44, 0x24, 0x14, 0x89,
        0x46, 0x20, 0x89, 0xe0, 0x50, 0x68, 0xb4, 0x50,
        0x00, 0x00, 0xff, 0x76, 0x10, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b, 0x4e, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x85,
        0xc0, 0x78, 0x22, 0x8b, 0x04, 0x24, 0x85, 0xc0,
        0x74, 0x25, 0x89, 0x01, 0x83, 0xc1, 0x04, 0x89,
        0x74, 0x24, 0x10, 0x89, 0x4c, 0x24, 0x14, 0x89,
        0x7c, 0x24, 0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24,
        0x18, 0x89, 0x4c, 0x24, 0x14, 0xeb, 0x29, 0x89,
        0x4e, 0x20, 0x68, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x35, 0x00, 0x00, 0x00, 0x00, 0x57, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b, 0x46,
        0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x7c, 0x24, 0x18, 0x89, 0x44, 0x24, 0x14,
        0x89, 0x74, 0x24, 0x10, 0x83, 0xc4, 0x04, 0x5e,
        0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: '__build_class__ not found\x00'
    // 1a: 00 00 00 00 00 00
    const unsigned char data_body[32] = {
        0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
        0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20,
        0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e,
        0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x16, (uintptr_t)&_PyRuntime + 0x50b4);
    patch_x86_64_32rx(code + 0x1e, (uintptr_t)&PyMapping_GetOptionalItem + -0x4);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32(code + 0x63, (uintptr_t)data);
    patch_32(code + 0x69, (uintptr_t)&PyExc_NameError);
    patch_x86_64_32rx(code + 0x6f, (uintptr_t)&_PyErr_SetString + -0x4);
    patch_x86_64_32rx(code + 0x92, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_COMMON_CONSTANT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_COMMON_CONSTANT.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 6: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // a: 8b 54 24 10                   movl    0x10(%esp), %edx
    // e: be 00 00 00 00                movl    $0x0, %esi
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 66 85 f6                      testw   %si, %si
    // 16: be 00 00 00 00                movl    $0x0, %esi
    // 00000017:  IMAGE_REL_I386_DIR32 _PyExc_AssertionError
    // 1b: bf 00 00 00 00                movl    $0x0, %edi
    // 0000001c:  IMAGE_REL_I386_DIR32 _PyExc_NotImplementedError
    // 20: 0f 44 fe                      cmovel  %esi, %edi
    // 23: 8b 37                         movl    (%edi), %esi
    // 25: 89 32                         movl    %esi, (%edx)
    // 27: 83 c2 04                      addl    $0x4, %edx
    // 2a: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 2e: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 32: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 36: 5e                            popl    %esi
    // 37: 5f                            popl    %edi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0x57, 0x56, 0x8b, 0x44, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x0c, 0x8b, 0x54, 0x24, 0x10, 0xbe, 0x00,
        0x00, 0x00, 0x00, 0x66, 0x85, 0xf6, 0xbe, 0x00,
        0x00, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x44, 0xfe, 0x8b, 0x37, 0x89, 0x32, 0x83,
        0xc2, 0x04, 0x89, 0x4c, 0x24, 0x0c, 0x89, 0x54,
        0x24, 0x10, 0x89, 0x44, 0x24, 0x14, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
    patch_32(code + 0x17, (uintptr_t)&PyExc_AssertionError);
    patch_32(code + 0x1c, (uintptr_t)&PyExc_NotImplementedError);
}

void
emit__LOAD_CONST_IMMORTAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_CONST_IMMORTAL.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 54 24 0c                   movl    0xc(%esp), %edx
    // e: be 00 00 00 00                movl    $0x0, %esi
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 f6                      movzwl  %si, %esi
    // 16: 8b 3a                         movl    (%edx), %edi
    // 18: 8b 7f 0c                      movl    0xc(%edi), %edi
    // 1b: 8b 74 b7 0c                   movl    0xc(%edi,%esi,4), %esi
    // 1f: 89 31                         movl    %esi, (%ecx)
    // 21: 83 c1 04                      addl    $0x4, %ecx
    // 24: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 28: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 2c: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 30: 5e                            popl    %esi
    // 31: 5f                            popl    %edi
    // 32: e9 00 00 00 00                jmp     0x37 <__JIT_ENTRY+0x37>
    // 00000033:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[50] = {
        0x57, 0x56, 0x8b, 0x44, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x54, 0x24, 0x0c, 0xbe, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6, 0x8b, 0x3a,
        0x8b, 0x7f, 0x0c, 0x8b, 0x74, 0xb7, 0x0c, 0x89,
        0x31, 0x83, 0xc1, 0x04, 0x89, 0x54, 0x24, 0x0c,
        0x89, 0x4c, 0x24, 0x10, 0x89, 0x44, 0x24, 0x14,
        0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
}

void
emit__LOAD_CONST_INLINE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_CONST_INLINE.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // 5: 8b 54 24 0c                   movl    0xc(%esp), %edx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 35 00 00 00 00             movl    0x0, %esi
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 13: 81 fe ff ff ff 3f             cmpl    $0x3fffffff, %esi       # imm = 0x3FFFFFFF
    // 19: 7f 07                         jg      0x22 <__JIT_ENTRY+0x22>
    // 1b: 46                            incl    %esi
    // 1c: 89 35 00 00 00 00             movl    %esi, 0x0
    // 0000001e:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 22: c7 02 00 00 00 00             movl    $0x0, (%edx)
    // 00000024:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 28: 83 c2 04                      addl    $0x4, %edx
    // 2b: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 2f: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 33: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 37: 5e                            popl    %esi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0x56, 0x8b, 0x4c, 0x24, 0x10, 0x8b, 0x54, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x35, 0x00,
        0x00, 0x00, 0x00, 0x81, 0xfe, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x07, 0x46, 0x89, 0x35, 0x00, 0x00,
        0x00, 0x00, 0xc7, 0x02, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24, 0x10, 0x89,
        0x54, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x1e, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x24, (instruction->operand0 & UINT32_MAX));
}

void
emit__LOAD_CONST_INLINE_BORROW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_CONST_INLINE_BORROW.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 4: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 8: 8b 54 24 08                   movl    0x8(%esp), %edx
    // c: c7 02 00 00 00 00             movl    $0x0, (%edx)
    // 0000000e:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 12: 83 c2 04                      addl    $0x4, %edx
    // 15: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 19: 89 54 24 08                   movl    %edx, 0x8(%esp)
    // 1d: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 21: e9 00 00 00 00                jmp     0x26 <__JIT_ENTRY+0x26>
    // 00000022:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[33] = {
        0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x04,
        0x8b, 0x54, 0x24, 0x08, 0xc7, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24,
        0x04, 0x89, 0x54, 0x24, 0x08, 0x89, 0x44, 0x24,
        0x0c,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xe, (instruction->operand0 & UINT32_MAX));
}

void
emit__LOAD_CONST_MORTAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_CONST_MORTAL.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // 6: 8b 54 24 10                   movl    0x10(%esp), %edx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: be 00 00 00 00                movl    $0x0, %esi
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 f6                      movzwl  %si, %esi
    // 16: 8b 38                         movl    (%eax), %edi
    // 18: 8b 7f 0c                      movl    0xc(%edi), %edi
    // 1b: 8b 74 b7 0c                   movl    0xc(%edi,%esi,4), %esi
    // 1f: 8b 3e                         movl    (%esi), %edi
    // 21: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 27: 7f 03                         jg      0x2c <__JIT_ENTRY+0x2c>
    // 29: 47                            incl    %edi
    // 2a: 89 3e                         movl    %edi, (%esi)
    // 2c: 89 32                         movl    %esi, (%edx)
    // 2e: 83 c2 04                      addl    $0x4, %edx
    // 31: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 35: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 39: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 3d: 5e                            popl    %esi
    // 3e: 5f                            popl    %edi
    // 3f: e9 00 00 00 00                jmp     0x44 <__JIT_ENTRY+0x44>
    // 00000040:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[63] = {
        0x57, 0x56, 0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x54,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0xbe, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6, 0x8b, 0x38,
        0x8b, 0x7f, 0x0c, 0x8b, 0x74, 0xb7, 0x0c, 0x8b,
        0x3e, 0x81, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x03, 0x47, 0x89, 0x3e, 0x89, 0x32, 0x83, 0xc2,
        0x04, 0x89, 0x4c, 0x24, 0x14, 0x89, 0x54, 0x24,
        0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
}

void
emit__LOAD_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_DEREF.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 44 24 10                   movl    0x10(%esp), %eax
    // a: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // e: b9 00 00 00 00                movl    $0x0, %ecx
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 d1                      movzwl  %cx, %edx
    // 16: 8b 4c 96 28                   movl    0x28(%esi,%edx,4), %ecx
    // 1a: 8b 49 08                      movl    0x8(%ecx), %ecx
    // 1d: 85 c9                         testl   %ecx, %ecx
    // 1f: 74 25                         je      0x46 <__JIT_ENTRY+0x46>
    // 21: 8b 11                         movl    (%ecx), %edx
    // 23: 81 fa ff ff ff 3f             cmpl    $0x3fffffff, %edx       # imm = 0x3FFFFFFF
    // 29: 7f 03                         jg      0x2e <__JIT_ENTRY+0x2e>
    // 2b: 42                            incl    %edx
    // 2c: 89 11                         movl    %edx, (%ecx)
    // 2e: 89 08                         movl    %ecx, (%eax)
    // 30: 83 c0 04                      addl    $0x4, %eax
    // 33: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 37: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 3b: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 3f: 5e                            popl    %esi
    // 40: 5f                            popl    %edi
    // 41: e9 00 00 00 00                jmp     0x46 <__JIT_ENTRY+0x46>
    // 00000042:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 46: 89 46 20                      movl    %eax, 0x20(%esi)
    // 49: 52                            pushl   %edx
    // 4a: ff 36                         pushl   (%esi)
    // 4c: 57                            pushl   %edi
    // 4d: e8 00 00 00 00                calll   0x52 <__JIT_ENTRY+0x52>
    // 0000004e:  IMAGE_REL_I386_REL32 __PyEval_FormatExcUnbound
    // 52: 83 c4 0c                      addl    $0xc, %esp
    // 55: 8b 46 20                      movl    0x20(%esi), %eax
    // 58: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 5f: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 63: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 67: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 6b: 5e                            popl    %esi
    // 6c: 5f                            popl    %edi
    // 6d: e9 00 00 00 00                jmp     0x72 <__JIT_ENTRY+0x72>
    // 0000006e:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[114] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x44,
        0x24, 0x10, 0x8b, 0x74, 0x24, 0x0c, 0xb9, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x8b, 0x4c,
        0x96, 0x28, 0x8b, 0x49, 0x08, 0x85, 0xc9, 0x74,
        0x25, 0x8b, 0x11, 0x81, 0xfa, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x03, 0x42, 0x89, 0x11, 0x89, 0x08,
        0x83, 0xc0, 0x04, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x44, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x46,
        0x20, 0x52, 0xff, 0x36, 0x57, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b, 0x46, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x89,
        0x7c, 0x24, 0x14, 0x89, 0x44, 0x24, 0x10, 0x89,
        0x74, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
    patch_x86_64_32rx(code + 0x42, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)&_PyEval_FormatExcUnbound + -0x4);
    patch_x86_64_32rx(code + 0x6e, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // 6: 8b 54 24 10                   movl    0x10(%esp), %edx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: be 00 00 00 00                movl    $0x0, %esi
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 f6                      movzwl  %si, %esi
    // 16: 8b 74 b0 28                   movl    0x28(%eax,%esi,4), %esi
    // 1a: 8b 3e                         movl    (%esi), %edi
    // 1c: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 22: 7f 03                         jg      0x27 <__JIT_ENTRY+0x27>
    // 24: 47                            incl    %edi
    // 25: 89 3e                         movl    %edi, (%esi)
    // 27: 89 32                         movl    %esi, (%edx)
    // 29: 83 c2 04                      addl    $0x4, %edx
    // 2c: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 30: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 34: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 38: 5e                            popl    %esi
    // 39: 5f                            popl    %edi
    // 3a: e9 00 00 00 00                jmp     0x3f <__JIT_ENTRY+0x3f>
    // 0000003b:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[58] = {
        0x57, 0x56, 0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x54,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0xbe, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6, 0x8b, 0x74,
        0xb0, 0x28, 0x8b, 0x3e, 0x81, 0xff, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x03, 0x47, 0x89, 0x3e, 0x89,
        0x32, 0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24, 0x14,
        0x89, 0x54, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c,
        0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
}

void
emit__LOAD_FAST_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_0.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // 6: 8b 54 24 10                   movl    0x10(%esp), %edx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 70 28                      movl    0x28(%eax), %esi
    // 11: 8b 3e                         movl    (%esi), %edi
    // 13: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 19: 7f 03                         jg      0x1e <__JIT_ENTRY+0x1e>
    // 1b: 47                            incl    %edi
    // 1c: 89 3e                         movl    %edi, (%esi)
    // 1e: 89 32                         movl    %esi, (%edx)
    // 20: 83 c2 04                      addl    $0x4, %edx
    // 23: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 27: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2b: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 2f: 5e                            popl    %esi
    // 30: 5f                            popl    %edi
    // 31: e9 00 00 00 00                jmp     0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[49] = {
        0x57, 0x56, 0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x54,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x70,
        0x28, 0x8b, 0x3e, 0x81, 0xff, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x03, 0x47, 0x89, 0x3e, 0x89, 0x32,
        0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24, 0x14, 0x89,
        0x54, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_1.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // 6: 8b 54 24 10                   movl    0x10(%esp), %edx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 70 2c                      movl    0x2c(%eax), %esi
    // 11: 8b 3e                         movl    (%esi), %edi
    // 13: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 19: 7f 03                         jg      0x1e <__JIT_ENTRY+0x1e>
    // 1b: 47                            incl    %edi
    // 1c: 89 3e                         movl    %edi, (%esi)
    // 1e: 89 32                         movl    %esi, (%edx)
    // 20: 83 c2 04                      addl    $0x4, %edx
    // 23: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 27: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2b: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 2f: 5e                            popl    %esi
    // 30: 5f                            popl    %edi
    // 31: e9 00 00 00 00                jmp     0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[49] = {
        0x57, 0x56, 0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x54,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x70,
        0x2c, 0x8b, 0x3e, 0x81, 0xff, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x03, 0x47, 0x89, 0x3e, 0x89, 0x32,
        0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24, 0x14, 0x89,
        0x54, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_2.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // 6: 8b 54 24 10                   movl    0x10(%esp), %edx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 70 30                      movl    0x30(%eax), %esi
    // 11: 8b 3e                         movl    (%esi), %edi
    // 13: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 19: 7f 03                         jg      0x1e <__JIT_ENTRY+0x1e>
    // 1b: 47                            incl    %edi
    // 1c: 89 3e                         movl    %edi, (%esi)
    // 1e: 89 32                         movl    %esi, (%edx)
    // 20: 83 c2 04                      addl    $0x4, %edx
    // 23: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 27: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2b: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 2f: 5e                            popl    %esi
    // 30: 5f                            popl    %edi
    // 31: e9 00 00 00 00                jmp     0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[49] = {
        0x57, 0x56, 0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x54,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x70,
        0x30, 0x8b, 0x3e, 0x81, 0xff, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x03, 0x47, 0x89, 0x3e, 0x89, 0x32,
        0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24, 0x14, 0x89,
        0x54, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_3.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // 6: 8b 54 24 10                   movl    0x10(%esp), %edx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 70 34                      movl    0x34(%eax), %esi
    // 11: 8b 3e                         movl    (%esi), %edi
    // 13: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 19: 7f 03                         jg      0x1e <__JIT_ENTRY+0x1e>
    // 1b: 47                            incl    %edi
    // 1c: 89 3e                         movl    %edi, (%esi)
    // 1e: 89 32                         movl    %esi, (%edx)
    // 20: 83 c2 04                      addl    $0x4, %edx
    // 23: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 27: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2b: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 2f: 5e                            popl    %esi
    // 30: 5f                            popl    %edi
    // 31: e9 00 00 00 00                jmp     0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[49] = {
        0x57, 0x56, 0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x54,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x70,
        0x34, 0x8b, 0x3e, 0x81, 0xff, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x03, 0x47, 0x89, 0x3e, 0x89, 0x32,
        0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24, 0x14, 0x89,
        0x54, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_4.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // 6: 8b 54 24 10                   movl    0x10(%esp), %edx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 70 38                      movl    0x38(%eax), %esi
    // 11: 8b 3e                         movl    (%esi), %edi
    // 13: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 19: 7f 03                         jg      0x1e <__JIT_ENTRY+0x1e>
    // 1b: 47                            incl    %edi
    // 1c: 89 3e                         movl    %edi, (%esi)
    // 1e: 89 32                         movl    %esi, (%edx)
    // 20: 83 c2 04                      addl    $0x4, %edx
    // 23: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 27: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2b: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 2f: 5e                            popl    %esi
    // 30: 5f                            popl    %edi
    // 31: e9 00 00 00 00                jmp     0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[49] = {
        0x57, 0x56, 0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x54,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x70,
        0x38, 0x8b, 0x3e, 0x81, 0xff, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x03, 0x47, 0x89, 0x3e, 0x89, 0x32,
        0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24, 0x14, 0x89,
        0x54, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_5(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_5.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // 6: 8b 54 24 10                   movl    0x10(%esp), %edx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 70 3c                      movl    0x3c(%eax), %esi
    // 11: 8b 3e                         movl    (%esi), %edi
    // 13: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 19: 7f 03                         jg      0x1e <__JIT_ENTRY+0x1e>
    // 1b: 47                            incl    %edi
    // 1c: 89 3e                         movl    %edi, (%esi)
    // 1e: 89 32                         movl    %esi, (%edx)
    // 20: 83 c2 04                      addl    $0x4, %edx
    // 23: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 27: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2b: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 2f: 5e                            popl    %esi
    // 30: 5f                            popl    %edi
    // 31: e9 00 00 00 00                jmp     0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[49] = {
        0x57, 0x56, 0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x54,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x70,
        0x3c, 0x8b, 0x3e, 0x81, 0xff, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x03, 0x47, 0x89, 0x3e, 0x89, 0x32,
        0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24, 0x14, 0x89,
        0x54, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_6(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_6.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // 6: 8b 54 24 10                   movl    0x10(%esp), %edx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 70 40                      movl    0x40(%eax), %esi
    // 11: 8b 3e                         movl    (%esi), %edi
    // 13: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 19: 7f 03                         jg      0x1e <__JIT_ENTRY+0x1e>
    // 1b: 47                            incl    %edi
    // 1c: 89 3e                         movl    %edi, (%esi)
    // 1e: 89 32                         movl    %esi, (%edx)
    // 20: 83 c2 04                      addl    $0x4, %edx
    // 23: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 27: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2b: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 2f: 5e                            popl    %esi
    // 30: 5f                            popl    %edi
    // 31: e9 00 00 00 00                jmp     0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[49] = {
        0x57, 0x56, 0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x54,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x70,
        0x40, 0x8b, 0x3e, 0x81, 0xff, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x03, 0x47, 0x89, 0x3e, 0x89, 0x32,
        0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24, 0x14, 0x89,
        0x54, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_7(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_7.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // 6: 8b 54 24 10                   movl    0x10(%esp), %edx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 70 44                      movl    0x44(%eax), %esi
    // 11: 8b 3e                         movl    (%esi), %edi
    // 13: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 19: 7f 03                         jg      0x1e <__JIT_ENTRY+0x1e>
    // 1b: 47                            incl    %edi
    // 1c: 89 3e                         movl    %edi, (%esi)
    // 1e: 89 32                         movl    %esi, (%edx)
    // 20: 83 c2 04                      addl    $0x4, %edx
    // 23: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 27: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2b: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 2f: 5e                            popl    %esi
    // 30: 5f                            popl    %edi
    // 31: e9 00 00 00 00                jmp     0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[49] = {
        0x57, 0x56, 0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x54,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x70,
        0x44, 0x8b, 0x3e, 0x81, 0xff, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x03, 0x47, 0x89, 0x3e, 0x89, 0x32,
        0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24, 0x14, 0x89,
        0x54, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_AND_CLEAR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_AND_CLEAR.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 54 24 0c                   movl    0xc(%esp), %edx
    // e: be 00 00 00 00                movl    $0x0, %esi
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 f6                      movzwl  %si, %esi
    // 16: 8b 7c b2 28                   movl    0x28(%edx,%esi,4), %edi
    // 1a: c7 44 b2 28 00 00 00 00       movl    $0x0, 0x28(%edx,%esi,4)
    // 22: 89 39                         movl    %edi, (%ecx)
    // 24: 83 c1 04                      addl    $0x4, %ecx
    // 27: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 2b: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 2f: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 33: 5e                            popl    %esi
    // 34: 5f                            popl    %edi
    // 35: e9 00 00 00 00                jmp     0x3a <__JIT_ENTRY+0x3a>
    // 00000036:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[53] = {
        0x57, 0x56, 0x8b, 0x44, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x54, 0x24, 0x0c, 0xbe, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6, 0x8b, 0x7c,
        0xb2, 0x28, 0xc7, 0x44, 0xb2, 0x28, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x39, 0x83, 0xc1, 0x04, 0x89,
        0x54, 0x24, 0x0c, 0x89, 0x4c, 0x24, 0x10, 0x89,
        0x44, 0x24, 0x14, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
}

void
emit__LOAD_FAST_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_CHECK.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 44 24 10                   movl    0x10(%esp), %eax
    // a: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // e: b9 00 00 00 00                movl    $0x0, %ecx
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 d1                      movzwl  %cx, %edx
    // 16: 8b 4c 96 28                   movl    0x28(%esi,%edx,4), %ecx
    // 1a: 85 c9                         testl   %ecx, %ecx
    // 1c: 74 25                         je      0x43 <__JIT_ENTRY+0x43>
    // 1e: 8b 11                         movl    (%ecx), %edx
    // 20: 81 fa ff ff ff 3f             cmpl    $0x3fffffff, %edx       # imm = 0x3FFFFFFF
    // 26: 7f 03                         jg      0x2b <__JIT_ENTRY+0x2b>
    // 28: 42                            incl    %edx
    // 29: 89 11                         movl    %edx, (%ecx)
    // 2b: 89 08                         movl    %ecx, (%eax)
    // 2d: 83 c0 04                      addl    $0x4, %eax
    // 30: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 34: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 38: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 3c: 5e                            popl    %esi
    // 3d: 5f                            popl    %edi
    // 3e: e9 00 00 00 00                jmp     0x43 <__JIT_ENTRY+0x43>
    // 0000003f:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 43: 89 46 20                      movl    %eax, 0x20(%esi)
    // 46: 8b 06                         movl    (%esi), %eax
    // 48: 52                            pushl   %edx
    // 49: ff 70 48                      pushl   0x48(%eax)
    // 4c: e8 00 00 00 00                calll   0x51 <__JIT_ENTRY+0x51>
    // 0000004d:  IMAGE_REL_I386_REL32 _PyTuple_GetItem
    // 51: 83 c4 08                      addl    $0x8, %esp
    // 54: 50                            pushl   %eax
    // 55: 68 00 00 00 00                pushl   $0x0
    // 00000056:  IMAGE_REL_I386_DIR32 ??_C@_0EK@CHGBBAMA@cannot?5access?5local?5variable?5?8?$CFs@
    // 5a: ff 35 00 00 00 00             pushl   0x0
    // 0000005c:  IMAGE_REL_I386_DIR32 _PyExc_UnboundLocalError
    // 60: 57                            pushl   %edi
    // 61: e8 00 00 00 00                calll   0x66 <__JIT_ENTRY+0x66>
    // 00000062:  IMAGE_REL_I386_REL32 __PyEval_FormatExcCheckArg
    // 66: 83 c4 10                      addl    $0x10, %esp
    // 69: 8b 46 20                      movl    0x20(%esi), %eax
    // 6c: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 73: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 77: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 7b: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 7f: 5e                            popl    %esi
    // 80: 5f                            popl    %edi
    // 81: e9 00 00 00 00                jmp     0x86 <__JIT_ENTRY+0x86>
    // 00000082:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[134] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x44,
        0x24, 0x10, 0x8b, 0x74, 0x24, 0x0c, 0xb9, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x8b, 0x4c,
        0x96, 0x28, 0x85, 0xc9, 0x74, 0x25, 0x8b, 0x11,
        0x81, 0xfa, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03,
        0x42, 0x89, 0x11, 0x89, 0x08, 0x83, 0xc0, 0x04,
        0x89, 0x7c, 0x24, 0x14, 0x89, 0x44, 0x24, 0x10,
        0x89, 0x74, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x46, 0x20, 0x8b, 0x06,
        0x52, 0xff, 0x70, 0x48, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x08, 0x50, 0x68, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x35, 0x00, 0x00, 0x00, 0x00,
        0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x10, 0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x44, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: "cannot access local variable '%s' where it is not associated with a value\x00"
    // 4a: 00 00 00 00 00 00
    const unsigned char data_body[80] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69,
        0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73,
        0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
        0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
        0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
        0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
        0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75,
        0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x4d, (uintptr_t)&PyTuple_GetItem + -0x4);
    patch_32(code + 0x56, (uintptr_t)data);
    patch_32(code + 0x5c, (uintptr_t)&PyExc_UnboundLocalError);
    patch_x86_64_32rx(code + 0x62, (uintptr_t)&_PyEval_FormatExcCheckArg + -0x4);
    patch_x86_64_32rx(code + 0x82, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_FROM_DICT_OR_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FROM_DICT_OR_DEREF.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 7c 24 20                   movl    0x20(%esp), %edi
    // 9: 8b 74 24 18                   movl    0x18(%esp), %esi
    // d: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 11: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000012:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 16: 0f b7 e9                      movzwl  %cx, %ebp
    // 19: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 1c: 8b 0e                         movl    (%esi), %ecx
    // 1e: 8b 49 48                      movl    0x48(%ecx), %ecx
    // 21: 8b 4c a9 0c                   movl    0xc(%ecx,%ebp,4), %ecx
    // 25: 89 46 20                      movl    %eax, 0x20(%esi)
    // 28: 89 e0                         movl    %esp, %eax
    // 2a: 50                            pushl   %eax
    // 2b: 51                            pushl   %ecx
    // 2c: 53                            pushl   %ebx
    // 2d: e8 00 00 00 00                calll   0x32 <__JIT_ENTRY+0x32>
    // 0000002e:  IMAGE_REL_I386_REL32 _PyMapping_GetOptionalItem
    // 32: 83 c4 0c                      addl    $0xc, %esp
    // 35: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 38: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 3f: 85 c0                         testl   %eax, %eax
    // 41: 78 6a                         js      0xad <__JIT_ENTRY+0xad>
    // 43: 8b 04 24                      movl    (%esp), %eax
    // 46: 85 c0                         testl   %eax, %eax
    // 48: 75 1b                         jne     0x65 <__JIT_ENTRY+0x65>
    // 4a: 8b 44 ae 28                   movl    0x28(%esi,%ebp,4), %eax
    // 4e: 8b 40 08                      movl    0x8(%eax), %eax
    // 51: 85 c0                         testl   %eax, %eax
    // 53: 74 70                         je      0xc5 <__JIT_ENTRY+0xc5>
    // 55: 8b 10                         movl    (%eax), %edx
    // 57: 81 fa ff ff ff 3f             cmpl    $0x3fffffff, %edx       # imm = 0x3FFFFFFF
    // 5d: 7f 03                         jg      0x62 <__JIT_ENTRY+0x62>
    // 5f: 42                            incl    %edx
    // 60: 89 10                         movl    %edx, (%eax)
    // 62: 89 04 24                      movl    %eax, (%esp)
    // 65: 83 c1 fc                      addl    $-0x4, %ecx
    // 68: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 6b: 8b 0b                         movl    (%ebx), %ecx
    // 6d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 73: 7f 11                         jg      0x86 <__JIT_ENTRY+0x86>
    // 75: 49                            decl    %ecx
    // 76: 89 0b                         movl    %ecx, (%ebx)
    // 78: 75 0c                         jne     0x86 <__JIT_ENTRY+0x86>
    // 7a: 53                            pushl   %ebx
    // 7b: e8 00 00 00 00                calll   0x80 <__JIT_ENTRY+0x80>
    // 0000007c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 80: 83 c4 04                      addl    $0x4, %esp
    // 83: 8b 04 24                      movl    (%esp), %eax
    // 86: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 89: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 90: 89 01                         movl    %eax, (%ecx)
    // 92: 83 c1 04                      addl    $0x4, %ecx
    // 95: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 99: 89 4c 24 1c                   movl    %ecx, 0x1c(%esp)
    // 9d: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // a1: 83 c4 04                      addl    $0x4, %esp
    // a4: 5e                            popl    %esi
    // a5: 5f                            popl    %edi
    // a6: 5b                            popl    %ebx
    // a7: 5d                            popl    %ebp
    // a8: e9 00 00 00 00                jmp     0xad <__JIT_ENTRY+0xad>
    // 000000a9:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // ad: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // b1: 89 4c 24 1c                   movl    %ecx, 0x1c(%esp)
    // b5: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // b9: 83 c4 04                      addl    $0x4, %esp
    // bc: 5e                            popl    %esi
    // bd: 5f                            popl    %edi
    // be: 5b                            popl    %ebx
    // bf: 5d                            popl    %ebp
    // c0: e9 00 00 00 00                jmp     0xc5 <__JIT_ENTRY+0xc5>
    // 000000c1:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // c5: c7 04 24 00 00 00 00          movl    $0x0, (%esp)
    // cc: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // cf: 55                            pushl   %ebp
    // d0: ff 36                         pushl   (%esi)
    // d2: 57                            pushl   %edi
    // d3: e8 00 00 00 00                calll   0xd8 <__JIT_ENTRY+0xd8>
    // 000000d4:  IMAGE_REL_I386_REL32 __PyEval_FormatExcUnbound
    // d8: 83 c4 0c                      addl    $0xc, %esp
    // db: 8b 46 20                      movl    0x20(%esi), %eax
    // de: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // e5: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // e9: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // ed: eb c6                         jmp     0xb5 <__JIT_ENTRY+0xb5>
    const unsigned char code_body[239] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x7c, 0x24,
        0x20, 0x8b, 0x74, 0x24, 0x18, 0x8b, 0x44, 0x24,
        0x1c, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xe9, 0x8b, 0x58, 0xfc, 0x8b, 0x0e, 0x8b, 0x49,
        0x48, 0x8b, 0x4c, 0xa9, 0x0c, 0x89, 0x46, 0x20,
        0x89, 0xe0, 0x50, 0x51, 0x53, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b, 0x4e, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x85,
        0xc0, 0x78, 0x6a, 0x8b, 0x04, 0x24, 0x85, 0xc0,
        0x75, 0x1b, 0x8b, 0x44, 0xae, 0x28, 0x8b, 0x40,
        0x08, 0x85, 0xc0, 0x74, 0x70, 0x8b, 0x10, 0x81,
        0xfa, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03, 0x42,
        0x89, 0x10, 0x89, 0x04, 0x24, 0x83, 0xc1, 0xfc,
        0x89, 0x4e, 0x20, 0x8b, 0x0b, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x11, 0x49, 0x89, 0x0b,
        0x75, 0x0c, 0x53, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0x8b, 0x04, 0x24, 0x8b, 0x4e,
        0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x01, 0x83, 0xc1, 0x04, 0x89, 0x74, 0x24,
        0x18, 0x89, 0x4c, 0x24, 0x1c, 0x89, 0x7c, 0x24,
        0x20, 0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24,
        0x20, 0x89, 0x4c, 0x24, 0x1c, 0x89, 0x74, 0x24,
        0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x04, 0x24,
        0x00, 0x00, 0x00, 0x00, 0x89, 0x4e, 0x20, 0x55,
        0xff, 0x36, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x0c, 0x8b, 0x46, 0x20, 0xc7, 0x46,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24,
        0x20, 0x89, 0x44, 0x24, 0x1c, 0xeb, 0xc6,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x12, instruction->oparg);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)&PyMapping_GetOptionalItem + -0x4);
    patch_x86_64_32rx(code + 0x7c, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xa9, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xc1, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0xd4, (uintptr_t)&_PyEval_FormatExcUnbound + -0x4);
}

void
emit__LOAD_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_GLOBAL.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 7: 8b 74 24 10                   movl    0x10(%esp), %esi
    // b: 8b 5c 24 14                   movl    0x14(%esp), %ebx
    // f: 8b 06                         movl    (%esi), %eax
    // 11: 8b 4e 0c                      movl    0xc(%esi), %ecx
    // 14: 8b 40 10                      movl    0x10(%eax), %eax
    // 17: ba 00 00 00 00                movl    $0x0, %edx
    // 00000018:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 1c: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
    // 22: 8b 44 50 0c                   movl    0xc(%eax,%edx,2), %eax
    // 26: 89 5e 20                      movl    %ebx, 0x20(%esi)
    // 29: 53                            pushl   %ebx
    // 2a: 50                            pushl   %eax
    // 2b: ff 76 10                      pushl   0x10(%esi)
    // 2e: 51                            pushl   %ecx
    // 2f: e8 00 00 00 00                calll   0x34 <__JIT_ENTRY+0x34>
    // 00000030:  IMAGE_REL_I386_REL32 __PyEval_LoadGlobalStackRef
    // 34: 83 c4 10                      addl    $0x10, %esp
    // 37: 8b 46 20                      movl    0x20(%esi), %eax
    // 3a: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 41: 83 3b 00                      cmpl    $0x0, (%ebx)
    // 44: 74 17                         je      0x5d <__JIT_ENTRY+0x5d>
    // 46: 83 c0 04                      addl    $0x4, %eax
    // 49: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 4d: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 51: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 55: 5e                            popl    %esi
    // 56: 5f                            popl    %edi
    // 57: 5b                            popl    %ebx
    // 58: e9 00 00 00 00                jmp     0x5d <__JIT_ENTRY+0x5d>
    // 00000059:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 5d: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 61: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 65: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 69: 5e                            popl    %esi
    // 6a: 5f                            popl    %edi
    // 6b: 5b                            popl    %ebx
    // 6c: e9 00 00 00 00                jmp     0x71 <__JIT_ENTRY+0x71>
    // 0000006d:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[113] = {
        0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x18, 0x8b,
        0x74, 0x24, 0x10, 0x8b, 0x5c, 0x24, 0x14, 0x8b,
        0x06, 0x8b, 0x4e, 0x0c, 0x8b, 0x40, 0x10, 0xba,
        0x00, 0x00, 0x00, 0x00, 0x81, 0xe2, 0xfe, 0xff,
        0x00, 0x00, 0x8b, 0x44, 0x50, 0x0c, 0x89, 0x5e,
        0x20, 0x53, 0x50, 0xff, 0x76, 0x10, 0x51, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x10, 0x8b,
        0x46, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x83, 0x3b, 0x00, 0x74, 0x17, 0x83, 0xc0,
        0x04, 0x89, 0x7c, 0x24, 0x18, 0x89, 0x74, 0x24,
        0x10, 0x89, 0x44, 0x24, 0x14, 0x5e, 0x5f, 0x5b,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24,
        0x18, 0x89, 0x44, 0x24, 0x14, 0x89, 0x74, 0x24,
        0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x18, instruction->oparg);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)&_PyEval_LoadGlobalStackRef + -0x4);
    patch_x86_64_32rx(code + 0x59, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x6d, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_GLOBAL_BUILTINS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_GLOBAL_BUILTINS.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 74 24 18                   movl    0x18(%esp), %esi
    // 7: 8b 54 24 14                   movl    0x14(%esp), %edx
    // b: 8b 44 24 10                   movl    0x10(%esp), %eax
    // f: 8b 48 10                      movl    0x10(%eax), %ecx
    // 12: 8b 79 18                      movl    0x18(%ecx), %edi
    // 15: 0f b6 4f 05                   movzbl  0x5(%edi), %ecx
    // 19: bb 01 00 00 00                movl    $0x1, %ebx
    // 1e: d3 e3                         shll    %cl, %ebx
    // 20: 01 fb                         addl    %edi, %ebx
    // 22: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000023:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 27: 0f b7 c9                      movzwl  %cx, %ecx
    // 2a: 8b 4c cb 18                   movl    0x18(%ebx,%ecx,8), %ecx
    // 2e: 85 c9                         testl   %ecx, %ecx
    // 30: 74 26                         je      0x58 <__JIT_ENTRY+0x58>
    // 32: 8b 39                         movl    (%ecx), %edi
    // 34: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 3a: 7f 03                         jg      0x3f <__JIT_ENTRY+0x3f>
    // 3c: 47                            incl    %edi
    // 3d: 89 39                         movl    %edi, (%ecx)
    // 3f: 89 0a                         movl    %ecx, (%edx)
    // 41: 83 c2 04                      addl    $0x4, %edx
    // 44: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 48: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 4c: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 50: 5e                            popl    %esi
    // 51: 5f                            popl    %edi
    // 52: 5b                            popl    %ebx
    // 53: e9 00 00 00 00                jmp     0x58 <__JIT_ENTRY+0x58>
    // 00000054:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 58: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 5c: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 60: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 64: 5e                            popl    %esi
    // 65: 5f                            popl    %edi
    // 66: 5b                            popl    %ebx
    // 67: e9 00 00 00 00                jmp     0x6c <__JIT_ENTRY+0x6c>
    // 00000068:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[108] = {
        0x53, 0x57, 0x56, 0x8b, 0x74, 0x24, 0x18, 0x8b,
        0x54, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x10, 0x8b,
        0x48, 0x10, 0x8b, 0x79, 0x18, 0x0f, 0xb6, 0x4f,
        0x05, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xd3, 0xe3,
        0x01, 0xfb, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0xb7, 0xc9, 0x8b, 0x4c, 0xcb, 0x18, 0x85, 0xc9,
        0x74, 0x26, 0x8b, 0x39, 0x81, 0xff, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x03, 0x47, 0x89, 0x39, 0x89,
        0x0a, 0x83, 0xc2, 0x04, 0x89, 0x74, 0x24, 0x18,
        0x89, 0x54, 0x24, 0x14, 0x89, 0x44, 0x24, 0x10,
        0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x74, 0x24, 0x18, 0x89, 0x54, 0x24, 0x14,
        0x89, 0x44, 0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x23, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x54, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x68, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__LOAD_GLOBAL_BUILTINS_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_GLOBAL_BUILTINS_FROM_KEYS.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 74 24 18                   movl    0x18(%esp), %esi
    // 7: 8b 54 24 14                   movl    0x14(%esp), %edx
    // b: 8b 44 24 10                   movl    0x10(%esp), %eax
    // f: 8b 7a fc                      movl    -0x4(%edx), %edi
    // 12: 0f b6 4f 05                   movzbl  0x5(%edi), %ecx
    // 16: bb 01 00 00 00                movl    $0x1, %ebx
    // 1b: d3 e3                         shll    %cl, %ebx
    // 1d: 01 fb                         addl    %edi, %ebx
    // 1f: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000020:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 24: 0f b7 c9                      movzwl  %cx, %ecx
    // 27: 8b 4c cb 18                   movl    0x18(%ebx,%ecx,8), %ecx
    // 2b: 85 c9                         testl   %ecx, %ecx
    // 2d: 74 24                         je      0x53 <__JIT_ENTRY+0x53>
    // 2f: 8b 39                         movl    (%ecx), %edi
    // 31: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 37: 7f 03                         jg      0x3c <__JIT_ENTRY+0x3c>
    // 39: 47                            incl    %edi
    // 3a: 89 39                         movl    %edi, (%ecx)
    // 3c: 89 4a fc                      movl    %ecx, -0x4(%edx)
    // 3f: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 43: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 47: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 4b: 5e                            popl    %esi
    // 4c: 5f                            popl    %edi
    // 4d: 5b                            popl    %ebx
    // 4e: e9 00 00 00 00                jmp     0x53 <__JIT_ENTRY+0x53>
    // 0000004f:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 53: 83 c2 fc                      addl    $-0x4, %edx
    // 56: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 5a: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 5e: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 62: 5e                            popl    %esi
    // 63: 5f                            popl    %edi
    // 64: 5b                            popl    %ebx
    // 65: e9 00 00 00 00                jmp     0x6a <__JIT_ENTRY+0x6a>
    // 00000066:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[106] = {
        0x53, 0x57, 0x56, 0x8b, 0x74, 0x24, 0x18, 0x8b,
        0x54, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x10, 0x8b,
        0x7a, 0xfc, 0x0f, 0xb6, 0x4f, 0x05, 0xbb, 0x01,
        0x00, 0x00, 0x00, 0xd3, 0xe3, 0x01, 0xfb, 0xb9,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x8b,
        0x4c, 0xcb, 0x18, 0x85, 0xc9, 0x74, 0x24, 0x8b,
        0x39, 0x81, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x03, 0x47, 0x89, 0x39, 0x89, 0x4a, 0xfc, 0x89,
        0x74, 0x24, 0x18, 0x89, 0x54, 0x24, 0x14, 0x89,
        0x44, 0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc2, 0xfc, 0x89, 0x74,
        0x24, 0x18, 0x89, 0x54, 0x24, 0x14, 0x89, 0x44,
        0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x20, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x4f, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x66, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__LOAD_GLOBAL_MODULE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_GLOBAL_MODULE.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 74 24 18                   movl    0x18(%esp), %esi
    // 7: 8b 54 24 14                   movl    0x14(%esp), %edx
    // b: 8b 44 24 10                   movl    0x10(%esp), %eax
    // f: 8b 48 0c                      movl    0xc(%eax), %ecx
    // 12: 8b 79 18                      movl    0x18(%ecx), %edi
    // 15: 0f b6 4f 05                   movzbl  0x5(%edi), %ecx
    // 19: bb 01 00 00 00                movl    $0x1, %ebx
    // 1e: d3 e3                         shll    %cl, %ebx
    // 20: 01 fb                         addl    %edi, %ebx
    // 22: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000023:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 27: 0f b7 c9                      movzwl  %cx, %ecx
    // 2a: 8b 4c cb 18                   movl    0x18(%ebx,%ecx,8), %ecx
    // 2e: 85 c9                         testl   %ecx, %ecx
    // 30: 74 26                         je      0x58 <__JIT_ENTRY+0x58>
    // 32: 8b 39                         movl    (%ecx), %edi
    // 34: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 3a: 7f 03                         jg      0x3f <__JIT_ENTRY+0x3f>
    // 3c: 47                            incl    %edi
    // 3d: 89 39                         movl    %edi, (%ecx)
    // 3f: 89 0a                         movl    %ecx, (%edx)
    // 41: 83 c2 04                      addl    $0x4, %edx
    // 44: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 48: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 4c: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 50: 5e                            popl    %esi
    // 51: 5f                            popl    %edi
    // 52: 5b                            popl    %ebx
    // 53: e9 00 00 00 00                jmp     0x58 <__JIT_ENTRY+0x58>
    // 00000054:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 58: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 5c: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 60: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 64: 5e                            popl    %esi
    // 65: 5f                            popl    %edi
    // 66: 5b                            popl    %ebx
    // 67: e9 00 00 00 00                jmp     0x6c <__JIT_ENTRY+0x6c>
    // 00000068:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[108] = {
        0x53, 0x57, 0x56, 0x8b, 0x74, 0x24, 0x18, 0x8b,
        0x54, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x10, 0x8b,
        0x48, 0x0c, 0x8b, 0x79, 0x18, 0x0f, 0xb6, 0x4f,
        0x05, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xd3, 0xe3,
        0x01, 0xfb, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0xb7, 0xc9, 0x8b, 0x4c, 0xcb, 0x18, 0x85, 0xc9,
        0x74, 0x26, 0x8b, 0x39, 0x81, 0xff, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x03, 0x47, 0x89, 0x39, 0x89,
        0x0a, 0x83, 0xc2, 0x04, 0x89, 0x74, 0x24, 0x18,
        0x89, 0x54, 0x24, 0x14, 0x89, 0x44, 0x24, 0x10,
        0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x74, 0x24, 0x18, 0x89, 0x54, 0x24, 0x14,
        0x89, 0x44, 0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x23, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x54, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x68, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__LOAD_GLOBAL_MODULE_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_GLOBAL_MODULE_FROM_KEYS.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 74 24 18                   movl    0x18(%esp), %esi
    // 7: 8b 54 24 14                   movl    0x14(%esp), %edx
    // b: 8b 44 24 10                   movl    0x10(%esp), %eax
    // f: 8b 7a fc                      movl    -0x4(%edx), %edi
    // 12: 0f b6 4f 05                   movzbl  0x5(%edi), %ecx
    // 16: bb 01 00 00 00                movl    $0x1, %ebx
    // 1b: d3 e3                         shll    %cl, %ebx
    // 1d: 01 fb                         addl    %edi, %ebx
    // 1f: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000020:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 24: 0f b7 c9                      movzwl  %cx, %ecx
    // 27: 8b 4c cb 18                   movl    0x18(%ebx,%ecx,8), %ecx
    // 2b: 85 c9                         testl   %ecx, %ecx
    // 2d: 74 24                         je      0x53 <__JIT_ENTRY+0x53>
    // 2f: 8b 39                         movl    (%ecx), %edi
    // 31: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 37: 7f 03                         jg      0x3c <__JIT_ENTRY+0x3c>
    // 39: 47                            incl    %edi
    // 3a: 89 39                         movl    %edi, (%ecx)
    // 3c: 89 4a fc                      movl    %ecx, -0x4(%edx)
    // 3f: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 43: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 47: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 4b: 5e                            popl    %esi
    // 4c: 5f                            popl    %edi
    // 4d: 5b                            popl    %ebx
    // 4e: e9 00 00 00 00                jmp     0x53 <__JIT_ENTRY+0x53>
    // 0000004f:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 53: 83 c2 fc                      addl    $-0x4, %edx
    // 56: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 5a: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 5e: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 62: 5e                            popl    %esi
    // 63: 5f                            popl    %edi
    // 64: 5b                            popl    %ebx
    // 65: e9 00 00 00 00                jmp     0x6a <__JIT_ENTRY+0x6a>
    // 00000066:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[106] = {
        0x53, 0x57, 0x56, 0x8b, 0x74, 0x24, 0x18, 0x8b,
        0x54, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x10, 0x8b,
        0x7a, 0xfc, 0x0f, 0xb6, 0x4f, 0x05, 0xbb, 0x01,
        0x00, 0x00, 0x00, 0xd3, 0xe3, 0x01, 0xfb, 0xb9,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x8b,
        0x4c, 0xcb, 0x18, 0x85, 0xc9, 0x74, 0x24, 0x8b,
        0x39, 0x81, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x03, 0x47, 0x89, 0x39, 0x89, 0x4a, 0xfc, 0x89,
        0x74, 0x24, 0x18, 0x89, 0x54, 0x24, 0x14, 0x89,
        0x44, 0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc2, 0xfc, 0x89, 0x74,
        0x24, 0x18, 0x89, 0x54, 0x24, 0x14, 0x89, 0x44,
        0x24, 0x10, 0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x20, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x4f, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x66, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__LOAD_LOCALS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_LOCALS.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 44 24 10                   movl    0x10(%esp), %eax
    // a: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // e: 8b 4e 14                      movl    0x14(%esi), %ecx
    // 11: 85 c9                         testl   %ecx, %ecx
    // 13: 74 25                         je      0x3a <__JIT_ENTRY+0x3a>
    // 15: 8b 11                         movl    (%ecx), %edx
    // 17: 81 fa ff ff ff 3f             cmpl    $0x3fffffff, %edx       # imm = 0x3FFFFFFF
    // 1d: 7f 03                         jg      0x22 <__JIT_ENTRY+0x22>
    // 1f: 42                            incl    %edx
    // 20: 89 11                         movl    %edx, (%ecx)
    // 22: 89 08                         movl    %ecx, (%eax)
    // 24: 83 c0 04                      addl    $0x4, %eax
    // 27: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 2b: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 2f: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 33: 5e                            popl    %esi
    // 34: 5f                            popl    %edi
    // 35: e9 00 00 00 00                jmp     0x3a <__JIT_ENTRY+0x3a>
    // 00000036:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 3a: 89 46 20                      movl    %eax, 0x20(%esi)
    // 3d: 68 00 00 00 00                pushl   $0x0
    // 0000003e:  IMAGE_REL_I386_DIR32 ??_C@_0BA@GFAKPHCI@no?5locals?5found?$AA@
    // 42: ff 35 00 00 00 00             pushl   0x0
    // 00000044:  IMAGE_REL_I386_DIR32 _PyExc_SystemError
    // 48: 57                            pushl   %edi
    // 49: e8 00 00 00 00                calll   0x4e <__JIT_ENTRY+0x4e>
    // 0000004a:  IMAGE_REL_I386_REL32 __PyErr_SetString
    // 4e: 83 c4 0c                      addl    $0xc, %esp
    // 51: 8b 46 20                      movl    0x20(%esi), %eax
    // 54: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 5b: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 5f: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 63: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 67: 5e                            popl    %esi
    // 68: 5f                            popl    %edi
    // 69: e9 00 00 00 00                jmp     0x6e <__JIT_ENTRY+0x6e>
    // 0000006a:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[110] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x44,
        0x24, 0x10, 0x8b, 0x74, 0x24, 0x0c, 0x8b, 0x4e,
        0x14, 0x85, 0xc9, 0x74, 0x25, 0x8b, 0x11, 0x81,
        0xfa, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03, 0x42,
        0x89, 0x11, 0x89, 0x08, 0x83, 0xc0, 0x04, 0x89,
        0x7c, 0x24, 0x14, 0x89, 0x44, 0x24, 0x10, 0x89,
        0x74, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x46, 0x20, 0x68, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x35, 0x00, 0x00, 0x00, 0x00,
        0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x0c, 0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x44, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 'no locals found\x00'
    const unsigned char data_body[16] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x36, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32(code + 0x3e, (uintptr_t)data);
    patch_32(code + 0x44, (uintptr_t)&PyExc_SystemError);
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)&_PyErr_SetString + -0x4);
    patch_x86_64_32rx(code + 0x6a, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_NAME.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 44 24 10                   movl    0x10(%esp), %eax
    // e: b9 00 00 00 00                movl    $0x0, %ecx
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 c9                      movzwl  %cx, %ecx
    // 16: 8b 16                         movl    (%esi), %edx
    // 18: 8b 52 10                      movl    0x10(%edx), %edx
    // 1b: 8b 4c 8a 0c                   movl    0xc(%edx,%ecx,4), %ecx
    // 1f: 89 46 20                      movl    %eax, 0x20(%esi)
    // 22: 51                            pushl   %ecx
    // 23: 56                            pushl   %esi
    // 24: 57                            pushl   %edi
    // 25: e8 00 00 00 00                calll   0x2a <__JIT_ENTRY+0x2a>
    // 00000026:  IMAGE_REL_I386_REL32 __PyEval_LoadName
    // 2a: 83 c4 0c                      addl    $0xc, %esp
    // 2d: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 30: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 37: 85 c0                         testl   %eax, %eax
    // 39: 74 18                         je      0x53 <__JIT_ENTRY+0x53>
    // 3b: 89 01                         movl    %eax, (%ecx)
    // 3d: 83 c1 04                      addl    $0x4, %ecx
    // 40: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 44: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 48: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 4c: 5e                            popl    %esi
    // 4d: 5f                            popl    %edi
    // 4e: e9 00 00 00 00                jmp     0x53 <__JIT_ENTRY+0x53>
    // 0000004f:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 53: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 57: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 5b: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 5f: 5e                            popl    %esi
    // 60: 5f                            popl    %edi
    // 61: e9 00 00 00 00                jmp     0x66 <__JIT_ENTRY+0x66>
    // 00000062:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[102] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x44, 0x24, 0x10, 0xb9, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x8b, 0x16,
        0x8b, 0x52, 0x10, 0x8b, 0x4c, 0x8a, 0x0c, 0x89,
        0x46, 0x20, 0x51, 0x56, 0x57, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b, 0x4e, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x85,
        0xc0, 0x74, 0x18, 0x89, 0x01, 0x83, 0xc1, 0x04,
        0x89, 0x7c, 0x24, 0x14, 0x89, 0x4c, 0x24, 0x10,
        0x89, 0x74, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x4c, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
    patch_x86_64_32rx(code + 0x26, (uintptr_t)&_PyEval_LoadName + -0x4);
    patch_x86_64_32rx(code + 0x4f, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x62, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_SMALL_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SMALL_INT.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 44 24 10                   movl    0x10(%esp), %eax
    // 5: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 9: 8b 54 24 0c                   movl    0xc(%esp), %edx
    // d: be 00 00 00 00                movl    $0x0, %esi
    // 0000000e:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 12: 0f b7 f6                      movzwl  %si, %esi
    // 15: c1 e6 04                      shll    $0x4, %esi
    // 18: 8d b6 3c 22 00 00             leal    0x223c(%esi), %esi
    // 0000001a:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 1e: 89 32                         movl    %esi, (%edx)
    // 20: 83 c2 04                      addl    $0x4, %edx
    // 23: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 27: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 2b: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 2f: 5e                            popl    %esi
    // 30: e9 00 00 00 00                jmp     0x35 <__JIT_ENTRY+0x35>
    // 00000031:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[48] = {
        0x56, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x08, 0x8b, 0x54, 0x24, 0x0c, 0xbe, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0xb7, 0xf6, 0xc1, 0xe6, 0x04,
        0x8d, 0xb6, 0x3c, 0x22, 0x00, 0x00, 0x89, 0x32,
        0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24, 0x08, 0x89,
        0x54, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x10, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xe, instruction->oparg);
    patch_32(code + 0x1a, (uintptr_t)&_PyRuntime + 0x223c);
}

void
emit__LOAD_SMALL_INT_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SMALL_INT_0.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 4: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 8: 8b 54 24 08                   movl    0x8(%esp), %edx
    // c: c7 02 3c 22 00 00             movl    $0x223c, (%edx)         # imm = 0x223C
    // 0000000e:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 12: 83 c2 04                      addl    $0x4, %edx
    // 15: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 19: 89 54 24 08                   movl    %edx, 0x8(%esp)
    // 1d: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 21: e9 00 00 00 00                jmp     0x26 <__JIT_ENTRY+0x26>
    // 00000022:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[33] = {
        0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x04,
        0x8b, 0x54, 0x24, 0x08, 0xc7, 0x02, 0x3c, 0x22,
        0x00, 0x00, 0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24,
        0x04, 0x89, 0x54, 0x24, 0x08, 0x89, 0x44, 0x24,
        0x0c,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xe, (uintptr_t)&_PyRuntime + 0x223c);
}

void
emit__LOAD_SMALL_INT_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SMALL_INT_1.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 4: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 8: 8b 54 24 08                   movl    0x8(%esp), %edx
    // c: c7 02 4c 22 00 00             movl    $0x224c, (%edx)         # imm = 0x224C
    // 0000000e:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 12: 83 c2 04                      addl    $0x4, %edx
    // 15: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 19: 89 54 24 08                   movl    %edx, 0x8(%esp)
    // 1d: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 21: e9 00 00 00 00                jmp     0x26 <__JIT_ENTRY+0x26>
    // 00000022:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[33] = {
        0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x04,
        0x8b, 0x54, 0x24, 0x08, 0xc7, 0x02, 0x4c, 0x22,
        0x00, 0x00, 0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24,
        0x04, 0x89, 0x54, 0x24, 0x08, 0x89, 0x44, 0x24,
        0x0c,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xe, (uintptr_t)&_PyRuntime + 0x224c);
}

void
emit__LOAD_SMALL_INT_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SMALL_INT_2.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 4: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 8: 8b 54 24 08                   movl    0x8(%esp), %edx
    // c: c7 02 5c 22 00 00             movl    $0x225c, (%edx)         # imm = 0x225C
    // 0000000e:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 12: 83 c2 04                      addl    $0x4, %edx
    // 15: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 19: 89 54 24 08                   movl    %edx, 0x8(%esp)
    // 1d: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 21: e9 00 00 00 00                jmp     0x26 <__JIT_ENTRY+0x26>
    // 00000022:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[33] = {
        0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x04,
        0x8b, 0x54, 0x24, 0x08, 0xc7, 0x02, 0x5c, 0x22,
        0x00, 0x00, 0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24,
        0x04, 0x89, 0x54, 0x24, 0x08, 0x89, 0x44, 0x24,
        0x0c,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xe, (uintptr_t)&_PyRuntime + 0x225c);
}

void
emit__LOAD_SMALL_INT_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SMALL_INT_3.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 4: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 8: 8b 54 24 08                   movl    0x8(%esp), %edx
    // c: c7 02 6c 22 00 00             movl    $0x226c, (%edx)         # imm = 0x226C
    // 0000000e:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 12: 83 c2 04                      addl    $0x4, %edx
    // 15: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 19: 89 54 24 08                   movl    %edx, 0x8(%esp)
    // 1d: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 21: e9 00 00 00 00                jmp     0x26 <__JIT_ENTRY+0x26>
    // 00000022:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[33] = {
        0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x04,
        0x8b, 0x54, 0x24, 0x08, 0xc7, 0x02, 0x6c, 0x22,
        0x00, 0x00, 0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24,
        0x04, 0x89, 0x54, 0x24, 0x08, 0x89, 0x44, 0x24,
        0x0c,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xe, (uintptr_t)&_PyRuntime + 0x226c);
}

void
emit__LOAD_SPECIAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SPECIAL.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 74 24 20                   movl    0x20(%esp), %esi
    // 9: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // d: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 11: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000012:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 16: 0f b7 d9                      movzwl  %cx, %ebx
    // 19: 8b 68 fc                      movl    -0x4(%eax), %ebp
    // 1c: 83 c0 fc                      addl    $-0x4, %eax
    // 1f: 8b 0c dd 00 00 00 00          movl    (,%ebx,8), %ecx
    // 00000022:  IMAGE_REL_I386_DIR32 __Py_SpecialMethods
    // 26: 89 47 20                      movl    %eax, 0x20(%edi)
    // 29: 89 e0                         movl    %esp, %eax
    // 2b: 50                            pushl   %eax
    // 2c: 51                            pushl   %ecx
    // 2d: 55                            pushl   %ebp
    // 2e: e8 00 00 00 00                calll   0x33 <__JIT_ENTRY+0x33>
    // 0000002f:  IMAGE_REL_I386_REL32 __PyObject_LookupSpecialMethod
    // 33: 83 c4 0c                      addl    $0xc, %esp
    // 36: 8b 4f 20                      movl    0x20(%edi), %ecx
    // 39: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 40: 85 c0                         testl   %eax, %eax
    // 42: 74 23                         je      0x67 <__JIT_ENTRY+0x67>
    // 44: 8b 14 24                      movl    (%esp), %edx
    // 47: 89 01                         movl    %eax, (%ecx)
    // 49: 89 51 04                      movl    %edx, 0x4(%ecx)
    // 4c: 83 c1 08                      addl    $0x8, %ecx
    // 4f: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 53: 89 4c 24 1c                   movl    %ecx, 0x1c(%esp)
    // 57: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // 5b: 83 c4 04                      addl    $0x4, %esp
    // 5e: 5e                            popl    %esi
    // 5f: 5f                            popl    %edi
    // 60: 5b                            popl    %ebx
    // 61: 5d                            popl    %ebp
    // 62: e9 00 00 00 00                jmp     0x67 <__JIT_ENTRY+0x67>
    // 00000063:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 67: 8b 46 48                      movl    0x48(%esi), %eax
    // 6a: 85 c0                         testl   %eax, %eax
    // 6c: 74 06                         je      0x74 <__JIT_ENTRY+0x74>
    // 6e: 83 78 04 00                   cmpl    $0x0, 0x4(%eax)
    // 72: 75 29                         jne     0x9d <__JIT_ENTRY+0x9d>
    // 74: 89 4f 20                      movl    %ecx, 0x20(%edi)
    // 77: 8b 45 04                      movl    0x4(%ebp), %eax
    // 7a: ff 70 0c                      pushl   0xc(%eax)
    // 7d: ff 34 dd 04 00 00 00          pushl   0x4(,%ebx,8)
    // 00000080:  IMAGE_REL_I386_DIR32 __Py_SpecialMethods
    // 84: ff 35 00 00 00 00             pushl   0x0
    // 00000086:  IMAGE_REL_I386_DIR32 _PyExc_TypeError
    // 8a: 56                            pushl   %esi
    // 8b: e8 00 00 00 00                calll   0x90 <__JIT_ENTRY+0x90>
    // 0000008c:  IMAGE_REL_I386_REL32 __PyErr_Format
    // 90: 83 c4 10                      addl    $0x10, %esp
    // 93: 8b 4f 20                      movl    0x20(%edi), %ecx
    // 96: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 9d: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // a1: 89 4c 24 1c                   movl    %ecx, 0x1c(%esp)
    // a5: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // a9: 83 c4 04                      addl    $0x4, %esp
    // ac: 5e                            popl    %esi
    // ad: 5f                            popl    %edi
    // ae: 5b                            popl    %ebx
    // af: 5d                            popl    %ebp
    // b0: e9 00 00 00 00                jmp     0xb5 <__JIT_ENTRY+0xb5>
    // 000000b1:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[181] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x74, 0x24,
        0x20, 0x8b, 0x7c, 0x24, 0x18, 0x8b, 0x44, 0x24,
        0x1c, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xd9, 0x8b, 0x68, 0xfc, 0x83, 0xc0, 0xfc, 0x8b,
        0x0c, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x89, 0x47,
        0x20, 0x89, 0xe0, 0x50, 0x51, 0x55, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b, 0x4f,
        0x20, 0xc7, 0x47, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x74, 0x23, 0x8b, 0x14, 0x24, 0x89,
        0x01, 0x89, 0x51, 0x04, 0x83, 0xc1, 0x08, 0x89,
        0x7c, 0x24, 0x18, 0x89, 0x4c, 0x24, 0x1c, 0x89,
        0x74, 0x24, 0x20, 0x83, 0xc4, 0x04, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x46, 0x48, 0x85, 0xc0, 0x74, 0x06, 0x83, 0x78,
        0x04, 0x00, 0x75, 0x29, 0x89, 0x4f, 0x20, 0x8b,
        0x45, 0x04, 0xff, 0x70, 0x0c, 0xff, 0x34, 0xdd,
        0x04, 0x00, 0x00, 0x00, 0xff, 0x35, 0x00, 0x00,
        0x00, 0x00, 0x56, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x10, 0x8b, 0x4f, 0x20, 0xc7, 0x47,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x89, 0x74, 0x24,
        0x20, 0x89, 0x4c, 0x24, 0x1c, 0x89, 0x7c, 0x24,
        0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x12, instruction->oparg);
    patch_32(code + 0x22, (uintptr_t)&_Py_SpecialMethods);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)&_PyObject_LookupSpecialMethod + -0x4);
    patch_x86_64_32rx(code + 0x63, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32(code + 0x80, (uintptr_t)&_Py_SpecialMethods + 0x4);
    patch_32(code + 0x86, (uintptr_t)&PyExc_TypeError);
    patch_x86_64_32rx(code + 0x8c, (uintptr_t)&_PyErr_Format + -0x4);
    patch_x86_64_32rx(code + 0xb1, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_SUPER_ATTR_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SUPER_ATTR_ATTR.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 5c 24 24                   movl    0x24(%esp), %ebx
    // b: 8b 44 24 20                   movl    0x20(%esp), %eax
    // f: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 13: 81 78 f4 00 00 00 00          cmpl    $0x0, -0xc(%eax)
    // 00000016:  IMAGE_REL_I386_DIR32 _PySuper_Type
    // 1a: 75 0c                         jne     0x28 <__JIT_ENTRY+0x28>
    // 1c: 8b 68 f8                      movl    -0x8(%eax), %ebp
    // 1f: 8b 4d 04                      movl    0x4(%ebp), %ecx
    // 22: 83 79 54 00                   cmpl    $0x0, 0x54(%ecx)
    // 26: 78 18                         js      0x40 <__JIT_ENTRY+0x40>
    // 28: 89 5c 24 24                   movl    %ebx, 0x24(%esp)
    // 2c: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 30: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 34: 83 c4 08                      addl    $0x8, %esp
    // 37: 5e                            popl    %esi
    // 38: 5f                            popl    %edi
    // 39: 5b                            popl    %ebx
    // 3a: 5d                            popl    %ebp
    // 3b: e9 00 00 00 00                jmp     0x40 <__JIT_ENTRY+0x40>
    // 0000003c:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 40: 8b 70 fc                      movl    -0x4(%eax), %esi
    // 43: 8b 0f                         movl    (%edi), %ecx
    // 45: 8b 49 10                      movl    0x10(%ecx), %ecx
    // 48: ba 00 00 00 00                movl    $0x0, %edx
    // 00000049:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 4d: 81 e2 fc ff 00 00             andl    $0xfffc, %edx           # imm = 0xFFFC
    // 53: 8b 4c 11 0c                   movl    0xc(%ecx,%edx), %ecx
    // 57: 89 47 20                      movl    %eax, 0x20(%edi)
    // 5a: 6a 00                         pushl   $0x0
    // 5c: 51                            pushl   %ecx
    // 5d: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 61: 56                            pushl   %esi
    // 62: 55                            pushl   %ebp
    // 63: e8 00 00 00 00                calll   0x68 <__JIT_ENTRY+0x68>
    // 00000064:  IMAGE_REL_I386_REL32 __PySuper_Lookup
    // 68: 83 c4 10                      addl    $0x10, %esp
    // 6b: 8b 77 20                      movl    0x20(%edi), %esi
    // 6e: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 75: 8b 0d 00 00 00 00             movl    0x0, %ecx
    // 00000077:  IMAGE_REL_I386_DIR32 _PySuper_Type
    // 7b: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 81: 7f 1e                         jg      0xa1 <__JIT_ENTRY+0xa1>
    // 83: 49                            decl    %ecx
    // 84: 89 0d 00 00 00 00             movl    %ecx, 0x0
    // 00000086:  IMAGE_REL_I386_DIR32 _PySuper_Type
    // 8a: 75 15                         jne     0xa1 <__JIT_ENTRY+0xa1>
    // 8c: 68 00 00 00 00                pushl   $0x0
    // 0000008d:  IMAGE_REL_I386_DIR32 _PySuper_Type
    // 91: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 95: e8 00 00 00 00                calll   0x9a <__JIT_ENTRY+0x9a>
    // 00000096:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 9a: 8b 44 24 04                   movl    0x4(%esp), %eax
    // 9e: 83 c4 04                      addl    $0x4, %esp
    // a1: 8b 4d 00                      movl    (%ebp), %ecx
    // a4: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // aa: 7f 13                         jg      0xbf <__JIT_ENTRY+0xbf>
    // ac: 49                            decl    %ecx
    // ad: 89 4d 00                      movl    %ecx, (%ebp)
    // b0: 75 0d                         jne     0xbf <__JIT_ENTRY+0xbf>
    // b2: 55                            pushl   %ebp
    // b3: 89 c5                         movl    %eax, %ebp
    // b5: e8 00 00 00 00                calll   0xba <__JIT_ENTRY+0xba>
    // 000000b6:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // ba: 89 e8                         movl    %ebp, %eax
    // bc: 83 c4 04                      addl    $0x4, %esp
    // bf: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // c3: 8b 11                         movl    (%ecx), %edx
    // c5: 81 fa ff ff ff 3f             cmpl    $0x3fffffff, %edx       # imm = 0x3FFFFFFF
    // cb: 7f 12                         jg      0xdf <__JIT_ENTRY+0xdf>
    // cd: 4a                            decl    %edx
    // ce: 89 11                         movl    %edx, (%ecx)
    // d0: 75 0d                         jne     0xdf <__JIT_ENTRY+0xdf>
    // d2: 51                            pushl   %ecx
    // d3: 89 c5                         movl    %eax, %ebp
    // d5: e8 00 00 00 00                calll   0xda <__JIT_ENTRY+0xda>
    // 000000d6:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // da: 89 e8                         movl    %ebp, %eax
    // dc: 83 c4 04                      addl    $0x4, %esp
    // df: 85 c0                         testl   %eax, %eax
    // e1: 74 1e                         je      0x101 <__JIT_ENTRY+0x101>
    // e3: 89 46 f4                      movl    %eax, -0xc(%esi)
    // e6: 83 c6 f8                      addl    $-0x8, %esi
    // e9: 89 5c 24 24                   movl    %ebx, 0x24(%esp)
    // ed: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // f1: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // f5: 83 c4 08                      addl    $0x8, %esp
    // f8: 5e                            popl    %esi
    // f9: 5f                            popl    %edi
    // fa: 5b                            popl    %ebx
    // fb: 5d                            popl    %ebp
    // fc: e9 00 00 00 00                jmp     0x101 <__JIT_ENTRY+0x101>
    // 000000fd:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 101: 83 c6 f4                      addl    $-0xc, %esi
    // 104: 89 5c 24 24                   movl    %ebx, 0x24(%esp)
    // 108: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 10c: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // 110: 83 c4 08                      addl    $0x8, %esp
    // 113: 5e                            popl    %esi
    // 114: 5f                            popl    %edi
    // 115: 5b                            popl    %ebx
    // 116: 5d                            popl    %ebp
    // 117: e9 00 00 00 00                jmp     0x11c <__JIT_ENTRY+0x11c>
    // 00000118:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[284] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x5c, 0x24, 0x24, 0x8b, 0x44, 0x24, 0x20, 0x8b,
        0x7c, 0x24, 0x1c, 0x81, 0x78, 0xf4, 0x00, 0x00,
        0x00, 0x00, 0x75, 0x0c, 0x8b, 0x68, 0xf8, 0x8b,
        0x4d, 0x04, 0x83, 0x79, 0x54, 0x00, 0x78, 0x18,
        0x89, 0x5c, 0x24, 0x24, 0x89, 0x44, 0x24, 0x20,
        0x89, 0x7c, 0x24, 0x1c, 0x83, 0xc4, 0x08, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x70, 0xfc, 0x8b, 0x0f, 0x8b, 0x49, 0x10,
        0xba, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe2, 0xfc,
        0xff, 0x00, 0x00, 0x8b, 0x4c, 0x11, 0x0c, 0x89,
        0x47, 0x20, 0x6a, 0x00, 0x51, 0x89, 0x74, 0x24,
        0x0c, 0x56, 0x55, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x10, 0x8b, 0x77, 0x20, 0xc7, 0x47,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x1e, 0x49, 0x89, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x75, 0x15, 0x68, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x44, 0x24, 0x04, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x44, 0x24, 0x04, 0x83, 0xc4,
        0x04, 0x8b, 0x4d, 0x00, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x13, 0x49, 0x89, 0x4d, 0x00,
        0x75, 0x0d, 0x55, 0x89, 0xc5, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xe8, 0x83, 0xc4, 0x04, 0x8b,
        0x4c, 0x24, 0x04, 0x8b, 0x11, 0x81, 0xfa, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x12, 0x4a, 0x89, 0x11,
        0x75, 0x0d, 0x51, 0x89, 0xc5, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xe8, 0x83, 0xc4, 0x04, 0x85,
        0xc0, 0x74, 0x1e, 0x89, 0x46, 0xf4, 0x83, 0xc6,
        0xf8, 0x89, 0x5c, 0x24, 0x24, 0x89, 0x74, 0x24,
        0x20, 0x89, 0x7c, 0x24, 0x1c, 0x83, 0xc4, 0x08,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc6, 0xf4, 0x89, 0x5c, 0x24, 0x24,
        0x89, 0x7c, 0x24, 0x1c, 0x89, 0x74, 0x24, 0x20,
        0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x16, (uintptr_t)&PySuper_Type);
    patch_x86_64_32rx(code + 0x3c, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32(code + 0x49, instruction->oparg);
    patch_x86_64_32rx(code + 0x64, (uintptr_t)&_PySuper_Lookup + -0x4);
    patch_32(code + 0x77, (uintptr_t)&PySuper_Type);
    patch_32(code + 0x86, (uintptr_t)&PySuper_Type);
    patch_32(code + 0x8d, (uintptr_t)&PySuper_Type);
    patch_x86_64_32rx(code + 0x96, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xb6, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xd6, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xfd, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x118, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_SUPER_ATTR_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SUPER_ATTR_METHOD.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 0c                      subl    $0xc, %esp
    // 7: 8b 7c 24 28                   movl    0x28(%esp), %edi
    // b: 8b 44 24 24                   movl    0x24(%esp), %eax
    // f: 8b 74 24 20                   movl    0x20(%esp), %esi
    // 13: 81 78 f4 00 00 00 00          cmpl    $0x0, -0xc(%eax)
    // 00000016:  IMAGE_REL_I386_DIR32 _PySuper_Type
    // 1a: 75 0c                         jne     0x28 <__JIT_ENTRY+0x28>
    // 1c: 8b 58 f8                      movl    -0x8(%eax), %ebx
    // 1f: 8b 4b 04                      movl    0x4(%ebx), %ecx
    // 22: 83 79 54 00                   cmpl    $0x0, 0x54(%ecx)
    // 26: 78 18                         js      0x40 <__JIT_ENTRY+0x40>
    // 28: 89 7c 24 28                   movl    %edi, 0x28(%esp)
    // 2c: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // 30: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // 34: 83 c4 0c                      addl    $0xc, %esp
    // 37: 5e                            popl    %esi
    // 38: 5f                            popl    %edi
    // 39: 5b                            popl    %ebx
    // 3a: 5d                            popl    %ebp
    // 3b: e9 00 00 00 00                jmp     0x40 <__JIT_ENTRY+0x40>
    // 0000003c:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 40: 8b 68 fc                      movl    -0x4(%eax), %ebp
    // 43: 8b 0e                         movl    (%esi), %ecx
    // 45: 8b 49 10                      movl    0x10(%ecx), %ecx
    // 48: ba 00 00 00 00                movl    $0x0, %edx
    // 00000049:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 4d: 81 e2 fc ff 00 00             andl    $0xfffc, %edx           # imm = 0xFFFC
    // 53: 8b 4c 11 0c                   movl    0xc(%ecx,%edx), %ecx
    // 57: c7 44 24 08 00 00 00 00       movl    $0x0, 0x8(%esp)
    // 5f: 89 46 20                      movl    %eax, 0x20(%esi)
    // 62: 8b 45 04                      movl    0x4(%ebp), %eax
    // 65: 31 d2                         xorl    %edx, %edx
    // 67: 81 78 48 00 00 00 00          cmpl    $0x0, 0x48(%eax)
    // 0000006a:  IMAGE_REL_I386_DIR32 _PyObject_GenericGetAttr
    // 6e: 8d 44 24 08                   leal    0x8(%esp), %eax
    // 72: 0f 45 c2                      cmovnel %edx, %eax
    // 75: 50                            pushl   %eax
    // 76: 51                            pushl   %ecx
    // 77: 89 6c 24 08                   movl    %ebp, 0x8(%esp)
    // 7b: 55                            pushl   %ebp
    // 7c: 53                            pushl   %ebx
    // 7d: e8 00 00 00 00                calll   0x82 <__JIT_ENTRY+0x82>
    // 0000007e:  IMAGE_REL_I386_REL32 __PySuper_Lookup
    // 82: 83 c4 10                      addl    $0x10, %esp
    // 85: 8b 6e 20                      movl    0x20(%esi), %ebp
    // 88: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 8f: 85 c0                         testl   %eax, %eax
    // 91: 74 1d                         je      0xb0 <__JIT_ENTRY+0xb0>
    // 93: 83 7c 24 08 00                cmpl    $0x0, 0x8(%esp)
    // 98: 74 2e                         je      0xc8 <__JIT_ENTRY+0xc8>
    // 9a: 8b 14 24                      movl    (%esp), %edx
    // 9d: 8b 0d 00 00 00 00             movl    0x0, %ecx
    // 0000009f:  IMAGE_REL_I386_DIR32 _PySuper_Type
    // a3: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // a9: 7e 5f                         jle     0x10a <__JIT_ENTRY+0x10a>
    // ab: e9 80 00 00 00                jmp     0x130 <__JIT_ENTRY+0x130>
    // b0: 89 7c 24 28                   movl    %edi, 0x28(%esp)
    // b4: 89 6c 24 24                   movl    %ebp, 0x24(%esp)
    // b8: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // bc: 83 c4 0c                      addl    $0xc, %esp
    // bf: 5e                            popl    %esi
    // c0: 5f                            popl    %edi
    // c1: 5b                            popl    %ebx
    // c2: 5d                            popl    %ebp
    // c3: e9 00 00 00 00                jmp     0xc8 <__JIT_ENTRY+0xc8>
    // 000000c4:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // c8: 83 c5 fc                      addl    $-0x4, %ebp
    // cb: 89 6e 20                      movl    %ebp, 0x20(%esi)
    // ce: 8b 14 24                      movl    (%esp), %edx
    // d1: 8b 0a                         movl    (%edx), %ecx
    // d3: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // d9: 7f 12                         jg      0xed <__JIT_ENTRY+0xed>
    // db: 49                            decl    %ecx
    // dc: 89 0a                         movl    %ecx, (%edx)
    // de: 75 0d                         jne     0xed <__JIT_ENTRY+0xed>
    // e0: 52                            pushl   %edx
    // e1: 89 c5                         movl    %eax, %ebp
    // e3: e8 00 00 00 00                calll   0xe8 <__JIT_ENTRY+0xe8>
    // 000000e4:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // e8: 89 e8                         movl    %ebp, %eax
    // ea: 83 c4 04                      addl    $0x4, %esp
    // ed: 8b 6e 20                      movl    0x20(%esi), %ebp
    // f0: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // f7: 83 c5 04                      addl    $0x4, %ebp
    // fa: 31 d2                         xorl    %edx, %edx
    // fc: 8b 0d 00 00 00 00             movl    0x0, %ecx
    // 000000fe:  IMAGE_REL_I386_DIR32 _PySuper_Type
    // 102: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 108: 7f 26                         jg      0x130 <__JIT_ENTRY+0x130>
    // 10a: 49                            decl    %ecx
    // 10b: 89 0d 00 00 00 00             movl    %ecx, 0x0
    // 0000010d:  IMAGE_REL_I386_DIR32 _PySuper_Type
    // 111: 75 1d                         jne     0x130 <__JIT_ENTRY+0x130>
    // 113: 68 00 00 00 00                pushl   $0x0
    // 00000114:  IMAGE_REL_I386_DIR32 _PySuper_Type
    // 118: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 11c: 89 54 24 04                   movl    %edx, 0x4(%esp)
    // 120: e8 00 00 00 00                calll   0x125 <__JIT_ENTRY+0x125>
    // 00000121:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 125: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 129: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 12d: 83 c4 04                      addl    $0x4, %esp
    // 130: 8b 0b                         movl    (%ebx), %ecx
    // 132: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 138: 7f 1a                         jg      0x154 <__JIT_ENTRY+0x154>
    // 13a: 49                            decl    %ecx
    // 13b: 89 0b                         movl    %ecx, (%ebx)
    // 13d: 75 15                         jne     0x154 <__JIT_ENTRY+0x154>
    // 13f: 53                            pushl   %ebx
    // 140: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 144: 89 d3                         movl    %edx, %ebx
    // 146: e8 00 00 00 00                calll   0x14b <__JIT_ENTRY+0x14b>
    // 00000147:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 14b: 89 da                         movl    %ebx, %edx
    // 14d: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 151: 83 c4 04                      addl    $0x4, %esp
    // 154: 89 45 f4                      movl    %eax, -0xc(%ebp)
    // 157: 89 55 f8                      movl    %edx, -0x8(%ebp)
    // 15a: 83 c5 fc                      addl    $-0x4, %ebp
    // 15d: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // 161: 89 6c 24 24                   movl    %ebp, 0x24(%esp)
    // 165: 89 7c 24 28                   movl    %edi, 0x28(%esp)
    // 169: 83 c4 0c                      addl    $0xc, %esp
    // 16c: 5e                            popl    %esi
    // 16d: 5f                            popl    %edi
    // 16e: 5b                            popl    %ebx
    // 16f: 5d                            popl    %ebp
    // 170: e9 00 00 00 00                jmp     0x175 <__JIT_ENTRY+0x175>
    // 00000171:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[368] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x0c, 0x8b,
        0x7c, 0x24, 0x28, 0x8b, 0x44, 0x24, 0x24, 0x8b,
        0x74, 0x24, 0x20, 0x81, 0x78, 0xf4, 0x00, 0x00,
        0x00, 0x00, 0x75, 0x0c, 0x8b, 0x58, 0xf8, 0x8b,
        0x4b, 0x04, 0x83, 0x79, 0x54, 0x00, 0x78, 0x18,
        0x89, 0x7c, 0x24, 0x28, 0x89, 0x44, 0x24, 0x24,
        0x89, 0x74, 0x24, 0x20, 0x83, 0xc4, 0x0c, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x68, 0xfc, 0x8b, 0x0e, 0x8b, 0x49, 0x10,
        0xba, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe2, 0xfc,
        0xff, 0x00, 0x00, 0x8b, 0x4c, 0x11, 0x0c, 0xc7,
        0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x89,
        0x46, 0x20, 0x8b, 0x45, 0x04, 0x31, 0xd2, 0x81,
        0x78, 0x48, 0x00, 0x00, 0x00, 0x00, 0x8d, 0x44,
        0x24, 0x08, 0x0f, 0x45, 0xc2, 0x50, 0x51, 0x89,
        0x6c, 0x24, 0x08, 0x55, 0x53, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x10, 0x8b, 0x6e, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x85,
        0xc0, 0x74, 0x1d, 0x83, 0x7c, 0x24, 0x08, 0x00,
        0x74, 0x2e, 0x8b, 0x14, 0x24, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7e, 0x5f, 0xe9, 0x80, 0x00, 0x00, 0x00,
        0x89, 0x7c, 0x24, 0x28, 0x89, 0x6c, 0x24, 0x24,
        0x89, 0x74, 0x24, 0x20, 0x83, 0xc4, 0x0c, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc5, 0xfc, 0x89, 0x6e, 0x20, 0x8b, 0x14,
        0x24, 0x8b, 0x0a, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x12, 0x49, 0x89, 0x0a, 0x75, 0x0d,
        0x52, 0x89, 0xc5, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xe8, 0x83, 0xc4, 0x04, 0x8b, 0x6e, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc5, 0x04, 0x31, 0xd2, 0x8b, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x26, 0x49, 0x89, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x75, 0x1d, 0x68, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x44, 0x24, 0x08, 0x89, 0x54, 0x24, 0x04,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x54, 0x24,
        0x04, 0x8b, 0x44, 0x24, 0x08, 0x83, 0xc4, 0x04,
        0x8b, 0x0b, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x1a, 0x49, 0x89, 0x0b, 0x75, 0x15, 0x53,
        0x89, 0x44, 0x24, 0x08, 0x89, 0xd3, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xda, 0x8b, 0x44, 0x24,
        0x08, 0x83, 0xc4, 0x04, 0x89, 0x45, 0xf4, 0x89,
        0x55, 0xf8, 0x83, 0xc5, 0xfc, 0x89, 0x74, 0x24,
        0x20, 0x89, 0x6c, 0x24, 0x24, 0x89, 0x7c, 0x24,
        0x28, 0x83, 0xc4, 0x0c, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x16, (uintptr_t)&PySuper_Type);
    patch_x86_64_32rx(code + 0x3c, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32(code + 0x49, instruction->oparg);
    patch_32(code + 0x6a, (uintptr_t)&PyObject_GenericGetAttr);
    patch_x86_64_32rx(code + 0x7e, (uintptr_t)&_PySuper_Lookup + -0x4);
    patch_32(code + 0x9f, (uintptr_t)&PySuper_Type);
    patch_x86_64_32rx(code + 0xc4, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0xe4, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0xfe, (uintptr_t)&PySuper_Type);
    patch_32(code + 0x10d, (uintptr_t)&PySuper_Type);
    patch_32(code + 0x114, (uintptr_t)&PySuper_Type);
    patch_x86_64_32rx(code + 0x121, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x147, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__MAKE_CALLARGS_A_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAKE_CALLARGS_A_TUPLE.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 4c 24 18                   movl    0x18(%esp), %ecx
    // c: 8b 74 24 14                   movl    0x14(%esp), %esi
    // 10: 8b 69 f8                      movl    -0x8(%ecx), %ebp
    // 13: 8b 59 fc                      movl    -0x4(%ecx), %ebx
    // 16: 81 7d 04 00 00 00 00          cmpl    $0x0, 0x4(%ebp)
    // 00000019:  IMAGE_REL_I386_DIR32 _PyTuple_Type
    // 1d: 74 6c                         je      0x8b <__JIT_ENTRY+0x8b>
    // 1f: 8b 41 f0                      movl    -0x10(%ecx), %eax
    // 22: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 25: 55                            pushl   %ebp
    // 26: 50                            pushl   %eax
    // 27: 57                            pushl   %edi
    // 28: e8 00 00 00 00                calll   0x2d <__JIT_ENTRY+0x2d>
    // 00000029:  IMAGE_REL_I386_REL32 __Py_Check_ArgsIterable
    // 2d: 83 c4 0c                      addl    $0xc, %esp
    // 30: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 33: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 3a: 85 c0                         testl   %eax, %eax
    // 3c: 78 68                         js      0xa6 <__JIT_ENTRY+0xa6>
    // 3e: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 41: 55                            pushl   %ebp
    // 42: e8 00 00 00 00                calll   0x47 <__JIT_ENTRY+0x47>
    // 00000043:  IMAGE_REL_I386_REL32 _PySequence_Tuple
    // 47: 83 c4 04                      addl    $0x4, %esp
    // 4a: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 4d: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 54: 85 c0                         testl   %eax, %eax
    // 56: 74 4e                         je      0xa6 <__JIT_ENTRY+0xa6>
    // 58: 83 c1 f8                      addl    $-0x8, %ecx
    // 5b: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 5e: 8b 4d 00                      movl    (%ebp), %ecx
    // 61: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 67: 7f 13                         jg      0x7c <__JIT_ENTRY+0x7c>
    // 69: 49                            decl    %ecx
    // 6a: 89 4d 00                      movl    %ecx, (%ebp)
    // 6d: 75 0d                         jne     0x7c <__JIT_ENTRY+0x7c>
    // 6f: 55                            pushl   %ebp
    // 70: 89 c5                         movl    %eax, %ebp
    // 72: e8 00 00 00 00                calll   0x77 <__JIT_ENTRY+0x77>
    // 00000073:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 77: 89 e8                         movl    %ebp, %eax
    // 79: 83 c4 04                      addl    $0x4, %esp
    // 7c: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 7f: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 86: 83 c1 08                      addl    $0x8, %ecx
    // 89: 89 c5                         movl    %eax, %ebp
    // 8b: 89 69 f8                      movl    %ebp, -0x8(%ecx)
    // 8e: 89 59 fc                      movl    %ebx, -0x4(%ecx)
    // 91: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 95: 89 4c 24 18                   movl    %ecx, 0x18(%esp)
    // 99: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 9d: 5e                            popl    %esi
    // 9e: 5f                            popl    %edi
    // 9f: 5b                            popl    %ebx
    // a0: 5d                            popl    %ebp
    // a1: e9 00 00 00 00                jmp     0xa6 <__JIT_ENTRY+0xa6>
    // 000000a2:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // a6: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // aa: 89 4c 24 18                   movl    %ecx, 0x18(%esp)
    // ae: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // b2: 5e                            popl    %esi
    // b3: 5f                            popl    %edi
    // b4: 5b                            popl    %ebx
    // b5: 5d                            popl    %ebp
    // b6: e9 00 00 00 00                jmp     0xbb <__JIT_ENTRY+0xbb>
    // 000000b7:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[187] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x4c, 0x24, 0x18, 0x8b, 0x74, 0x24, 0x14,
        0x8b, 0x69, 0xf8, 0x8b, 0x59, 0xfc, 0x81, 0x7d,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x74, 0x6c, 0x8b,
        0x41, 0xf0, 0x89, 0x4e, 0x20, 0x55, 0x50, 0x57,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x0c,
        0x8b, 0x4e, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x78, 0x68, 0x89, 0x4e,
        0x20, 0x55, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x8b, 0x4e, 0x20, 0xc7, 0x46, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x4e,
        0x83, 0xc1, 0xf8, 0x89, 0x4e, 0x20, 0x8b, 0x4d,
        0x00, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x13, 0x49, 0x89, 0x4d, 0x00, 0x75, 0x0d, 0x55,
        0x89, 0xc5, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xe8, 0x83, 0xc4, 0x04, 0x8b, 0x4e, 0x20, 0xc7,
        0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc1,
        0x08, 0x89, 0xc5, 0x89, 0x69, 0xf8, 0x89, 0x59,
        0xfc, 0x89, 0x7c, 0x24, 0x1c, 0x89, 0x4c, 0x24,
        0x18, 0x89, 0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x7c,
        0x24, 0x1c, 0x89, 0x4c, 0x24, 0x18, 0x89, 0x74,
        0x24, 0x14, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x19, (uintptr_t)&PyTuple_Type);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)&_Py_Check_ArgsIterable + -0x4);
    patch_x86_64_32rx(code + 0x43, (uintptr_t)&PySequence_Tuple + -0x4);
    patch_x86_64_32rx(code + 0x73, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xa2, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xb7, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__MAKE_CELL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAKE_CELL.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 5c 24 18                   movl    0x18(%esp), %ebx
    // c: 8b 74 24 14                   movl    0x14(%esp), %esi
    // 10: b8 00 00 00 00                movl    $0x0, %eax
    // 00000011:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 15: 0f b7 e8                      movzwl  %ax, %ebp
    // 18: ff 74 ae 28                   pushl   0x28(%esi,%ebp,4)
    // 1c: e8 00 00 00 00                calll   0x21 <__JIT_ENTRY+0x21>
    // 0000001d:  IMAGE_REL_I386_REL32 _PyCell_New
    // 21: 83 c4 04                      addl    $0x4, %esp
    // 24: 85 c0                         testl   %eax, %eax
    // 26: 74 45                         je      0x6d <__JIT_ENTRY+0x6d>
    // 28: 8b 4c ae 28                   movl    0x28(%esi,%ebp,4), %ecx
    // 2c: 89 44 ae 28                   movl    %eax, 0x28(%esi,%ebp,4)
    // 30: 89 5e 20                      movl    %ebx, 0x20(%esi)
    // 33: 85 c9                         testl   %ecx, %ecx
    // 35: 74 17                         je      0x4e <__JIT_ENTRY+0x4e>
    // 37: 8b 01                         movl    (%ecx), %eax
    // 39: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 3e: 7f 0e                         jg      0x4e <__JIT_ENTRY+0x4e>
    // 40: 48                            decl    %eax
    // 41: 89 01                         movl    %eax, (%ecx)
    // 43: 75 09                         jne     0x4e <__JIT_ENTRY+0x4e>
    // 45: 51                            pushl   %ecx
    // 46: e8 00 00 00 00                calll   0x4b <__JIT_ENTRY+0x4b>
    // 00000047:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 4b: 83 c4 04                      addl    $0x4, %esp
    // 4e: 8b 46 20                      movl    0x20(%esi), %eax
    // 51: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 58: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 5c: 89 44 24 18                   movl    %eax, 0x18(%esp)
    // 60: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 64: 5e                            popl    %esi
    // 65: 5f                            popl    %edi
    // 66: 5b                            popl    %ebx
    // 67: 5d                            popl    %ebp
    // 68: e9 00 00 00 00                jmp     0x6d <__JIT_ENTRY+0x6d>
    // 00000069:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 6d: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 71: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 75: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 79: 5e                            popl    %esi
    // 7a: 5f                            popl    %edi
    // 7b: 5b                            popl    %ebx
    // 7c: 5d                            popl    %ebp
    // 7d: e9 00 00 00 00                jmp     0x82 <__JIT_ENTRY+0x82>
    // 0000007e:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[130] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x5c, 0x24, 0x18, 0x8b, 0x74, 0x24, 0x14,
        0xb8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8,
        0xff, 0x74, 0xae, 0x28, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x04, 0x85, 0xc0, 0x74, 0x45,
        0x8b, 0x4c, 0xae, 0x28, 0x89, 0x44, 0xae, 0x28,
        0x89, 0x5e, 0x20, 0x85, 0xc9, 0x74, 0x17, 0x8b,
        0x01, 0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e,
        0x48, 0x89, 0x01, 0x75, 0x09, 0x51, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b, 0x46,
        0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x7c, 0x24, 0x1c, 0x89, 0x44, 0x24, 0x18,
        0x89, 0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24,
        0x1c, 0x89, 0x5c, 0x24, 0x18, 0x89, 0x74, 0x24,
        0x14, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x11, instruction->oparg);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)&PyCell_New + -0x4);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x69, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x7e, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__MAKE_FUNCTION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAKE_FUNCTION.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 9: 89 04 24                      movl    %eax, (%esp)
    // c: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 10: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 14: 8b 68 fc                      movl    -0x4(%eax), %ebp
    // 17: 89 47 20                      movl    %eax, 0x20(%edi)
    // 1a: ff 77 0c                      pushl   0xc(%edi)
    // 1d: 55                            pushl   %ebp
    // 1e: e8 00 00 00 00                calll   0x23 <__JIT_ENTRY+0x23>
    // 0000001f:  IMAGE_REL_I386_REL32 _PyFunction_New
    // 23: 83 c4 08                      addl    $0x8, %esp
    // 26: 83 47 20 fc                   addl    $-0x4, 0x20(%edi)
    // 2a: 89 c6                         movl    %eax, %esi
    // 2c: 8b 45 00                      movl    (%ebp), %eax
    // 2f: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 34: 7f 06                         jg      0x3c <__JIT_ENTRY+0x3c>
    // 36: 48                            decl    %eax
    // 37: 89 45 00                      movl    %eax, (%ebp)
    // 3a: 74 3a                         je      0x76 <__JIT_ENTRY+0x76>
    // 3c: 8b 5f 20                      movl    0x20(%edi), %ebx
    // 3f: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 46: 85 f6                         testl   %esi, %esi
    // 48: 74 43                         je      0x8d <__JIT_ENTRY+0x8d>
    // 4a: ff 75 44                      pushl   0x44(%ebp)
    // 4d: 56                            pushl   %esi
    // 4e: e8 00 00 00 00                calll   0x53 <__JIT_ENTRY+0x53>
    // 0000004f:  IMAGE_REL_I386_REL32 __PyFunction_SetVersion
    // 53: 83 c4 08                      addl    $0x8, %esp
    // 56: 89 33                         movl    %esi, (%ebx)
    // 58: 83 c3 04                      addl    $0x4, %ebx
    // 5b: 8b 04 24                      movl    (%esp), %eax
    // 5e: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 62: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 66: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 6a: 83 c4 04                      addl    $0x4, %esp
    // 6d: 5e                            popl    %esi
    // 6e: 5f                            popl    %edi
    // 6f: 5b                            popl    %ebx
    // 70: 5d                            popl    %ebp
    // 71: e9 00 00 00 00                jmp     0x76 <__JIT_ENTRY+0x76>
    // 00000072:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 76: 55                            pushl   %ebp
    // 77: e8 00 00 00 00                calll   0x7c <__JIT_ENTRY+0x7c>
    // 00000078:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 7c: 83 c4 04                      addl    $0x4, %esp
    // 7f: 8b 5f 20                      movl    0x20(%edi), %ebx
    // 82: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 89: 85 f6                         testl   %esi, %esi
    // 8b: 75 bd                         jne     0x4a <__JIT_ENTRY+0x4a>
    // 8d: 8b 04 24                      movl    (%esp), %eax
    // 90: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 94: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 98: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 9c: 83 c4 04                      addl    $0x4, %esp
    // 9f: 5e                            popl    %esi
    // a0: 5f                            popl    %edi
    // a1: 5b                            popl    %ebx
    // a2: 5d                            popl    %ebp
    // a3: e9 00 00 00 00                jmp     0xa8 <__JIT_ENTRY+0xa8>
    // 000000a4:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[168] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x44, 0x24,
        0x20, 0x89, 0x04, 0x24, 0x8b, 0x7c, 0x24, 0x18,
        0x8b, 0x44, 0x24, 0x1c, 0x8b, 0x68, 0xfc, 0x89,
        0x47, 0x20, 0xff, 0x77, 0x0c, 0x55, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x08, 0x83, 0x47,
        0x20, 0xfc, 0x89, 0xc6, 0x8b, 0x45, 0x00, 0x3d,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x06, 0x48, 0x89,
        0x45, 0x00, 0x74, 0x3a, 0x8b, 0x5f, 0x20, 0xc7,
        0x47, 0x20, 0x00, 0x00, 0x00, 0x00, 0x85, 0xf6,
        0x74, 0x43, 0xff, 0x75, 0x44, 0x56, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x08, 0x89, 0x33,
        0x83, 0xc3, 0x04, 0x8b, 0x04, 0x24, 0x89, 0x44,
        0x24, 0x20, 0x89, 0x5c, 0x24, 0x1c, 0x89, 0x7c,
        0x24, 0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x55, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b,
        0x5f, 0x20, 0xc7, 0x47, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xf6, 0x75, 0xbd, 0x8b, 0x04, 0x24,
        0x89, 0x44, 0x24, 0x20, 0x89, 0x5c, 0x24, 0x1c,
        0x89, 0x7c, 0x24, 0x18, 0x83, 0xc4, 0x04, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)&PyFunction_New + -0x4);
    patch_x86_64_32rx(code + 0x4f, (uintptr_t)&_PyFunction_SetVersion + -0x4);
    patch_x86_64_32rx(code + 0x72, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x78, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xa4, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__MAKE_WARM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAKE_WARM.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: c6 05 13 00 00 00 01          movb    $0x1, 0x13
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_EXECUTOR
    // 14: 8b 72 08                      movl    0x8(%edx), %esi
    // 17: ff 8e d0 bb 01 00             decl    0x1bbd0(%esi)
    // 1d: 75 08                         jne     0x27 <__JIT_ENTRY+0x27>
    // 1f: f0                            lock
    // 20: 81 4a 0c 80 00 00 00          orl     $0x80, 0xc(%edx)
    // 27: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2b: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 2f: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 33: 5e                            popl    %esi
    // 34: e9 00 00 00 00                jmp     0x39 <__JIT_ENTRY+0x39>
    // 00000035:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[52] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0xc6, 0x05, 0x13,
        0x00, 0x00, 0x00, 0x01, 0x8b, 0x72, 0x08, 0xff,
        0x8e, 0xd0, 0xbb, 0x01, 0x00, 0x75, 0x08, 0xf0,
        0x81, 0x4a, 0x0c, 0x80, 0x00, 0x00, 0x00, 0x89,
        0x54, 0x24, 0x10, 0x89, 0x4c, 0x24, 0x0c, 0x89,
        0x44, 0x24, 0x08, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, (uintptr_t)executor + 0x13);
}

void
emit__MAP_ADD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAP_ADD.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 10: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000011:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 15: 0f b7 c9                      movzwl  %cx, %ecx
    // 18: 8b 50 f8                      movl    -0x8(%eax), %edx
    // 1b: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 1e: bd fe ff ff ff                movl    $0xfffffffe, %ebp       # imm = 0xFFFFFFFE
    // 23: 29 cd                         subl    %ecx, %ebp
    // 25: 8b 0c a8                      movl    (%eax,%ebp,4), %ecx
    // 28: 89 46 20                      movl    %eax, 0x20(%esi)
    // 2b: 53                            pushl   %ebx
    // 2c: 52                            pushl   %edx
    // 2d: 51                            pushl   %ecx
    // 2e: e8 00 00 00 00                calll   0x33 <__JIT_ENTRY+0x33>
    // 0000002f:  IMAGE_REL_I386_REL32 __PyDict_SetItem_Take2
    // 33: 83 c4 0c                      addl    $0xc, %esp
    // 36: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 39: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 40: 83 c1 f8                      addl    $-0x8, %ecx
    // 43: 85 c0                         testl   %eax, %eax
    // 45: 74 15                         je      0x5c <__JIT_ENTRY+0x5c>
    // 47: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 4b: 89 4c 24 18                   movl    %ecx, 0x18(%esp)
    // 4f: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 53: 5e                            popl    %esi
    // 54: 5f                            popl    %edi
    // 55: 5b                            popl    %ebx
    // 56: 5d                            popl    %ebp
    // 57: e9 00 00 00 00                jmp     0x5c <__JIT_ENTRY+0x5c>
    // 00000058:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // 5c: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 60: 89 4c 24 18                   movl    %ecx, 0x18(%esp)
    // 64: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 68: 5e                            popl    %esi
    // 69: 5f                            popl    %edi
    // 6a: 5b                            popl    %ebx
    // 6b: 5d                            popl    %ebp
    // 6c: e9 00 00 00 00                jmp     0x71 <__JIT_ENTRY+0x71>
    // 0000006d:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[108] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x18,
        0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9,
        0x8b, 0x50, 0xf8, 0x8b, 0x58, 0xfc, 0xbd, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xcd, 0x8b, 0x0c, 0xa8,
        0x89, 0x46, 0x20, 0x53, 0x52, 0x51, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b, 0x4e,
        0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc1, 0xf8, 0x85, 0xc0, 0x74, 0x15, 0x89,
        0x7c, 0x24, 0x1c, 0x89, 0x4c, 0x24, 0x18, 0x89,
        0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x1c,
        0x89, 0x4c, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14,
        0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x11, instruction->oparg);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)&_PyDict_SetItem_Take2 + -0x4);
    patch_x86_64_32rx(code + 0x58, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__MATCH_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MATCH_CLASS.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 0c                      subl    $0xc, %esp
    // 7: 8b 54 24 28                   movl    0x28(%esp), %edx
    // b: 8b 5c 24 20                   movl    0x20(%esp), %ebx
    // f: 8b 44 24 24                   movl    0x24(%esp), %eax
    // 13: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000014:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 18: 0f b7 c9                      movzwl  %cx, %ecx
    // 1b: 8b 68 fc                      movl    -0x4(%eax), %ebp
    // 1e: 8b 78 f4                      movl    -0xc(%eax), %edi
    // 21: 8b 70 f8                      movl    -0x8(%eax), %esi
    // 24: 89 43 20                      movl    %eax, 0x20(%ebx)
    // 27: 89 6c 24 04                   movl    %ebp, 0x4(%esp)
    // 2b: 55                            pushl   %ebp
    // 2c: 51                            pushl   %ecx
    // 2d: 56                            pushl   %esi
    // 2e: 57                            pushl   %edi
    // 2f: 89 54 24 18                   movl    %edx, 0x18(%esp)
    // 33: 52                            pushl   %edx
    // 34: e8 00 00 00 00                calll   0x39 <__JIT_ENTRY+0x39>
    // 00000035:  IMAGE_REL_I386_REL32 __PyEval_MatchClass
    // 39: 83 c4 14                      addl    $0x14, %esp
    // 3c: 8b 6b 20                      movl    0x20(%ebx), %ebp
    // 3f: 89 1c 24                      movl    %ebx, (%esp)
    // 42: c7 43 20 00 00 00 00          movl    $0x0, 0x20(%ebx)
    // 49: 8b 0f                         movl    (%edi), %ecx
    // 4b: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 51: 7f 05                         jg      0x58 <__JIT_ENTRY+0x58>
    // 53: 49                            decl    %ecx
    // 54: 89 0f                         movl    %ecx, (%edi)
    // 56: 74 1e                         je      0x76 <__JIT_ENTRY+0x76>
    // 58: 8b 0e                         movl    (%esi), %ecx
    // 5a: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 60: 7f 2b                         jg      0x8d <__JIT_ENTRY+0x8d>
    // 62: 49                            decl    %ecx
    // 63: 89 0e                         movl    %ecx, (%esi)
    // 65: 75 26                         jne     0x8d <__JIT_ENTRY+0x8d>
    // 67: 56                            pushl   %esi
    // 68: 89 c6                         movl    %eax, %esi
    // 6a: e8 00 00 00 00                calll   0x6f <__JIT_ENTRY+0x6f>
    // 0000006b:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 6f: 89 f0                         movl    %esi, %eax
    // 71: 83 c4 04                      addl    $0x4, %esp
    // 74: eb 17                         jmp     0x8d <__JIT_ENTRY+0x8d>
    // 76: 57                            pushl   %edi
    // 77: 89 c7                         movl    %eax, %edi
    // 79: e8 00 00 00 00                calll   0x7e <__JIT_ENTRY+0x7e>
    // 0000007a:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 7e: 89 f8                         movl    %edi, %eax
    // 80: 83 c4 04                      addl    $0x4, %esp
    // 83: 8b 0e                         movl    (%esi), %ecx
    // 85: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 8b: 7e d5                         jle     0x62 <__JIT_ENTRY+0x62>
    // 8d: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 91: 8b 0a                         movl    (%edx), %ecx
    // 93: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 99: 7f 05                         jg      0xa0 <__JIT_ENTRY+0xa0>
    // 9b: 49                            decl    %ecx
    // 9c: 89 0a                         movl    %ecx, (%edx)
    // 9e: 74 29                         je      0xc9 <__JIT_ENTRY+0xc9>
    // a0: 85 c0                         testl   %eax, %eax
    // a2: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // a6: 74 36                         je      0xde <__JIT_ENTRY+0xde>
    // a8: 89 45 f4                      movl    %eax, -0xc(%ebp)
    // ab: 83 c5 f8                      addl    $-0x8, %ebp
    // ae: 89 4c 24 28                   movl    %ecx, 0x28(%esp)
    // b2: 89 6c 24 24                   movl    %ebp, 0x24(%esp)
    // b6: 8b 04 24                      movl    (%esp), %eax
    // b9: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // bd: 83 c4 0c                      addl    $0xc, %esp
    // c0: 5e                            popl    %esi
    // c1: 5f                            popl    %edi
    // c2: 5b                            popl    %ebx
    // c3: 5d                            popl    %ebp
    // c4: e9 00 00 00 00                jmp     0xc9 <__JIT_ENTRY+0xc9>
    // 000000c5:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // c9: 52                            pushl   %edx
    // ca: 89 c6                         movl    %eax, %esi
    // cc: e8 00 00 00 00                calll   0xd1 <__JIT_ENTRY+0xd1>
    // 000000cd:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // d1: 89 f0                         movl    %esi, %eax
    // d3: 83 c4 04                      addl    $0x4, %esp
    // d6: 85 c0                         testl   %eax, %eax
    // d8: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // dc: 75 ca                         jne     0xa8 <__JIT_ENTRY+0xa8>
    // de: 8b 51 48                      movl    0x48(%ecx), %edx
    // e1: b8 00 00 00 00                movl    $0x0, %eax
    // 000000e2:  IMAGE_REL_I386_DIR32 __Py_NoneStruct
    // e6: 85 d2                         testl   %edx, %edx
    // e8: 74 be                         je      0xa8 <__JIT_ENTRY+0xa8>
    // ea: 83 7a 04 00                   cmpl    $0x0, 0x4(%edx)
    // ee: 74 b8                         je      0xa8 <__JIT_ENTRY+0xa8>
    // f0: 83 c5 f4                      addl    $-0xc, %ebp
    // f3: 89 4c 24 28                   movl    %ecx, 0x28(%esp)
    // f7: 8b 04 24                      movl    (%esp), %eax
    // fa: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // fe: 89 6c 24 24                   movl    %ebp, 0x24(%esp)
    // 102: 83 c4 0c                      addl    $0xc, %esp
    // 105: 5e                            popl    %esi
    // 106: 5f                            popl    %edi
    // 107: 5b                            popl    %ebx
    // 108: 5d                            popl    %ebp
    // 109: e9 00 00 00 00                jmp     0x10e <__JIT_ENTRY+0x10e>
    // 0000010a:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[270] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x0c, 0x8b,
        0x54, 0x24, 0x28, 0x8b, 0x5c, 0x24, 0x20, 0x8b,
        0x44, 0x24, 0x24, 0xb9, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xc9, 0x8b, 0x68, 0xfc, 0x8b, 0x78,
        0xf4, 0x8b, 0x70, 0xf8, 0x89, 0x43, 0x20, 0x89,
        0x6c, 0x24, 0x04, 0x55, 0x51, 0x56, 0x57, 0x89,
        0x54, 0x24, 0x18, 0x52, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x14, 0x8b, 0x6b, 0x20, 0x89,
        0x1c, 0x24, 0xc7, 0x43, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x0f, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x05, 0x49, 0x89, 0x0f, 0x74, 0x1e,
        0x8b, 0x0e, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x2b, 0x49, 0x89, 0x0e, 0x75, 0x26, 0x56,
        0x89, 0xc6, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xf0, 0x83, 0xc4, 0x04, 0xeb, 0x17, 0x57, 0x89,
        0xc7, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf8,
        0x83, 0xc4, 0x04, 0x8b, 0x0e, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7e, 0xd5, 0x8b, 0x54, 0x24,
        0x04, 0x8b, 0x0a, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x05, 0x49, 0x89, 0x0a, 0x74, 0x29,
        0x85, 0xc0, 0x8b, 0x4c, 0x24, 0x08, 0x74, 0x36,
        0x89, 0x45, 0xf4, 0x83, 0xc5, 0xf8, 0x89, 0x4c,
        0x24, 0x28, 0x89, 0x6c, 0x24, 0x24, 0x8b, 0x04,
        0x24, 0x89, 0x44, 0x24, 0x20, 0x83, 0xc4, 0x0c,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x52, 0x89, 0xc6, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xf0, 0x83, 0xc4, 0x04, 0x85, 0xc0,
        0x8b, 0x4c, 0x24, 0x08, 0x75, 0xca, 0x8b, 0x51,
        0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x85, 0xd2,
        0x74, 0xbe, 0x83, 0x7a, 0x04, 0x00, 0x74, 0xb8,
        0x83, 0xc5, 0xf4, 0x89, 0x4c, 0x24, 0x28, 0x8b,
        0x04, 0x24, 0x89, 0x44, 0x24, 0x20, 0x89, 0x6c,
        0x24, 0x24, 0x83, 0xc4, 0x0c, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, instruction->oparg);
    patch_x86_64_32rx(code + 0x35, (uintptr_t)&_PyEval_MatchClass + -0x4);
    patch_x86_64_32rx(code + 0x6b, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x7a, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xc5, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xcd, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0xe2, (uintptr_t)&_Py_NoneStruct);
    patch_x86_64_32rx(code + 0x10a, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__MATCH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MATCH_KEYS.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 44 24 10                   movl    0x10(%esp), %eax
    // e: 8b 48 f8                      movl    -0x8(%eax), %ecx
    // 11: 8b 50 fc                      movl    -0x4(%eax), %edx
    // 14: 89 46 20                      movl    %eax, 0x20(%esi)
    // 17: 52                            pushl   %edx
    // 18: 51                            pushl   %ecx
    // 19: 57                            pushl   %edi
    // 1a: e8 00 00 00 00                calll   0x1f <__JIT_ENTRY+0x1f>
    // 0000001b:  IMAGE_REL_I386_REL32 __PyEval_MatchKeys
    // 1f: 83 c4 0c                      addl    $0xc, %esp
    // 22: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 25: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 2c: 85 c0                         testl   %eax, %eax
    // 2e: 74 18                         je      0x48 <__JIT_ENTRY+0x48>
    // 30: 89 01                         movl    %eax, (%ecx)
    // 32: 83 c1 04                      addl    $0x4, %ecx
    // 35: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 39: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 3d: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 41: 5e                            popl    %esi
    // 42: 5f                            popl    %edi
    // 43: e9 00 00 00 00                jmp     0x48 <__JIT_ENTRY+0x48>
    // 00000044:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 48: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 4c: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 50: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 54: 5e                            popl    %esi
    // 55: 5f                            popl    %edi
    // 56: e9 00 00 00 00                jmp     0x5b <__JIT_ENTRY+0x5b>
    // 00000057:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[91] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x48,
        0xf8, 0x8b, 0x50, 0xfc, 0x89, 0x46, 0x20, 0x52,
        0x51, 0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x0c, 0x8b, 0x4e, 0x20, 0xc7, 0x46, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x18,
        0x89, 0x01, 0x83, 0xc1, 0x04, 0x89, 0x7c, 0x24,
        0x14, 0x89, 0x4c, 0x24, 0x10, 0x89, 0x74, 0x24,
        0x0c, 0x5e, 0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x7c, 0x24, 0x14, 0x89, 0x4c, 0x24, 0x10,
        0x89, 0x74, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1b, (uintptr_t)&_PyEval_MatchKeys + -0x4);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x57, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__MATCH_MAPPING(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MATCH_MAPPING.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 6: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // a: 8b 54 24 10                   movl    0x10(%esp), %edx
    // e: 8b 72 fc                      movl    -0x4(%edx), %esi
    // 11: 8b 76 04                      movl    0x4(%esi), %esi
    // 14: f6 46 54 40                   testb   $0x40, 0x54(%esi)
    // 18: be 00 00 00 00                movl    $0x0, %esi
    // 00000019:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 1d: bf 00 00 00 00                movl    $0x0, %edi
    // 0000001e:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 22: 0f 44 fe                      cmovel  %esi, %edi
    // 25: 89 3a                         movl    %edi, (%edx)
    // 27: 83 c2 04                      addl    $0x4, %edx
    // 2a: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2e: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 32: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 36: 5e                            popl    %esi
    // 37: 5f                            popl    %edi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0x57, 0x56, 0x8b, 0x44, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x0c, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x72,
        0xfc, 0x8b, 0x76, 0x04, 0xf6, 0x46, 0x54, 0x40,
        0xbe, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0x44, 0xfe, 0x89, 0x3a, 0x83,
        0xc2, 0x04, 0x89, 0x54, 0x24, 0x10, 0x89, 0x4c,
        0x24, 0x0c, 0x89, 0x44, 0x24, 0x14, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x19, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0x1e, (uintptr_t)&_Py_TrueStruct);
}

void
emit__MATCH_SEQUENCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MATCH_SEQUENCE.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 6: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // a: 8b 54 24 10                   movl    0x10(%esp), %edx
    // e: 8b 72 fc                      movl    -0x4(%edx), %esi
    // 11: 8b 76 04                      movl    0x4(%esi), %esi
    // 14: f6 46 54 20                   testb   $0x20, 0x54(%esi)
    // 18: be 00 00 00 00                movl    $0x0, %esi
    // 00000019:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 1d: bf 00 00 00 00                movl    $0x0, %edi
    // 0000001e:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 22: 0f 44 fe                      cmovel  %esi, %edi
    // 25: 89 3a                         movl    %edi, (%edx)
    // 27: 83 c2 04                      addl    $0x4, %edx
    // 2a: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2e: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 32: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 36: 5e                            popl    %esi
    // 37: 5f                            popl    %edi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0x57, 0x56, 0x8b, 0x44, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x0c, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x72,
        0xfc, 0x8b, 0x76, 0x04, 0xf6, 0x46, 0x54, 0x20,
        0xbe, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0x44, 0xfe, 0x89, 0x3a, 0x83,
        0xc2, 0x04, 0x89, 0x54, 0x24, 0x10, 0x89, 0x4c,
        0x24, 0x0c, 0x89, 0x44, 0x24, 0x14, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x19, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0x1e, (uintptr_t)&_Py_TrueStruct);
}

void
emit__MAYBE_EXPAND_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAYBE_EXPAND_METHOD.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 0c                      subl    $0xc, %esp
    // 7: 8b 7c 24 28                   movl    0x28(%esp), %edi
    // b: 8b 44 24 24                   movl    0x24(%esp), %eax
    // f: 8b 74 24 20                   movl    0x20(%esp), %esi
    // 13: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000014:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 18: 0f b7 d1                      movzwl  %cx, %edx
    // 1b: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 20: 29 d1                         subl    %edx, %ecx
    // 22: 8b 1c 88                      movl    (%eax,%ecx,4), %ebx
    // 25: 81 7b 04 00 00 00 00          cmpl    $0x0, 0x4(%ebx)
    // 00000028:  IMAGE_REL_I386_DIR32 _PyMethod_Type
    // 2c: 75 70                         jne     0x9e <__JIT_ENTRY+0x9e>
    // 2e: f7 d2                         notl    %edx
    // 30: 83 3c 90 00                   cmpl    $0x0, (%eax,%edx,4)
    // 34: 75 68                         jne     0x9e <__JIT_ENTRY+0x9e>
    // 36: 8b 6b 0c                      movl    0xc(%ebx), %ebp
    // 39: 89 2c 24                      movl    %ebp, (%esp)
    // 3c: 8b 6d 00                      movl    (%ebp), %ebp
    // 3f: 81 fd ff ff ff 3f             cmpl    $0x3fffffff, %ebp       # imm = 0x3FFFFFFF
    // 45: 7f 17                         jg      0x5e <__JIT_ENTRY+0x5e>
    // 47: 45                            incl    %ebp
    // 48: 89 6c 24 08                   movl    %ebp, 0x8(%esp)
    // 4c: 8b 2c 24                      movl    (%esp), %ebp
    // 4f: 89 7c 24 04                   movl    %edi, 0x4(%esp)
    // 53: 8b 7c 24 08                   movl    0x8(%esp), %edi
    // 57: 89 7d 00                      movl    %edi, (%ebp)
    // 5a: 8b 7c 24 04                   movl    0x4(%esp), %edi
    // 5e: 8b 2c 24                      movl    (%esp), %ebp
    // 61: 89 2c 90                      movl    %ebp, (%eax,%edx,4)
    // 64: 8b 5b 08                      movl    0x8(%ebx), %ebx
    // 67: 8b 14 88                      movl    (%eax,%ecx,4), %edx
    // 6a: 8b 2b                         movl    (%ebx), %ebp
    // 6c: 81 fd ff ff ff 3f             cmpl    $0x3fffffff, %ebp       # imm = 0x3FFFFFFF
    // 72: 7f 03                         jg      0x77 <__JIT_ENTRY+0x77>
    // 74: 45                            incl    %ebp
    // 75: 89 2b                         movl    %ebp, (%ebx)
    // 77: 89 1c 88                      movl    %ebx, (%eax,%ecx,4)
    // 7a: 89 46 20                      movl    %eax, 0x20(%esi)
    // 7d: 8b 02                         movl    (%edx), %eax
    // 7f: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 84: 7f 0e                         jg      0x94 <__JIT_ENTRY+0x94>
    // 86: 48                            decl    %eax
    // 87: 89 02                         movl    %eax, (%edx)
    // 89: 75 09                         jne     0x94 <__JIT_ENTRY+0x94>
    // 8b: 52                            pushl   %edx
    // 8c: e8 00 00 00 00                calll   0x91 <__JIT_ENTRY+0x91>
    // 0000008d:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 91: 83 c4 04                      addl    $0x4, %esp
    // 94: 8b 46 20                      movl    0x20(%esi), %eax
    // 97: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 9e: 89 7c 24 28                   movl    %edi, 0x28(%esp)
    // a2: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // a6: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // aa: 83 c4 0c                      addl    $0xc, %esp
    // ad: 5e                            popl    %esi
    // ae: 5f                            popl    %edi
    // af: 5b                            popl    %ebx
    // b0: 5d                            popl    %ebp
    // b1: e9 00 00 00 00                jmp     0xb6 <__JIT_ENTRY+0xb6>
    // 000000b2:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[177] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x0c, 0x8b,
        0x7c, 0x24, 0x28, 0x8b, 0x44, 0x24, 0x24, 0x8b,
        0x74, 0x24, 0x20, 0xb9, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xd1, 0xb9, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xd1, 0x8b, 0x1c, 0x88, 0x81, 0x7b, 0x04,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x70, 0xf7, 0xd2,
        0x83, 0x3c, 0x90, 0x00, 0x75, 0x68, 0x8b, 0x6b,
        0x0c, 0x89, 0x2c, 0x24, 0x8b, 0x6d, 0x00, 0x81,
        0xfd, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x17, 0x45,
        0x89, 0x6c, 0x24, 0x08, 0x8b, 0x2c, 0x24, 0x89,
        0x7c, 0x24, 0x04, 0x8b, 0x7c, 0x24, 0x08, 0x89,
        0x7d, 0x00, 0x8b, 0x7c, 0x24, 0x04, 0x8b, 0x2c,
        0x24, 0x89, 0x2c, 0x90, 0x8b, 0x5b, 0x08, 0x8b,
        0x14, 0x88, 0x8b, 0x2b, 0x81, 0xfd, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x03, 0x45, 0x89, 0x2b, 0x89,
        0x1c, 0x88, 0x89, 0x46, 0x20, 0x8b, 0x02, 0x3d,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x48, 0x89,
        0x02, 0x75, 0x09, 0x52, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x04, 0x8b, 0x46, 0x20, 0xc7,
        0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x89, 0x7c,
        0x24, 0x28, 0x89, 0x44, 0x24, 0x24, 0x89, 0x74,
        0x24, 0x20, 0x83, 0xc4, 0x0c, 0x5e, 0x5f, 0x5b,
        0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, instruction->oparg);
    patch_32(code + 0x28, (uintptr_t)&PyMethod_Type);
    patch_x86_64_32rx(code + 0x8d, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__MAYBE_EXPAND_METHOD_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAYBE_EXPAND_METHOD_KW.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 10                      subl    $0x10, %esp
    // 7: 8b 54 24 2c                   movl    0x2c(%esp), %edx
    // b: 8b 44 24 28                   movl    0x28(%esp), %eax
    // f: 8b 74 24 24                   movl    0x24(%esp), %esi
    // 13: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000014:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 18: 0f b7 f9                      movzwl  %cx, %edi
    // 1b: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 1e: b9 fd ff ff ff                movl    $0xfffffffd, %ecx       # imm = 0xFFFFFFFD
    // 23: 29 f9                         subl    %edi, %ecx
    // 25: 8b 2c 88                      movl    (%eax,%ecx,4), %ebp
    // 28: 81 7d 04 00 00 00 00          cmpl    $0x0, 0x4(%ebp)
    // 0000002b:  IMAGE_REL_I386_DIR32 _PyMethod_Type
    // 2f: 0f 85 85 00 00 00             jne     0xba <__JIT_ENTRY+0xba>
    // 35: 89 54 24 08                   movl    %edx, 0x8(%esp)
    // 39: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
    // 3e: 29 fa                         subl    %edi, %edx
    // 40: 83 3c 90 00                   cmpl    $0x0, (%eax,%edx,4)
    // 44: 75 70                         jne     0xb6 <__JIT_ENTRY+0xb6>
    // 46: 8b 7d 0c                      movl    0xc(%ebp), %edi
    // 49: 89 7c 24 04                   movl    %edi, 0x4(%esp)
    // 4d: 8b 3f                         movl    (%edi), %edi
    // 4f: 89 2c 24                      movl    %ebp, (%esp)
    // 52: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 58: 7f 1b                         jg      0x75 <__JIT_ENTRY+0x75>
    // 5a: 47                            incl    %edi
    // 5b: 89 3c 24                      movl    %edi, (%esp)
    // 5e: 8b 7c 24 04                   movl    0x4(%esp), %edi
    // 62: 89 5c 24 0c                   movl    %ebx, 0xc(%esp)
    // 66: 8b 1c 24                      movl    (%esp), %ebx
    // 69: 89 1f                         movl    %ebx, (%edi)
    // 6b: 8b 5c 24 0c                   movl    0xc(%esp), %ebx
    // 6f: 8b 3c 88                      movl    (%eax,%ecx,4), %edi
    // 72: 89 3c 24                      movl    %edi, (%esp)
    // 75: 8b 7c 24 04                   movl    0x4(%esp), %edi
    // 79: 89 3c 90                      movl    %edi, (%eax,%edx,4)
    // 7c: 8b 55 08                      movl    0x8(%ebp), %edx
    // 7f: 8b 3a                         movl    (%edx), %edi
    // 81: 81 ff ff ff ff 3f             cmpl    $0x3fffffff, %edi       # imm = 0x3FFFFFFF
    // 87: 7f 03                         jg      0x8c <__JIT_ENTRY+0x8c>
    // 89: 47                            incl    %edi
    // 8a: 89 3a                         movl    %edi, (%edx)
    // 8c: 89 14 88                      movl    %edx, (%eax,%ecx,4)
    // 8f: 89 46 20                      movl    %eax, 0x20(%esi)
    // 92: 8b 0c 24                      movl    (%esp), %ecx
    // 95: 8b 01                         movl    (%ecx), %eax
    // 97: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 9c: 7f 0e                         jg      0xac <__JIT_ENTRY+0xac>
    // 9e: 48                            decl    %eax
    // 9f: 89 01                         movl    %eax, (%ecx)
    // a1: 75 09                         jne     0xac <__JIT_ENTRY+0xac>
    // a3: 51                            pushl   %ecx
    // a4: e8 00 00 00 00                calll   0xa9 <__JIT_ENTRY+0xa9>
    // 000000a5:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // a9: 83 c4 04                      addl    $0x4, %esp
    // ac: 8b 46 20                      movl    0x20(%esi), %eax
    // af: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // b6: 8b 54 24 08                   movl    0x8(%esp), %edx
    // ba: 89 58 fc                      movl    %ebx, -0x4(%eax)
    // bd: 89 54 24 2c                   movl    %edx, 0x2c(%esp)
    // c1: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // c5: 89 74 24 24                   movl    %esi, 0x24(%esp)
    // c9: 83 c4 10                      addl    $0x10, %esp
    // cc: 5e                            popl    %esi
    // cd: 5f                            popl    %edi
    // ce: 5b                            popl    %ebx
    // cf: 5d                            popl    %ebp
    // d0: e9 00 00 00 00                jmp     0xd5 <__JIT_ENTRY+0xd5>
    // 000000d1:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[208] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x10, 0x8b,
        0x54, 0x24, 0x2c, 0x8b, 0x44, 0x24, 0x28, 0x8b,
        0x74, 0x24, 0x24, 0xb9, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xf9, 0x8b, 0x58, 0xfc, 0xb9, 0xfd,
        0xff, 0xff, 0xff, 0x29, 0xf9, 0x8b, 0x2c, 0x88,
        0x81, 0x7d, 0x04, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x85, 0x85, 0x00, 0x00, 0x00, 0x89, 0x54, 0x24,
        0x08, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xfa,
        0x83, 0x3c, 0x90, 0x00, 0x75, 0x70, 0x8b, 0x7d,
        0x0c, 0x89, 0x7c, 0x24, 0x04, 0x8b, 0x3f, 0x89,
        0x2c, 0x24, 0x81, 0xff, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x1b, 0x47, 0x89, 0x3c, 0x24, 0x8b, 0x7c,
        0x24, 0x04, 0x89, 0x5c, 0x24, 0x0c, 0x8b, 0x1c,
        0x24, 0x89, 0x1f, 0x8b, 0x5c, 0x24, 0x0c, 0x8b,
        0x3c, 0x88, 0x89, 0x3c, 0x24, 0x8b, 0x7c, 0x24,
        0x04, 0x89, 0x3c, 0x90, 0x8b, 0x55, 0x08, 0x8b,
        0x3a, 0x81, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x03, 0x47, 0x89, 0x3a, 0x89, 0x14, 0x88, 0x89,
        0x46, 0x20, 0x8b, 0x0c, 0x24, 0x8b, 0x01, 0x3d,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x48, 0x89,
        0x01, 0x75, 0x09, 0x51, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x04, 0x8b, 0x46, 0x20, 0xc7,
        0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x54,
        0x24, 0x08, 0x89, 0x58, 0xfc, 0x89, 0x54, 0x24,
        0x2c, 0x89, 0x44, 0x24, 0x28, 0x89, 0x74, 0x24,
        0x24, 0x83, 0xc4, 0x10, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x14, instruction->oparg);
    patch_32(code + 0x2b, (uintptr_t)&PyMethod_Type);
    patch_x86_64_32rx(code + 0xa5, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__NOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _NOP.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 4: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 8: 8b 54 24 04                   movl    0x4(%esp), %edx
    // c: 89 54 24 04                   movl    %edx, 0x4(%esp)
    // 10: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 14: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 18: e9 00 00 00 00                jmp     0x1d <__JIT_ENTRY+0x1d>
    // 00000019:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x08,
        0x8b, 0x54, 0x24, 0x04, 0x89, 0x54, 0x24, 0x04,
        0x89, 0x4c, 0x24, 0x08, 0x89, 0x44, 0x24, 0x0c,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__POP_EXCEPT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _POP_EXCEPT.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 7: 8b 74 24 10                   movl    0x10(%esp), %esi
    // b: 8b 44 24 14                   movl    0x14(%esp), %eax
    // f: 8b 48 fc                      movl    -0x4(%eax), %ecx
    // 12: 8b 57 4c                      movl    0x4c(%edi), %edx
    // 15: 89 46 20                      movl    %eax, 0x20(%esi)
    // 18: 8b 02                         movl    (%edx), %eax
    // 1a: 31 db                         xorl    %ebx, %ebx
    // 1c: 81 f9 00 00 00 00             cmpl    $0x0, %ecx
    // 0000001e:  IMAGE_REL_I386_DIR32 __Py_NoneStruct
    // 22: 0f 45 d9                      cmovnel %ecx, %ebx
    // 25: 89 1a                         movl    %ebx, (%edx)
    // 27: 85 c0                         testl   %eax, %eax
    // 29: 74 18                         je      0x43 <__JIT_ENTRY+0x43>
    // 2b: 8b 08                         movl    (%eax), %ecx
    // 2d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 33: 7f 0e                         jg      0x43 <__JIT_ENTRY+0x43>
    // 35: 49                            decl    %ecx
    // 36: 89 08                         movl    %ecx, (%eax)
    // 38: 75 09                         jne     0x43 <__JIT_ENTRY+0x43>
    // 3a: 50                            pushl   %eax
    // 3b: e8 00 00 00 00                calll   0x40 <__JIT_ENTRY+0x40>
    // 0000003c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 40: 83 c4 04                      addl    $0x4, %esp
    // 43: 8b 46 20                      movl    0x20(%esi), %eax
    // 46: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 4d: 83 c0 fc                      addl    $-0x4, %eax
    // 50: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 54: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 58: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 5c: 5e                            popl    %esi
    // 5d: 5f                            popl    %edi
    // 5e: 5b                            popl    %ebx
    // 5f: e9 00 00 00 00                jmp     0x64 <__JIT_ENTRY+0x64>
    // 00000060:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[95] = {
        0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x18, 0x8b,
        0x74, 0x24, 0x10, 0x8b, 0x44, 0x24, 0x14, 0x8b,
        0x48, 0xfc, 0x8b, 0x57, 0x4c, 0x89, 0x46, 0x20,
        0x8b, 0x02, 0x31, 0xdb, 0x81, 0xf9, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0x45, 0xd9, 0x89, 0x1a, 0x85,
        0xc0, 0x74, 0x18, 0x8b, 0x08, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08,
        0x75, 0x09, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0x8b, 0x46, 0x20, 0xc7, 0x46,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc0, 0xfc,
        0x89, 0x7c, 0x24, 0x18, 0x89, 0x44, 0x24, 0x14,
        0x89, 0x74, 0x24, 0x10, 0x5e, 0x5f, 0x5b,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x1e, (uintptr_t)&_Py_NoneStruct);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__POP_TOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _POP_TOP.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 7: 8b 74 24 10                   movl    0x10(%esp), %esi
    // b: 8b 5c 24 14                   movl    0x14(%esp), %ebx
    // f: 8b 43 fc                      movl    -0x4(%ebx), %eax
    // 12: 83 c3 fc                      addl    $-0x4, %ebx
    // 15: 8b 08                         movl    (%eax), %ecx
    // 17: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 1d: 7f 0e                         jg      0x2d <__JIT_ENTRY+0x2d>
    // 1f: 49                            decl    %ecx
    // 20: 89 08                         movl    %ecx, (%eax)
    // 22: 75 09                         jne     0x2d <__JIT_ENTRY+0x2d>
    // 24: 50                            pushl   %eax
    // 25: e8 00 00 00 00                calll   0x2a <__JIT_ENTRY+0x2a>
    // 00000026:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 2a: 83 c4 04                      addl    $0x4, %esp
    // 2d: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 31: 89 5c 24 14                   movl    %ebx, 0x14(%esp)
    // 35: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 39: 5e                            popl    %esi
    // 3a: 5f                            popl    %edi
    // 3b: 5b                            popl    %ebx
    // 3c: e9 00 00 00 00                jmp     0x41 <__JIT_ENTRY+0x41>
    // 0000003d:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[60] = {
        0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x18, 0x8b,
        0x74, 0x24, 0x10, 0x8b, 0x5c, 0x24, 0x14, 0x8b,
        0x43, 0xfc, 0x83, 0xc3, 0xfc, 0x8b, 0x08, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x49,
        0x89, 0x08, 0x75, 0x09, 0x50, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0x89, 0x7c, 0x24,
        0x18, 0x89, 0x5c, 0x24, 0x14, 0x89, 0x74, 0x24,
        0x10, 0x5e, 0x5f, 0x5b,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x26, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__POP_TOP_LOAD_CONST_INLINE_BORROW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _POP_TOP_LOAD_CONST_INLINE_BORROW.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // e: 8b 41 fc                      movl    -0x4(%ecx), %eax
    // 11: 83 c1 fc                      addl    $-0x4, %ecx
    // 14: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 17: 8b 08                         movl    (%eax), %ecx
    // 19: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 1f: 7f 0e                         jg      0x2f <__JIT_ENTRY+0x2f>
    // 21: 49                            decl    %ecx
    // 22: 89 08                         movl    %ecx, (%eax)
    // 24: 75 09                         jne     0x2f <__JIT_ENTRY+0x2f>
    // 26: 50                            pushl   %eax
    // 27: e8 00 00 00 00                calll   0x2c <__JIT_ENTRY+0x2c>
    // 00000028:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 2c: 83 c4 04                      addl    $0x4, %esp
    // 2f: 8b 46 20                      movl    0x20(%esi), %eax
    // 32: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 39: c7 00 00 00 00 00             movl    $0x0, (%eax)
    // 0000003b:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 3f: 83 c0 04                      addl    $0x4, %eax
    // 42: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 46: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 4a: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 4e: 5e                            popl    %esi
    // 4f: 5f                            popl    %edi
    // 50: e9 00 00 00 00                jmp     0x55 <__JIT_ENTRY+0x55>
    // 00000051:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[80] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x10, 0x8b, 0x41,
        0xfc, 0x83, 0xc1, 0xfc, 0x89, 0x4e, 0x20, 0x8b,
        0x08, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x0e, 0x49, 0x89, 0x08, 0x75, 0x09, 0x50, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b,
        0x46, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc0, 0x04, 0x89, 0x7c, 0x24, 0x14, 0x89, 0x44,
        0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x28, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x3b, (instruction->operand0 & UINT32_MAX));
}

void
emit__PUSH_EXC_INFO(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PUSH_EXC_INFO.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 4c 24 1c                   movl    0x1c(%esp), %ecx
    // 8: 8b 54 24 18                   movl    0x18(%esp), %edx
    // c: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 10: 8b 72 fc                      movl    -0x4(%edx), %esi
    // 13: 8b 79 4c                      movl    0x4c(%ecx), %edi
    // 16: 8b 1f                         movl    (%edi), %ebx
    // 18: 8b 2e                         movl    (%esi), %ebp
    // 1a: 81 fd ff ff ff 3f             cmpl    $0x3fffffff, %ebp       # imm = 0x3FFFFFFF
    // 20: 7f 03                         jg      0x25 <__JIT_ENTRY+0x25>
    // 22: 45                            incl    %ebp
    // 23: 89 2e                         movl    %ebp, (%esi)
    // 25: 85 db                         testl   %ebx, %ebx
    // 27: bd 00 00 00 00                movl    $0x0, %ebp
    // 00000028:  IMAGE_REL_I386_DIR32 __Py_NoneStruct
    // 2c: 0f 45 eb                      cmovnel %ebx, %ebp
    // 2f: 89 37                         movl    %esi, (%edi)
    // 31: 89 6a fc                      movl    %ebp, -0x4(%edx)
    // 34: 89 32                         movl    %esi, (%edx)
    // 36: 83 c2 04                      addl    $0x4, %edx
    // 39: 89 4c 24 1c                   movl    %ecx, 0x1c(%esp)
    // 3d: 89 54 24 18                   movl    %edx, 0x18(%esp)
    // 41: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 45: 5e                            popl    %esi
    // 46: 5f                            popl    %edi
    // 47: 5b                            popl    %ebx
    // 48: 5d                            popl    %ebp
    // 49: e9 00 00 00 00                jmp     0x4e <__JIT_ENTRY+0x4e>
    // 0000004a:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[73] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x4c, 0x24, 0x1c,
        0x8b, 0x54, 0x24, 0x18, 0x8b, 0x44, 0x24, 0x14,
        0x8b, 0x72, 0xfc, 0x8b, 0x79, 0x4c, 0x8b, 0x1f,
        0x8b, 0x2e, 0x81, 0xfd, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x03, 0x45, 0x89, 0x2e, 0x85, 0xdb, 0xbd,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0x45, 0xeb, 0x89,
        0x37, 0x89, 0x6a, 0xfc, 0x89, 0x32, 0x83, 0xc2,
        0x04, 0x89, 0x4c, 0x24, 0x1c, 0x89, 0x54, 0x24,
        0x18, 0x89, 0x44, 0x24, 0x14, 0x5e, 0x5f, 0x5b,
        0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x28, (uintptr_t)&_Py_NoneStruct);
}

void
emit__PUSH_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PUSH_FRAME.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 44 24 10                   movl    0x10(%esp), %eax
    // 5: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 9: 8b 54 24 0c                   movl    0xc(%esp), %edx
    // d: 8b 72 fc                      movl    -0x4(%edx), %esi
    // 10: 83 c2 fc                      addl    $-0x4, %edx
    // 13: 89 51 20                      movl    %edx, 0x20(%ecx)
    // 16: 89 70 34                      movl    %esi, 0x34(%eax)
    // 19: ff 48 1c                      decl    0x1c(%eax)
    // 1c: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 1f: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 26: 89 74 24 08                   movl    %esi, 0x8(%esp)
    // 2a: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 2e: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 32: 5e                            popl    %esi
    // 33: e9 00 00 00 00                jmp     0x38 <__JIT_ENTRY+0x38>
    // 00000034:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[51] = {
        0x56, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x08, 0x8b, 0x54, 0x24, 0x0c, 0x8b, 0x72, 0xfc,
        0x83, 0xc2, 0xfc, 0x89, 0x51, 0x20, 0x89, 0x70,
        0x34, 0xff, 0x48, 0x1c, 0x8b, 0x4e, 0x20, 0xc7,
        0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x89, 0x74,
        0x24, 0x08, 0x89, 0x4c, 0x24, 0x0c, 0x89, 0x44,
        0x24, 0x10, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__PUSH_NULL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PUSH_NULL.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 4: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 8: 8b 54 24 08                   movl    0x8(%esp), %edx
    // c: c7 02 00 00 00 00             movl    $0x0, (%edx)
    // 12: 83 c2 04                      addl    $0x4, %edx
    // 15: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 19: 89 54 24 08                   movl    %edx, 0x8(%esp)
    // 1d: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 21: e9 00 00 00 00                jmp     0x26 <__JIT_ENTRY+0x26>
    // 00000022:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[33] = {
        0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x04,
        0x8b, 0x54, 0x24, 0x08, 0xc7, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc2, 0x04, 0x89, 0x4c, 0x24,
        0x04, 0x89, 0x54, 0x24, 0x08, 0x89, 0x44, 0x24,
        0x0c,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__PUSH_NULL_CONDITIONAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PUSH_NULL_CONDITIONAL.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 44 24 10                   movl    0x10(%esp), %eax
    // 5: 8b 54 24 0c                   movl    0xc(%esp), %edx
    // 9: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // d: be 00 00 00 00                movl    $0x0, %esi
    // 0000000e:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 12: 66 83 e6 01                   andw    $0x1, %si
    // 16: 74 06                         je      0x1e <__JIT_ENTRY+0x1e>
    // 18: c7 02 00 00 00 00             movl    $0x0, (%edx)
    // 1e: 0f b7 f6                      movzwl  %si, %esi
    // 21: 8d 14 b2                      leal    (%edx,%esi,4), %edx
    // 24: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 28: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 2c: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 30: 5e                            popl    %esi
    // 31: e9 00 00 00 00                jmp     0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[49] = {
        0x56, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x54, 0x24,
        0x0c, 0x8b, 0x4c, 0x24, 0x08, 0xbe, 0x00, 0x00,
        0x00, 0x00, 0x66, 0x83, 0xe6, 0x01, 0x74, 0x06,
        0xc7, 0x02, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xf6, 0x8d, 0x14, 0xb2, 0x89, 0x44, 0x24, 0x10,
        0x89, 0x4c, 0x24, 0x08, 0x89, 0x54, 0x24, 0x0c,
        0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xe, instruction->oparg);
}

void
emit__PY_FRAME_GENERAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PY_FRAME_GENERAL.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 9: b9 00 00 00 00                movl    $0x0, %ecx
    // 0000000a:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // e: 0f b7 f9                      movzwl  %cx, %edi
    // 11: 8d 0c bd 00 00 00 00          leal    (,%edi,4), %ecx
    // 18: 89 c6                         movl    %eax, %esi
    // 1a: 29 ce                         subl    %ecx, %esi
    // 1c: 89 fd                         movl    %edi, %ebp
    // 1e: f7 d5                         notl    %ebp
    // 20: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 25: 29 f9                         subl    %edi, %ecx
    // 27: 31 db                         xorl    %ebx, %ebx
    // 29: 31 d2                         xorl    %edx, %edx
    // 2b: 83 3c a8 00                   cmpl    $0x0, (%eax,%ebp,4)
    // 2f: 8b 2c 88                      movl    (%eax,%ecx,4), %ebp
    // 32: 0f 94 c3                      sete    %bl
    // 35: 0f 95 c2                      setne   %dl
    // 38: 01 fa                         addl    %edi, %edx
    // 3a: 8d 34 9e                      leal    (%esi,%ebx,4), %esi
    // 3d: 83 c6 fc                      addl    $-0x4, %esi
    // 40: 89 eb                         movl    %ebp, %ebx
    // 42: 89 34 24                      movl    %esi, (%esp)
    // 45: 8b 75 18                      movl    0x18(%ebp), %esi
    // 48: 31 ed                         xorl    %ebp, %ebp
    // 4a: f6 46 18 01                   testb   $0x1, 0x18(%esi)
    // 4e: 8b 7c 24 20                   movl    0x20(%esp), %edi
    // 52: 8b 74 24 18                   movl    0x18(%esp), %esi
    // 56: 75 12                         jne     0x6a <__JIT_ENTRY+0x6a>
    // 58: 8b 6b 08                      movl    0x8(%ebx), %ebp
    // 5b: 8b 5d 00                      movl    (%ebp), %ebx
    // 5e: 81 fb ff ff ff 3f             cmpl    $0x3fffffff, %ebx       # imm = 0x3FFFFFFF
    // 64: 7f 04                         jg      0x6a <__JIT_ENTRY+0x6a>
    // 66: 43                            incl    %ebx
    // 67: 89 5d 00                      movl    %ebx, (%ebp)
    // 6a: 89 46 20                      movl    %eax, 0x20(%esi)
    // 6d: 8d 1c 8d 00 00 00 00          leal    (,%ecx,4), %ebx
    // 74: 56                            pushl   %esi
    // 75: 6a 00                         pushl   $0x0
    // 77: 52                            pushl   %edx
    // 78: ff 74 24 0c                   pushl   0xc(%esp)
    // 7c: 55                            pushl   %ebp
    // 7d: ff 34 88                      pushl   (%eax,%ecx,4)
    // 80: 57                            pushl   %edi
    // 81: e8 00 00 00 00                calll   0x86 <__JIT_ENTRY+0x86>
    // 00000082:  IMAGE_REL_I386_REL32 __PyEvalFramePushAndInit
    // 86: 83 c4 1c                      addl    $0x1c, %esp
    // 89: 03 5e 20                      addl    0x20(%esi), %ebx
    // 8c: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 93: 85 c0                         testl   %eax, %eax
    // 95: 74 1d                         je      0xb4 <__JIT_ENTRY+0xb4>
    // 97: 89 03                         movl    %eax, (%ebx)
    // 99: 83 c3 04                      addl    $0x4, %ebx
    // 9c: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // a0: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // a4: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // a8: 83 c4 04                      addl    $0x4, %esp
    // ab: 5e                            popl    %esi
    // ac: 5f                            popl    %edi
    // ad: 5b                            popl    %ebx
    // ae: 5d                            popl    %ebp
    // af: e9 00 00 00 00                jmp     0xb4 <__JIT_ENTRY+0xb4>
    // 000000b0:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // b4: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // b8: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // bc: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // c0: 83 c4 04                      addl    $0x4, %esp
    // c3: 5e                            popl    %esi
    // c4: 5f                            popl    %edi
    // c5: 5b                            popl    %ebx
    // c6: 5d                            popl    %ebp
    // c7: e9 00 00 00 00                jmp     0xcc <__JIT_ENTRY+0xcc>
    // 000000c8:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[204] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x44, 0x24,
        0x1c, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xf9, 0x8d, 0x0c, 0xbd, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xc6, 0x29, 0xce, 0x89, 0xfd, 0xf7, 0xd5,
        0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf9, 0x31,
        0xdb, 0x31, 0xd2, 0x83, 0x3c, 0xa8, 0x00, 0x8b,
        0x2c, 0x88, 0x0f, 0x94, 0xc3, 0x0f, 0x95, 0xc2,
        0x01, 0xfa, 0x8d, 0x34, 0x9e, 0x83, 0xc6, 0xfc,
        0x89, 0xeb, 0x89, 0x34, 0x24, 0x8b, 0x75, 0x18,
        0x31, 0xed, 0xf6, 0x46, 0x18, 0x01, 0x8b, 0x7c,
        0x24, 0x20, 0x8b, 0x74, 0x24, 0x18, 0x75, 0x12,
        0x8b, 0x6b, 0x08, 0x8b, 0x5d, 0x00, 0x81, 0xfb,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x04, 0x43, 0x89,
        0x5d, 0x00, 0x89, 0x46, 0x20, 0x8d, 0x1c, 0x8d,
        0x00, 0x00, 0x00, 0x00, 0x56, 0x6a, 0x00, 0x52,
        0xff, 0x74, 0x24, 0x0c, 0x55, 0xff, 0x34, 0x88,
        0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x1c, 0x03, 0x5e, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x1d, 0x89,
        0x03, 0x83, 0xc3, 0x04, 0x89, 0x7c, 0x24, 0x20,
        0x89, 0x5c, 0x24, 0x1c, 0x89, 0x74, 0x24, 0x18,
        0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x20,
        0x89, 0x5c, 0x24, 0x1c, 0x89, 0x74, 0x24, 0x18,
        0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xa, instruction->oparg);
    patch_x86_64_32rx(code + 0x82, (uintptr_t)&_PyEvalFramePushAndInit + -0x4);
    patch_x86_64_32rx(code + 0xb0, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xc8, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__PY_FRAME_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PY_FRAME_KW.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 0c                      subl    $0xc, %esp
    // 7: 8b 44 24 24                   movl    0x24(%esp), %eax
    // b: b9 00 00 00 00                movl    $0x0, %ecx
    // 0000000c:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 10: 0f b7 c9                      movzwl  %cx, %ecx
    // 13: 89 ca                         movl    %ecx, %edx
    // 15: f7 d2                         notl    %edx
    // 17: 8d 3c 90                      leal    (%eax,%edx,4), %edi
    // 1a: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
    // 1f: 29 ce                         subl    %ecx, %esi
    // 21: bd fd ff ff ff                movl    $0xfffffffd, %ebp       # imm = 0xFFFFFFFD
    // 26: 29 cd                         subl    %ecx, %ebp
    // 28: 31 db                         xorl    %ebx, %ebx
    // 2a: 31 d2                         xorl    %edx, %edx
    // 2c: 83 3c b0 00                   cmpl    $0x0, (%eax,%esi,4)
    // 30: 0f 94 c2                      sete    %dl
    // 33: 8d 54 97 fc                   leal    -0x4(%edi,%edx,4), %edx
    // 37: 89 14 24                      movl    %edx, (%esp)
    // 3a: 8b 50 fc                      movl    -0x4(%eax), %edx
    // 3d: 0f 95 c3                      setne   %bl
    // 40: 89 54 24 08                   movl    %edx, 0x8(%esp)
    // 44: 2b 4a 08                      subl    0x8(%edx), %ecx
    // 47: 01 d9                         addl    %ebx, %ecx
    // 49: 89 6c 24 04                   movl    %ebp, 0x4(%esp)
    // 4d: 8b 2c a8                      movl    (%eax,%ebp,4), %ebp
    // 50: 8b 55 18                      movl    0x18(%ebp), %edx
    // 53: 31 db                         xorl    %ebx, %ebx
    // 55: f6 42 18 01                   testb   $0x1, 0x18(%edx)
    // 59: 8b 54 24 28                   movl    0x28(%esp), %edx
    // 5d: 8b 7c 24 20                   movl    0x20(%esp), %edi
    // 61: 75 10                         jne     0x73 <__JIT_ENTRY+0x73>
    // 63: 8b 5d 08                      movl    0x8(%ebp), %ebx
    // 66: 8b 2b                         movl    (%ebx), %ebp
    // 68: 81 fd ff ff ff 3f             cmpl    $0x3fffffff, %ebp       # imm = 0x3FFFFFFF
    // 6e: 7f 03                         jg      0x73 <__JIT_ENTRY+0x73>
    // 70: 45                            incl    %ebp
    // 71: 89 2b                         movl    %ebp, (%ebx)
    // 73: 89 47 20                      movl    %eax, 0x20(%edi)
    // 76: 57                            pushl   %edi
    // 77: 8b 6c 24 0c                   movl    0xc(%esp), %ebp
    // 7b: 55                            pushl   %ebp
    // 7c: 51                            pushl   %ecx
    // 7d: ff 74 24 0c                   pushl   0xc(%esp)
    // 81: 53                            pushl   %ebx
    // 82: 8b 4c 24 18                   movl    0x18(%esp), %ecx
    // 86: ff 34 88                      pushl   (%eax,%ecx,4)
    // 89: 89 d3                         movl    %edx, %ebx
    // 8b: 52                            pushl   %edx
    // 8c: e8 00 00 00 00                calll   0x91 <__JIT_ENTRY+0x91>
    // 0000008d:  IMAGE_REL_I386_REL32 __PyEvalFramePushAndInit
    // 91: 83 c4 1c                      addl    $0x1c, %esp
    // 94: 83 47 20 fc                   addl    $-0x4, 0x20(%edi)
    // 98: 8b 4d 00                      movl    (%ebp), %ecx
    // 9b: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // a1: 7f 13                         jg      0xb6 <__JIT_ENTRY+0xb6>
    // a3: 49                            decl    %ecx
    // a4: 89 4d 00                      movl    %ecx, (%ebp)
    // a7: 75 0d                         jne     0xb6 <__JIT_ENTRY+0xb6>
    // a9: 55                            pushl   %ebp
    // aa: 89 c5                         movl    %eax, %ebp
    // ac: e8 00 00 00 00                calll   0xb1 <__JIT_ENTRY+0xb1>
    // 000000ad:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // b1: 89 e8                         movl    %ebp, %eax
    // b3: 83 c4 04                      addl    $0x4, %esp
    // b6: c1 e6 02                      shll    $0x2, %esi
    // b9: 03 77 20                      addl    0x20(%edi), %esi
    // bc: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // c3: 85 c0                         testl   %eax, %eax
    // c5: 74 1d                         je      0xe4 <__JIT_ENTRY+0xe4>
    // c7: 89 06                         movl    %eax, (%esi)
    // c9: 83 c6 04                      addl    $0x4, %esi
    // cc: 89 5c 24 28                   movl    %ebx, 0x28(%esp)
    // d0: 89 74 24 24                   movl    %esi, 0x24(%esp)
    // d4: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // d8: 83 c4 0c                      addl    $0xc, %esp
    // db: 5e                            popl    %esi
    // dc: 5f                            popl    %edi
    // dd: 5b                            popl    %ebx
    // de: 5d                            popl    %ebp
    // df: e9 00 00 00 00                jmp     0xe4 <__JIT_ENTRY+0xe4>
    // 000000e0:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // e4: 89 5c 24 28                   movl    %ebx, 0x28(%esp)
    // e8: 89 74 24 24                   movl    %esi, 0x24(%esp)
    // ec: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // f0: 83 c4 0c                      addl    $0xc, %esp
    // f3: 5e                            popl    %esi
    // f4: 5f                            popl    %edi
    // f5: 5b                            popl    %ebx
    // f6: 5d                            popl    %ebp
    // f7: e9 00 00 00 00                jmp     0xfc <__JIT_ENTRY+0xfc>
    // 000000f8:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[252] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x0c, 0x8b,
        0x44, 0x24, 0x24, 0xb9, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xc9, 0x89, 0xca, 0xf7, 0xd2, 0x8d,
        0x3c, 0x90, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29,
        0xce, 0xbd, 0xfd, 0xff, 0xff, 0xff, 0x29, 0xcd,
        0x31, 0xdb, 0x31, 0xd2, 0x83, 0x3c, 0xb0, 0x00,
        0x0f, 0x94, 0xc2, 0x8d, 0x54, 0x97, 0xfc, 0x89,
        0x14, 0x24, 0x8b, 0x50, 0xfc, 0x0f, 0x95, 0xc3,
        0x89, 0x54, 0x24, 0x08, 0x2b, 0x4a, 0x08, 0x01,
        0xd9, 0x89, 0x6c, 0x24, 0x04, 0x8b, 0x2c, 0xa8,
        0x8b, 0x55, 0x18, 0x31, 0xdb, 0xf6, 0x42, 0x18,
        0x01, 0x8b, 0x54, 0x24, 0x28, 0x8b, 0x7c, 0x24,
        0x20, 0x75, 0x10, 0x8b, 0x5d, 0x08, 0x8b, 0x2b,
        0x81, 0xfd, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x03,
        0x45, 0x89, 0x2b, 0x89, 0x47, 0x20, 0x57, 0x8b,
        0x6c, 0x24, 0x0c, 0x55, 0x51, 0xff, 0x74, 0x24,
        0x0c, 0x53, 0x8b, 0x4c, 0x24, 0x18, 0xff, 0x34,
        0x88, 0x89, 0xd3, 0x52, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x1c, 0x83, 0x47, 0x20, 0xfc,
        0x8b, 0x4d, 0x00, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x13, 0x49, 0x89, 0x4d, 0x00, 0x75,
        0x0d, 0x55, 0x89, 0xc5, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xe8, 0x83, 0xc4, 0x04, 0xc1, 0xe6,
        0x02, 0x03, 0x77, 0x20, 0xc7, 0x47, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x1d, 0x89,
        0x06, 0x83, 0xc6, 0x04, 0x89, 0x5c, 0x24, 0x28,
        0x89, 0x74, 0x24, 0x24, 0x89, 0x7c, 0x24, 0x20,
        0x83, 0xc4, 0x0c, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x89, 0x5c, 0x24, 0x28,
        0x89, 0x74, 0x24, 0x24, 0x89, 0x7c, 0x24, 0x20,
        0x83, 0xc4, 0x0c, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xc, instruction->oparg);
    patch_x86_64_32rx(code + 0x8d, (uintptr_t)&_PyEvalFramePushAndInit + -0x4);
    patch_x86_64_32rx(code + 0xad, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xe0, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xf8, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__REPLACE_WITH_TRUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _REPLACE_WITH_TRUE.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 5c 24 18                   movl    0x18(%esp), %ebx
    // 7: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // b: 8b 74 24 10                   movl    0x10(%esp), %esi
    // f: 8b 47 fc                      movl    -0x4(%edi), %eax
    // 12: 8b 08                         movl    (%eax), %ecx
    // 14: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 1a: 7f 0e                         jg      0x2a <__JIT_ENTRY+0x2a>
    // 1c: 49                            decl    %ecx
    // 1d: 89 08                         movl    %ecx, (%eax)
    // 1f: 75 09                         jne     0x2a <__JIT_ENTRY+0x2a>
    // 21: 50                            pushl   %eax
    // 22: e8 00 00 00 00                calll   0x27 <__JIT_ENTRY+0x27>
    // 00000023:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 27: 83 c4 04                      addl    $0x4, %esp
    // 2a: c7 47 fc 00 00 00 00          movl    $0x0, -0x4(%edi)
    // 0000002d:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 31: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 35: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 39: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 3d: 5e                            popl    %esi
    // 3e: 5f                            popl    %edi
    // 3f: 5b                            popl    %ebx
    // 40: e9 00 00 00 00                jmp     0x45 <__JIT_ENTRY+0x45>
    // 00000041:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[64] = {
        0x53, 0x57, 0x56, 0x8b, 0x5c, 0x24, 0x18, 0x8b,
        0x7c, 0x24, 0x14, 0x8b, 0x74, 0x24, 0x10, 0x8b,
        0x47, 0xfc, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75,
        0x09, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0xc7, 0x47, 0xfc, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x5c, 0x24, 0x18, 0x89, 0x7c, 0x24,
        0x14, 0x89, 0x74, 0x24, 0x10, 0x5e, 0x5f, 0x5b,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x23, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x2d, (uintptr_t)&_Py_TrueStruct);
}

void
emit__RESUME_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _RESUME_CHECK.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 54 24 14                   movl    0x14(%esp), %edx
    // 6: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // a: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // e: 8b 72 0c                      movl    0xc(%edx), %esi
    // 11: 8b 38                         movl    (%eax), %edi
    // 13: 3b 77 6c                      cmpl    0x6c(%edi), %esi
    // 16: 75 13                         jne     0x2b <__JIT_ENTRY+0x2b>
    // 18: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 1c: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 20: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 24: 5e                            popl    %esi
    // 25: 5f                            popl    %edi
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 00000027:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 2b: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 2f: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 33: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 37: 5e                            popl    %esi
    // 38: 5f                            popl    %edi
    // 39: e9 00 00 00 00                jmp     0x3e <__JIT_ENTRY+0x3e>
    // 0000003a:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[62] = {
        0x57, 0x56, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x72,
        0x0c, 0x8b, 0x38, 0x3b, 0x77, 0x6c, 0x75, 0x13,
        0x89, 0x54, 0x24, 0x14, 0x89, 0x4c, 0x24, 0x10,
        0x89, 0x44, 0x24, 0x0c, 0x5e, 0x5f, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x14, 0x89,
        0x4c, 0x24, 0x10, 0x89, 0x44, 0x24, 0x0c, 0x5e,
        0x5f, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x27, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x3a, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__RETURN_GENERATOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _RETURN_GENERATOR.o:        file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 0c                      subl    $0xc, %esp
    // 7: 8b 74 24 28                   movl    0x28(%esp), %esi
    // b: 8b 7c 24 20                   movl    0x20(%esp), %edi
    // f: 8b 44 24 24                   movl    0x24(%esp), %eax
    // 13: 8b 4f 08                      movl    0x8(%edi), %ecx
    // 16: 89 47 20                      movl    %eax, 0x20(%edi)
    // 19: 51                            pushl   %ecx
    // 1a: e8 00 00 00 00                calll   0x1f <__JIT_ENTRY+0x1f>
    // 0000001b:  IMAGE_REL_I386_REL32 __Py_MakeCoro
    // 1f: 83 c4 04                      addl    $0x4, %esp
    // 22: 8b 4f 20                      movl    0x20(%edi), %ecx
    // 25: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 2c: 85 c0                         testl   %eax, %eax
    // 2e: 0f 84 42 01 00 00             je      0x176 <__JIT_ENTRY+0x176>
    // 34: 89 74 24 08                   movl    %esi, 0x8(%esp)
    // 38: 89 4f 20                      movl    %ecx, 0x20(%edi)
    // 3b: 83 47 1c 02                   addl    $0x2, 0x1c(%edi)
    // 3f: 0f 10 07                      movups  (%edi), %xmm0
    // 42: 0f 11 40 24                   movups  %xmm0, 0x24(%eax)
    // 46: 0f 10 47 1c                   movups  0x1c(%edi), %xmm0
    // 4a: 0f 11 40 40                   movups  %xmm0, 0x40(%eax)
    // 4e: 0f 10 47 10                   movups  0x10(%edi), %xmm0
    // 52: 0f 11 40 34                   movups  %xmm0, 0x34(%eax)
    // 56: 8b 5f 20                      movl    0x20(%edi), %ebx
    // 59: 8d 57 28                      leal    0x28(%edi), %edx
    // 5c: 29 d3                         subl    %edx, %ebx
    // 5e: 8d 0c 18                      leal    (%eax,%ebx), %ecx
    // 61: 83 c1 4c                      addl    $0x4c, %ecx
    // 64: c1 fb 02                      sarl    $0x2, %ebx
    // 67: 89 48 44                      movl    %ecx, 0x44(%eax)
    // 6a: 83 fb 02                      cmpl    $0x2, %ebx
    // 6d: 0f 8c b4 00 00 00             jl      0x127 <__JIT_ENTRY+0x127>
    // 73: bd 01 00 00 00                movl    $0x1, %ebp
    // 78: 83 fb 09                      cmpl    $0x9, %ebx
    // 7b: 72 45                         jb      0xc2 <__JIT_ENTRY+0xc2>
    // 7d: 89 c1                         movl    %eax, %ecx
    // 7f: 29 f9                         subl    %edi, %ecx
    // 81: 83 c1 24                      addl    $0x24, %ecx
    // 84: 83 f9 20                      cmpl    $0x20, %ecx
    // 87: 72 39                         jb      0xc2 <__JIT_ENTRY+0xc2>
    // 89: 8d 4b ff                      leal    -0x1(%ebx), %ecx
    // 8c: 89 cd                         movl    %ecx, %ebp
    // 8e: 83 e5 f8                      andl    $-0x8, %ebp
    // 91: 8d 75 01                      leal    0x1(%ebp), %esi
    // 94: 89 34 24                      movl    %esi, (%esp)
    // 97: 31 f6                         xorl    %esi, %esi
    // 99: 0f 1f 80 00 00 00 00          nopl    (%eax)
    // a0: 0f 10 44 b7 2c                movups  0x2c(%edi,%esi,4), %xmm0
    // a5: 0f 10 4c b7 3c                movups  0x3c(%edi,%esi,4), %xmm1
    // aa: 0f 11 44 b0 50                movups  %xmm0, 0x50(%eax,%esi,4)
    // af: 0f 11 4c b0 60                movups  %xmm1, 0x60(%eax,%esi,4)
    // b4: 83 c6 08                      addl    $0x8, %esi
    // b7: 39 f5                         cmpl    %esi, %ebp
    // b9: 75 e5                         jne     0xa0 <__JIT_ENTRY+0xa0>
    // bb: 39 e9                         cmpl    %ebp, %ecx
    // bd: 8b 2c 24                      movl    (%esp), %ebp
    // c0: 74 65                         je      0x127 <__JIT_ENTRY+0x127>
    // c2: 89 5c 24 04                   movl    %ebx, 0x4(%esp)
    // c6: 89 d9                         movl    %ebx, %ecx
    // c8: 29 e9                         subl    %ebp, %ecx
    // ca: 89 2c 24                      movl    %ebp, (%esp)
    // cd: 83 e1 03                      andl    $0x3, %ecx
    // d0: 74 1c                         je      0xee <__JIT_ENTRY+0xee>
    // d2: 89 c6                         movl    %eax, %esi
    // d4: 83 c6 4c                      addl    $0x4c, %esi
    // d7: 8b 2c 24                      movl    (%esp), %ebp
    // da: 66 0f 1f 44 00 00             nopw    (%eax,%eax)
    // e0: 89 d3                         movl    %edx, %ebx
    // e2: 8b 14 aa                      movl    (%edx,%ebp,4), %edx
    // e5: 89 14 ae                      movl    %edx, (%esi,%ebp,4)
    // e8: 89 da                         movl    %ebx, %edx
    // ea: 45                            incl    %ebp
    // eb: 49                            decl    %ecx
    // ec: 75 f2                         jne     0xe0 <__JIT_ENTRY+0xe0>
    // ee: 8b 54 24 04                   movl    0x4(%esp), %edx
    // f2: 8b 0c 24                      movl    (%esp), %ecx
    // f5: 29 d1                         subl    %edx, %ecx
    // f7: 83 f9 fc                      cmpl    $-0x4, %ecx
    // fa: 77 2b                         ja      0x127 <__JIT_ENTRY+0x127>
    // fc: 0f 1f 40 00                   nopl    (%eax)
    // 100: 8b 4c af 28                   movl    0x28(%edi,%ebp,4), %ecx
    // 104: 89 4c a8 4c                   movl    %ecx, 0x4c(%eax,%ebp,4)
    // 108: 8b 4c af 2c                   movl    0x2c(%edi,%ebp,4), %ecx
    // 10c: 89 4c a8 50                   movl    %ecx, 0x50(%eax,%ebp,4)
    // 110: 8b 4c af 30                   movl    0x30(%edi,%ebp,4), %ecx
    // 114: 89 4c a8 54                   movl    %ecx, 0x54(%eax,%ebp,4)
    // 118: 8b 4c af 34                   movl    0x34(%edi,%ebp,4), %ecx
    // 11c: 89 4c a8 58                   movl    %ecx, 0x58(%eax,%ebp,4)
    // 120: 83 c5 04                      addl    $0x4, %ebp
    // 123: 39 ea                         cmpl    %ebp, %edx
    // 125: 75 d9                         jne     0x100 <__JIT_ENTRY+0x100>
    // 127: c7 40 28 00 00 00 00          movl    $0x0, 0x28(%eax)
    // 12e: c6 40 23 fd                   movb    $-0x3, 0x23(%eax)
    // 132: c6 40 4a 01                   movb    $0x1, 0x4a(%eax)
    // 136: 8b 5c 24 08                   movl    0x8(%esp), %ebx
    // 13a: ff 43 1c                      incl    0x1c(%ebx)
    // 13d: 8b 77 04                      movl    0x4(%edi), %esi
    // 140: 57                            pushl   %edi
    // 141: 53                            pushl   %ebx
    // 142: 89 c7                         movl    %eax, %edi
    // 144: e8 00 00 00 00                calll   0x149 <__JIT_ENTRY+0x149>
    // 00000145:  IMAGE_REL_I386_REL32 __PyThreadState_PopFrame
    // 149: 83 c4 08                      addl    $0x8, %esp
    // 14c: 89 73 34                      movl    %esi, 0x34(%ebx)
    // 14f: 8b 46 20                      movl    0x20(%esi), %eax
    // 152: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 159: 89 38                         movl    %edi, (%eax)
    // 15b: 83 c0 04                      addl    $0x4, %eax
    // 15e: 89 5c 24 28                   movl    %ebx, 0x28(%esp)
    // 162: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // 166: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // 16a: 83 c4 0c                      addl    $0xc, %esp
    // 16d: 5e                            popl    %esi
    // 16e: 5f                            popl    %edi
    // 16f: 5b                            popl    %ebx
    // 170: 5d                            popl    %ebp
    // 171: e9 00 00 00 00                jmp     0x176 <__JIT_ENTRY+0x176>
    // 00000172:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 176: 89 74 24 28                   movl    %esi, 0x28(%esp)
    // 17a: 89 4c 24 24                   movl    %ecx, 0x24(%esp)
    // 17e: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // 182: 83 c4 0c                      addl    $0xc, %esp
    // 185: 5e                            popl    %esi
    // 186: 5f                            popl    %edi
    // 187: 5b                            popl    %ebx
    // 188: 5d                            popl    %ebp
    // 189: e9 00 00 00 00                jmp     0x18e <__JIT_ENTRY+0x18e>
    // 0000018a:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[398] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x0c, 0x8b,
        0x74, 0x24, 0x28, 0x8b, 0x7c, 0x24, 0x20, 0x8b,
        0x44, 0x24, 0x24, 0x8b, 0x4f, 0x08, 0x89, 0x47,
        0x20, 0x51, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x8b, 0x4f, 0x20, 0xc7, 0x47, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84,
        0x42, 0x01, 0x00, 0x00, 0x89, 0x74, 0x24, 0x08,
        0x89, 0x4f, 0x20, 0x83, 0x47, 0x1c, 0x02, 0x0f,
        0x10, 0x07, 0x0f, 0x11, 0x40, 0x24, 0x0f, 0x10,
        0x47, 0x1c, 0x0f, 0x11, 0x40, 0x40, 0x0f, 0x10,
        0x47, 0x10, 0x0f, 0x11, 0x40, 0x34, 0x8b, 0x5f,
        0x20, 0x8d, 0x57, 0x28, 0x29, 0xd3, 0x8d, 0x0c,
        0x18, 0x83, 0xc1, 0x4c, 0xc1, 0xfb, 0x02, 0x89,
        0x48, 0x44, 0x83, 0xfb, 0x02, 0x0f, 0x8c, 0xb4,
        0x00, 0x00, 0x00, 0xbd, 0x01, 0x00, 0x00, 0x00,
        0x83, 0xfb, 0x09, 0x72, 0x45, 0x89, 0xc1, 0x29,
        0xf9, 0x83, 0xc1, 0x24, 0x83, 0xf9, 0x20, 0x72,
        0x39, 0x8d, 0x4b, 0xff, 0x89, 0xcd, 0x83, 0xe5,
        0xf8, 0x8d, 0x75, 0x01, 0x89, 0x34, 0x24, 0x31,
        0xf6, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x10, 0x44, 0xb7, 0x2c, 0x0f, 0x10, 0x4c,
        0xb7, 0x3c, 0x0f, 0x11, 0x44, 0xb0, 0x50, 0x0f,
        0x11, 0x4c, 0xb0, 0x60, 0x83, 0xc6, 0x08, 0x39,
        0xf5, 0x75, 0xe5, 0x39, 0xe9, 0x8b, 0x2c, 0x24,
        0x74, 0x65, 0x89, 0x5c, 0x24, 0x04, 0x89, 0xd9,
        0x29, 0xe9, 0x89, 0x2c, 0x24, 0x83, 0xe1, 0x03,
        0x74, 0x1c, 0x89, 0xc6, 0x83, 0xc6, 0x4c, 0x8b,
        0x2c, 0x24, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00,
        0x89, 0xd3, 0x8b, 0x14, 0xaa, 0x89, 0x14, 0xae,
        0x89, 0xda, 0x45, 0x49, 0x75, 0xf2, 0x8b, 0x54,
        0x24, 0x04, 0x8b, 0x0c, 0x24, 0x29, 0xd1, 0x83,
        0xf9, 0xfc, 0x77, 0x2b, 0x0f, 0x1f, 0x40, 0x00,
        0x8b, 0x4c, 0xaf, 0x28, 0x89, 0x4c, 0xa8, 0x4c,
        0x8b, 0x4c, 0xaf, 0x2c, 0x89, 0x4c, 0xa8, 0x50,
        0x8b, 0x4c, 0xaf, 0x30, 0x89, 0x4c, 0xa8, 0x54,
        0x8b, 0x4c, 0xaf, 0x34, 0x89, 0x4c, 0xa8, 0x58,
        0x83, 0xc5, 0x04, 0x39, 0xea, 0x75, 0xd9, 0xc7,
        0x40, 0x28, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x40,
        0x23, 0xfd, 0xc6, 0x40, 0x4a, 0x01, 0x8b, 0x5c,
        0x24, 0x08, 0xff, 0x43, 0x1c, 0x8b, 0x77, 0x04,
        0x57, 0x53, 0x89, 0xc7, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x08, 0x89, 0x73, 0x34, 0x8b,
        0x46, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x38, 0x83, 0xc0, 0x04, 0x89, 0x5c,
        0x24, 0x28, 0x89, 0x44, 0x24, 0x24, 0x89, 0x74,
        0x24, 0x20, 0x83, 0xc4, 0x0c, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x74,
        0x24, 0x28, 0x89, 0x4c, 0x24, 0x24, 0x89, 0x7c,
        0x24, 0x20, 0x83, 0xc4, 0x0c, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1b, (uintptr_t)&_Py_MakeCoro + -0x4);
    patch_x86_64_32rx(code + 0x145, (uintptr_t)&_PyThreadState_PopFrame + -0x4);
    patch_x86_64_32rx(code + 0x172, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x18a, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__RETURN_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _RETURN_VALUE.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 74 24 18                   movl    0x18(%esp), %esi
    // 7: 8b 44 24 10                   movl    0x10(%esp), %eax
    // b: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // f: 8b 79 fc                      movl    -0x4(%ecx), %edi
    // 12: 83 c1 fc                      addl    $-0x4, %ecx
    // 15: 89 48 20                      movl    %ecx, 0x20(%eax)
    // 18: ff 46 1c                      incl    0x1c(%esi)
    // 1b: 8b 58 04                      movl    0x4(%eax), %ebx
    // 1e: 89 5e 34                      movl    %ebx, 0x34(%esi)
    // 21: 50                            pushl   %eax
    // 22: 56                            pushl   %esi
    // 23: e8 00 00 00 00                calll   0x28 <__JIT_ENTRY+0x28>
    // 00000024:  IMAGE_REL_I386_REL32 __PyEval_FrameClearAndPop
    // 28: 83 c4 08                      addl    $0x8, %esp
    // 2b: 8b 43 20                      movl    0x20(%ebx), %eax
    // 2e: c7 43 20 00 00 00 00          movl    $0x0, 0x20(%ebx)
    // 35: 89 38                         movl    %edi, (%eax)
    // 37: 83 c0 04                      addl    $0x4, %eax
    // 3a: 89 5c 24 10                   movl    %ebx, 0x10(%esp)
    // 3e: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 42: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 46: 5e                            popl    %esi
    // 47: 5f                            popl    %edi
    // 48: 5b                            popl    %ebx
    // 49: e9 00 00 00 00                jmp     0x4e <__JIT_ENTRY+0x4e>
    // 0000004a:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[73] = {
        0x53, 0x57, 0x56, 0x8b, 0x74, 0x24, 0x18, 0x8b,
        0x44, 0x24, 0x10, 0x8b, 0x4c, 0x24, 0x14, 0x8b,
        0x79, 0xfc, 0x83, 0xc1, 0xfc, 0x89, 0x48, 0x20,
        0xff, 0x46, 0x1c, 0x8b, 0x58, 0x04, 0x89, 0x5e,
        0x34, 0x50, 0x56, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x08, 0x8b, 0x43, 0x20, 0xc7, 0x43,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x89, 0x38, 0x83,
        0xc0, 0x04, 0x89, 0x5c, 0x24, 0x10, 0x89, 0x44,
        0x24, 0x14, 0x89, 0x74, 0x24, 0x18, 0x5e, 0x5f,
        0x5b,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x24, (uintptr_t)&_PyEval_FrameClearAndPop + -0x4);
}

void
emit__SAVE_RETURN_OFFSET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SAVE_RETURN_OFFSET.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 44 24 10                   movl    0x10(%esp), %eax
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 54 24 08                   movl    0x8(%esp), %edx
    // d: be 00 00 00 00                movl    $0x0, %esi
    // 0000000e:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 12: 66 89 72 24                   movw    %si, 0x24(%edx)
    // 16: 89 54 24 08                   movl    %edx, 0x8(%esp)
    // 1a: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 1e: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 22: 5e                            popl    %esi
    // 23: e9 00 00 00 00                jmp     0x28 <__JIT_ENTRY+0x28>
    // 00000024:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[35] = {
        0x56, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x54, 0x24, 0x08, 0xbe, 0x00, 0x00,
        0x00, 0x00, 0x66, 0x89, 0x72, 0x24, 0x89, 0x54,
        0x24, 0x08, 0x89, 0x4c, 0x24, 0x0c, 0x89, 0x44,
        0x24, 0x10, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xe, instruction->oparg);
}

void
emit__SEND_GEN_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SEND_GEN_FRAME.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 54 24 1c                   movl    0x1c(%esp), %edx
    // 8: 8b 4c 24 18                   movl    0x18(%esp), %ecx
    // c: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 10: 8b 71 f8                      movl    -0x8(%ecx), %esi
    // 13: 8b 7e 04                      movl    0x4(%esi), %edi
    // 16: 81 ff 00 00 00 00             cmpl    $0x0, %edi
    // 00000018:  IMAGE_REL_I386_DIR32 _PyGen_Type
    // 1c: 0f 94 c3                      sete    %bl
    // 1f: 81 ff 00 00 00 00             cmpl    $0x0, %edi
    // 00000021:  IMAGE_REL_I386_DIR32 _PyCoro_Type
    // 25: 0f 94 c7                      sete    %bh
    // 28: 08 df                         orb     %bl, %bh
    // 2a: 74 06                         je      0x32 <__JIT_ENTRY+0x32>
    // 2c: 80 7e 23 00                   cmpb    $0x0, 0x23(%esi)
    // 30: 78 15                         js      0x47 <__JIT_ENTRY+0x47>
    // 32: 89 54 24 1c                   movl    %edx, 0x1c(%esp)
    // 36: 89 4c 24 18                   movl    %ecx, 0x18(%esp)
    // 3a: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 3e: 5e                            popl    %esi
    // 3f: 5f                            popl    %edi
    // 40: 5b                            popl    %ebx
    // 41: 5d                            popl    %ebp
    // 42: e9 00 00 00 00                jmp     0x47 <__JIT_ENTRY+0x47>
    // 00000043:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 47: 8b 79 fc                      movl    -0x4(%ecx), %edi
    // 4a: 8d 5e 24                      leal    0x24(%esi), %ebx
    // 4d: 8b 6e 44                      movl    0x44(%esi), %ebp
    // 50: 89 7d 00                      movl    %edi, (%ebp)
    // 53: 83 46 44 04                   addl    $0x4, 0x44(%esi)
    // 57: c6 46 23 00                   movb    $0x0, 0x23(%esi)
    // 5b: 8b 7a 4c                      movl    0x4c(%edx), %edi
    // 5e: 8d 6e 14                      leal    0x14(%esi), %ebp
    // 61: 89 7e 18                      movl    %edi, 0x18(%esi)
    // 64: 89 6a 4c                      movl    %ebp, 0x4c(%edx)
    // 67: 8d 3d 02 00 00 00             leal    0x2, %edi
    // 00000069:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 6d: 66 89 78 24                   movw    %di, 0x24(%eax)
    // 71: 89 46 28                      movl    %eax, 0x28(%esi)
    // 74: 89 59 fc                      movl    %ebx, -0x4(%ecx)
    // 77: 89 54 24 1c                   movl    %edx, 0x1c(%esp)
    // 7b: 89 4c 24 18                   movl    %ecx, 0x18(%esp)
    // 7f: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 83: 5e                            popl    %esi
    // 84: 5f                            popl    %edi
    // 85: 5b                            popl    %ebx
    // 86: 5d                            popl    %ebp
    // 87: e9 00 00 00 00                jmp     0x8c <__JIT_ENTRY+0x8c>
    // 00000088:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[135] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x54, 0x24, 0x1c,
        0x8b, 0x4c, 0x24, 0x18, 0x8b, 0x44, 0x24, 0x14,
        0x8b, 0x71, 0xf8, 0x8b, 0x7e, 0x04, 0x81, 0xff,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0x94, 0xc3, 0x81,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x94, 0xc7,
        0x08, 0xdf, 0x74, 0x06, 0x80, 0x7e, 0x23, 0x00,
        0x78, 0x15, 0x89, 0x54, 0x24, 0x1c, 0x89, 0x4c,
        0x24, 0x18, 0x89, 0x44, 0x24, 0x14, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x79, 0xfc, 0x8d, 0x5e, 0x24, 0x8b, 0x6e, 0x44,
        0x89, 0x7d, 0x00, 0x83, 0x46, 0x44, 0x04, 0xc6,
        0x46, 0x23, 0x00, 0x8b, 0x7a, 0x4c, 0x8d, 0x6e,
        0x14, 0x89, 0x7e, 0x18, 0x89, 0x6a, 0x4c, 0x8d,
        0x3d, 0x02, 0x00, 0x00, 0x00, 0x66, 0x89, 0x78,
        0x24, 0x89, 0x46, 0x28, 0x89, 0x59, 0xfc, 0x89,
        0x54, 0x24, 0x1c, 0x89, 0x4c, 0x24, 0x18, 0x89,
        0x44, 0x24, 0x14, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x18, (uintptr_t)&PyGen_Type);
    patch_32(code + 0x21, (uintptr_t)&PyCoro_Type);
    patch_x86_64_32rx(code + 0x43, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32(code + 0x69, instruction->oparg + 0x2);
}

void
emit__SETUP_ANNOTATIONS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SETUP_ANNOTATIONS.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 50                            pushl   %eax
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 4c 24 18                   movl    0x18(%esp), %ecx
    // 10: 8b 46 14                      movl    0x14(%esi), %eax
    // 13: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 16: 85 c0                         testl   %eax, %eax
    // 18: 74 66                         je      0x80 <__JIT_ENTRY+0x80>
    // 1a: 89 e1                         movl    %esp, %ecx
    // 1c: 51                            pushl   %ecx
    // 1d: 68 f0 4f 00 00                pushl   $0x4ff0                 # imm = 0x4FF0
    // 0000001e:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 22: 50                            pushl   %eax
    // 23: e8 00 00 00 00                calll   0x28 <__JIT_ENTRY+0x28>
    // 00000024:  IMAGE_REL_I386_REL32 _PyMapping_GetOptionalItem
    // 28: 83 c4 0c                      addl    $0xc, %esp
    // 2b: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 2e: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 35: 85 c0                         testl   %eax, %eax
    // 37: 0f 88 c6 00 00 00             js      0x103 <__JIT_ENTRY+0x103>
    // 3d: 8b 04 24                      movl    (%esp), %eax
    // 40: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 43: 85 c0                         testl   %eax, %eax
    // 45: 74 61                         je      0xa8 <__JIT_ENTRY+0xa8>
    // 47: 8b 08                         movl    (%eax), %ecx
    // 49: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 4f: 7f 0e                         jg      0x5f <__JIT_ENTRY+0x5f>
    // 51: 49                            decl    %ecx
    // 52: 89 08                         movl    %ecx, (%eax)
    // 54: 75 09                         jne     0x5f <__JIT_ENTRY+0x5f>
    // 56: 50                            pushl   %eax
    // 57: e8 00 00 00 00                calll   0x5c <__JIT_ENTRY+0x5c>
    // 00000058:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 5c: 83 c4 04                      addl    $0x4, %esp
    // 5f: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 62: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 69: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 6d: 89 4c 24 18                   movl    %ecx, 0x18(%esp)
    // 71: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 75: 83 c4 04                      addl    $0x4, %esp
    // 78: 5e                            popl    %esi
    // 79: 5f                            popl    %edi
    // 7a: 5b                            popl    %ebx
    // 7b: e9 00 00 00 00                jmp     0x80 <__JIT_ENTRY+0x80>
    // 0000007c:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 80: 68 00 00 00 00                pushl   $0x0
    // 00000081:  IMAGE_REL_I386_DIR32 ??_C@_0CM@CAADNNCE@no?5locals?5found?5when?5setting?5up?5@
    // 85: ff 35 00 00 00 00             pushl   0x0
    // 00000087:  IMAGE_REL_I386_DIR32 _PyExc_SystemError
    // 8b: 57                            pushl   %edi
    // 8c: e8 00 00 00 00                calll   0x91 <__JIT_ENTRY+0x91>
    // 0000008d:  IMAGE_REL_I386_REL32 __PyErr_Format
    // 91: 83 c4 0c                      addl    $0xc, %esp
    // 94: 8b 46 20                      movl    0x20(%esi), %eax
    // 97: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 9e: 89 44 24 18                   movl    %eax, 0x18(%esp)
    // a2: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // a6: eb 63                         jmp     0x10b <__JIT_ENTRY+0x10b>
    // a8: e8 00 00 00 00                calll   0xad <__JIT_ENTRY+0xad>
    // 000000a9:  IMAGE_REL_I386_REL32 _PyDict_New
    // ad: 89 04 24                      movl    %eax, (%esp)
    // b0: 8b 4e 20                      movl    0x20(%esi), %ecx
    // b3: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // ba: 85 c0                         testl   %eax, %eax
    // bc: 74 45                         je      0x103 <__JIT_ENTRY+0x103>
    // be: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // c1: 50                            pushl   %eax
    // c2: 68 f0 4f 00 00                pushl   $0x4ff0                 # imm = 0x4FF0
    // 000000c3:  IMAGE_REL_I386_DIR32 __PyRuntime
    // c7: ff 76 14                      pushl   0x14(%esi)
    // ca: e8 00 00 00 00                calll   0xcf <__JIT_ENTRY+0xcf>
    // 000000cb:  IMAGE_REL_I386_REL32 _PyObject_SetItem
    // cf: 83 c4 0c                      addl    $0xc, %esp
    // d2: 8b 0c 24                      movl    (%esp), %ecx
    // d5: 8b 11                         movl    (%ecx), %edx
    // d7: 81 fa ff ff ff 3f             cmpl    $0x3fffffff, %edx       # imm = 0x3FFFFFFF
    // dd: 7f 12                         jg      0xf1 <__JIT_ENTRY+0xf1>
    // df: 4a                            decl    %edx
    // e0: 89 11                         movl    %edx, (%ecx)
    // e2: 75 0d                         jne     0xf1 <__JIT_ENTRY+0xf1>
    // e4: 51                            pushl   %ecx
    // e5: 89 c3                         movl    %eax, %ebx
    // e7: e8 00 00 00 00                calll   0xec <__JIT_ENTRY+0xec>
    // 000000e8:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // ec: 89 d8                         movl    %ebx, %eax
    // ee: 83 c4 04                      addl    $0x4, %esp
    // f1: 8b 4e 20                      movl    0x20(%esi), %ecx
    // f4: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // fb: 85 c0                         testl   %eax, %eax
    // fd: 0f 84 66 ff ff ff             je      0x69 <__JIT_ENTRY+0x69>
    // 103: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 107: 89 4c 24 18                   movl    %ecx, 0x18(%esp)
    // 10b: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 10f: 83 c4 04                      addl    $0x4, %esp
    // 112: 5e                            popl    %esi
    // 113: 5f                            popl    %edi
    // 114: 5b                            popl    %ebx
    // 115: e9 00 00 00 00                jmp     0x11a <__JIT_ENTRY+0x11a>
    // 00000116:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[282] = {
        0x53, 0x57, 0x56, 0x50, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x4c, 0x24, 0x18,
        0x8b, 0x46, 0x14, 0x89, 0x4e, 0x20, 0x85, 0xc0,
        0x74, 0x66, 0x89, 0xe1, 0x51, 0x68, 0xf0, 0x4f,
        0x00, 0x00, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x0c, 0x8b, 0x4e, 0x20, 0xc7, 0x46,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f,
        0x88, 0xc6, 0x00, 0x00, 0x00, 0x8b, 0x04, 0x24,
        0x89, 0x4e, 0x20, 0x85, 0xc0, 0x74, 0x61, 0x8b,
        0x08, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x0e, 0x49, 0x89, 0x08, 0x75, 0x09, 0x50, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b,
        0x4e, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x74, 0x24, 0x14, 0x89, 0x4c, 0x24,
        0x18, 0x89, 0x7c, 0x24, 0x1c, 0x83, 0xc4, 0x04,
        0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x68, 0x00, 0x00, 0x00, 0x00, 0xff, 0x35, 0x00,
        0x00, 0x00, 0x00, 0x57, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x0c, 0x8b, 0x46, 0x20, 0xc7,
        0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x89, 0x44,
        0x24, 0x18, 0x89, 0x7c, 0x24, 0x1c, 0xeb, 0x63,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0x04, 0x24,
        0x8b, 0x4e, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x74, 0x45, 0x89, 0x4e,
        0x20, 0x50, 0x68, 0xf0, 0x4f, 0x00, 0x00, 0xff,
        0x76, 0x14, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x0c, 0x8b, 0x0c, 0x24, 0x8b, 0x11, 0x81,
        0xfa, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x12, 0x4a,
        0x89, 0x11, 0x75, 0x0d, 0x51, 0x89, 0xc3, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xd8, 0x83, 0xc4,
        0x04, 0x8b, 0x4e, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0x66,
        0xff, 0xff, 0xff, 0x89, 0x7c, 0x24, 0x1c, 0x89,
        0x4c, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14, 0x83,
        0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: 'no locals found when setting up annotations\x00'
    // 2c: 00 00 00 00
    const unsigned char data_body[48] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
        0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74,
        0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20,
        0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
        0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x1e, (uintptr_t)&_PyRuntime + 0x4ff0);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)&PyMapping_GetOptionalItem + -0x4);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x7c, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32(code + 0x81, (uintptr_t)data);
    patch_32(code + 0x87, (uintptr_t)&PyExc_SystemError);
    patch_x86_64_32rx(code + 0x8d, (uintptr_t)&_PyErr_Format + -0x4);
    patch_x86_64_32rx(code + 0xa9, (uintptr_t)&PyDict_New + -0x4);
    patch_32(code + 0xc3, (uintptr_t)&_PyRuntime + 0x4ff0);
    patch_x86_64_32rx(code + 0xcb, (uintptr_t)&PyObject_SetItem + -0x4);
    patch_x86_64_32rx(code + 0xe8, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x116, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__SET_ADD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SET_ADD.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 10: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000011:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 15: f7 d1                         notl    %ecx
    // 17: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 1a: c1 e1 02                      shll    $0x2, %ecx
    // 1d: 81 c9 00 00 fc ff             orl     $0xfffc0000, %ecx       # imm = 0xFFFC0000
    // 23: 8b 0c 08                      movl    (%eax,%ecx), %ecx
    // 26: 89 46 20                      movl    %eax, 0x20(%esi)
    // 29: 53                            pushl   %ebx
    // 2a: 51                            pushl   %ecx
    // 2b: e8 00 00 00 00                calll   0x30 <__JIT_ENTRY+0x30>
    // 0000002c:  IMAGE_REL_I386_REL32 _PySet_Add
    // 30: 83 c4 08                      addl    $0x8, %esp
    // 33: 8b 6e 20                      movl    0x20(%esi), %ebp
    // 36: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 3d: 8b 0b                         movl    (%ebx), %ecx
    // 3f: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 45: 7f 05                         jg      0x4c <__JIT_ENTRY+0x4c>
    // 47: 49                            decl    %ecx
    // 48: 89 0b                         movl    %ecx, (%ebx)
    // 4a: 74 1c                         je      0x68 <__JIT_ENTRY+0x68>
    // 4c: 83 c5 fc                      addl    $-0x4, %ebp
    // 4f: 85 c0                         testl   %eax, %eax
    // 51: 74 29                         je      0x7c <__JIT_ENTRY+0x7c>
    // 53: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 57: 89 6c 24 18                   movl    %ebp, 0x18(%esp)
    // 5b: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 5f: 5e                            popl    %esi
    // 60: 5f                            popl    %edi
    // 61: 5b                            popl    %ebx
    // 62: 5d                            popl    %ebp
    // 63: e9 00 00 00 00                jmp     0x68 <__JIT_ENTRY+0x68>
    // 00000064:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // 68: 53                            pushl   %ebx
    // 69: 89 c3                         movl    %eax, %ebx
    // 6b: e8 00 00 00 00                calll   0x70 <__JIT_ENTRY+0x70>
    // 0000006c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 70: 89 d8                         movl    %ebx, %eax
    // 72: 83 c4 04                      addl    $0x4, %esp
    // 75: 83 c5 fc                      addl    $-0x4, %ebp
    // 78: 85 c0                         testl   %eax, %eax
    // 7a: 75 d7                         jne     0x53 <__JIT_ENTRY+0x53>
    // 7c: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 80: 89 6c 24 18                   movl    %ebp, 0x18(%esp)
    // 84: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 88: 5e                            popl    %esi
    // 89: 5f                            popl    %edi
    // 8a: 5b                            popl    %ebx
    // 8b: 5d                            popl    %ebp
    // 8c: e9 00 00 00 00                jmp     0x91 <__JIT_ENTRY+0x91>
    // 0000008d:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[140] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x18,
        0xb9, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x8b,
        0x58, 0xfc, 0xc1, 0xe1, 0x02, 0x81, 0xc9, 0x00,
        0x00, 0xfc, 0xff, 0x8b, 0x0c, 0x08, 0x89, 0x46,
        0x20, 0x53, 0x51, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x08, 0x8b, 0x6e, 0x20, 0xc7, 0x46,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0b, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x05, 0x49,
        0x89, 0x0b, 0x74, 0x1c, 0x83, 0xc5, 0xfc, 0x85,
        0xc0, 0x74, 0x29, 0x89, 0x7c, 0x24, 0x1c, 0x89,
        0x6c, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x53, 0x89, 0xc3, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xd8, 0x83, 0xc4, 0x04, 0x83, 0xc5, 0xfc,
        0x85, 0xc0, 0x75, 0xd7, 0x89, 0x7c, 0x24, 0x1c,
        0x89, 0x6c, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14,
        0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x11, instruction->oparg);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)&PySet_Add + -0x4);
    patch_x86_64_32rx(code + 0x64, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x6c, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__SET_FUNCTION_ATTRIBUTE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SET_FUNCTION_ATTRIBUTE.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 8: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // c: 8b 54 24 18                   movl    0x18(%esp), %edx
    // 10: be 00 00 00 00                movl    $0x0, %esi
    // 00000011:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 15: 0f b7 f6                      movzwl  %si, %esi
    // 18: 8d 7a fc                      leal    -0x4(%edx), %edi
    // 1b: 8b 5a f8                      movl    -0x8(%edx), %ebx
    // 1e: 8b 6a fc                      movl    -0x4(%edx), %ebp
    // 21: 8b 34 b5 00 00 00 00          movl    (,%esi,4), %esi
    // 00000024:  IMAGE_REL_I386_DIR32 __Py_FunctionAttributeOffsets
    // 28: 89 5c 35 00                   movl    %ebx, (%ebp,%esi)
    // 2c: 89 6a f8                      movl    %ebp, -0x8(%edx)
    // 2f: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 33: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 37: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // 3b: 5e                            popl    %esi
    // 3c: 5f                            popl    %edi
    // 3d: 5b                            popl    %ebx
    // 3e: 5d                            popl    %ebp
    // 3f: e9 00 00 00 00                jmp     0x44 <__JIT_ENTRY+0x44>
    // 00000040:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[63] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x44, 0x24, 0x1c,
        0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x54, 0x24, 0x18,
        0xbe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6,
        0x8d, 0x7a, 0xfc, 0x8b, 0x5a, 0xf8, 0x8b, 0x6a,
        0xfc, 0x8b, 0x34, 0xb5, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x5c, 0x35, 0x00, 0x89, 0x6a, 0xf8, 0x89,
        0x4c, 0x24, 0x14, 0x89, 0x7c, 0x24, 0x18, 0x89,
        0x44, 0x24, 0x1c, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x11, instruction->oparg);
    patch_32(code + 0x24, (uintptr_t)&_Py_FunctionAttributeOffsets);
}

void
emit__SET_IP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SET_IP.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 4: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 8: 8b 54 24 04                   movl    0x4(%esp), %edx
    // c: c7 42 1c 00 00 00 00          movl    $0x0, 0x1c(%edx)
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 13: 89 54 24 04                   movl    %edx, 0x4(%esp)
    // 17: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 1b: 89 44 24 0c                   movl    %eax, 0xc(%esp)
    // 1f: e9 00 00 00 00                jmp     0x24 <__JIT_ENTRY+0x24>
    // 00000020:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[31] = {
        0x8b, 0x44, 0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x08,
        0x8b, 0x54, 0x24, 0x04, 0xc7, 0x42, 0x1c, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x04, 0x89,
        0x4c, 0x24, 0x08, 0x89, 0x44, 0x24, 0x0c,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, (instruction->operand0 & UINT32_MAX));
}

void
emit__SET_UPDATE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SET_UPDATE.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 10: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000011:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 15: f7 d1                         notl    %ecx
    // 17: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 1a: c1 e1 02                      shll    $0x2, %ecx
    // 1d: 81 c9 00 00 fc ff             orl     $0xfffc0000, %ecx       # imm = 0xFFFC0000
    // 23: 8b 0c 08                      movl    (%eax,%ecx), %ecx
    // 26: 89 46 20                      movl    %eax, 0x20(%esi)
    // 29: 53                            pushl   %ebx
    // 2a: 51                            pushl   %ecx
    // 2b: e8 00 00 00 00                calll   0x30 <__JIT_ENTRY+0x30>
    // 0000002c:  IMAGE_REL_I386_REL32 __PySet_Update
    // 30: 83 c4 08                      addl    $0x8, %esp
    // 33: 8b 6e 20                      movl    0x20(%esi), %ebp
    // 36: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 3d: 8b 0b                         movl    (%ebx), %ecx
    // 3f: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 45: 7f 05                         jg      0x4c <__JIT_ENTRY+0x4c>
    // 47: 49                            decl    %ecx
    // 48: 89 0b                         movl    %ecx, (%ebx)
    // 4a: 74 1c                         je      0x68 <__JIT_ENTRY+0x68>
    // 4c: 83 c5 fc                      addl    $-0x4, %ebp
    // 4f: 85 c0                         testl   %eax, %eax
    // 51: 78 29                         js      0x7c <__JIT_ENTRY+0x7c>
    // 53: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 57: 89 6c 24 18                   movl    %ebp, 0x18(%esp)
    // 5b: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 5f: 5e                            popl    %esi
    // 60: 5f                            popl    %edi
    // 61: 5b                            popl    %ebx
    // 62: 5d                            popl    %ebp
    // 63: e9 00 00 00 00                jmp     0x68 <__JIT_ENTRY+0x68>
    // 00000064:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 68: 53                            pushl   %ebx
    // 69: 89 c3                         movl    %eax, %ebx
    // 6b: e8 00 00 00 00                calll   0x70 <__JIT_ENTRY+0x70>
    // 0000006c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 70: 89 d8                         movl    %ebx, %eax
    // 72: 83 c4 04                      addl    $0x4, %esp
    // 75: 83 c5 fc                      addl    $-0x4, %ebp
    // 78: 85 c0                         testl   %eax, %eax
    // 7a: 79 d7                         jns     0x53 <__JIT_ENTRY+0x53>
    // 7c: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 80: 89 6c 24 18                   movl    %ebp, 0x18(%esp)
    // 84: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 88: 5e                            popl    %esi
    // 89: 5f                            popl    %edi
    // 8a: 5b                            popl    %ebx
    // 8b: 5d                            popl    %ebp
    // 8c: e9 00 00 00 00                jmp     0x91 <__JIT_ENTRY+0x91>
    // 0000008d:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[145] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x18,
        0xb9, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x8b,
        0x58, 0xfc, 0xc1, 0xe1, 0x02, 0x81, 0xc9, 0x00,
        0x00, 0xfc, 0xff, 0x8b, 0x0c, 0x08, 0x89, 0x46,
        0x20, 0x53, 0x51, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x08, 0x8b, 0x6e, 0x20, 0xc7, 0x46,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0b, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x05, 0x49,
        0x89, 0x0b, 0x74, 0x1c, 0x83, 0xc5, 0xfc, 0x85,
        0xc0, 0x78, 0x29, 0x89, 0x7c, 0x24, 0x1c, 0x89,
        0x6c, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x53, 0x89, 0xc3, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xd8, 0x83, 0xc4, 0x04, 0x83, 0xc5, 0xfc,
        0x85, 0xc0, 0x79, 0xd7, 0x89, 0x7c, 0x24, 0x1c,
        0x89, 0x6c, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x11, instruction->oparg);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)&_PySet_Update + -0x4);
    patch_x86_64_32rx(code + 0x64, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x6c, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x8d, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__START_EXECUTOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _START_EXECUTOR.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 44 24 10                   movl    0x10(%esp), %eax
    // e: 89 46 20                      movl    %eax, 0x20(%esi)
    // 11: 8b 87 a4 00 00 00             movl    0xa4(%edi), %eax
    // 17: 85 c0                         testl   %eax, %eax
    // 19: 74 22                         je      0x3d <__JIT_ENTRY+0x3d>
    // 1b: c7 87 a4 00 00 00 00 00 00 00 movl    $0x0, 0xa4(%edi)
    // 25: 8b 08                         movl    (%eax), %ecx
    // 27: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 2d: 7f 0e                         jg      0x3d <__JIT_ENTRY+0x3d>
    // 2f: 49                            decl    %ecx
    // 30: 89 08                         movl    %ecx, (%eax)
    // 32: 75 09                         jne     0x3d <__JIT_ENTRY+0x3d>
    // 34: 50                            pushl   %eax
    // 35: e8 00 00 00 00                calll   0x3a <__JIT_ENTRY+0x3a>
    // 00000036:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 3a: 83 c4 04                      addl    $0x4, %esp
    // 3d: 8b 46 20                      movl    0x20(%esi), %eax
    // 40: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 47: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 4b: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 4f: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 53: 5e                            popl    %esi
    // 54: 5f                            popl    %edi
    // 55: e9 00 00 00 00                jmp     0x5a <__JIT_ENTRY+0x5a>
    // 00000056:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[85] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x44, 0x24, 0x10, 0x89, 0x46,
        0x20, 0x8b, 0x87, 0xa4, 0x00, 0x00, 0x00, 0x85,
        0xc0, 0x74, 0x22, 0xc7, 0x87, 0xa4, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x08, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x49,
        0x89, 0x08, 0x75, 0x09, 0x50, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b, 0x46, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x89,
        0x7c, 0x24, 0x14, 0x89, 0x44, 0x24, 0x10, 0x89,
        0x74, 0x24, 0x0c, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x36, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_ATTR.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 9: 89 04 24                      movl    %eax, (%esp)
    // c: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 10: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 14: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000015:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 19: 0f b7 c9                      movzwl  %cx, %ecx
    // 1c: 8b 70 f8                      movl    -0x8(%eax), %esi
    // 1f: 8b 68 fc                      movl    -0x4(%eax), %ebp
    // 22: 8b 17                         movl    (%edi), %edx
    // 24: 8b 52 10                      movl    0x10(%edx), %edx
    // 27: 8b 4c 8a 0c                   movl    0xc(%edx,%ecx,4), %ecx
    // 2b: 89 47 20                      movl    %eax, 0x20(%edi)
    // 2e: 56                            pushl   %esi
    // 2f: 51                            pushl   %ecx
    // 30: 55                            pushl   %ebp
    // 31: e8 00 00 00 00                calll   0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 _PyObject_SetAttr
    // 36: 83 c4 0c                      addl    $0xc, %esp
    // 39: 8b 5f 20                      movl    0x20(%edi), %ebx
    // 3c: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 43: 8b 0e                         movl    (%esi), %ecx
    // 45: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 4b: 7f 05                         jg      0x52 <__JIT_ENTRY+0x52>
    // 4d: 49                            decl    %ecx
    // 4e: 89 0e                         movl    %ecx, (%esi)
    // 50: 74 20                         je      0x72 <__JIT_ENTRY+0x72>
    // 52: 8b 4d 00                      movl    (%ebp), %ecx
    // 55: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 5b: 7f 2d                         jg      0x8a <__JIT_ENTRY+0x8a>
    // 5d: 49                            decl    %ecx
    // 5e: 89 4d 00                      movl    %ecx, (%ebp)
    // 61: 75 27                         jne     0x8a <__JIT_ENTRY+0x8a>
    // 63: 55                            pushl   %ebp
    // 64: 89 c6                         movl    %eax, %esi
    // 66: e8 00 00 00 00                calll   0x6b <__JIT_ENTRY+0x6b>
    // 00000067:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 6b: 89 f0                         movl    %esi, %eax
    // 6d: 83 c4 04                      addl    $0x4, %esp
    // 70: eb 18                         jmp     0x8a <__JIT_ENTRY+0x8a>
    // 72: 56                            pushl   %esi
    // 73: 89 c6                         movl    %eax, %esi
    // 75: e8 00 00 00 00                calll   0x7a <__JIT_ENTRY+0x7a>
    // 00000076:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 7a: 89 f0                         movl    %esi, %eax
    // 7c: 83 c4 04                      addl    $0x4, %esp
    // 7f: 8b 4d 00                      movl    (%ebp), %ecx
    // 82: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 88: 7e d3                         jle     0x5d <__JIT_ENTRY+0x5d>
    // 8a: 83 c3 f8                      addl    $-0x8, %ebx
    // 8d: 85 c0                         testl   %eax, %eax
    // 8f: 74 1b                         je      0xac <__JIT_ENTRY+0xac>
    // 91: 8b 04 24                      movl    (%esp), %eax
    // 94: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 98: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 9c: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // a0: 83 c4 04                      addl    $0x4, %esp
    // a3: 5e                            popl    %esi
    // a4: 5f                            popl    %edi
    // a5: 5b                            popl    %ebx
    // a6: 5d                            popl    %ebp
    // a7: e9 00 00 00 00                jmp     0xac <__JIT_ENTRY+0xac>
    // 000000a8:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // ac: 8b 04 24                      movl    (%esp), %eax
    // af: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // b3: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // b7: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // bb: 83 c4 04                      addl    $0x4, %esp
    // be: 5e                            popl    %esi
    // bf: 5f                            popl    %edi
    // c0: 5b                            popl    %ebx
    // c1: 5d                            popl    %ebp
    // c2: e9 00 00 00 00                jmp     0xc7 <__JIT_ENTRY+0xc7>
    // 000000c3:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[194] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x44, 0x24,
        0x20, 0x89, 0x04, 0x24, 0x8b, 0x7c, 0x24, 0x18,
        0x8b, 0x44, 0x24, 0x1c, 0xb9, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xb7, 0xc9, 0x8b, 0x70, 0xf8, 0x8b,
        0x68, 0xfc, 0x8b, 0x17, 0x8b, 0x52, 0x10, 0x8b,
        0x4c, 0x8a, 0x0c, 0x89, 0x47, 0x20, 0x56, 0x51,
        0x55, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x0c, 0x8b, 0x5f, 0x20, 0xc7, 0x47, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x0e, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x05, 0x49, 0x89, 0x0e,
        0x74, 0x20, 0x8b, 0x4d, 0x00, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x2d, 0x49, 0x89, 0x4d,
        0x00, 0x75, 0x27, 0x55, 0x89, 0xc6, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xf0, 0x83, 0xc4, 0x04,
        0xeb, 0x18, 0x56, 0x89, 0xc6, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xf0, 0x83, 0xc4, 0x04, 0x8b,
        0x4d, 0x00, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f,
        0x7e, 0xd3, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x74,
        0x1b, 0x8b, 0x04, 0x24, 0x89, 0x44, 0x24, 0x20,
        0x89, 0x5c, 0x24, 0x1c, 0x89, 0x7c, 0x24, 0x18,
        0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x04, 0x24, 0x89,
        0x44, 0x24, 0x20, 0x89, 0x5c, 0x24, 0x1c, 0x89,
        0x7c, 0x24, 0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f,
        0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x15, instruction->oparg);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)&PyObject_SetAttr + -0x4);
    patch_x86_64_32rx(code + 0x67, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x76, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xa8, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__STORE_ATTR_INSTANCE_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_ATTR_INSTANCE_VALUE.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 10                      subl    $0x10, %esp
    // 7: 8b 7c 24 2c                   movl    0x2c(%esp), %edi
    // b: 8b 74 24 24                   movl    0x24(%esp), %esi
    // f: 8b 4c 24 28                   movl    0x28(%esp), %ecx
    // 13: 8b 59 f8                      movl    -0x8(%ecx), %ebx
    // 16: 8b 41 fc                      movl    -0x4(%ecx), %eax
    // 19: 83 c1 f8                      addl    $-0x8, %ecx
    // 1c: ba 00 00 00 00                movl    $0x0, %edx
    // 0000001d:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 21: 0f b7 d2                      movzwl  %dx, %edx
    // 24: 8b 2c 10                      movl    (%eax,%edx), %ebp
    // 27: 89 1c 10                      movl    %ebx, (%eax,%edx)
    // 2a: 85 ed                         testl   %ebp, %ebp
    // 2c: 74 0f                         je      0x3d <__JIT_ENTRY+0x3d>
    // 2e: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 31: 8b 08                         movl    (%eax), %ecx
    // 33: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 39: 7e 59                         jle     0x94 <__JIT_ENTRY+0x94>
    // 3b: eb 65                         jmp     0xa2 <__JIT_ENTRY+0xa2>
    // 3d: 01 c2                         addl    %eax, %edx
    // 3f: 8b 58 04                      movl    0x4(%eax), %ebx
    // 42: 89 6c 24 08                   movl    %ebp, 0x8(%esp)
    // 46: 8b 6b 10                      movl    0x10(%ebx), %ebp
    // 49: 8d 1c 28                      leal    (%eax,%ebp), %ebx
    // 4c: 89 5c 24 04                   movl    %ebx, 0x4(%esp)
    // 50: 8d 1c 28                      leal    (%eax,%ebp), %ebx
    // 53: 83 c3 04                      addl    $0x4, %ebx
    // 56: 29 da                         subl    %ebx, %edx
    // 58: c1 ea 02                      shrl    $0x2, %edx
    // 5b: 0f b6 5c 28 01                movzbl  0x1(%eax,%ebp), %ebx
    // 60: 89 7c 24 0c                   movl    %edi, 0xc(%esp)
    // 64: 0f b6 3c 28                   movzbl  (%eax,%ebp), %edi
    // 68: 89 34 24                      movl    %esi, (%esp)
    // 6b: 8b 74 24 04                   movl    0x4(%esp), %esi
    // 6f: 8d 7c be 04                   leal    0x4(%esi,%edi,4), %edi
    // 73: 8b 34 24                      movl    (%esp), %esi
    // 76: 88 14 3b                      movb    %dl, (%ebx,%edi)
    // 79: 8b 7c 24 0c                   movl    0xc(%esp), %edi
    // 7d: fe c3                         incb    %bl
    // 7f: 88 5c 28 01                   movb    %bl, 0x1(%eax,%ebp)
    // 83: 8b 6c 24 08                   movl    0x8(%esp), %ebp
    // 87: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 8a: 8b 08                         movl    (%eax), %ecx
    // 8c: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 92: 7f 0e                         jg      0xa2 <__JIT_ENTRY+0xa2>
    // 94: 49                            decl    %ecx
    // 95: 89 08                         movl    %ecx, (%eax)
    // 97: 75 09                         jne     0xa2 <__JIT_ENTRY+0xa2>
    // 99: 50                            pushl   %eax
    // 9a: e8 00 00 00 00                calll   0x9f <__JIT_ENTRY+0x9f>
    // 0000009b:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 9f: 83 c4 04                      addl    $0x4, %esp
    // a2: 85 ed                         testl   %ebp, %ebp
    // a4: 74 19                         je      0xbf <__JIT_ENTRY+0xbf>
    // a6: 8b 45 00                      movl    (%ebp), %eax
    // a9: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // ae: 7f 0f                         jg      0xbf <__JIT_ENTRY+0xbf>
    // b0: 48                            decl    %eax
    // b1: 89 45 00                      movl    %eax, (%ebp)
    // b4: 75 09                         jne     0xbf <__JIT_ENTRY+0xbf>
    // b6: 55                            pushl   %ebp
    // b7: e8 00 00 00 00                calll   0xbc <__JIT_ENTRY+0xbc>
    // 000000b8:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // bc: 83 c4 04                      addl    $0x4, %esp
    // bf: 8b 46 20                      movl    0x20(%esi), %eax
    // c2: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // c9: 89 7c 24 2c                   movl    %edi, 0x2c(%esp)
    // cd: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // d1: 89 74 24 24                   movl    %esi, 0x24(%esp)
    // d5: 83 c4 10                      addl    $0x10, %esp
    // d8: 5e                            popl    %esi
    // d9: 5f                            popl    %edi
    // da: 5b                            popl    %ebx
    // db: 5d                            popl    %ebp
    // dc: e9 00 00 00 00                jmp     0xe1 <__JIT_ENTRY+0xe1>
    // 000000dd:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[220] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x10, 0x8b,
        0x7c, 0x24, 0x2c, 0x8b, 0x74, 0x24, 0x24, 0x8b,
        0x4c, 0x24, 0x28, 0x8b, 0x59, 0xf8, 0x8b, 0x41,
        0xfc, 0x83, 0xc1, 0xf8, 0xba, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xb7, 0xd2, 0x8b, 0x2c, 0x10, 0x89,
        0x1c, 0x10, 0x85, 0xed, 0x74, 0x0f, 0x89, 0x4e,
        0x20, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7e, 0x59, 0xeb, 0x65, 0x01, 0xc2, 0x8b,
        0x58, 0x04, 0x89, 0x6c, 0x24, 0x08, 0x8b, 0x6b,
        0x10, 0x8d, 0x1c, 0x28, 0x89, 0x5c, 0x24, 0x04,
        0x8d, 0x1c, 0x28, 0x83, 0xc3, 0x04, 0x29, 0xda,
        0xc1, 0xea, 0x02, 0x0f, 0xb6, 0x5c, 0x28, 0x01,
        0x89, 0x7c, 0x24, 0x0c, 0x0f, 0xb6, 0x3c, 0x28,
        0x89, 0x34, 0x24, 0x8b, 0x74, 0x24, 0x04, 0x8d,
        0x7c, 0xbe, 0x04, 0x8b, 0x34, 0x24, 0x88, 0x14,
        0x3b, 0x8b, 0x7c, 0x24, 0x0c, 0xfe, 0xc3, 0x88,
        0x5c, 0x28, 0x01, 0x8b, 0x6c, 0x24, 0x08, 0x89,
        0x4e, 0x20, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75,
        0x09, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x85, 0xed, 0x74, 0x19, 0x8b, 0x45,
        0x00, 0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0f,
        0x48, 0x89, 0x45, 0x00, 0x75, 0x09, 0x55, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b,
        0x46, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x89, 0x7c, 0x24, 0x2c, 0x89, 0x44, 0x24,
        0x28, 0x89, 0x74, 0x24, 0x24, 0x83, 0xc4, 0x10,
        0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x1d, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x9b, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xb8, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_ATTR_SLOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_ATTR_SLOT.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 4c 24 18                   movl    0x18(%esp), %ecx
    // 10: 8b 51 f8                      movl    -0x8(%ecx), %edx
    // 13: 8b 41 fc                      movl    -0x4(%ecx), %eax
    // 16: 83 c1 f8                      addl    $-0x8, %ecx
    // 19: bb 00 00 00 00                movl    $0x0, %ebx
    // 0000001a:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 1e: 0f b7 eb                      movzwl  %bx, %ebp
    // 21: 8b 1c 28                      movl    (%eax,%ebp), %ebx
    // 24: 89 14 28                      movl    %edx, (%eax,%ebp)
    // 27: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 2a: 8b 08                         movl    (%eax), %ecx
    // 2c: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 32: 7f 0e                         jg      0x42 <__JIT_ENTRY+0x42>
    // 34: 49                            decl    %ecx
    // 35: 89 08                         movl    %ecx, (%eax)
    // 37: 75 09                         jne     0x42 <__JIT_ENTRY+0x42>
    // 39: 50                            pushl   %eax
    // 3a: e8 00 00 00 00                calll   0x3f <__JIT_ENTRY+0x3f>
    // 0000003b:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 3f: 83 c4 04                      addl    $0x4, %esp
    // 42: 85 db                         testl   %ebx, %ebx
    // 44: 74 17                         je      0x5d <__JIT_ENTRY+0x5d>
    // 46: 8b 03                         movl    (%ebx), %eax
    // 48: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 4d: 7f 0e                         jg      0x5d <__JIT_ENTRY+0x5d>
    // 4f: 48                            decl    %eax
    // 50: 89 03                         movl    %eax, (%ebx)
    // 52: 75 09                         jne     0x5d <__JIT_ENTRY+0x5d>
    // 54: 53                            pushl   %ebx
    // 55: e8 00 00 00 00                calll   0x5a <__JIT_ENTRY+0x5a>
    // 00000056:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 5a: 83 c4 04                      addl    $0x4, %esp
    // 5d: 8b 46 20                      movl    0x20(%esi), %eax
    // 60: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 67: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 6b: 89 44 24 18                   movl    %eax, 0x18(%esp)
    // 6f: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 73: 5e                            popl    %esi
    // 74: 5f                            popl    %edi
    // 75: 5b                            popl    %ebx
    // 76: 5d                            popl    %ebp
    // 77: e9 00 00 00 00                jmp     0x7c <__JIT_ENTRY+0x7c>
    // 00000078:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[119] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x4c, 0x24, 0x18,
        0x8b, 0x51, 0xf8, 0x8b, 0x41, 0xfc, 0x83, 0xc1,
        0xf8, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xeb, 0x8b, 0x1c, 0x28, 0x89, 0x14, 0x28, 0x89,
        0x4e, 0x20, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75,
        0x09, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x85, 0xdb, 0x74, 0x17, 0x8b, 0x03,
        0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x48,
        0x89, 0x03, 0x75, 0x09, 0x53, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b, 0x46, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x89,
        0x7c, 0x24, 0x1c, 0x89, 0x44, 0x24, 0x18, 0x89,
        0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x1a, (instruction->operand0 & UINT32_MAX));
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x56, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_ATTR_WITH_HINT.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 20                      subl    $0x20, %esp
    // 7: 8b 4c 24 3c                   movl    0x3c(%esp), %ecx
    // b: 8b 44 24 38                   movl    0x38(%esp), %eax
    // f: 8b 74 24 34                   movl    0x34(%esp), %esi
    // 13: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 16: 8b 53 f4                      movl    -0xc(%ebx), %edx
    // 19: 85 d2                         testl   %edx, %edx
    // 1b: 74 75                         je      0x92 <__JIT_ENTRY+0x92>
    // 1d: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 21: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000022:  IMAGE_REL_I386_DIR32 __JIT_OPERAND0_LO
    // 26: 0f b7 e9                      movzwl  %cx, %ebp
    // 29: 8b 7a 18                      movl    0x18(%edx), %edi
    // 2c: 39 6f 10                      cmpl    %ebp, 0x10(%edi)
    // 2f: 76 5d                         jbe     0x8e <__JIT_ENTRY+0x8e>
    // 31: 80 7f 06 00                   cmpb    $0x0, 0x6(%edi)
    // 35: 74 57                         je      0x8e <__JIT_ENTRY+0x8e>
    // 37: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 3b: b9 00 00 00 00                movl    $0x0, %ecx
    // 0000003c:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 40: 0f b7 c9                      movzwl  %cx, %ecx
    // 43: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 47: 8b 0e                         movl    (%esi), %ecx
    // 49: 8b 49 10                      movl    0x10(%ecx), %ecx
    // 4c: 89 0c 24                      movl    %ecx, (%esp)
    // 4f: 0f b6 4f 05                   movzbl  0x5(%edi), %ecx
    // 53: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 57: be 01 00 00 00                movl    $0x1, %esi
    // 5c: d3 e6                         shll    %cl, %esi
    // 5e: 89 eb                         movl    %ebp, %ebx
    // 60: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 64: 8b 2c 24                      movl    (%esp), %ebp
    // 67: 8b 6c 8d 0c                   movl    0xc(%ebp,%ecx,4), %ebp
    // 6b: 8d 0c 37                      leal    (%edi,%esi), %ecx
    // 6e: 89 5c 24 08                   movl    %ebx, 0x8(%esp)
    // 72: 39 6c d9 14                   cmpl    %ebp, 0x14(%ecx,%ebx,8)
    // 76: 74 32                         je      0xaa <__JIT_ENTRY+0xaa>
    // 78: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 7c: 89 4c 24 3c                   movl    %ecx, 0x3c(%esp)
    // 80: 89 44 24 38                   movl    %eax, 0x38(%esp)
    // 84: 8b 44 24 0c                   movl    0xc(%esp), %eax
    // 88: 89 44 24 34                   movl    %eax, 0x34(%esp)
    // 8c: eb 10                         jmp     0x9e <__JIT_ENTRY+0x9e>
    // 8e: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 92: 89 4c 24 3c                   movl    %ecx, 0x3c(%esp)
    // 96: 89 44 24 38                   movl    %eax, 0x38(%esp)
    // 9a: 89 74 24 34                   movl    %esi, 0x34(%esp)
    // 9e: 83 c4 20                      addl    $0x20, %esp
    // a1: 5e                            popl    %esi
    // a2: 5f                            popl    %edi
    // a3: 5b                            popl    %ebx
    // a4: 5d                            popl    %ebp
    // a5: e9 00 00 00 00                jmp     0xaa <__JIT_ENTRY+0xaa>
    // 000000a6:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // aa: 89 6c 24 18                   movl    %ebp, 0x18(%esp)
    // ae: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // b2: 01 f7                         addl    %esi, %edi
    // b4: 83 c7 14                      addl    $0x14, %edi
    // b7: 8b 6c 24 08                   movl    0x8(%esp), %ebp
    // bb: 8b 74 ef 04                   movl    0x4(%edi,%ebp,8), %esi
    // bf: 85 f6                         testl   %esi, %esi
    // c1: 8b 5c 24 1c                   movl    0x1c(%esp), %ebx
    // c5: 0f 84 9a 00 00 00             je      0x165 <__JIT_ENTRY+0x165>
    // cb: 89 7c 24 10                   movl    %edi, 0x10(%esp)
    // cf: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // d3: 8b 70 f8                      movl    -0x8(%eax), %esi
    // d6: 89 34 24                      movl    %esi, (%esp)
    // d9: 89 ce                         movl    %ecx, %esi
    // db: 89 41 20                      movl    %eax, 0x20(%ecx)
    // de: 0f b6 7a 10                   movzbl  0x10(%edx), %edi
    // e2: 85 ff                         testl   %edi, %edi
    // e4: 74 16                         je      0xfc <__JIT_ENTRY+0xfc>
    // e6: ff 34 24                      pushl   (%esp)
    // e9: ff 74 24 1c                   pushl   0x1c(%esp)
    // ed: 52                            pushl   %edx
    // ee: 6a 01                         pushl   $0x1
    // f0: 57                            pushl   %edi
    // f1: e8 00 00 00 00                calll   0xf6 <__JIT_ENTRY+0xf6>
    // 000000f2:  IMAGE_REL_I386_REL32 __PyDict_SendEvent
    // f6: 83 c4 14                      addl    $0x14, %esp
    // f9: 8b 46 20                      movl    0x20(%esi), %eax
    // fc: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // 100: 8b 14 24                      movl    (%esp), %edx
    // 103: 89 54 e9 04                   movl    %edx, 0x4(%ecx,%ebp,8)
    // 107: 83 c0 f8                      addl    $-0x8, %eax
    // 10a: 89 46 20                      movl    %eax, 0x20(%esi)
    // 10d: 8b 03                         movl    (%ebx), %eax
    // 10f: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 114: 7f 0e                         jg      0x124 <__JIT_ENTRY+0x124>
    // 116: 48                            decl    %eax
    // 117: 89 03                         movl    %eax, (%ebx)
    // 119: 75 09                         jne     0x124 <__JIT_ENTRY+0x124>
    // 11b: 53                            pushl   %ebx
    // 11c: e8 00 00 00 00                calll   0x121 <__JIT_ENTRY+0x121>
    // 0000011d:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 121: 83 c4 04                      addl    $0x4, %esp
    // 124: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // 128: 8b 01                         movl    (%ecx), %eax
    // 12a: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 12f: 7f 0e                         jg      0x13f <__JIT_ENTRY+0x13f>
    // 131: 48                            decl    %eax
    // 132: 89 01                         movl    %eax, (%ecx)
    // 134: 75 09                         jne     0x13f <__JIT_ENTRY+0x13f>
    // 136: 51                            pushl   %ecx
    // 137: e8 00 00 00 00                calll   0x13c <__JIT_ENTRY+0x13c>
    // 00000138:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 13c: 83 c4 04                      addl    $0x4, %esp
    // 13f: 8b 46 20                      movl    0x20(%esi), %eax
    // 142: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 149: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 14d: 89 4c 24 3c                   movl    %ecx, 0x3c(%esp)
    // 151: 89 44 24 38                   movl    %eax, 0x38(%esp)
    // 155: 89 74 24 34                   movl    %esi, 0x34(%esp)
    // 159: 83 c4 20                      addl    $0x20, %esp
    // 15c: 5e                            popl    %esi
    // 15d: 5f                            popl    %edi
    // 15e: 5b                            popl    %ebx
    // 15f: 5d                            popl    %ebp
    // 160: e9 00 00 00 00                jmp     0x165 <__JIT_ENTRY+0x165>
    // 00000161:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 165: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 169: 89 54 24 3c                   movl    %edx, 0x3c(%esp)
    // 16d: 89 44 24 38                   movl    %eax, 0x38(%esp)
    // 171: 89 4c 24 34                   movl    %ecx, 0x34(%esp)
    // 175: e9 24 ff ff ff                jmp     0x9e <__JIT_ENTRY+0x9e>
    const unsigned char code_body[378] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x20, 0x8b,
        0x4c, 0x24, 0x3c, 0x8b, 0x44, 0x24, 0x38, 0x8b,
        0x74, 0x24, 0x34, 0x8b, 0x58, 0xfc, 0x8b, 0x53,
        0xf4, 0x85, 0xd2, 0x74, 0x75, 0x89, 0x4c, 0x24,
        0x04, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xe9, 0x8b, 0x7a, 0x18, 0x39, 0x6f, 0x10, 0x76,
        0x5d, 0x80, 0x7f, 0x06, 0x00, 0x74, 0x57, 0x89,
        0x5c, 0x24, 0x1c, 0xb9, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xc9, 0x89, 0x4c, 0x24, 0x08, 0x8b,
        0x0e, 0x8b, 0x49, 0x10, 0x89, 0x0c, 0x24, 0x0f,
        0xb6, 0x4f, 0x05, 0x89, 0x74, 0x24, 0x0c, 0xbe,
        0x01, 0x00, 0x00, 0x00, 0xd3, 0xe6, 0x89, 0xeb,
        0x8b, 0x4c, 0x24, 0x08, 0x8b, 0x2c, 0x24, 0x8b,
        0x6c, 0x8d, 0x0c, 0x8d, 0x0c, 0x37, 0x89, 0x5c,
        0x24, 0x08, 0x39, 0x6c, 0xd9, 0x14, 0x74, 0x32,
        0x8b, 0x4c, 0x24, 0x04, 0x89, 0x4c, 0x24, 0x3c,
        0x89, 0x44, 0x24, 0x38, 0x8b, 0x44, 0x24, 0x0c,
        0x89, 0x44, 0x24, 0x34, 0xeb, 0x10, 0x8b, 0x4c,
        0x24, 0x04, 0x89, 0x4c, 0x24, 0x3c, 0x89, 0x44,
        0x24, 0x38, 0x89, 0x74, 0x24, 0x34, 0x83, 0xc4,
        0x20, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x6c, 0x24, 0x18, 0x8b, 0x4c,
        0x24, 0x0c, 0x01, 0xf7, 0x83, 0xc7, 0x14, 0x8b,
        0x6c, 0x24, 0x08, 0x8b, 0x74, 0xef, 0x04, 0x85,
        0xf6, 0x8b, 0x5c, 0x24, 0x1c, 0x0f, 0x84, 0x9a,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x10, 0x89,
        0x74, 0x24, 0x14, 0x8b, 0x70, 0xf8, 0x89, 0x34,
        0x24, 0x89, 0xce, 0x89, 0x41, 0x20, 0x0f, 0xb6,
        0x7a, 0x10, 0x85, 0xff, 0x74, 0x16, 0xff, 0x34,
        0x24, 0xff, 0x74, 0x24, 0x1c, 0x52, 0x6a, 0x01,
        0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x14, 0x8b, 0x46, 0x20, 0x8b, 0x4c, 0x24, 0x10,
        0x8b, 0x14, 0x24, 0x89, 0x54, 0xe9, 0x04, 0x83,
        0xc0, 0xf8, 0x89, 0x46, 0x20, 0x8b, 0x03, 0x3d,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x48, 0x89,
        0x03, 0x75, 0x09, 0x53, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x04, 0x8b, 0x4c, 0x24, 0x14,
        0x8b, 0x01, 0x3d, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x0e, 0x48, 0x89, 0x01, 0x75, 0x09, 0x51, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b,
        0x46, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x4c, 0x24, 0x04, 0x89, 0x4c, 0x24,
        0x3c, 0x89, 0x44, 0x24, 0x38, 0x89, 0x74, 0x24,
        0x34, 0x83, 0xc4, 0x20, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x54, 0x24,
        0x04, 0x89, 0x54, 0x24, 0x3c, 0x89, 0x44, 0x24,
        0x38, 0x89, 0x4c, 0x24, 0x34, 0xe9, 0x24, 0xff,
        0xff, 0xff,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x22, (instruction->operand0 & UINT32_MAX));
    patch_32(code + 0x3c, instruction->oparg);
    patch_x86_64_32rx(code + 0xa6, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0xf2, (uintptr_t)&_PyDict_SendEvent + -0x4);
    patch_x86_64_32rx(code + 0x11d, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x138, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x161, (uintptr_t)code + sizeof(code_body) + -0x4);
}

void
emit__STORE_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_DEREF.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 44 24 10                   movl    0x10(%esp), %eax
    // e: b9 00 00 00 00                movl    $0x0, %ecx
    // 0000000f:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 13: 0f b7 c9                      movzwl  %cx, %ecx
    // 16: 8b 50 fc                      movl    -0x4(%eax), %edx
    // 19: 8b 4c 8e 28                   movl    0x28(%esi,%ecx,4), %ecx
    // 1d: 89 46 20                      movl    %eax, 0x20(%esi)
    // 20: 8b 41 08                      movl    0x8(%ecx), %eax
    // 23: 89 51 08                      movl    %edx, 0x8(%ecx)
    // 26: 85 c0                         testl   %eax, %eax
    // 28: 74 18                         je      0x42 <__JIT_ENTRY+0x42>
    // 2a: 8b 08                         movl    (%eax), %ecx
    // 2c: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 32: 7f 0e                         jg      0x42 <__JIT_ENTRY+0x42>
    // 34: 49                            decl    %ecx
    // 35: 89 08                         movl    %ecx, (%eax)
    // 37: 75 09                         jne     0x42 <__JIT_ENTRY+0x42>
    // 39: 50                            pushl   %eax
    // 3a: e8 00 00 00 00                calll   0x3f <__JIT_ENTRY+0x3f>
    // 0000003b:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 3f: 83 c4 04                      addl    $0x4, %esp
    // 42: 8b 46 20                      movl    0x20(%esi), %eax
    // 45: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 4c: 83 c0 fc                      addl    $-0x4, %eax
    // 4f: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 53: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 57: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 5b: 5e                            popl    %esi
    // 5c: 5f                            popl    %edi
    // 5d: e9 00 00 00 00                jmp     0x62 <__JIT_ENTRY+0x62>
    // 0000005e:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[93] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x44, 0x24, 0x10, 0xb9, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x8b, 0x50,
        0xfc, 0x8b, 0x4c, 0x8e, 0x28, 0x89, 0x46, 0x20,
        0x8b, 0x41, 0x08, 0x89, 0x51, 0x08, 0x85, 0xc0,
        0x74, 0x18, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75,
        0x09, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc0, 0xfc, 0x89,
        0x7c, 0x24, 0x14, 0x89, 0x44, 0x24, 0x10, 0x89,
        0x74, 0x24, 0x0c, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, instruction->oparg);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 7: 8b 74 24 10                   movl    0x10(%esp), %esi
    // b: 8b 4c 24 14                   movl    0x14(%esp), %ecx
    // f: b8 00 00 00 00                movl    $0x0, %eax
    // 00000010:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 14: 0f b7 d0                      movzwl  %ax, %edx
    // 17: 8b 59 fc                      movl    -0x4(%ecx), %ebx
    // 1a: 83 c1 fc                      addl    $-0x4, %ecx
    // 1d: 8b 44 96 28                   movl    0x28(%esi,%edx,4), %eax
    // 21: 89 5c 96 28                   movl    %ebx, 0x28(%esi,%edx,4)
    // 25: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 28: 85 c0                         testl   %eax, %eax
    // 2a: 74 18                         je      0x44 <__JIT_ENTRY+0x44>
    // 2c: 8b 08                         movl    (%eax), %ecx
    // 2e: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 34: 7f 0e                         jg      0x44 <__JIT_ENTRY+0x44>
    // 36: 49                            decl    %ecx
    // 37: 89 08                         movl    %ecx, (%eax)
    // 39: 75 09                         jne     0x44 <__JIT_ENTRY+0x44>
    // 3b: 50                            pushl   %eax
    // 3c: e8 00 00 00 00                calll   0x41 <__JIT_ENTRY+0x41>
    // 0000003d:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 41: 83 c4 04                      addl    $0x4, %esp
    // 44: 8b 46 20                      movl    0x20(%esi), %eax
    // 47: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 4e: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 52: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 56: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 5a: 5e                            popl    %esi
    // 5b: 5f                            popl    %edi
    // 5c: 5b                            popl    %ebx
    // 5d: e9 00 00 00 00                jmp     0x62 <__JIT_ENTRY+0x62>
    // 0000005e:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[93] = {
        0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x18, 0x8b,
        0x74, 0x24, 0x10, 0x8b, 0x4c, 0x24, 0x14, 0xb8,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x8b,
        0x59, 0xfc, 0x83, 0xc1, 0xfc, 0x8b, 0x44, 0x96,
        0x28, 0x89, 0x5c, 0x96, 0x28, 0x89, 0x4e, 0x20,
        0x85, 0xc0, 0x74, 0x18, 0x8b, 0x08, 0x81, 0xf9,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x49, 0x89,
        0x08, 0x75, 0x09, 0x50, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x04, 0x8b, 0x46, 0x20, 0xc7,
        0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x89, 0x7c,
        0x24, 0x18, 0x89, 0x44, 0x24, 0x14, 0x89, 0x74,
        0x24, 0x10, 0x5e, 0x5f, 0x5b,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x10, instruction->oparg);
    patch_x86_64_32rx(code + 0x3d, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_FAST_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_0.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // e: 8b 51 fc                      movl    -0x4(%ecx), %edx
    // 11: 83 c1 fc                      addl    $-0x4, %ecx
    // 14: 8b 46 28                      movl    0x28(%esi), %eax
    // 17: 89 56 28                      movl    %edx, 0x28(%esi)
    // 1a: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 74 18                         je      0x39 <__JIT_ENTRY+0x39>
    // 21: 8b 08                         movl    (%eax), %ecx
    // 23: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 29: 7f 0e                         jg      0x39 <__JIT_ENTRY+0x39>
    // 2b: 49                            decl    %ecx
    // 2c: 89 08                         movl    %ecx, (%eax)
    // 2e: 75 09                         jne     0x39 <__JIT_ENTRY+0x39>
    // 30: 50                            pushl   %eax
    // 31: e8 00 00 00 00                calll   0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 36: 83 c4 04                      addl    $0x4, %esp
    // 39: 8b 46 20                      movl    0x20(%esi), %eax
    // 3c: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 43: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 47: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 4b: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 4f: 5e                            popl    %esi
    // 50: 5f                            popl    %edi
    // 51: e9 00 00 00 00                jmp     0x56 <__JIT_ENTRY+0x56>
    // 00000052:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[81] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x10, 0x8b, 0x51,
        0xfc, 0x83, 0xc1, 0xfc, 0x8b, 0x46, 0x28, 0x89,
        0x56, 0x28, 0x89, 0x4e, 0x20, 0x85, 0xc0, 0x74,
        0x18, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75, 0x09,
        0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x44, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x32, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_FAST_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_1.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // e: 8b 51 fc                      movl    -0x4(%ecx), %edx
    // 11: 83 c1 fc                      addl    $-0x4, %ecx
    // 14: 8b 46 2c                      movl    0x2c(%esi), %eax
    // 17: 89 56 2c                      movl    %edx, 0x2c(%esi)
    // 1a: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 74 18                         je      0x39 <__JIT_ENTRY+0x39>
    // 21: 8b 08                         movl    (%eax), %ecx
    // 23: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 29: 7f 0e                         jg      0x39 <__JIT_ENTRY+0x39>
    // 2b: 49                            decl    %ecx
    // 2c: 89 08                         movl    %ecx, (%eax)
    // 2e: 75 09                         jne     0x39 <__JIT_ENTRY+0x39>
    // 30: 50                            pushl   %eax
    // 31: e8 00 00 00 00                calll   0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 36: 83 c4 04                      addl    $0x4, %esp
    // 39: 8b 46 20                      movl    0x20(%esi), %eax
    // 3c: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 43: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 47: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 4b: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 4f: 5e                            popl    %esi
    // 50: 5f                            popl    %edi
    // 51: e9 00 00 00 00                jmp     0x56 <__JIT_ENTRY+0x56>
    // 00000052:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[81] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x10, 0x8b, 0x51,
        0xfc, 0x83, 0xc1, 0xfc, 0x8b, 0x46, 0x2c, 0x89,
        0x56, 0x2c, 0x89, 0x4e, 0x20, 0x85, 0xc0, 0x74,
        0x18, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75, 0x09,
        0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x44, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x32, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_FAST_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_2.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // e: 8b 51 fc                      movl    -0x4(%ecx), %edx
    // 11: 83 c1 fc                      addl    $-0x4, %ecx
    // 14: 8b 46 30                      movl    0x30(%esi), %eax
    // 17: 89 56 30                      movl    %edx, 0x30(%esi)
    // 1a: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 74 18                         je      0x39 <__JIT_ENTRY+0x39>
    // 21: 8b 08                         movl    (%eax), %ecx
    // 23: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 29: 7f 0e                         jg      0x39 <__JIT_ENTRY+0x39>
    // 2b: 49                            decl    %ecx
    // 2c: 89 08                         movl    %ecx, (%eax)
    // 2e: 75 09                         jne     0x39 <__JIT_ENTRY+0x39>
    // 30: 50                            pushl   %eax
    // 31: e8 00 00 00 00                calll   0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 36: 83 c4 04                      addl    $0x4, %esp
    // 39: 8b 46 20                      movl    0x20(%esi), %eax
    // 3c: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 43: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 47: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 4b: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 4f: 5e                            popl    %esi
    // 50: 5f                            popl    %edi
    // 51: e9 00 00 00 00                jmp     0x56 <__JIT_ENTRY+0x56>
    // 00000052:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[81] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x10, 0x8b, 0x51,
        0xfc, 0x83, 0xc1, 0xfc, 0x8b, 0x46, 0x30, 0x89,
        0x56, 0x30, 0x89, 0x4e, 0x20, 0x85, 0xc0, 0x74,
        0x18, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75, 0x09,
        0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x44, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x32, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_FAST_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_3.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // e: 8b 51 fc                      movl    -0x4(%ecx), %edx
    // 11: 83 c1 fc                      addl    $-0x4, %ecx
    // 14: 8b 46 34                      movl    0x34(%esi), %eax
    // 17: 89 56 34                      movl    %edx, 0x34(%esi)
    // 1a: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 74 18                         je      0x39 <__JIT_ENTRY+0x39>
    // 21: 8b 08                         movl    (%eax), %ecx
    // 23: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 29: 7f 0e                         jg      0x39 <__JIT_ENTRY+0x39>
    // 2b: 49                            decl    %ecx
    // 2c: 89 08                         movl    %ecx, (%eax)
    // 2e: 75 09                         jne     0x39 <__JIT_ENTRY+0x39>
    // 30: 50                            pushl   %eax
    // 31: e8 00 00 00 00                calll   0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 36: 83 c4 04                      addl    $0x4, %esp
    // 39: 8b 46 20                      movl    0x20(%esi), %eax
    // 3c: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 43: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 47: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 4b: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 4f: 5e                            popl    %esi
    // 50: 5f                            popl    %edi
    // 51: e9 00 00 00 00                jmp     0x56 <__JIT_ENTRY+0x56>
    // 00000052:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[81] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x10, 0x8b, 0x51,
        0xfc, 0x83, 0xc1, 0xfc, 0x8b, 0x46, 0x34, 0x89,
        0x56, 0x34, 0x89, 0x4e, 0x20, 0x85, 0xc0, 0x74,
        0x18, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75, 0x09,
        0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x44, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x32, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_FAST_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_4.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // e: 8b 51 fc                      movl    -0x4(%ecx), %edx
    // 11: 83 c1 fc                      addl    $-0x4, %ecx
    // 14: 8b 46 38                      movl    0x38(%esi), %eax
    // 17: 89 56 38                      movl    %edx, 0x38(%esi)
    // 1a: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 74 18                         je      0x39 <__JIT_ENTRY+0x39>
    // 21: 8b 08                         movl    (%eax), %ecx
    // 23: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 29: 7f 0e                         jg      0x39 <__JIT_ENTRY+0x39>
    // 2b: 49                            decl    %ecx
    // 2c: 89 08                         movl    %ecx, (%eax)
    // 2e: 75 09                         jne     0x39 <__JIT_ENTRY+0x39>
    // 30: 50                            pushl   %eax
    // 31: e8 00 00 00 00                calll   0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 36: 83 c4 04                      addl    $0x4, %esp
    // 39: 8b 46 20                      movl    0x20(%esi), %eax
    // 3c: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 43: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 47: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 4b: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 4f: 5e                            popl    %esi
    // 50: 5f                            popl    %edi
    // 51: e9 00 00 00 00                jmp     0x56 <__JIT_ENTRY+0x56>
    // 00000052:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[81] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x10, 0x8b, 0x51,
        0xfc, 0x83, 0xc1, 0xfc, 0x8b, 0x46, 0x38, 0x89,
        0x56, 0x38, 0x89, 0x4e, 0x20, 0x85, 0xc0, 0x74,
        0x18, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75, 0x09,
        0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x44, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x32, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_FAST_5(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_5.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // e: 8b 51 fc                      movl    -0x4(%ecx), %edx
    // 11: 83 c1 fc                      addl    $-0x4, %ecx
    // 14: 8b 46 3c                      movl    0x3c(%esi), %eax
    // 17: 89 56 3c                      movl    %edx, 0x3c(%esi)
    // 1a: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 74 18                         je      0x39 <__JIT_ENTRY+0x39>
    // 21: 8b 08                         movl    (%eax), %ecx
    // 23: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 29: 7f 0e                         jg      0x39 <__JIT_ENTRY+0x39>
    // 2b: 49                            decl    %ecx
    // 2c: 89 08                         movl    %ecx, (%eax)
    // 2e: 75 09                         jne     0x39 <__JIT_ENTRY+0x39>
    // 30: 50                            pushl   %eax
    // 31: e8 00 00 00 00                calll   0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 36: 83 c4 04                      addl    $0x4, %esp
    // 39: 8b 46 20                      movl    0x20(%esi), %eax
    // 3c: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 43: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 47: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 4b: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 4f: 5e                            popl    %esi
    // 50: 5f                            popl    %edi
    // 51: e9 00 00 00 00                jmp     0x56 <__JIT_ENTRY+0x56>
    // 00000052:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[81] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x10, 0x8b, 0x51,
        0xfc, 0x83, 0xc1, 0xfc, 0x8b, 0x46, 0x3c, 0x89,
        0x56, 0x3c, 0x89, 0x4e, 0x20, 0x85, 0xc0, 0x74,
        0x18, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75, 0x09,
        0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x44, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x32, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_FAST_6(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_6.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // e: 8b 51 fc                      movl    -0x4(%ecx), %edx
    // 11: 83 c1 fc                      addl    $-0x4, %ecx
    // 14: 8b 46 40                      movl    0x40(%esi), %eax
    // 17: 89 56 40                      movl    %edx, 0x40(%esi)
    // 1a: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 74 18                         je      0x39 <__JIT_ENTRY+0x39>
    // 21: 8b 08                         movl    (%eax), %ecx
    // 23: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 29: 7f 0e                         jg      0x39 <__JIT_ENTRY+0x39>
    // 2b: 49                            decl    %ecx
    // 2c: 89 08                         movl    %ecx, (%eax)
    // 2e: 75 09                         jne     0x39 <__JIT_ENTRY+0x39>
    // 30: 50                            pushl   %eax
    // 31: e8 00 00 00 00                calll   0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 36: 83 c4 04                      addl    $0x4, %esp
    // 39: 8b 46 20                      movl    0x20(%esi), %eax
    // 3c: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 43: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 47: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 4b: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 4f: 5e                            popl    %esi
    // 50: 5f                            popl    %edi
    // 51: e9 00 00 00 00                jmp     0x56 <__JIT_ENTRY+0x56>
    // 00000052:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[81] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x10, 0x8b, 0x51,
        0xfc, 0x83, 0xc1, 0xfc, 0x8b, 0x46, 0x40, 0x89,
        0x56, 0x40, 0x89, 0x4e, 0x20, 0x85, 0xc0, 0x74,
        0x18, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75, 0x09,
        0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x44, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x32, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_FAST_7(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_7.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 7c 24 14                   movl    0x14(%esp), %edi
    // 6: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // e: 8b 51 fc                      movl    -0x4(%ecx), %edx
    // 11: 83 c1 fc                      addl    $-0x4, %ecx
    // 14: 8b 46 44                      movl    0x44(%esi), %eax
    // 17: 89 56 44                      movl    %edx, 0x44(%esi)
    // 1a: 89 4e 20                      movl    %ecx, 0x20(%esi)
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 74 18                         je      0x39 <__JIT_ENTRY+0x39>
    // 21: 8b 08                         movl    (%eax), %ecx
    // 23: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 29: 7f 0e                         jg      0x39 <__JIT_ENTRY+0x39>
    // 2b: 49                            decl    %ecx
    // 2c: 89 08                         movl    %ecx, (%eax)
    // 2e: 75 09                         jne     0x39 <__JIT_ENTRY+0x39>
    // 30: 50                            pushl   %eax
    // 31: e8 00 00 00 00                calll   0x36 <__JIT_ENTRY+0x36>
    // 00000032:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 36: 83 c4 04                      addl    $0x4, %esp
    // 39: 8b 46 20                      movl    0x20(%esi), %eax
    // 3c: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 43: 89 7c 24 14                   movl    %edi, 0x14(%esp)
    // 47: 89 44 24 10                   movl    %eax, 0x10(%esp)
    // 4b: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 4f: 5e                            popl    %esi
    // 50: 5f                            popl    %edi
    // 51: e9 00 00 00 00                jmp     0x56 <__JIT_ENTRY+0x56>
    // 00000052:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[81] = {
        0x57, 0x56, 0x8b, 0x7c, 0x24, 0x14, 0x8b, 0x74,
        0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x10, 0x8b, 0x51,
        0xfc, 0x83, 0xc1, 0xfc, 0x8b, 0x46, 0x44, 0x89,
        0x56, 0x44, 0x89, 0x4e, 0x20, 0x85, 0xc0, 0x74,
        0x18, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75, 0x09,
        0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x8b, 0x46, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x14, 0x89,
        0x44, 0x24, 0x10, 0x89, 0x74, 0x24, 0x0c, 0x5e,
        0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x32, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_GLOBAL.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 10: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000011:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 15: 0f b7 c9                      movzwl  %cx, %ecx
    // 18: 8b 58 fc                      movl    -0x4(%eax), %ebx
    // 1b: 8b 16                         movl    (%esi), %edx
    // 1d: 8b 6e 0c                      movl    0xc(%esi), %ebp
    // 20: 8b 52 10                      movl    0x10(%edx), %edx
    // 23: 8b 4c 8a 0c                   movl    0xc(%edx,%ecx,4), %ecx
    // 27: 89 46 20                      movl    %eax, 0x20(%esi)
    // 2a: 53                            pushl   %ebx
    // 2b: 51                            pushl   %ecx
    // 2c: 55                            pushl   %ebp
    // 2d: e8 00 00 00 00                calll   0x32 <__JIT_ENTRY+0x32>
    // 0000002e:  IMAGE_REL_I386_REL32 _PyDict_SetItem
    // 32: 83 c4 0c                      addl    $0xc, %esp
    // 35: 8b 6e 20                      movl    0x20(%esi), %ebp
    // 38: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 3f: 8b 0b                         movl    (%ebx), %ecx
    // 41: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 47: 7f 05                         jg      0x4e <__JIT_ENTRY+0x4e>
    // 49: 49                            decl    %ecx
    // 4a: 89 0b                         movl    %ecx, (%ebx)
    // 4c: 74 1c                         je      0x6a <__JIT_ENTRY+0x6a>
    // 4e: 83 c5 fc                      addl    $-0x4, %ebp
    // 51: 85 c0                         testl   %eax, %eax
    // 53: 74 29                         je      0x7e <__JIT_ENTRY+0x7e>
    // 55: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 59: 89 6c 24 18                   movl    %ebp, 0x18(%esp)
    // 5d: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 61: 5e                            popl    %esi
    // 62: 5f                            popl    %edi
    // 63: 5b                            popl    %ebx
    // 64: 5d                            popl    %ebp
    // 65: e9 00 00 00 00                jmp     0x6a <__JIT_ENTRY+0x6a>
    // 00000066:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // 6a: 53                            pushl   %ebx
    // 6b: 89 c3                         movl    %eax, %ebx
    // 6d: e8 00 00 00 00                calll   0x72 <__JIT_ENTRY+0x72>
    // 0000006e:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 72: 89 d8                         movl    %ebx, %eax
    // 74: 83 c4 04                      addl    $0x4, %esp
    // 77: 83 c5 fc                      addl    $-0x4, %ebp
    // 7a: 85 c0                         testl   %eax, %eax
    // 7c: 75 d7                         jne     0x55 <__JIT_ENTRY+0x55>
    // 7e: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 82: 89 6c 24 18                   movl    %ebp, 0x18(%esp)
    // 86: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 8a: 5e                            popl    %esi
    // 8b: 5f                            popl    %edi
    // 8c: 5b                            popl    %ebx
    // 8d: 5d                            popl    %ebp
    // 8e: e9 00 00 00 00                jmp     0x93 <__JIT_ENTRY+0x93>
    // 0000008f:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[142] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x18,
        0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9,
        0x8b, 0x58, 0xfc, 0x8b, 0x16, 0x8b, 0x6e, 0x0c,
        0x8b, 0x52, 0x10, 0x8b, 0x4c, 0x8a, 0x0c, 0x89,
        0x46, 0x20, 0x53, 0x51, 0x55, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b, 0x6e, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x0b, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x05, 0x49, 0x89, 0x0b, 0x74, 0x1c, 0x83, 0xc5,
        0xfc, 0x85, 0xc0, 0x74, 0x29, 0x89, 0x7c, 0x24,
        0x1c, 0x89, 0x6c, 0x24, 0x18, 0x89, 0x74, 0x24,
        0x14, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x53, 0x89, 0xc3, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xd8, 0x83, 0xc4, 0x04, 0x83,
        0xc5, 0xfc, 0x85, 0xc0, 0x75, 0xd7, 0x89, 0x7c,
        0x24, 0x1c, 0x89, 0x6c, 0x24, 0x18, 0x89, 0x74,
        0x24, 0x14, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x11, instruction->oparg);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)&PyDict_SetItem + -0x4);
    patch_x86_64_32rx(code + 0x66, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x6e, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_NAME.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 54 24 18                   movl    0x18(%esp), %edx
    // c: 8b 74 24 14                   movl    0x14(%esp), %esi
    // 10: b8 00 00 00 00                movl    $0x0, %eax
    // 00000011:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 15: 0f b7 c8                      movzwl  %ax, %ecx
    // 18: 8b 5a fc                      movl    -0x4(%edx), %ebx
    // 1b: 8b 2e                         movl    (%esi), %ebp
    // 1d: 8b 46 14                      movl    0x14(%esi), %eax
    // 20: 8b 6d 10                      movl    0x10(%ebp), %ebp
    // 23: 8b 4c 8d 0c                   movl    0xc(%ebp,%ecx,4), %ecx
    // 27: 85 c0                         testl   %eax, %eax
    // 29: 74 16                         je      0x41 <__JIT_ENTRY+0x41>
    // 2b: 81 78 04 00 00 00 00          cmpl    $0x0, 0x4(%eax)
    // 0000002e:  IMAGE_REL_I386_DIR32 _PyDict_Type
    // 32: 89 56 20                      movl    %edx, 0x20(%esi)
    // 35: 74 54                         je      0x8b <__JIT_ENTRY+0x8b>
    // 37: 53                            pushl   %ebx
    // 38: 51                            pushl   %ecx
    // 39: 50                            pushl   %eax
    // 3a: e8 00 00 00 00                calll   0x3f <__JIT_ENTRY+0x3f>
    // 0000003b:  IMAGE_REL_I386_REL32 _PyObject_SetItem
    // 3f: eb 52                         jmp     0x93 <__JIT_ENTRY+0x93>
    // 41: 89 56 20                      movl    %edx, 0x20(%esi)
    // 44: 51                            pushl   %ecx
    // 45: 68 00 00 00 00                pushl   $0x0
    // 00000046:  IMAGE_REL_I386_DIR32 ??_C@_0CA@PHPKHPGD@no?5locals?5found?5when?5storing?5?$CFR?$AA@
    // 4a: ff 35 00 00 00 00             pushl   0x0
    // 0000004c:  IMAGE_REL_I386_DIR32 _PyExc_SystemError
    // 50: 57                            pushl   %edi
    // 51: e8 00 00 00 00                calll   0x56 <__JIT_ENTRY+0x56>
    // 00000052:  IMAGE_REL_I386_REL32 __PyErr_Format
    // 56: 83 c4 10                      addl    $0x10, %esp
    // 59: 8b 6e 20                      movl    0x20(%esi), %ebp
    // 5c: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 63: 8b 03                         movl    (%ebx), %eax
    // 65: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 6a: 7f 0e                         jg      0x7a <__JIT_ENTRY+0x7a>
    // 6c: 48                            decl    %eax
    // 6d: 89 03                         movl    %eax, (%ebx)
    // 6f: 75 09                         jne     0x7a <__JIT_ENTRY+0x7a>
    // 71: 53                            pushl   %ebx
    // 72: e8 00 00 00 00                calll   0x77 <__JIT_ENTRY+0x77>
    // 00000073:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 77: 83 c4 04                      addl    $0x4, %esp
    // 7a: 83 c5 fc                      addl    $-0x4, %ebp
    // 7d: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 81: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 85: 89 6c 24 18                   movl    %ebp, 0x18(%esp)
    // 89: eb 37                         jmp     0xc2 <__JIT_ENTRY+0xc2>
    // 8b: 53                            pushl   %ebx
    // 8c: 51                            pushl   %ecx
    // 8d: 50                            pushl   %eax
    // 8e: e8 00 00 00 00                calll   0x93 <__JIT_ENTRY+0x93>
    // 0000008f:  IMAGE_REL_I386_REL32 _PyDict_SetItem
    // 93: 83 c4 0c                      addl    $0xc, %esp
    // 96: 8b 6e 20                      movl    0x20(%esi), %ebp
    // 99: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // a0: 8b 0b                         movl    (%ebx), %ecx
    // a2: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // a8: 7f 05                         jg      0xaf <__JIT_ENTRY+0xaf>
    // aa: 49                            decl    %ecx
    // ab: 89 0b                         movl    %ecx, (%ebx)
    // ad: 74 1c                         je      0xcb <__JIT_ENTRY+0xcb>
    // af: 83 c5 fc                      addl    $-0x4, %ebp
    // b2: 85 c0                         testl   %eax, %eax
    // b4: 74 29                         je      0xdf <__JIT_ENTRY+0xdf>
    // b6: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // ba: 89 6c 24 18                   movl    %ebp, 0x18(%esp)
    // be: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // c2: 5e                            popl    %esi
    // c3: 5f                            popl    %edi
    // c4: 5b                            popl    %ebx
    // c5: 5d                            popl    %ebp
    // c6: e9 00 00 00 00                jmp     0xcb <__JIT_ENTRY+0xcb>
    // 000000c7:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // cb: 53                            pushl   %ebx
    // cc: 89 c3                         movl    %eax, %ebx
    // ce: e8 00 00 00 00                calll   0xd3 <__JIT_ENTRY+0xd3>
    // 000000cf:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // d3: 89 d8                         movl    %ebx, %eax
    // d5: 83 c4 04                      addl    $0x4, %esp
    // d8: 83 c5 fc                      addl    $-0x4, %ebp
    // db: 85 c0                         testl   %eax, %eax
    // dd: 75 d7                         jne     0xb6 <__JIT_ENTRY+0xb6>
    // df: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // e3: 89 6c 24 18                   movl    %ebp, 0x18(%esp)
    // e7: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // eb: 5e                            popl    %esi
    // ec: 5f                            popl    %edi
    // ed: 5b                            popl    %ebx
    // ee: 5d                            popl    %ebp
    // ef: e9 00 00 00 00                jmp     0xf4 <__JIT_ENTRY+0xf4>
    // 000000f0:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[239] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x54, 0x24, 0x18, 0x8b, 0x74, 0x24, 0x14,
        0xb8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8,
        0x8b, 0x5a, 0xfc, 0x8b, 0x2e, 0x8b, 0x46, 0x14,
        0x8b, 0x6d, 0x10, 0x8b, 0x4c, 0x8d, 0x0c, 0x85,
        0xc0, 0x74, 0x16, 0x81, 0x78, 0x04, 0x00, 0x00,
        0x00, 0x00, 0x89, 0x56, 0x20, 0x74, 0x54, 0x53,
        0x51, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0xeb,
        0x52, 0x89, 0x56, 0x20, 0x51, 0x68, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x35, 0x00, 0x00, 0x00, 0x00,
        0x57, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x10, 0x8b, 0x6e, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x03, 0x3d, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x0e, 0x48, 0x89, 0x03, 0x75,
        0x09, 0x53, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x83, 0xc5, 0xfc, 0x89, 0x7c, 0x24,
        0x1c, 0x89, 0x74, 0x24, 0x14, 0x89, 0x6c, 0x24,
        0x18, 0xeb, 0x37, 0x53, 0x51, 0x50, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b, 0x6e,
        0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x0b, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x05, 0x49, 0x89, 0x0b, 0x74, 0x1c, 0x83,
        0xc5, 0xfc, 0x85, 0xc0, 0x74, 0x29, 0x89, 0x7c,
        0x24, 0x1c, 0x89, 0x6c, 0x24, 0x18, 0x89, 0x74,
        0x24, 0x14, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x53, 0x89, 0xc3, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xd8, 0x83, 0xc4, 0x04,
        0x83, 0xc5, 0xfc, 0x85, 0xc0, 0x75, 0xd7, 0x89,
        0x7c, 0x24, 0x1c, 0x89, 0x6c, 0x24, 0x18, 0x89,
        0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    // 0: 'no locals found when storing %R\x00'
    const unsigned char data_body[32] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
        0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f,
        0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x11, instruction->oparg);
    patch_32(code + 0x2e, (uintptr_t)&PyDict_Type);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)&PyObject_SetItem + -0x4);
    patch_32(code + 0x46, (uintptr_t)data);
    patch_32(code + 0x4c, (uintptr_t)&PyExc_SystemError);
    patch_x86_64_32rx(code + 0x52, (uintptr_t)&_PyErr_Format + -0x4);
    patch_x86_64_32rx(code + 0x73, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x8f, (uintptr_t)&PyDict_SetItem + -0x4);
    patch_x86_64_32rx(code + 0xc7, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0xcf, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_SLICE.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 10                      subl    $0x10, %esp
    // 7: 8b 44 24 2c                   movl    0x2c(%esp), %eax
    // b: 89 04 24                      movl    %eax, (%esp)
    // e: 8b 74 24 24                   movl    0x24(%esp), %esi
    // 12: 8b 44 24 28                   movl    0x28(%esp), %eax
    // 16: 8b 48 fc                      movl    -0x4(%eax), %ecx
    // 19: 8b 50 f8                      movl    -0x8(%eax), %edx
    // 1c: 8b 78 f0                      movl    -0x10(%eax), %edi
    // 1f: 8b 58 f4                      movl    -0xc(%eax), %ebx
    // 22: 89 46 20                      movl    %eax, 0x20(%esi)
    // 25: 51                            pushl   %ecx
    // 26: 52                            pushl   %edx
    // 27: e8 00 00 00 00                calll   0x2c <__JIT_ENTRY+0x2c>
    // 00000028:  IMAGE_REL_I386_REL32 __PyBuildSlice_ConsumeRefs
    // 2c: 89 f2                         movl    %esi, %edx
    // 2e: 83 c4 08                      addl    $0x8, %esp
    // 31: 8b 6e 20                      movl    0x20(%esi), %ebp
    // 34: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 3b: 85 c0                         testl   %eax, %eax
    // 3d: 89 5c 24 0c                   movl    %ebx, 0xc(%esp)
    // 41: 89 7c 24 08                   movl    %edi, 0x8(%esp)
    // 45: 74 4b                         je      0x92 <__JIT_ENTRY+0x92>
    // 47: 89 c6                         movl    %eax, %esi
    // 49: 83 c5 f8                      addl    $-0x8, %ebp
    // 4c: 89 54 24 04                   movl    %edx, 0x4(%esp)
    // 50: 89 6a 20                      movl    %ebp, 0x20(%edx)
    // 53: 57                            pushl   %edi
    // 54: 50                            pushl   %eax
    // 55: 53                            pushl   %ebx
    // 56: e8 00 00 00 00                calll   0x5b <__JIT_ENTRY+0x5b>
    // 00000057:  IMAGE_REL_I386_REL32 _PyObject_SetItem
    // 5b: 83 c4 0c                      addl    $0xc, %esp
    // 5e: 8b 0e                         movl    (%esi), %ecx
    // 60: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 66: 7f 12                         jg      0x7a <__JIT_ENTRY+0x7a>
    // 68: 49                            decl    %ecx
    // 69: 89 0e                         movl    %ecx, (%esi)
    // 6b: 75 0d                         jne     0x7a <__JIT_ENTRY+0x7a>
    // 6d: 56                            pushl   %esi
    // 6e: 89 c6                         movl    %eax, %esi
    // 70: e8 00 00 00 00                calll   0x75 <__JIT_ENTRY+0x75>
    // 00000071:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 75: 89 f0                         movl    %esi, %eax
    // 77: 83 c4 04                      addl    $0x4, %esp
    // 7a: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 7e: 8b 6a 20                      movl    0x20(%edx), %ebp
    // 81: c7 42 20 00 00 00 00          movl    $0x0, 0x20(%edx)
    // 88: 83 c5 08                      addl    $0x8, %ebp
    // 8b: 85 c0                         testl   %eax, %eax
    // 8d: 0f 94 c3                      sete    %bl
    // 90: eb 02                         jmp     0x94 <__JIT_ENTRY+0x94>
    // 92: 31 db                         xorl    %ebx, %ebx
    // 94: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 98: 8b 01                         movl    (%ecx), %eax
    // 9a: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 9f: 8b 74 24 0c                   movl    0xc(%esp), %esi
    // a3: 7f 05                         jg      0xaa <__JIT_ENTRY+0xaa>
    // a5: 48                            decl    %eax
    // a6: 89 01                         movl    %eax, (%ecx)
    // a8: 74 1d                         je      0xc7 <__JIT_ENTRY+0xc7>
    // aa: 8b 06                         movl    (%esi), %eax
    // ac: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // b1: 7f 2a                         jg      0xdd <__JIT_ENTRY+0xdd>
    // b3: 48                            decl    %eax
    // b4: 89 06                         movl    %eax, (%esi)
    // b6: 75 25                         jne     0xdd <__JIT_ENTRY+0xdd>
    // b8: 56                            pushl   %esi
    // b9: 89 d6                         movl    %edx, %esi
    // bb: e8 00 00 00 00                calll   0xc0 <__JIT_ENTRY+0xc0>
    // 000000bc:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // c0: 89 f2                         movl    %esi, %edx
    // c2: 83 c4 04                      addl    $0x4, %esp
    // c5: eb 16                         jmp     0xdd <__JIT_ENTRY+0xdd>
    // c7: 51                            pushl   %ecx
    // c8: 89 d7                         movl    %edx, %edi
    // ca: e8 00 00 00 00                calll   0xcf <__JIT_ENTRY+0xcf>
    // 000000cb:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // cf: 89 fa                         movl    %edi, %edx
    // d1: 83 c4 04                      addl    $0x4, %esp
    // d4: 8b 06                         movl    (%esi), %eax
    // d6: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // db: 7e d6                         jle     0xb3 <__JIT_ENTRY+0xb3>
    // dd: 83 c5 f0                      addl    $-0x10, %ebp
    // e0: 84 db                         testb   %bl, %bl
    // e2: 74 1b                         je      0xff <__JIT_ENTRY+0xff>
    // e4: 8b 04 24                      movl    (%esp), %eax
    // e7: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // eb: 89 6c 24 28                   movl    %ebp, 0x28(%esp)
    // ef: 89 54 24 24                   movl    %edx, 0x24(%esp)
    // f3: 83 c4 10                      addl    $0x10, %esp
    // f6: 5e                            popl    %esi
    // f7: 5f                            popl    %edi
    // f8: 5b                            popl    %ebx
    // f9: 5d                            popl    %ebp
    // fa: e9 00 00 00 00                jmp     0xff <__JIT_ENTRY+0xff>
    // 000000fb:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // ff: 8b 04 24                      movl    (%esp), %eax
    // 102: 89 44 24 2c                   movl    %eax, 0x2c(%esp)
    // 106: 89 6c 24 28                   movl    %ebp, 0x28(%esp)
    // 10a: 89 54 24 24                   movl    %edx, 0x24(%esp)
    // 10e: 83 c4 10                      addl    $0x10, %esp
    // 111: 5e                            popl    %esi
    // 112: 5f                            popl    %edi
    // 113: 5b                            popl    %ebx
    // 114: 5d                            popl    %ebp
    // 115: e9 00 00 00 00                jmp     0x11a <__JIT_ENTRY+0x11a>
    // 00000116:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[282] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x10, 0x8b,
        0x44, 0x24, 0x2c, 0x89, 0x04, 0x24, 0x8b, 0x74,
        0x24, 0x24, 0x8b, 0x44, 0x24, 0x28, 0x8b, 0x48,
        0xfc, 0x8b, 0x50, 0xf8, 0x8b, 0x78, 0xf0, 0x8b,
        0x58, 0xf4, 0x89, 0x46, 0x20, 0x51, 0x52, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xf2, 0x83, 0xc4,
        0x08, 0x8b, 0x6e, 0x20, 0xc7, 0x46, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x89, 0x5c, 0x24,
        0x0c, 0x89, 0x7c, 0x24, 0x08, 0x74, 0x4b, 0x89,
        0xc6, 0x83, 0xc5, 0xf8, 0x89, 0x54, 0x24, 0x04,
        0x89, 0x6a, 0x20, 0x57, 0x50, 0x53, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b, 0x0e,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x12,
        0x49, 0x89, 0x0e, 0x75, 0x0d, 0x56, 0x89, 0xc6,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf0, 0x83,
        0xc4, 0x04, 0x8b, 0x54, 0x24, 0x04, 0x8b, 0x6a,
        0x20, 0xc7, 0x42, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc5, 0x08, 0x85, 0xc0, 0x0f, 0x94, 0xc3,
        0xeb, 0x02, 0x31, 0xdb, 0x8b, 0x4c, 0x24, 0x08,
        0x8b, 0x01, 0x3d, 0xff, 0xff, 0xff, 0x3f, 0x8b,
        0x74, 0x24, 0x0c, 0x7f, 0x05, 0x48, 0x89, 0x01,
        0x74, 0x1d, 0x8b, 0x06, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x2a, 0x48, 0x89, 0x06, 0x75, 0x25,
        0x56, 0x89, 0xd6, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xf2, 0x83, 0xc4, 0x04, 0xeb, 0x16, 0x51,
        0x89, 0xd7, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xfa, 0x83, 0xc4, 0x04, 0x8b, 0x06, 0x3d, 0xff,
        0xff, 0xff, 0x3f, 0x7e, 0xd6, 0x83, 0xc5, 0xf0,
        0x84, 0xdb, 0x74, 0x1b, 0x8b, 0x04, 0x24, 0x89,
        0x44, 0x24, 0x2c, 0x89, 0x6c, 0x24, 0x28, 0x89,
        0x54, 0x24, 0x24, 0x83, 0xc4, 0x10, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x04, 0x24, 0x89, 0x44, 0x24, 0x2c, 0x89, 0x6c,
        0x24, 0x28, 0x89, 0x54, 0x24, 0x24, 0x83, 0xc4,
        0x10, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x28, (uintptr_t)&_PyBuildSlice_ConsumeRefs + -0x4);
    patch_x86_64_32rx(code + 0x57, (uintptr_t)&PyObject_SetItem + -0x4);
    patch_x86_64_32rx(code + 0x71, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xbc, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xcb, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xfb, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x116, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__STORE_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_SUBSCR.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 44 24 24                   movl    0x24(%esp), %eax
    // b: 89 04 24                      movl    %eax, (%esp)
    // e: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 12: 8b 44 24 20                   movl    0x20(%esp), %eax
    // 16: 8b 48 fc                      movl    -0x4(%eax), %ecx
    // 19: 8b 58 f4                      movl    -0xc(%eax), %ebx
    // 1c: 8b 70 f8                      movl    -0x8(%eax), %esi
    // 1f: 89 47 20                      movl    %eax, 0x20(%edi)
    // 22: 53                            pushl   %ebx
    // 23: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 27: 51                            pushl   %ecx
    // 28: 56                            pushl   %esi
    // 29: e8 00 00 00 00                calll   0x2e <__JIT_ENTRY+0x2e>
    // 0000002a:  IMAGE_REL_I386_REL32 _PyObject_SetItem
    // 2e: 83 c4 0c                      addl    $0xc, %esp
    // 31: 8b 6f 20                      movl    0x20(%edi), %ebp
    // 34: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // 3b: 8b 0b                         movl    (%ebx), %ecx
    // 3d: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 43: 7f 05                         jg      0x4a <__JIT_ENTRY+0x4a>
    // 45: 49                            decl    %ecx
    // 46: 89 0b                         movl    %ecx, (%ebx)
    // 48: 74 1e                         je      0x68 <__JIT_ENTRY+0x68>
    // 4a: 8b 0e                         movl    (%esi), %ecx
    // 4c: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 52: 7f 2b                         jg      0x7f <__JIT_ENTRY+0x7f>
    // 54: 49                            decl    %ecx
    // 55: 89 0e                         movl    %ecx, (%esi)
    // 57: 75 26                         jne     0x7f <__JIT_ENTRY+0x7f>
    // 59: 56                            pushl   %esi
    // 5a: 89 c6                         movl    %eax, %esi
    // 5c: e8 00 00 00 00                calll   0x61 <__JIT_ENTRY+0x61>
    // 0000005d:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 61: 89 f0                         movl    %esi, %eax
    // 63: 83 c4 04                      addl    $0x4, %esp
    // 66: eb 17                         jmp     0x7f <__JIT_ENTRY+0x7f>
    // 68: 53                            pushl   %ebx
    // 69: 89 c3                         movl    %eax, %ebx
    // 6b: e8 00 00 00 00                calll   0x70 <__JIT_ENTRY+0x70>
    // 0000006c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 70: 89 d8                         movl    %ebx, %eax
    // 72: 83 c4 04                      addl    $0x4, %esp
    // 75: 8b 0e                         movl    (%esi), %ecx
    // 77: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 7d: 7e d5                         jle     0x54 <__JIT_ENTRY+0x54>
    // 7f: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 83: 8b 11                         movl    (%ecx), %edx
    // 85: 81 fa ff ff ff 3f             cmpl    $0x3fffffff, %edx       # imm = 0x3FFFFFFF
    // 8b: 7f 05                         jg      0x92 <__JIT_ENTRY+0x92>
    // 8d: 4a                            decl    %edx
    // 8e: 89 11                         movl    %edx, (%ecx)
    // 90: 74 22                         je      0xb4 <__JIT_ENTRY+0xb4>
    // 92: 83 c5 f4                      addl    $-0xc, %ebp
    // 95: 85 c0                         testl   %eax, %eax
    // 97: 74 2f                         je      0xc8 <__JIT_ENTRY+0xc8>
    // 99: 8b 04 24                      movl    (%esp), %eax
    // 9c: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // a0: 89 6c 24 20                   movl    %ebp, 0x20(%esp)
    // a4: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // a8: 83 c4 08                      addl    $0x8, %esp
    // ab: 5e                            popl    %esi
    // ac: 5f                            popl    %edi
    // ad: 5b                            popl    %ebx
    // ae: 5d                            popl    %ebp
    // af: e9 00 00 00 00                jmp     0xb4 <__JIT_ENTRY+0xb4>
    // 000000b0:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // b4: 51                            pushl   %ecx
    // b5: 89 c6                         movl    %eax, %esi
    // b7: e8 00 00 00 00                calll   0xbc <__JIT_ENTRY+0xbc>
    // 000000b8:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // bc: 89 f0                         movl    %esi, %eax
    // be: 83 c4 04                      addl    $0x4, %esp
    // c1: 83 c5 f4                      addl    $-0xc, %ebp
    // c4: 85 c0                         testl   %eax, %eax
    // c6: 75 d1                         jne     0x99 <__JIT_ENTRY+0x99>
    // c8: 8b 04 24                      movl    (%esp), %eax
    // cb: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // cf: 89 6c 24 20                   movl    %ebp, 0x20(%esp)
    // d3: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // d7: 83 c4 08                      addl    $0x8, %esp
    // da: 5e                            popl    %esi
    // db: 5f                            popl    %edi
    // dc: 5b                            popl    %ebx
    // dd: 5d                            popl    %ebp
    // de: e9 00 00 00 00                jmp     0xe3 <__JIT_ENTRY+0xe3>
    // 000000df:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[222] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x44, 0x24, 0x24, 0x89, 0x04, 0x24, 0x8b, 0x7c,
        0x24, 0x1c, 0x8b, 0x44, 0x24, 0x20, 0x8b, 0x48,
        0xfc, 0x8b, 0x58, 0xf4, 0x8b, 0x70, 0xf8, 0x89,
        0x47, 0x20, 0x53, 0x89, 0x4c, 0x24, 0x08, 0x51,
        0x56, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x0c, 0x8b, 0x6f, 0x20, 0xc7, 0x47, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x0b, 0x81, 0xf9, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x05, 0x49, 0x89, 0x0b,
        0x74, 0x1e, 0x8b, 0x0e, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x2b, 0x49, 0x89, 0x0e, 0x75,
        0x26, 0x56, 0x89, 0xc6, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xf0, 0x83, 0xc4, 0x04, 0xeb, 0x17,
        0x53, 0x89, 0xc3, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xd8, 0x83, 0xc4, 0x04, 0x8b, 0x0e, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7e, 0xd5, 0x8b,
        0x4c, 0x24, 0x04, 0x8b, 0x11, 0x81, 0xfa, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x05, 0x4a, 0x89, 0x11,
        0x74, 0x22, 0x83, 0xc5, 0xf4, 0x85, 0xc0, 0x74,
        0x2f, 0x8b, 0x04, 0x24, 0x89, 0x44, 0x24, 0x24,
        0x89, 0x6c, 0x24, 0x20, 0x89, 0x7c, 0x24, 0x1c,
        0x83, 0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x51, 0x89, 0xc6, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xf0, 0x83, 0xc4,
        0x04, 0x83, 0xc5, 0xf4, 0x85, 0xc0, 0x75, 0xd1,
        0x8b, 0x04, 0x24, 0x89, 0x44, 0x24, 0x24, 0x89,
        0x6c, 0x24, 0x20, 0x89, 0x7c, 0x24, 0x1c, 0x83,
        0xc4, 0x08, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)&PyObject_SetItem + -0x4);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x6c, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xb0, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0xb8, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_SUBSCR_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_SUBSCR_DICT.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // 7: 8b 44 24 14                   movl    0x14(%esp), %eax
    // b: 8b 74 24 10                   movl    0x10(%esp), %esi
    // f: 8b 58 f8                      movl    -0x8(%eax), %ebx
    // 12: 81 7b 04 00 00 00 00          cmpl    $0x0, 0x4(%ebx)
    // 00000015:  IMAGE_REL_I386_DIR32 _PyDict_Type
    // 19: 74 14                         je      0x2f <__JIT_ENTRY+0x2f>
    // 1b: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 1f: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 23: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 27: 5e                            popl    %esi
    // 28: 5f                            popl    %edi
    // 29: 5b                            popl    %ebx
    // 2a: e9 00 00 00 00                jmp     0x2f <__JIT_ENTRY+0x2f>
    // 0000002b:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 2f: 8b 48 f4                      movl    -0xc(%eax), %ecx
    // 32: 8b 50 fc                      movl    -0x4(%eax), %edx
    // 35: 89 46 20                      movl    %eax, 0x20(%esi)
    // 38: 51                            pushl   %ecx
    // 39: 52                            pushl   %edx
    // 3a: 53                            pushl   %ebx
    // 3b: e8 00 00 00 00                calll   0x40 <__JIT_ENTRY+0x40>
    // 0000003c:  IMAGE_REL_I386_REL32 __PyDict_SetItem_Take2
    // 40: 83 c4 0c                      addl    $0xc, %esp
    // 43: 83 46 20 f4                   addl    $-0xc, 0x20(%esi)
    // 47: 8b 0b                         movl    (%ebx), %ecx
    // 49: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 4f: 7f 05                         jg      0x56 <__JIT_ENTRY+0x56>
    // 51: 49                            decl    %ecx
    // 52: 89 0b                         movl    %ecx, (%ebx)
    // 54: 74 22                         je      0x78 <__JIT_ENTRY+0x78>
    // 56: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 59: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 60: 85 c0                         testl   %eax, %eax
    // 62: 74 2f                         je      0x93 <__JIT_ENTRY+0x93>
    // 64: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 68: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 6c: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 70: 5e                            popl    %esi
    // 71: 5f                            popl    %edi
    // 72: 5b                            popl    %ebx
    // 73: e9 00 00 00 00                jmp     0x78 <__JIT_ENTRY+0x78>
    // 00000074:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    // 78: 53                            pushl   %ebx
    // 79: 89 c3                         movl    %eax, %ebx
    // 7b: e8 00 00 00 00                calll   0x80 <__JIT_ENTRY+0x80>
    // 0000007c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 80: 89 d8                         movl    %ebx, %eax
    // 82: 83 c4 04                      addl    $0x4, %esp
    // 85: 8b 4e 20                      movl    0x20(%esi), %ecx
    // 88: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 8f: 85 c0                         testl   %eax, %eax
    // 91: 75 d1                         jne     0x64 <__JIT_ENTRY+0x64>
    // 93: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 97: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 9b: 89 74 24 10                   movl    %esi, 0x10(%esp)
    // 9f: 5e                            popl    %esi
    // a0: 5f                            popl    %edi
    // a1: 5b                            popl    %ebx
    // a2: e9 00 00 00 00                jmp     0xa7 <__JIT_ENTRY+0xa7>
    // 000000a3:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[162] = {
        0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x18, 0x8b,
        0x44, 0x24, 0x14, 0x8b, 0x74, 0x24, 0x10, 0x8b,
        0x58, 0xf8, 0x81, 0x7b, 0x04, 0x00, 0x00, 0x00,
        0x00, 0x74, 0x14, 0x89, 0x7c, 0x24, 0x18, 0x89,
        0x44, 0x24, 0x14, 0x89, 0x74, 0x24, 0x10, 0x5e,
        0x5f, 0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x48, 0xf4, 0x8b, 0x50, 0xfc, 0x89, 0x46, 0x20,
        0x51, 0x52, 0x53, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x0c, 0x83, 0x46, 0x20, 0xf4, 0x8b,
        0x0b, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x05, 0x49, 0x89, 0x0b, 0x74, 0x22, 0x8b, 0x4e,
        0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x74, 0x2f, 0x89, 0x7c, 0x24, 0x18,
        0x89, 0x4c, 0x24, 0x14, 0x89, 0x74, 0x24, 0x10,
        0x5e, 0x5f, 0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x53, 0x89, 0xc3, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xd8, 0x83, 0xc4, 0x04, 0x8b, 0x4e, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x85,
        0xc0, 0x75, 0xd1, 0x89, 0x7c, 0x24, 0x18, 0x89,
        0x4c, 0x24, 0x14, 0x89, 0x74, 0x24, 0x10, 0x5e,
        0x5f, 0x5b,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x15, (uintptr_t)&PyDict_Type);
    patch_x86_64_32rx(code + 0x2b, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)&_PyDict_SetItem_Take2 + -0x4);
    patch_x86_64_32rx(code + 0x74, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x7c, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__STORE_SUBSCR_LIST_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_SUBSCR_LIST_INT.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 0c                      subl    $0xc, %esp
    // 7: 8b 7c 24 28                   movl    0x28(%esp), %edi
    // b: 8b 5c 24 24                   movl    0x24(%esp), %ebx
    // f: 8b 74 24 20                   movl    0x20(%esp), %esi
    // 13: 8b 6b fc                      movl    -0x4(%ebx), %ebp
    // 16: 81 7d 04 00 00 00 00          cmpl    $0x0, 0x4(%ebp)
    // 00000019:  IMAGE_REL_I386_DIR32 _PyLong_Type
    // 1d: 0f 85 d3 00 00 00             jne     0xf6 <__JIT_ENTRY+0xf6>
    // 23: 8b 53 f8                      movl    -0x8(%ebx), %edx
    // 26: 81 7a 04 00 00 00 00          cmpl    $0x0, 0x4(%edx)
    // 00000029:  IMAGE_REL_I386_DIR32 _PyList_Type
    // 2d: 0f 85 c3 00 00 00             jne     0xf6 <__JIT_ENTRY+0xf6>
    // 33: 8b 45 08                      movl    0x8(%ebp), %eax
    // 36: 83 e0 fb                      andl    $-0x5, %eax
    // 39: 83 f8 09                      cmpl    $0x9, %eax
    // 3c: 0f 83 b4 00 00 00             jae     0xf6 <__JIT_ENTRY+0xf6>
    // 42: 8b 45 0c                      movl    0xc(%ebp), %eax
    // 45: 3b 42 08                      cmpl    0x8(%edx), %eax
    // 48: 0f 8d a8 00 00 00             jge     0xf6 <__JIT_ENTRY+0xf6>
    // 4e: 8b 4b f4                      movl    -0xc(%ebx), %ecx
    // 51: 89 0c 24                      movl    %ecx, (%esp)
    // 54: 83 c3 f4                      addl    $-0xc, %ebx
    // 57: 89 54 24 08                   movl    %edx, 0x8(%esp)
    // 5b: 8b 52 0c                      movl    0xc(%edx), %edx
    // 5e: 8b 0c 82                      movl    (%edx,%eax,4), %ecx
    // 61: 89 4c 24 04                   movl    %ecx, 0x4(%esp)
    // 65: 8b 0c 24                      movl    (%esp), %ecx
    // 68: 89 0c 82                      movl    %ecx, (%edx,%eax,4)
    // 6b: 8b 45 00                      movl    (%ebp), %eax
    // 6e: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // 73: 7f 26                         jg      0x9b <__JIT_ENTRY+0x9b>
    // 75: 48                            decl    %eax
    // 76: 89 45 00                      movl    %eax, (%ebp)
    // 79: 75 20                         jne     0x9b <__JIT_ENTRY+0x9b>
    // 7b: a1 50 14 00 00                movl    0x1450, %eax
    // 0000007c:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 80: 85 c0                         testl   %eax, %eax
    // 82: 74 0e                         je      0x92 <__JIT_ENTRY+0x92>
    // 84: ff 35 54 14 00 00             pushl   0x1454
    // 00000086:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 8a: 6a 01                         pushl   $0x1
    // 8c: 55                            pushl   %ebp
    // 8d: ff d0                         calll   *%eax
    // 8f: 83 c4 0c                      addl    $0xc, %esp
    // 92: 55                            pushl   %ebp
    // 93: e8 00 00 00 00                calll   0x98 <__JIT_ENTRY+0x98>
    // 00000094:  IMAGE_REL_I386_REL32 __PyLong_ExactDealloc
    // 98: 83 c4 04                      addl    $0x4, %esp
    // 9b: 89 5e 20                      movl    %ebx, 0x20(%esi)
    // 9e: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // a2: 8b 01                         movl    (%ecx), %eax
    // a4: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // a9: 7f 0e                         jg      0xb9 <__JIT_ENTRY+0xb9>
    // ab: 48                            decl    %eax
    // ac: 89 01                         movl    %eax, (%ecx)
    // ae: 75 09                         jne     0xb9 <__JIT_ENTRY+0xb9>
    // b0: 51                            pushl   %ecx
    // b1: e8 00 00 00 00                calll   0xb6 <__JIT_ENTRY+0xb6>
    // 000000b2:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // b6: 83 c4 04                      addl    $0x4, %esp
    // b9: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // bd: 8b 01                         movl    (%ecx), %eax
    // bf: 3d ff ff ff 3f                cmpl    $0x3fffffff, %eax       # imm = 0x3FFFFFFF
    // c4: 7f 0e                         jg      0xd4 <__JIT_ENTRY+0xd4>
    // c6: 48                            decl    %eax
    // c7: 89 01                         movl    %eax, (%ecx)
    // c9: 75 09                         jne     0xd4 <__JIT_ENTRY+0xd4>
    // cb: 51                            pushl   %ecx
    // cc: e8 00 00 00 00                calll   0xd1 <__JIT_ENTRY+0xd1>
    // 000000cd:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // d1: 83 c4 04                      addl    $0x4, %esp
    // d4: 8b 46 20                      movl    0x20(%esi), %eax
    // d7: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // de: 89 7c 24 28                   movl    %edi, 0x28(%esp)
    // e2: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // e6: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // ea: 83 c4 0c                      addl    $0xc, %esp
    // ed: 5e                            popl    %esi
    // ee: 5f                            popl    %edi
    // ef: 5b                            popl    %ebx
    // f0: 5d                            popl    %ebp
    // f1: e9 00 00 00 00                jmp     0xf6 <__JIT_ENTRY+0xf6>
    // 000000f2:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // f6: 89 7c 24 28                   movl    %edi, 0x28(%esp)
    // fa: 89 5c 24 24                   movl    %ebx, 0x24(%esp)
    // fe: 89 74 24 20                   movl    %esi, 0x20(%esp)
    // 102: 83 c4 0c                      addl    $0xc, %esp
    // 105: 5e                            popl    %esi
    // 106: 5f                            popl    %edi
    // 107: 5b                            popl    %ebx
    // 108: 5d                            popl    %ebp
    // 109: e9 00 00 00 00                jmp     0x10e <__JIT_ENTRY+0x10e>
    // 0000010a:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    const unsigned char code_body[270] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x0c, 0x8b,
        0x7c, 0x24, 0x28, 0x8b, 0x5c, 0x24, 0x24, 0x8b,
        0x74, 0x24, 0x20, 0x8b, 0x6b, 0xfc, 0x81, 0x7d,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xd3,
        0x00, 0x00, 0x00, 0x8b, 0x53, 0xf8, 0x81, 0x7a,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xc3,
        0x00, 0x00, 0x00, 0x8b, 0x45, 0x08, 0x83, 0xe0,
        0xfb, 0x83, 0xf8, 0x09, 0x0f, 0x83, 0xb4, 0x00,
        0x00, 0x00, 0x8b, 0x45, 0x0c, 0x3b, 0x42, 0x08,
        0x0f, 0x8d, 0xa8, 0x00, 0x00, 0x00, 0x8b, 0x4b,
        0xf4, 0x89, 0x0c, 0x24, 0x83, 0xc3, 0xf4, 0x89,
        0x54, 0x24, 0x08, 0x8b, 0x52, 0x0c, 0x8b, 0x0c,
        0x82, 0x89, 0x4c, 0x24, 0x04, 0x8b, 0x0c, 0x24,
        0x89, 0x0c, 0x82, 0x8b, 0x45, 0x00, 0x3d, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x26, 0x48, 0x89, 0x45,
        0x00, 0x75, 0x20, 0xa1, 0x50, 0x14, 0x00, 0x00,
        0x85, 0xc0, 0x74, 0x0e, 0xff, 0x35, 0x54, 0x14,
        0x00, 0x00, 0x6a, 0x01, 0x55, 0xff, 0xd0, 0x83,
        0xc4, 0x0c, 0x55, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0x89, 0x5e, 0x20, 0x8b, 0x4c,
        0x24, 0x08, 0x8b, 0x01, 0x3d, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x0e, 0x48, 0x89, 0x01, 0x75, 0x09,
        0x51, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4,
        0x04, 0x8b, 0x4c, 0x24, 0x04, 0x8b, 0x01, 0x3d,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x48, 0x89,
        0x01, 0x75, 0x09, 0x51, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x04, 0x8b, 0x46, 0x20, 0xc7,
        0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x89, 0x7c,
        0x24, 0x28, 0x89, 0x44, 0x24, 0x24, 0x89, 0x74,
        0x24, 0x20, 0x83, 0xc4, 0x0c, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x7c,
        0x24, 0x28, 0x89, 0x5c, 0x24, 0x24, 0x89, 0x74,
        0x24, 0x20, 0x83, 0xc4, 0x0c, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x19, (uintptr_t)&PyLong_Type);
    patch_32(code + 0x29, (uintptr_t)&PyList_Type);
    patch_32(code + 0x7c, (uintptr_t)&_PyRuntime + 0x1450);
    patch_32(code + 0x86, (uintptr_t)&_PyRuntime + 0x1454);
    patch_x86_64_32rx(code + 0x94, (uintptr_t)&_PyLong_ExactDealloc + -0x4);
    patch_x86_64_32rx(code + 0xb2, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xcd, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xf2, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x10a, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__SWAP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SWAP.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 57                            pushl   %edi
    // 2: 56                            pushl   %esi
    // 3: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 7: 8b 4c 24 10                   movl    0x10(%esp), %ecx
    // b: 8b 54 24 14                   movl    0x14(%esp), %edx
    // f: be 00 00 00 00                movl    $0x0, %esi
    // 00000010:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 14: 0f b7 f6                      movzwl  %si, %esi
    // 17: c1 e6 02                      shll    $0x2, %esi
    // 1a: 89 d7                         movl    %edx, %edi
    // 1c: 29 f7                         subl    %esi, %edi
    // 1e: f7 de                         negl    %esi
    // 20: 8b 3f                         movl    (%edi), %edi
    // 22: 8b 5a fc                      movl    -0x4(%edx), %ebx
    // 25: 89 1c 32                      movl    %ebx, (%edx,%esi)
    // 28: 89 7a fc                      movl    %edi, -0x4(%edx)
    // 2b: 89 4c 24 10                   movl    %ecx, 0x10(%esp)
    // 2f: 89 54 24 14                   movl    %edx, 0x14(%esp)
    // 33: 89 44 24 18                   movl    %eax, 0x18(%esp)
    // 37: 5e                            popl    %esi
    // 38: 5f                            popl    %edi
    // 39: 5b                            popl    %ebx
    // 3a: e9 00 00 00 00                jmp     0x3f <__JIT_ENTRY+0x3f>
    // 0000003b:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[58] = {
        0x53, 0x57, 0x56, 0x8b, 0x44, 0x24, 0x18, 0x8b,
        0x4c, 0x24, 0x10, 0x8b, 0x54, 0x24, 0x14, 0xbe,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6, 0xc1,
        0xe6, 0x02, 0x89, 0xd7, 0x29, 0xf7, 0xf7, 0xde,
        0x8b, 0x3f, 0x8b, 0x5a, 0xfc, 0x89, 0x1c, 0x32,
        0x89, 0x7a, 0xfc, 0x89, 0x4c, 0x24, 0x10, 0x89,
        0x54, 0x24, 0x14, 0x89, 0x44, 0x24, 0x18, 0x5e,
        0x5f, 0x5b,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x10, instruction->oparg);
}

void
emit__TIER2_RESUME_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TIER2_RESUME_CHECK.o:      file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 5a 0c                      movl    0xc(%edx), %ebx
    // 10: 84 db                         testb   %bl, %bl
    // 12: 74 12                         je      0x26 <__JIT_ENTRY+0x26>
    // 14: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 18: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 1c: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 20: 5b                            popl    %ebx
    // 21: e9 00 00 00 00                jmp     0x26 <__JIT_ENTRY+0x26>
    // 00000022:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 26: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2a: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 2e: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 32: 5b                            popl    %ebx
    // 33: e9 00 00 00 00                jmp     0x38 <__JIT_ENTRY+0x38>
    // 00000034:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[51] = {
        0x53, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x5a, 0x0c,
        0x84, 0xdb, 0x74, 0x12, 0x89, 0x54, 0x24, 0x10,
        0x89, 0x4c, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08,
        0x5b, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54,
        0x24, 0x10, 0x89, 0x4c, 0x24, 0x0c, 0x89, 0x44,
        0x24, 0x08, 0x5b,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x22, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__TO_BOOL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 10: 8b 68 fc                      movl    -0x4(%eax), %ebp
    // 13: 89 46 20                      movl    %eax, 0x20(%esi)
    // 16: 55                            pushl   %ebp
    // 17: e8 00 00 00 00                calll   0x1c <__JIT_ENTRY+0x1c>
    // 00000018:  IMAGE_REL_I386_REL32 _PyObject_IsTrue
    // 1c: 83 c4 04                      addl    $0x4, %esp
    // 1f: 8b 5e 20                      movl    0x20(%esi), %ebx
    // 22: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 29: 8b 4d 00                      movl    (%ebp), %ecx
    // 2c: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 32: 7f 06                         jg      0x3a <__JIT_ENTRY+0x3a>
    // 34: 49                            decl    %ecx
    // 35: 89 4d 00                      movl    %ecx, (%ebp)
    // 38: 74 29                         je      0x63 <__JIT_ENTRY+0x63>
    // 3a: 85 c0                         testl   %eax, %eax
    // 3c: 78 36                         js      0x74 <__JIT_ENTRY+0x74>
    // 3e: b8 00 00 00 00                movl    $0x0, %eax
    // 0000003f:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 43: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000044:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 48: 0f 44 c8                      cmovel  %eax, %ecx
    // 4b: 89 4b fc                      movl    %ecx, -0x4(%ebx)
    // 4e: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 52: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 56: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 5a: 5e                            popl    %esi
    // 5b: 5f                            popl    %edi
    // 5c: 5b                            popl    %ebx
    // 5d: 5d                            popl    %ebp
    // 5e: e9 00 00 00 00                jmp     0x63 <__JIT_ENTRY+0x63>
    // 0000005f:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 63: 55                            pushl   %ebp
    // 64: 89 c5                         movl    %eax, %ebp
    // 66: e8 00 00 00 00                calll   0x6b <__JIT_ENTRY+0x6b>
    // 00000067:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 6b: 89 e8                         movl    %ebp, %eax
    // 6d: 83 c4 04                      addl    $0x4, %esp
    // 70: 85 c0                         testl   %eax, %eax
    // 72: 79 ca                         jns     0x3e <__JIT_ENTRY+0x3e>
    // 74: 83 c3 fc                      addl    $-0x4, %ebx
    // 77: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 7b: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 7f: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 83: 5e                            popl    %esi
    // 84: 5f                            popl    %edi
    // 85: 5b                            popl    %ebx
    // 86: 5d                            popl    %ebp
    // 87: e9 00 00 00 00                jmp     0x8c <__JIT_ENTRY+0x8c>
    // 00000088:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[140] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x18,
        0x8b, 0x68, 0xfc, 0x89, 0x46, 0x20, 0x55, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b,
        0x5e, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x4d, 0x00, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x06, 0x49, 0x89, 0x4d, 0x00,
        0x74, 0x29, 0x85, 0xc0, 0x78, 0x36, 0xb8, 0x00,
        0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x44, 0xc8, 0x89, 0x4b, 0xfc, 0x89, 0x7c,
        0x24, 0x1c, 0x89, 0x5c, 0x24, 0x18, 0x89, 0x74,
        0x24, 0x14, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x55, 0x89, 0xc5, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xe8, 0x83, 0xc4, 0x04,
        0x85, 0xc0, 0x79, 0xca, 0x83, 0xc3, 0xfc, 0x89,
        0x7c, 0x24, 0x1c, 0x89, 0x74, 0x24, 0x14, 0x89,
        0x5c, 0x24, 0x18, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x18, (uintptr_t)&PyObject_IsTrue + -0x4);
    patch_32(code + 0x3f, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0x44, (uintptr_t)&_Py_TrueStruct);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x67, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x88, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__TO_BOOL_BOOL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL_BOOL.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 56                            pushl   %esi
    // 1: 8b 54 24 10                   movl    0x10(%esp), %edx
    // 5: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // 9: 8b 44 24 08                   movl    0x8(%esp), %eax
    // d: 8b 71 fc                      movl    -0x4(%ecx), %esi
    // 10: 81 7e 04 00 00 00 00          cmpl    $0x0, 0x4(%esi)
    // 00000013:  IMAGE_REL_I386_DIR32 _PyBool_Type
    // 17: 74 12                         je      0x2b <__JIT_ENTRY+0x2b>
    // 19: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 1d: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 21: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 25: 5e                            popl    %esi
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 00000027:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 2b: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2f: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 33: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 37: 5e                            popl    %esi
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 00000039:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0x56, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x4c, 0x24,
        0x0c, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x71, 0xfc,
        0x81, 0x7e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x12, 0x89, 0x54, 0x24, 0x10, 0x89, 0x4c, 0x24,
        0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x10, 0x89,
        0x4c, 0x24, 0x0c, 0x89, 0x44, 0x24, 0x08, 0x5e,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x13, (uintptr_t)&PyBool_Type);
    patch_x86_64_32rx(code + 0x27, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__TO_BOOL_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL_INT.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 5c 24 1c                   movl    0x1c(%esp), %ebx
    // 8: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // c: 8b 74 24 14                   movl    0x14(%esp), %esi
    // 10: 8b 47 fc                      movl    -0x4(%edi), %eax
    // 13: 81 78 04 00 00 00 00          cmpl    $0x0, 0x4(%eax)
    // 00000016:  IMAGE_REL_I386_DIR32 _PyLong_Type
    // 1a: 74 15                         je      0x31 <__JIT_ENTRY+0x31>
    // 1c: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 20: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 24: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 28: 5e                            popl    %esi
    // 29: 5f                            popl    %edi
    // 2a: 5b                            popl    %ebx
    // 2b: 5d                            popl    %ebp
    // 2c: e9 00 00 00 00                jmp     0x31 <__JIT_ENTRY+0x31>
    // 0000002d:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 31: 8b 48 08                      movl    0x8(%eax), %ecx
    // 34: 83 e1 03                      andl    $0x3, %ecx
    // 37: bd 00 00 00 00                movl    $0x0, %ebp
    // 00000038:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 3c: 83 f9 01                      cmpl    $0x1, %ecx
    // 3f: 74 1d                         je      0x5e <__JIT_ENTRY+0x5e>
    // 41: 8b 08                         movl    (%eax), %ecx
    // 43: bd 00 00 00 00                movl    $0x0, %ebp
    // 00000044:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 48: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 4e: 7f 0e                         jg      0x5e <__JIT_ENTRY+0x5e>
    // 50: 49                            decl    %ecx
    // 51: 89 08                         movl    %ecx, (%eax)
    // 53: 75 09                         jne     0x5e <__JIT_ENTRY+0x5e>
    // 55: 50                            pushl   %eax
    // 56: e8 00 00 00 00                calll   0x5b <__JIT_ENTRY+0x5b>
    // 00000057:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 5b: 83 c4 04                      addl    $0x4, %esp
    // 5e: 89 6f fc                      movl    %ebp, -0x4(%edi)
    // 61: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 65: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 69: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 6d: 5e                            popl    %esi
    // 6e: 5f                            popl    %edi
    // 6f: 5b                            popl    %ebx
    // 70: 5d                            popl    %ebp
    // 71: e9 00 00 00 00                jmp     0x76 <__JIT_ENTRY+0x76>
    // 00000072:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[113] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x5c, 0x24, 0x1c,
        0x8b, 0x7c, 0x24, 0x18, 0x8b, 0x74, 0x24, 0x14,
        0x8b, 0x47, 0xfc, 0x81, 0x78, 0x04, 0x00, 0x00,
        0x00, 0x00, 0x74, 0x15, 0x89, 0x5c, 0x24, 0x1c,
        0x89, 0x7c, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x48, 0x08, 0x83, 0xe1, 0x03, 0xbd,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xf9, 0x01, 0x74,
        0x1d, 0x8b, 0x08, 0xbd, 0x00, 0x00, 0x00, 0x00,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e,
        0x49, 0x89, 0x08, 0x75, 0x09, 0x50, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x89, 0x6f,
        0xfc, 0x89, 0x5c, 0x24, 0x1c, 0x89, 0x7c, 0x24,
        0x18, 0x89, 0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b,
        0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x16, (uintptr_t)&PyLong_Type);
    patch_x86_64_32rx(code + 0x2d, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32(code + 0x38, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0x44, (uintptr_t)&_Py_TrueStruct);
    patch_x86_64_32rx(code + 0x57, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__TO_BOOL_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL_LIST.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 5c 24 1c                   movl    0x1c(%esp), %ebx
    // 8: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // c: 8b 74 24 14                   movl    0x14(%esp), %esi
    // 10: 8b 47 fc                      movl    -0x4(%edi), %eax
    // 13: 81 78 04 00 00 00 00          cmpl    $0x0, 0x4(%eax)
    // 00000016:  IMAGE_REL_I386_DIR32 _PyList_Type
    // 1a: 74 15                         je      0x31 <__JIT_ENTRY+0x31>
    // 1c: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 20: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 24: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 28: 5e                            popl    %esi
    // 29: 5f                            popl    %edi
    // 2a: 5b                            popl    %ebx
    // 2b: 5d                            popl    %ebp
    // 2c: e9 00 00 00 00                jmp     0x31 <__JIT_ENTRY+0x31>
    // 0000002d:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 31: 8b 08                         movl    (%eax), %ecx
    // 33: 8b 68 08                      movl    0x8(%eax), %ebp
    // 36: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 3c: 7f 0e                         jg      0x4c <__JIT_ENTRY+0x4c>
    // 3e: 49                            decl    %ecx
    // 3f: 89 08                         movl    %ecx, (%eax)
    // 41: 75 09                         jne     0x4c <__JIT_ENTRY+0x4c>
    // 43: 50                            pushl   %eax
    // 44: e8 00 00 00 00                calll   0x49 <__JIT_ENTRY+0x49>
    // 00000045:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 49: 83 c4 04                      addl    $0x4, %esp
    // 4c: 85 ed                         testl   %ebp, %ebp
    // 4e: b8 00 00 00 00                movl    $0x0, %eax
    // 0000004f:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 53: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000054:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 58: 0f 44 c8                      cmovel  %eax, %ecx
    // 5b: 89 4f fc                      movl    %ecx, -0x4(%edi)
    // 5e: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 62: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 66: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 6a: 5e                            popl    %esi
    // 6b: 5f                            popl    %edi
    // 6c: 5b                            popl    %ebx
    // 6d: 5d                            popl    %ebp
    // 6e: e9 00 00 00 00                jmp     0x73 <__JIT_ENTRY+0x73>
    // 0000006f:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[110] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x5c, 0x24, 0x1c,
        0x8b, 0x7c, 0x24, 0x18, 0x8b, 0x74, 0x24, 0x14,
        0x8b, 0x47, 0xfc, 0x81, 0x78, 0x04, 0x00, 0x00,
        0x00, 0x00, 0x74, 0x15, 0x89, 0x5c, 0x24, 0x1c,
        0x89, 0x7c, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x08, 0x8b, 0x68, 0x08, 0x81, 0xf9,
        0xff, 0xff, 0xff, 0x3f, 0x7f, 0x0e, 0x49, 0x89,
        0x08, 0x75, 0x09, 0x50, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc4, 0x04, 0x85, 0xed, 0xb8, 0x00,
        0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x44, 0xc8, 0x89, 0x4f, 0xfc, 0x89, 0x5c,
        0x24, 0x1c, 0x89, 0x7c, 0x24, 0x18, 0x89, 0x74,
        0x24, 0x14, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x16, (uintptr_t)&PyList_Type);
    patch_x86_64_32rx(code + 0x2d, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x4f, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0x54, (uintptr_t)&_Py_TrueStruct);
}

void
emit__TO_BOOL_NONE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL_NONE.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 8b 54 24 0c                   movl    0xc(%esp), %edx
    // 4: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // 8: 8b 44 24 04                   movl    0x4(%esp), %eax
    // c: 81 79 fc 00 00 00 00          cmpl    $0x0, -0x4(%ecx)
    // 0000000f:  IMAGE_REL_I386_DIR32 __Py_NoneStruct
    // 13: 74 11                         je      0x26 <__JIT_ENTRY+0x26>
    // 15: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 19: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 1d: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 21: e9 00 00 00 00                jmp     0x26 <__JIT_ENTRY+0x26>
    // 00000022:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 26: c7 41 fc 00 00 00 00          movl    $0x0, -0x4(%ecx)
    // 00000029:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 2d: 89 54 24 0c                   movl    %edx, 0xc(%esp)
    // 31: 89 4c 24 08                   movl    %ecx, 0x8(%esp)
    // 35: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 39: e9 00 00 00 00                jmp     0x3e <__JIT_ENTRY+0x3e>
    // 0000003a:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[57] = {
        0x8b, 0x54, 0x24, 0x0c, 0x8b, 0x4c, 0x24, 0x08,
        0x8b, 0x44, 0x24, 0x04, 0x81, 0x79, 0xfc, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x11, 0x89, 0x54, 0x24,
        0x0c, 0x89, 0x4c, 0x24, 0x08, 0x89, 0x44, 0x24,
        0x04, 0xe9, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x41,
        0xfc, 0x00, 0x00, 0x00, 0x00, 0x89, 0x54, 0x24,
        0x0c, 0x89, 0x4c, 0x24, 0x08, 0x89, 0x44, 0x24,
        0x04,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0xf, (uintptr_t)&_Py_NoneStruct);
    patch_x86_64_32rx(code + 0x22, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32(code + 0x29, (uintptr_t)&_Py_FalseStruct);
}

void
emit__TO_BOOL_STR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL_STR.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 5c 24 1c                   movl    0x1c(%esp), %ebx
    // 8: 8b 7c 24 18                   movl    0x18(%esp), %edi
    // c: 8b 74 24 14                   movl    0x14(%esp), %esi
    // 10: 8b 47 fc                      movl    -0x4(%edi), %eax
    // 13: 81 78 04 00 00 00 00          cmpl    $0x0, 0x4(%eax)
    // 00000016:  IMAGE_REL_I386_DIR32 _PyUnicode_Type
    // 1a: 74 15                         je      0x31 <__JIT_ENTRY+0x31>
    // 1c: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 20: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 24: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 28: 5e                            popl    %esi
    // 29: 5f                            popl    %edi
    // 2a: 5b                            popl    %ebx
    // 2b: 5d                            popl    %ebp
    // 2c: e9 00 00 00 00                jmp     0x31 <__JIT_ENTRY+0x31>
    // 0000002d:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 31: 3d 04 4c 00 00                cmpl    $0x4c04, %eax           # imm = 0x4C04
    // 00000032:  IMAGE_REL_I386_DIR32 __PyRuntime
    // 36: 74 1f                         je      0x57 <__JIT_ENTRY+0x57>
    // 38: 8b 08                         movl    (%eax), %ecx
    // 3a: bd 00 00 00 00                movl    $0x0, %ebp
    // 0000003b:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 3f: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 45: 7f 15                         jg      0x5c <__JIT_ENTRY+0x5c>
    // 47: 49                            decl    %ecx
    // 48: 89 08                         movl    %ecx, (%eax)
    // 4a: 75 10                         jne     0x5c <__JIT_ENTRY+0x5c>
    // 4c: 50                            pushl   %eax
    // 4d: e8 00 00 00 00                calll   0x52 <__JIT_ENTRY+0x52>
    // 0000004e:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 52: 83 c4 04                      addl    $0x4, %esp
    // 55: eb 05                         jmp     0x5c <__JIT_ENTRY+0x5c>
    // 57: bd 00 00 00 00                movl    $0x0, %ebp
    // 00000058:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 5c: 89 6f fc                      movl    %ebp, -0x4(%edi)
    // 5f: 89 5c 24 1c                   movl    %ebx, 0x1c(%esp)
    // 63: 89 7c 24 18                   movl    %edi, 0x18(%esp)
    // 67: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 6b: 5e                            popl    %esi
    // 6c: 5f                            popl    %edi
    // 6d: 5b                            popl    %ebx
    // 6e: 5d                            popl    %ebp
    // 6f: e9 00 00 00 00                jmp     0x74 <__JIT_ENTRY+0x74>
    // 00000070:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[111] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x5c, 0x24, 0x1c,
        0x8b, 0x7c, 0x24, 0x18, 0x8b, 0x74, 0x24, 0x14,
        0x8b, 0x47, 0xfc, 0x81, 0x78, 0x04, 0x00, 0x00,
        0x00, 0x00, 0x74, 0x15, 0x89, 0x5c, 0x24, 0x1c,
        0x89, 0x7c, 0x24, 0x18, 0x89, 0x74, 0x24, 0x14,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x3d, 0x04, 0x4c, 0x00, 0x00, 0x74, 0x1f,
        0x8b, 0x08, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x81,
        0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x15, 0x49,
        0x89, 0x08, 0x75, 0x10, 0x50, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x04, 0xeb, 0x05, 0xbd,
        0x00, 0x00, 0x00, 0x00, 0x89, 0x6f, 0xfc, 0x89,
        0x5c, 0x24, 0x1c, 0x89, 0x7c, 0x24, 0x18, 0x89,
        0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x16, (uintptr_t)&PyUnicode_Type);
    patch_x86_64_32rx(code + 0x2d, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32(code + 0x32, (uintptr_t)&_PyRuntime + 0x4c04);
    patch_32(code + 0x3b, (uintptr_t)&_Py_TrueStruct);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x58, (uintptr_t)&_Py_FalseStruct);
}

void
emit__UNARY_INVERT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNARY_INVERT.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 10: 8b 68 fc                      movl    -0x4(%eax), %ebp
    // 13: 89 46 20                      movl    %eax, 0x20(%esi)
    // 16: 55                            pushl   %ebp
    // 17: e8 00 00 00 00                calll   0x1c <__JIT_ENTRY+0x1c>
    // 00000018:  IMAGE_REL_I386_REL32 _PyNumber_Invert
    // 1c: 83 c4 04                      addl    $0x4, %esp
    // 1f: 8b 5e 20                      movl    0x20(%esi), %ebx
    // 22: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 29: 8b 4d 00                      movl    (%ebp), %ecx
    // 2c: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 32: 7f 06                         jg      0x3a <__JIT_ENTRY+0x3a>
    // 34: 49                            decl    %ecx
    // 35: 89 4d 00                      movl    %ecx, (%ebp)
    // 38: 74 1c                         je      0x56 <__JIT_ENTRY+0x56>
    // 3a: 85 c0                         testl   %eax, %eax
    // 3c: 74 29                         je      0x67 <__JIT_ENTRY+0x67>
    // 3e: 89 43 fc                      movl    %eax, -0x4(%ebx)
    // 41: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 45: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 49: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 4d: 5e                            popl    %esi
    // 4e: 5f                            popl    %edi
    // 4f: 5b                            popl    %ebx
    // 50: 5d                            popl    %ebp
    // 51: e9 00 00 00 00                jmp     0x56 <__JIT_ENTRY+0x56>
    // 00000052:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 56: 55                            pushl   %ebp
    // 57: 89 c5                         movl    %eax, %ebp
    // 59: e8 00 00 00 00                calll   0x5e <__JIT_ENTRY+0x5e>
    // 0000005a:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 5e: 89 e8                         movl    %ebp, %eax
    // 60: 83 c4 04                      addl    $0x4, %esp
    // 63: 85 c0                         testl   %eax, %eax
    // 65: 75 d7                         jne     0x3e <__JIT_ENTRY+0x3e>
    // 67: 83 c3 fc                      addl    $-0x4, %ebx
    // 6a: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 6e: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 72: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 76: 5e                            popl    %esi
    // 77: 5f                            popl    %edi
    // 78: 5b                            popl    %ebx
    // 79: 5d                            popl    %ebp
    // 7a: e9 00 00 00 00                jmp     0x7f <__JIT_ENTRY+0x7f>
    // 0000007b:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[127] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x18,
        0x8b, 0x68, 0xfc, 0x89, 0x46, 0x20, 0x55, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b,
        0x5e, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x4d, 0x00, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x06, 0x49, 0x89, 0x4d, 0x00,
        0x74, 0x1c, 0x85, 0xc0, 0x74, 0x29, 0x89, 0x43,
        0xfc, 0x89, 0x7c, 0x24, 0x1c, 0x89, 0x5c, 0x24,
        0x18, 0x89, 0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x55, 0x89,
        0xc5, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0xe8,
        0x83, 0xc4, 0x04, 0x85, 0xc0, 0x75, 0xd7, 0x83,
        0xc3, 0xfc, 0x89, 0x7c, 0x24, 0x1c, 0x89, 0x74,
        0x24, 0x14, 0x89, 0x5c, 0x24, 0x18, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x18, (uintptr_t)&PyNumber_Invert + -0x4);
    patch_x86_64_32rx(code + 0x52, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x7b, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__UNARY_NEGATIVE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNARY_NEGATIVE.o:  file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // 8: 8b 74 24 14                   movl    0x14(%esp), %esi
    // c: 8b 44 24 18                   movl    0x18(%esp), %eax
    // 10: 8b 68 fc                      movl    -0x4(%eax), %ebp
    // 13: 89 46 20                      movl    %eax, 0x20(%esi)
    // 16: 55                            pushl   %ebp
    // 17: e8 00 00 00 00                calll   0x1c <__JIT_ENTRY+0x1c>
    // 00000018:  IMAGE_REL_I386_REL32 _PyNumber_Negative
    // 1c: 83 c4 04                      addl    $0x4, %esp
    // 1f: 8b 5e 20                      movl    0x20(%esi), %ebx
    // 22: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 29: 8b 4d 00                      movl    (%ebp), %ecx
    // 2c: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 32: 7f 06                         jg      0x3a <__JIT_ENTRY+0x3a>
    // 34: 49                            decl    %ecx
    // 35: 89 4d 00                      movl    %ecx, (%ebp)
    // 38: 74 1c                         je      0x56 <__JIT_ENTRY+0x56>
    // 3a: 85 c0                         testl   %eax, %eax
    // 3c: 74 29                         je      0x67 <__JIT_ENTRY+0x67>
    // 3e: 89 43 fc                      movl    %eax, -0x4(%ebx)
    // 41: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 45: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 49: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 4d: 5e                            popl    %esi
    // 4e: 5f                            popl    %edi
    // 4f: 5b                            popl    %ebx
    // 50: 5d                            popl    %ebp
    // 51: e9 00 00 00 00                jmp     0x56 <__JIT_ENTRY+0x56>
    // 00000052:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 56: 55                            pushl   %ebp
    // 57: 89 c5                         movl    %eax, %ebp
    // 59: e8 00 00 00 00                calll   0x5e <__JIT_ENTRY+0x5e>
    // 0000005a:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 5e: 89 e8                         movl    %ebp, %eax
    // 60: 83 c4 04                      addl    $0x4, %esp
    // 63: 85 c0                         testl   %eax, %eax
    // 65: 75 d7                         jne     0x3e <__JIT_ENTRY+0x3e>
    // 67: 83 c3 fc                      addl    $-0x4, %ebx
    // 6a: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 6e: 89 74 24 14                   movl    %esi, 0x14(%esp)
    // 72: 89 5c 24 18                   movl    %ebx, 0x18(%esp)
    // 76: 5e                            popl    %esi
    // 77: 5f                            popl    %edi
    // 78: 5b                            popl    %ebx
    // 79: 5d                            popl    %ebp
    // 7a: e9 00 00 00 00                jmp     0x7f <__JIT_ENTRY+0x7f>
    // 0000007b:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[127] = {
        0x55, 0x53, 0x57, 0x56, 0x8b, 0x7c, 0x24, 0x1c,
        0x8b, 0x74, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x18,
        0x8b, 0x68, 0xfc, 0x89, 0x46, 0x20, 0x55, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04, 0x8b,
        0x5e, 0x20, 0xc7, 0x46, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x4d, 0x00, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x06, 0x49, 0x89, 0x4d, 0x00,
        0x74, 0x1c, 0x85, 0xc0, 0x74, 0x29, 0x89, 0x43,
        0xfc, 0x89, 0x7c, 0x24, 0x1c, 0x89, 0x5c, 0x24,
        0x18, 0x89, 0x74, 0x24, 0x14, 0x5e, 0x5f, 0x5b,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x55, 0x89,
        0xc5, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0xe8,
        0x83, 0xc4, 0x04, 0x85, 0xc0, 0x75, 0xd7, 0x83,
        0xc3, 0xfc, 0x89, 0x7c, 0x24, 0x1c, 0x89, 0x74,
        0x24, 0x14, 0x89, 0x5c, 0x24, 0x18, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x18, (uintptr_t)&PyNumber_Negative + -0x4);
    patch_x86_64_32rx(code + 0x52, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0x7b, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__UNARY_NOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNARY_NOT.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 57                            pushl   %edi
    // 1: 56                            pushl   %esi
    // 2: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 6: 8b 4c 24 0c                   movl    0xc(%esp), %ecx
    // a: 8b 54 24 10                   movl    0x10(%esp), %edx
    // e: 81 7a fc 00 00 00 00          cmpl    $0x0, -0x4(%edx)
    // 00000011:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 15: be 00 00 00 00                movl    $0x0, %esi
    // 00000016:  IMAGE_REL_I386_DIR32 __Py_FalseStruct
    // 1a: bf 00 00 00 00                movl    $0x0, %edi
    // 0000001b:  IMAGE_REL_I386_DIR32 __Py_TrueStruct
    // 1f: 0f 45 fe                      cmovnel %esi, %edi
    // 22: 89 7a fc                      movl    %edi, -0x4(%edx)
    // 25: 89 4c 24 0c                   movl    %ecx, 0xc(%esp)
    // 29: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2d: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 31: 5e                            popl    %esi
    // 32: 5f                            popl    %edi
    // 33: e9 00 00 00 00                jmp     0x38 <__JIT_ENTRY+0x38>
    // 00000034:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[51] = {
        0x57, 0x56, 0x8b, 0x44, 0x24, 0x14, 0x8b, 0x4c,
        0x24, 0x0c, 0x8b, 0x54, 0x24, 0x10, 0x81, 0x7a,
        0xfc, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x00, 0x00,
        0x00, 0x00, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x45, 0xfe, 0x89, 0x7a, 0xfc, 0x89, 0x4c, 0x24,
        0x0c, 0x89, 0x54, 0x24, 0x10, 0x89, 0x44, 0x24,
        0x14, 0x5e, 0x5f,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x11, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0x16, (uintptr_t)&_Py_FalseStruct);
    patch_32(code + 0x1b, (uintptr_t)&_Py_TrueStruct);
}

void
emit__UNPACK_EX(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNPACK_EX.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 0c                      subl    $0xc, %esp
    // 7: 8b 44 24 28                   movl    0x28(%esp), %eax
    // b: 89 04 24                      movl    %eax, (%esp)
    // e: 8b 5c 24 20                   movl    0x20(%esp), %ebx
    // 12: 8b 44 24 24                   movl    0x24(%esp), %eax
    // 16: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000017:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 1b: 8b 70 fc                      movl    -0x4(%eax), %esi
    // 1e: 0f b6 e9                      movzbl  %cl, %ebp
    // 21: 8d 14 a8                      leal    (%eax,%ebp,4), %edx
    // 24: 0f b6 fd                      movzbl  %ch, %edi
    // 27: 8d 0c ba                      leal    (%edx,%edi,4), %ecx
    // 2a: 89 43 20                      movl    %eax, 0x20(%ebx)
    // 2d: 51                            pushl   %ecx
    // 2e: 89 7c 24 08                   movl    %edi, 0x8(%esp)
    // 32: 57                            pushl   %edi
    // 33: 89 6c 24 10                   movl    %ebp, 0x10(%esp)
    // 37: 55                            pushl   %ebp
    // 38: 56                            pushl   %esi
    // 39: ff 74 24 10                   pushl   0x10(%esp)
    // 3d: e8 00 00 00 00                calll   0x42 <__JIT_ENTRY+0x42>
    // 0000003e:  IMAGE_REL_I386_REL32 __PyEval_UnpackIterableStackRef
    // 42: 83 c4 14                      addl    $0x14, %esp
    // 45: 8b 6b 20                      movl    0x20(%ebx), %ebp
    // 48: c7 43 20 00 00 00 00          movl    $0x0, 0x20(%ebx)
    // 4f: 8b 0e                         movl    (%esi), %ecx
    // 51: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 57: 7f 05                         jg      0x5e <__JIT_ENTRY+0x5e>
    // 59: 49                            decl    %ecx
    // 5a: 89 0e                         movl    %ecx, (%esi)
    // 5c: 74 33                         je      0x91 <__JIT_ENTRY+0x91>
    // 5e: 85 c0                         testl   %eax, %eax
    // 60: 74 40                         je      0xa2 <__JIT_ENTRY+0xa2>
    // 62: 8b 44 24 08                   movl    0x8(%esp), %eax
    // 66: 8d 04 85 00 00 00 00          leal    (,%eax,4), %eax
    // 6d: 01 e8                         addl    %ebp, %eax
    // 6f: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 73: 8d 04 88                      leal    (%eax,%ecx,4), %eax
    // 76: 8b 0c 24                      movl    (%esp), %ecx
    // 79: 89 4c 24 28                   movl    %ecx, 0x28(%esp)
    // 7d: 89 5c 24 20                   movl    %ebx, 0x20(%esp)
    // 81: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // 85: 83 c4 0c                      addl    $0xc, %esp
    // 88: 5e                            popl    %esi
    // 89: 5f                            popl    %edi
    // 8a: 5b                            popl    %ebx
    // 8b: 5d                            popl    %ebp
    // 8c: e9 00 00 00 00                jmp     0x91 <__JIT_ENTRY+0x91>
    // 0000008d:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 91: 56                            pushl   %esi
    // 92: 89 c7                         movl    %eax, %edi
    // 94: e8 00 00 00 00                calll   0x99 <__JIT_ENTRY+0x99>
    // 00000095:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 99: 89 f8                         movl    %edi, %eax
    // 9b: 83 c4 04                      addl    $0x4, %esp
    // 9e: 85 c0                         testl   %eax, %eax
    // a0: 75 c0                         jne     0x62 <__JIT_ENTRY+0x62>
    // a2: 83 c5 fc                      addl    $-0x4, %ebp
    // a5: 8b 04 24                      movl    (%esp), %eax
    // a8: 89 44 24 28                   movl    %eax, 0x28(%esp)
    // ac: 89 5c 24 20                   movl    %ebx, 0x20(%esp)
    // b0: 89 6c 24 24                   movl    %ebp, 0x24(%esp)
    // b4: 83 c4 0c                      addl    $0xc, %esp
    // b7: 5e                            popl    %esi
    // b8: 5f                            popl    %edi
    // b9: 5b                            popl    %ebx
    // ba: 5d                            popl    %ebp
    // bb: e9 00 00 00 00                jmp     0xc0 <__JIT_ENTRY+0xc0>
    // 000000bc:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[192] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x0c, 0x8b,
        0x44, 0x24, 0x28, 0x89, 0x04, 0x24, 0x8b, 0x5c,
        0x24, 0x20, 0x8b, 0x44, 0x24, 0x24, 0xb9, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x70, 0xfc, 0x0f, 0xb6,
        0xe9, 0x8d, 0x14, 0xa8, 0x0f, 0xb6, 0xfd, 0x8d,
        0x0c, 0xba, 0x89, 0x43, 0x20, 0x51, 0x89, 0x7c,
        0x24, 0x08, 0x57, 0x89, 0x6c, 0x24, 0x10, 0x55,
        0x56, 0xff, 0x74, 0x24, 0x10, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x14, 0x8b, 0x6b, 0x20,
        0xc7, 0x43, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x0e, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x05, 0x49, 0x89, 0x0e, 0x74, 0x33, 0x85, 0xc0,
        0x74, 0x40, 0x8b, 0x44, 0x24, 0x08, 0x8d, 0x04,
        0x85, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe8, 0x8b,
        0x4c, 0x24, 0x04, 0x8d, 0x04, 0x88, 0x8b, 0x0c,
        0x24, 0x89, 0x4c, 0x24, 0x28, 0x89, 0x5c, 0x24,
        0x20, 0x89, 0x44, 0x24, 0x24, 0x83, 0xc4, 0x0c,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x56, 0x89, 0xc7, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xf8, 0x83, 0xc4, 0x04, 0x85, 0xc0,
        0x75, 0xc0, 0x83, 0xc5, 0xfc, 0x8b, 0x04, 0x24,
        0x89, 0x44, 0x24, 0x28, 0x89, 0x5c, 0x24, 0x20,
        0x89, 0x6c, 0x24, 0x24, 0x83, 0xc4, 0x0c, 0x5e,
        0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x17, instruction->oparg);
    patch_x86_64_32rx(code + 0x3e, (uintptr_t)&_PyEval_UnpackIterableStackRef + -0x4);
    patch_x86_64_32rx(code + 0x8d, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x95, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xbc, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__UNPACK_SEQUENCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNPACK_SEQUENCE.o: file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 54 24 20                   movl    0x20(%esp), %edx
    // 9: 8b 74 24 18                   movl    0x18(%esp), %esi
    // d: 8b 44 24 1c                   movl    0x1c(%esp), %eax
    // 11: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000012:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 16: 0f b7 d9                      movzwl  %cx, %ebx
    // 19: 8b 68 fc                      movl    -0x4(%eax), %ebp
    // 1c: 8d 4c 98 fc                   leal    -0x4(%eax,%ebx,4), %ecx
    // 20: 89 46 20                      movl    %eax, 0x20(%esi)
    // 23: 51                            pushl   %ecx
    // 24: 6a ff                         pushl   $-0x1
    // 26: 53                            pushl   %ebx
    // 27: 55                            pushl   %ebp
    // 28: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 2c: 52                            pushl   %edx
    // 2d: e8 00 00 00 00                calll   0x32 <__JIT_ENTRY+0x32>
    // 0000002e:  IMAGE_REL_I386_REL32 __PyEval_UnpackIterableStackRef
    // 32: 83 c4 14                      addl    $0x14, %esp
    // 35: 8b 7e 20                      movl    0x20(%esi), %edi
    // 38: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 3f: 8b 4d 00                      movl    (%ebp), %ecx
    // 42: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 48: 7f 06                         jg      0x50 <__JIT_ENTRY+0x50>
    // 4a: 49                            decl    %ecx
    // 4b: 89 4d 00                      movl    %ecx, (%ebp)
    // 4e: 74 25                         je      0x75 <__JIT_ENTRY+0x75>
    // 50: 85 c0                         testl   %eax, %eax
    // 52: 74 32                         je      0x86 <__JIT_ENTRY+0x86>
    // 54: 8d 04 9f                      leal    (%edi,%ebx,4), %eax
    // 57: 83 c0 fc                      addl    $-0x4, %eax
    // 5a: 8b 0c 24                      movl    (%esp), %ecx
    // 5d: 89 4c 24 20                   movl    %ecx, 0x20(%esp)
    // 61: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 65: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // 69: 83 c4 04                      addl    $0x4, %esp
    // 6c: 5e                            popl    %esi
    // 6d: 5f                            popl    %edi
    // 6e: 5b                            popl    %ebx
    // 6f: 5d                            popl    %ebp
    // 70: e9 00 00 00 00                jmp     0x75 <__JIT_ENTRY+0x75>
    // 00000071:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // 75: 55                            pushl   %ebp
    // 76: 89 c5                         movl    %eax, %ebp
    // 78: e8 00 00 00 00                calll   0x7d <__JIT_ENTRY+0x7d>
    // 00000079:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 7d: 89 e8                         movl    %ebp, %eax
    // 7f: 83 c4 04                      addl    $0x4, %esp
    // 82: 85 c0                         testl   %eax, %eax
    // 84: 75 ce                         jne     0x54 <__JIT_ENTRY+0x54>
    // 86: 83 c7 fc                      addl    $-0x4, %edi
    // 89: 8b 04 24                      movl    (%esp), %eax
    // 8c: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // 90: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 94: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 98: 83 c4 04                      addl    $0x4, %esp
    // 9b: 5e                            popl    %esi
    // 9c: 5f                            popl    %edi
    // 9d: 5b                            popl    %ebx
    // 9e: 5d                            popl    %ebp
    // 9f: e9 00 00 00 00                jmp     0xa4 <__JIT_ENTRY+0xa4>
    // 000000a0:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[164] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x54, 0x24,
        0x20, 0x8b, 0x74, 0x24, 0x18, 0x8b, 0x44, 0x24,
        0x1c, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xd9, 0x8b, 0x68, 0xfc, 0x8d, 0x4c, 0x98, 0xfc,
        0x89, 0x46, 0x20, 0x51, 0x6a, 0xff, 0x53, 0x55,
        0x89, 0x54, 0x24, 0x10, 0x52, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xc4, 0x14, 0x8b, 0x7e, 0x20,
        0xc7, 0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x4d, 0x00, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x06, 0x49, 0x89, 0x4d, 0x00, 0x74, 0x25,
        0x85, 0xc0, 0x74, 0x32, 0x8d, 0x04, 0x9f, 0x83,
        0xc0, 0xfc, 0x8b, 0x0c, 0x24, 0x89, 0x4c, 0x24,
        0x20, 0x89, 0x74, 0x24, 0x18, 0x89, 0x44, 0x24,
        0x1c, 0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x55, 0x89, 0xc5,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0xe8, 0x83,
        0xc4, 0x04, 0x85, 0xc0, 0x75, 0xce, 0x83, 0xc7,
        0xfc, 0x8b, 0x04, 0x24, 0x89, 0x44, 0x24, 0x20,
        0x89, 0x74, 0x24, 0x18, 0x89, 0x7c, 0x24, 0x1c,
        0x83, 0xc4, 0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x12, instruction->oparg);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)&_PyEval_UnpackIterableStackRef + -0x4);
    patch_x86_64_32rx(code + 0x71, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x79, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xa0, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__UNPACK_SEQUENCE_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNPACK_SEQUENCE_LIST.o:    file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 0c                      subl    $0xc, %esp
    // 7: 8b 74 24 28                   movl    0x28(%esp), %esi
    // b: 8b 7c 24 24                   movl    0x24(%esp), %edi
    // f: 8b 54 24 20                   movl    0x20(%esp), %edx
    // 13: 8b 47 fc                      movl    -0x4(%edi), %eax
    // 16: 81 78 04 00 00 00 00          cmpl    $0x0, 0x4(%eax)
    // 00000019:  IMAGE_REL_I386_DIR32 _PyList_Type
    // 1d: 75 42                         jne     0x61 <__JIT_ENTRY+0x61>
    // 1f: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000020:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 24: 0f b7 c9                      movzwl  %cx, %ecx
    // 27: 39 48 08                      cmpl    %ecx, 0x8(%eax)
    // 2a: 75 35                         jne     0x61 <__JIT_ENTRY+0x61>
    // 2c: 89 0c 24                      movl    %ecx, (%esp)
    // 2f: 89 74 24 04                   movl    %esi, 0x4(%esp)
    // 33: 89 54 24 08                   movl    %edx, 0x8(%esp)
    // 37: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000038:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 3c: 66 85 c9                      testw   %cx, %cx
    // 3f: 74 5f                         je      0xa0 <__JIT_ENTRY+0xa0>
    // 41: 8d 57 fc                      leal    -0x4(%edi), %edx
    // 44: 8b 48 0c                      movl    0xc(%eax), %ecx
    // 47: 8b 1c 24                      movl    (%esp), %ebx
    // 4a: f6 c3 01                      testb   $0x1, %bl
    // 4d: 75 2a                         jne     0x79 <__JIT_ENTRY+0x79>
    // 4f: 89 dd                         movl    %ebx, %ebp
    // 51: be 00 00 00 00                movl    $0x0, %esi
    // 00000052:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 56: 66 83 fe 01                   cmpw    $0x1, %si
    // 5a: 74 44                         je      0xa0 <__JIT_ENTRY+0xa0>
    // 5c: e9 80 00 00 00                jmp     0xe1 <__JIT_ENTRY+0xe1>
    // 61: 89 74 24 28                   movl    %esi, 0x28(%esp)
    // 65: 89 7c 24 24                   movl    %edi, 0x24(%esp)
    // 69: 89 54 24 20                   movl    %edx, 0x20(%esp)
    // 6d: 83 c4 0c                      addl    $0xc, %esp
    // 70: 5e                            popl    %esi
    // 71: 5f                            popl    %edi
    // 72: 5b                            popl    %ebx
    // 73: 5d                            popl    %ebp
    // 74: e9 00 00 00 00                jmp     0x79 <__JIT_ENTRY+0x79>
    // 00000075:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 79: 8b 6c 99 fc                   movl    -0x4(%ecx,%ebx,4), %ebp
    // 7d: 8b 75 00                      movl    (%ebp), %esi
    // 80: 81 fe ff ff ff 3f             cmpl    $0x3fffffff, %esi       # imm = 0x3FFFFFFF
    // 86: 7f 04                         jg      0x8c <__JIT_ENTRY+0x8c>
    // 88: 46                            incl    %esi
    // 89: 89 75 00                      movl    %esi, (%ebp)
    // 8c: 89 ee                         movl    %ebp, %esi
    // 8e: 8d 6b ff                      leal    -0x1(%ebx), %ebp
    // 91: 89 32                         movl    %esi, (%edx)
    // 93: 89 fa                         movl    %edi, %edx
    // 95: be 00 00 00 00                movl    $0x0, %esi
    // 00000096:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 9a: 66 83 fe 01                   cmpw    $0x1, %si
    // 9e: 75 41                         jne     0xe1 <__JIT_ENTRY+0xe1>
    // a0: 8b 08                         movl    (%eax), %ecx
    // a2: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // a8: 7f 0e                         jg      0xb8 <__JIT_ENTRY+0xb8>
    // aa: 49                            decl    %ecx
    // ab: 89 08                         movl    %ecx, (%eax)
    // ad: 75 09                         jne     0xb8 <__JIT_ENTRY+0xb8>
    // af: 50                            pushl   %eax
    // b0: e8 00 00 00 00                calll   0xb5 <__JIT_ENTRY+0xb5>
    // 000000b1:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // b5: 83 c4 04                      addl    $0x4, %esp
    // b8: 8b 04 24                      movl    (%esp), %eax
    // bb: 8d 04 87                      leal    (%edi,%eax,4), %eax
    // be: 83 c0 fc                      addl    $-0x4, %eax
    // c1: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // c5: 89 4c 24 28                   movl    %ecx, 0x28(%esp)
    // c9: 8b 4c 24 08                   movl    0x8(%esp), %ecx
    // cd: 89 4c 24 20                   movl    %ecx, 0x20(%esp)
    // d1: 89 44 24 24                   movl    %eax, 0x24(%esp)
    // d5: 83 c4 0c                      addl    $0xc, %esp
    // d8: 5e                            popl    %esi
    // d9: 5f                            popl    %edi
    // da: 5b                            popl    %ebx
    // db: 5d                            popl    %ebp
    // dc: e9 00 00 00 00                jmp     0xe1 <__JIT_ENTRY+0xe1>
    // 000000dd:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // e1: 45                            incl    %ebp
    // e2: eb 1a                         jmp     0xfe <__JIT_ENTRY+0xfe>
    // e4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%eax,%eax)
    // f0: 89 72 04                      movl    %esi, 0x4(%edx)
    // f3: 83 c5 fe                      addl    $-0x2, %ebp
    // f6: 83 c2 08                      addl    $0x8, %edx
    // f9: 83 fd 01                      cmpl    $0x1, %ebp
    // fc: 76 a2                         jbe     0xa0 <__JIT_ENTRY+0xa0>
    // fe: 8b 74 a9 f8                   movl    -0x8(%ecx,%ebp,4), %esi
    // 102: 8b 1e                         movl    (%esi), %ebx
    // 104: 81 fb ff ff ff 3f             cmpl    $0x3fffffff, %ebx       # imm = 0x3FFFFFFF
    // 10a: 7f 03                         jg      0x10f <__JIT_ENTRY+0x10f>
    // 10c: 43                            incl    %ebx
    // 10d: 89 1e                         movl    %ebx, (%esi)
    // 10f: 89 32                         movl    %esi, (%edx)
    // 111: 8b 74 a9 f4                   movl    -0xc(%ecx,%ebp,4), %esi
    // 115: 8b 1e                         movl    (%esi), %ebx
    // 117: 81 fb ff ff ff 3f             cmpl    $0x3fffffff, %ebx       # imm = 0x3FFFFFFF
    // 11d: 7f d1                         jg      0xf0 <__JIT_ENTRY+0xf0>
    // 11f: 43                            incl    %ebx
    // 120: 89 1e                         movl    %ebx, (%esi)
    // 122: eb cc                         jmp     0xf0 <__JIT_ENTRY+0xf0>
    const unsigned char code_body[292] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x0c, 0x8b,
        0x74, 0x24, 0x28, 0x8b, 0x7c, 0x24, 0x24, 0x8b,
        0x54, 0x24, 0x20, 0x8b, 0x47, 0xfc, 0x81, 0x78,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x75, 0x42, 0xb9,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39,
        0x48, 0x08, 0x75, 0x35, 0x89, 0x0c, 0x24, 0x89,
        0x74, 0x24, 0x04, 0x89, 0x54, 0x24, 0x08, 0xb9,
        0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc9, 0x74,
        0x5f, 0x8d, 0x57, 0xfc, 0x8b, 0x48, 0x0c, 0x8b,
        0x1c, 0x24, 0xf6, 0xc3, 0x01, 0x75, 0x2a, 0x89,
        0xdd, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83,
        0xfe, 0x01, 0x74, 0x44, 0xe9, 0x80, 0x00, 0x00,
        0x00, 0x89, 0x74, 0x24, 0x28, 0x89, 0x7c, 0x24,
        0x24, 0x89, 0x54, 0x24, 0x20, 0x83, 0xc4, 0x0c,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x6c, 0x99, 0xfc, 0x8b, 0x75, 0x00,
        0x81, 0xfe, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x04,
        0x46, 0x89, 0x75, 0x00, 0x89, 0xee, 0x8d, 0x6b,
        0xff, 0x89, 0x32, 0x89, 0xfa, 0xbe, 0x00, 0x00,
        0x00, 0x00, 0x66, 0x83, 0xfe, 0x01, 0x75, 0x41,
        0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f,
        0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75, 0x09, 0x50,
        0xe8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc4, 0x04,
        0x8b, 0x04, 0x24, 0x8d, 0x04, 0x87, 0x83, 0xc0,
        0xfc, 0x8b, 0x4c, 0x24, 0x04, 0x89, 0x4c, 0x24,
        0x28, 0x8b, 0x4c, 0x24, 0x08, 0x89, 0x4c, 0x24,
        0x20, 0x89, 0x44, 0x24, 0x24, 0x83, 0xc4, 0x0c,
        0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x45, 0xeb, 0x1a, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x72, 0x04, 0x83, 0xc5, 0xfe, 0x83, 0xc2,
        0x08, 0x83, 0xfd, 0x01, 0x76, 0xa2, 0x8b, 0x74,
        0xa9, 0xf8, 0x8b, 0x1e, 0x81, 0xfb, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x03, 0x43, 0x89, 0x1e, 0x89,
        0x32, 0x8b, 0x74, 0xa9, 0xf4, 0x8b, 0x1e, 0x81,
        0xfb, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0xd1, 0x43,
        0x89, 0x1e, 0xeb, 0xcc,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x19, (uintptr_t)&PyList_Type);
    patch_32(code + 0x20, instruction->oparg);
    patch_32(code + 0x38, instruction->oparg);
    patch_32(code + 0x52, instruction->oparg);
    patch_x86_64_32rx(code + 0x75, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32(code + 0x96, instruction->oparg);
    patch_x86_64_32rx(code + 0xb1, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xdd, (uintptr_t)code + sizeof(code_body) + -0x4);
}

void
emit__UNPACK_SEQUENCE_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNPACK_SEQUENCE_TUPLE.o:   file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 08                      subl    $0x8, %esp
    // 7: 8b 5c 24 24                   movl    0x24(%esp), %ebx
    // b: 8b 7c 24 20                   movl    0x20(%esp), %edi
    // f: 8b 54 24 1c                   movl    0x1c(%esp), %edx
    // 13: 8b 47 fc                      movl    -0x4(%edi), %eax
    // 16: 81 78 04 00 00 00 00          cmpl    $0x0, 0x4(%eax)
    // 00000019:  IMAGE_REL_I386_DIR32 _PyTuple_Type
    // 1d: 0f 85 8c 00 00 00             jne     0xaf <__JIT_ENTRY+0xaf>
    // 23: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000024:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 28: 0f b7 c9                      movzwl  %cx, %ecx
    // 2b: 89 0c 24                      movl    %ecx, (%esp)
    // 2e: 39 48 08                      cmpl    %ecx, 0x8(%eax)
    // 31: 75 7c                         jne     0xaf <__JIT_ENTRY+0xaf>
    // 33: 89 54 24 04                   movl    %edx, 0x4(%esp)
    // 37: b9 00 00 00 00                movl    $0x0, %ecx
    // 00000038:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 3c: 66 85 c9                      testw   %cx, %cx
    // 3f: 74 31                         je      0x72 <__JIT_ENTRY+0x72>
    // 41: 8d 4f fc                      leal    -0x4(%edi), %ecx
    // 44: 8b 14 24                      movl    (%esp), %edx
    // 47: f6 c2 01                      testb   $0x1, %dl
    // 4a: 74 1b                         je      0x67 <__JIT_ENTRY+0x67>
    // 4c: 8b 6c 90 08                   movl    0x8(%eax,%edx,4), %ebp
    // 50: 8b 55 00                      movl    (%ebp), %edx
    // 53: 81 fa ff ff ff 3f             cmpl    $0x3fffffff, %edx       # imm = 0x3FFFFFFF
    // 59: 7f 04                         jg      0x5f <__JIT_ENTRY+0x5f>
    // 5b: 42                            incl    %edx
    // 5c: 89 55 00                      movl    %edx, (%ebp)
    // 5f: 8b 14 24                      movl    (%esp), %edx
    // 62: 4a                            decl    %edx
    // 63: 89 29                         movl    %ebp, (%ecx)
    // 65: 89 f9                         movl    %edi, %ecx
    // 67: be 00 00 00 00                movl    $0x0, %esi
    // 00000068:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 6c: 66 83 fe 01                   cmpw    $0x1, %si
    // 70: 75 55                         jne     0xc7 <__JIT_ENTRY+0xc7>
    // 72: 8b 08                         movl    (%eax), %ecx
    // 74: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 7a: 7f 0e                         jg      0x8a <__JIT_ENTRY+0x8a>
    // 7c: 49                            decl    %ecx
    // 7d: 89 08                         movl    %ecx, (%eax)
    // 7f: 75 09                         jne     0x8a <__JIT_ENTRY+0x8a>
    // 81: 50                            pushl   %eax
    // 82: e8 00 00 00 00                calll   0x87 <__JIT_ENTRY+0x87>
    // 00000083:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 87: 83 c4 04                      addl    $0x4, %esp
    // 8a: 8b 04 24                      movl    (%esp), %eax
    // 8d: 8d 04 87                      leal    (%edi,%eax,4), %eax
    // 90: 83 c0 fc                      addl    $-0x4, %eax
    // 93: 89 5c 24 24                   movl    %ebx, 0x24(%esp)
    // 97: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 9b: 89 4c 24 1c                   movl    %ecx, 0x1c(%esp)
    // 9f: 89 44 24 20                   movl    %eax, 0x20(%esp)
    // a3: 83 c4 08                      addl    $0x8, %esp
    // a6: 5e                            popl    %esi
    // a7: 5f                            popl    %edi
    // a8: 5b                            popl    %ebx
    // a9: 5d                            popl    %ebp
    // aa: e9 00 00 00 00                jmp     0xaf <__JIT_ENTRY+0xaf>
    // 000000ab:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // af: 89 5c 24 24                   movl    %ebx, 0x24(%esp)
    // b3: 89 7c 24 20                   movl    %edi, 0x20(%esp)
    // b7: 89 54 24 1c                   movl    %edx, 0x1c(%esp)
    // bb: 83 c4 08                      addl    $0x8, %esp
    // be: 5e                            popl    %esi
    // bf: 5f                            popl    %edi
    // c0: 5b                            popl    %ebx
    // c1: 5d                            popl    %ebp
    // c2: e9 00 00 00 00                jmp     0xc7 <__JIT_ENTRY+0xc7>
    // 000000c3:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // c7: 42                            incl    %edx
    // c8: eb 14                         jmp     0xde <__JIT_ENTRY+0xde>
    // ca: 66 0f 1f 44 00 00             nopw    (%eax,%eax)
    // d0: 89 69 04                      movl    %ebp, 0x4(%ecx)
    // d3: 83 c2 fe                      addl    $-0x2, %edx
    // d6: 83 c1 08                      addl    $0x8, %ecx
    // d9: 83 fa 01                      cmpl    $0x1, %edx
    // dc: 76 94                         jbe     0x72 <__JIT_ENTRY+0x72>
    // de: 8b 6c 90 04                   movl    0x4(%eax,%edx,4), %ebp
    // e2: 8b 75 00                      movl    (%ebp), %esi
    // e5: 81 fe ff ff ff 3f             cmpl    $0x3fffffff, %esi       # imm = 0x3FFFFFFF
    // eb: 7f 04                         jg      0xf1 <__JIT_ENTRY+0xf1>
    // ed: 46                            incl    %esi
    // ee: 89 75 00                      movl    %esi, (%ebp)
    // f1: 89 29                         movl    %ebp, (%ecx)
    // f3: 8b 2c 90                      movl    (%eax,%edx,4), %ebp
    // f6: 8b 75 00                      movl    (%ebp), %esi
    // f9: 81 fe ff ff ff 3f             cmpl    $0x3fffffff, %esi       # imm = 0x3FFFFFFF
    // ff: 7f cf                         jg      0xd0 <__JIT_ENTRY+0xd0>
    // 101: 46                            incl    %esi
    // 102: 89 75 00                      movl    %esi, (%ebp)
    // 105: eb c9                         jmp     0xd0 <__JIT_ENTRY+0xd0>
    const unsigned char code_body[263] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x08, 0x8b,
        0x5c, 0x24, 0x24, 0x8b, 0x7c, 0x24, 0x20, 0x8b,
        0x54, 0x24, 0x1c, 0x8b, 0x47, 0xfc, 0x81, 0x78,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x8c,
        0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xc9, 0x89, 0x0c, 0x24, 0x39, 0x48,
        0x08, 0x75, 0x7c, 0x89, 0x54, 0x24, 0x04, 0xb9,
        0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc9, 0x74,
        0x31, 0x8d, 0x4f, 0xfc, 0x8b, 0x14, 0x24, 0xf6,
        0xc2, 0x01, 0x74, 0x1b, 0x8b, 0x6c, 0x90, 0x08,
        0x8b, 0x55, 0x00, 0x81, 0xfa, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0x04, 0x42, 0x89, 0x55, 0x00, 0x8b,
        0x14, 0x24, 0x4a, 0x89, 0x29, 0x89, 0xf9, 0xbe,
        0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xfe, 0x01,
        0x75, 0x55, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x0e, 0x49, 0x89, 0x08, 0x75,
        0x09, 0x50, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc4, 0x04, 0x8b, 0x04, 0x24, 0x8d, 0x04, 0x87,
        0x83, 0xc0, 0xfc, 0x89, 0x5c, 0x24, 0x24, 0x8b,
        0x4c, 0x24, 0x04, 0x89, 0x4c, 0x24, 0x1c, 0x89,
        0x44, 0x24, 0x20, 0x83, 0xc4, 0x08, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x89,
        0x5c, 0x24, 0x24, 0x89, 0x7c, 0x24, 0x20, 0x89,
        0x54, 0x24, 0x1c, 0x83, 0xc4, 0x08, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x42,
        0xeb, 0x14, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00,
        0x89, 0x69, 0x04, 0x83, 0xc2, 0xfe, 0x83, 0xc1,
        0x08, 0x83, 0xfa, 0x01, 0x76, 0x94, 0x8b, 0x6c,
        0x90, 0x04, 0x8b, 0x75, 0x00, 0x81, 0xfe, 0xff,
        0xff, 0xff, 0x3f, 0x7f, 0x04, 0x46, 0x89, 0x75,
        0x00, 0x89, 0x29, 0x8b, 0x2c, 0x90, 0x8b, 0x75,
        0x00, 0x81, 0xfe, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0xcf, 0x46, 0x89, 0x75, 0x00, 0xeb, 0xc9,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x19, (uintptr_t)&PyTuple_Type);
    patch_32(code + 0x24, instruction->oparg);
    patch_32(code + 0x38, instruction->oparg);
    patch_32(code + 0x68, instruction->oparg);
    patch_x86_64_32rx(code + 0x83, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_x86_64_32rx(code + 0xab, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xc3, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__UNPACK_SEQUENCE_TWO_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNPACK_SEQUENCE_TWO_TUPLE.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 50                            pushl   %eax
    // 5: 8b 5c 24 20                   movl    0x20(%esp), %ebx
    // 9: 8b 7c 24 1c                   movl    0x1c(%esp), %edi
    // d: 8b 74 24 18                   movl    0x18(%esp), %esi
    // 11: 8b 47 fc                      movl    -0x4(%edi), %eax
    // 14: 81 78 04 00 00 00 00          cmpl    $0x0, 0x4(%eax)
    // 00000017:  IMAGE_REL_I386_DIR32 _PyTuple_Type
    // 1b: 75 2d                         jne     0x4a <__JIT_ENTRY+0x4a>
    // 1d: 83 78 08 02                   cmpl    $0x2, 0x8(%eax)
    // 21: 75 27                         jne     0x4a <__JIT_ENTRY+0x4a>
    // 23: 8b 50 0c                      movl    0xc(%eax), %edx
    // 26: 8b 0a                         movl    (%edx), %ecx
    // 28: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 2e: 7e 32                         jle     0x62 <__JIT_ENTRY+0x62>
    // 30: 8b 68 10                      movl    0x10(%eax), %ebp
    // 33: 8b 4d 00                      movl    (%ebp), %ecx
    // 36: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 3c: 7e 35                         jle     0x73 <__JIT_ENTRY+0x73>
    // 3e: 8b 08                         movl    (%eax), %ecx
    // 40: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 46: 7e 39                         jle     0x81 <__JIT_ENTRY+0x81>
    // 48: eb 4d                         jmp     0x97 <__JIT_ENTRY+0x97>
    // 4a: 89 5c 24 20                   movl    %ebx, 0x20(%esp)
    // 4e: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // 52: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 56: 83 c4 04                      addl    $0x4, %esp
    // 59: 5e                            popl    %esi
    // 5a: 5f                            popl    %edi
    // 5b: 5b                            popl    %ebx
    // 5c: 5d                            popl    %ebp
    // 5d: e9 00 00 00 00                jmp     0x62 <__JIT_ENTRY+0x62>
    // 0000005e:  IMAGE_REL_I386_REL32 __JIT_JUMP_TARGET
    // 62: 41                            incl    %ecx
    // 63: 89 0a                         movl    %ecx, (%edx)
    // 65: 8b 68 10                      movl    0x10(%eax), %ebp
    // 68: 8b 4d 00                      movl    (%ebp), %ecx
    // 6b: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 71: 7f cb                         jg      0x3e <__JIT_ENTRY+0x3e>
    // 73: 41                            incl    %ecx
    // 74: 89 4d 00                      movl    %ecx, (%ebp)
    // 77: 8b 08                         movl    (%eax), %ecx
    // 79: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 7f: 7f 16                         jg      0x97 <__JIT_ENTRY+0x97>
    // 81: 49                            decl    %ecx
    // 82: 89 08                         movl    %ecx, (%eax)
    // 84: 75 11                         jne     0x97 <__JIT_ENTRY+0x97>
    // 86: 50                            pushl   %eax
    // 87: 89 54 24 04                   movl    %edx, 0x4(%esp)
    // 8b: e8 00 00 00 00                calll   0x90 <__JIT_ENTRY+0x90>
    // 0000008c:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 90: 8b 54 24 04                   movl    0x4(%esp), %edx
    // 94: 83 c4 04                      addl    $0x4, %esp
    // 97: 89 6f fc                      movl    %ebp, -0x4(%edi)
    // 9a: 89 17                         movl    %edx, (%edi)
    // 9c: 83 c7 04                      addl    $0x4, %edi
    // 9f: 89 5c 24 20                   movl    %ebx, 0x20(%esp)
    // a3: 89 7c 24 1c                   movl    %edi, 0x1c(%esp)
    // a7: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // ab: 83 c4 04                      addl    $0x4, %esp
    // ae: 5e                            popl    %esi
    // af: 5f                            popl    %edi
    // b0: 5b                            popl    %ebx
    // b1: 5d                            popl    %ebp
    // b2: e9 00 00 00 00                jmp     0xb7 <__JIT_ENTRY+0xb7>
    // 000000b3:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[178] = {
        0x55, 0x53, 0x57, 0x56, 0x50, 0x8b, 0x5c, 0x24,
        0x20, 0x8b, 0x7c, 0x24, 0x1c, 0x8b, 0x74, 0x24,
        0x18, 0x8b, 0x47, 0xfc, 0x81, 0x78, 0x04, 0x00,
        0x00, 0x00, 0x00, 0x75, 0x2d, 0x83, 0x78, 0x08,
        0x02, 0x75, 0x27, 0x8b, 0x50, 0x0c, 0x8b, 0x0a,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7e, 0x32,
        0x8b, 0x68, 0x10, 0x8b, 0x4d, 0x00, 0x81, 0xf9,
        0xff, 0xff, 0xff, 0x3f, 0x7e, 0x35, 0x8b, 0x08,
        0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7e, 0x39,
        0xeb, 0x4d, 0x89, 0x5c, 0x24, 0x20, 0x89, 0x7c,
        0x24, 0x1c, 0x89, 0x74, 0x24, 0x18, 0x83, 0xc4,
        0x04, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x41, 0x89, 0x0a, 0x8b, 0x68, 0x10,
        0x8b, 0x4d, 0x00, 0x81, 0xf9, 0xff, 0xff, 0xff,
        0x3f, 0x7f, 0xcb, 0x41, 0x89, 0x4d, 0x00, 0x8b,
        0x08, 0x81, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0x7f,
        0x16, 0x49, 0x89, 0x08, 0x75, 0x11, 0x50, 0x89,
        0x54, 0x24, 0x04, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x54, 0x24, 0x04, 0x83, 0xc4, 0x04, 0x89,
        0x6f, 0xfc, 0x89, 0x17, 0x83, 0xc7, 0x04, 0x89,
        0x5c, 0x24, 0x20, 0x89, 0x7c, 0x24, 0x1c, 0x89,
        0x74, 0x24, 0x18, 0x83, 0xc4, 0x04, 0x5e, 0x5f,
        0x5b, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x17, (uintptr_t)&PyTuple_Type);
    patch_x86_64_32rx(code + 0x5e, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x8c, (uintptr_t)&_Py_Dealloc + -0x4);
}

void
emit__WITH_EXCEPT_START(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _WITH_EXCEPT_START.o:       file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 55                            pushl   %ebp
    // 1: 53                            pushl   %ebx
    // 2: 57                            pushl   %edi
    // 3: 56                            pushl   %esi
    // 4: 83 ec 20                      subl    $0x20, %esp
    // 7: 8b 44 24 3c                   movl    0x3c(%esp), %eax
    // b: 89 04 24                      movl    %eax, (%esp)
    // e: 8b 5c 24 38                   movl    0x38(%esp), %ebx
    // 12: 8b 7c 24 34                   movl    0x34(%esp), %edi
    // 16: 8b 73 fc                      movl    -0x4(%ebx), %esi
    // 19: 8b 43 ec                      movl    -0x14(%ebx), %eax
    // 1c: 89 44 24 08                   movl    %eax, 0x8(%esp)
    // 20: 8b 6b f0                      movl    -0x10(%ebx), %ebp
    // 23: 8b 46 04                      movl    0x4(%esi), %eax
    // 26: 89 44 24 04                   movl    %eax, 0x4(%esp)
    // 2a: 56                            pushl   %esi
    // 2b: e8 00 00 00 00                calll   0x30 <__JIT_ENTRY+0x30>
    // 0000002c:  IMAGE_REL_I386_REL32 _PyException_GetTraceback
    // 30: 83 c4 04                      addl    $0x4, %esp
    // 33: 85 c0                         testl   %eax, %eax
    // 35: 74 24                         je      0x5b <__JIT_ENTRY+0x5b>
    // 37: 89 5f 20                      movl    %ebx, 0x20(%edi)
    // 3a: 8b 08                         movl    (%eax), %ecx
    // 3c: 81 f9 ff ff ff 3f             cmpl    $0x3fffffff, %ecx       # imm = 0x3FFFFFFF
    // 42: 7f 12                         jg      0x56 <__JIT_ENTRY+0x56>
    // 44: 49                            decl    %ecx
    // 45: 89 08                         movl    %ecx, (%eax)
    // 47: 75 0d                         jne     0x56 <__JIT_ENTRY+0x56>
    // 49: 50                            pushl   %eax
    // 4a: 89 c3                         movl    %eax, %ebx
    // 4c: e8 00 00 00 00                calll   0x51 <__JIT_ENTRY+0x51>
    // 0000004d:  IMAGE_REL_I386_REL32 __Py_Dealloc
    // 51: 89 d8                         movl    %ebx, %eax
    // 53: 83 c4 04                      addl    $0x4, %esp
    // 56: 8b 5f 20                      movl    0x20(%edi), %ebx
    // 59: eb 05                         jmp     0x60 <__JIT_ENTRY+0x60>
    // 5b: b8 00 00 00 00                movl    $0x0, %eax
    // 0000005c:  IMAGE_REL_I386_DIR32 __Py_NoneStruct
    // 60: c7 44 24 0c 00 00 00 00       movl    $0x0, 0xc(%esp)
    // 68: 89 6c 24 10                   movl    %ebp, 0x10(%esp)
    // 6c: 8b 4c 24 04                   movl    0x4(%esp), %ecx
    // 70: 89 4c 24 14                   movl    %ecx, 0x14(%esp)
    // 74: 89 74 24 18                   movl    %esi, 0x18(%esp)
    // 78: 89 44 24 1c                   movl    %eax, 0x1c(%esp)
    // 7c: 31 c0                         xorl    %eax, %eax
    // 7e: 85 ed                         testl   %ebp, %ebp
    // 80: 0f 95 c0                      setne   %al
    // 83: 89 5f 20                      movl    %ebx, 0x20(%edi)
    // 86: 8d 88 03 00 00 80             leal    -0x7ffffffd(%eax), %ecx
    // 8c: c1 e0 02                      shll    $0x2, %eax
    // 8f: f7 d8                         negl    %eax
    // 91: 01 e0                         addl    %esp, %eax
    // 93: 83 c0 14                      addl    $0x14, %eax
    // 96: 6a 00                         pushl   $0x0
    // 98: 51                            pushl   %ecx
    // 99: 50                            pushl   %eax
    // 9a: ff 74 24 14                   pushl   0x14(%esp)
    // 9e: e8 00 00 00 00                calll   0xa3 <__JIT_ENTRY+0xa3>
    // 0000009f:  IMAGE_REL_I386_REL32 _PyObject_Vectorcall
    // a3: 83 c4 10                      addl    $0x10, %esp
    // a6: 8b 4f 20                      movl    0x20(%edi), %ecx
    // a9: c7 47 20 00 00 00 00          movl    $0x0, 0x20(%edi)
    // b0: 85 c0                         testl   %eax, %eax
    // b2: 74 20                         je      0xd4 <__JIT_ENTRY+0xd4>
    // b4: 89 01                         movl    %eax, (%ecx)
    // b6: 83 c1 04                      addl    $0x4, %ecx
    // b9: 89 7c 24 34                   movl    %edi, 0x34(%esp)
    // bd: 89 4c 24 38                   movl    %ecx, 0x38(%esp)
    // c1: 8b 04 24                      movl    (%esp), %eax
    // c4: 89 44 24 3c                   movl    %eax, 0x3c(%esp)
    // c8: 83 c4 20                      addl    $0x20, %esp
    // cb: 5e                            popl    %esi
    // cc: 5f                            popl    %edi
    // cd: 5b                            popl    %ebx
    // ce: 5d                            popl    %ebp
    // cf: e9 00 00 00 00                jmp     0xd4 <__JIT_ENTRY+0xd4>
    // 000000d0:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    // d4: 8b 04 24                      movl    (%esp), %eax
    // d7: 89 44 24 3c                   movl    %eax, 0x3c(%esp)
    // db: 89 4c 24 38                   movl    %ecx, 0x38(%esp)
    // df: 89 7c 24 34                   movl    %edi, 0x34(%esp)
    // e3: 83 c4 20                      addl    $0x20, %esp
    // e6: 5e                            popl    %esi
    // e7: 5f                            popl    %edi
    // e8: 5b                            popl    %ebx
    // e9: 5d                            popl    %ebp
    // ea: e9 00 00 00 00                jmp     0xef <__JIT_ENTRY+0xef>
    // 000000eb:  IMAGE_REL_I386_REL32 __JIT_ERROR_TARGET
    const unsigned char code_body[239] = {
        0x55, 0x53, 0x57, 0x56, 0x83, 0xec, 0x20, 0x8b,
        0x44, 0x24, 0x3c, 0x89, 0x04, 0x24, 0x8b, 0x5c,
        0x24, 0x38, 0x8b, 0x7c, 0x24, 0x34, 0x8b, 0x73,
        0xfc, 0x8b, 0x43, 0xec, 0x89, 0x44, 0x24, 0x08,
        0x8b, 0x6b, 0xf0, 0x8b, 0x46, 0x04, 0x89, 0x44,
        0x24, 0x04, 0x56, 0xe8, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xc4, 0x04, 0x85, 0xc0, 0x74, 0x24, 0x89,
        0x5f, 0x20, 0x8b, 0x08, 0x81, 0xf9, 0xff, 0xff,
        0xff, 0x3f, 0x7f, 0x12, 0x49, 0x89, 0x08, 0x75,
        0x0d, 0x50, 0x89, 0xc3, 0xe8, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xd8, 0x83, 0xc4, 0x04, 0x8b, 0x5f,
        0x20, 0xeb, 0x05, 0xb8, 0x00, 0x00, 0x00, 0x00,
        0xc7, 0x44, 0x24, 0x0c, 0x00, 0x00, 0x00, 0x00,
        0x89, 0x6c, 0x24, 0x10, 0x8b, 0x4c, 0x24, 0x04,
        0x89, 0x4c, 0x24, 0x14, 0x89, 0x74, 0x24, 0x18,
        0x89, 0x44, 0x24, 0x1c, 0x31, 0xc0, 0x85, 0xed,
        0x0f, 0x95, 0xc0, 0x89, 0x5f, 0x20, 0x8d, 0x88,
        0x03, 0x00, 0x00, 0x80, 0xc1, 0xe0, 0x02, 0xf7,
        0xd8, 0x01, 0xe0, 0x83, 0xc0, 0x14, 0x6a, 0x00,
        0x51, 0x50, 0xff, 0x74, 0x24, 0x14, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc4, 0x10, 0x8b, 0x4f,
        0x20, 0xc7, 0x47, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x74, 0x20, 0x89, 0x01, 0x83, 0xc1,
        0x04, 0x89, 0x7c, 0x24, 0x34, 0x89, 0x4c, 0x24,
        0x38, 0x8b, 0x04, 0x24, 0x89, 0x44, 0x24, 0x3c,
        0x83, 0xc4, 0x20, 0x5e, 0x5f, 0x5b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x04, 0x24, 0x89,
        0x44, 0x24, 0x3c, 0x89, 0x4c, 0x24, 0x38, 0x89,
        0x7c, 0x24, 0x34, 0x83, 0xc4, 0x20, 0x5e, 0x5f,
        0x5b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)&PyException_GetTraceback + -0x4);
    patch_x86_64_32rx(code + 0x4d, (uintptr_t)&_Py_Dealloc + -0x4);
    patch_32(code + 0x5c, (uintptr_t)&_Py_NoneStruct);
    patch_x86_64_32rx(code + 0x9f, (uintptr_t)&PyObject_Vectorcall + -0x4);
    patch_x86_64_32rx(code + 0xd0, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xeb, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__YIELD_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _YIELD_VALUE.o:     file format coff-i386
    //
    // Disassembly of section .text:
    //
    // 00000000 <__JIT_ENTRY>:
    // 0: 53                            pushl   %ebx
    // 1: 56                            pushl   %esi
    // 2: 8b 44 24 14                   movl    0x14(%esp), %eax
    // 6: 8b 54 24 0c                   movl    0xc(%esp), %edx
    // a: 8b 74 24 10                   movl    0x10(%esp), %esi
    // e: 8b 4e fc                      movl    -0x4(%esi), %ecx
    // 11: 83 42 1c 02                   addl    $0x2, 0x1c(%edx)
    // 15: 83 c6 fc                      addl    $-0x4, %esi
    // 18: bb 00 00 00 00                movl    $0x0, %ebx
    // 00000019:  IMAGE_REL_I386_DIR32 __JIT_OPARG
    // 1d: 80 c3 fe                      addb    $-0x2, %bl
    // 20: 88 5a ff                      movb    %bl, -0x1(%edx)
    // 23: 89 72 20                      movl    %esi, 0x20(%edx)
    // 26: 8b 72 f4                      movl    -0xc(%edx), %esi
    // 29: 89 70 4c                      movl    %esi, 0x4c(%eax)
    // 2c: c7 42 f4 00 00 00 00          movl    $0x0, -0xc(%edx)
    // 33: ff 40 1c                      incl    0x1c(%eax)
    // 36: 8b 72 04                      movl    0x4(%edx), %esi
    // 39: 89 70 34                      movl    %esi, 0x34(%eax)
    // 3c: c7 42 04 00 00 00 00          movl    $0x0, 0x4(%edx)
    // 43: 8b 56 20                      movl    0x20(%esi), %edx
    // 46: c7 46 20 00 00 00 00          movl    $0x0, 0x20(%esi)
    // 4d: 89 0a                         movl    %ecx, (%edx)
    // 4f: 83 c2 04                      addl    $0x4, %edx
    // 52: 89 74 24 0c                   movl    %esi, 0xc(%esp)
    // 56: 89 54 24 10                   movl    %edx, 0x10(%esp)
    // 5a: 89 44 24 14                   movl    %eax, 0x14(%esp)
    // 5e: 5e                            popl    %esi
    // 5f: 5b                            popl    %ebx
    // 60: e9 00 00 00 00                jmp     0x65 <__JIT_ENTRY+0x65>
    // 00000061:  IMAGE_REL_I386_REL32 __JIT_CONTINUE
    const unsigned char code_body[96] = {
        0x53, 0x56, 0x8b, 0x44, 0x24, 0x14, 0x8b, 0x54,
        0x24, 0x0c, 0x8b, 0x74, 0x24, 0x10, 0x8b, 0x4e,
        0xfc, 0x83, 0x42, 0x1c, 0x02, 0x83, 0xc6, 0xfc,
        0xbb, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc3, 0xfe,
        0x88, 0x5a, 0xff, 0x89, 0x72, 0x20, 0x8b, 0x72,
        0xf4, 0x89, 0x70, 0x4c, 0xc7, 0x42, 0xf4, 0x00,
        0x00, 0x00, 0x00, 0xff, 0x40, 0x1c, 0x8b, 0x72,
        0x04, 0x89, 0x70, 0x34, 0xc7, 0x42, 0x04, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x56, 0x20, 0xc7, 0x46,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x89, 0x0a, 0x83,
        0xc2, 0x04, 0x89, 0x74, 0x24, 0x0c, 0x89, 0x54,
        0x24, 0x10, 0x89, 0x44, 0x24, 0x14, 0x5e, 0x5b,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32(code + 0x19, instruction->oparg);
}

static_assert(SYMBOL_MASK_WORDS >= 1, "SYMBOL_MASK_WORDS too small");

typedef struct {
    void (*emit)(
        unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
        const _PyUOpInstruction *instruction, jit_state *state);
    size_t code_size;
    size_t data_size;
    symbol_mask trampoline_mask;
} StencilGroup;

static const StencilGroup shim = {emit_shim, 0, 0, {0}};

static const StencilGroup stencil_groups[MAX_UOP_ID + 1] = {
    [_BINARY_OP] = {emit__BINARY_OP, 194, 0, {0}},
    [_BINARY_OP_ADD_FLOAT] = {emit__BINARY_OP_ADD_FLOAT, 114, 0, {0}},
    [_BINARY_OP_ADD_INT] = {emit__BINARY_OP_ADD_INT, 221, 0, {0}},
    [_BINARY_OP_ADD_UNICODE] = {emit__BINARY_OP_ADD_UNICODE, 221, 0, {0}},
    [_BINARY_OP_EXTEND] = {emit__BINARY_OP_EXTEND, 149, 0, {0}},
    [_BINARY_OP_INPLACE_ADD_UNICODE] = {emit__BINARY_OP_INPLACE_ADD_UNICODE, 268, 0, {0}},
    [_BINARY_OP_MULTIPLY_FLOAT] = {emit__BINARY_OP_MULTIPLY_FLOAT, 114, 0, {0}},
    [_BINARY_OP_MULTIPLY_INT] = {emit__BINARY_OP_MULTIPLY_INT, 221, 0, {0}},
    [_BINARY_OP_SUBSCR_CHECK_FUNC] = {emit__BINARY_OP_SUBSCR_CHECK_FUNC, 138, 0, {0}},
    [_BINARY_OP_SUBSCR_DICT] = {emit__BINARY_OP_SUBSCR_DICT, 262, 0, {0}},
    [_BINARY_OP_SUBSCR_INIT_CALL] = {emit__BINARY_OP_SUBSCR_INIT_CALL, 196, 0, {0}},
    [_BINARY_OP_SUBSCR_LIST_INT] = {emit__BINARY_OP_SUBSCR_LIST_INT, 254, 0, {0}},
    [_BINARY_OP_SUBSCR_STR_INT] = {emit__BINARY_OP_SUBSCR_STR_INT, 390, 0, {0}},
    [_BINARY_OP_SUBSCR_TUPLE_INT] = {emit__BINARY_OP_SUBSCR_TUPLE_INT, 252, 0, {0}},
    [_BINARY_OP_SUBTRACT_FLOAT] = {emit__BINARY_OP_SUBTRACT_FLOAT, 114, 0, {0}},
    [_BINARY_OP_SUBTRACT_INT] = {emit__BINARY_OP_SUBTRACT_INT, 221, 0, {0}},
    [_BINARY_SLICE] = {emit__BINARY_SLICE, 220, 0, {0}},
    [_BUILD_LIST] = {emit__BUILD_LIST, 119, 0, {0}},
    [_BUILD_MAP] = {emit__BUILD_MAP, 239, 0, {0}},
    [_BUILD_SET] = {emit__BUILD_SET, 438, 0, {0}},
    [_BUILD_SLICE] = {emit__BUILD_SLICE, 236, 0, {0}},
    [_BUILD_STRING] = {emit__BUILD_STRING, 220, 0, {0}},
    [_BUILD_TUPLE] = {emit__BUILD_TUPLE, 119, 0, {0}},
    [_CALL_BUILTIN_CLASS] = {emit__CALL_BUILTIN_CLASS, 377, 0, {0}},
    [_CALL_BUILTIN_FAST] = {emit__CALL_BUILTIN_FAST, 472, 0, {0}},
    [_CALL_BUILTIN_FAST_WITH_KEYWORDS] = {emit__CALL_BUILTIN_FAST_WITH_KEYWORDS, 457, 0, {0}},
    [_CALL_BUILTIN_O] = {emit__CALL_BUILTIN_O, 401, 0, {0}},
    [_CALL_INTRINSIC_1] = {emit__CALL_INTRINSIC_1, 138, 0, {0}},
    [_CALL_INTRINSIC_2] = {emit__CALL_INTRINSIC_2, 196, 0, {0}},
    [_CALL_ISINSTANCE] = {emit__CALL_ISINSTANCE, 413, 0, {0}},
    [_CALL_KW_NON_PY] = {emit__CALL_KW_NON_PY, 396, 0, {0}},
    [_CALL_LEN] = {emit__CALL_LEN, 330, 0, {0}},
    [_CALL_LIST_APPEND] = {emit__CALL_LIST_APPEND, 272, 0, {0}},
    [_CALL_METHOD_DESCRIPTOR_FAST] = {emit__CALL_METHOD_DESCRIPTOR_FAST, 462, 0, {0}},
    [_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = {emit__CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS, 446, 0, {0}},
    [_CALL_METHOD_DESCRIPTOR_NOARGS] = {emit__CALL_METHOD_DESCRIPTOR_NOARGS, 387, 0, {0}},
    [_CALL_METHOD_DESCRIPTOR_O] = {emit__CALL_METHOD_DESCRIPTOR_O, 507, 0, {0}},
    [_CALL_NON_PY_GENERAL] = {emit__CALL_NON_PY_GENERAL, 332, 0, {0}},
    [_CALL_STR_1] = {emit__CALL_STR_1, 156, 0, {0}},
    [_CALL_TUPLE_1] = {emit__CALL_TUPLE_1, 156, 0, {0}},
    [_CALL_TYPE_1] = {emit__CALL_TYPE_1, 129, 0, {0}},
    [_CHECK_AND_ALLOCATE_OBJECT] = {emit__CHECK_AND_ALLOCATE_OBJECT, 344, 0, {0}},
    [_CHECK_ATTR_CLASS] = {emit__CHECK_ATTR_CLASS, 76, 0, {0}},
    [_CHECK_ATTR_METHOD_LAZY_DICT] = {emit__CHECK_ATTR_METHOD_LAZY_DICT, 65, 0, {0}},
    [_CHECK_ATTR_MODULE_PUSH_KEYS] = {emit__CHECK_ATTR_MODULE_PUSH_KEYS, 89, 0, {0}},
    [_CHECK_ATTR_WITH_HINT] = {emit__CHECK_ATTR_WITH_HINT, 64, 0, {0}},
    [_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = {emit__CHECK_CALL_BOUND_METHOD_EXACT_ARGS, 84, 0, {0}},
    [_CHECK_EG_MATCH] = {emit__CHECK_EG_MATCH, 346, 0, {0}},
    [_CHECK_EXC_MATCH] = {emit__CHECK_EXC_MATCH, 203, 0, {0}},
    [_CHECK_FUNCTION] = {emit__CHECK_FUNCTION, 61, 0, {0}},
    [_CHECK_FUNCTION_EXACT_ARGS] = {emit__CHECK_FUNCTION_EXACT_ARGS, 92, 0, {0}},
    [_CHECK_FUNCTION_VERSION] = {emit__CHECK_FUNCTION_VERSION, 88, 0, {0}},
    [_CHECK_FUNCTION_VERSION_INLINE] = {emit__CHECK_FUNCTION_VERSION_INLINE, 58, 0, {0}},
    [_CHECK_FUNCTION_VERSION_KW] = {emit__CHECK_FUNCTION_VERSION_KW, 88, 0, {0}},
    [_CHECK_IS_NOT_PY_CALLABLE] = {emit__CHECK_IS_NOT_PY_CALLABLE, 89, 0, {0}},
    [_CHECK_IS_NOT_PY_CALLABLE_KW] = {emit__CHECK_IS_NOT_PY_CALLABLE_KW, 89, 0, {0}},
    [_CHECK_MANAGED_OBJECT_HAS_VALUES] = {emit__CHECK_MANAGED_OBJECT_HAS_VALUES, 68, 0, {0}},
    [_CHECK_METHOD_VERSION] = {emit__CHECK_METHOD_VERSION, 103, 0, {0}},
    [_CHECK_METHOD_VERSION_KW] = {emit__CHECK_METHOD_VERSION_KW, 108, 0, {0}},
    [_CHECK_PEP_523] = {emit__CHECK_PEP_523, 56, 0, {0}},
    [_CHECK_PERIODIC] = {emit__CHECK_PERIODIC, 80, 0, {0}},
    [_CHECK_PERIODIC_IF_NOT_YIELD_FROM] = {emit__CHECK_PERIODIC_IF_NOT_YIELD_FROM, 89, 0, {0}},
    [_CHECK_STACK_SPACE] = {emit__CHECK_STACK_SPACE, 103, 0, {0}},
    [_CHECK_STACK_SPACE_OPERAND] = {emit__CHECK_STACK_SPACE_OPERAND, 82, 0, {0}},
    [_CHECK_VALIDITY] = {emit__CHECK_VALIDITY, 50, 0, {0}},
    [_CHECK_VALIDITY_AND_SET_IP] = {emit__CHECK_VALIDITY_AND_SET_IP, 57, 0, {0}},
    [_COMPARE_OP] = {emit__COMPARE_OP, 324, 0, {0}},
    [_COMPARE_OP_FLOAT] = {emit__COMPARE_OP_FLOAT, 284, 0, {0}},
    [_COMPARE_OP_INT] = {emit__COMPARE_OP_INT, 309, 0, {0}},
    [_COMPARE_OP_STR] = {emit__COMPARE_OP_STR, 206, 0, {0}},
    [_CONTAINS_OP] = {emit__CONTAINS_OP, 207, 0, {0}},
    [_CONTAINS_OP_DICT] = {emit__CONTAINS_OP_DICT, 232, 0, {0}},
    [_CONTAINS_OP_SET] = {emit__CONTAINS_OP_SET, 252, 0, {0}},
    [_CONVERT_VALUE] = {emit__CONVERT_VALUE, 145, 0, {0}},
    [_COPY] = {emit__COPY, 62, 0, {0}},
    [_COPY_FREE_VARS] = {emit__COPY_FREE_VARS, 246, 0, {0}},
    [_CREATE_INIT_FRAME] = {emit__CREATE_INIT_FRAME, 309, 0, {0}},
    [_DELETE_ATTR] = {emit__DELETE_ATTR, 140, 0, {0}},
    [_DELETE_DEREF] = {emit__DELETE_DEREF, 140, 0, {0}},
    [_DELETE_FAST] = {emit__DELETE_FAST, 161, 80, {0}},
    [_DELETE_GLOBAL] = {emit__DELETE_GLOBAL, 153, 32, {0}},
    [_DELETE_NAME] = {emit__DELETE_NAME, 176, 56, {0}},
    [_DELETE_SUBSCR] = {emit__DELETE_SUBSCR, 173, 0, {0}},
    [_DEOPT] = {emit__DEOPT, 41, 0, {0}},
    [_DICT_MERGE] = {emit__DICT_MERGE, 202, 0, {0}},
    [_DICT_UPDATE] = {emit__DICT_UPDATE, 230, 40, {0}},
    [_END_FOR] = {emit__END_FOR, 71, 0, {0}},
    [_END_SEND] = {emit__END_SEND, 80, 0, {0}},
    [_ERROR_POP_N] = {emit__ERROR_POP_N, 49, 0, {0}},
    [_EXIT_INIT_CHECK] = {emit__EXIT_INIT_CHECK, 99, 48, {0}},
    [_EXIT_TRACE] = {emit__EXIT_TRACE, 440, 0, {0}},
    [_EXPAND_METHOD] = {emit__EXPAND_METHOD, 141, 0, {0}},
    [_EXPAND_METHOD_KW] = {emit__EXPAND_METHOD_KW, 144, 0, {0}},
    [_FATAL_ERROR] = {emit__FATAL_ERROR, 15, 40, {0}},
    [_FORMAT_SIMPLE] = {emit__FORMAT_SIMPLE, 153, 0, {0}},
    [_FORMAT_WITH_SPEC] = {emit__FORMAT_WITH_SPEC, 184, 0, {0}},
    [_FOR_ITER_GEN_FRAME] = {emit__FOR_ITER_GEN_FRAME, 121, 0, {0}},
    [_FOR_ITER_TIER_TWO] = {emit__FOR_ITER_TIER_TWO, 186, 0, {0}},
    [_GET_AITER] = {emit__GET_AITER, 314, 160, {0}},
    [_GET_ANEXT] = {emit__GET_ANEXT, 86, 0, {0}},
    [_GET_AWAITABLE] = {emit__GET_AWAITABLE, 136, 0, {0}},
    [_GET_ITER] = {emit__GET_ITER, 127, 0, {0}},
    [_GET_LEN] = {emit__GET_LEN, 102, 0, {0}},
    [_GET_YIELD_FROM_ITER] = {emit__GET_YIELD_FROM_ITER, 197, 72, {0}},
    [_GUARD_BINARY_OP_EXTEND] = {emit__GUARD_BINARY_OP_EXTEND, 86, 0, {0}},
    [_GUARD_BOTH_FLOAT] = {emit__GUARD_BOTH_FLOAT, 68, 0, {0}},
    [_GUARD_BOTH_INT] = {emit__GUARD_BOTH_INT, 68, 0, {0}},
    [_GUARD_BOTH_UNICODE] = {emit__GUARD_BOTH_UNICODE, 68, 0, {0}},
    [_GUARD_BUILTINS_VERSION_PUSH_KEYS] = {emit__GUARD_BUILTINS_VERSION_PUSH_KEYS, 85, 0, {0}},
    [_GUARD_DORV_NO_DICT] = {emit__GUARD_DORV_NO_DICT, 69, 0, {0}},
    [_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = {emit__GUARD_DORV_VALUES_INST_ATTR_FROM_DICT, 68, 0, {0}},
    [_GUARD_GLOBALS_VERSION] = {emit__GUARD_GLOBALS_VERSION, 80, 0, {0}},
    [_GUARD_GLOBALS_VERSION_PUSH_KEYS] = {emit__GUARD_GLOBALS_VERSION_PUSH_KEYS, 85, 0, {0}},
    [_GUARD_IS_FALSE_POP] = {emit__GUARD_IS_FALSE_POP, 56, 0, {0}},
    [_GUARD_IS_NONE_POP] = {emit__GUARD_IS_NONE_POP, 97, 0, {0}},
    [_GUARD_IS_NOT_NONE_POP] = {emit__GUARD_IS_NOT_NONE_POP, 123, 0, {0}},
    [_GUARD_IS_TRUE_POP] = {emit__GUARD_IS_TRUE_POP, 56, 0, {0}},
    [_GUARD_KEYS_VERSION] = {emit__GUARD_KEYS_VERSION, 70, 0, {0}},
    [_GUARD_NOS_FLOAT] = {emit__GUARD_NOS_FLOAT, 56, 0, {0}},
    [_GUARD_NOS_INT] = {emit__GUARD_NOS_INT, 56, 0, {0}},
    [_GUARD_NOT_EXHAUSTED_LIST] = {emit__GUARD_NOT_EXHAUSTED_LIST, 80, 0, {0}},
    [_GUARD_NOT_EXHAUSTED_RANGE] = {emit__GUARD_NOT_EXHAUSTED_RANGE, 58, 0, {0}},
    [_GUARD_NOT_EXHAUSTED_TUPLE] = {emit__GUARD_NOT_EXHAUSTED_TUPLE, 70, 0, {0}},
    [_GUARD_TOS_FLOAT] = {emit__GUARD_TOS_FLOAT, 56, 0, {0}},
    [_GUARD_TOS_INT] = {emit__GUARD_TOS_INT, 56, 0, {0}},
    [_GUARD_TYPE_VERSION] = {emit__GUARD_TYPE_VERSION, 67, 0, {0}},
    [_GUARD_TYPE_VERSION_AND_LOCK] = {emit__GUARD_TYPE_VERSION_AND_LOCK, 67, 0, {0}},
    [_IMPORT_FROM] = {emit__IMPORT_FROM, 108, 0, {0}},
    [_IMPORT_NAME] = {emit__IMPORT_NAME, 205, 0, {0}},
    [_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = {emit__INIT_CALL_BOUND_METHOD_EXACT_ARGS, 141, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS] = {emit__INIT_CALL_PY_EXACT_ARGS, 523, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_0] = {emit__INIT_CALL_PY_EXACT_ARGS_0, 210, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_1] = {emit__INIT_CALL_PY_EXACT_ARGS_1, 225, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_2] = {emit__INIT_CALL_PY_EXACT_ARGS_2, 232, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_3] = {emit__INIT_CALL_PY_EXACT_ARGS_3, 243, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_4] = {emit__INIT_CALL_PY_EXACT_ARGS_4, 250, 0, {0}},
    [_IS_NONE] = {emit__IS_NONE, 81, 0, {0}},
    [_IS_OP] = {emit__IS_OP, 160, 0, {0}},
    [_ITER_CHECK_LIST] = {emit__ITER_CHECK_LIST, 56, 0, {0}},
    [_ITER_CHECK_RANGE] = {emit__ITER_CHECK_RANGE, 56, 0, {0}},
    [_ITER_CHECK_TUPLE] = {emit__ITER_CHECK_TUPLE, 56, 0, {0}},
    [_ITER_NEXT_LIST] = {emit__ITER_NEXT_LIST, 71, 0, {0}},
    [_ITER_NEXT_RANGE] = {emit__ITER_NEXT_RANGE, 90, 0, {0}},
    [_ITER_NEXT_TUPLE] = {emit__ITER_NEXT_TUPLE, 69, 0, {0}},
    [_JUMP_TO_TOP] = {emit__JUMP_TO_TOP, 29, 0, {0}},
    [_LIST_APPEND] = {emit__LIST_APPEND, 118, 0, {0}},
    [_LIST_EXTEND] = {emit__LIST_EXTEND, 261, 48, {0}},
    [_LOAD_ATTR] = {emit__LOAD_ATTR, 281, 0, {0}},
    [_LOAD_ATTR_CLASS] = {emit__LOAD_ATTR_CLASS, 85, 0, {0}},
    [_LOAD_ATTR_INSTANCE_VALUE] = {emit__LOAD_ATTR_INSTANCE_VALUE, 126, 0, {0}},
    [_LOAD_ATTR_METHOD_LAZY_DICT] = {emit__LOAD_ATTR_METHOD_LAZY_DICT, 64, 0, {0}},
    [_LOAD_ATTR_METHOD_NO_DICT] = {emit__LOAD_ATTR_METHOD_NO_DICT, 64, 0, {0}},
    [_LOAD_ATTR_METHOD_WITH_VALUES] = {emit__LOAD_ATTR_METHOD_WITH_VALUES, 64, 0, {0}},
    [_LOAD_ATTR_MODULE] = {emit__LOAD_ATTR_MODULE, 138, 0, {0}},
    [_LOAD_ATTR_MODULE_FROM_KEYS] = {emit__LOAD_ATTR_MODULE_FROM_KEYS, 148, 0, {0}},
    [_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = {emit__LOAD_ATTR_NONDESCRIPTOR_NO_DICT, 101, 0, {0}},
    [_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = {emit__LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES, 101, 0, {0}},
    [_LOAD_ATTR_PROPERTY_FRAME] = {emit__LOAD_ATTR_PROPERTY_FRAME, 301, 0, {0}},
    [_LOAD_ATTR_SLOT] = {emit__LOAD_ATTR_SLOT, 118, 0, {0}},
    [_LOAD_ATTR_WITH_HINT] = {emit__LOAD_ATTR_WITH_HINT, 273, 0, {0}},
    [_LOAD_BUILD_CLASS] = {emit__LOAD_BUILD_CLASS, 150, 32, {0}},
    [_LOAD_COMMON_CONSTANT] = {emit__LOAD_COMMON_CONSTANT, 56, 0, {0}},
    [_LOAD_CONST_IMMORTAL] = {emit__LOAD_CONST_IMMORTAL, 50, 0, {0}},
    [_LOAD_CONST_INLINE] = {emit__LOAD_CONST_INLINE, 56, 0, {0}},
    [_LOAD_CONST_INLINE_BORROW] = {emit__LOAD_CONST_INLINE_BORROW, 33, 0, {0}},
    [_LOAD_CONST_MORTAL] = {emit__LOAD_CONST_MORTAL, 63, 0, {0}},
    [_LOAD_DEREF] = {emit__LOAD_DEREF, 114, 0, {0}},
    [_LOAD_FAST] = {emit__LOAD_FAST, 58, 0, {0}},
    [_LOAD_FAST_0] = {emit__LOAD_FAST_0, 49, 0, {0}},
    [_LOAD_FAST_1] = {emit__LOAD_FAST_1, 49, 0, {0}},
    [_LOAD_FAST_2] = {emit__LOAD_FAST_2, 49, 0, {0}},
    [_LOAD_FAST_3] = {emit__LOAD_FAST_3, 49, 0, {0}},
    [_LOAD_FAST_4] = {emit__LOAD_FAST_4, 49, 0, {0}},
    [_LOAD_FAST_5] = {emit__LOAD_FAST_5, 49, 0, {0}},
    [_LOAD_FAST_6] = {emit__LOAD_FAST_6, 49, 0, {0}},
    [_LOAD_FAST_7] = {emit__LOAD_FAST_7, 49, 0, {0}},
    [_LOAD_FAST_AND_CLEAR] = {emit__LOAD_FAST_AND_CLEAR, 53, 0, {0}},
    [_LOAD_FAST_CHECK] = {emit__LOAD_FAST_CHECK, 134, 80, {0}},
    [_LOAD_FROM_DICT_OR_DEREF] = {emit__LOAD_FROM_DICT_OR_DEREF, 239, 0, {0}},
    [_LOAD_GLOBAL] = {emit__LOAD_GLOBAL, 113, 0, {0}},
    [_LOAD_GLOBAL_BUILTINS] = {emit__LOAD_GLOBAL_BUILTINS, 108, 0, {0}},
    [_LOAD_GLOBAL_BUILTINS_FROM_KEYS] = {emit__LOAD_GLOBAL_BUILTINS_FROM_KEYS, 106, 0, {0}},
    [_LOAD_GLOBAL_MODULE] = {emit__LOAD_GLOBAL_MODULE, 108, 0, {0}},
    [_LOAD_GLOBAL_MODULE_FROM_KEYS] = {emit__LOAD_GLOBAL_MODULE_FROM_KEYS, 106, 0, {0}},
    [_LOAD_LOCALS] = {emit__LOAD_LOCALS, 110, 16, {0}},
    [_LOAD_NAME] = {emit__LOAD_NAME, 102, 0, {0}},
    [_LOAD_SMALL_INT] = {emit__LOAD_SMALL_INT, 48, 0, {0}},
    [_LOAD_SMALL_INT_0] = {emit__LOAD_SMALL_INT_0, 33, 0, {0}},
    [_LOAD_SMALL_INT_1] = {emit__LOAD_SMALL_INT_1, 33, 0, {0}},
    [_LOAD_SMALL_INT_2] = {emit__LOAD_SMALL_INT_2, 33, 0, {0}},
    [_LOAD_SMALL_INT_3] = {emit__LOAD_SMALL_INT_3, 33, 0, {0}},
    [_LOAD_SPECIAL] = {emit__LOAD_SPECIAL, 181, 0, {0}},
    [_LOAD_SUPER_ATTR_ATTR] = {emit__LOAD_SUPER_ATTR_ATTR, 284, 0, {0}},
    [_LOAD_SUPER_ATTR_METHOD] = {emit__LOAD_SUPER_ATTR_METHOD, 368, 0, {0}},
    [_MAKE_CALLARGS_A_TUPLE] = {emit__MAKE_CALLARGS_A_TUPLE, 187, 0, {0}},
    [_MAKE_CELL] = {emit__MAKE_CELL, 130, 0, {0}},
    [_MAKE_FUNCTION] = {emit__MAKE_FUNCTION, 168, 0, {0}},
    [_MAKE_WARM] = {emit__MAKE_WARM, 52, 0, {0}},
    [_MAP_ADD] = {emit__MAP_ADD, 108, 0, {0}},
    [_MATCH_CLASS] = {emit__MATCH_CLASS, 270, 0, {0}},
    [_MATCH_KEYS] = {emit__MATCH_KEYS, 91, 0, {0}},
    [_MATCH_MAPPING] = {emit__MATCH_MAPPING, 56, 0, {0}},
    [_MATCH_SEQUENCE] = {emit__MATCH_SEQUENCE, 56, 0, {0}},
    [_MAYBE_EXPAND_METHOD] = {emit__MAYBE_EXPAND_METHOD, 177, 0, {0}},
    [_MAYBE_EXPAND_METHOD_KW] = {emit__MAYBE_EXPAND_METHOD_KW, 208, 0, {0}},
    [_NOP] = {emit__NOP, 24, 0, {0}},
    [_POP_EXCEPT] = {emit__POP_EXCEPT, 95, 0, {0}},
    [_POP_TOP] = {emit__POP_TOP, 60, 0, {0}},
    [_POP_TOP_LOAD_CONST_INLINE_BORROW] = {emit__POP_TOP_LOAD_CONST_INLINE_BORROW, 80, 0, {0}},
    [_PUSH_EXC_INFO] = {emit__PUSH_EXC_INFO, 73, 0, {0}},
    [_PUSH_FRAME] = {emit__PUSH_FRAME, 51, 0, {0}},
    [_PUSH_NULL] = {emit__PUSH_NULL, 33, 0, {0}},
    [_PUSH_NULL_CONDITIONAL] = {emit__PUSH_NULL_CONDITIONAL, 49, 0, {0}},
    [_PY_FRAME_GENERAL] = {emit__PY_FRAME_GENERAL, 204, 0, {0}},
    [_PY_FRAME_KW] = {emit__PY_FRAME_KW, 252, 0, {0}},
    [_REPLACE_WITH_TRUE] = {emit__REPLACE_WITH_TRUE, 64, 0, {0}},
    [_RESUME_CHECK] = {emit__RESUME_CHECK, 62, 0, {0}},
    [_RETURN_GENERATOR] = {emit__RETURN_GENERATOR, 398, 0, {0}},
    [_RETURN_VALUE] = {emit__RETURN_VALUE, 73, 0, {0}},
    [_SAVE_RETURN_OFFSET] = {emit__SAVE_RETURN_OFFSET, 35, 0, {0}},
    [_SEND_GEN_FRAME] = {emit__SEND_GEN_FRAME, 135, 0, {0}},
    [_SETUP_ANNOTATIONS] = {emit__SETUP_ANNOTATIONS, 282, 48, {0}},
    [_SET_ADD] = {emit__SET_ADD, 140, 0, {0}},
    [_SET_FUNCTION_ATTRIBUTE] = {emit__SET_FUNCTION_ATTRIBUTE, 63, 0, {0}},
    [_SET_IP] = {emit__SET_IP, 31, 0, {0}},
    [_SET_UPDATE] = {emit__SET_UPDATE, 145, 0, {0}},
    [_START_EXECUTOR] = {emit__START_EXECUTOR, 85, 0, {0}},
    [_STORE_ATTR] = {emit__STORE_ATTR, 194, 0, {0}},
    [_STORE_ATTR_INSTANCE_VALUE] = {emit__STORE_ATTR_INSTANCE_VALUE, 220, 0, {0}},
    [_STORE_ATTR_SLOT] = {emit__STORE_ATTR_SLOT, 119, 0, {0}},
    [_STORE_ATTR_WITH_HINT] = {emit__STORE_ATTR_WITH_HINT, 378, 0, {0}},
    [_STORE_DEREF] = {emit__STORE_DEREF, 93, 0, {0}},
    [_STORE_FAST] = {emit__STORE_FAST, 93, 0, {0}},
    [_STORE_FAST_0] = {emit__STORE_FAST_0, 81, 0, {0}},
    [_STORE_FAST_1] = {emit__STORE_FAST_1, 81, 0, {0}},
    [_STORE_FAST_2] = {emit__STORE_FAST_2, 81, 0, {0}},
    [_STORE_FAST_3] = {emit__STORE_FAST_3, 81, 0, {0}},
    [_STORE_FAST_4] = {emit__STORE_FAST_4, 81, 0, {0}},
    [_STORE_FAST_5] = {emit__STORE_FAST_5, 81, 0, {0}},
    [_STORE_FAST_6] = {emit__STORE_FAST_6, 81, 0, {0}},
    [_STORE_FAST_7] = {emit__STORE_FAST_7, 81, 0, {0}},
    [_STORE_GLOBAL] = {emit__STORE_GLOBAL, 142, 0, {0}},
    [_STORE_NAME] = {emit__STORE_NAME, 239, 32, {0}},
    [_STORE_SLICE] = {emit__STORE_SLICE, 282, 0, {0}},
    [_STORE_SUBSCR] = {emit__STORE_SUBSCR, 222, 0, {0}},
    [_STORE_SUBSCR_DICT] = {emit__STORE_SUBSCR_DICT, 162, 0, {0}},
    [_STORE_SUBSCR_LIST_INT] = {emit__STORE_SUBSCR_LIST_INT, 270, 0, {0}},
    [_SWAP] = {emit__SWAP, 58, 0, {0}},
    [_TIER2_RESUME_CHECK] = {emit__TIER2_RESUME_CHECK, 51, 0, {0}},
    [_TO_BOOL] = {emit__TO_BOOL, 140, 0, {0}},
    [_TO_BOOL_BOOL] = {emit__TO_BOOL_BOOL, 56, 0, {0}},
    [_TO_BOOL_INT] = {emit__TO_BOOL_INT, 113, 0, {0}},
    [_TO_BOOL_LIST] = {emit__TO_BOOL_LIST, 110, 0, {0}},
    [_TO_BOOL_NONE] = {emit__TO_BOOL_NONE, 57, 0, {0}},
    [_TO_BOOL_STR] = {emit__TO_BOOL_STR, 111, 0, {0}},
    [_UNARY_INVERT] = {emit__UNARY_INVERT, 127, 0, {0}},
    [_UNARY_NEGATIVE] = {emit__UNARY_NEGATIVE, 127, 0, {0}},
    [_UNARY_NOT] = {emit__UNARY_NOT, 51, 0, {0}},
    [_UNPACK_EX] = {emit__UNPACK_EX, 192, 0, {0}},
    [_UNPACK_SEQUENCE] = {emit__UNPACK_SEQUENCE, 164, 0, {0}},
    [_UNPACK_SEQUENCE_LIST] = {emit__UNPACK_SEQUENCE_LIST, 292, 0, {0}},
    [_UNPACK_SEQUENCE_TUPLE] = {emit__UNPACK_SEQUENCE_TUPLE, 263, 0, {0}},
    [_UNPACK_SEQUENCE_TWO_TUPLE] = {emit__UNPACK_SEQUENCE_TWO_TUPLE, 178, 0, {0}},
    [_WITH_EXCEPT_START] = {emit__WITH_EXCEPT_START, 239, 0, {0}},
    [_YIELD_VALUE] = {emit__YIELD_VALUE, 96, 0, {0}},
};

static const void * const symbols_map[1] = {
    0
};
