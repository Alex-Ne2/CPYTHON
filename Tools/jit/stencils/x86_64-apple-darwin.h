void
emit_shim(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // shim.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 41 57                         pushq   %r15
    // 6: 41 56                         pushq   %r14
    // 8: 41 55                         pushq   %r13
    // a: 41 54                         pushq   %r12
    // c: 53                            pushq   %rbx
    // d: 50                            pushq   %rax
    // e: 49 89 fc                      movq    %rdi, %r12
    // 11: 49 89 f5                      movq    %rsi, %r13
    // 14: 49 89 d6                      movq    %rdx, %r14
    // 17: e8 00 00 00 00                callq   0x1c <__JIT_ENTRY+0x1c>
    // 0000000000000018:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 1c: 48 83 c4 08                   addq    $0x8, %rsp
    // 20: 5b                            popq    %rbx
    // 21: 41 5c                         popq    %r12
    // 23: 41 5d                         popq    %r13
    // 25: 41 5e                         popq    %r14
    // 27: 41 5f                         popq    %r15
    // 29: 5d                            popq    %rbp
    // 2a: c3                            retq
    const unsigned char code_body[43] = {
        0x55, 0x48, 0x89, 0xe5, 0x41, 0x57, 0x41, 0x56,
        0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89,
        0xfc, 0x49, 0x89, 0xf5, 0x49, 0x89, 0xd6, 0xe8,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08,
        0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41,
        0x5f, 0x5d, 0xc3,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x18, (uintptr_t)code + sizeof(code_body) + -0x4);
}

void
emit__BINARY_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // 10: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 14: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 19: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 20: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x27 <__JIT_ENTRY+0x27>
    // 0000000000000023:  X86_64_RELOC_GOT_LOAD        __PyEval_BinaryOps@GOTPCREL
    // 27: 4c 89 ff                      movq    %r15, %rdi
    // 2a: 48 89 de                      movq    %rbx, %rsi
    // 2d: ff 14 c1                      callq   *(%rcx,%rax,8)
    // 30: 49 89 c6                      movq    %rax, %r14
    // 33: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 38: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 41: 41 8b 07                      movl    (%r15), %eax
    // 44: 85 c0                         testl   %eax, %eax
    // 46: 78 10                         js      0x58 <__JIT_ENTRY+0x58>
    // 48: ff c8                         decl    %eax
    // 4a: 41 89 07                      movl    %eax, (%r15)
    // 4d: 75 09                         jne     0x58 <__JIT_ENTRY+0x58>
    // 4f: 4c 89 ff                      movq    %r15, %rdi
    // 52: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x58 <__JIT_ENTRY+0x58>
    // 0000000000000054:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 58: 8b 03                         movl    (%rbx), %eax
    // 5a: 85 c0                         testl   %eax, %eax
    // 5c: 78 06                         js      0x64 <__JIT_ENTRY+0x64>
    // 5e: ff c8                         decl    %eax
    // 60: 89 03                         movl    %eax, (%rbx)
    // 62: 74 1b                         je      0x7f <__JIT_ENTRY+0x7f>
    // 64: 4d 85 f6                      testq   %r14, %r14
    // 67: 74 24                         je      0x8d <__JIT_ENTRY+0x8d>
    // 69: 4d 89 75 f0                   movq    %r14, -0x10(%r13)
    // 6d: 49 83 c5 f8                   addq    $-0x8, %r13
    // 71: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 75: 48 83 c4 10                   addq    $0x10, %rsp
    // 79: 5d                            popq    %rbp
    // 7a: e9 00 00 00 00                jmp     0x7f <__JIT_ENTRY+0x7f>
    // 000000000000007b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 7f: 48 89 df                      movq    %rbx, %rdi
    // 82: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x88 <__JIT_ENTRY+0x88>
    // 0000000000000084:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 88: 4d 85 f6                      testq   %r14, %r14
    // 8b: 75 dc                         jne     0x69 <__JIT_ENTRY+0x69>
    // 8d: 49 83 c5 f0                   addq    $-0x10, %r13
    // 91: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 95: 48 83 c4 10                   addq    $0x10, %rsp
    // 99: 5d                            popq    %rbp
    // 9a: e9 00 00 00 00                jmp     0x9f <__JIT_ENTRY+0x9f>
    // 000000000000009b:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[159] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0x75, 0xf8, 0x4d, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x5d, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x89, 0xff, 0x48, 0x89, 0xde, 0xff, 0x14, 0xc1,
        0x49, 0x89, 0xc6, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x41, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x10,
        0xff, 0xc8, 0x41, 0x89, 0x07, 0x75, 0x09, 0x4c,
        0x89, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x03, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8,
        0x89, 0x03, 0x74, 0x1b, 0x4d, 0x85, 0xf6, 0x74,
        0x24, 0x4d, 0x89, 0x75, 0xf0, 0x49, 0x83, 0xc5,
        0xf8, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4,
        0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x85, 0xf6, 0x75, 0xdc, 0x49, 0x83, 0xc5,
        0xf0, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4,
        0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyEval_BinaryOps+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_BinaryOps);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x23, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x54, (uintptr_t)data + -0x4);
    patch_32r(code + 0x7b, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x84, (uintptr_t)data + -0x4);
    patch_32r(code + 0x9b, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_ADD_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_ADD_FLOAT.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 7d f0                   movq    -0x10(%r13), %rdi
    // 8: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // c: 49 8d 5d f0                   leaq    -0x10(%r13), %rbx
    // 10: f2 0f 10 47 10                movsd   0x10(%rdi), %xmm0
    // 15: f2 0f 58 46 10                addsd   0x10(%rsi), %xmm0
    // 1a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_GOT     __PyFloat_FromDouble_ConsumeInputs@GOTPCREL
    // 20: 48 85 c0                      testq   %rax, %rax
    // 23: 74 0d                         je      0x32 <__JIT_ENTRY+0x32>
    // 25: 49 83 c5 f8                   addq    $-0x8, %r13
    // 29: 48 89 03                      movq    %rax, (%rbx)
    // 2c: 5d                            popq    %rbp
    // 2d: e9 00 00 00 00                jmp     0x32 <__JIT_ENTRY+0x32>
    // 000000000000002e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 32: 49 89 dd                      movq    %rbx, %r13
    // 35: 5d                            popq    %rbp
    // 36: e9 00 00 00 00                jmp     0x3b <__JIT_ENTRY+0x3b>
    // 0000000000000037:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[59] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x75, 0xf8, 0x49, 0x8d, 0x5d, 0xf0,
        0xf2, 0x0f, 0x10, 0x47, 0x10, 0xf2, 0x0f, 0x58,
        0x46, 0x10, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x0d, 0x49, 0x83, 0xc5,
        0xf8, 0x48, 0x89, 0x03, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0xdd, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_PyFloat_FromDouble_ConsumeInputs+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + -0x4);
    patch_32r(code + 0x2e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x37, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_ADD_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_ADD_INT.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // 10: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 14: 4c 89 ff                      movq    %r15, %rdi
    // 17: 48 89 de                      movq    %rbx, %rsi
    // 1a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_GOT     __PyLong_Add@GOTPCREL
    // 20: 49 89 c6                      movq    %rax, %r14
    // 23: 8b 03                         movl    (%rbx), %eax
    // 25: 85 c0                         testl   %eax, %eax
    // 27: 78 33                         js      0x5c <__JIT_ENTRY+0x5c>
    // 29: ff c8                         decl    %eax
    // 2b: 89 03                         movl    %eax, (%rbx)
    // 2d: 75 2d                         jne     0x5c <__JIT_ENTRY+0x5c>
    // 2f: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x36 <__JIT_ENTRY+0x36>
    // 0000000000000032:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 36: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 3d: 48 85 c0                      testq   %rax, %rax
    // 40: 74 11                         je      0x53 <__JIT_ENTRY+0x53>
    // 42: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // 49: 48 89 df                      movq    %rbx, %rdi
    // 4c: be 01 00 00 00                movl    $0x1, %esi
    // 51: ff d0                         callq   *%rax
    // 53: 48 89 df                      movq    %rbx, %rdi
    // 56: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5c <__JIT_ENTRY+0x5c>
    // 0000000000000058:  X86_64_RELOC_GOT     __PyLong_ExactDealloc@GOTPCREL
    // 5c: 41 8b 07                      movl    (%r15), %eax
    // 5f: 85 c0                         testl   %eax, %eax
    // 61: 78 07                         js      0x6a <__JIT_ENTRY+0x6a>
    // 63: ff c8                         decl    %eax
    // 65: 41 89 07                      movl    %eax, (%r15)
    // 68: 74 1e                         je      0x88 <__JIT_ENTRY+0x88>
    // 6a: 49 8d 45 f0                   leaq    -0x10(%r13), %rax
    // 6e: 4d 85 f6                      testq   %r14, %r14
    // 71: 74 4b                         je      0xbe <__JIT_ENTRY+0xbe>
    // 73: 49 83 c5 f8                   addq    $-0x8, %r13
    // 77: 4c 89 30                      movq    %r14, (%rax)
    // 7a: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 7e: 48 83 c4 10                   addq    $0x10, %rsp
    // 82: 5d                            popq    %rbp
    // 83: e9 00 00 00 00                jmp     0x88 <__JIT_ENTRY+0x88>
    // 0000000000000084:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 88: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x8f <__JIT_ENTRY+0x8f>
    // 000000000000008b:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 8f: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 96: 48 85 c0                      testq   %rax, %rax
    // 99: 74 11                         je      0xac <__JIT_ENTRY+0xac>
    // 9b: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // a2: 4c 89 ff                      movq    %r15, %rdi
    // a5: be 01 00 00 00                movl    $0x1, %esi
    // aa: ff d0                         callq   *%rax
    // ac: 4c 89 ff                      movq    %r15, %rdi
    // af: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xb5 <__JIT_ENTRY+0xb5>
    // 00000000000000b1:  X86_64_RELOC_GOT     __PyLong_ExactDealloc@GOTPCREL
    // b5: 49 8d 45 f0                   leaq    -0x10(%r13), %rax
    // b9: 4d 85 f6                      testq   %r14, %r14
    // bc: 75 b5                         jne     0x73 <__JIT_ENTRY+0x73>
    // be: 49 89 c5                      movq    %rax, %r13
    // c1: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // c5: 48 83 c4 10                   addq    $0x10, %rsp
    // c9: 5d                            popq    %rbp
    // ca: e9 00 00 00 00                jmp     0xcf <__JIT_ENTRY+0xcf>
    // 00000000000000cb:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[207] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0x75, 0xf8, 0x4d, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x5d, 0xf8, 0x4c, 0x89, 0xff, 0x48,
        0x89, 0xde, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0xc6, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x33, 0xff, 0xc8, 0x89, 0x03, 0x75, 0x2d, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x81, 0x40, 0x26, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x11, 0x48, 0x8b, 0x91, 0x48, 0x26, 0x00,
        0x00, 0x48, 0x89, 0xdf, 0xbe, 0x01, 0x00, 0x00,
        0x00, 0xff, 0xd0, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x07, 0xff, 0xc8, 0x41, 0x89, 0x07,
        0x74, 0x1e, 0x49, 0x8d, 0x45, 0xf0, 0x4d, 0x85,
        0xf6, 0x74, 0x4b, 0x49, 0x83, 0xc5, 0xf8, 0x4c,
        0x89, 0x30, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83,
        0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x81, 0x40, 0x26, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x11, 0x48, 0x8b, 0x91, 0x48, 0x26,
        0x00, 0x00, 0x4c, 0x89, 0xff, 0xbe, 0x01, 0x00,
        0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0xff, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x45,
        0xf0, 0x4d, 0x85, 0xf6, 0x75, 0xb5, 0x49, 0x89,
        0xc5, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4,
        0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyLong_ExactDealloc+0x0
    // 8: &_PyRuntime+0x0
    // 10: &_PyLong_Add+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyLong_Add);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)data + -0x4);
    patch_32r(code + 0x84, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x8b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xb1, (uintptr_t)data + -0x4);
    patch_32r(code + 0xcb, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_ADD_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_ADD_UNICODE.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // 10: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 14: 4c 89 ff                      movq    %r15, %rdi
    // 17: 48 89 de                      movq    %rbx, %rsi
    // 1a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_GOT     _PyUnicode_Concat@GOTPCREL
    // 20: 49 89 c6                      movq    %rax, %r14
    // 23: 8b 03                         movl    (%rbx), %eax
    // 25: 85 c0                         testl   %eax, %eax
    // 27: 78 33                         js      0x5c <__JIT_ENTRY+0x5c>
    // 29: ff c8                         decl    %eax
    // 2b: 89 03                         movl    %eax, (%rbx)
    // 2d: 75 2d                         jne     0x5c <__JIT_ENTRY+0x5c>
    // 2f: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x36 <__JIT_ENTRY+0x36>
    // 0000000000000032:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 36: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 3d: 48 85 c0                      testq   %rax, %rax
    // 40: 74 11                         je      0x53 <__JIT_ENTRY+0x53>
    // 42: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // 49: 48 89 df                      movq    %rbx, %rdi
    // 4c: be 01 00 00 00                movl    $0x1, %esi
    // 51: ff d0                         callq   *%rax
    // 53: 48 89 df                      movq    %rbx, %rdi
    // 56: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5c <__JIT_ENTRY+0x5c>
    // 0000000000000058:  X86_64_RELOC_GOT     __PyUnicode_ExactDealloc@GOTPCREL
    // 5c: 41 8b 07                      movl    (%r15), %eax
    // 5f: 85 c0                         testl   %eax, %eax
    // 61: 78 07                         js      0x6a <__JIT_ENTRY+0x6a>
    // 63: ff c8                         decl    %eax
    // 65: 41 89 07                      movl    %eax, (%r15)
    // 68: 74 1e                         je      0x88 <__JIT_ENTRY+0x88>
    // 6a: 49 8d 45 f0                   leaq    -0x10(%r13), %rax
    // 6e: 4d 85 f6                      testq   %r14, %r14
    // 71: 74 4b                         je      0xbe <__JIT_ENTRY+0xbe>
    // 73: 49 83 c5 f8                   addq    $-0x8, %r13
    // 77: 4c 89 30                      movq    %r14, (%rax)
    // 7a: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 7e: 48 83 c4 10                   addq    $0x10, %rsp
    // 82: 5d                            popq    %rbp
    // 83: e9 00 00 00 00                jmp     0x88 <__JIT_ENTRY+0x88>
    // 0000000000000084:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 88: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x8f <__JIT_ENTRY+0x8f>
    // 000000000000008b:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 8f: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 96: 48 85 c0                      testq   %rax, %rax
    // 99: 74 11                         je      0xac <__JIT_ENTRY+0xac>
    // 9b: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // a2: 4c 89 ff                      movq    %r15, %rdi
    // a5: be 01 00 00 00                movl    $0x1, %esi
    // aa: ff d0                         callq   *%rax
    // ac: 4c 89 ff                      movq    %r15, %rdi
    // af: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xb5 <__JIT_ENTRY+0xb5>
    // 00000000000000b1:  X86_64_RELOC_GOT     __PyUnicode_ExactDealloc@GOTPCREL
    // b5: 49 8d 45 f0                   leaq    -0x10(%r13), %rax
    // b9: 4d 85 f6                      testq   %r14, %r14
    // bc: 75 b5                         jne     0x73 <__JIT_ENTRY+0x73>
    // be: 49 89 c5                      movq    %rax, %r13
    // c1: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // c5: 48 83 c4 10                   addq    $0x10, %rsp
    // c9: 5d                            popq    %rbp
    // ca: e9 00 00 00 00                jmp     0xcf <__JIT_ENTRY+0xcf>
    // 00000000000000cb:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[207] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0x75, 0xf8, 0x4d, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x5d, 0xf8, 0x4c, 0x89, 0xff, 0x48,
        0x89, 0xde, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0xc6, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x33, 0xff, 0xc8, 0x89, 0x03, 0x75, 0x2d, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x81, 0x40, 0x26, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x11, 0x48, 0x8b, 0x91, 0x48, 0x26, 0x00,
        0x00, 0x48, 0x89, 0xdf, 0xbe, 0x01, 0x00, 0x00,
        0x00, 0xff, 0xd0, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x07, 0xff, 0xc8, 0x41, 0x89, 0x07,
        0x74, 0x1e, 0x49, 0x8d, 0x45, 0xf0, 0x4d, 0x85,
        0xf6, 0x74, 0x4b, 0x49, 0x83, 0xc5, 0xf8, 0x4c,
        0x89, 0x30, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83,
        0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x81, 0x40, 0x26, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x11, 0x48, 0x8b, 0x91, 0x48, 0x26,
        0x00, 0x00, 0x4c, 0x89, 0xff, 0xbe, 0x01, 0x00,
        0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0xff, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x45,
        0xf0, 0x4d, 0x85, 0xf6, 0x75, 0xb5, 0x49, 0x89,
        0xc5, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4,
        0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyUnicode_ExactDealloc+0x0
    // 8: &_PyRuntime+0x0
    // 10: &PyUnicode_Concat+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&PyUnicode_Concat);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)data + -0x4);
    patch_32r(code + 0x84, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x8b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xb1, (uintptr_t)data + -0x4);
    patch_32r(code + 0xcb, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_EXTEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_EXTEND.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // 10: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 14: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 19: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_GOT_LOAD        __JIT_OPERAND0@GOTPCREL
    // 20: 4c 89 ff                      movq    %r15, %rdi
    // 23: 48 89 de                      movq    %rbx, %rsi
    // 26: ff 50 10                      callq   *0x10(%rax)
    // 29: 49 89 c6                      movq    %rax, %r14
    // 2c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 31: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3a: 41 8b 07                      movl    (%r15), %eax
    // 3d: 85 c0                         testl   %eax, %eax
    // 3f: 78 10                         js      0x51 <__JIT_ENTRY+0x51>
    // 41: ff c8                         decl    %eax
    // 43: 41 89 07                      movl    %eax, (%r15)
    // 46: 75 09                         jne     0x51 <__JIT_ENTRY+0x51>
    // 48: 4c 89 ff                      movq    %r15, %rdi
    // 4b: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x51 <__JIT_ENTRY+0x51>
    // 000000000000004d:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 51: 8b 03                         movl    (%rbx), %eax
    // 53: 85 c0                         testl   %eax, %eax
    // 55: 78 0f                         js      0x66 <__JIT_ENTRY+0x66>
    // 57: ff c8                         decl    %eax
    // 59: 89 03                         movl    %eax, (%rbx)
    // 5b: 75 09                         jne     0x66 <__JIT_ENTRY+0x66>
    // 5d: 48 89 df                      movq    %rbx, %rdi
    // 60: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x66 <__JIT_ENTRY+0x66>
    // 0000000000000062:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 66: 4d 89 75 f0                   movq    %r14, -0x10(%r13)
    // 6a: 49 83 c5 f8                   addq    $-0x8, %r13
    // 6e: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 72: 48 83 c4 10                   addq    $0x10, %rsp
    // 76: 5d                            popq    %rbp
    // 77: e9 00 00 00 00                jmp     0x7c <__JIT_ENTRY+0x7c>
    // 0000000000000078:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[119] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0x75, 0xf8, 0x4d, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x5d, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0xff, 0x48, 0x89, 0xde, 0xff, 0x50,
        0x10, 0x49, 0x89, 0xc6, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x41, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x10, 0xff, 0xc8, 0x41, 0x89, 0x07, 0x75, 0x09,
        0x4c, 0x89, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x0f, 0xff,
        0xc8, 0x89, 0x03, 0x75, 0x09, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89,
        0x75, 0xf0, 0x49, 0x83, 0xc5, 0xf8, 0x4c, 0x8b,
        0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4d, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x62, (uintptr_t)data + -0x4);
}

void
emit__BINARY_OP_INPLACE_ADD_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_INPLACE_ADD_UNICODE.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // c: 48 63 1d 00 00 00 00          movslq  (%rip), %rbx            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 13: 4d 39 7c dc 50                cmpq    %r15, 0x50(%r12,%rbx,8)
    // 18: 74 0a                         je      0x24 <__JIT_ENTRY+0x24>
    // 1a: 48 83 c4 10                   addq    $0x10, %rsp
    // 1e: 5d                            popq    %rbp
    // 1f: e9 00 00 00 00                jmp     0x24 <__JIT_ENTRY+0x24>
    // 0000000000000020:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 24: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // 28: 4d 8b 75 f8                   movq    -0x8(%r13), %r14
    // 2c: 41 8b 07                      movl    (%r15), %eax
    // 2f: 85 c0                         testl   %eax, %eax
    // 31: 78 34                         js      0x67 <__JIT_ENTRY+0x67>
    // 33: ff c8                         decl    %eax
    // 35: 41 89 07                      movl    %eax, (%r15)
    // 38: 75 2d                         jne     0x67 <__JIT_ENTRY+0x67>
    // 3a: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x41 <__JIT_ENTRY+0x41>
    // 000000000000003d:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 41: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 48: 48 85 c0                      testq   %rax, %rax
    // 4b: 74 11                         je      0x5e <__JIT_ENTRY+0x5e>
    // 4d: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // 54: 4c 89 ff                      movq    %r15, %rdi
    // 57: be 01 00 00 00                movl    $0x1, %esi
    // 5c: ff d0                         callq   *%rax
    // 5e: 4c 89 ff                      movq    %r15, %rdi
    // 61: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x67 <__JIT_ENTRY+0x67>
    // 0000000000000063:  X86_64_RELOC_GOT     __PyUnicode_ExactDealloc@GOTPCREL
    // 67: 49 8b 44 dc 50                movq    0x50(%r12,%rbx,8), %rax
    // 6c: 48 89 45 f0                   movq    %rax, -0x10(%rbp)
    // 70: 48 8d 7d f0                   leaq    -0x10(%rbp), %rdi
    // 74: 4c 89 f6                      movq    %r14, %rsi
    // 77: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x7d <__JIT_ENTRY+0x7d>
    // 0000000000000079:  X86_64_RELOC_GOT     _PyUnicode_Append@GOTPCREL
    // 7d: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // 81: 49 89 44 dc 50                movq    %rax, 0x50(%r12,%rbx,8)
    // 86: 41 8b 0e                      movl    (%r14), %ecx
    // 89: 85 c9                         testl   %ecx, %ecx
    // 8b: 78 39                         js      0xc6 <__JIT_ENTRY+0xc6>
    // 8d: ff c9                         decl    %ecx
    // 8f: 41 89 0e                      movl    %ecx, (%r14)
    // 92: 75 2d                         jne     0xc1 <__JIT_ENTRY+0xc1>
    // 94: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x9b <__JIT_ENTRY+0x9b>
    // 0000000000000097:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 9b: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // a2: 48 85 c0                      testq   %rax, %rax
    // a5: 74 11                         je      0xb8 <__JIT_ENTRY+0xb8>
    // a7: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // ae: 4c 89 f7                      movq    %r14, %rdi
    // b1: be 01 00 00 00                movl    $0x1, %esi
    // b6: ff d0                         callq   *%rax
    // b8: 4c 89 f7                      movq    %r14, %rdi
    // bb: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xc1 <__JIT_ENTRY+0xc1>
    // 00000000000000bd:  X86_64_RELOC_GOT     __PyUnicode_ExactDealloc@GOTPCREL
    // c1: 49 8b 44 dc 50                movq    0x50(%r12,%rbx,8), %rax
    // c6: 49 83 c5 f0                   addq    $-0x10, %r13
    // ca: 48 85 c0                      testq   %rax, %rax
    // cd: 74 0e                         je      0xdd <__JIT_ENTRY+0xdd>
    // cf: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // d3: 48 83 c4 10                   addq    $0x10, %rsp
    // d7: 5d                            popq    %rbp
    // d8: e9 00 00 00 00                jmp     0xdd <__JIT_ENTRY+0xdd>
    // 00000000000000d9:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // dd: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // e1: 48 83 c4 10                   addq    $0x10, %rsp
    // e5: 5d                            popq    %rbp
    // e6: e9 00 00 00 00                jmp     0xeb <__JIT_ENTRY+0xeb>
    // 00000000000000e7:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[235] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4d, 0x8b, 0x7d, 0xf0, 0x48, 0x63, 0x1d, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x39, 0x7c, 0xdc, 0x50,
        0x74, 0x0a, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x75, 0xf8,
        0x4d, 0x8b, 0x75, 0xf8, 0x41, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x34, 0xff, 0xc8, 0x41, 0x89, 0x07,
        0x75, 0x2d, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x81, 0x40, 0x26, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x11, 0x48, 0x8b, 0x91,
        0x48, 0x26, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xbe,
        0x01, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89,
        0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x44, 0xdc, 0x50, 0x48, 0x89, 0x45, 0xf0,
        0x48, 0x8d, 0x7d, 0xf0, 0x4c, 0x89, 0xf6, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45,
        0xf0, 0x49, 0x89, 0x44, 0xdc, 0x50, 0x41, 0x8b,
        0x0e, 0x85, 0xc9, 0x78, 0x39, 0xff, 0xc9, 0x41,
        0x89, 0x0e, 0x75, 0x2d, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x81, 0x40, 0x26,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x11, 0x48,
        0x8b, 0x91, 0x48, 0x26, 0x00, 0x00, 0x4c, 0x89,
        0xf7, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xff, 0xd0,
        0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x44, 0xdc, 0x50, 0x49, 0x83,
        0xc5, 0xf0, 0x48, 0x85, 0xc0, 0x74, 0x0e, 0x4c,
        0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x75,
        0xf8, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_PyUnicode_ExactDealloc+0x0
    // 8: &_PyRuntime+0x0
    // 10: &PyUnicode_Append+0x0
    // 18: OPERAND0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&PyUnicode_Append);
    patch_64(data + 0x18, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x14);
    patch_32r(code + 0x20, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x3d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x63, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x79, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x97, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xbd, (uintptr_t)data + -0x4);
    patch_32r(code + 0xd9, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0xe7, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_MULTIPLY_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_MULTIPLY_FLOAT.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 7d f0                   movq    -0x10(%r13), %rdi
    // 8: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // c: 49 8d 5d f0                   leaq    -0x10(%r13), %rbx
    // 10: f2 0f 10 47 10                movsd   0x10(%rdi), %xmm0
    // 15: f2 0f 59 46 10                mulsd   0x10(%rsi), %xmm0
    // 1a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_GOT     __PyFloat_FromDouble_ConsumeInputs@GOTPCREL
    // 20: 48 85 c0                      testq   %rax, %rax
    // 23: 74 0d                         je      0x32 <__JIT_ENTRY+0x32>
    // 25: 49 83 c5 f8                   addq    $-0x8, %r13
    // 29: 48 89 03                      movq    %rax, (%rbx)
    // 2c: 5d                            popq    %rbp
    // 2d: e9 00 00 00 00                jmp     0x32 <__JIT_ENTRY+0x32>
    // 000000000000002e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 32: 49 89 dd                      movq    %rbx, %r13
    // 35: 5d                            popq    %rbp
    // 36: e9 00 00 00 00                jmp     0x3b <__JIT_ENTRY+0x3b>
    // 0000000000000037:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[59] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x75, 0xf8, 0x49, 0x8d, 0x5d, 0xf0,
        0xf2, 0x0f, 0x10, 0x47, 0x10, 0xf2, 0x0f, 0x59,
        0x46, 0x10, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x0d, 0x49, 0x83, 0xc5,
        0xf8, 0x48, 0x89, 0x03, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0xdd, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_PyFloat_FromDouble_ConsumeInputs+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + -0x4);
    patch_32r(code + 0x2e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x37, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_MULTIPLY_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_MULTIPLY_INT.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // 10: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 14: 4c 89 ff                      movq    %r15, %rdi
    // 17: 48 89 de                      movq    %rbx, %rsi
    // 1a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_GOT     __PyLong_Multiply@GOTPCREL
    // 20: 49 89 c6                      movq    %rax, %r14
    // 23: 8b 03                         movl    (%rbx), %eax
    // 25: 85 c0                         testl   %eax, %eax
    // 27: 78 33                         js      0x5c <__JIT_ENTRY+0x5c>
    // 29: ff c8                         decl    %eax
    // 2b: 89 03                         movl    %eax, (%rbx)
    // 2d: 75 2d                         jne     0x5c <__JIT_ENTRY+0x5c>
    // 2f: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x36 <__JIT_ENTRY+0x36>
    // 0000000000000032:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 36: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 3d: 48 85 c0                      testq   %rax, %rax
    // 40: 74 11                         je      0x53 <__JIT_ENTRY+0x53>
    // 42: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // 49: 48 89 df                      movq    %rbx, %rdi
    // 4c: be 01 00 00 00                movl    $0x1, %esi
    // 51: ff d0                         callq   *%rax
    // 53: 48 89 df                      movq    %rbx, %rdi
    // 56: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5c <__JIT_ENTRY+0x5c>
    // 0000000000000058:  X86_64_RELOC_GOT     __PyLong_ExactDealloc@GOTPCREL
    // 5c: 41 8b 07                      movl    (%r15), %eax
    // 5f: 85 c0                         testl   %eax, %eax
    // 61: 78 07                         js      0x6a <__JIT_ENTRY+0x6a>
    // 63: ff c8                         decl    %eax
    // 65: 41 89 07                      movl    %eax, (%r15)
    // 68: 74 1e                         je      0x88 <__JIT_ENTRY+0x88>
    // 6a: 49 8d 45 f0                   leaq    -0x10(%r13), %rax
    // 6e: 4d 85 f6                      testq   %r14, %r14
    // 71: 74 4b                         je      0xbe <__JIT_ENTRY+0xbe>
    // 73: 49 83 c5 f8                   addq    $-0x8, %r13
    // 77: 4c 89 30                      movq    %r14, (%rax)
    // 7a: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 7e: 48 83 c4 10                   addq    $0x10, %rsp
    // 82: 5d                            popq    %rbp
    // 83: e9 00 00 00 00                jmp     0x88 <__JIT_ENTRY+0x88>
    // 0000000000000084:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 88: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x8f <__JIT_ENTRY+0x8f>
    // 000000000000008b:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 8f: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 96: 48 85 c0                      testq   %rax, %rax
    // 99: 74 11                         je      0xac <__JIT_ENTRY+0xac>
    // 9b: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // a2: 4c 89 ff                      movq    %r15, %rdi
    // a5: be 01 00 00 00                movl    $0x1, %esi
    // aa: ff d0                         callq   *%rax
    // ac: 4c 89 ff                      movq    %r15, %rdi
    // af: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xb5 <__JIT_ENTRY+0xb5>
    // 00000000000000b1:  X86_64_RELOC_GOT     __PyLong_ExactDealloc@GOTPCREL
    // b5: 49 8d 45 f0                   leaq    -0x10(%r13), %rax
    // b9: 4d 85 f6                      testq   %r14, %r14
    // bc: 75 b5                         jne     0x73 <__JIT_ENTRY+0x73>
    // be: 49 89 c5                      movq    %rax, %r13
    // c1: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // c5: 48 83 c4 10                   addq    $0x10, %rsp
    // c9: 5d                            popq    %rbp
    // ca: e9 00 00 00 00                jmp     0xcf <__JIT_ENTRY+0xcf>
    // 00000000000000cb:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[207] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0x75, 0xf8, 0x4d, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x5d, 0xf8, 0x4c, 0x89, 0xff, 0x48,
        0x89, 0xde, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0xc6, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x33, 0xff, 0xc8, 0x89, 0x03, 0x75, 0x2d, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x81, 0x40, 0x26, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x11, 0x48, 0x8b, 0x91, 0x48, 0x26, 0x00,
        0x00, 0x48, 0x89, 0xdf, 0xbe, 0x01, 0x00, 0x00,
        0x00, 0xff, 0xd0, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x07, 0xff, 0xc8, 0x41, 0x89, 0x07,
        0x74, 0x1e, 0x49, 0x8d, 0x45, 0xf0, 0x4d, 0x85,
        0xf6, 0x74, 0x4b, 0x49, 0x83, 0xc5, 0xf8, 0x4c,
        0x89, 0x30, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83,
        0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x81, 0x40, 0x26, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x11, 0x48, 0x8b, 0x91, 0x48, 0x26,
        0x00, 0x00, 0x4c, 0x89, 0xff, 0xbe, 0x01, 0x00,
        0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0xff, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x45,
        0xf0, 0x4d, 0x85, 0xf6, 0x75, 0xb5, 0x49, 0x89,
        0xc5, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4,
        0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyLong_ExactDealloc+0x0
    // 8: &_PyRuntime+0x0
    // 10: &_PyLong_Multiply+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyLong_Multiply);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)data + -0x4);
    patch_32r(code + 0x84, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x8b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xb1, (uintptr_t)data + -0x4);
    patch_32r(code + 0xcb, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_SUBSCR_CHECK_FUNC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_CHECK_FUNC.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 8: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // c: f6 81 a9 00 00 00 02          testb   $0x2, 0xa9(%rcx)
    // 13: 74 59                         je      0x6e <__JIT_ENTRY+0x6e>
    // 15: 48 8b 81 90 03 00 00          movq    0x390(%rcx), %rax
    // 1c: 48 85 c0                      testq   %rax, %rax
    // 1f: 74 4d                         je      0x6e <__JIT_ENTRY+0x6e>
    // 21: 8b 90 90 00 00 00             movl    0x90(%rax), %edx
    // 27: 3b 91 98 03 00 00             cmpl    0x398(%rcx), %edx
    // 2d: 75 3f                         jne     0x6e <__JIT_ENTRY+0x6e>
    // 2f: 49 8b 8e f0 00 00 00          movq    0xf0(%r14), %rcx
    // 36: 48 85 c9                      testq   %rcx, %rcx
    // 39: 74 33                         je      0x6e <__JIT_ENTRY+0x6e>
    // 3b: 48 8b 50 30                   movq    0x30(%rax), %rdx
    // 3f: 48 63 52 4c                   movslq  0x4c(%rdx), %rdx
    // 43: 49 8b b6 f8 00 00 00          movq    0xf8(%r14), %rsi
    // 4a: 48 29 ce                      subq    %rcx, %rsi
    // 4d: 48 c1 fe 03                   sarq    $0x3, %rsi
    // 51: 48 39 d6                      cmpq    %rdx, %rsi
    // 54: 7e 18                         jle     0x6e <__JIT_ENTRY+0x6e>
    // 56: 8b 08                         movl    (%rax), %ecx
    // 58: 85 c9                         testl   %ecx, %ecx
    // 5a: 78 04                         js      0x60 <__JIT_ENTRY+0x60>
    // 5c: ff c1                         incl    %ecx
    // 5e: 89 08                         movl    %ecx, (%rax)
    // 60: 49 89 45 00                   movq    %rax, (%r13)
    // 64: 49 83 c5 08                   addq    $0x8, %r13
    // 68: 5d                            popq    %rbp
    // 69: e9 00 00 00 00                jmp     0x6e <__JIT_ENTRY+0x6e>
    // 000000000000006a:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 6e: 5d                            popq    %rbp
    // 6f: e9 00 00 00 00                jmp     0x74 <__JIT_ENTRY+0x74>
    // 0000000000000070:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[116] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf0,
        0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xa9, 0x00,
        0x00, 0x00, 0x02, 0x74, 0x59, 0x48, 0x8b, 0x81,
        0x90, 0x03, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x4d, 0x8b, 0x90, 0x90, 0x00, 0x00, 0x00, 0x3b,
        0x91, 0x98, 0x03, 0x00, 0x00, 0x75, 0x3f, 0x49,
        0x8b, 0x8e, 0xf0, 0x00, 0x00, 0x00, 0x48, 0x85,
        0xc9, 0x74, 0x33, 0x48, 0x8b, 0x50, 0x30, 0x48,
        0x63, 0x52, 0x4c, 0x49, 0x8b, 0xb6, 0xf8, 0x00,
        0x00, 0x00, 0x48, 0x29, 0xce, 0x48, 0xc1, 0xfe,
        0x03, 0x48, 0x39, 0xd6, 0x7e, 0x18, 0x8b, 0x08,
        0x85, 0xc9, 0x78, 0x04, 0xff, 0xc1, 0x89, 0x08,
        0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x6a, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x70, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__BINARY_OP_SUBSCR_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_DICT.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // c: 49 8b 47 08                   movq    0x8(%r15), %rax
    // 10: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x17 <__JIT_ENTRY+0x17>
    // 0000000000000013:  X86_64_RELOC_GOT     _PyDict_Type@GOTPCREL
    // 17: 74 0a                         je      0x23 <__JIT_ENTRY+0x23>
    // 19: 48 83 c4 10                   addq    $0x10, %rsp
    // 1d: 5d                            popq    %rbp
    // 1e: e9 00 00 00 00                jmp     0x23 <__JIT_ENTRY+0x23>
    // 000000000000001f:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 23: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 27: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2c: 48 8d 55 f8                   leaq    -0x8(%rbp), %rdx
    // 30: 4c 89 ff                      movq    %r15, %rdi
    // 33: 48 89 de                      movq    %rbx, %rsi
    // 36: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x3c <__JIT_ENTRY+0x3c>
    // 0000000000000038:  X86_64_RELOC_GOT     _PyDict_GetItemRef@GOTPCREL
    // 3c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 41: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 4a: 85 c0                         testl   %eax, %eax
    // 4c: 75 22                         jne     0x70 <__JIT_ENTRY+0x70>
    // 4e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 53: 48 89 df                      movq    %rbx, %rdi
    // 56: 41 89 c5                      movl    %eax, %r13d
    // 59: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5f <__JIT_ENTRY+0x5f>
    // 000000000000005b:  X86_64_RELOC_GOT     __PyErr_SetKeyError@GOTPCREL
    // 5f: 44 89 e8                      movl    %r13d, %eax
    // 62: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 67: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 70: 41 8b 0f                      movl    (%r15), %ecx
    // 73: 85 c9                         testl   %ecx, %ecx
    // 75: 78 16                         js      0x8d <__JIT_ENTRY+0x8d>
    // 77: ff c9                         decl    %ecx
    // 79: 41 89 0f                      movl    %ecx, (%r15)
    // 7c: 75 0f                         jne     0x8d <__JIT_ENTRY+0x8d>
    // 7e: 4c 89 ff                      movq    %r15, %rdi
    // 81: 41 89 c7                      movl    %eax, %r15d
    // 84: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x8a <__JIT_ENTRY+0x8a>
    // 0000000000000086:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 8a: 44 89 f8                      movl    %r15d, %eax
    // 8d: 8b 0b                         movl    (%rbx), %ecx
    // 8f: 85 c9                         testl   %ecx, %ecx
    // 91: 78 06                         js      0x99 <__JIT_ENTRY+0x99>
    // 93: ff c9                         decl    %ecx
    // 95: 89 0b                         movl    %ecx, (%rbx)
    // 97: 74 1a                         je      0xb3 <__JIT_ENTRY+0xb3>
    // 99: 85 c0                         testl   %eax, %eax
    // 9b: 7e 27                         jle     0xc4 <__JIT_ENTRY+0xc4>
    // 9d: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // a1: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // a5: 49 83 c5 f8                   addq    $-0x8, %r13
    // a9: 48 83 c4 10                   addq    $0x10, %rsp
    // ad: 5d                            popq    %rbp
    // ae: e9 00 00 00 00                jmp     0xb3 <__JIT_ENTRY+0xb3>
    // 00000000000000af:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // b3: 48 89 df                      movq    %rbx, %rdi
    // b6: 89 c3                         movl    %eax, %ebx
    // b8: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xbe <__JIT_ENTRY+0xbe>
    // 00000000000000ba:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // be: 89 d8                         movl    %ebx, %eax
    // c0: 85 c0                         testl   %eax, %eax
    // c2: 7f d9                         jg      0x9d <__JIT_ENTRY+0x9d>
    // c4: 49 83 c5 f0                   addq    $-0x10, %r13
    // c8: 48 83 c4 10                   addq    $0x10, %rsp
    // cc: 5d                            popq    %rbp
    // cd: e9 00 00 00 00                jmp     0xd2 <__JIT_ENTRY+0xd2>
    // 00000000000000ce:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[210] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4d, 0x8b, 0x7d, 0xf0, 0x49, 0x8b, 0x47, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x0a, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x5d, 0xf8, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x8d, 0x55, 0xf8,
        0x4c, 0x89, 0xff, 0x48, 0x89, 0xde, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x75, 0x22, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0xdf, 0x41, 0x89,
        0xc5, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x44,
        0x89, 0xe8, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x41, 0x8b, 0x0f, 0x85, 0xc9, 0x78, 0x16, 0xff,
        0xc9, 0x41, 0x89, 0x0f, 0x75, 0x0f, 0x4c, 0x89,
        0xff, 0x41, 0x89, 0xc7, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x44, 0x89, 0xf8, 0x8b, 0x0b, 0x85,
        0xc9, 0x78, 0x06, 0xff, 0xc9, 0x89, 0x0b, 0x74,
        0x1a, 0x85, 0xc0, 0x7e, 0x27, 0x48, 0x8b, 0x45,
        0xf8, 0x49, 0x89, 0x45, 0xf0, 0x49, 0x83, 0xc5,
        0xf8, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x89, 0xc3,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x89, 0xd8,
        0x85, 0xc0, 0x7f, 0xd9, 0x49, 0x83, 0xc5, 0xf0,
        0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyErr_SetKeyError+0x0
    // 10: &PyDict_GetItemRef+0x0
    // 18: &PyDict_Type+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyErr_SetKeyError);
    patch_64(data + 0x10, (uintptr_t)&PyDict_GetItemRef);
    patch_64(data + 0x18, (uintptr_t)&PyDict_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x14);
    patch_32r(code + 0x1f, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x38, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x86, (uintptr_t)data + -0x4);
    patch_32r(code + 0xaf, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xba, (uintptr_t)data + -0x4);
    patch_32r(code + 0xce, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_SUBSCR_INIT_CALL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_INIT_CALL.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // 4: 41 0f 10 45 e8                movups  -0x18(%r13), %xmm0
    // 9: 48 8b 4a 30                   movq    0x30(%rdx), %rcx
    // d: 49 8b 86 f0 00 00 00          movq    0xf0(%r14), %rax
    // 14: 48 63 71 4c                   movslq  0x4c(%rcx), %rsi
    // 18: 48 8d 34 f0                   leaq    (%rax,%rsi,8), %rsi
    // 1c: 49 89 b6 f0 00 00 00          movq    %rsi, 0xf0(%r14)
    // 23: 4c 89 60 08                   movq    %r12, 0x8(%rax)
    // 27: 48 89 50 10                   movq    %rdx, 0x10(%rax)
    // 2b: 8b 31                         movl    (%rcx), %esi
    // 2d: 85 f6                         testl   %esi, %esi
    // 2f: 78 04                         js      0x35 <__JIT_ENTRY+0x35>
    // 31: ff c6                         incl    %esi
    // 33: 89 31                         movl    %esi, (%rcx)
    // 35: 55                            pushq   %rbp
    // 36: 48 89 e5                      movq    %rsp, %rbp
    // 39: 48 89 08                      movq    %rcx, (%rax)
    // 3c: 0f 10 4a 10                   movups  0x10(%rdx), %xmm1
    // 40: 0f 11 48 18                   movups  %xmm1, 0x18(%rax)
    // 44: 48 c7 40 28 00 00 00 00       movq    $0x0, 0x28(%rax)
    // 4c: 48 63 51 48                   movslq  0x48(%rcx), %rdx
    // 50: 48 8d 74 d0 50                leaq    0x50(%rax,%rdx,8), %rsi
    // 55: 48 89 70 40                   movq    %rsi, 0x40(%rax)
    // 59: 48 8d b1 d0 00 00 00          leaq    0xd0(%rcx), %rsi
    // 60: 48 c7 40 30 00 00 00 00       movq    $0x0, 0x30(%rax)
    // 68: 48 89 70 38                   movq    %rsi, 0x38(%rax)
    // 6c: c7 40 48 00 00 00 00          movl    $0x0, 0x48(%rax)
    // 73: 48 83 fa 03                   cmpq    $0x3, %rdx
    // 77: 7c 23                         jl      0x9c <__JIT_ENTRY+0x9c>
    // 79: ba 0c 00 00 00                movl    $0xc, %edx
    // 7e: 66 90                         nop
    // 80: 48 c7 04 d0 00 00 00 00       movq    $0x0, (%rax,%rdx,8)
    // 88: 48 63 71 48                   movslq  0x48(%rcx), %rsi
    // 8c: 48 8d 7a 01                   leaq    0x1(%rdx), %rdi
    // 90: 48 83 c2 f7                   addq    $-0x9, %rdx
    // 94: 48 39 f2                      cmpq    %rsi, %rdx
    // 97: 48 89 fa                      movq    %rdi, %rdx
    // 9a: 7c e4                         jl      0x80 <__JIT_ENTRY+0x80>
    // 9c: 0f 11 40 50                   movups  %xmm0, 0x50(%rax)
    // a0: 66 41 c7 44 24 48 06 00       movw    $0x6, 0x48(%r12)
    // a8: 49 89 45 e8                   movq    %rax, -0x18(%r13)
    // ac: 49 83 c5 f0                   addq    $-0x10, %r13
    // b0: 5d                            popq    %rbp
    // b1: e9 00 00 00 00                jmp     0xb6 <__JIT_ENTRY+0xb6>
    // 00000000000000b2:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[177] = {
        0x49, 0x8b, 0x55, 0xf8, 0x41, 0x0f, 0x10, 0x45,
        0xe8, 0x48, 0x8b, 0x4a, 0x30, 0x49, 0x8b, 0x86,
        0xf0, 0x00, 0x00, 0x00, 0x48, 0x63, 0x71, 0x4c,
        0x48, 0x8d, 0x34, 0xf0, 0x49, 0x89, 0xb6, 0xf0,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0x60, 0x08, 0x48,
        0x89, 0x50, 0x10, 0x8b, 0x31, 0x85, 0xf6, 0x78,
        0x04, 0xff, 0xc6, 0x89, 0x31, 0x55, 0x48, 0x89,
        0xe5, 0x48, 0x89, 0x08, 0x0f, 0x10, 0x4a, 0x10,
        0x0f, 0x11, 0x48, 0x18, 0x48, 0xc7, 0x40, 0x28,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x63, 0x51, 0x48,
        0x48, 0x8d, 0x74, 0xd0, 0x50, 0x48, 0x89, 0x70,
        0x40, 0x48, 0x8d, 0xb1, 0xd0, 0x00, 0x00, 0x00,
        0x48, 0xc7, 0x40, 0x30, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x70, 0x38, 0xc7, 0x40, 0x48, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x83, 0xfa, 0x03, 0x7c,
        0x23, 0xba, 0x0c, 0x00, 0x00, 0x00, 0x66, 0x90,
        0x48, 0xc7, 0x04, 0xd0, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x63, 0x71, 0x48, 0x48, 0x8d, 0x7a, 0x01,
        0x48, 0x83, 0xc2, 0xf7, 0x48, 0x39, 0xf2, 0x48,
        0x89, 0xfa, 0x7c, 0xe4, 0x0f, 0x11, 0x40, 0x50,
        0x66, 0x41, 0xc7, 0x44, 0x24, 0x48, 0x06, 0x00,
        0x49, 0x89, 0x45, 0xe8, 0x49, 0x83, 0xc5, 0xf0,
        0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__BINARY_OP_SUBSCR_LIST_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_LIST_INT.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // 4: 49 8b 47 08                   movq    0x8(%r15), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     _PyLong_Type@GOTPCREL
    // f: 0f 85 00 00 00 00             jne     0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 15: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 19: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 1d: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x24 <__JIT_ENTRY+0x24>
    // 0000000000000020:  X86_64_RELOC_GOT     _PyList_Type@GOTPCREL
    // 24: 0f 85 00 00 00 00             jne     0x2a <__JIT_ENTRY+0x2a>
    // 0000000000000026:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 2a: 49 8b 47 10                   movq    0x10(%r15), %rax
    // 2e: 48 83 e0 fb                   andq    $-0x5, %rax
    // 32: 48 83 f8 09                   cmpq    $0x9, %rax
    // 36: 0f 83 00 00 00 00             jae     0x3c <__JIT_ENTRY+0x3c>
    // 0000000000000038:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 3c: 41 8b 47 18                   movl    0x18(%r15), %eax
    // 40: 48 39 43 10                   cmpq    %rax, 0x10(%rbx)
    // 44: 0f 8e 00 00 00 00             jle     0x4a <__JIT_ENTRY+0x4a>
    // 0000000000000046:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 4a: 48 8b 4b 18                   movq    0x18(%rbx), %rcx
    // 4e: 48 8b 0c c1                   movq    (%rcx,%rax,8), %rcx
    // 52: 8b 01                         movl    (%rcx), %eax
    // 54: 85 c0                         testl   %eax, %eax
    // 56: 78 04                         js      0x5c <__JIT_ENTRY+0x5c>
    // 58: ff c0                         incl    %eax
    // 5a: 89 01                         movl    %eax, (%rcx)
    // 5c: 55                            pushq   %rbp
    // 5d: 48 89 e5                      movq    %rsp, %rbp
    // 60: 48 83 ec 10                   subq    $0x10, %rsp
    // 64: 49 83 c5 f0                   addq    $-0x10, %r13
    // 68: 41 8b 07                      movl    (%r15), %eax
    // 6b: 85 c0                         testl   %eax, %eax
    // 6d: 78 3c                         js      0xab <__JIT_ENTRY+0xab>
    // 6f: ff c8                         decl    %eax
    // 71: 41 89 07                      movl    %eax, (%r15)
    // 74: 75 35                         jne     0xab <__JIT_ENTRY+0xab>
    // 76: 48 89 4d f8                   movq    %rcx, -0x8(%rbp)
    // 7a: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x81 <__JIT_ENTRY+0x81>
    // 000000000000007d:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 81: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 88: 48 85 c0                      testq   %rax, %rax
    // 8b: 74 11                         je      0x9e <__JIT_ENTRY+0x9e>
    // 8d: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // 94: 4c 89 ff                      movq    %r15, %rdi
    // 97: be 01 00 00 00                movl    $0x1, %esi
    // 9c: ff d0                         callq   *%rax
    // 9e: 4c 89 ff                      movq    %r15, %rdi
    // a1: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xa7 <__JIT_ENTRY+0xa7>
    // 00000000000000a3:  X86_64_RELOC_GOT     __PyLong_ExactDealloc@GOTPCREL
    // a7: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // ab: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // b0: 8b 03                         movl    (%rbx), %eax
    // b2: 85 c0                         testl   %eax, %eax
    // b4: 78 15                         js      0xcb <__JIT_ENTRY+0xcb>
    // b6: ff c8                         decl    %eax
    // b8: 89 03                         movl    %eax, (%rbx)
    // ba: 75 0f                         jne     0xcb <__JIT_ENTRY+0xcb>
    // bc: 48 89 df                      movq    %rbx, %rdi
    // bf: 48 89 cb                      movq    %rcx, %rbx
    // c2: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xc8 <__JIT_ENTRY+0xc8>
    // 00000000000000c4:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // c8: 48 89 d9                      movq    %rbx, %rcx
    // cb: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // d0: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // d9: 49 89 4d 00                   movq    %rcx, (%r13)
    // dd: 49 83 c5 08                   addq    $0x8, %r13
    // e1: 48 83 c4 10                   addq    $0x10, %rsp
    // e5: 5d                            popq    %rbp
    // e6: e9 00 00 00 00                jmp     0xeb <__JIT_ENTRY+0xeb>
    // 00000000000000e7:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[230] = {
        0x4d, 0x8b, 0x7d, 0xf8, 0x49, 0x8b, 0x47, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x85, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x5d,
        0xf0, 0x48, 0x8b, 0x43, 0x08, 0x48, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x83,
        0xe0, 0xfb, 0x48, 0x83, 0xf8, 0x09, 0x0f, 0x83,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x47, 0x18,
        0x48, 0x39, 0x43, 0x10, 0x0f, 0x8e, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x4b, 0x18, 0x48, 0x8b,
        0x0c, 0xc1, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x04,
        0xff, 0xc0, 0x89, 0x01, 0x55, 0x48, 0x89, 0xe5,
        0x48, 0x83, 0xec, 0x10, 0x49, 0x83, 0xc5, 0xf0,
        0x41, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x3c, 0xff,
        0xc8, 0x41, 0x89, 0x07, 0x75, 0x35, 0x48, 0x89,
        0x4d, 0xf8, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x81, 0x40, 0x26, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x11, 0x48, 0x8b, 0x91,
        0x48, 0x26, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xbe,
        0x01, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89,
        0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x4d, 0xf8, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x8b, 0x03, 0x85, 0xc0, 0x78, 0x15, 0xff, 0xc8,
        0x89, 0x03, 0x75, 0x0f, 0x48, 0x89, 0xdf, 0x48,
        0x89, 0xcb, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xd9, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x89, 0x4d, 0x00, 0x49, 0x83, 0xc5,
        0x08, 0x48, 0x83, 0xc4, 0x10, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyLong_ExactDealloc+0x0
    // 10: &_PyRuntime+0x0
    // 18: &PyList_Type+0x0
    // 20: &PyLong_Type+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&PyList_Type);
    patch_64(data + 0x20, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x1c);
    patch_32r(code + 0x11, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + 0x14);
    patch_32r(code + 0x26, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x38, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x46, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x7d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xa3, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xc4, (uintptr_t)data + -0x4);
}

void
emit__BINARY_OP_SUBSCR_STR_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_STR_INT.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // 4: 49 8b 47 08                   movq    0x8(%r15), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     _PyLong_Type@GOTPCREL
    // f: 0f 85 00 00 00 00             jne     0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 15: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 19: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 1d: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x24 <__JIT_ENTRY+0x24>
    // 0000000000000020:  X86_64_RELOC_GOT     _PyUnicode_Type@GOTPCREL
    // 24: 0f 85 00 00 00 00             jne     0x2a <__JIT_ENTRY+0x2a>
    // 0000000000000026:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 2a: 49 8b 47 10                   movq    0x10(%r15), %rax
    // 2e: 48 83 e0 fb                   andq    $-0x5, %rax
    // 32: 48 83 f8 09                   cmpq    $0x9, %rax
    // 36: 0f 83 00 00 00 00             jae     0x3c <__JIT_ENTRY+0x3c>
    // 0000000000000038:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 3c: 41 8b 47 18                   movl    0x18(%r15), %eax
    // 40: 48 39 43 10                   cmpq    %rax, 0x10(%rbx)
    // 44: 0f 8e 00 00 00 00             jle     0x4a <__JIT_ENTRY+0x4a>
    // 0000000000000046:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 4a: 0f b7 4b 22                   movzwl  0x22(%rbx), %ecx
    // 4e: 89 ca                         movl    %ecx, %edx
    // 50: 83 e2 07                      andl    $0x7, %edx
    // 53: 83 fa 02                      cmpl    $0x2, %edx
    // 56: 74 14                         je      0x6c <__JIT_ENTRY+0x6c>
    // 58: 83 fa 01                      cmpl    $0x1, %edx
    // 5b: 75 1e                         jne     0x7b <__JIT_ENTRY+0x7b>
    // 5d: f6 c1 08                      testb   $0x8, %cl
    // 60: 75 24                         jne     0x86 <__JIT_ENTRY+0x86>
    // 62: 48 8b 4b 38                   movq    0x38(%rbx), %rcx
    // 66: 0f b6 0c 01                   movzbl  (%rcx,%rax), %ecx
    // 6a: eb 62                         jmp     0xce <__JIT_ENTRY+0xce>
    // 6c: f6 c1 08                      testb   $0x8, %cl
    // 6f: 75 2e                         jne     0x9f <__JIT_ENTRY+0x9f>
    // 71: 48 8b 4b 38                   movq    0x38(%rbx), %rcx
    // 75: 0f b7 0c 41                   movzwl  (%rcx,%rax,2), %ecx
    // 79: eb 53                         jmp     0xce <__JIT_ENTRY+0xce>
    // 7b: f6 c1 08                      testb   $0x8, %cl
    // 7e: 75 38                         jne     0xb8 <__JIT_ENTRY+0xb8>
    // 80: 48 8b 4b 38                   movq    0x38(%rbx), %rcx
    // 84: eb 45                         jmp     0xcb <__JIT_ENTRY+0xcb>
    // 86: 31 d2                         xorl    %edx, %edx
    // 88: f6 c1 10                      testb   $0x10, %cl
    // 8b: 0f 94 c2                      sete    %dl
    // 8e: c1 e2 04                      shll    $0x4, %edx
    // 91: 48 8d 0c 13                   leaq    (%rbx,%rdx), %rcx
    // 95: 48 83 c1 28                   addq    $0x28, %rcx
    // 99: 0f b6 0c 01                   movzbl  (%rcx,%rax), %ecx
    // 9d: eb 2f                         jmp     0xce <__JIT_ENTRY+0xce>
    // 9f: 31 d2                         xorl    %edx, %edx
    // a1: f6 c1 10                      testb   $0x10, %cl
    // a4: 0f 94 c2                      sete    %dl
    // a7: c1 e2 04                      shll    $0x4, %edx
    // aa: 48 8d 0c 13                   leaq    (%rbx,%rdx), %rcx
    // ae: 48 83 c1 28                   addq    $0x28, %rcx
    // b2: 0f b7 0c 41                   movzwl  (%rcx,%rax,2), %ecx
    // b6: eb 16                         jmp     0xce <__JIT_ENTRY+0xce>
    // b8: 31 d2                         xorl    %edx, %edx
    // ba: f6 c1 10                      testb   $0x10, %cl
    // bd: 0f 94 c2                      sete    %dl
    // c0: c1 e2 04                      shll    $0x4, %edx
    // c3: 48 8d 0c 13                   leaq    (%rbx,%rdx), %rcx
    // c7: 48 83 c1 28                   addq    $0x28, %rcx
    // cb: 8b 0c 81                      movl    (%rcx,%rax,4), %ecx
    // ce: 81 f9 80 00 00 00             cmpl    $0x80, %ecx
    // d4: 0f 83 00 00 00 00             jae     0xda <__JIT_ENTRY+0xda>
    // 00000000000000d6:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // da: 55                            pushq   %rbp
    // db: 48 89 e5                      movq    %rsp, %rbp
    // de: 48 83 ec 10                   subq    $0x10, %rsp
    // e2: 49 83 c5 f0                   addq    $-0x10, %r13
    // e6: 41 8b 07                      movl    (%r15), %eax
    // e9: 85 c0                         testl   %eax, %eax
    // eb: 78 3a                         js      0x127 <__JIT_ENTRY+0x127>
    // ed: ff c8                         decl    %eax
    // ef: 41 89 07                      movl    %eax, (%r15)
    // f2: 75 33                         jne     0x127 <__JIT_ENTRY+0x127>
    // f4: 89 4d fc                      movl    %ecx, -0x4(%rbp)
    // f7: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0xfe <__JIT_ENTRY+0xfe>
    // 00000000000000fa:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // fe: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 105: 48 85 c0                      testq   %rax, %rax
    // 108: 74 11                         je      0x11b <__JIT_ENTRY+0x11b>
    // 10a: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // 111: 4c 89 ff                      movq    %r15, %rdi
    // 114: be 01 00 00 00                movl    $0x1, %esi
    // 119: ff d0                         callq   *%rax
    // 11b: 4c 89 ff                      movq    %r15, %rdi
    // 11e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x124 <__JIT_ENTRY+0x124>
    // 0000000000000120:  X86_64_RELOC_GOT     __PyLong_ExactDealloc@GOTPCREL
    // 124: 8b 4d fc                      movl    -0x4(%rbp), %ecx
    // 127: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 12c: 8b 03                         movl    (%rbx), %eax
    // 12e: 85 c0                         testl   %eax, %eax
    // 130: 78 13                         js      0x145 <__JIT_ENTRY+0x145>
    // 132: ff c8                         decl    %eax
    // 134: 89 03                         movl    %eax, (%rbx)
    // 136: 75 0d                         jne     0x145 <__JIT_ENTRY+0x145>
    // 138: 48 89 df                      movq    %rbx, %rdi
    // 13b: 89 cb                         movl    %ecx, %ebx
    // 13d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x143 <__JIT_ENTRY+0x143>
    // 000000000000013f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 143: 89 d9                         movl    %ebx, %ecx
    // 145: 89 c8                         movl    %ecx, %eax
    // 147: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
    // 14b: 48 c1 e0 04                   shlq    $0x4, %rax
    // 14f: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x156 <__JIT_ENTRY+0x156>
    // 0000000000000152:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 156: 48 01 c8                      addq    %rcx, %rax
    // 159: 48 05 28 21 01 00             addq    $0x12128, %rax          ## imm = 0x12128
    // 15f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 164: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 16d: 49 89 45 00                   movq    %rax, (%r13)
    // 171: 49 83 c5 08                   addq    $0x8, %r13
    // 175: 48 83 c4 10                   addq    $0x10, %rsp
    // 179: 5d                            popq    %rbp
    // 17a: e9 00 00 00 00                jmp     0x17f <__JIT_ENTRY+0x17f>
    // 000000000000017b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[378] = {
        0x4d, 0x8b, 0x7d, 0xf8, 0x49, 0x8b, 0x47, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x85, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x5d,
        0xf0, 0x48, 0x8b, 0x43, 0x08, 0x48, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x83,
        0xe0, 0xfb, 0x48, 0x83, 0xf8, 0x09, 0x0f, 0x83,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x47, 0x18,
        0x48, 0x39, 0x43, 0x10, 0x0f, 0x8e, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0xb7, 0x4b, 0x22, 0x89, 0xca,
        0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x14,
        0x83, 0xfa, 0x01, 0x75, 0x1e, 0xf6, 0xc1, 0x08,
        0x75, 0x24, 0x48, 0x8b, 0x4b, 0x38, 0x0f, 0xb6,
        0x0c, 0x01, 0xeb, 0x62, 0xf6, 0xc1, 0x08, 0x75,
        0x2e, 0x48, 0x8b, 0x4b, 0x38, 0x0f, 0xb7, 0x0c,
        0x41, 0xeb, 0x53, 0xf6, 0xc1, 0x08, 0x75, 0x38,
        0x48, 0x8b, 0x4b, 0x38, 0xeb, 0x45, 0x31, 0xd2,
        0xf6, 0xc1, 0x10, 0x0f, 0x94, 0xc2, 0xc1, 0xe2,
        0x04, 0x48, 0x8d, 0x0c, 0x13, 0x48, 0x83, 0xc1,
        0x28, 0x0f, 0xb6, 0x0c, 0x01, 0xeb, 0x2f, 0x31,
        0xd2, 0xf6, 0xc1, 0x10, 0x0f, 0x94, 0xc2, 0xc1,
        0xe2, 0x04, 0x48, 0x8d, 0x0c, 0x13, 0x48, 0x83,
        0xc1, 0x28, 0x0f, 0xb7, 0x0c, 0x41, 0xeb, 0x16,
        0x31, 0xd2, 0xf6, 0xc1, 0x10, 0x0f, 0x94, 0xc2,
        0xc1, 0xe2, 0x04, 0x48, 0x8d, 0x0c, 0x13, 0x48,
        0x83, 0xc1, 0x28, 0x8b, 0x0c, 0x81, 0x81, 0xf9,
        0x80, 0x00, 0x00, 0x00, 0x0f, 0x83, 0x00, 0x00,
        0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0x48, 0x83,
        0xec, 0x10, 0x49, 0x83, 0xc5, 0xf0, 0x41, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x3a, 0xff, 0xc8, 0x41,
        0x89, 0x07, 0x75, 0x33, 0x89, 0x4d, 0xfc, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x81, 0x40, 0x26, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x11, 0x48, 0x8b, 0x91, 0x48, 0x26, 0x00,
        0x00, 0x4c, 0x89, 0xff, 0xbe, 0x01, 0x00, 0x00,
        0x00, 0xff, 0xd0, 0x4c, 0x89, 0xff, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x4d, 0xfc, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x8b, 0x03, 0x85, 0xc0,
        0x78, 0x13, 0xff, 0xc8, 0x89, 0x03, 0x75, 0x0d,
        0x48, 0x89, 0xdf, 0x89, 0xcb, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xd9, 0x89, 0xc8, 0x48,
        0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01,
        0xc8, 0x48, 0x05, 0x28, 0x21, 0x01, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45,
        0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0x83, 0xc4,
        0x10, 0x5d,
    };
    // 0: &_PyRuntime+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: &_PyLong_ExactDealloc+0x0
    // 18: &PyUnicode_Type+0x0
    // 20: &PyLong_Type+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x18, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x20, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x1c);
    patch_32r(code + 0x11, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + 0x14);
    patch_32r(code + 0x26, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x38, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x46, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0xd6, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0xfa, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x120, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x13f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x152, (uintptr_t)data + -0x4);
}

void
emit__BINARY_OP_SUBSCR_TUPLE_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBSCR_TUPLE_INT.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // 4: 49 8b 47 08                   movq    0x8(%r15), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     _PyLong_Type@GOTPCREL
    // f: 0f 85 00 00 00 00             jne     0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 15: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 19: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 1d: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x24 <__JIT_ENTRY+0x24>
    // 0000000000000020:  X86_64_RELOC_GOT     _PyTuple_Type@GOTPCREL
    // 24: 0f 85 00 00 00 00             jne     0x2a <__JIT_ENTRY+0x2a>
    // 0000000000000026:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 2a: 49 8b 47 10                   movq    0x10(%r15), %rax
    // 2e: 48 83 e0 fb                   andq    $-0x5, %rax
    // 32: 48 83 f8 09                   cmpq    $0x9, %rax
    // 36: 0f 83 00 00 00 00             jae     0x3c <__JIT_ENTRY+0x3c>
    // 0000000000000038:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 3c: 41 8b 47 18                   movl    0x18(%r15), %eax
    // 40: 48 39 43 10                   cmpq    %rax, 0x10(%rbx)
    // 44: 0f 8e 00 00 00 00             jle     0x4a <__JIT_ENTRY+0x4a>
    // 0000000000000046:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 4a: 48 8b 4c c3 18                movq    0x18(%rbx,%rax,8), %rcx
    // 4f: 8b 01                         movl    (%rcx), %eax
    // 51: 85 c0                         testl   %eax, %eax
    // 53: 78 04                         js      0x59 <__JIT_ENTRY+0x59>
    // 55: ff c0                         incl    %eax
    // 57: 89 01                         movl    %eax, (%rcx)
    // 59: 55                            pushq   %rbp
    // 5a: 48 89 e5                      movq    %rsp, %rbp
    // 5d: 48 83 ec 10                   subq    $0x10, %rsp
    // 61: 49 83 c5 f0                   addq    $-0x10, %r13
    // 65: 41 8b 07                      movl    (%r15), %eax
    // 68: 85 c0                         testl   %eax, %eax
    // 6a: 78 3c                         js      0xa8 <__JIT_ENTRY+0xa8>
    // 6c: ff c8                         decl    %eax
    // 6e: 41 89 07                      movl    %eax, (%r15)
    // 71: 75 35                         jne     0xa8 <__JIT_ENTRY+0xa8>
    // 73: 48 89 4d f8                   movq    %rcx, -0x8(%rbp)
    // 77: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x7e <__JIT_ENTRY+0x7e>
    // 000000000000007a:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 7e: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 85: 48 85 c0                      testq   %rax, %rax
    // 88: 74 11                         je      0x9b <__JIT_ENTRY+0x9b>
    // 8a: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // 91: 4c 89 ff                      movq    %r15, %rdi
    // 94: be 01 00 00 00                movl    $0x1, %esi
    // 99: ff d0                         callq   *%rax
    // 9b: 4c 89 ff                      movq    %r15, %rdi
    // 9e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xa4 <__JIT_ENTRY+0xa4>
    // 00000000000000a0:  X86_64_RELOC_GOT     __PyLong_ExactDealloc@GOTPCREL
    // a4: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // a8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // ad: 8b 03                         movl    (%rbx), %eax
    // af: 85 c0                         testl   %eax, %eax
    // b1: 78 15                         js      0xc8 <__JIT_ENTRY+0xc8>
    // b3: ff c8                         decl    %eax
    // b5: 89 03                         movl    %eax, (%rbx)
    // b7: 75 0f                         jne     0xc8 <__JIT_ENTRY+0xc8>
    // b9: 48 89 df                      movq    %rbx, %rdi
    // bc: 48 89 cb                      movq    %rcx, %rbx
    // bf: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xc5 <__JIT_ENTRY+0xc5>
    // 00000000000000c1:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // c5: 48 89 d9                      movq    %rbx, %rcx
    // c8: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // cd: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // d6: 49 89 4d 00                   movq    %rcx, (%r13)
    // da: 49 83 c5 08                   addq    $0x8, %r13
    // de: 48 83 c4 10                   addq    $0x10, %rsp
    // e2: 5d                            popq    %rbp
    // e3: e9 00 00 00 00                jmp     0xe8 <__JIT_ENTRY+0xe8>
    // 00000000000000e4:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[227] = {
        0x4d, 0x8b, 0x7d, 0xf8, 0x49, 0x8b, 0x47, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x85, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x5d,
        0xf0, 0x48, 0x8b, 0x43, 0x08, 0x48, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x83,
        0xe0, 0xfb, 0x48, 0x83, 0xf8, 0x09, 0x0f, 0x83,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x47, 0x18,
        0x48, 0x39, 0x43, 0x10, 0x0f, 0x8e, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x4c, 0xc3, 0x18, 0x8b,
        0x01, 0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89,
        0x01, 0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec,
        0x10, 0x49, 0x83, 0xc5, 0xf0, 0x41, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x3c, 0xff, 0xc8, 0x41, 0x89,
        0x07, 0x75, 0x35, 0x48, 0x89, 0x4d, 0xf8, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x81, 0x40, 0x26, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x11, 0x48, 0x8b, 0x91, 0x48, 0x26, 0x00,
        0x00, 0x4c, 0x89, 0xff, 0xbe, 0x01, 0x00, 0x00,
        0x00, 0xff, 0xd0, 0x4c, 0x89, 0xff, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4d, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x8b, 0x03, 0x85,
        0xc0, 0x78, 0x15, 0xff, 0xc8, 0x89, 0x03, 0x75,
        0x0f, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xcb, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd9,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x4d, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0x83,
        0xc4, 0x10, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyLong_ExactDealloc+0x0
    // 10: &_PyRuntime+0x0
    // 18: &PyTuple_Type+0x0
    // 20: &PyLong_Type+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x20, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x1c);
    patch_32r(code + 0x11, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + 0x14);
    patch_32r(code + 0x26, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x38, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x46, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x7a, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xa0, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xc1, (uintptr_t)data + -0x4);
}

void
emit__BINARY_OP_SUBTRACT_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBTRACT_FLOAT.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 7d f0                   movq    -0x10(%r13), %rdi
    // 8: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // c: 49 8d 5d f0                   leaq    -0x10(%r13), %rbx
    // 10: f2 0f 10 47 10                movsd   0x10(%rdi), %xmm0
    // 15: f2 0f 5c 46 10                subsd   0x10(%rsi), %xmm0
    // 1a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_GOT     __PyFloat_FromDouble_ConsumeInputs@GOTPCREL
    // 20: 48 85 c0                      testq   %rax, %rax
    // 23: 74 0d                         je      0x32 <__JIT_ENTRY+0x32>
    // 25: 49 83 c5 f8                   addq    $-0x8, %r13
    // 29: 48 89 03                      movq    %rax, (%rbx)
    // 2c: 5d                            popq    %rbp
    // 2d: e9 00 00 00 00                jmp     0x32 <__JIT_ENTRY+0x32>
    // 000000000000002e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 32: 49 89 dd                      movq    %rbx, %r13
    // 35: 5d                            popq    %rbp
    // 36: e9 00 00 00 00                jmp     0x3b <__JIT_ENTRY+0x3b>
    // 0000000000000037:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[59] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x75, 0xf8, 0x49, 0x8d, 0x5d, 0xf0,
        0xf2, 0x0f, 0x10, 0x47, 0x10, 0xf2, 0x0f, 0x5c,
        0x46, 0x10, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x0d, 0x49, 0x83, 0xc5,
        0xf8, 0x48, 0x89, 0x03, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0xdd, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_PyFloat_FromDouble_ConsumeInputs+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + -0x4);
    patch_32r(code + 0x2e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x37, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_OP_SUBTRACT_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_OP_SUBTRACT_INT.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // 10: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 14: 4c 89 ff                      movq    %r15, %rdi
    // 17: 48 89 de                      movq    %rbx, %rsi
    // 1a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_GOT     __PyLong_Subtract@GOTPCREL
    // 20: 49 89 c6                      movq    %rax, %r14
    // 23: 8b 03                         movl    (%rbx), %eax
    // 25: 85 c0                         testl   %eax, %eax
    // 27: 78 33                         js      0x5c <__JIT_ENTRY+0x5c>
    // 29: ff c8                         decl    %eax
    // 2b: 89 03                         movl    %eax, (%rbx)
    // 2d: 75 2d                         jne     0x5c <__JIT_ENTRY+0x5c>
    // 2f: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x36 <__JIT_ENTRY+0x36>
    // 0000000000000032:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 36: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 3d: 48 85 c0                      testq   %rax, %rax
    // 40: 74 11                         je      0x53 <__JIT_ENTRY+0x53>
    // 42: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // 49: 48 89 df                      movq    %rbx, %rdi
    // 4c: be 01 00 00 00                movl    $0x1, %esi
    // 51: ff d0                         callq   *%rax
    // 53: 48 89 df                      movq    %rbx, %rdi
    // 56: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5c <__JIT_ENTRY+0x5c>
    // 0000000000000058:  X86_64_RELOC_GOT     __PyLong_ExactDealloc@GOTPCREL
    // 5c: 41 8b 07                      movl    (%r15), %eax
    // 5f: 85 c0                         testl   %eax, %eax
    // 61: 78 07                         js      0x6a <__JIT_ENTRY+0x6a>
    // 63: ff c8                         decl    %eax
    // 65: 41 89 07                      movl    %eax, (%r15)
    // 68: 74 1e                         je      0x88 <__JIT_ENTRY+0x88>
    // 6a: 49 8d 45 f0                   leaq    -0x10(%r13), %rax
    // 6e: 4d 85 f6                      testq   %r14, %r14
    // 71: 74 4b                         je      0xbe <__JIT_ENTRY+0xbe>
    // 73: 49 83 c5 f8                   addq    $-0x8, %r13
    // 77: 4c 89 30                      movq    %r14, (%rax)
    // 7a: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 7e: 48 83 c4 10                   addq    $0x10, %rsp
    // 82: 5d                            popq    %rbp
    // 83: e9 00 00 00 00                jmp     0x88 <__JIT_ENTRY+0x88>
    // 0000000000000084:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 88: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x8f <__JIT_ENTRY+0x8f>
    // 000000000000008b:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 8f: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 96: 48 85 c0                      testq   %rax, %rax
    // 99: 74 11                         je      0xac <__JIT_ENTRY+0xac>
    // 9b: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // a2: 4c 89 ff                      movq    %r15, %rdi
    // a5: be 01 00 00 00                movl    $0x1, %esi
    // aa: ff d0                         callq   *%rax
    // ac: 4c 89 ff                      movq    %r15, %rdi
    // af: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xb5 <__JIT_ENTRY+0xb5>
    // 00000000000000b1:  X86_64_RELOC_GOT     __PyLong_ExactDealloc@GOTPCREL
    // b5: 49 8d 45 f0                   leaq    -0x10(%r13), %rax
    // b9: 4d 85 f6                      testq   %r14, %r14
    // bc: 75 b5                         jne     0x73 <__JIT_ENTRY+0x73>
    // be: 49 89 c5                      movq    %rax, %r13
    // c1: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // c5: 48 83 c4 10                   addq    $0x10, %rsp
    // c9: 5d                            popq    %rbp
    // ca: e9 00 00 00 00                jmp     0xcf <__JIT_ENTRY+0xcf>
    // 00000000000000cb:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[207] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0x75, 0xf8, 0x4d, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x5d, 0xf8, 0x4c, 0x89, 0xff, 0x48,
        0x89, 0xde, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0xc6, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x33, 0xff, 0xc8, 0x89, 0x03, 0x75, 0x2d, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x81, 0x40, 0x26, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x11, 0x48, 0x8b, 0x91, 0x48, 0x26, 0x00,
        0x00, 0x48, 0x89, 0xdf, 0xbe, 0x01, 0x00, 0x00,
        0x00, 0xff, 0xd0, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x07, 0xff, 0xc8, 0x41, 0x89, 0x07,
        0x74, 0x1e, 0x49, 0x8d, 0x45, 0xf0, 0x4d, 0x85,
        0xf6, 0x74, 0x4b, 0x49, 0x83, 0xc5, 0xf8, 0x4c,
        0x89, 0x30, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83,
        0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x81, 0x40, 0x26, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x11, 0x48, 0x8b, 0x91, 0x48, 0x26,
        0x00, 0x00, 0x4c, 0x89, 0xff, 0xbe, 0x01, 0x00,
        0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0xff, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x45,
        0xf0, 0x4d, 0x85, 0xf6, 0x75, 0xb5, 0x49, 0x89,
        0xc5, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4,
        0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyLong_ExactDealloc+0x0
    // 8: &_PyRuntime+0x0
    // 10: &_PyLong_Subtract+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyLong_Subtract);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)data + -0x4);
    patch_32r(code + 0x84, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x8b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xb1, (uintptr_t)data + -0x4);
    patch_32r(code + 0xcb, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BINARY_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BINARY_SLICE.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 49 8b 5d e8                   movq    -0x18(%r13), %rbx
    // c: 49 8b 7d f0                   movq    -0x10(%r13), %rdi
    // 10: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 15: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_GOT     __PyBuildSlice_ConsumeRefs@GOTPCREL
    // 1b: 49 89 c5                      movq    %rax, %r13
    // 1e: 49 8b 44 24 40                movq    0x40(%r12), %rax
    // 23: 4d 85 ed                      testq   %r13, %r13
    // 26: 74 3c                         je      0x64 <__JIT_ENTRY+0x64>
    // 28: 48 83 c0 f0                   addq    $-0x10, %rax
    // 2c: 49 89 44 24 40                movq    %rax, 0x40(%r12)
    // 31: 48 89 df                      movq    %rbx, %rdi
    // 34: 4c 89 ee                      movq    %r13, %rsi
    // 37: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x3d <__JIT_ENTRY+0x3d>
    // 0000000000000039:  X86_64_RELOC_GOT     _PyObject_GetItem@GOTPCREL
    // 3d: 49 89 c7                      movq    %rax, %r15
    // 40: 41 8b 45 00                   movl    (%r13), %eax
    // 44: 85 c0                         testl   %eax, %eax
    // 46: 78 11                         js      0x59 <__JIT_ENTRY+0x59>
    // 48: ff c8                         decl    %eax
    // 4a: 41 89 45 00                   movl    %eax, (%r13)
    // 4e: 75 09                         jne     0x59 <__JIT_ENTRY+0x59>
    // 50: 4c 89 ef                      movq    %r13, %rdi
    // 53: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x59 <__JIT_ENTRY+0x59>
    // 0000000000000055:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 59: 49 8b 44 24 40                movq    0x40(%r12), %rax
    // 5e: 48 83 c0 10                   addq    $0x10, %rax
    // 62: eb 03                         jmp     0x67 <__JIT_ENTRY+0x67>
    // 64: 45 31 ff                      xorl    %r15d, %r15d
    // 67: 48 83 c0 e8                   addq    $-0x18, %rax
    // 6b: 49 89 44 24 40                movq    %rax, 0x40(%r12)
    // 70: 8b 03                         movl    (%rbx), %eax
    // 72: 85 c0                         testl   %eax, %eax
    // 74: 78 06                         js      0x7c <__JIT_ENTRY+0x7c>
    // 76: ff c8                         decl    %eax
    // 78: 89 03                         movl    %eax, (%rbx)
    // 7a: 74 21                         je      0x9d <__JIT_ENTRY+0x9d>
    // 7c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 81: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 8a: 4d 85 ff                      testq   %r15, %r15
    // 8d: 74 2a                         je      0xb9 <__JIT_ENTRY+0xb9>
    // 8f: 4d 89 7d 00                   movq    %r15, (%r13)
    // 93: 49 83 c5 08                   addq    $0x8, %r13
    // 97: 5d                            popq    %rbp
    // 98: e9 00 00 00 00                jmp     0x9d <__JIT_ENTRY+0x9d>
    // 0000000000000099:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 9d: 48 89 df                      movq    %rbx, %rdi
    // a0: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xa6 <__JIT_ENTRY+0xa6>
    // 00000000000000a2:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // a6: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // ab: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // b4: 4d 85 ff                      testq   %r15, %r15
    // b7: 75 d6                         jne     0x8f <__JIT_ENTRY+0x8f>
    // b9: 5d                            popq    %rbp
    // ba: e9 00 00 00 00                jmp     0xbf <__JIT_ENTRY+0xbf>
    // 00000000000000bb:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[191] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x75, 0xf8,
        0x49, 0x8b, 0x5d, 0xe8, 0x49, 0x8b, 0x7d, 0xf0,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b,
        0x44, 0x24, 0x40, 0x4d, 0x85, 0xed, 0x74, 0x3c,
        0x48, 0x83, 0xc0, 0xf0, 0x49, 0x89, 0x44, 0x24,
        0x40, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7,
        0x41, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x11,
        0xff, 0xc8, 0x41, 0x89, 0x45, 0x00, 0x75, 0x09,
        0x4c, 0x89, 0xef, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x44, 0x24, 0x40, 0x48, 0x83,
        0xc0, 0x10, 0xeb, 0x03, 0x45, 0x31, 0xff, 0x48,
        0x83, 0xc0, 0xe8, 0x49, 0x89, 0x44, 0x24, 0x40,
        0x8b, 0x03, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8,
        0x89, 0x03, 0x74, 0x21, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x85, 0xff, 0x74, 0x2a, 0x4d,
        0x89, 0x7d, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xff, 0x75,
        0xd6, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyObject_GetItem+0x0
    // 10: &_PyBuildSlice_ConsumeRefs+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyObject_GetItem);
    patch_64(data + 0x10, (uintptr_t)&_PyBuildSlice_ConsumeRefs);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x39, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x55, (uintptr_t)data + -0x4);
    patch_32r(code + 0x99, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xa2, (uintptr_t)data + -0x4);
    patch_32r(code + 0xbb, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BUILD_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_LIST.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 4c 8b 3d 00 00 00 00          movq    (%rip), %r15            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // b: 41 0f b7 f7                   movzwl  %r15w, %esi
    // f: 8d 04 f5 00 00 00 00          leal    (,%rsi,8), %eax
    // 16: 4c 89 eb                      movq    %r13, %rbx
    // 19: 48 29 c3                      subq    %rax, %rbx
    // 1c: 48 89 df                      movq    %rbx, %rdi
    // 1f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_GOT     __PyList_FromStackRefStealOnSuccess@GOTPCREL
    // 25: 48 85 c0                      testq   %rax, %rax
    // 28: 74 1b                         je      0x45 <__JIT_ENTRY+0x45>
    // 2a: 41 0f b7 cf                   movzwl  %r15w, %ecx
    // 2e: 48 89 03                      movq    %rax, (%rbx)
    // 31: b8 01 00 00 00                movl    $0x1, %eax
    // 36: 29 c8                         subl    %ecx, %eax
    // 38: 48 98                         cltq
    // 3a: 4d 8d 6c c5 00                leaq    (%r13,%rax,8), %r13
    // 3f: 5d                            popq    %rbp
    // 40: e9 00 00 00 00                jmp     0x45 <__JIT_ENTRY+0x45>
    // 0000000000000041:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 45: 5d                            popq    %rbp
    // 46: e9 00 00 00 00                jmp     0x4b <__JIT_ENTRY+0x4b>
    // 0000000000000047:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[75] = {
        0x55, 0x48, 0x89, 0xe5, 0x4c, 0x8b, 0x3d, 0x00,
        0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xf7, 0x8d,
        0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xeb, 0x48, 0x29, 0xc3, 0x48, 0x89, 0xdf, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x1b, 0x41, 0x0f, 0xb7, 0xcf, 0x48, 0x89,
        0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8,
        0x48, 0x98, 0x4d, 0x8d, 0x6c, 0xc5, 0x00, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_PyList_FromStackRefStealOnSuccess+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyList_FromStackRefStealOnSuccess);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + -0x4);
    patch_32r(code + 0x41, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x47, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BUILD_MAP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_MAP.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 20                   subq    $0x20, %rsp
    // 8: 4c 89 75 e8                   movq    %r14, -0x18(%rbp)
    // c: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // 13: 44 0f b7 f8                   movzwl  %ax, %r15d
    // 17: 45 01 ff                      addl    %r15d, %r15d
    // 1a: 44 89 f9                      movl    %r15d, %ecx
    // 1d: f7 d9                         negl    %ecx
    // 1f: 48 63 c9                      movslq  %ecx, %rcx
    // 22: 48 8d 1c cd 00 00 00 00       leaq    (,%rcx,8), %rbx
    // 2a: 4c 01 eb                      addq    %r13, %rbx
    // 2d: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 32: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // 36: 49 8d 54 cd 08                leaq    0x8(%r13,%rcx,8), %rdx
    // 3b: 44 0f b7 e8                   movzwl  %ax, %r13d
    // 3f: be 02 00 00 00                movl    $0x2, %esi
    // 44: b9 02 00 00 00                movl    $0x2, %ecx
    // 49: 48 89 df                      movq    %rbx, %rdi
    // 4c: 4d 89 e8                      movq    %r13, %r8
    // 4f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x55 <__JIT_ENTRY+0x55>
    // 0000000000000051:  X86_64_RELOC_GOT     __PyDict_FromItems@GOTPCREL
    // 55: 48 89 45 e0                   movq    %rax, -0x20(%rbp)
    // 59: 49 8b 44 24 40                movq    0x40(%r12), %rax
    // 5e: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 62: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 6b: 66 45 85 ed                   testw   %r13w, %r13w
    // 6f: 74 3e                         je      0xaf <__JIT_ENTRY+0xaf>
    // 71: 4e 8d 2c 6d 01 00 00 00       leaq    0x1(,%r13,2), %r13
    // 79: 4c 8b 35 00 00 00 00          movq    (%rip), %r14            ## 0x80 <__JIT_ENTRY+0x80>
    // 000000000000007c:  X86_64_RELOC_GOT_LOAD        __Py_Dealloc@GOTPCREL
    // 80: eb 17                         jmp     0x99 <__JIT_ENTRY+0x99>
    // 82: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
    // 90: 49 ff cd                      decq    %r13
    // 93: 49 83 fd 01                   cmpq    $0x1, %r13
    // 97: 76 16                         jbe     0xaf <__JIT_ENTRY+0xaf>
    // 99: 4a 8b 7c eb f0                movq    -0x10(%rbx,%r13,8), %rdi
    // 9e: 8b 07                         movl    (%rdi), %eax
    // a0: 85 c0                         testl   %eax, %eax
    // a2: 78 ec                         js      0x90 <__JIT_ENTRY+0x90>
    // a4: ff c8                         decl    %eax
    // a6: 89 07                         movl    %eax, (%rdi)
    // a8: 75 e6                         jne     0x90 <__JIT_ENTRY+0x90>
    // aa: 41 ff d6                      callq   *%r14
    // ad: eb e1                         jmp     0x90 <__JIT_ENTRY+0x90>
    // af: 48 8b 55 e0                   movq    -0x20(%rbp), %rdx
    // b3: 48 85 d2                      testq   %rdx, %rdx
    // b6: 74 28                         je      0xe0 <__JIT_ENTRY+0xe0>
    // b8: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // bc: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // c0: 48 89 14 c1                   movq    %rdx, (%rcx,%rax,8)
    // c4: b8 01 00 00 00                movl    $0x1, %eax
    // c9: 44 29 f8                      subl    %r15d, %eax
    // cc: 48 98                         cltq
    // ce: 4c 8d 2c c1                   leaq    (%rcx,%rax,8), %r13
    // d2: 4c 8b 75 e8                   movq    -0x18(%rbp), %r14
    // d6: 48 83 c4 20                   addq    $0x20, %rsp
    // da: 5d                            popq    %rbp
    // db: e9 00 00 00 00                jmp     0xe0 <__JIT_ENTRY+0xe0>
    // 00000000000000dc:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // e0: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // e4: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // e8: 4c 8d 2c c1                   leaq    (%rcx,%rax,8), %r13
    // ec: 4c 8b 75 e8                   movq    -0x18(%rbp), %r14
    // f0: 48 83 c4 20                   addq    $0x20, %rsp
    // f4: 5d                            popq    %rbp
    // f5: e9 00 00 00 00                jmp     0xfa <__JIT_ENTRY+0xfa>
    // 00000000000000f6:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[250] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x20,
        0x4c, 0x89, 0x75, 0xe8, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x45,
        0x01, 0xff, 0x44, 0x89, 0xf9, 0xf7, 0xd9, 0x48,
        0x63, 0xc9, 0x48, 0x8d, 0x1c, 0xcd, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x01, 0xeb, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x48, 0x89, 0x4d, 0xf0, 0x49, 0x8d,
        0x54, 0xcd, 0x08, 0x44, 0x0f, 0xb7, 0xe8, 0xbe,
        0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xdf, 0x4d, 0x89, 0xe8, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x45,
        0xe0, 0x49, 0x8b, 0x44, 0x24, 0x40, 0x48, 0x89,
        0x45, 0xf8, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x66, 0x45, 0x85, 0xed, 0x74,
        0x3e, 0x4e, 0x8d, 0x2c, 0x6d, 0x01, 0x00, 0x00,
        0x00, 0x4c, 0x8b, 0x35, 0x00, 0x00, 0x00, 0x00,
        0xeb, 0x17, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x76,
        0x16, 0x4a, 0x8b, 0x7c, 0xeb, 0xf0, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0xec, 0xff, 0xc8, 0x89, 0x07,
        0x75, 0xe6, 0x41, 0xff, 0xd6, 0xeb, 0xe1, 0x48,
        0x8b, 0x55, 0xe0, 0x48, 0x85, 0xd2, 0x74, 0x28,
        0x48, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x4d, 0xf8,
        0x48, 0x89, 0x14, 0xc1, 0xb8, 0x01, 0x00, 0x00,
        0x00, 0x44, 0x29, 0xf8, 0x48, 0x98, 0x4c, 0x8d,
        0x2c, 0xc1, 0x4c, 0x8b, 0x75, 0xe8, 0x48, 0x83,
        0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x4d, 0xf8,
        0x4c, 0x8d, 0x2c, 0xc1, 0x4c, 0x8b, 0x75, 0xe8,
        0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyDict_FromItems+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyDict_FromItems);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x7c, (uintptr_t)data + -0x4);
    patch_32r(code + 0xdc, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0xf6, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BUILD_SET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_SET.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 20                   subq    $0x20, %rsp
    // 8: 4c 8b 3d 00 00 00 00          movq    (%rip), %r15            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // f: 41 0f b7 df                   movzwl  %r15w, %ebx
    // 13: 48 f7 db                      negq    %rbx
    // 16: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 1b: 31 ff                         xorl    %edi, %edi
    // 1d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x23 <__JIT_ENTRY+0x23>
    // 000000000000001f:  X86_64_RELOC_GOT     _PySet_New@GOTPCREL
    // 23: 49 8b 54 24 40                movq    0x40(%r12), %rdx
    // 28: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 31: 48 85 c0                      testq   %rax, %rax
    // 34: 0f 84 e7 00 00 00             je      0x121 <__JIT_ENTRY+0x121>
    // 3a: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x41 <__JIT_ENTRY+0x41>
    // 000000000000003d:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // 41: 66 85 c9                      testw   %cx, %cx
    // 44: 0f 84 58 01 00 00             je      0x1a2 <__JIT_ENTRY+0x1a2>
    // 4a: 4c 89 75 e8                   movq    %r14, -0x18(%rbp)
    // 4e: 45 31 ff                      xorl    %r15d, %r15d
    // 51: 48 89 5d f0                   movq    %rbx, -0x10(%rbp)
    // 55: 49 89 c6                      movq    %rax, %r14
    // 58: eb 0b                         jmp     0x65 <__JIT_ENTRY+0x65>
    // 5a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
    // 60: 48 ff c3                      incq    %rbx
    // 63: 74 2b                         je      0x90 <__JIT_ENTRY+0x90>
    // 65: 45 85 ff                      testl   %r15d, %r15d
    // 68: 75 f6                         jne     0x60 <__JIT_ENTRY+0x60>
    // 6a: 49 89 54 24 40                movq    %rdx, 0x40(%r12)
    // 6f: 49 8b 74 dd 00                movq    (%r13,%rbx,8), %rsi
    // 74: 4c 89 f7                      movq    %r14, %rdi
    // 77: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x7d <__JIT_ENTRY+0x7d>
    // 0000000000000079:  X86_64_RELOC_GOT     _PySet_Add@GOTPCREL
    // 7d: 41 89 c7                      movl    %eax, %r15d
    // 80: 49 8b 54 24 40                movq    0x40(%r12), %rdx
    // 85: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 8e: eb d0                         jmp     0x60 <__JIT_ENTRY+0x60>
    // 90: 48 89 55 f8                   movq    %rdx, -0x8(%rbp)
    // 94: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x9b <__JIT_ENTRY+0x9b>
    // 0000000000000097:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // 9b: 66 85 c0                      testw   %ax, %ax
    // 9e: 74 35                         je      0xd5 <__JIT_ENTRY+0xd5>
    // a0: 0f b7 1d 00 00 00 00          movzwl  (%rip), %ebx            ## 0xa7 <__JIT_ENTRY+0xa7>
    // 00000000000000a3:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // a7: 48 ff c3                      incq    %rbx
    // aa: 49 83 c5 f8                   addq    $-0x8, %r13
    // ae: eb 0d                         jmp     0xbd <__JIT_ENTRY+0xbd>
    // b0: 48 ff cb                      decq    %rbx
    // b3: 49 83 c5 f8                   addq    $-0x8, %r13
    // b7: 48 83 fb 01                   cmpq    $0x1, %rbx
    // bb: 76 18                         jbe     0xd5 <__JIT_ENTRY+0xd5>
    // bd: 49 8b 7d 00                   movq    (%r13), %rdi
    // c1: 8b 07                         movl    (%rdi), %eax
    // c3: 85 c0                         testl   %eax, %eax
    // c5: 78 e9                         js      0xb0 <__JIT_ENTRY+0xb0>
    // c7: ff c8                         decl    %eax
    // c9: 89 07                         movl    %eax, (%rdi)
    // cb: 75 e3                         jne     0xb0 <__JIT_ENTRY+0xb0>
    // cd: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xd3 <__JIT_ENTRY+0xd3>
    // 00000000000000cf:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // d3: eb db                         jmp     0xb0 <__JIT_ENTRY+0xb0>
    // d5: 45 85 ff                      testl   %r15d, %r15d
    // d8: 0f 84 ae 00 00 00             je      0x18c <__JIT_ENTRY+0x18c>
    // de: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // e2: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // e6: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
    // ea: 49 89 44 24 40                movq    %rax, 0x40(%r12)
    // ef: 4c 89 f7                      movq    %r14, %rdi
    // f2: 41 8b 06                      movl    (%r14), %eax
    // f5: 85 c0                         testl   %eax, %eax
    // f7: 4c 8b 75 e8                   movq    -0x18(%rbp), %r14
    // fb: 78 0c                         js      0x109 <__JIT_ENTRY+0x109>
    // fd: ff c8                         decl    %eax
    // ff: 89 07                         movl    %eax, (%rdi)
    // 101: 75 06                         jne     0x109 <__JIT_ENTRY+0x109>
    // 103: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x109 <__JIT_ENTRY+0x109>
    // 0000000000000105:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 109: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 10e: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 117: 48 83 c4 20                   addq    $0x20, %rsp
    // 11b: 5d                            popq    %rbp
    // 11c: e9 00 00 00 00                jmp     0x121 <__JIT_ENTRY+0x121>
    // 000000000000011d:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 121: 48 89 55 f8                   movq    %rdx, -0x8(%rbp)
    // 125: 48 89 5d f0                   movq    %rbx, -0x10(%rbp)
    // 129: 4c 89 75 e8                   movq    %r14, -0x18(%rbp)
    // 12d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x134 <__JIT_ENTRY+0x134>
    // 0000000000000130:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // 134: 66 85 c0                      testw   %ax, %ax
    // 137: 74 39                         je      0x172 <__JIT_ENTRY+0x172>
    // 139: 0f b7 1d 00 00 00 00          movzwl  (%rip), %ebx            ## 0x140 <__JIT_ENTRY+0x140>
    // 000000000000013c:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 140: 48 ff c3                      incq    %rbx
    // 143: 49 83 c5 f8                   addq    $-0x8, %r13
    // 147: 4c 8b 3d 00 00 00 00          movq    (%rip), %r15            ## 0x14e <__JIT_ENTRY+0x14e>
    // 000000000000014a:  X86_64_RELOC_GOT_LOAD        __Py_Dealloc@GOTPCREL
    // 14e: eb 0d                         jmp     0x15d <__JIT_ENTRY+0x15d>
    // 150: 48 ff cb                      decq    %rbx
    // 153: 49 83 c5 f8                   addq    $-0x8, %r13
    // 157: 48 83 fb 01                   cmpq    $0x1, %rbx
    // 15b: 76 15                         jbe     0x172 <__JIT_ENTRY+0x172>
    // 15d: 49 8b 7d 00                   movq    (%r13), %rdi
    // 161: 8b 07                         movl    (%rdi), %eax
    // 163: 85 c0                         testl   %eax, %eax
    // 165: 78 e9                         js      0x150 <__JIT_ENTRY+0x150>
    // 167: ff c8                         decl    %eax
    // 169: 89 07                         movl    %eax, (%rdi)
    // 16b: 75 e3                         jne     0x150 <__JIT_ENTRY+0x150>
    // 16d: 41 ff d7                      callq   *%r15
    // 170: eb de                         jmp     0x150 <__JIT_ENTRY+0x150>
    // 172: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // 176: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // 17a: 4c 8d 2c c1                   leaq    (%rcx,%rax,8), %r13
    // 17e: 4c 8b 75 e8                   movq    -0x18(%rbp), %r14
    // 182: 48 83 c4 20                   addq    $0x20, %rsp
    // 186: 5d                            popq    %rbp
    // 187: e9 00 00 00 00                jmp     0x18c <__JIT_ENTRY+0x18c>
    // 0000000000000188:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 18c: 48 8b 5d f0                   movq    -0x10(%rbp), %rbx
    // 190: 48 8b 55 f8                   movq    -0x8(%rbp), %rdx
    // 194: 4c 89 f0                      movq    %r14, %rax
    // 197: 4c 8b 75 e8                   movq    -0x18(%rbp), %r14
    // 19b: 4c 8b 3d 00 00 00 00          movq    (%rip), %r15            ## 0x1a2 <__JIT_ENTRY+0x1a2>
    // 000000000000019e:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // 1a2: 41 0f b7 f7                   movzwl  %r15w, %esi
    // 1a6: 48 89 04 da                   movq    %rax, (%rdx,%rbx,8)
    // 1aa: b9 01 00 00 00                movl    $0x1, %ecx
    // 1af: 29 f1                         subl    %esi, %ecx
    // 1b1: 48 63 c1                      movslq  %ecx, %rax
    // 1b4: 4c 8d 2c c2                   leaq    (%rdx,%rax,8), %r13
    // 1b8: 48 83 c4 20                   addq    $0x20, %rsp
    // 1bc: 5d                            popq    %rbp
    // 1bd: e9 00 00 00 00                jmp     0x1c2 <__JIT_ENTRY+0x1c2>
    // 00000000000001be:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[445] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x20,
        0x4c, 0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x41,
        0x0f, 0xb7, 0xdf, 0x48, 0xf7, 0xdb, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x31, 0xff, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x54, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x66, 0x85, 0xc9, 0x0f, 0x84, 0x58, 0x01,
        0x00, 0x00, 0x4c, 0x89, 0x75, 0xe8, 0x45, 0x31,
        0xff, 0x48, 0x89, 0x5d, 0xf0, 0x49, 0x89, 0xc6,
        0xeb, 0x0b, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00,
        0x48, 0xff, 0xc3, 0x74, 0x2b, 0x45, 0x85, 0xff,
        0x75, 0xf6, 0x49, 0x89, 0x54, 0x24, 0x40, 0x49,
        0x8b, 0x74, 0xdd, 0x00, 0x4c, 0x89, 0xf7, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x41, 0x89, 0xc7,
        0x49, 0x8b, 0x54, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0xeb, 0xd0,
        0x48, 0x89, 0x55, 0xf8, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x35,
        0x0f, 0xb7, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0xff, 0xc3, 0x49, 0x83, 0xc5, 0xf8, 0xeb, 0x0d,
        0x48, 0xff, 0xcb, 0x49, 0x83, 0xc5, 0xf8, 0x48,
        0x83, 0xfb, 0x01, 0x76, 0x18, 0x49, 0x8b, 0x7d,
        0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xe9, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0xe3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0xdb, 0x45, 0x85, 0xff,
        0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x45, 0xf0, 0x48, 0x8b, 0x4d, 0xf8, 0x48, 0x8d,
        0x04, 0xc1, 0x49, 0x89, 0x44, 0x24, 0x40, 0x4c,
        0x89, 0xf7, 0x41, 0x8b, 0x06, 0x85, 0xc0, 0x4c,
        0x8b, 0x75, 0xe8, 0x78, 0x0c, 0xff, 0xc8, 0x89,
        0x07, 0x75, 0x06, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0x55, 0xf8, 0x48, 0x89, 0x5d,
        0xf0, 0x4c, 0x89, 0x75, 0xe8, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74,
        0x39, 0x0f, 0xb7, 0x1d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0xc3, 0x49, 0x83, 0xc5, 0xf8, 0x4c,
        0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0d,
        0x48, 0xff, 0xcb, 0x49, 0x83, 0xc5, 0xf8, 0x48,
        0x83, 0xfb, 0x01, 0x76, 0x15, 0x49, 0x8b, 0x7d,
        0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xe9, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0xe3, 0x41, 0xff, 0xd7,
        0xeb, 0xde, 0x48, 0x8b, 0x45, 0xf0, 0x48, 0x8b,
        0x4d, 0xf8, 0x4c, 0x8d, 0x2c, 0xc1, 0x4c, 0x8b,
        0x75, 0xe8, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x5d, 0xf0,
        0x48, 0x8b, 0x55, 0xf8, 0x4c, 0x89, 0xf0, 0x4c,
        0x8b, 0x75, 0xe8, 0x4c, 0x8b, 0x3d, 0x00, 0x00,
        0x00, 0x00, 0x41, 0x0f, 0xb7, 0xf7, 0x48, 0x89,
        0x04, 0xda, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29,
        0xf1, 0x48, 0x63, 0xc1, 0x4c, 0x8d, 0x2c, 0xc2,
        0x48, 0x83, 0xc4, 0x20, 0x5d,
    };
    // 0: OPARG
    // 8: &_Py_Dealloc+0x0
    // 10: &PySet_Add+0x0
    // 18: &PySet_New+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)&PySet_Add);
    patch_64(data + 0x18, (uintptr_t)&PySet_New);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x3d, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x79, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x97, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xa3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xcf, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x105, (uintptr_t)data + 0x4);
    patch_32r(code + 0x11d, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x130, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x13c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x14a, (uintptr_t)data + 0x4);
    patch_32r(code + 0x188, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x19e, (uintptr_t)data + -0x4);
}

void
emit__BUILD_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_SLICE.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 20                   subq    $0x20, %rsp
    // 8: 4c 89 eb                      movq    %r13, %rbx
    // b: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x12 <__JIT_ENTRY+0x12>
    // 000000000000000e:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // 12: 0f b7 d0                      movzwl  %ax, %edx
    // 15: 8d 0c d5 00 00 00 00          leal    (,%rdx,8), %ecx
    // 1c: 4c 89 6d e8                   movq    %r13, -0x18(%rbp)
    // 20: 48 29 cb                      subq    %rcx, %rbx
    // 23: 48 8b 3b                      movq    (%rbx), %rdi
    // 26: 48 8b 73 08                   movq    0x8(%rbx), %rsi
    // 2a: 66 83 f8 03                   cmpw    $0x3, %ax
    // 2e: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // 32: 4c 89 65 f8                   movq    %r12, -0x8(%rbp)
    // 36: 48 89 55 e0                   movq    %rdx, -0x20(%rbp)
    // 3a: 75 06                         jne     0x42 <__JIT_ENTRY+0x42>
    // 3c: 48 8b 53 10                   movq    0x10(%rbx), %rdx
    // 40: eb 02                         jmp     0x44 <__JIT_ENTRY+0x44>
    // 42: 31 d2                         xorl    %edx, %edx
    // 44: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4a <__JIT_ENTRY+0x4a>
    // 0000000000000046:  X86_64_RELOC_GOT     _PySlice_New@GOTPCREL
    // 4a: 49 89 c5                      movq    %rax, %r13
    // 4d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x54 <__JIT_ENTRY+0x54>
    // 0000000000000050:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // 54: 66 85 c0                      testw   %ax, %ax
    // 57: 74 49                         je      0xa2 <__JIT_ENTRY+0xa2>
    // 59: 44 0f b7 35 00 00 00 00       movzwl  (%rip), %r14d           ## 0x61 <__JIT_ENTRY+0x61>
    // 000000000000005d:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 61: 49 ff c6                      incq    %r14
    // 64: 48 8b 45 e8                   movq    -0x18(%rbp), %rax
    // 68: 4c 8d 60 f8                   leaq    -0x8(%rax), %r12
    // 6c: 4c 8b 3d 00 00 00 00          movq    (%rip), %r15            ## 0x73 <__JIT_ENTRY+0x73>
    // 000000000000006f:  X86_64_RELOC_GOT_LOAD        __Py_Dealloc@GOTPCREL
    // 73: eb 18                         jmp     0x8d <__JIT_ENTRY+0x8d>
    // 75: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
    // 80: 49 ff ce                      decq    %r14
    // 83: 49 83 c4 f8                   addq    $-0x8, %r12
    // 87: 49 83 fe 01                   cmpq    $0x1, %r14
    // 8b: 76 15                         jbe     0xa2 <__JIT_ENTRY+0xa2>
    // 8d: 49 8b 3c 24                   movq    (%r12), %rdi
    // 91: 8b 07                         movl    (%rdi), %eax
    // 93: 85 c0                         testl   %eax, %eax
    // 95: 78 e9                         js      0x80 <__JIT_ENTRY+0x80>
    // 97: ff c8                         decl    %eax
    // 99: 89 07                         movl    %eax, (%rdi)
    // 9b: 75 e3                         jne     0x80 <__JIT_ENTRY+0x80>
    // 9d: 41 ff d7                      callq   *%r15
    // a0: eb de                         jmp     0x80 <__JIT_ENTRY+0x80>
    // a2: 4d 85 ed                      testq   %r13, %r13
    // a5: 74 27                         je      0xce <__JIT_ENTRY+0xce>
    // a7: 4c 89 2b                      movq    %r13, (%rbx)
    // aa: b8 01 00 00 00                movl    $0x1, %eax
    // af: 2b 45 e0                      subl    -0x20(%rbp), %eax
    // b2: 48 98                         cltq
    // b4: 48 8b 4d e8                   movq    -0x18(%rbp), %rcx
    // b8: 4c 8d 2c c1                   leaq    (%rcx,%rax,8), %r13
    // bc: 4c 8b 65 f8                   movq    -0x8(%rbp), %r12
    // c0: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // c4: 48 83 c4 20                   addq    $0x20, %rsp
    // c8: 5d                            popq    %rbp
    // c9: e9 00 00 00 00                jmp     0xce <__JIT_ENTRY+0xce>
    // 00000000000000ca:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // ce: 4c 8b 65 f8                   movq    -0x8(%rbp), %r12
    // d2: 49 89 dd                      movq    %rbx, %r13
    // d5: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // d9: 48 83 c4 20                   addq    $0x20, %rsp
    // dd: 5d                            popq    %rbp
    // de: e9 00 00 00 00                jmp     0xe3 <__JIT_ENTRY+0xe3>
    // 00000000000000df:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[227] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x20,
        0x4c, 0x89, 0xeb, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x8d, 0x0c, 0xd5,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x6d, 0xe8,
        0x48, 0x29, 0xcb, 0x48, 0x8b, 0x3b, 0x48, 0x8b,
        0x73, 0x08, 0x66, 0x83, 0xf8, 0x03, 0x4c, 0x89,
        0x75, 0xf0, 0x4c, 0x89, 0x65, 0xf8, 0x48, 0x89,
        0x55, 0xe0, 0x75, 0x06, 0x48, 0x8b, 0x53, 0x10,
        0xeb, 0x02, 0x31, 0xd2, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74,
        0x49, 0x44, 0x0f, 0xb7, 0x35, 0x00, 0x00, 0x00,
        0x00, 0x49, 0xff, 0xc6, 0x48, 0x8b, 0x45, 0xe8,
        0x4c, 0x8d, 0x60, 0xf8, 0x4c, 0x8b, 0x3d, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0x18, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xce, 0x49, 0x83, 0xc4, 0xf8, 0x49,
        0x83, 0xfe, 0x01, 0x76, 0x15, 0x49, 0x8b, 0x3c,
        0x24, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xe9, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0xe3, 0x41, 0xff, 0xd7,
        0xeb, 0xde, 0x4d, 0x85, 0xed, 0x74, 0x27, 0x4c,
        0x89, 0x2b, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x2b,
        0x45, 0xe0, 0x48, 0x98, 0x48, 0x8b, 0x4d, 0xe8,
        0x4c, 0x8d, 0x2c, 0xc1, 0x4c, 0x8b, 0x65, 0xf8,
        0x4c, 0x8b, 0x75, 0xf0, 0x48, 0x83, 0xc4, 0x20,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b,
        0x65, 0xf8, 0x49, 0x89, 0xdd, 0x4c, 0x8b, 0x75,
        0xf0, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    // 10: &PySlice_New+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&PySlice_New);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xe, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x6f, (uintptr_t)data + -0x4);
    patch_32r(code + 0xca, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0xdf, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BUILD_STRING(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_STRING.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 20                   subq    $0x20, %rsp
    // 8: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // c: 4c 89 eb                      movq    %r13, %rbx
    // f: 4c 89 65 f8                   movq    %r12, -0x8(%rbp)
    // 13: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x1a <__JIT_ENTRY+0x1a>
    // 0000000000000016:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // 1a: 44 0f b7 f8                   movzwl  %ax, %r15d
    // 1e: 42 8d 04 fd 00 00 00 00       leal    (,%r15,8), %eax
    // 26: 4c 89 6d e8                   movq    %r13, -0x18(%rbp)
    // 2a: 48 29 c3                      subq    %rax, %rbx
    // 2d: bf e0 87 00 00                movl    $0x87e0, %edi           ## imm = 0x87E0
    // 32: 48 03 3d 00 00 00 00          addq    (%rip), %rdi            ## 0x39 <__JIT_ENTRY+0x39>
    // 0000000000000035:  X86_64_RELOC_GOT     __PyRuntime@GOTPCREL
    // 39: 48 89 de                      movq    %rbx, %rsi
    // 3c: 4c 89 fa                      movq    %r15, %rdx
    // 3f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x45 <__JIT_ENTRY+0x45>
    // 0000000000000041:  X86_64_RELOC_GOT     __PyUnicode_JoinArray@GOTPCREL
    // 45: 49 89 c5                      movq    %rax, %r13
    // 48: 66 45 85 ff                   testw   %r15w, %r15w
    // 4c: 74 43                         je      0x91 <__JIT_ENTRY+0x91>
    // 4e: 49 ff c7                      incq    %r15
    // 51: 48 8b 45 e8                   movq    -0x18(%rbp), %rax
    // 55: 4c 8d 70 f8                   leaq    -0x8(%rax), %r14
    // 59: 4c 8b 25 00 00 00 00          movq    (%rip), %r12            ## 0x60 <__JIT_ENTRY+0x60>
    // 000000000000005c:  X86_64_RELOC_GOT_LOAD        __Py_Dealloc@GOTPCREL
    // 60: eb 1b                         jmp     0x7d <__JIT_ENTRY+0x7d>
    // 62: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
    // 70: 49 ff cf                      decq    %r15
    // 73: 49 83 c6 f8                   addq    $-0x8, %r14
    // 77: 49 83 ff 01                   cmpq    $0x1, %r15
    // 7b: 76 14                         jbe     0x91 <__JIT_ENTRY+0x91>
    // 7d: 49 8b 3e                      movq    (%r14), %rdi
    // 80: 8b 07                         movl    (%rdi), %eax
    // 82: 85 c0                         testl   %eax, %eax
    // 84: 78 ea                         js      0x70 <__JIT_ENTRY+0x70>
    // 86: ff c8                         decl    %eax
    // 88: 89 07                         movl    %eax, (%rdi)
    // 8a: 75 e4                         jne     0x70 <__JIT_ENTRY+0x70>
    // 8c: 41 ff d4                      callq   *%r12
    // 8f: eb df                         jmp     0x70 <__JIT_ENTRY+0x70>
    // 91: 4d 85 ed                      testq   %r13, %r13
    // 94: 74 31                         je      0xc7 <__JIT_ENTRY+0xc7>
    // 96: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x9d <__JIT_ENTRY+0x9d>
    // 0000000000000099:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // 9d: 0f b7 c0                      movzwl  %ax, %eax
    // a0: 4c 89 2b                      movq    %r13, (%rbx)
    // a3: b9 01 00 00 00                movl    $0x1, %ecx
    // a8: 29 c1                         subl    %eax, %ecx
    // aa: 48 63 c1                      movslq  %ecx, %rax
    // ad: 48 8b 4d e8                   movq    -0x18(%rbp), %rcx
    // b1: 4c 8d 2c c1                   leaq    (%rcx,%rax,8), %r13
    // b5: 4c 8b 65 f8                   movq    -0x8(%rbp), %r12
    // b9: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // bd: 48 83 c4 20                   addq    $0x20, %rsp
    // c1: 5d                            popq    %rbp
    // c2: e9 00 00 00 00                jmp     0xc7 <__JIT_ENTRY+0xc7>
    // 00000000000000c3:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // c7: 4c 8b 65 f8                   movq    -0x8(%rbp), %r12
    // cb: 49 89 dd                      movq    %rbx, %r13
    // ce: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // d2: 48 83 c4 20                   addq    $0x20, %rsp
    // d6: 5d                            popq    %rbp
    // d7: e9 00 00 00 00                jmp     0xdc <__JIT_ENTRY+0xdc>
    // 00000000000000d8:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[220] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x20,
        0x4c, 0x89, 0x75, 0xf0, 0x4c, 0x89, 0xeb, 0x4c,
        0x89, 0x65, 0xf8, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x42, 0x8d,
        0x04, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0x6d, 0xe8, 0x48, 0x29, 0xc3, 0xbf, 0xe0, 0x87,
        0x00, 0x00, 0x48, 0x03, 0x3d, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5,
        0x66, 0x45, 0x85, 0xff, 0x74, 0x43, 0x49, 0xff,
        0xc7, 0x48, 0x8b, 0x45, 0xe8, 0x4c, 0x8d, 0x70,
        0xf8, 0x4c, 0x8b, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xcf, 0x49, 0x83, 0xc6, 0xf8, 0x49,
        0x83, 0xff, 0x01, 0x76, 0x14, 0x49, 0x8b, 0x3e,
        0x8b, 0x07, 0x85, 0xc0, 0x78, 0xea, 0xff, 0xc8,
        0x89, 0x07, 0x75, 0xe4, 0x41, 0xff, 0xd4, 0xeb,
        0xdf, 0x4d, 0x85, 0xed, 0x74, 0x31, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0,
        0x4c, 0x89, 0x2b, 0xb9, 0x01, 0x00, 0x00, 0x00,
        0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x4d,
        0xe8, 0x4c, 0x8d, 0x2c, 0xc1, 0x4c, 0x8b, 0x65,
        0xf8, 0x4c, 0x8b, 0x75, 0xf0, 0x48, 0x83, 0xc4,
        0x20, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x8b, 0x65, 0xf8, 0x49, 0x89, 0xdd, 0x4c, 0x8b,
        0x75, 0xf0, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_Py_Dealloc+0x0
    // 10: &_PyUnicode_JoinArray+0x0
    // 18: &_PyRuntime+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)&_PyUnicode_JoinArray);
    patch_64(data + 0x18, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x35, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x99, (uintptr_t)data + -0x4);
    patch_32r(code + 0xc3, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0xd8, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__BUILD_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _BUILD_TUPLE.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 4c 8b 3d 00 00 00 00          movq    (%rip), %r15            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // b: 41 0f b7 f7                   movzwl  %r15w, %esi
    // f: 8d 04 f5 00 00 00 00          leal    (,%rsi,8), %eax
    // 16: 4c 89 eb                      movq    %r13, %rbx
    // 19: 48 29 c3                      subq    %rax, %rbx
    // 1c: 48 89 df                      movq    %rbx, %rdi
    // 1f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_GOT     __PyTuple_FromStackRefStealOnSuccess@GOTPCREL
    // 25: 48 85 c0                      testq   %rax, %rax
    // 28: 74 1b                         je      0x45 <__JIT_ENTRY+0x45>
    // 2a: 41 0f b7 cf                   movzwl  %r15w, %ecx
    // 2e: 48 89 03                      movq    %rax, (%rbx)
    // 31: b8 01 00 00 00                movl    $0x1, %eax
    // 36: 29 c8                         subl    %ecx, %eax
    // 38: 48 98                         cltq
    // 3a: 4d 8d 6c c5 00                leaq    (%r13,%rax,8), %r13
    // 3f: 5d                            popq    %rbp
    // 40: e9 00 00 00 00                jmp     0x45 <__JIT_ENTRY+0x45>
    // 0000000000000041:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 45: 5d                            popq    %rbp
    // 46: e9 00 00 00 00                jmp     0x4b <__JIT_ENTRY+0x4b>
    // 0000000000000047:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[75] = {
        0x55, 0x48, 0x89, 0xe5, 0x4c, 0x8b, 0x3d, 0x00,
        0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xf7, 0x8d,
        0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xeb, 0x48, 0x29, 0xc3, 0x48, 0x89, 0xdf, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x1b, 0x41, 0x0f, 0xb7, 0xcf, 0x48, 0x89,
        0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8,
        0x48, 0x98, 0x4d, 0x8d, 0x6c, 0xc5, 0x00, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_PyTuple_FromStackRefStealOnSuccess+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyTuple_FromStackRefStealOnSuccess);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + -0x4);
    patch_32r(code + 0x41, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x47, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_BUILTIN_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_BUILTIN_CLASS.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 20                   subq    $0x20, %rsp
    // 8: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // f: b8 fe ff ff ff                movl    $0xfffffffe, %eax       ## imm = 0xFFFFFFFE
    // 14: 29 c8                         subl    %ecx, %eax
    // 16: 4c 63 f8                      movslq  %eax, %r15
    // 19: 4b 8b 7c fd 00                movq    (%r13,%r15,8), %rdi
    // 1e: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 22: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
    // 29: 0f 84 e3 00 00 00             je      0x112 <__JIT_ENTRY+0x112>
    // 2f: 48 8b 87 90 01 00 00          movq    0x190(%rdi), %rax
    // 36: 48 85 c0                      testq   %rax, %rax
    // 39: 0f 84 d3 00 00 00             je      0x112 <__JIT_ENTRY+0x112>
    // 3f: 8d 14 cd 00 00 00 00          leal    (,%rcx,8), %edx
    // 46: 4c 89 ee                      movq    %r13, %rsi
    // 49: 48 29 d6                      subq    %rdx, %rsi
    // 4c: 89 ca                         movl    %ecx, %edx
    // 4e: f7 d2                         notl    %edx
    // 50: 48 63 da                      movslq  %edx, %rbx
    // 53: 45 31 c0                      xorl    %r8d, %r8d
    // 56: 31 d2                         xorl    %edx, %edx
    // 58: 49 83 7c dd 00 00             cmpq    $0x0, (%r13,%rbx,8)
    // 5e: 41 0f 94 c0                   sete    %r8b
    // 62: 0f 95 c2                      setne   %dl
    // 65: 01 ca                         addl    %ecx, %edx
    // 67: 4a 8d 34 c6                   leaq    (%rsi,%r8,8), %rsi
    // 6b: 48 83 c6 f8                   addq    $-0x8, %rsi
    // 6f: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 74: 31 c9                         xorl    %ecx, %ecx
    // 76: ff d0                         callq   *%rax
    // 78: 48 89 45 e0                   movq    %rax, -0x20(%rbp)
    // 7c: 49 8b 44 24 40                movq    0x40(%r12), %rax
    // 81: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 85: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 8e: 4b 8b 7c fd 00                movq    (%r13,%r15,8), %rdi
    // 93: 8b 07                         movl    (%rdi), %eax
    // 95: 85 c0                         testl   %eax, %eax
    // 97: 78 0c                         js      0xa5 <__JIT_ENTRY+0xa5>
    // 99: ff c8                         decl    %eax
    // 9b: 89 07                         movl    %eax, (%rdi)
    // 9d: 75 06                         jne     0xa5 <__JIT_ENTRY+0xa5>
    // 9f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xa5 <__JIT_ENTRY+0xa5>
    // 00000000000000a1:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // a5: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // a9: 48 89 5d e8                   movq    %rbx, -0x18(%rbp)
    // ad: 49 8b 7c dd 00                movq    (%r13,%rbx,8), %rdi
    // b2: 48 85 ff                      testq   %rdi, %rdi
    // b5: 74 12                         je      0xc9 <__JIT_ENTRY+0xc9>
    // b7: 8b 07                         movl    (%rdi), %eax
    // b9: 85 c0                         testl   %eax, %eax
    // bb: 78 0c                         js      0xc9 <__JIT_ENTRY+0xc9>
    // bd: ff c8                         decl    %eax
    // bf: 89 07                         movl    %eax, (%rdi)
    // c1: 75 06                         jne     0xc9 <__JIT_ENTRY+0xc9>
    // c3: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xc9 <__JIT_ENTRY+0xc9>
    // 00000000000000c5:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // c9: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xd0 <__JIT_ENTRY+0xd0>
    // 00000000000000cc:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // d0: 66 85 c0                      testw   %ax, %ax
    // d3: 74 47                         je      0x11c <__JIT_ENTRY+0x11c>
    // d5: 0f b7 1d 00 00 00 00          movzwl  (%rip), %ebx            ## 0xdc <__JIT_ENTRY+0xdc>
    // 00000000000000d8:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // dc: 48 ff c3                      incq    %rbx
    // df: 49 83 c5 f8                   addq    $-0x8, %r13
    // e3: 4c 8b 35 00 00 00 00          movq    (%rip), %r14            ## 0xea <__JIT_ENTRY+0xea>
    // 00000000000000e6:  X86_64_RELOC_GOT_LOAD        __Py_Dealloc@GOTPCREL
    // ea: eb 11                         jmp     0xfd <__JIT_ENTRY+0xfd>
    // ec: 0f 1f 40 00                   nopl    (%rax)
    // f0: 48 ff cb                      decq    %rbx
    // f3: 49 83 c5 f8                   addq    $-0x8, %r13
    // f7: 48 83 fb 01                   cmpq    $0x1, %rbx
    // fb: 76 1f                         jbe     0x11c <__JIT_ENTRY+0x11c>
    // fd: 49 8b 7d 00                   movq    (%r13), %rdi
    // 101: 8b 07                         movl    (%rdi), %eax
    // 103: 85 c0                         testl   %eax, %eax
    // 105: 78 e9                         js      0xf0 <__JIT_ENTRY+0xf0>
    // 107: ff c8                         decl    %eax
    // 109: 89 07                         movl    %eax, (%rdi)
    // 10b: 75 e3                         jne     0xf0 <__JIT_ENTRY+0xf0>
    // 10d: 41 ff d6                      callq   *%r14
    // 110: eb de                         jmp     0xf0 <__JIT_ENTRY+0xf0>
    // 112: 48 83 c4 20                   addq    $0x20, %rsp
    // 116: 5d                            popq    %rbp
    // 117: e9 00 00 00 00                jmp     0x11c <__JIT_ENTRY+0x11c>
    // 0000000000000118:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 11c: 48 8b 45 e0                   movq    -0x20(%rbp), %rax
    // 120: 48 85 c0                      testq   %rax, %rax
    // 123: 74 1e                         je      0x143 <__JIT_ENTRY+0x143>
    // 125: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // 129: 4a 89 04 f9                   movq    %rax, (%rcx,%r15,8)
    // 12d: 48 8b 45 e8                   movq    -0x18(%rbp), %rax
    // 131: 4c 8d 2c c1                   leaq    (%rcx,%rax,8), %r13
    // 135: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 139: 48 83 c4 20                   addq    $0x20, %rsp
    // 13d: 5d                            popq    %rbp
    // 13e: e9 00 00 00 00                jmp     0x143 <__JIT_ENTRY+0x143>
    // 000000000000013f:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 143: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 147: 4e 8d 2c f8                   leaq    (%rax,%r15,8), %r13
    // 14b: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 14f: 48 83 c4 20                   addq    $0x20, %rsp
    // 153: 5d                            popq    %rbp
    // 154: e9 00 00 00 00                jmp     0x159 <__JIT_ENTRY+0x159>
    // 0000000000000155:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[345] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x20,
        0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0xb8,
        0xfe, 0xff, 0xff, 0xff, 0x29, 0xc8, 0x4c, 0x63,
        0xf8, 0x4b, 0x8b, 0x7c, 0xfd, 0x00, 0x48, 0x8b,
        0x47, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00,
        0x80, 0x0f, 0x84, 0xe3, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x87, 0x90, 0x01, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x0f, 0x84, 0xd3, 0x00, 0x00, 0x00, 0x8d,
        0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xee, 0x48, 0x29, 0xd6, 0x89, 0xca, 0xf7, 0xd2,
        0x48, 0x63, 0xda, 0x45, 0x31, 0xc0, 0x31, 0xd2,
        0x49, 0x83, 0x7c, 0xdd, 0x00, 0x00, 0x41, 0x0f,
        0x94, 0xc0, 0x0f, 0x95, 0xc2, 0x01, 0xca, 0x4a,
        0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x31, 0xc9, 0xff, 0xd0,
        0x48, 0x89, 0x45, 0xe0, 0x49, 0x8b, 0x44, 0x24,
        0x40, 0x48, 0x89, 0x45, 0xf8, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x4b, 0x8b,
        0x7c, 0xfd, 0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x0c, 0xff, 0xc8, 0x89, 0x07, 0x75, 0x06, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x75,
        0xf0, 0x48, 0x89, 0x5d, 0xe8, 0x49, 0x8b, 0x7c,
        0xdd, 0x00, 0x48, 0x85, 0xff, 0x74, 0x12, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xc8, 0x89,
        0x07, 0x75, 0x06, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x66, 0x85, 0xc0, 0x74, 0x47, 0x0f, 0xb7, 0x1d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49,
        0x83, 0xc5, 0xf8, 0x4c, 0x8b, 0x35, 0x00, 0x00,
        0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x40, 0x00,
        0x48, 0xff, 0xcb, 0x49, 0x83, 0xc5, 0xf8, 0x48,
        0x83, 0xfb, 0x01, 0x76, 0x1f, 0x49, 0x8b, 0x7d,
        0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xe9, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0xe3, 0x41, 0xff, 0xd6,
        0xeb, 0xde, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0xe0,
        0x48, 0x85, 0xc0, 0x74, 0x1e, 0x48, 0x8b, 0x4d,
        0xf8, 0x4a, 0x89, 0x04, 0xf9, 0x48, 0x8b, 0x45,
        0xe8, 0x4c, 0x8d, 0x2c, 0xc1, 0x4c, 0x8b, 0x75,
        0xf0, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0xf8, 0x4e,
        0x8d, 0x2c, 0xf8, 0x4c, 0x8b, 0x75, 0xf0, 0x48,
        0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xa1, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xc5, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xcc, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xd8, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xe6, (uintptr_t)data + -0x4);
    patch_32r(code + 0x118, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x13f, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x155, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_BUILTIN_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_BUILTIN_FAST.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 20                   subq    $0x20, %rsp
    // 8: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // f: 89 c1                         movl    %eax, %ecx
    // 11: f7 d1                         notl    %ecx
    // 13: 4c 63 f9                      movslq  %ecx, %r15
    // 16: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       ## imm = 0xFFFFFFFE
    // 1b: 29 c1                         subl    %eax, %ecx
    // 1d: 48 63 d9                      movslq  %ecx, %rbx
    // 20: 49 8b 4c dd 00                movq    (%r13,%rbx,8), %rcx
    // 25: 31 d2                         xorl    %edx, %edx
    // 27: 31 f6                         xorl    %esi, %esi
    // 29: 4b 83 7c fd 00 00             cmpq    $0x0, (%r13,%r15,8)
    // 2f: 40 0f 95 c7                   setne   %dil
    // 33: 41 0f 94 c1                   sete    %r9b
    // 37: 4c 8b 41 08                   movq    0x8(%rcx), %r8
    // 3b: 4c 3b 05 00 00 00 00          cmpq    (%rip), %r8             ## 0x42 <__JIT_ENTRY+0x42>
    // 000000000000003e:  X86_64_RELOC_GOT     _PyCFunction_Type@GOTPCREL
    // 42: 0f 85 dd 00 00 00             jne     0x125 <__JIT_ENTRY+0x125>
    // 48: 4c 8b 41 10                   movq    0x10(%rcx), %r8
    // 4c: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
    // 54: 0f 85 cb 00 00 00             jne     0x125 <__JIT_ENTRY+0x125>
    // 5a: 44 8d 14 c5 00 00 00 00       leal    (,%rax,8), %r10d
    // 62: 4d 89 eb                      movq    %r13, %r11
    // 65: 4d 29 d3                      subq    %r10, %r11
    // 68: 44 88 ce                      movb    %r9b, %sil
    // 6b: 49 8d 34 f3                   leaq    (%r11,%rsi,8), %rsi
    // 6f: 48 83 c6 f8                   addq    $-0x8, %rsi
    // 73: 40 88 fa                      movb    %dil, %dl
    // 76: 01 c2                         addl    %eax, %edx
    // 78: 49 8b 40 08                   movq    0x8(%r8), %rax
    // 7c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 81: 48 8b 79 18                   movq    0x18(%rcx), %rdi
    // 85: 89 d2                         movl    %edx, %edx
    // 87: ff d0                         callq   *%rax
    // 89: 48 89 45 e8                   movq    %rax, -0x18(%rbp)
    // 8d: 49 8b 44 24 40                movq    0x40(%r12), %rax
    // 92: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 96: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 9f: 49 8b 7c dd 00                movq    (%r13,%rbx,8), %rdi
    // a4: 8b 07                         movl    (%rdi), %eax
    // a6: 85 c0                         testl   %eax, %eax
    // a8: 78 0c                         js      0xb6 <__JIT_ENTRY+0xb6>
    // aa: ff c8                         decl    %eax
    // ac: 89 07                         movl    %eax, (%rdi)
    // ae: 75 06                         jne     0xb6 <__JIT_ENTRY+0xb6>
    // b0: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xb6 <__JIT_ENTRY+0xb6>
    // 00000000000000b2:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // b6: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // ba: 4d 89 fe                      movq    %r15, %r14
    // bd: 4b 8b 7c fd 00                movq    (%r13,%r15,8), %rdi
    // c2: 48 85 ff                      testq   %rdi, %rdi
    // c5: 74 12                         je      0xd9 <__JIT_ENTRY+0xd9>
    // c7: 8b 07                         movl    (%rdi), %eax
    // c9: 85 c0                         testl   %eax, %eax
    // cb: 78 0c                         js      0xd9 <__JIT_ENTRY+0xd9>
    // cd: ff c8                         decl    %eax
    // cf: 89 07                         movl    %eax, (%rdi)
    // d1: 75 06                         jne     0xd9 <__JIT_ENTRY+0xd9>
    // d3: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xd9 <__JIT_ENTRY+0xd9>
    // 00000000000000d5:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // d9: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xe0 <__JIT_ENTRY+0xe0>
    // 00000000000000dc:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // e0: 66 85 c0                      testw   %ax, %ax
    // e3: 74 4a                         je      0x12f <__JIT_ENTRY+0x12f>
    // e5: 44 0f b7 3d 00 00 00 00       movzwl  (%rip), %r15d           ## 0xed <__JIT_ENTRY+0xed>
    // 00000000000000e9:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // ed: 49 ff c7                      incq    %r15
    // f0: 49 83 c5 f8                   addq    $-0x8, %r13
    // f4: eb 17                         jmp     0x10d <__JIT_ENTRY+0x10d>
    // f6: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
    // 100: 49 ff cf                      decq    %r15
    // 103: 49 83 c5 f8                   addq    $-0x8, %r13
    // 107: 49 83 ff 01                   cmpq    $0x1, %r15
    // 10b: 76 22                         jbe     0x12f <__JIT_ENTRY+0x12f>
    // 10d: 49 8b 7d 00                   movq    (%r13), %rdi
    // 111: 8b 07                         movl    (%rdi), %eax
    // 113: 85 c0                         testl   %eax, %eax
    // 115: 78 e9                         js      0x100 <__JIT_ENTRY+0x100>
    // 117: ff c8                         decl    %eax
    // 119: 89 07                         movl    %eax, (%rdi)
    // 11b: 75 e3                         jne     0x100 <__JIT_ENTRY+0x100>
    // 11d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x123 <__JIT_ENTRY+0x123>
    // 000000000000011f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 123: eb db                         jmp     0x100 <__JIT_ENTRY+0x100>
    // 125: 48 83 c4 20                   addq    $0x20, %rsp
    // 129: 5d                            popq    %rbp
    // 12a: e9 00 00 00 00                jmp     0x12f <__JIT_ENTRY+0x12f>
    // 000000000000012b:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 12f: 48 8b 4d e8                   movq    -0x18(%rbp), %rcx
    // 133: 48 85 c9                      testq   %rcx, %rcx
    // 136: 74 1a                         je      0x152 <__JIT_ENTRY+0x152>
    // 138: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 13c: 48 89 0c d8                   movq    %rcx, (%rax,%rbx,8)
    // 140: 4e 8d 2c f0                   leaq    (%rax,%r14,8), %r13
    // 144: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 148: 48 83 c4 20                   addq    $0x20, %rsp
    // 14c: 5d                            popq    %rbp
    // 14d: e9 00 00 00 00                jmp     0x152 <__JIT_ENTRY+0x152>
    // 000000000000014e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 152: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 156: 4c 8d 2c d8                   leaq    (%rax,%rbx,8), %r13
    // 15a: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 15e: 48 83 c4 20                   addq    $0x20, %rsp
    // 162: 5d                            popq    %rbp
    // 163: e9 00 00 00 00                jmp     0x168 <__JIT_ENTRY+0x168>
    // 0000000000000164:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[360] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x20,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xc1, 0xf7, 0xd1, 0x4c, 0x63, 0xf9, 0xb9, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xd9,
        0x49, 0x8b, 0x4c, 0xdd, 0x00, 0x31, 0xd2, 0x31,
        0xf6, 0x4b, 0x83, 0x7c, 0xfd, 0x00, 0x00, 0x40,
        0x0f, 0x95, 0xc7, 0x41, 0x0f, 0x94, 0xc1, 0x4c,
        0x8b, 0x41, 0x08, 0x4c, 0x3b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0x85, 0xdd, 0x00, 0x00, 0x00,
        0x4c, 0x8b, 0x41, 0x10, 0x41, 0x81, 0x78, 0x10,
        0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xcb, 0x00,
        0x00, 0x00, 0x44, 0x8d, 0x14, 0xc5, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x89, 0xeb, 0x4d, 0x29, 0xd3,
        0x44, 0x88, 0xce, 0x49, 0x8d, 0x34, 0xf3, 0x48,
        0x83, 0xc6, 0xf8, 0x40, 0x88, 0xfa, 0x01, 0xc2,
        0x49, 0x8b, 0x40, 0x08, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x8b, 0x79, 0x18, 0x89, 0xd2, 0xff,
        0xd0, 0x48, 0x89, 0x45, 0xe8, 0x49, 0x8b, 0x44,
        0x24, 0x40, 0x48, 0x89, 0x45, 0xf8, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x7c, 0xdd, 0x00, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x0c, 0xff, 0xc8, 0x89, 0x07, 0x75, 0x06,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0x75, 0xf0, 0x4d, 0x89, 0xfe, 0x4b, 0x8b, 0x7c,
        0xfd, 0x00, 0x48, 0x85, 0xff, 0x74, 0x12, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xc8, 0x89,
        0x07, 0x75, 0x06, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x66, 0x85, 0xc0, 0x74, 0x4a, 0x44, 0x0f, 0xb7,
        0x3d, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7,
        0x49, 0x83, 0xc5, 0xf8, 0xeb, 0x17, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xcf, 0x49, 0x83, 0xc5, 0xf8, 0x49,
        0x83, 0xff, 0x01, 0x76, 0x22, 0x49, 0x8b, 0x7d,
        0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xe9, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0xe3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0xdb, 0x48, 0x83, 0xc4,
        0x20, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x4d, 0xe8, 0x48, 0x85, 0xc9, 0x74, 0x1a,
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x89, 0x0c, 0xd8,
        0x4e, 0x8d, 0x2c, 0xf0, 0x4c, 0x8b, 0x75, 0xf0,
        0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x45, 0xf8, 0x4c, 0x8d,
        0x2c, 0xd8, 0x4c, 0x8b, 0x75, 0xf0, 0x48, 0x83,
        0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    // 10: &PyCFunction_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&PyCFunction_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xb2, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xd5, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xdc, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xe9, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x11f, (uintptr_t)data + -0x4);
    patch_32r(code + 0x12b, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x14e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x164, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_BUILTIN_FAST_WITH_KEYWORDS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_BUILTIN_FAST_WITH_KEYWORDS.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 20                   subq    $0x20, %rsp
    // 8: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // f: 89 c1                         movl    %eax, %ecx
    // 11: f7 d1                         notl    %ecx
    // 13: 4c 63 f9                      movslq  %ecx, %r15
    // 16: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       ## imm = 0xFFFFFFFE
    // 1b: 29 c1                         subl    %eax, %ecx
    // 1d: 48 63 d9                      movslq  %ecx, %rbx
    // 20: 49 8b 4c dd 00                movq    (%r13,%rbx,8), %rcx
    // 25: 31 d2                         xorl    %edx, %edx
    // 27: 31 f6                         xorl    %esi, %esi
    // 29: 4b 83 7c fd 00 00             cmpq    $0x0, (%r13,%r15,8)
    // 2f: 40 0f 95 c7                   setne   %dil
    // 33: 41 0f 94 c1                   sete    %r9b
    // 37: 4c 8b 41 08                   movq    0x8(%rcx), %r8
    // 3b: 4c 3b 05 00 00 00 00          cmpq    (%rip), %r8             ## 0x42 <__JIT_ENTRY+0x42>
    // 000000000000003e:  X86_64_RELOC_GOT     _PyCFunction_Type@GOTPCREL
    // 42: 0f 85 dd 00 00 00             jne     0x125 <__JIT_ENTRY+0x125>
    // 48: 4c 8b 41 10                   movq    0x10(%rcx), %r8
    // 4c: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
    // 54: 0f 85 cb 00 00 00             jne     0x125 <__JIT_ENTRY+0x125>
    // 5a: 44 8d 14 c5 00 00 00 00       leal    (,%rax,8), %r10d
    // 62: 4d 89 eb                      movq    %r13, %r11
    // 65: 4d 29 d3                      subq    %r10, %r11
    // 68: 44 88 ce                      movb    %r9b, %sil
    // 6b: 49 8d 34 f3                   leaq    (%r11,%rsi,8), %rsi
    // 6f: 48 83 c6 f8                   addq    $-0x8, %rsi
    // 73: 40 88 fa                      movb    %dil, %dl
    // 76: 01 c2                         addl    %eax, %edx
    // 78: 49 8b 40 08                   movq    0x8(%r8), %rax
    // 7c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 81: 48 8b 79 18                   movq    0x18(%rcx), %rdi
    // 85: 89 d2                         movl    %edx, %edx
    // 87: 31 c9                         xorl    %ecx, %ecx
    // 89: ff d0                         callq   *%rax
    // 8b: 48 89 45 e8                   movq    %rax, -0x18(%rbp)
    // 8f: 49 8b 44 24 40                movq    0x40(%r12), %rax
    // 94: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 98: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // a1: 49 8b 7c dd 00                movq    (%r13,%rbx,8), %rdi
    // a6: 8b 07                         movl    (%rdi), %eax
    // a8: 85 c0                         testl   %eax, %eax
    // aa: 78 0c                         js      0xb8 <__JIT_ENTRY+0xb8>
    // ac: ff c8                         decl    %eax
    // ae: 89 07                         movl    %eax, (%rdi)
    // b0: 75 06                         jne     0xb8 <__JIT_ENTRY+0xb8>
    // b2: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xb8 <__JIT_ENTRY+0xb8>
    // 00000000000000b4:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // b8: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // bc: 4d 89 fe                      movq    %r15, %r14
    // bf: 4b 8b 7c fd 00                movq    (%r13,%r15,8), %rdi
    // c4: 48 85 ff                      testq   %rdi, %rdi
    // c7: 74 12                         je      0xdb <__JIT_ENTRY+0xdb>
    // c9: 8b 07                         movl    (%rdi), %eax
    // cb: 85 c0                         testl   %eax, %eax
    // cd: 78 0c                         js      0xdb <__JIT_ENTRY+0xdb>
    // cf: ff c8                         decl    %eax
    // d1: 89 07                         movl    %eax, (%rdi)
    // d3: 75 06                         jne     0xdb <__JIT_ENTRY+0xdb>
    // d5: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xdb <__JIT_ENTRY+0xdb>
    // 00000000000000d7:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // db: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xe2 <__JIT_ENTRY+0xe2>
    // 00000000000000de:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // e2: 66 85 c0                      testw   %ax, %ax
    // e5: 74 48                         je      0x12f <__JIT_ENTRY+0x12f>
    // e7: 44 0f b7 3d 00 00 00 00       movzwl  (%rip), %r15d           ## 0xef <__JIT_ENTRY+0xef>
    // 00000000000000eb:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // ef: 49 ff c7                      incq    %r15
    // f2: 49 83 c5 f8                   addq    $-0x8, %r13
    // f6: eb 15                         jmp     0x10d <__JIT_ENTRY+0x10d>
    // f8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
    // 100: 49 ff cf                      decq    %r15
    // 103: 49 83 c5 f8                   addq    $-0x8, %r13
    // 107: 49 83 ff 01                   cmpq    $0x1, %r15
    // 10b: 76 22                         jbe     0x12f <__JIT_ENTRY+0x12f>
    // 10d: 49 8b 7d 00                   movq    (%r13), %rdi
    // 111: 8b 07                         movl    (%rdi), %eax
    // 113: 85 c0                         testl   %eax, %eax
    // 115: 78 e9                         js      0x100 <__JIT_ENTRY+0x100>
    // 117: ff c8                         decl    %eax
    // 119: 89 07                         movl    %eax, (%rdi)
    // 11b: 75 e3                         jne     0x100 <__JIT_ENTRY+0x100>
    // 11d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x123 <__JIT_ENTRY+0x123>
    // 000000000000011f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 123: eb db                         jmp     0x100 <__JIT_ENTRY+0x100>
    // 125: 48 83 c4 20                   addq    $0x20, %rsp
    // 129: 5d                            popq    %rbp
    // 12a: e9 00 00 00 00                jmp     0x12f <__JIT_ENTRY+0x12f>
    // 000000000000012b:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 12f: 48 8b 4d e8                   movq    -0x18(%rbp), %rcx
    // 133: 48 85 c9                      testq   %rcx, %rcx
    // 136: 74 1a                         je      0x152 <__JIT_ENTRY+0x152>
    // 138: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 13c: 48 89 0c d8                   movq    %rcx, (%rax,%rbx,8)
    // 140: 4e 8d 2c f0                   leaq    (%rax,%r14,8), %r13
    // 144: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 148: 48 83 c4 20                   addq    $0x20, %rsp
    // 14c: 5d                            popq    %rbp
    // 14d: e9 00 00 00 00                jmp     0x152 <__JIT_ENTRY+0x152>
    // 000000000000014e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 152: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 156: 4c 8d 2c d8                   leaq    (%rax,%rbx,8), %r13
    // 15a: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 15e: 48 83 c4 20                   addq    $0x20, %rsp
    // 162: 5d                            popq    %rbp
    // 163: e9 00 00 00 00                jmp     0x168 <__JIT_ENTRY+0x168>
    // 0000000000000164:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[360] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x20,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xc1, 0xf7, 0xd1, 0x4c, 0x63, 0xf9, 0xb9, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xd9,
        0x49, 0x8b, 0x4c, 0xdd, 0x00, 0x31, 0xd2, 0x31,
        0xf6, 0x4b, 0x83, 0x7c, 0xfd, 0x00, 0x00, 0x40,
        0x0f, 0x95, 0xc7, 0x41, 0x0f, 0x94, 0xc1, 0x4c,
        0x8b, 0x41, 0x08, 0x4c, 0x3b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0x85, 0xdd, 0x00, 0x00, 0x00,
        0x4c, 0x8b, 0x41, 0x10, 0x41, 0x81, 0x78, 0x10,
        0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xcb, 0x00,
        0x00, 0x00, 0x44, 0x8d, 0x14, 0xc5, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x89, 0xeb, 0x4d, 0x29, 0xd3,
        0x44, 0x88, 0xce, 0x49, 0x8d, 0x34, 0xf3, 0x48,
        0x83, 0xc6, 0xf8, 0x40, 0x88, 0xfa, 0x01, 0xc2,
        0x49, 0x8b, 0x40, 0x08, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x8b, 0x79, 0x18, 0x89, 0xd2, 0x31,
        0xc9, 0xff, 0xd0, 0x48, 0x89, 0x45, 0xe8, 0x49,
        0x8b, 0x44, 0x24, 0x40, 0x48, 0x89, 0x45, 0xf8,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x7c, 0xdd, 0x00, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x0c, 0xff, 0xc8, 0x89, 0x07,
        0x75, 0x06, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0x75, 0xf0, 0x4d, 0x89, 0xfe, 0x4b,
        0x8b, 0x7c, 0xfd, 0x00, 0x48, 0x85, 0xff, 0x74,
        0x12, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0c, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0x06, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x48, 0x44,
        0x0f, 0xb7, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x49,
        0xff, 0xc7, 0x49, 0x83, 0xc5, 0xf8, 0xeb, 0x15,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xcf, 0x49, 0x83, 0xc5, 0xf8, 0x49,
        0x83, 0xff, 0x01, 0x76, 0x22, 0x49, 0x8b, 0x7d,
        0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xe9, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0xe3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0xdb, 0x48, 0x83, 0xc4,
        0x20, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x4d, 0xe8, 0x48, 0x85, 0xc9, 0x74, 0x1a,
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x89, 0x0c, 0xd8,
        0x4e, 0x8d, 0x2c, 0xf0, 0x4c, 0x8b, 0x75, 0xf0,
        0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x45, 0xf8, 0x4c, 0x8d,
        0x2c, 0xd8, 0x4c, 0x8b, 0x75, 0xf0, 0x48, 0x83,
        0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    // 10: &PyCFunction_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&PyCFunction_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xb4, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xd7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xde, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xeb, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x11f, (uintptr_t)data + -0x4);
    patch_32r(code + 0x12b, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x14e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x164, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_BUILTIN_O(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_BUILTIN_O.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: 89 c1                         movl    %eax, %ecx
    // d: f7 d1                         notl    %ecx
    // f: 48 63 d1                      movslq  %ecx, %rdx
    // 12: 31 c9                         xorl    %ecx, %ecx
    // 14: 31 f6                         xorl    %esi, %esi
    // 16: 49 83 7c d5 00 00             cmpq    $0x0, (%r13,%rdx,8)
    // 1c: 0f 94 c2                      sete    %dl
    // 1f: 40 0f 95 c6                   setne   %sil
    // 23: 01 c6                         addl    %eax, %esi
    // 25: 83 fe 01                      cmpl    $0x1, %esi
    // 28: 0f 85 d7 00 00 00             jne     0x105 <__JIT_ENTRY+0x105>
    // 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       ## imm = 0xFFFFFFFE
    // 33: 29 c6                         subl    %eax, %esi
    // 35: 48 63 de                      movslq  %esi, %rbx
    // 38: 49 8b 74 dd 00                movq    (%r13,%rbx,8), %rsi
    // 3d: 48 8b 7e 08                   movq    0x8(%rsi), %rdi
    // 41: 48 3b 3d 00 00 00 00          cmpq    (%rip), %rdi            ## 0x48 <__JIT_ENTRY+0x48>
    // 0000000000000044:  X86_64_RELOC_GOT     _PyCFunction_Type@GOTPCREL
    // 48: 0f 85 b7 00 00 00             jne     0x105 <__JIT_ENTRY+0x105>
    // 4e: 48 8b 7e 10                   movq    0x10(%rsi), %rdi
    // 52: 83 7f 10 08                   cmpl    $0x8, 0x10(%rdi)
    // 56: 0f 85 a9 00 00 00             jne     0x105 <__JIT_ENTRY+0x105>
    // 5c: 45 8b 46 34                   movl    0x34(%r14), %r8d
    // 60: 45 85 c0                      testl   %r8d, %r8d
    // 63: 0f 8e 9c 00 00 00             jle     0x105 <__JIT_ENTRY+0x105>
    // 69: c1 e0 03                      shll    $0x3, %eax
    // 6c: 4d 89 e9                      movq    %r13, %r9
    // 6f: 49 29 c1                      subq    %rax, %r9
    // 72: 88 d1                         movb    %dl, %cl
    // 74: 48 8d 04 cd f8 ff ff ff       leaq    -0x8(,%rcx,8), %rax
    // 7c: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
    // 80: 4d 8b 3c 01                   movq    (%r9,%rax), %r15
    // 84: 41 ff c8                      decl    %r8d
    // 87: 45 89 46 34                   movl    %r8d, 0x34(%r14)
    // 8b: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 90: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
    // 94: 4c 89 fe                      movq    %r15, %rsi
    // 97: ff d1                         callq   *%rcx
    // 99: 41 ff 46 34                   incl    0x34(%r14)
    // 9d: 41 8b 0f                      movl    (%r15), %ecx
    // a0: 85 c9                         testl   %ecx, %ecx
    // a2: 78 16                         js      0xba <__JIT_ENTRY+0xba>
    // a4: ff c9                         decl    %ecx
    // a6: 41 89 0f                      movl    %ecx, (%r15)
    // a9: 75 0f                         jne     0xba <__JIT_ENTRY+0xba>
    // ab: 4c 89 ff                      movq    %r15, %rdi
    // ae: 49 89 c7                      movq    %rax, %r15
    // b1: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xb7 <__JIT_ENTRY+0xb7>
    // 00000000000000b3:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // b7: 4c 89 f8                      movq    %r15, %rax
    // ba: 48 8d 0c dd 00 00 00 00       leaq    (,%rbx,8), %rcx
    // c2: 49 01 4c 24 40                addq    %rcx, 0x40(%r12)
    // c7: 49 8b 7c dd 00                movq    (%r13,%rbx,8), %rdi
    // cc: 8b 0f                         movl    (%rdi), %ecx
    // ce: 85 c9                         testl   %ecx, %ecx
    // d0: 78 12                         js      0xe4 <__JIT_ENTRY+0xe4>
    // d2: ff c9                         decl    %ecx
    // d4: 89 0f                         movl    %ecx, (%rdi)
    // d6: 75 0c                         jne     0xe4 <__JIT_ENTRY+0xe4>
    // d8: 48 89 c3                      movq    %rax, %rbx
    // db: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xe1 <__JIT_ENTRY+0xe1>
    // 00000000000000dd:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // e1: 48 89 d8                      movq    %rbx, %rax
    // e4: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // e9: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // f2: 48 85 c0                      testq   %rax, %rax
    // f5: 74 14                         je      0x10b <__JIT_ENTRY+0x10b>
    // f7: 49 89 45 00                   movq    %rax, (%r13)
    // fb: 49 83 c5 08                   addq    $0x8, %r13
    // ff: 5d                            popq    %rbp
    // 100: e9 00 00 00 00                jmp     0x105 <__JIT_ENTRY+0x105>
    // 0000000000000101:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 105: 5d                            popq    %rbp
    // 106: e9 00 00 00 00                jmp     0x10b <__JIT_ENTRY+0x10b>
    // 0000000000000107:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 10b: 5d                            popq    %rbp
    // 10c: e9 00 00 00 00                jmp     0x111 <__JIT_ENTRY+0x111>
    // 000000000000010d:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[273] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x48,
        0x63, 0xd1, 0x31, 0xc9, 0x31, 0xf6, 0x49, 0x83,
        0x7c, 0xd5, 0x00, 0x00, 0x0f, 0x94, 0xc2, 0x40,
        0x0f, 0x95, 0xc6, 0x01, 0xc6, 0x83, 0xfe, 0x01,
        0x0f, 0x85, 0xd7, 0x00, 0x00, 0x00, 0xbe, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xc6, 0x48, 0x63, 0xde,
        0x49, 0x8b, 0x74, 0xdd, 0x00, 0x48, 0x8b, 0x7e,
        0x08, 0x48, 0x3b, 0x3d, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x85, 0xb7, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x7e, 0x10, 0x83, 0x7f, 0x10, 0x08, 0x0f, 0x85,
        0xa9, 0x00, 0x00, 0x00, 0x45, 0x8b, 0x46, 0x34,
        0x45, 0x85, 0xc0, 0x0f, 0x8e, 0x9c, 0x00, 0x00,
        0x00, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xe9, 0x49,
        0x29, 0xc1, 0x88, 0xd1, 0x48, 0x8d, 0x04, 0xcd,
        0xf8, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x4f, 0x08,
        0x4d, 0x8b, 0x3c, 0x01, 0x41, 0xff, 0xc8, 0x45,
        0x89, 0x46, 0x34, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x48, 0x8b, 0x7e, 0x18, 0x4c, 0x89, 0xfe, 0xff,
        0xd1, 0x41, 0xff, 0x46, 0x34, 0x41, 0x8b, 0x0f,
        0x85, 0xc9, 0x78, 0x16, 0xff, 0xc9, 0x41, 0x89,
        0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x49, 0x89,
        0xc7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x89, 0xf8, 0x48, 0x8d, 0x0c, 0xdd, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x01, 0x4c, 0x24, 0x40, 0x49,
        0x8b, 0x7c, 0xdd, 0x00, 0x8b, 0x0f, 0x85, 0xc9,
        0x78, 0x12, 0xff, 0xc9, 0x89, 0x0f, 0x75, 0x0c,
        0x48, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xd8, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x14, 0x49,
        0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyCFunction_Type+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyCFunction_Type);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xb3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xdd, (uintptr_t)data + -0x4);
    patch_32r(code + 0x101, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x107, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x10d, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_INTRINSIC_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_INTRINSIC_1.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x14 <__JIT_ENTRY+0x14>
    // 0000000000000010:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 14: c1 e0 04                      shll    $0x4, %eax
    // 17: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x1e <__JIT_ENTRY+0x1e>
    // 000000000000001a:  X86_64_RELOC_GOT_LOAD        __PyIntrinsics_UnaryFunctions@GOTPCREL
    // 1e: 4c 89 f7                      movq    %r14, %rdi
    // 21: 48 89 de                      movq    %rbx, %rsi
    // 24: ff 14 01                      callq   *(%rcx,%rax)
    // 27: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 35: 8b 0b                         movl    (%rbx), %ecx
    // 37: 85 c9                         testl   %ecx, %ecx
    // 39: 78 06                         js      0x41 <__JIT_ENTRY+0x41>
    // 3b: ff c9                         decl    %ecx
    // 3d: 89 0b                         movl    %ecx, (%rbx)
    // 3f: 74 0f                         je      0x50 <__JIT_ENTRY+0x50>
    // 41: 48 85 c0                      testq   %rax, %rax
    // 44: 74 1e                         je      0x64 <__JIT_ENTRY+0x64>
    // 46: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 4a: 5d                            popq    %rbp
    // 4b: e9 00 00 00 00                jmp     0x50 <__JIT_ENTRY+0x50>
    // 000000000000004c:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 50: 48 89 df                      movq    %rbx, %rdi
    // 53: 48 89 c3                      movq    %rax, %rbx
    // 56: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5c <__JIT_ENTRY+0x5c>
    // 0000000000000058:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 5c: 48 89 d8                      movq    %rbx, %rax
    // 5f: 48 85 c0                      testq   %rax, %rax
    // 62: 75 e2                         jne     0x46 <__JIT_ENTRY+0x46>
    // 64: 49 83 c5 f8                   addq    $-0x8, %r13
    // 68: 5d                            popq    %rbp
    // 69: e9 00 00 00 00                jmp     0x6e <__JIT_ENTRY+0x6e>
    // 000000000000006a:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[110] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x5d, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x0f, 0xb7, 0x05,
        0x00, 0x00, 0x00, 0x00, 0xc1, 0xe0, 0x04, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xf7, 0x48, 0x89, 0xde, 0xff, 0x14, 0x01, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0b, 0x85,
        0xc9, 0x78, 0x06, 0xff, 0xc9, 0x89, 0x0b, 0x74,
        0x0f, 0x48, 0x85, 0xc0, 0x74, 0x1e, 0x49, 0x89,
        0x45, 0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xdf, 0x48, 0x89, 0xc3, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48,
        0x85, 0xc0, 0x75, 0xe2, 0x49, 0x83, 0xc5, 0xf8,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyIntrinsics_UnaryFunctions+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyIntrinsics_UnaryFunctions);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + 0x4);
    patch_32r(code + 0x4c, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)data + -0x4);
    patch_32r(code + 0x6a, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_INTRINSIC_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_INTRINSIC_2.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 f7                      movq    %r14, %rdi
    // b: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // f: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 13: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 18: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x1f <__JIT_ENTRY+0x1f>
    // 000000000000001b:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 1f: c1 e0 04                      shll    $0x4, %eax
    // 22: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x29 <__JIT_ENTRY+0x29>
    // 0000000000000025:  X86_64_RELOC_GOT_LOAD        __PyIntrinsics_BinaryFunctions@GOTPCREL
    // 29: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // 2d: 4c 89 fe                      movq    %r15, %rsi
    // 30: 48 89 da                      movq    %rbx, %rdx
    // 33: ff 14 01                      callq   *(%rcx,%rax)
    // 36: 49 89 c6                      movq    %rax, %r14
    // 39: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3e: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 47: 41 8b 07                      movl    (%r15), %eax
    // 4a: 85 c0                         testl   %eax, %eax
    // 4c: 78 10                         js      0x5e <__JIT_ENTRY+0x5e>
    // 4e: ff c8                         decl    %eax
    // 50: 41 89 07                      movl    %eax, (%r15)
    // 53: 75 09                         jne     0x5e <__JIT_ENTRY+0x5e>
    // 55: 4c 89 ff                      movq    %r15, %rdi
    // 58: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5e <__JIT_ENTRY+0x5e>
    // 000000000000005a:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 5e: 8b 03                         movl    (%rbx), %eax
    // 60: 85 c0                         testl   %eax, %eax
    // 62: 78 06                         js      0x6a <__JIT_ENTRY+0x6a>
    // 64: ff c8                         decl    %eax
    // 66: 89 03                         movl    %eax, (%rbx)
    // 68: 74 1b                         je      0x85 <__JIT_ENTRY+0x85>
    // 6a: 4d 85 f6                      testq   %r14, %r14
    // 6d: 74 24                         je      0x93 <__JIT_ENTRY+0x93>
    // 6f: 4d 89 75 f0                   movq    %r14, -0x10(%r13)
    // 73: 49 83 c5 f8                   addq    $-0x8, %r13
    // 77: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 7b: 48 83 c4 10                   addq    $0x10, %rsp
    // 7f: 5d                            popq    %rbp
    // 80: e9 00 00 00 00                jmp     0x85 <__JIT_ENTRY+0x85>
    // 0000000000000081:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 85: 48 89 df                      movq    %rbx, %rdi
    // 88: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x8e <__JIT_ENTRY+0x8e>
    // 000000000000008a:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 8e: 4d 85 f6                      testq   %r14, %r14
    // 91: 75 dc                         jne     0x6f <__JIT_ENTRY+0x6f>
    // 93: 49 83 c5 f0                   addq    $-0x10, %r13
    // 97: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 9b: 48 83 c4 10                   addq    $0x10, %rsp
    // 9f: 5d                            popq    %rbp
    // a0: e9 00 00 00 00                jmp     0xa5 <__JIT_ENTRY+0xa5>
    // 00000000000000a1:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[165] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0xf7, 0x4d, 0x8b, 0x7d, 0xf0, 0x49,
        0x8b, 0x5d, 0xf8, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xc1,
        0xe0, 0x04, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x89, 0x75, 0xf8, 0x4c, 0x89, 0xfe,
        0x48, 0x89, 0xda, 0xff, 0x14, 0x01, 0x49, 0x89,
        0xc6, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x41,
        0x8b, 0x07, 0x85, 0xc0, 0x78, 0x10, 0xff, 0xc8,
        0x41, 0x89, 0x07, 0x75, 0x09, 0x4c, 0x89, 0xff,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x03,
        0x74, 0x1b, 0x4d, 0x85, 0xf6, 0x74, 0x24, 0x4d,
        0x89, 0x75, 0xf0, 0x49, 0x83, 0xc5, 0xf8, 0x4c,
        0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x85,
        0xf6, 0x75, 0xdc, 0x49, 0x83, 0xc5, 0xf0, 0x4c,
        0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyIntrinsics_BinaryFunctions+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyIntrinsics_BinaryFunctions);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)data + -0x4);
    patch_32r(code + 0x81, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x8a, (uintptr_t)data + -0x4);
    patch_32r(code + 0xa1, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_ISINSTANCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_ISINSTANCE.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 20                   subq    $0x20, %rsp
    // 8: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // f: 89 c1                         movl    %eax, %ecx
    // 11: f7 d1                         notl    %ecx
    // 13: 48 63 d9                      movslq  %ecx, %rbx
    // 16: 31 f6                         xorl    %esi, %esi
    // 18: 31 c9                         xorl    %ecx, %ecx
    // 1a: 49 83 7c dd 00 00             cmpq    $0x0, (%r13,%rbx,8)
    // 20: 40 0f 95 c6                   setne   %sil
    // 24: 0f 94 c2                      sete    %dl
    // 27: 01 c6                         addl    %eax, %esi
    // 29: 83 fe 02                      cmpl    $0x2, %esi
    // 2c: 75 1c                         jne     0x4a <__JIT_ENTRY+0x4a>
    // 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       ## imm = 0xFFFFFFFE
    // 33: 29 c6                         subl    %eax, %esi
    // 35: 4c 63 fe                      movslq  %esi, %r15
    // 38: 49 8b 76 10                   movq    0x10(%r14), %rsi
    // 3c: 48 8b b6 20 67 03 00          movq    0x36720(%rsi), %rsi
    // 43: 4b 3b 74 fd 00                cmpq    (%r13,%r15,8), %rsi
    // 48: 74 0a                         je      0x54 <__JIT_ENTRY+0x54>
    // 4a: 48 83 c4 20                   addq    $0x20, %rsp
    // 4e: 5d                            popq    %rbp
    // 4f: e9 00 00 00 00                jmp     0x54 <__JIT_ENTRY+0x54>
    // 0000000000000050:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 54: c1 e0 03                      shll    $0x3, %eax
    // 57: 4c 89 ee                      movq    %r13, %rsi
    // 5a: 48 29 c6                      subq    %rax, %rsi
    // 5d: 88 d1                         movb    %dl, %cl
    // 5f: 48 8d 04 cd f8 ff ff ff       leaq    -0x8(,%rcx,8), %rax
    // 67: 48 8b 3c 06                   movq    (%rsi,%rax), %rdi
    // 6b: 48 8b 74 06 08                movq    0x8(%rsi,%rax), %rsi
    // 70: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 75: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x7b <__JIT_ENTRY+0x7b>
    // 0000000000000077:  X86_64_RELOC_GOT     _PyObject_IsInstance@GOTPCREL
    // 7b: 49 8b 4c 24 40                movq    0x40(%r12), %rcx
    // 80: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 89: 85 c0                         testl   %eax, %eax
    // 8b: 0f 88 93 00 00 00             js      0x124 <__JIT_ENTRY+0x124>
    // 91: 89 45 fc                      movl    %eax, -0x4(%rbp)
    // 94: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // 98: 4b 8b 7c fd 00                movq    (%r13,%r15,8), %rdi
    // 9d: 8b 07                         movl    (%rdi), %eax
    // 9f: 85 c0                         testl   %eax, %eax
    // a1: 78 0c                         js      0xaf <__JIT_ENTRY+0xaf>
    // a3: ff c8                         decl    %eax
    // a5: 89 07                         movl    %eax, (%rdi)
    // a7: 75 06                         jne     0xaf <__JIT_ENTRY+0xaf>
    // a9: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xaf <__JIT_ENTRY+0xaf>
    // 00000000000000ab:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // af: 4c 89 7d e8                   movq    %r15, -0x18(%rbp)
    // b3: 49 8b 7c dd 00                movq    (%r13,%rbx,8), %rdi
    // b8: 48 85 ff                      testq   %rdi, %rdi
    // bb: 74 12                         je      0xcf <__JIT_ENTRY+0xcf>
    // bd: 8b 07                         movl    (%rdi), %eax
    // bf: 85 c0                         testl   %eax, %eax
    // c1: 78 0c                         js      0xcf <__JIT_ENTRY+0xcf>
    // c3: ff c8                         decl    %eax
    // c5: 89 07                         movl    %eax, (%rdi)
    // c7: 75 06                         jne     0xcf <__JIT_ENTRY+0xcf>
    // c9: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xcf <__JIT_ENTRY+0xcf>
    // 00000000000000cb:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // cf: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xd6 <__JIT_ENTRY+0xd6>
    // 00000000000000d2:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // d6: 66 85 c0                      testw   %ax, %ax
    // d9: 74 3a                         je      0x115 <__JIT_ENTRY+0x115>
    // db: 44 0f b7 3d 00 00 00 00       movzwl  (%rip), %r15d           ## 0xe3 <__JIT_ENTRY+0xe3>
    // 00000000000000df:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // e3: 49 ff c7                      incq    %r15
    // e6: 49 83 c5 f8                   addq    $-0x8, %r13
    // ea: eb 11                         jmp     0xfd <__JIT_ENTRY+0xfd>
    // ec: 0f 1f 40 00                   nopl    (%rax)
    // f0: 49 ff cf                      decq    %r15
    // f3: 49 83 c5 f8                   addq    $-0x8, %r13
    // f7: 49 83 ff 01                   cmpq    $0x1, %r15
    // fb: 76 18                         jbe     0x115 <__JIT_ENTRY+0x115>
    // fd: 49 8b 7d 00                   movq    (%r13), %rdi
    // 101: 8b 07                         movl    (%rdi), %eax
    // 103: 85 c0                         testl   %eax, %eax
    // 105: 78 e9                         js      0xf0 <__JIT_ENTRY+0xf0>
    // 107: ff c8                         decl    %eax
    // 109: 89 07                         movl    %eax, (%rdi)
    // 10b: 75 e3                         jne     0xf0 <__JIT_ENTRY+0xf0>
    // 10d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x113 <__JIT_ENTRY+0x113>
    // 000000000000010f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 113: eb db                         jmp     0xf0 <__JIT_ENTRY+0xf0>
    // 115: 83 7d fc 00                   cmpl    $0x0, -0x4(%rbp)
    // 119: 75 16                         jne     0x131 <__JIT_ENTRY+0x131>
    // 11b: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x122 <__JIT_ENTRY+0x122>
    // 000000000000011e:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // 122: eb 14                         jmp     0x138 <__JIT_ENTRY+0x138>
    // 124: 49 89 cd                      movq    %rcx, %r13
    // 127: 48 83 c4 20                   addq    $0x20, %rsp
    // 12b: 5d                            popq    %rbp
    // 12c: e9 00 00 00 00                jmp     0x131 <__JIT_ENTRY+0x131>
    // 000000000000012d:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 131: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x138 <__JIT_ENTRY+0x138>
    // 0000000000000134:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // 138: 48 8b 4d e8                   movq    -0x18(%rbp), %rcx
    // 13c: 48 8b 55 f0                   movq    -0x10(%rbp), %rdx
    // 140: 48 89 04 ca                   movq    %rax, (%rdx,%rcx,8)
    // 144: 4c 8d 2c da                   leaq    (%rdx,%rbx,8), %r13
    // 148: 48 83 c4 20                   addq    $0x20, %rsp
    // 14c: 5d                            popq    %rbp
    // 14d: e9 00 00 00 00                jmp     0x152 <__JIT_ENTRY+0x152>
    // 000000000000014e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[333] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x20,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xd9, 0x31, 0xf6,
        0x31, 0xc9, 0x49, 0x83, 0x7c, 0xdd, 0x00, 0x00,
        0x40, 0x0f, 0x95, 0xc6, 0x0f, 0x94, 0xc2, 0x01,
        0xc6, 0x83, 0xfe, 0x02, 0x75, 0x1c, 0xbe, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe,
        0x49, 0x8b, 0x76, 0x10, 0x48, 0x8b, 0xb6, 0x20,
        0x67, 0x03, 0x00, 0x4b, 0x3b, 0x74, 0xfd, 0x00,
        0x74, 0x0a, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0xc1, 0xe0, 0x03, 0x4c,
        0x89, 0xee, 0x48, 0x29, 0xc6, 0x88, 0xd1, 0x48,
        0x8d, 0x04, 0xcd, 0xf8, 0xff, 0xff, 0xff, 0x48,
        0x8b, 0x3c, 0x06, 0x48, 0x8b, 0x74, 0x06, 0x08,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x4c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xc0, 0x0f, 0x88, 0x93, 0x00, 0x00,
        0x00, 0x89, 0x45, 0xfc, 0x48, 0x89, 0x4d, 0xf0,
        0x4b, 0x8b, 0x7c, 0xfd, 0x00, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x0c, 0xff, 0xc8, 0x89, 0x07, 0x75,
        0x06, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x89, 0x7d, 0xe8, 0x49, 0x8b, 0x7c, 0xdd, 0x00,
        0x48, 0x85, 0xff, 0x74, 0x12, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x0c, 0xff, 0xc8, 0x89, 0x07, 0x75,
        0x06, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85,
        0xc0, 0x74, 0x3a, 0x44, 0x0f, 0xb7, 0x3d, 0x00,
        0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x49, 0x83,
        0xc5, 0xf8, 0xeb, 0x11, 0x0f, 0x1f, 0x40, 0x00,
        0x49, 0xff, 0xcf, 0x49, 0x83, 0xc5, 0xf8, 0x49,
        0x83, 0xff, 0x01, 0x76, 0x18, 0x49, 0x8b, 0x7d,
        0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xe9, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0xe3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0xdb, 0x83, 0x7d, 0xfc,
        0x00, 0x75, 0x16, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0xeb, 0x14, 0x49, 0x89, 0xcd, 0x48,
        0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x4d, 0xe8, 0x48, 0x8b, 0x55, 0xf0,
        0x48, 0x89, 0x04, 0xca, 0x4c, 0x8d, 0x2c, 0xda,
        0x48, 0x83, 0xc4, 0x20, 0x5d,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: OPARG
    // 20: &PyObject_IsInstance+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, instruction->oparg);
    patch_64(data + 0x20, (uintptr_t)&PyObject_IsInstance);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x14);
    patch_32r(code + 0x50, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x77, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xab, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xcb, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xd2, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xdf, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x10f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x11e, (uintptr_t)data + 0x4);
    patch_32r(code + 0x12d, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x134, (uintptr_t)data + -0x4);
}

void
emit__CALL_KW_NON_PY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_KW_NON_PY.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 20                   subq    $0x20, %rsp
    // 8: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // c: 0f b7 1d 00 00 00 00          movzwl  (%rip), %ebx            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 13: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // 17: 89 d8                         movl    %ebx, %eax
    // 19: f7 d0                         notl    %eax
    // 1b: 48 98                         cltq
    // 1d: 48 89 45 e8                   movq    %rax, -0x18(%rbp)
    // 21: 48 8d 04 c5 00 00 00 00       leaq    (,%rax,8), %rax
    // 29: 4c 01 e8                      addq    %r13, %rax
    // 2c: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       ## imm = 0xFFFFFFFE
    // 31: 29 d9                         subl    %ebx, %ecx
    // 33: 48 63 f1                      movslq  %ecx, %rsi
    // 36: b9 fd ff ff ff                movl    $0xfffffffd, %ecx       ## imm = 0xFFFFFFFD
    // 3b: 29 d9                         subl    %ebx, %ecx
    // 3d: 4c 63 f1                      movslq  %ecx, %r14
    // 40: 4b 8b 7c f5 00                movq    (%r13,%r14,8), %rdi
    // 45: 31 c9                         xorl    %ecx, %ecx
    // 47: 31 d2                         xorl    %edx, %edx
    // 49: 48 89 75 f8                   movq    %rsi, -0x8(%rbp)
    // 4d: 49 83 7c f5 00 00             cmpq    $0x0, (%r13,%rsi,8)
    // 53: 0f 95 c1                      setne   %cl
    // 56: 0f 94 c2                      sete    %dl
    // 59: 48 8d 34 d0                   leaq    (%rax,%rdx,8), %rsi
    // 5d: 48 83 c6 f8                   addq    $-0x8, %rsi
    // 61: 01 d9                         addl    %ebx, %ecx
    // 63: 41 2b 4f 10                   subl    0x10(%r15), %ecx
    // 67: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 6c: 48 63 c1                      movslq  %ecx, %rax
    // 6f: 48 ba 00 00 00 00 00 00 00 80 movabsq $-0x8000000000000000, %rdx ## imm = 0x8000000000000000
    // 79: 48 09 c2                      orq     %rax, %rdx
    // 7c: 4c 89 f9                      movq    %r15, %rcx
    // 7f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x85 <__JIT_ENTRY+0x85>
    // 0000000000000081:  X86_64_RELOC_GOT     _PyObject_Vectorcall@GOTPCREL
    // 85: 49 83 44 24 40 f8             addq    $-0x8, 0x40(%r12)
    // 8b: 48 89 45 e0                   movq    %rax, -0x20(%rbp)
    // 8f: 41 8b 07                      movl    (%r15), %eax
    // 92: 85 c0                         testl   %eax, %eax
    // 94: 78 10                         js      0xa6 <__JIT_ENTRY+0xa6>
    // 96: ff c8                         decl    %eax
    // 98: 41 89 07                      movl    %eax, (%r15)
    // 9b: 75 09                         jne     0xa6 <__JIT_ENTRY+0xa6>
    // 9d: 4c 89 ff                      movq    %r15, %rdi
    // a0: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xa6 <__JIT_ENTRY+0xa6>
    // 00000000000000a2:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // a6: 4d 8b 7c 24 40                movq    0x40(%r12), %r15
    // ab: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // b4: 4b 8b 7c f5 00                movq    (%r13,%r14,8), %rdi
    // b9: 8b 07                         movl    (%rdi), %eax
    // bb: 85 c0                         testl   %eax, %eax
    // bd: 78 0c                         js      0xcb <__JIT_ENTRY+0xcb>
    // bf: ff c8                         decl    %eax
    // c1: 89 07                         movl    %eax, (%rdi)
    // c3: 75 06                         jne     0xcb <__JIT_ENTRY+0xcb>
    // c5: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xcb <__JIT_ENTRY+0xcb>
    // 00000000000000c7:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // cb: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // cf: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
    // d4: 48 85 ff                      testq   %rdi, %rdi
    // d7: 74 12                         je      0xeb <__JIT_ENTRY+0xeb>
    // d9: 8b 07                         movl    (%rdi), %eax
    // db: 85 c0                         testl   %eax, %eax
    // dd: 78 0c                         js      0xeb <__JIT_ENTRY+0xeb>
    // df: ff c8                         decl    %eax
    // e1: 89 07                         movl    %eax, (%rdi)
    // e3: 75 06                         jne     0xeb <__JIT_ENTRY+0xeb>
    // e5: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xeb <__JIT_ENTRY+0xeb>
    // 00000000000000e7:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // eb: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xf2 <__JIT_ENTRY+0xf2>
    // 00000000000000ee:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // f2: 66 85 c0                      testw   %ax, %ax
    // f5: 74 48                         je      0x13f <__JIT_ENTRY+0x13f>
    // f7: 44 0f b7 35 00 00 00 00       movzwl  (%rip), %r14d           ## 0xff <__JIT_ENTRY+0xff>
    // 00000000000000fb:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // ff: 49 ff c6                      incq    %r14
    // 102: f7 db                         negl    %ebx
    // 104: 48 63 c3                      movslq  %ebx, %rax
    // 107: 48 8d 1c c5 f0 ff ff ff       leaq    -0x10(,%rax,8), %rbx
    // 10f: 4c 01 eb                      addq    %r13, %rbx
    // 112: 4c 8b 2d 00 00 00 00          movq    (%rip), %r13            ## 0x119 <__JIT_ENTRY+0x119>
    // 0000000000000115:  X86_64_RELOC_GOT_LOAD        __Py_Dealloc@GOTPCREL
    // 119: eb 0e                         jmp     0x129 <__JIT_ENTRY+0x129>
    // 11b: 0f 1f 44 00 00                nopl    (%rax,%rax)
    // 120: 49 ff ce                      decq    %r14
    // 123: 49 83 fe 01                   cmpq    $0x1, %r14
    // 127: 76 16                         jbe     0x13f <__JIT_ENTRY+0x13f>
    // 129: 4a 8b 7c f3 f8                movq    -0x8(%rbx,%r14,8), %rdi
    // 12e: 8b 07                         movl    (%rdi), %eax
    // 130: 85 c0                         testl   %eax, %eax
    // 132: 78 ec                         js      0x120 <__JIT_ENTRY+0x120>
    // 134: ff c8                         decl    %eax
    // 136: 89 07                         movl    %eax, (%rdi)
    // 138: 75 e6                         jne     0x120 <__JIT_ENTRY+0x120>
    // 13a: 41 ff d5                      callq   *%r13
    // 13d: eb e1                         jmp     0x120 <__JIT_ENTRY+0x120>
    // 13f: 48 8b 4d e0                   movq    -0x20(%rbp), %rcx
    // 143: 48 85 c9                      testq   %rcx, %rcx
    // 146: 74 1e                         je      0x166 <__JIT_ENTRY+0x166>
    // 148: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 14c: 49 89 0c c7                   movq    %rcx, (%r15,%rax,8)
    // 150: 48 8b 45 e8                   movq    -0x18(%rbp), %rax
    // 154: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
    // 158: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 15c: 48 83 c4 20                   addq    $0x20, %rsp
    // 160: 5d                            popq    %rbp
    // 161: e9 00 00 00 00                jmp     0x166 <__JIT_ENTRY+0x166>
    // 0000000000000162:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 166: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 16a: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
    // 16e: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 172: 48 83 c4 20                   addq    $0x20, %rsp
    // 176: 5d                            popq    %rbp
    // 177: e9 00 00 00 00                jmp     0x17c <__JIT_ENTRY+0x17c>
    // 0000000000000178:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[380] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x20,
        0x4c, 0x89, 0x75, 0xf0, 0x0f, 0xb7, 0x1d, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x7d, 0xf8, 0x89,
        0xd8, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x89, 0x45,
        0xe8, 0x48, 0x8d, 0x04, 0xc5, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x01, 0xe8, 0xb9, 0xfe, 0xff, 0xff,
        0xff, 0x29, 0xd9, 0x48, 0x63, 0xf1, 0xb9, 0xfd,
        0xff, 0xff, 0xff, 0x29, 0xd9, 0x4c, 0x63, 0xf1,
        0x4b, 0x8b, 0x7c, 0xf5, 0x00, 0x31, 0xc9, 0x31,
        0xd2, 0x48, 0x89, 0x75, 0xf8, 0x49, 0x83, 0x7c,
        0xf5, 0x00, 0x00, 0x0f, 0x95, 0xc1, 0x0f, 0x94,
        0xc2, 0x48, 0x8d, 0x34, 0xd0, 0x48, 0x83, 0xc6,
        0xf8, 0x01, 0xd9, 0x41, 0x2b, 0x4f, 0x10, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x63, 0xc1, 0x48,
        0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x80, 0x48, 0x09, 0xc2, 0x4c, 0x89, 0xf9, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0x44,
        0x24, 0x40, 0xf8, 0x48, 0x89, 0x45, 0xe0, 0x41,
        0x8b, 0x07, 0x85, 0xc0, 0x78, 0x10, 0xff, 0xc8,
        0x41, 0x89, 0x07, 0x75, 0x09, 0x4c, 0x89, 0xff,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x7c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x7c, 0xf5,
        0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0c, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0x06, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0xf8, 0x49,
        0x8b, 0x7c, 0xc5, 0x00, 0x48, 0x85, 0xff, 0x74,
        0x12, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0c, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0x06, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x48, 0x44,
        0x0f, 0xb7, 0x35, 0x00, 0x00, 0x00, 0x00, 0x49,
        0xff, 0xc6, 0xf7, 0xdb, 0x48, 0x63, 0xc3, 0x48,
        0x8d, 0x1c, 0xc5, 0xf0, 0xff, 0xff, 0xff, 0x4c,
        0x01, 0xeb, 0x4c, 0x8b, 0x2d, 0x00, 0x00, 0x00,
        0x00, 0xeb, 0x0e, 0x0f, 0x1f, 0x44, 0x00, 0x00,
        0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x76,
        0x16, 0x4a, 0x8b, 0x7c, 0xf3, 0xf8, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0xec, 0xff, 0xc8, 0x89, 0x07,
        0x75, 0xe6, 0x41, 0xff, 0xd5, 0xeb, 0xe1, 0x48,
        0x8b, 0x4d, 0xe0, 0x48, 0x85, 0xc9, 0x74, 0x1e,
        0x48, 0x8b, 0x45, 0xf8, 0x49, 0x89, 0x0c, 0xc7,
        0x48, 0x8b, 0x45, 0xe8, 0x4d, 0x8d, 0x2c, 0xc7,
        0x4c, 0x8b, 0x75, 0xf0, 0x48, 0x83, 0xc4, 0x20,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x45, 0xf8, 0x4d, 0x8d, 0x2c, 0xc7, 0x4c, 0x8b,
        0x75, 0xf0, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    // 10: &PyObject_Vectorcall+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&PyObject_Vectorcall);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x81, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xa2, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xc7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xe7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xee, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xfb, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x115, (uintptr_t)data + -0x4);
    patch_32r(code + 0x162, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x178, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_LEN(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_LEN.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // f: 89 c1                         movl    %eax, %ecx
    // 11: f7 d1                         notl    %ecx
    // 13: 48 63 d1                      movslq  %ecx, %rdx
    // 16: 31 c9                         xorl    %ecx, %ecx
    // 18: 31 f6                         xorl    %esi, %esi
    // 1a: 49 83 7c d5 00 00             cmpq    $0x0, (%r13,%rdx,8)
    // 20: 0f 94 c2                      sete    %dl
    // 23: 40 0f 95 c6                   setne   %sil
    // 27: 01 c6                         addl    %eax, %esi
    // 29: 83 fe 01                      cmpl    $0x1, %esi
    // 2c: 75 1c                         jne     0x4a <__JIT_ENTRY+0x4a>
    // 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       ## imm = 0xFFFFFFFE
    // 33: 29 c6                         subl    %eax, %esi
    // 35: 4c 63 fe                      movslq  %esi, %r15
    // 38: 49 8b 76 10                   movq    0x10(%r14), %rsi
    // 3c: 48 8b b6 28 67 03 00          movq    0x36728(%rsi), %rsi
    // 43: 4b 3b 74 fd 00                cmpq    (%r13,%r15,8), %rsi
    // 48: 74 0a                         je      0x54 <__JIT_ENTRY+0x54>
    // 4a: 48 83 c4 10                   addq    $0x10, %rsp
    // 4e: 5d                            popq    %rbp
    // 4f: e9 00 00 00 00                jmp     0x54 <__JIT_ENTRY+0x54>
    // 0000000000000050:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 54: c1 e0 03                      shll    $0x3, %eax
    // 57: 4c 89 ee                      movq    %r13, %rsi
    // 5a: 48 29 c6                      subq    %rax, %rsi
    // 5d: 88 d1                         movb    %dl, %cl
    // 5f: 48 8d 04 cd f8 ff ff ff       leaq    -0x8(,%rcx,8), %rax
    // 67: 48 8b 1c 06                   movq    (%rsi,%rax), %rbx
    // 6b: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 70: 48 89 df                      movq    %rbx, %rdi
    // 73: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x79 <__JIT_ENTRY+0x79>
    // 0000000000000075:  X86_64_RELOC_GOT     _PyObject_Size@GOTPCREL
    // 79: 49 8b 4c 24 40                movq    0x40(%r12), %rcx
    // 7e: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 87: 48 85 c0                      testq   %rax, %rax
    // 8a: 0f 88 80 00 00 00             js      0x110 <__JIT_ENTRY+0x110>
    // 90: 48 89 4d f8                   movq    %rcx, -0x8(%rbp)
    // 94: 48 89 c7                      movq    %rax, %rdi
    // 97: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x9d <__JIT_ENTRY+0x9d>
    // 0000000000000099:  X86_64_RELOC_GOT     _PyLong_FromSsize_t@GOTPCREL
    // 9d: 48 85 c0                      testq   %rax, %rax
    // a0: 74 7b                         je      0x11d <__JIT_ENTRY+0x11d>
    // a2: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // a6: 49 89 4c 24 40                movq    %rcx, 0x40(%r12)
    // ab: 8b 0b                         movl    (%rbx), %ecx
    // ad: 85 c9                         testl   %ecx, %ecx
    // af: 78 15                         js      0xc6 <__JIT_ENTRY+0xc6>
    // b1: ff c9                         decl    %ecx
    // b3: 89 0b                         movl    %ecx, (%rbx)
    // b5: 75 0f                         jne     0xc6 <__JIT_ENTRY+0xc6>
    // b7: 48 89 df                      movq    %rbx, %rdi
    // ba: 48 89 c3                      movq    %rax, %rbx
    // bd: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xc3 <__JIT_ENTRY+0xc3>
    // 00000000000000bf:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // c3: 48 89 d8                      movq    %rbx, %rax
    // c6: 4a 8d 0c fd 00 00 00 00       leaq    (,%r15,8), %rcx
    // ce: 49 01 4c 24 40                addq    %rcx, 0x40(%r12)
    // d3: 4b 8b 7c fd 00                movq    (%r13,%r15,8), %rdi
    // d8: 8b 0f                         movl    (%rdi), %ecx
    // da: 85 c9                         testl   %ecx, %ecx
    // dc: 78 12                         js      0xf0 <__JIT_ENTRY+0xf0>
    // de: ff c9                         decl    %ecx
    // e0: 89 0f                         movl    %ecx, (%rdi)
    // e2: 75 0c                         jne     0xf0 <__JIT_ENTRY+0xf0>
    // e4: 48 89 c3                      movq    %rax, %rbx
    // e7: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xed <__JIT_ENTRY+0xed>
    // 00000000000000e9:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // ed: 48 89 d8                      movq    %rbx, %rax
    // f0: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // f5: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // fe: 49 89 45 00                   movq    %rax, (%r13)
    // 102: 49 83 c5 08                   addq    $0x8, %r13
    // 106: 48 83 c4 10                   addq    $0x10, %rsp
    // 10a: 5d                            popq    %rbp
    // 10b: e9 00 00 00 00                jmp     0x110 <__JIT_ENTRY+0x110>
    // 000000000000010c:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 110: 49 89 cd                      movq    %rcx, %r13
    // 113: 48 83 c4 10                   addq    $0x10, %rsp
    // 117: 5d                            popq    %rbp
    // 118: e9 00 00 00 00                jmp     0x11d <__JIT_ENTRY+0x11d>
    // 0000000000000119:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 11d: 4c 8b 6d f8                   movq    -0x8(%rbp), %r13
    // 121: 48 83 c4 10                   addq    $0x10, %rsp
    // 125: 5d                            popq    %rbp
    // 126: e9 00 00 00 00                jmp     0x12b <__JIT_ENTRY+0x12b>
    // 0000000000000127:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[299] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xd1, 0x31, 0xc9,
        0x31, 0xf6, 0x49, 0x83, 0x7c, 0xd5, 0x00, 0x00,
        0x0f, 0x94, 0xc2, 0x40, 0x0f, 0x95, 0xc6, 0x01,
        0xc6, 0x83, 0xfe, 0x01, 0x75, 0x1c, 0xbe, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe,
        0x49, 0x8b, 0x76, 0x10, 0x48, 0x8b, 0xb6, 0x28,
        0x67, 0x03, 0x00, 0x4b, 0x3b, 0x74, 0xfd, 0x00,
        0x74, 0x0a, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0xc1, 0xe0, 0x03, 0x4c,
        0x89, 0xee, 0x48, 0x29, 0xc6, 0x88, 0xd1, 0x48,
        0x8d, 0x04, 0xcd, 0xf8, 0xff, 0xff, 0xff, 0x48,
        0x8b, 0x1c, 0x06, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x4c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x0f, 0x88, 0x80, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x4d, 0xf8, 0x48, 0x89, 0xc7, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x7b, 0x48, 0x8b, 0x4d, 0xf8, 0x49, 0x89,
        0x4c, 0x24, 0x40, 0x8b, 0x0b, 0x85, 0xc9, 0x78,
        0x15, 0xff, 0xc9, 0x89, 0x0b, 0x75, 0x0f, 0x48,
        0x89, 0xdf, 0x48, 0x89, 0xc3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x4a, 0x8d,
        0x0c, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01,
        0x4c, 0x24, 0x40, 0x4b, 0x8b, 0x7c, 0xfd, 0x00,
        0x8b, 0x0f, 0x85, 0xc9, 0x78, 0x12, 0xff, 0xc9,
        0x89, 0x0f, 0x75, 0x0c, 0x48, 0x89, 0xc3, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0x83,
        0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0xcd, 0x48, 0x83, 0xc4, 0x10, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6d,
        0xf8, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyLong_FromSsize_t+0x0
    // 10: &PyObject_Size+0x0
    // 18: OPARG
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyLong_FromSsize_t);
    patch_64(data + 0x10, (uintptr_t)&PyObject_Size);
    patch_64(data + 0x18, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x14);
    patch_32r(code + 0x50, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x75, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x99, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xbf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xe9, (uintptr_t)data + -0x4);
    patch_32r(code + 0x10c, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x119, state->instruction_starts[instruction->error_target] + -0x4);
    patch_32r(code + 0x127, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_LIST_APPEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_LIST_APPEND.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 5d e8                   movq    -0x18(%r13), %rbx
    // 4: 49 8b 46 10                   movq    0x10(%r14), %rax
    // 8: 48 39 98 30 67 03 00          cmpq    %rbx, 0x36730(%rax)
    // f: 0f 85 00 00 00 00             jne     0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 15: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // 19: 49 8b 47 08                   movq    0x8(%r15), %rax
    // 1d: f6 80 ab 00 00 00 02          testb   $0x2, 0xab(%rax)
    // 24: 0f 84 00 00 00 00             je      0x2a <__JIT_ENTRY+0x2a>
    // 0000000000000026:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 2a: 55                            pushq   %rbp
    // 2b: 48 89 e5                      movq    %rsp, %rbp
    // 2e: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 32: 49 83 c5 f0                   addq    $-0x10, %r13
    // 36: 49 8b 47 10                   movq    0x10(%r15), %rax
    // 3a: 49 39 47 20                   cmpq    %rax, 0x20(%r15)
    // 3e: 7e 1f                         jle     0x5f <__JIT_ENTRY+0x5f>
    // 40: 49 8b 4f 18                   movq    0x18(%r15), %rcx
    // 44: 48 89 34 c1                   movq    %rsi, (%rcx,%rax,8)
    // 48: 48 ff c0                      incq    %rax
    // 4b: 49 89 47 10                   movq    %rax, 0x10(%r15)
    // 4f: b1 01                         movb    $0x1, %cl
    // 51: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 56: 41 8b 07                      movl    (%r15), %eax
    // 59: 85 c0                         testl   %eax, %eax
    // 5b: 79 1c                         jns     0x79 <__JIT_ENTRY+0x79>
    // 5d: eb 30                         jmp     0x8f <__JIT_ENTRY+0x8f>
    // 5f: 4c 89 ff                      movq    %r15, %rdi
    // 62: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x68 <__JIT_ENTRY+0x68>
    // 0000000000000064:  X86_64_RELOC_GOT     __PyList_AppendTakeRefListResize@GOTPCREL
    // 68: 85 c0                         testl   %eax, %eax
    // 6a: 0f 94 c1                      sete    %cl
    // 6d: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 72: 41 8b 07                      movl    (%r15), %eax
    // 75: 85 c0                         testl   %eax, %eax
    // 77: 78 16                         js      0x8f <__JIT_ENTRY+0x8f>
    // 79: ff c8                         decl    %eax
    // 7b: 41 89 07                      movl    %eax, (%r15)
    // 7e: 75 0f                         jne     0x8f <__JIT_ENTRY+0x8f>
    // 80: 4c 89 ff                      movq    %r15, %rdi
    // 83: 41 89 cf                      movl    %ecx, %r15d
    // 86: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x8c <__JIT_ENTRY+0x8c>
    // 0000000000000088:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 8c: 44 89 f9                      movl    %r15d, %ecx
    // 8f: 49 83 44 24 40 f8             addq    $-0x8, 0x40(%r12)
    // 95: 8b 03                         movl    (%rbx), %eax
    // 97: 85 c0                         testl   %eax, %eax
    // 99: 78 13                         js      0xae <__JIT_ENTRY+0xae>
    // 9b: ff c8                         decl    %eax
    // 9d: 89 03                         movl    %eax, (%rbx)
    // 9f: 75 0d                         jne     0xae <__JIT_ENTRY+0xae>
    // a1: 48 89 df                      movq    %rbx, %rdi
    // a4: 89 cb                         movl    %ecx, %ebx
    // a6: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xac <__JIT_ENTRY+0xac>
    // 00000000000000a8:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // ac: 89 d9                         movl    %ebx, %ecx
    // ae: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // b3: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // bc: 84 c9                         testb   %cl, %cl
    // be: 5d                            popq    %rbp
    // bf: 0f 84 00 00 00 00             je      0xc5 <__JIT_ENTRY+0xc5>
    // 00000000000000c1:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // c5: e9 00 00 00 00                jmp     0xca <__JIT_ENTRY+0xca>
    // 00000000000000c6:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[197] = {
        0x49, 0x8b, 0x5d, 0xe8, 0x49, 0x8b, 0x46, 0x10,
        0x48, 0x39, 0x98, 0x30, 0x67, 0x03, 0x00, 0x0f,
        0x85, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x7d,
        0xf0, 0x49, 0x8b, 0x47, 0x08, 0xf6, 0x80, 0xab,
        0x00, 0x00, 0x00, 0x02, 0x0f, 0x84, 0x00, 0x00,
        0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b,
        0x75, 0xf8, 0x49, 0x83, 0xc5, 0xf0, 0x49, 0x8b,
        0x47, 0x10, 0x49, 0x39, 0x47, 0x20, 0x7e, 0x1f,
        0x49, 0x8b, 0x4f, 0x18, 0x48, 0x89, 0x34, 0xc1,
        0x48, 0xff, 0xc0, 0x49, 0x89, 0x47, 0x10, 0xb1,
        0x01, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x41, 0x8b,
        0x07, 0x85, 0xc0, 0x79, 0x1c, 0xeb, 0x30, 0x4c,
        0x89, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x0f, 0x94, 0xc1, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x41, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x16, 0xff, 0xc8, 0x41, 0x89, 0x07, 0x75, 0x0f,
        0x4c, 0x89, 0xff, 0x41, 0x89, 0xcf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x44, 0x89, 0xf9, 0x49,
        0x83, 0x44, 0x24, 0x40, 0xf8, 0x8b, 0x03, 0x85,
        0xc0, 0x78, 0x13, 0xff, 0xc8, 0x89, 0x03, 0x75,
        0x0d, 0x48, 0x89, 0xdf, 0x89, 0xcb, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xd9, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x84, 0xc9, 0x5d, 0x0f,
        0x84, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyList_AppendTakeRefListResize+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyList_AppendTakeRefListResize);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x11, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x26, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x64, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x88, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xa8, (uintptr_t)data + -0x4);
    patch_32r(code + 0xc1, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_METHOD_DESCRIPTOR_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_METHOD_DESCRIPTOR_FAST.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 20                   subq    $0x20, %rsp
    // 8: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // f: 89 c1                         movl    %eax, %ecx
    // 11: f7 d1                         notl    %ecx
    // 13: 4c 63 f9                      movslq  %ecx, %r15
    // 16: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       ## imm = 0xFFFFFFFE
    // 1b: 29 c1                         subl    %eax, %ecx
    // 1d: 48 63 d9                      movslq  %ecx, %rbx
    // 20: 4d 8b 4c dd 00                movq    (%r13,%rbx,8), %r9
    // 25: 31 c9                         xorl    %ecx, %ecx
    // 27: 31 f6                         xorl    %esi, %esi
    // 29: 4b 83 7c fd 00 00             cmpq    $0x0, (%r13,%r15,8)
    // 2f: 0f 95 c2                      setne   %dl
    // 32: 40 0f 94 c7                   sete    %dil
    // 36: 4d 8b 41 08                   movq    0x8(%r9), %r8
    // 3a: 4c 3b 05 00 00 00 00          cmpq    (%rip), %r8             ## 0x41 <__JIT_ENTRY+0x41>
    // 000000000000003d:  X86_64_RELOC_GOT     _PyMethodDescr_Type@GOTPCREL
    // 41: 75 34                         jne     0x77 <__JIT_ENTRY+0x77>
    // 43: 4d 8b 41 28                   movq    0x28(%r9), %r8
    // 47: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
    // 4f: 75 26                         jne     0x77 <__JIT_ENTRY+0x77>
    // 51: 44 8d 14 c5 00 00 00 00       leal    (,%rax,8), %r10d
    // 59: 4d 89 eb                      movq    %r13, %r11
    // 5c: 4d 29 d3                      subq    %r10, %r11
    // 5f: 40 88 fe                      movb    %dil, %sil
    // 62: 49 8d 34 f3                   leaq    (%r11,%rsi,8), %rsi
    // 66: 48 83 c6 f8                   addq    $-0x8, %rsi
    // 6a: 48 8b 3e                      movq    (%rsi), %rdi
    // 6d: 4c 8b 57 08                   movq    0x8(%rdi), %r10
    // 71: 4d 3b 51 10                   cmpq    0x10(%r9), %r10
    // 75: 74 0a                         je      0x81 <__JIT_ENTRY+0x81>
    // 77: 48 83 c4 20                   addq    $0x20, %rsp
    // 7b: 5d                            popq    %rbp
    // 7c: e9 00 00 00 00                jmp     0x81 <__JIT_ENTRY+0x81>
    // 000000000000007d:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 81: 88 d1                         movb    %dl, %cl
    // 83: 01 c8                         addl    %ecx, %eax
    // 85: ff c8                         decl    %eax
    // 87: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 8c: 48 83 c6 08                   addq    $0x8, %rsi
    // 90: 48 63 d0                      movslq  %eax, %rdx
    // 93: 41 ff 50 08                   callq   *0x8(%r8)
    // 97: 48 89 45 e8                   movq    %rax, -0x18(%rbp)
    // 9b: 49 8b 44 24 40                movq    0x40(%r12), %rax
    // a0: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // a4: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // ad: 49 8b 7c dd 00                movq    (%r13,%rbx,8), %rdi
    // b2: 8b 07                         movl    (%rdi), %eax
    // b4: 85 c0                         testl   %eax, %eax
    // b6: 78 0c                         js      0xc4 <__JIT_ENTRY+0xc4>
    // b8: ff c8                         decl    %eax
    // ba: 89 07                         movl    %eax, (%rdi)
    // bc: 75 06                         jne     0xc4 <__JIT_ENTRY+0xc4>
    // be: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xc4 <__JIT_ENTRY+0xc4>
    // 00000000000000c0:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // c4: 4c 89 7d f0                   movq    %r15, -0x10(%rbp)
    // c8: 4b 8b 7c fd 00                movq    (%r13,%r15,8), %rdi
    // cd: 48 85 ff                      testq   %rdi, %rdi
    // d0: 74 12                         je      0xe4 <__JIT_ENTRY+0xe4>
    // d2: 8b 07                         movl    (%rdi), %eax
    // d4: 85 c0                         testl   %eax, %eax
    // d6: 78 0c                         js      0xe4 <__JIT_ENTRY+0xe4>
    // d8: ff c8                         decl    %eax
    // da: 89 07                         movl    %eax, (%rdi)
    // dc: 75 06                         jne     0xe4 <__JIT_ENTRY+0xe4>
    // de: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xe4 <__JIT_ENTRY+0xe4>
    // 00000000000000e0:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // e4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xeb <__JIT_ENTRY+0xeb>
    // 00000000000000e7:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // eb: 66 85 c0                      testw   %ax, %ax
    // ee: 74 45                         je      0x135 <__JIT_ENTRY+0x135>
    // f0: 44 0f b7 3d 00 00 00 00       movzwl  (%rip), %r15d           ## 0xf8 <__JIT_ENTRY+0xf8>
    // 00000000000000f4:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // f8: 49 ff c7                      incq    %r15
    // fb: 49 83 c5 f8                   addq    $-0x8, %r13
    // ff: eb 1c                         jmp     0x11d <__JIT_ENTRY+0x11d>
    // 101: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
    // 110: 49 ff cf                      decq    %r15
    // 113: 49 83 c5 f8                   addq    $-0x8, %r13
    // 117: 49 83 ff 01                   cmpq    $0x1, %r15
    // 11b: 76 18                         jbe     0x135 <__JIT_ENTRY+0x135>
    // 11d: 49 8b 7d 00                   movq    (%r13), %rdi
    // 121: 8b 07                         movl    (%rdi), %eax
    // 123: 85 c0                         testl   %eax, %eax
    // 125: 78 e9                         js      0x110 <__JIT_ENTRY+0x110>
    // 127: ff c8                         decl    %eax
    // 129: 89 07                         movl    %eax, (%rdi)
    // 12b: 75 e3                         jne     0x110 <__JIT_ENTRY+0x110>
    // 12d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x133 <__JIT_ENTRY+0x133>
    // 000000000000012f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 133: eb db                         jmp     0x110 <__JIT_ENTRY+0x110>
    // 135: 48 8b 45 e8                   movq    -0x18(%rbp), %rax
    // 139: 48 85 c0                      testq   %rax, %rax
    // 13c: 74 1a                         je      0x158 <__JIT_ENTRY+0x158>
    // 13e: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // 142: 48 89 04 d9                   movq    %rax, (%rcx,%rbx,8)
    // 146: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // 14a: 4c 8d 2c c1                   leaq    (%rcx,%rax,8), %r13
    // 14e: 48 83 c4 20                   addq    $0x20, %rsp
    // 152: 5d                            popq    %rbp
    // 153: e9 00 00 00 00                jmp     0x158 <__JIT_ENTRY+0x158>
    // 0000000000000154:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 158: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 15c: 4c 8d 2c d8                   leaq    (%rax,%rbx,8), %r13
    // 160: 48 83 c4 20                   addq    $0x20, %rsp
    // 164: 5d                            popq    %rbp
    // 165: e9 00 00 00 00                jmp     0x16a <__JIT_ENTRY+0x16a>
    // 0000000000000166:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[362] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x20,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xc1, 0xf7, 0xd1, 0x4c, 0x63, 0xf9, 0xb9, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xd9,
        0x4d, 0x8b, 0x4c, 0xdd, 0x00, 0x31, 0xc9, 0x31,
        0xf6, 0x4b, 0x83, 0x7c, 0xfd, 0x00, 0x00, 0x0f,
        0x95, 0xc2, 0x40, 0x0f, 0x94, 0xc7, 0x4d, 0x8b,
        0x41, 0x08, 0x4c, 0x3b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x75, 0x34, 0x4d, 0x8b, 0x41, 0x28, 0x41,
        0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75,
        0x26, 0x44, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x89, 0xeb, 0x4d, 0x29, 0xd3, 0x40,
        0x88, 0xfe, 0x49, 0x8d, 0x34, 0xf3, 0x48, 0x83,
        0xc6, 0xf8, 0x48, 0x8b, 0x3e, 0x4c, 0x8b, 0x57,
        0x08, 0x4d, 0x3b, 0x51, 0x10, 0x74, 0x0a, 0x48,
        0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x88, 0xd1, 0x01, 0xc8, 0xff, 0xc8, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x83, 0xc6, 0x08,
        0x48, 0x63, 0xd0, 0x41, 0xff, 0x50, 0x08, 0x48,
        0x89, 0x45, 0xe8, 0x49, 0x8b, 0x44, 0x24, 0x40,
        0x48, 0x89, 0x45, 0xf8, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c,
        0xdd, 0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0c,
        0xff, 0xc8, 0x89, 0x07, 0x75, 0x06, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x7d, 0xf0,
        0x4b, 0x8b, 0x7c, 0xfd, 0x00, 0x48, 0x85, 0xff,
        0x74, 0x12, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0c,
        0xff, 0xc8, 0x89, 0x07, 0x75, 0x06, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x45,
        0x44, 0x0f, 0xb7, 0x3d, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xc7, 0x49, 0x83, 0xc5, 0xf8, 0xeb,
        0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xcf, 0x49, 0x83, 0xc5, 0xf8, 0x49,
        0x83, 0xff, 0x01, 0x76, 0x18, 0x49, 0x8b, 0x7d,
        0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xe9, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0xe3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0xdb, 0x48, 0x8b, 0x45,
        0xe8, 0x48, 0x85, 0xc0, 0x74, 0x1a, 0x48, 0x8b,
        0x4d, 0xf8, 0x48, 0x89, 0x04, 0xd9, 0x48, 0x8b,
        0x45, 0xf0, 0x4c, 0x8d, 0x2c, 0xc1, 0x48, 0x83,
        0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x45, 0xf8, 0x4c, 0x8d, 0x2c, 0xd8,
        0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    // 10: &PyMethodDescr_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&PyMethodDescr_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3d, (uintptr_t)data + 0xc);
    patch_32r(code + 0x7d, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0xc0, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xe0, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xe7, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xf4, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x12f, (uintptr_t)data + -0x4);
    patch_32r(code + 0x154, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x166, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 20                   subq    $0x20, %rsp
    // 8: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // f: 89 c1                         movl    %eax, %ecx
    // 11: f7 d1                         notl    %ecx
    // 13: 4c 63 f9                      movslq  %ecx, %r15
    // 16: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       ## imm = 0xFFFFFFFE
    // 1b: 29 c1                         subl    %eax, %ecx
    // 1d: 48 63 d9                      movslq  %ecx, %rbx
    // 20: 4d 8b 4c dd 00                movq    (%r13,%rbx,8), %r9
    // 25: 31 c9                         xorl    %ecx, %ecx
    // 27: 31 f6                         xorl    %esi, %esi
    // 29: 4b 83 7c fd 00 00             cmpq    $0x0, (%r13,%r15,8)
    // 2f: 0f 95 c2                      setne   %dl
    // 32: 40 0f 94 c7                   sete    %dil
    // 36: 4d 8b 41 08                   movq    0x8(%r9), %r8
    // 3a: 4c 3b 05 00 00 00 00          cmpq    (%rip), %r8             ## 0x41 <__JIT_ENTRY+0x41>
    // 000000000000003d:  X86_64_RELOC_GOT     _PyMethodDescr_Type@GOTPCREL
    // 41: 75 34                         jne     0x77 <__JIT_ENTRY+0x77>
    // 43: 4d 8b 41 28                   movq    0x28(%r9), %r8
    // 47: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
    // 4f: 75 26                         jne     0x77 <__JIT_ENTRY+0x77>
    // 51: 44 8d 14 c5 00 00 00 00       leal    (,%rax,8), %r10d
    // 59: 4d 89 eb                      movq    %r13, %r11
    // 5c: 4d 29 d3                      subq    %r10, %r11
    // 5f: 40 88 fe                      movb    %dil, %sil
    // 62: 49 8d 34 f3                   leaq    (%r11,%rsi,8), %rsi
    // 66: 48 83 c6 f8                   addq    $-0x8, %rsi
    // 6a: 48 8b 3e                      movq    (%rsi), %rdi
    // 6d: 4c 8b 57 08                   movq    0x8(%rdi), %r10
    // 71: 4d 3b 51 10                   cmpq    0x10(%r9), %r10
    // 75: 74 0a                         je      0x81 <__JIT_ENTRY+0x81>
    // 77: 48 83 c4 20                   addq    $0x20, %rsp
    // 7b: 5d                            popq    %rbp
    // 7c: e9 00 00 00 00                jmp     0x81 <__JIT_ENTRY+0x81>
    // 000000000000007d:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 81: 88 d1                         movb    %dl, %cl
    // 83: 01 c8                         addl    %ecx, %eax
    // 85: ff c8                         decl    %eax
    // 87: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 8c: 48 83 c6 08                   addq    $0x8, %rsi
    // 90: 48 63 d0                      movslq  %eax, %rdx
    // 93: 31 c9                         xorl    %ecx, %ecx
    // 95: 41 ff 50 08                   callq   *0x8(%r8)
    // 99: 48 89 45 e8                   movq    %rax, -0x18(%rbp)
    // 9d: 49 8b 44 24 40                movq    0x40(%r12), %rax
    // a2: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // a6: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // af: 49 8b 7c dd 00                movq    (%r13,%rbx,8), %rdi
    // b4: 8b 07                         movl    (%rdi), %eax
    // b6: 85 c0                         testl   %eax, %eax
    // b8: 78 0c                         js      0xc6 <__JIT_ENTRY+0xc6>
    // ba: ff c8                         decl    %eax
    // bc: 89 07                         movl    %eax, (%rdi)
    // be: 75 06                         jne     0xc6 <__JIT_ENTRY+0xc6>
    // c0: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xc6 <__JIT_ENTRY+0xc6>
    // 00000000000000c2:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // c6: 4c 89 7d f0                   movq    %r15, -0x10(%rbp)
    // ca: 4b 8b 7c fd 00                movq    (%r13,%r15,8), %rdi
    // cf: 48 85 ff                      testq   %rdi, %rdi
    // d2: 74 12                         je      0xe6 <__JIT_ENTRY+0xe6>
    // d4: 8b 07                         movl    (%rdi), %eax
    // d6: 85 c0                         testl   %eax, %eax
    // d8: 78 0c                         js      0xe6 <__JIT_ENTRY+0xe6>
    // da: ff c8                         decl    %eax
    // dc: 89 07                         movl    %eax, (%rdi)
    // de: 75 06                         jne     0xe6 <__JIT_ENTRY+0xe6>
    // e0: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xe6 <__JIT_ENTRY+0xe6>
    // 00000000000000e2:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // e6: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xed <__JIT_ENTRY+0xed>
    // 00000000000000e9:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // ed: 66 85 c0                      testw   %ax, %ax
    // f0: 74 43                         je      0x135 <__JIT_ENTRY+0x135>
    // f2: 44 0f b7 3d 00 00 00 00       movzwl  (%rip), %r15d           ## 0xfa <__JIT_ENTRY+0xfa>
    // 00000000000000f6:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // fa: 49 ff c7                      incq    %r15
    // fd: 49 83 c5 f8                   addq    $-0x8, %r13
    // 101: eb 1a                         jmp     0x11d <__JIT_ENTRY+0x11d>
    // 103: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
    // 110: 49 ff cf                      decq    %r15
    // 113: 49 83 c5 f8                   addq    $-0x8, %r13
    // 117: 49 83 ff 01                   cmpq    $0x1, %r15
    // 11b: 76 18                         jbe     0x135 <__JIT_ENTRY+0x135>
    // 11d: 49 8b 7d 00                   movq    (%r13), %rdi
    // 121: 8b 07                         movl    (%rdi), %eax
    // 123: 85 c0                         testl   %eax, %eax
    // 125: 78 e9                         js      0x110 <__JIT_ENTRY+0x110>
    // 127: ff c8                         decl    %eax
    // 129: 89 07                         movl    %eax, (%rdi)
    // 12b: 75 e3                         jne     0x110 <__JIT_ENTRY+0x110>
    // 12d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x133 <__JIT_ENTRY+0x133>
    // 000000000000012f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 133: eb db                         jmp     0x110 <__JIT_ENTRY+0x110>
    // 135: 48 8b 45 e8                   movq    -0x18(%rbp), %rax
    // 139: 48 85 c0                      testq   %rax, %rax
    // 13c: 74 1a                         je      0x158 <__JIT_ENTRY+0x158>
    // 13e: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // 142: 48 89 04 d9                   movq    %rax, (%rcx,%rbx,8)
    // 146: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // 14a: 4c 8d 2c c1                   leaq    (%rcx,%rax,8), %r13
    // 14e: 48 83 c4 20                   addq    $0x20, %rsp
    // 152: 5d                            popq    %rbp
    // 153: e9 00 00 00 00                jmp     0x158 <__JIT_ENTRY+0x158>
    // 0000000000000154:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 158: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 15c: 4c 8d 2c d8                   leaq    (%rax,%rbx,8), %r13
    // 160: 48 83 c4 20                   addq    $0x20, %rsp
    // 164: 5d                            popq    %rbp
    // 165: e9 00 00 00 00                jmp     0x16a <__JIT_ENTRY+0x16a>
    // 0000000000000166:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[362] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x20,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xc1, 0xf7, 0xd1, 0x4c, 0x63, 0xf9, 0xb9, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xd9,
        0x4d, 0x8b, 0x4c, 0xdd, 0x00, 0x31, 0xc9, 0x31,
        0xf6, 0x4b, 0x83, 0x7c, 0xfd, 0x00, 0x00, 0x0f,
        0x95, 0xc2, 0x40, 0x0f, 0x94, 0xc7, 0x4d, 0x8b,
        0x41, 0x08, 0x4c, 0x3b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x75, 0x34, 0x4d, 0x8b, 0x41, 0x28, 0x41,
        0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x75,
        0x26, 0x44, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x89, 0xeb, 0x4d, 0x29, 0xd3, 0x40,
        0x88, 0xfe, 0x49, 0x8d, 0x34, 0xf3, 0x48, 0x83,
        0xc6, 0xf8, 0x48, 0x8b, 0x3e, 0x4c, 0x8b, 0x57,
        0x08, 0x4d, 0x3b, 0x51, 0x10, 0x74, 0x0a, 0x48,
        0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x88, 0xd1, 0x01, 0xc8, 0xff, 0xc8, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x83, 0xc6, 0x08,
        0x48, 0x63, 0xd0, 0x31, 0xc9, 0x41, 0xff, 0x50,
        0x08, 0x48, 0x89, 0x45, 0xe8, 0x49, 0x8b, 0x44,
        0x24, 0x40, 0x48, 0x89, 0x45, 0xf8, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x7c, 0xdd, 0x00, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x0c, 0xff, 0xc8, 0x89, 0x07, 0x75, 0x06,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0x7d, 0xf0, 0x4b, 0x8b, 0x7c, 0xfd, 0x00, 0x48,
        0x85, 0xff, 0x74, 0x12, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x0c, 0xff, 0xc8, 0x89, 0x07, 0x75, 0x06,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0,
        0x74, 0x43, 0x44, 0x0f, 0xb7, 0x3d, 0x00, 0x00,
        0x00, 0x00, 0x49, 0xff, 0xc7, 0x49, 0x83, 0xc5,
        0xf8, 0xeb, 0x1a, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xcf, 0x49, 0x83, 0xc5, 0xf8, 0x49,
        0x83, 0xff, 0x01, 0x76, 0x18, 0x49, 0x8b, 0x7d,
        0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xe9, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0xe3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0xdb, 0x48, 0x8b, 0x45,
        0xe8, 0x48, 0x85, 0xc0, 0x74, 0x1a, 0x48, 0x8b,
        0x4d, 0xf8, 0x48, 0x89, 0x04, 0xd9, 0x48, 0x8b,
        0x45, 0xf0, 0x4c, 0x8d, 0x2c, 0xc1, 0x48, 0x83,
        0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x45, 0xf8, 0x4c, 0x8d, 0x2c, 0xd8,
        0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    // 10: &PyMethodDescr_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&PyMethodDescr_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3d, (uintptr_t)data + 0xc);
    patch_32r(code + 0x7d, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0xc2, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xe2, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xe9, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xf6, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x12f, (uintptr_t)data + -0x4);
    patch_32r(code + 0x154, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x166, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_METHOD_DESCRIPTOR_NOARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_METHOD_DESCRIPTOR_NOARGS.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: 89 c1                         movl    %eax, %ecx
    // d: f7 d1                         notl    %ecx
    // f: 48 63 d1                      movslq  %ecx, %rdx
    // 12: 31 c9                         xorl    %ecx, %ecx
    // 14: 31 f6                         xorl    %esi, %esi
    // 16: 49 83 7c d5 00 00             cmpq    $0x0, (%r13,%rdx,8)
    // 1c: 0f 94 c2                      sete    %dl
    // 1f: 40 0f 95 c6                   setne   %sil
    // 23: 01 c6                         addl    %eax, %esi
    // 25: 83 fe 01                      cmpl    $0x1, %esi
    // 28: 0f 85 df 00 00 00             jne     0x10d <__JIT_ENTRY+0x10d>
    // 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       ## imm = 0xFFFFFFFE
    // 33: 29 c6                         subl    %eax, %esi
    // 35: 4c 63 fe                      movslq  %esi, %r15
    // 38: 4b 8b 74 fd 00                movq    (%r13,%r15,8), %rsi
    // 3d: 48 8b 7e 08                   movq    0x8(%rsi), %rdi
    // 41: 48 3b 3d 00 00 00 00          cmpq    (%rip), %rdi            ## 0x48 <__JIT_ENTRY+0x48>
    // 0000000000000044:  X86_64_RELOC_GOT     _PyMethodDescr_Type@GOTPCREL
    // 48: 0f 85 bf 00 00 00             jne     0x10d <__JIT_ENTRY+0x10d>
    // 4e: c1 e0 03                      shll    $0x3, %eax
    // 51: 4c 89 ef                      movq    %r13, %rdi
    // 54: 48 29 c7                      subq    %rax, %rdi
    // 57: 88 d1                         movb    %dl, %cl
    // 59: 48 8d 04 cd f8 ff ff ff       leaq    -0x8(,%rcx,8), %rax
    // 61: 48 8b 1c 07                   movq    (%rdi,%rax), %rbx
    // 65: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 69: 48 3b 46 10                   cmpq    0x10(%rsi), %rax
    // 6d: 0f 85 9a 00 00 00             jne     0x10d <__JIT_ENTRY+0x10d>
    // 73: 48 8b 46 28                   movq    0x28(%rsi), %rax
    // 77: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
    // 7b: 0f 85 8c 00 00 00             jne     0x10d <__JIT_ENTRY+0x10d>
    // 81: 41 8b 4e 34                   movl    0x34(%r14), %ecx
    // 85: 85 c9                         testl   %ecx, %ecx
    // 87: 0f 8e 80 00 00 00             jle     0x10d <__JIT_ENTRY+0x10d>
    // 8d: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 91: ff c9                         decl    %ecx
    // 93: 41 89 4e 34                   movl    %ecx, 0x34(%r14)
    // 97: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 9c: 48 89 df                      movq    %rbx, %rdi
    // 9f: 31 f6                         xorl    %esi, %esi
    // a1: ff d0                         callq   *%rax
    // a3: 41 ff 46 34                   incl    0x34(%r14)
    // a7: 8b 0b                         movl    (%rbx), %ecx
    // a9: 85 c9                         testl   %ecx, %ecx
    // ab: 78 15                         js      0xc2 <__JIT_ENTRY+0xc2>
    // ad: ff c9                         decl    %ecx
    // af: 89 0b                         movl    %ecx, (%rbx)
    // b1: 75 0f                         jne     0xc2 <__JIT_ENTRY+0xc2>
    // b3: 48 89 df                      movq    %rbx, %rdi
    // b6: 48 89 c3                      movq    %rax, %rbx
    // b9: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xbf <__JIT_ENTRY+0xbf>
    // 00000000000000bb:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // bf: 48 89 d8                      movq    %rbx, %rax
    // c2: 4a 8d 0c fd 00 00 00 00       leaq    (,%r15,8), %rcx
    // ca: 49 01 4c 24 40                addq    %rcx, 0x40(%r12)
    // cf: 4b 8b 7c fd 00                movq    (%r13,%r15,8), %rdi
    // d4: 8b 0f                         movl    (%rdi), %ecx
    // d6: 85 c9                         testl   %ecx, %ecx
    // d8: 78 12                         js      0xec <__JIT_ENTRY+0xec>
    // da: ff c9                         decl    %ecx
    // dc: 89 0f                         movl    %ecx, (%rdi)
    // de: 75 0c                         jne     0xec <__JIT_ENTRY+0xec>
    // e0: 48 89 c3                      movq    %rax, %rbx
    // e3: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xe9 <__JIT_ENTRY+0xe9>
    // 00000000000000e5:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // e9: 48 89 d8                      movq    %rbx, %rax
    // ec: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // f1: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // fa: 48 85 c0                      testq   %rax, %rax
    // fd: 74 14                         je      0x113 <__JIT_ENTRY+0x113>
    // ff: 49 89 45 00                   movq    %rax, (%r13)
    // 103: 49 83 c5 08                   addq    $0x8, %r13
    // 107: 5d                            popq    %rbp
    // 108: e9 00 00 00 00                jmp     0x10d <__JIT_ENTRY+0x10d>
    // 0000000000000109:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 10d: 5d                            popq    %rbp
    // 10e: e9 00 00 00 00                jmp     0x113 <__JIT_ENTRY+0x113>
    // 000000000000010f:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 113: 5d                            popq    %rbp
    // 114: e9 00 00 00 00                jmp     0x119 <__JIT_ENTRY+0x119>
    // 0000000000000115:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[281] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x48,
        0x63, 0xd1, 0x31, 0xc9, 0x31, 0xf6, 0x49, 0x83,
        0x7c, 0xd5, 0x00, 0x00, 0x0f, 0x94, 0xc2, 0x40,
        0x0f, 0x95, 0xc6, 0x01, 0xc6, 0x83, 0xfe, 0x01,
        0x0f, 0x85, 0xdf, 0x00, 0x00, 0x00, 0xbe, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe,
        0x4b, 0x8b, 0x74, 0xfd, 0x00, 0x48, 0x8b, 0x7e,
        0x08, 0x48, 0x3b, 0x3d, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x85, 0xbf, 0x00, 0x00, 0x00, 0xc1, 0xe0,
        0x03, 0x4c, 0x89, 0xef, 0x48, 0x29, 0xc7, 0x88,
        0xd1, 0x48, 0x8d, 0x04, 0xcd, 0xf8, 0xff, 0xff,
        0xff, 0x48, 0x8b, 0x1c, 0x07, 0x48, 0x8b, 0x43,
        0x08, 0x48, 0x3b, 0x46, 0x10, 0x0f, 0x85, 0x9a,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x46, 0x28, 0x83,
        0x78, 0x10, 0x04, 0x0f, 0x85, 0x8c, 0x00, 0x00,
        0x00, 0x41, 0x8b, 0x4e, 0x34, 0x85, 0xc9, 0x0f,
        0x8e, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40,
        0x08, 0xff, 0xc9, 0x41, 0x89, 0x4e, 0x34, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xdf, 0x31,
        0xf6, 0xff, 0xd0, 0x41, 0xff, 0x46, 0x34, 0x8b,
        0x0b, 0x85, 0xc9, 0x78, 0x15, 0xff, 0xc9, 0x89,
        0x0b, 0x75, 0x0f, 0x48, 0x89, 0xdf, 0x48, 0x89,
        0xc3, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xd8, 0x4a, 0x8d, 0x0c, 0xfd, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x01, 0x4c, 0x24, 0x40, 0x4b,
        0x8b, 0x7c, 0xfd, 0x00, 0x8b, 0x0f, 0x85, 0xc9,
        0x78, 0x12, 0xff, 0xc9, 0x89, 0x0f, 0x75, 0x0c,
        0x48, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xd8, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x14, 0x49,
        0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyMethodDescr_Type+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xbb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xe5, (uintptr_t)data + -0x4);
    patch_32r(code + 0x109, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x10f, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x115, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_METHOD_DESCRIPTOR_O(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_METHOD_DESCRIPTOR_O.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 20                   subq    $0x20, %rsp
    // 8: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // f: 89 c1                         movl    %eax, %ecx
    // 11: f7 d1                         notl    %ecx
    // 13: 4c 63 f9                      movslq  %ecx, %r15
    // 16: 31 f6                         xorl    %esi, %esi
    // 18: 31 c9                         xorl    %ecx, %ecx
    // 1a: 4b 83 7c fd 00 00             cmpq    $0x0, (%r13,%r15,8)
    // 20: 40 0f 95 c6                   setne   %sil
    // 24: 0f 94 c2                      sete    %dl
    // 27: 01 c6                         addl    %eax, %esi
    // 29: 83 fe 02                      cmpl    $0x2, %esi
    // 2c: 75 54                         jne     0x82 <__JIT_ENTRY+0x82>
    // 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       ## imm = 0xFFFFFFFE
    // 33: 29 c6                         subl    %eax, %esi
    // 35: 4c 63 ce                      movslq  %esi, %r9
    // 38: 4b 8b 74 cd 00                movq    (%r13,%r9,8), %rsi
    // 3d: 48 8b 7e 08                   movq    0x8(%rsi), %rdi
    // 41: 48 3b 3d 00 00 00 00          cmpq    (%rip), %rdi            ## 0x48 <__JIT_ENTRY+0x48>
    // 0000000000000044:  X86_64_RELOC_GOT     _PyMethodDescr_Type@GOTPCREL
    // 48: 75 38                         jne     0x82 <__JIT_ENTRY+0x82>
    // 4a: 4c 8b 46 28                   movq    0x28(%rsi), %r8
    // 4e: 41 83 78 10 08                cmpl    $0x8, 0x10(%r8)
    // 53: 75 2d                         jne     0x82 <__JIT_ENTRY+0x82>
    // 55: 4c 89 4d f8                   movq    %r9, -0x8(%rbp)
    // 59: 41 8b 5e 34                   movl    0x34(%r14), %ebx
    // 5d: 85 db                         testl   %ebx, %ebx
    // 5f: 7e 21                         jle     0x82 <__JIT_ENTRY+0x82>
    // 61: c1 e0 03                      shll    $0x3, %eax
    // 64: 4d 89 e9                      movq    %r13, %r9
    // 67: 49 29 c1                      subq    %rax, %r9
    // 6a: 88 d1                         movb    %dl, %cl
    // 6c: 48 8d 04 cd f8 ff ff ff       leaq    -0x8(,%rcx,8), %rax
    // 74: 49 8b 3c 01                   movq    (%r9,%rax), %rdi
    // 78: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
    // 7c: 48 3b 4e 10                   cmpq    0x10(%rsi), %rcx
    // 80: 74 0a                         je      0x8c <__JIT_ENTRY+0x8c>
    // 82: 48 83 c4 20                   addq    $0x20, %rsp
    // 86: 5d                            popq    %rbp
    // 87: e9 00 00 00 00                jmp     0x8c <__JIT_ENTRY+0x8c>
    // 0000000000000088:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 8c: 49 8b 74 01 08                movq    0x8(%r9,%rax), %rsi
    // 91: 49 8b 40 08                   movq    0x8(%r8), %rax
    // 95: ff cb                         decl    %ebx
    // 97: 41 89 5e 34                   movl    %ebx, 0x34(%r14)
    // 9b: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // a0: ff d0                         callq   *%rax
    // a2: 49 8b 4c 24 40                movq    0x40(%r12), %rcx
    // a7: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // ab: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // b4: 41 ff 46 34                   incl    0x34(%r14)
    // b8: 48 89 45 e8                   movq    %rax, -0x18(%rbp)
    // bc: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // c0: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
    // c5: 8b 07                         movl    (%rdi), %eax
    // c7: 85 c0                         testl   %eax, %eax
    // c9: 78 0c                         js      0xd7 <__JIT_ENTRY+0xd7>
    // cb: ff c8                         decl    %eax
    // cd: 89 07                         movl    %eax, (%rdi)
    // cf: 75 06                         jne     0xd7 <__JIT_ENTRY+0xd7>
    // d1: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xd7 <__JIT_ENTRY+0xd7>
    // 00000000000000d3:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // d7: 4b 8b 7c fd 00                movq    (%r13,%r15,8), %rdi
    // dc: 48 85 ff                      testq   %rdi, %rdi
    // df: 74 12                         je      0xf3 <__JIT_ENTRY+0xf3>
    // e1: 8b 07                         movl    (%rdi), %eax
    // e3: 85 c0                         testl   %eax, %eax
    // e5: 78 0c                         js      0xf3 <__JIT_ENTRY+0xf3>
    // e7: ff c8                         decl    %eax
    // e9: 89 07                         movl    %eax, (%rdi)
    // eb: 75 06                         jne     0xf3 <__JIT_ENTRY+0xf3>
    // ed: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xf3 <__JIT_ENTRY+0xf3>
    // 00000000000000ef:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // f3: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xfa <__JIT_ENTRY+0xfa>
    // 00000000000000f6:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // fa: 66 85 c0                      testw   %ax, %ax
    // fd: 74 36                         je      0x135 <__JIT_ENTRY+0x135>
    // ff: 0f b7 1d 00 00 00 00          movzwl  (%rip), %ebx            ## 0x106 <__JIT_ENTRY+0x106>
    // 0000000000000102:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 106: 48 ff c3                      incq    %rbx
    // 109: 49 83 c5 f8                   addq    $-0x8, %r13
    // 10d: eb 0e                         jmp     0x11d <__JIT_ENTRY+0x11d>
    // 10f: 90                            nop
    // 110: 48 ff cb                      decq    %rbx
    // 113: 49 83 c5 f8                   addq    $-0x8, %r13
    // 117: 48 83 fb 01                   cmpq    $0x1, %rbx
    // 11b: 76 18                         jbe     0x135 <__JIT_ENTRY+0x135>
    // 11d: 49 8b 7d 00                   movq    (%r13), %rdi
    // 121: 8b 07                         movl    (%rdi), %eax
    // 123: 85 c0                         testl   %eax, %eax
    // 125: 78 e9                         js      0x110 <__JIT_ENTRY+0x110>
    // 127: ff c8                         decl    %eax
    // 129: 89 07                         movl    %eax, (%rdi)
    // 12b: 75 e3                         jne     0x110 <__JIT_ENTRY+0x110>
    // 12d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x133 <__JIT_ENTRY+0x133>
    // 000000000000012f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 133: eb db                         jmp     0x110 <__JIT_ENTRY+0x110>
    // 135: 48 8b 55 e8                   movq    -0x18(%rbp), %rdx
    // 139: 48 85 d2                      testq   %rdx, %rdx
    // 13c: 74 1a                         je      0x158 <__JIT_ENTRY+0x158>
    // 13e: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 142: 48 8b 4d f0                   movq    -0x10(%rbp), %rcx
    // 146: 48 89 14 c1                   movq    %rdx, (%rcx,%rax,8)
    // 14a: 4e 8d 2c f9                   leaq    (%rcx,%r15,8), %r13
    // 14e: 48 83 c4 20                   addq    $0x20, %rsp
    // 152: 5d                            popq    %rbp
    // 153: e9 00 00 00 00                jmp     0x158 <__JIT_ENTRY+0x158>
    // 0000000000000154:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 158: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 15c: 48 8b 4d f0                   movq    -0x10(%rbp), %rcx
    // 160: 4c 8d 2c c1                   leaq    (%rcx,%rax,8), %r13
    // 164: 48 83 c4 20                   addq    $0x20, %rsp
    // 168: 5d                            popq    %rbp
    // 169: e9 00 00 00 00                jmp     0x16e <__JIT_ENTRY+0x16e>
    // 000000000000016a:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[366] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x20,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xc1, 0xf7, 0xd1, 0x4c, 0x63, 0xf9, 0x31, 0xf6,
        0x31, 0xc9, 0x4b, 0x83, 0x7c, 0xfd, 0x00, 0x00,
        0x40, 0x0f, 0x95, 0xc6, 0x0f, 0x94, 0xc2, 0x01,
        0xc6, 0x83, 0xfe, 0x02, 0x75, 0x54, 0xbe, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xce,
        0x4b, 0x8b, 0x74, 0xcd, 0x00, 0x48, 0x8b, 0x7e,
        0x08, 0x48, 0x3b, 0x3d, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x38, 0x4c, 0x8b, 0x46, 0x28, 0x41, 0x83,
        0x78, 0x10, 0x08, 0x75, 0x2d, 0x4c, 0x89, 0x4d,
        0xf8, 0x41, 0x8b, 0x5e, 0x34, 0x85, 0xdb, 0x7e,
        0x21, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xe9, 0x49,
        0x29, 0xc1, 0x88, 0xd1, 0x48, 0x8d, 0x04, 0xcd,
        0xf8, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x3c, 0x01,
        0x48, 0x8b, 0x4f, 0x08, 0x48, 0x3b, 0x4e, 0x10,
        0x74, 0x0a, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x74, 0x01,
        0x08, 0x49, 0x8b, 0x40, 0x08, 0xff, 0xcb, 0x41,
        0x89, 0x5e, 0x34, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0xff, 0xd0, 0x49, 0x8b, 0x4c, 0x24, 0x40, 0x48,
        0x89, 0x4d, 0xf0, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x41, 0xff, 0x46, 0x34,
        0x48, 0x89, 0x45, 0xe8, 0x48, 0x8b, 0x45, 0xf8,
        0x49, 0x8b, 0x7c, 0xc5, 0x00, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x0c, 0xff, 0xc8, 0x89, 0x07, 0x75,
        0x06, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4b,
        0x8b, 0x7c, 0xfd, 0x00, 0x48, 0x85, 0xff, 0x74,
        0x12, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0c, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0x06, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x36, 0x0f,
        0xb7, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff,
        0xc3, 0x49, 0x83, 0xc5, 0xf8, 0xeb, 0x0e, 0x90,
        0x48, 0xff, 0xcb, 0x49, 0x83, 0xc5, 0xf8, 0x48,
        0x83, 0xfb, 0x01, 0x76, 0x18, 0x49, 0x8b, 0x7d,
        0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xe9, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0xe3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0xdb, 0x48, 0x8b, 0x55,
        0xe8, 0x48, 0x85, 0xd2, 0x74, 0x1a, 0x48, 0x8b,
        0x45, 0xf8, 0x48, 0x8b, 0x4d, 0xf0, 0x48, 0x89,
        0x14, 0xc1, 0x4e, 0x8d, 0x2c, 0xf9, 0x48, 0x83,
        0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x4d, 0xf0,
        0x4c, 0x8d, 0x2c, 0xc1, 0x48, 0x83, 0xc4, 0x20,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    // 10: &PyMethodDescr_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&PyMethodDescr_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0xc);
    patch_32r(code + 0x88, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0xd3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xef, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xf6, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x102, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x12f, (uintptr_t)data + -0x4);
    patch_32r(code + 0x154, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x16a, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_NON_PY_GENERAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_NON_PY_GENERAL.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 20                   subq    $0x20, %rsp
    // 8: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // c: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 13: 8d 0c c5 00 00 00 00          leal    (,%rax,8), %ecx
    // 1a: 4c 89 ea                      movq    %r13, %rdx
    // 1d: 48 29 ca                      subq    %rcx, %rdx
    // 20: 89 c1                         movl    %eax, %ecx
    // 22: f7 d1                         notl    %ecx
    // 24: 4c 63 f1                      movslq  %ecx, %r14
    // 27: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       ## imm = 0xFFFFFFFE
    // 2c: 29 c1                         subl    %eax, %ecx
    // 2e: 48 63 d9                      movslq  %ecx, %rbx
    // 31: 31 c9                         xorl    %ecx, %ecx
    // 33: 31 f6                         xorl    %esi, %esi
    // 35: 4b 83 7c f5 00 00             cmpq    $0x0, (%r13,%r14,8)
    // 3b: 49 8b 7c dd 00                movq    (%r13,%rbx,8), %rdi
    // 40: 0f 95 c1                      setne   %cl
    // 43: 40 0f 94 c6                   sete    %sil
    // 47: 48 8d 34 f2                   leaq    (%rdx,%rsi,8), %rsi
    // 4b: 48 83 c6 f8                   addq    $-0x8, %rsi
    // 4f: 01 c1                         addl    %eax, %ecx
    // 51: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 56: 48 ba 00 00 00 00 00 00 00 80 movabsq $-0x8000000000000000, %rdx ## imm = 0x8000000000000000
    // 60: 48 09 ca                      orq     %rcx, %rdx
    // 63: 31 c9                         xorl    %ecx, %ecx
    // 65: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x6b <__JIT_ENTRY+0x6b>
    // 0000000000000067:  X86_64_RELOC_GOT     _PyObject_Vectorcall@GOTPCREL
    // 6b: 48 89 45 e0                   movq    %rax, -0x20(%rbp)
    // 6f: 49 8b 44 24 40                movq    0x40(%r12), %rax
    // 74: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 78: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 81: 49 8b 7c dd 00                movq    (%r13,%rbx,8), %rdi
    // 86: 8b 07                         movl    (%rdi), %eax
    // 88: 85 c0                         testl   %eax, %eax
    // 8a: 78 0c                         js      0x98 <__JIT_ENTRY+0x98>
    // 8c: ff c8                         decl    %eax
    // 8e: 89 07                         movl    %eax, (%rdi)
    // 90: 75 06                         jne     0x98 <__JIT_ENTRY+0x98>
    // 92: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x98 <__JIT_ENTRY+0x98>
    // 0000000000000094:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 98: 4c 89 75 e8                   movq    %r14, -0x18(%rbp)
    // 9c: 4b 8b 7c f5 00                movq    (%r13,%r14,8), %rdi
    // a1: 48 85 ff                      testq   %rdi, %rdi
    // a4: 74 12                         je      0xb8 <__JIT_ENTRY+0xb8>
    // a6: 8b 07                         movl    (%rdi), %eax
    // a8: 85 c0                         testl   %eax, %eax
    // aa: 78 0c                         js      0xb8 <__JIT_ENTRY+0xb8>
    // ac: ff c8                         decl    %eax
    // ae: 89 07                         movl    %eax, (%rdi)
    // b0: 75 06                         jne     0xb8 <__JIT_ENTRY+0xb8>
    // b2: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xb8 <__JIT_ENTRY+0xb8>
    // 00000000000000b4:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // b8: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xbf <__JIT_ENTRY+0xbf>
    // 00000000000000bb:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // bf: 66 85 c0                      testw   %ax, %ax
    // c2: 74 3e                         je      0x102 <__JIT_ENTRY+0x102>
    // c4: 44 0f b7 35 00 00 00 00       movzwl  (%rip), %r14d           ## 0xcc <__JIT_ENTRY+0xcc>
    // 00000000000000c8:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // cc: 49 ff c6                      incq    %r14
    // cf: 49 83 c5 f8                   addq    $-0x8, %r13
    // d3: 4c 8b 3d 00 00 00 00          movq    (%rip), %r15            ## 0xda <__JIT_ENTRY+0xda>
    // 00000000000000d6:  X86_64_RELOC_GOT_LOAD        __Py_Dealloc@GOTPCREL
    // da: eb 11                         jmp     0xed <__JIT_ENTRY+0xed>
    // dc: 0f 1f 40 00                   nopl    (%rax)
    // e0: 49 ff ce                      decq    %r14
    // e3: 49 83 c5 f8                   addq    $-0x8, %r13
    // e7: 49 83 fe 01                   cmpq    $0x1, %r14
    // eb: 76 15                         jbe     0x102 <__JIT_ENTRY+0x102>
    // ed: 49 8b 7d 00                   movq    (%r13), %rdi
    // f1: 8b 07                         movl    (%rdi), %eax
    // f3: 85 c0                         testl   %eax, %eax
    // f5: 78 e9                         js      0xe0 <__JIT_ENTRY+0xe0>
    // f7: ff c8                         decl    %eax
    // f9: 89 07                         movl    %eax, (%rdi)
    // fb: 75 e3                         jne     0xe0 <__JIT_ENTRY+0xe0>
    // fd: 41 ff d7                      callq   *%r15
    // 100: eb de                         jmp     0xe0 <__JIT_ENTRY+0xe0>
    // 102: 48 8b 45 e0                   movq    -0x20(%rbp), %rax
    // 106: 48 85 c0                      testq   %rax, %rax
    // 109: 74 1e                         je      0x129 <__JIT_ENTRY+0x129>
    // 10b: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // 10f: 48 89 04 d9                   movq    %rax, (%rcx,%rbx,8)
    // 113: 48 8b 45 e8                   movq    -0x18(%rbp), %rax
    // 117: 4c 8d 2c c1                   leaq    (%rcx,%rax,8), %r13
    // 11b: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 11f: 48 83 c4 20                   addq    $0x20, %rsp
    // 123: 5d                            popq    %rbp
    // 124: e9 00 00 00 00                jmp     0x129 <__JIT_ENTRY+0x129>
    // 0000000000000125:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 129: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 12d: 4c 8d 2c d8                   leaq    (%rax,%rbx,8), %r13
    // 131: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 135: 48 83 c4 20                   addq    $0x20, %rsp
    // 139: 5d                            popq    %rbp
    // 13a: e9 00 00 00 00                jmp     0x13f <__JIT_ENTRY+0x13f>
    // 000000000000013b:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[319] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x20,
        0x4c, 0x89, 0x75, 0xf0, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x8d, 0x0c, 0xc5, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0x29, 0xca,
        0x89, 0xc1, 0xf7, 0xd1, 0x4c, 0x63, 0xf1, 0xb9,
        0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63,
        0xd9, 0x31, 0xc9, 0x31, 0xf6, 0x4b, 0x83, 0x7c,
        0xf5, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0xdd, 0x00,
        0x0f, 0x95, 0xc1, 0x40, 0x0f, 0x94, 0xc6, 0x48,
        0x8d, 0x34, 0xf2, 0x48, 0x83, 0xc6, 0xf8, 0x01,
        0xc1, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0xba,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
        0x48, 0x09, 0xca, 0x31, 0xc9, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0xe0, 0x49,
        0x8b, 0x44, 0x24, 0x40, 0x48, 0x89, 0x45, 0xf8,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x7c, 0xdd, 0x00, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x0c, 0xff, 0xc8, 0x89, 0x07,
        0x75, 0x06, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0x75, 0xe8, 0x4b, 0x8b, 0x7c, 0xf5,
        0x00, 0x48, 0x85, 0xff, 0x74, 0x12, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x0c, 0xff, 0xc8, 0x89, 0x07,
        0x75, 0x06, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x66,
        0x85, 0xc0, 0x74, 0x3e, 0x44, 0x0f, 0xb7, 0x35,
        0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x49,
        0x83, 0xc5, 0xf8, 0x4c, 0x8b, 0x3d, 0x00, 0x00,
        0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x40, 0x00,
        0x49, 0xff, 0xce, 0x49, 0x83, 0xc5, 0xf8, 0x49,
        0x83, 0xfe, 0x01, 0x76, 0x15, 0x49, 0x8b, 0x7d,
        0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xe9, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0xe3, 0x41, 0xff, 0xd7,
        0xeb, 0xde, 0x48, 0x8b, 0x45, 0xe0, 0x48, 0x85,
        0xc0, 0x74, 0x1e, 0x48, 0x8b, 0x4d, 0xf8, 0x48,
        0x89, 0x04, 0xd9, 0x48, 0x8b, 0x45, 0xe8, 0x4c,
        0x8d, 0x2c, 0xc1, 0x4c, 0x8b, 0x75, 0xf0, 0x48,
        0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x45, 0xf8, 0x4c, 0x8d, 0x2c,
        0xd8, 0x4c, 0x8b, 0x75, 0xf0, 0x48, 0x83, 0xc4,
        0x20, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    // 10: &PyObject_Vectorcall+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&PyObject_Vectorcall);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x67, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x94, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xb4, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xbb, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xc8, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xd6, (uintptr_t)data + -0x4);
    patch_32r(code + 0x125, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x13b, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_STR_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_STR_1.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 83 7d f0 00                cmpq    $0x0, -0x10(%r13)
    // 9: 75 0d                         jne     0x18 <__JIT_ENTRY+0x18>
    // b: 49 8b 45 e8                   movq    -0x18(%r13), %rax
    // f: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x16 <__JIT_ENTRY+0x16>
    // 0000000000000012:  X86_64_RELOC_GOT     _PyUnicode_Type@GOTPCREL
    // 16: 74 06                         je      0x1e <__JIT_ENTRY+0x1e>
    // 18: 5d                            popq    %rbp
    // 19: e9 00 00 00 00                jmp     0x1e <__JIT_ENTRY+0x1e>
    // 000000000000001a:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 1e: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 22: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 27: 48 89 df                      movq    %rbx, %rdi
    // 2a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x30 <__JIT_ENTRY+0x30>
    // 000000000000002c:  X86_64_RELOC_GOT     _PyObject_Str@GOTPCREL
    // 30: 49 83 44 24 40 e8             addq    $-0x18, 0x40(%r12)
    // 36: 8b 0b                         movl    (%rbx), %ecx
    // 38: 85 c9                         testl   %ecx, %ecx
    // 3a: 78 15                         js      0x51 <__JIT_ENTRY+0x51>
    // 3c: ff c9                         decl    %ecx
    // 3e: 89 0b                         movl    %ecx, (%rbx)
    // 40: 75 0f                         jne     0x51 <__JIT_ENTRY+0x51>
    // 42: 48 89 df                      movq    %rbx, %rdi
    // 45: 48 89 c3                      movq    %rax, %rbx
    // 48: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4e <__JIT_ENTRY+0x4e>
    // 000000000000004a:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 4e: 48 89 d8                      movq    %rbx, %rax
    // 51: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 56: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 5f: 48 85 c0                      testq   %rax, %rax
    // 62: 74 0e                         je      0x72 <__JIT_ENTRY+0x72>
    // 64: 49 89 45 00                   movq    %rax, (%r13)
    // 68: 49 83 c5 08                   addq    $0x8, %r13
    // 6c: 5d                            popq    %rbp
    // 6d: e9 00 00 00 00                jmp     0x72 <__JIT_ENTRY+0x72>
    // 000000000000006e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 72: 5d                            popq    %rbp
    // 73: e9 00 00 00 00                jmp     0x78 <__JIT_ENTRY+0x78>
    // 0000000000000074:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[120] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x83, 0x7d, 0xf0,
        0x00, 0x75, 0x0d, 0x49, 0x8b, 0x45, 0xe8, 0x48,
        0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74, 0x06,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b,
        0x5d, 0xf8, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48,
        0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x83, 0x44, 0x24, 0x40, 0xe8, 0x8b, 0x0b,
        0x85, 0xc9, 0x78, 0x15, 0xff, 0xc9, 0x89, 0x0b,
        0x75, 0x0f, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xc3,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xd8, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x0e, 0x49, 0x89, 0x45, 0x00,
        0x49, 0x83, 0xc5, 0x08, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyObject_Str+0x0
    // 10: &PyUnicode_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyObject_Str);
    patch_64(data + 0x10, (uintptr_t)&PyUnicode_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + 0xc);
    patch_32r(code + 0x1a, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)data + -0x4);
    patch_32r(code + 0x6e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x74, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_TUPLE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_TUPLE_1.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 83 7d f0 00                cmpq    $0x0, -0x10(%r13)
    // 9: 75 0d                         jne     0x18 <__JIT_ENTRY+0x18>
    // b: 49 8b 45 e8                   movq    -0x18(%r13), %rax
    // f: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x16 <__JIT_ENTRY+0x16>
    // 0000000000000012:  X86_64_RELOC_GOT     _PyTuple_Type@GOTPCREL
    // 16: 74 06                         je      0x1e <__JIT_ENTRY+0x1e>
    // 18: 5d                            popq    %rbp
    // 19: e9 00 00 00 00                jmp     0x1e <__JIT_ENTRY+0x1e>
    // 000000000000001a:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 1e: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 22: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 27: 48 89 df                      movq    %rbx, %rdi
    // 2a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x30 <__JIT_ENTRY+0x30>
    // 000000000000002c:  X86_64_RELOC_GOT     _PySequence_Tuple@GOTPCREL
    // 30: 49 83 44 24 40 e8             addq    $-0x18, 0x40(%r12)
    // 36: 8b 0b                         movl    (%rbx), %ecx
    // 38: 85 c9                         testl   %ecx, %ecx
    // 3a: 78 15                         js      0x51 <__JIT_ENTRY+0x51>
    // 3c: ff c9                         decl    %ecx
    // 3e: 89 0b                         movl    %ecx, (%rbx)
    // 40: 75 0f                         jne     0x51 <__JIT_ENTRY+0x51>
    // 42: 48 89 df                      movq    %rbx, %rdi
    // 45: 48 89 c3                      movq    %rax, %rbx
    // 48: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4e <__JIT_ENTRY+0x4e>
    // 000000000000004a:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 4e: 48 89 d8                      movq    %rbx, %rax
    // 51: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 56: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 5f: 48 85 c0                      testq   %rax, %rax
    // 62: 74 0e                         je      0x72 <__JIT_ENTRY+0x72>
    // 64: 49 89 45 00                   movq    %rax, (%r13)
    // 68: 49 83 c5 08                   addq    $0x8, %r13
    // 6c: 5d                            popq    %rbp
    // 6d: e9 00 00 00 00                jmp     0x72 <__JIT_ENTRY+0x72>
    // 000000000000006e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 72: 5d                            popq    %rbp
    // 73: e9 00 00 00 00                jmp     0x78 <__JIT_ENTRY+0x78>
    // 0000000000000074:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[120] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x83, 0x7d, 0xf0,
        0x00, 0x75, 0x0d, 0x49, 0x8b, 0x45, 0xe8, 0x48,
        0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74, 0x06,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b,
        0x5d, 0xf8, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48,
        0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x83, 0x44, 0x24, 0x40, 0xe8, 0x8b, 0x0b,
        0x85, 0xc9, 0x78, 0x15, 0xff, 0xc9, 0x89, 0x0b,
        0x75, 0x0f, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xc3,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xd8, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x0e, 0x49, 0x89, 0x45, 0x00,
        0x49, 0x83, 0xc5, 0x08, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PySequence_Tuple+0x0
    // 10: &PyTuple_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PySequence_Tuple);
    patch_64(data + 0x10, (uintptr_t)&PyTuple_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + 0xc);
    patch_32r(code + 0x1a, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)data + -0x4);
    patch_32r(code + 0x6e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x74, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CALL_TYPE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CALL_TYPE_1.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 83 7d f0 00                cmpq    $0x0, -0x10(%r13)
    // 5: 0f 85 00 00 00 00             jne     0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // b: 49 8b 45 e8                   movq    -0x18(%r13), %rax
    // f: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x16 <__JIT_ENTRY+0x16>
    // 0000000000000012:  X86_64_RELOC_GOT     _PyType_Type@GOTPCREL
    // 16: 0f 85 00 00 00 00             jne     0x1c <__JIT_ENTRY+0x1c>
    // 0000000000000018:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 1c: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 20: 49 8d 45 f0                   leaq    -0x10(%r13), %rax
    // 24: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
    // 28: 8b 11                         movl    (%rcx), %edx
    // 2a: 85 d2                         testl   %edx, %edx
    // 2c: 78 04                         js      0x32 <__JIT_ENTRY+0x32>
    // 2e: ff c2                         incl    %edx
    // 30: 89 11                         movl    %edx, (%rcx)
    // 32: 49 89 4d e8                   movq    %rcx, -0x18(%r13)
    // 36: 49 89 44 24 40                movq    %rax, 0x40(%r12)
    // 3b: 8b 07                         movl    (%rdi), %eax
    // 3d: 85 c0                         testl   %eax, %eax
    // 3f: 78 06                         js      0x47 <__JIT_ENTRY+0x47>
    // 41: ff c8                         decl    %eax
    // 43: 89 07                         movl    %eax, (%rdi)
    // 45: 74 13                         je      0x5a <__JIT_ENTRY+0x5a>
    // 47: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 4c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 55: e9 00 00 00 00                jmp     0x5a <__JIT_ENTRY+0x5a>
    // 0000000000000056:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 5a: 55                            pushq   %rbp
    // 5b: 48 89 e5                      movq    %rsp, %rbp
    // 5e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x64 <__JIT_ENTRY+0x64>
    // 0000000000000060:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 64: 5d                            popq    %rbp
    // 65: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 6a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 73: e9 00 00 00 00                jmp     0x78 <__JIT_ENTRY+0x78>
    // 0000000000000074:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[115] = {
        0x49, 0x83, 0x7d, 0xf0, 0x00, 0x0f, 0x85, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0xe8, 0x48,
        0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x85,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7d, 0xf8,
        0x49, 0x8d, 0x45, 0xf0, 0x48, 0x8b, 0x4f, 0x08,
        0x8b, 0x11, 0x85, 0xd2, 0x78, 0x04, 0xff, 0xc2,
        0x89, 0x11, 0x49, 0x89, 0x4d, 0xe8, 0x49, 0x89,
        0x44, 0x24, 0x40, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x13, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyType_Type+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyType_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x7, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + 0x4);
    patch_32r(code + 0x18, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x56, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x60, (uintptr_t)data + -0x4);
}

void
emit__CHECK_AND_ALLOCATE_OBJECT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_AND_ALLOCATE_OBJECT.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // f: 89 c1                         movl    %eax, %ecx
    // 11: f7 d1                         notl    %ecx
    // 13: 4c 63 f9                      movslq  %ecx, %r15
    // 16: 4b 83 7c fd 00 00             cmpq    $0x0, (%r13,%r15,8)
    // 1c: 0f 85 e2 00 00 00             jne     0x104 <__JIT_ENTRY+0x104>
    // 22: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       ## imm = 0xFFFFFFFE
    // 27: 29 c1                         subl    %eax, %ecx
    // 29: 48 63 d9                      movslq  %ecx, %rbx
    // 2c: 49 8b 7c dd 00                movq    (%r13,%rbx,8), %rdi
    // 31: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 35: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
    // 3c: 0f 84 c2 00 00 00             je      0x104 <__JIT_ENTRY+0x104>
    // 42: 8b 87 80 01 00 00             movl    0x180(%rdi), %eax
    // 48: 3b 05 00 00 00 00             cmpl    (%rip), %eax            ## 0x4e <__JIT_ENTRY+0x4e>
    // 000000000000004a:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 4e: 0f 85 b0 00 00 00             jne     0x104 <__JIT_ENTRY+0x104>
    // 54: 49 8b 86 f0 00 00 00          movq    0xf0(%r14), %rax
    // 5b: 48 85 c0                      testq   %rax, %rax
    // 5e: 0f 84 a0 00 00 00             je      0x104 <__JIT_ENTRY+0x104>
    // 64: 48 8b b7 a0 03 00 00          movq    0x3a0(%rdi), %rsi
    // 6b: 48 8b 4e 30                   movq    0x30(%rsi), %rcx
    // 6f: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
    // 73: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            ## 0x7a <__JIT_ENTRY+0x7a>
    // 0000000000000076:  X86_64_RELOC_GOT_LOAD        __Py_InitCleanup@GOTPCREL
    // 7a: 48 63 52 4c                   movslq  0x4c(%rdx), %rdx
    // 7e: 48 01 ca                      addq    %rcx, %rdx
    // 81: 49 8b 8e f8 00 00 00          movq    0xf8(%r14), %rcx
    // 88: 48 29 c1                      subq    %rax, %rcx
    // 8b: 48 c1 f9 03                   sarq    $0x3, %rcx
    // 8f: 48 39 d1                      cmpq    %rdx, %rcx
    // 92: 7e 70                         jle     0x104 <__JIT_ENTRY+0x104>
    // 94: 48 89 75 f8                   movq    %rsi, -0x8(%rbp)
    // 98: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 9d: 31 f6                         xorl    %esi, %esi
    // 9f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xa5 <__JIT_ENTRY+0xa5>
    // 00000000000000a1:  X86_64_RELOC_GOT     _PyType_GenericAlloc@GOTPCREL
    // a5: 49 8b 4c 24 40                movq    0x40(%r12), %rcx
    // aa: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // b3: 48 85 c0                      testq   %rax, %rax
    // b6: 74 56                         je      0x10e <__JIT_ENTRY+0x10e>
    // b8: 4b 89 44 fd 00                movq    %rax, (%r13,%r15,8)
    // bd: 49 8b 7c dd 00                movq    (%r13,%rbx,8), %rdi
    // c2: 48 8b 55 f8                   movq    -0x8(%rbp), %rdx
    // c6: 8b 02                         movl    (%rdx), %eax
    // c8: 85 c0                         testl   %eax, %eax
    // ca: 78 04                         js      0xd0 <__JIT_ENTRY+0xd0>
    // cc: ff c0                         incl    %eax
    // ce: 89 02                         movl    %eax, (%rdx)
    // d0: 49 89 54 dd 00                movq    %rdx, (%r13,%rbx,8)
    // d5: 49 89 4c 24 40                movq    %rcx, 0x40(%r12)
    // da: 8b 07                         movl    (%rdi), %eax
    // dc: 85 c0                         testl   %eax, %eax
    // de: 78 0c                         js      0xec <__JIT_ENTRY+0xec>
    // e0: ff c8                         decl    %eax
    // e2: 89 07                         movl    %eax, (%rdi)
    // e4: 75 06                         jne     0xec <__JIT_ENTRY+0xec>
    // e6: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xec <__JIT_ENTRY+0xec>
    // 00000000000000e8:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // ec: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // f1: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // fa: 48 83 c4 10                   addq    $0x10, %rsp
    // fe: 5d                            popq    %rbp
    // ff: e9 00 00 00 00                jmp     0x104 <__JIT_ENTRY+0x104>
    // 0000000000000100:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 104: 48 83 c4 10                   addq    $0x10, %rsp
    // 108: 5d                            popq    %rbp
    // 109: e9 00 00 00 00                jmp     0x10e <__JIT_ENTRY+0x10e>
    // 000000000000010a:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 10e: 49 89 cd                      movq    %rcx, %r13
    // 111: 48 83 c4 10                   addq    $0x10, %rsp
    // 115: 5d                            popq    %rbp
    // 116: e9 00 00 00 00                jmp     0x11b <__JIT_ENTRY+0x11b>
    // 0000000000000117:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[283] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xc1, 0xf7, 0xd1, 0x4c, 0x63, 0xf9, 0x4b, 0x83,
        0x7c, 0xfd, 0x00, 0x00, 0x0f, 0x85, 0xe2, 0x00,
        0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29,
        0xc1, 0x48, 0x63, 0xd9, 0x49, 0x8b, 0x7c, 0xdd,
        0x00, 0x48, 0x8b, 0x47, 0x08, 0xf6, 0x80, 0xab,
        0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xc2, 0x00,
        0x00, 0x00, 0x8b, 0x87, 0x80, 0x01, 0x00, 0x00,
        0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x85,
        0xb0, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x86, 0xf0,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x84,
        0xa0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0xb7, 0xa0,
        0x03, 0x00, 0x00, 0x48, 0x8b, 0x4e, 0x30, 0x48,
        0x63, 0x49, 0x4c, 0x48, 0x8b, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x63, 0x52, 0x4c, 0x48, 0x01,
        0xca, 0x49, 0x8b, 0x8e, 0xf8, 0x00, 0x00, 0x00,
        0x48, 0x29, 0xc1, 0x48, 0xc1, 0xf9, 0x03, 0x48,
        0x39, 0xd1, 0x7e, 0x70, 0x48, 0x89, 0x75, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x31, 0xf6, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x56,
        0x4b, 0x89, 0x44, 0xfd, 0x00, 0x49, 0x8b, 0x7c,
        0xdd, 0x00, 0x48, 0x8b, 0x55, 0xf8, 0x8b, 0x02,
        0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89, 0x02,
        0x49, 0x89, 0x54, 0xdd, 0x00, 0x49, 0x89, 0x4c,
        0x24, 0x40, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0c,
        0xff, 0xc8, 0x89, 0x07, 0x75, 0x06, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x10,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0xcd, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyType_GenericAlloc+0x0
    // 10: &_Py_InitCleanup+0x0
    // 18: OPERAND0
    // 20: OPARG
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyType_GenericAlloc);
    patch_64(data + 0x10, (uintptr_t)&_Py_InitCleanup);
    patch_64(data + 0x18, instruction->operand0);
    patch_64(data + 0x20, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x76, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xa1, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xe8, (uintptr_t)data + -0x4);
    patch_32r(code + 0x100, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x10a, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x117, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CHECK_ATTR_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_ATTR_CLASS.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // c: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
    // 13: 74 14                         je      0x29 <__JIT_ENTRY+0x29>
    // 15: 8b 80 80 01 00 00             movl    0x180(%rax), %eax
    // 1b: 3b 05 00 00 00 00             cmpl    (%rip), %eax            ## 0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 21: 75 06                         jne     0x29 <__JIT_ENTRY+0x29>
    // 23: 5d                            popq    %rbp
    // 24: e9 00 00 00 00                jmp     0x29 <__JIT_ENTRY+0x29>
    // 0000000000000025:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 29: 5d                            popq    %rbp
    // 2a: e9 00 00 00 00                jmp     0x2f <__JIT_ENTRY+0x2f>
    // 000000000000002b:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[47] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00,
        0x00, 0x00, 0x80, 0x74, 0x14, 0x8b, 0x80, 0x80,
        0x01, 0x00, 0x00, 0x3b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x75, 0x06, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + -0x4);
    patch_32r(code + 0x25, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x2b, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_ATTR_METHOD_LAZY_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_ATTR_METHOD_LAZY_DICT.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // f: 48 83 7c 08 e8 00             cmpq    $0x0, -0x18(%rax,%rcx)
    // 15: 74 06                         je      0x1d <__JIT_ENTRY+0x1d>
    // 17: 5d                            popq    %rbp
    // 18: e9 00 00 00 00                jmp     0x1d <__JIT_ENTRY+0x1d>
    // 0000000000000019:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 1d: 5d                            popq    %rbp
    // 1e: e9 00 00 00 00                jmp     0x23 <__JIT_ENTRY+0x23>
    // 000000000000001f:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[30] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0x7c, 0x08, 0xe8, 0x00, 0x74, 0x06, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_32r(code + 0x19, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_ATTR_MODULE_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_ATTR_MODULE_PUSH_KEYS.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // c: 48 8b 89 90 00 00 00          movq    0x90(%rcx), %rcx
    // 13: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            ## 0x1a <__JIT_ENTRY+0x1a>
    // 0000000000000016:  X86_64_RELOC_GOT_LOAD        _PyModule_Type@GOTPCREL
    // 1a: 48 3b 8a 90 00 00 00          cmpq    0x90(%rdx), %rcx
    // 21: 75 21                         jne     0x44 <__JIT_ENTRY+0x44>
    // 23: 48 8b 40 10                   movq    0x10(%rax), %rax
    // 27: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 2b: 8b 48 0c                      movl    0xc(%rax), %ecx
    // 2e: 3b 0d 00 00 00 00             cmpl    (%rip), %ecx            ## 0x34 <__JIT_ENTRY+0x34>
    // 0000000000000030:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 34: 75 0e                         jne     0x44 <__JIT_ENTRY+0x44>
    // 36: 49 89 45 00                   movq    %rax, (%r13)
    // 3a: 49 83 c5 08                   addq    $0x8, %r13
    // 3e: 5d                            popq    %rbp
    // 3f: e9 00 00 00 00                jmp     0x44 <__JIT_ENTRY+0x44>
    // 0000000000000040:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 44: 5d                            popq    %rbp
    // 45: e9 00 00 00 00                jmp     0x4a <__JIT_ENTRY+0x4a>
    // 0000000000000046:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[74] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b, 0x89, 0x90,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x3b, 0x8a, 0x90, 0x00, 0x00,
        0x00, 0x75, 0x21, 0x48, 0x8b, 0x40, 0x10, 0x48,
        0x8b, 0x40, 0x20, 0x8b, 0x48, 0x0c, 0x3b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x0e, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: &PyModule_Type+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&PyModule_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + -0x4);
    patch_32r(code + 0x40, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x46, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_ATTR_WITH_HINT.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 40 e8                   movq    -0x18(%rax), %rax
    // c: 48 85 c0                      testq   %rax, %rax
    // f: 74 0e                         je      0x1f <__JIT_ENTRY+0x1f>
    // 11: 49 89 45 00                   movq    %rax, (%r13)
    // 15: 49 83 c5 08                   addq    $0x8, %r13
    // 19: 5d                            popq    %rbp
    // 1a: e9 00 00 00 00                jmp     0x1f <__JIT_ENTRY+0x1f>
    // 000000000000001b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 1f: 5d                            popq    %rbp
    // 20: e9 00 00 00 00                jmp     0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[37] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x40, 0xe8, 0x48, 0x85, 0xc0, 0x74,
        0x0e, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5,
        0x08, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x1b, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x21, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_CALL_BOUND_METHOD_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: 89 c1                         movl    %eax, %ecx
    // d: f7 d1                         notl    %ecx
    // f: 48 63 c9                      movslq  %ecx, %rcx
    // 12: 49 83 7c cd 00 00             cmpq    $0x0, (%r13,%rcx,8)
    // 18: 75 1c                         jne     0x36 <__JIT_ENTRY+0x36>
    // 1a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       ## imm = 0xFFFFFFFE
    // 1f: 29 c1                         subl    %eax, %ecx
    // 21: 48 63 c1                      movslq  %ecx, %rax
    // 24: 49 8b 44 c5 00                movq    (%r13,%rax,8), %rax
    // 29: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 2d: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x34 <__JIT_ENTRY+0x34>
    // 0000000000000030:  X86_64_RELOC_GOT     _PyMethod_Type@GOTPCREL
    // 34: 74 06                         je      0x3c <__JIT_ENTRY+0x3c>
    // 36: 5d                            popq    %rbp
    // 37: e9 00 00 00 00                jmp     0x3c <__JIT_ENTRY+0x3c>
    // 0000000000000038:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 3c: 5d                            popq    %rbp
    // 3d: e9 00 00 00 00                jmp     0x42 <__JIT_ENTRY+0x42>
    // 000000000000003e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[61] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x48,
        0x63, 0xc9, 0x49, 0x83, 0x7c, 0xcd, 0x00, 0x00,
        0x75, 0x1c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29,
        0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8b, 0x44, 0xc5,
        0x00, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x74, 0x06, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &PyMethod_Type+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + -0x4);
    patch_32r(code + 0x38, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_EG_MATCH(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_EG_MATCH.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 20                   subq    $0x20, %rsp
    // 8: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // c: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 10: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 15: 4c 89 f7                      movq    %r14, %rdi
    // 18: 48 89 de                      movq    %rbx, %rsi
    // 1b: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_GOT     __PyEval_CheckExceptStarTypeValid@GOTPCREL
    // 21: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 26: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 2f: 85 c0                         testl   %eax, %eax
    // 31: 0f 88 c5 00 00 00             js      0xfc <__JIT_ENTRY+0xfc>
    // 37: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // 3b: 48 c7 45 f8 00 00 00 00       movq    $0x0, -0x8(%rbp)
    // 43: 48 c7 45 e8 00 00 00 00       movq    $0x0, -0x18(%rbp)
    // 4b: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 50: 48 8d 4d f8                   leaq    -0x8(%rbp), %rcx
    // 54: 4c 8d 45 e8                   leaq    -0x18(%rbp), %r8
    // 58: 4c 89 e7                      movq    %r12, %rdi
    // 5b: 4c 89 fe                      movq    %r15, %rsi
    // 5e: 48 89 da                      movq    %rbx, %rdx
    // 61: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x67 <__JIT_ENTRY+0x67>
    // 0000000000000063:  X86_64_RELOC_GOT     __PyEval_ExceptionGroupMatch@GOTPCREL
    // 67: 41 89 c6                      movl    %eax, %r14d
    // 6a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 6f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 78: 41 8b 07                      movl    (%r15), %eax
    // 7b: 85 c0                         testl   %eax, %eax
    // 7d: 78 10                         js      0x8f <__JIT_ENTRY+0x8f>
    // 7f: ff c8                         decl    %eax
    // 81: 41 89 07                      movl    %eax, (%r15)
    // 84: 75 09                         jne     0x8f <__JIT_ENTRY+0x8f>
    // 86: 4c 89 ff                      movq    %r15, %rdi
    // 89: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x8f <__JIT_ENTRY+0x8f>
    // 000000000000008b:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 8f: 8b 03                         movl    (%rbx), %eax
    // 91: 85 c0                         testl   %eax, %eax
    // 93: 78 0a                         js      0x9f <__JIT_ENTRY+0x9f>
    // 95: ff c8                         decl    %eax
    // 97: 89 03                         movl    %eax, (%rbx)
    // 99: 0f 84 97 00 00 00             je      0x136 <__JIT_ENTRY+0x136>
    // 9f: 45 85 f6                      testl   %r14d, %r14d
    // a2: 0f 88 a0 00 00 00             js      0x148 <__JIT_ENTRY+0x148>
    // a8: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // ac: 48 85 ff                      testq   %rdi, %rdi
    // af: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // b3: 74 73                         je      0x128 <__JIT_ENTRY+0x128>
    // b5: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xbc <__JIT_ENTRY+0xbc>
    // 00000000000000b8:  X86_64_RELOC_GOT_LOAD        __Py_NoneStruct@GOTPCREL
    // bc: 48 39 c7                      cmpq    %rax, %rdi
    // bf: 74 25                         je      0xe6 <__JIT_ENTRY+0xe6>
    // c1: 49 83 c5 f0                   addq    $-0x10, %r13
    // c5: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // ca: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xd0 <__JIT_ENTRY+0xd0>
    // 00000000000000cc:  X86_64_RELOC_GOT     _PyErr_SetHandledException@GOTPCREL
    // d0: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // d5: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // de: 49 83 c5 10                   addq    $0x10, %r13
    // e2: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // e6: 48 8b 4d e8                   movq    -0x18(%rbp), %rcx
    // ea: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
    // ee: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // f2: 48 83 c4 20                   addq    $0x20, %rsp
    // f6: 5d                            popq    %rbp
    // f7: e9 00 00 00 00                jmp     0xfc <__JIT_ENTRY+0xfc>
    // 00000000000000f8:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // fc: 41 8b 07                      movl    (%r15), %eax
    // ff: 85 c0                         testl   %eax, %eax
    // 101: 78 10                         js      0x113 <__JIT_ENTRY+0x113>
    // 103: ff c8                         decl    %eax
    // 105: 41 89 07                      movl    %eax, (%r15)
    // 108: 75 09                         jne     0x113 <__JIT_ENTRY+0x113>
    // 10a: 4c 89 ff                      movq    %r15, %rdi
    // 10d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x113 <__JIT_ENTRY+0x113>
    // 000000000000010f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 113: 8b 03                         movl    (%rbx), %eax
    // 115: 85 c0                         testl   %eax, %eax
    // 117: 78 0f                         js      0x128 <__JIT_ENTRY+0x128>
    // 119: ff c8                         decl    %eax
    // 11b: 89 03                         movl    %eax, (%rbx)
    // 11d: 75 09                         jne     0x128 <__JIT_ENTRY+0x128>
    // 11f: 48 89 df                      movq    %rbx, %rdi
    // 122: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x128 <__JIT_ENTRY+0x128>
    // 0000000000000124:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 128: 49 83 c5 f0                   addq    $-0x10, %r13
    // 12c: 48 83 c4 20                   addq    $0x20, %rsp
    // 130: 5d                            popq    %rbp
    // 131: e9 00 00 00 00                jmp     0x136 <__JIT_ENTRY+0x136>
    // 0000000000000132:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 136: 48 89 df                      movq    %rbx, %rdi
    // 139: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x13f <__JIT_ENTRY+0x13f>
    // 000000000000013b:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 13f: 45 85 f6                      testl   %r14d, %r14d
    // 142: 0f 89 60 ff ff ff             jns     0xa8 <__JIT_ENTRY+0xa8>
    // 148: 49 83 c5 f0                   addq    $-0x10, %r13
    // 14c: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 150: 48 83 c4 20                   addq    $0x20, %rsp
    // 154: 5d                            popq    %rbp
    // 155: e9 00 00 00 00                jmp     0x15a <__JIT_ENTRY+0x15a>
    // 0000000000000156:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[346] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x20,
        0x4d, 0x8b, 0x7d, 0xf0, 0x49, 0x8b, 0x5d, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x4c, 0x89, 0xf7,
        0x48, 0x89, 0xde, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x85,
        0xc0, 0x0f, 0x88, 0xc5, 0x00, 0x00, 0x00, 0x4c,
        0x89, 0x75, 0xf0, 0x48, 0xc7, 0x45, 0xf8, 0x00,
        0x00, 0x00, 0x00, 0x48, 0xc7, 0x45, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x48, 0x8d, 0x4d, 0xf8, 0x4c, 0x8d, 0x45, 0xe8,
        0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0x48, 0x89,
        0xda, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x41,
        0x89, 0xc6, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x41, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x10, 0xff,
        0xc8, 0x41, 0x89, 0x07, 0x75, 0x09, 0x4c, 0x89,
        0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x03, 0x85, 0xc0, 0x78, 0x0a, 0xff, 0xc8, 0x89,
        0x03, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x45,
        0x85, 0xf6, 0x0f, 0x88, 0xa0, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x85, 0xff, 0x4c,
        0x8b, 0x75, 0xf0, 0x74, 0x73, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74,
        0x25, 0x49, 0x83, 0xc5, 0xf0, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83,
        0xc5, 0x10, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b,
        0x4d, 0xe8, 0x49, 0x89, 0x4d, 0xf0, 0x49, 0x89,
        0x45, 0xf8, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x10, 0xff, 0xc8, 0x41, 0x89, 0x07,
        0x75, 0x09, 0x4c, 0x89, 0xff, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x0f, 0xff, 0xc8, 0x89, 0x03, 0x75, 0x09, 0x48,
        0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x83, 0xc5, 0xf0, 0x48, 0x83, 0xc4, 0x20,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x45,
        0x85, 0xf6, 0x0f, 0x89, 0x60, 0xff, 0xff, 0xff,
        0x49, 0x83, 0xc5, 0xf0, 0x4c, 0x8b, 0x75, 0xf0,
        0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyErr_SetHandledException+0x0
    // 10: &_Py_NoneStruct+0x0
    // 18: &_PyEval_ExceptionGroupMatch+0x0
    // 20: &_PyEval_CheckExceptStarTypeValid+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyErr_SetHandledException);
    patch_64(data + 0x10, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x18, (uintptr_t)&_PyEval_ExceptionGroupMatch);
    patch_64(data + 0x20, (uintptr_t)&_PyEval_CheckExceptStarTypeValid);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x63, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x8b, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xb8, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xcc, (uintptr_t)data + 0x4);
    patch_32r(code + 0xf8, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x10f, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x124, (uintptr_t)data + -0x4);
    patch_32r(code + 0x132, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x13b, (uintptr_t)data + -0x4);
    patch_32r(code + 0x156, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CHECK_EXC_MATCH(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_EXC_MATCH.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // 8: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 4c 89 f7                      movq    %r14, %rdi
    // 14: 48 89 de                      movq    %rbx, %rsi
    // 17: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x1d <__JIT_ENTRY+0x1d>
    // 0000000000000019:  X86_64_RELOC_GOT     __PyEval_CheckExceptTypeValid@GOTPCREL
    // 1d: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 22: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 2b: 85 c0                         testl   %eax, %eax
    // 2d: 78 40                         js      0x6f <__JIT_ENTRY+0x6f>
    // 2f: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 34: 4c 89 ff                      movq    %r15, %rdi
    // 37: 48 89 de                      movq    %rbx, %rsi
    // 3a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x40 <__JIT_ENTRY+0x40>
    // 000000000000003c:  X86_64_RELOC_GOT     _PyErr_GivenExceptionMatches@GOTPCREL
    // 40: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 45: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 4e: 8b 0b                         movl    (%rbx), %ecx
    // 50: 85 c9                         testl   %ecx, %ecx
    // 52: 78 06                         js      0x5a <__JIT_ENTRY+0x5a>
    // 54: ff c9                         decl    %ecx
    // 56: 89 0b                         movl    %ecx, (%rbx)
    // 58: 74 2b                         je      0x85 <__JIT_ENTRY+0x85>
    // 5a: 85 c0                         testl   %eax, %eax
    // 5c: 75 38                         jne     0x96 <__JIT_ENTRY+0x96>
    // 5e: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x65 <__JIT_ENTRY+0x65>
    // 0000000000000061:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // 65: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 69: 5d                            popq    %rbp
    // 6a: e9 00 00 00 00                jmp     0x6f <__JIT_ENTRY+0x6f>
    // 000000000000006b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 6f: 8b 03                         movl    (%rbx), %eax
    // 71: 85 c0                         testl   %eax, %eax
    // 73: 78 06                         js      0x7b <__JIT_ENTRY+0x7b>
    // 75: ff c8                         decl    %eax
    // 77: 89 03                         movl    %eax, (%rbx)
    // 79: 74 2c                         je      0xa7 <__JIT_ENTRY+0xa7>
    // 7b: 49 83 c5 f8                   addq    $-0x8, %r13
    // 7f: 5d                            popq    %rbp
    // 80: e9 00 00 00 00                jmp     0x85 <__JIT_ENTRY+0x85>
    // 0000000000000081:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 85: 48 89 df                      movq    %rbx, %rdi
    // 88: 89 c3                         movl    %eax, %ebx
    // 8a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x90 <__JIT_ENTRY+0x90>
    // 000000000000008c:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 90: 89 d8                         movl    %ebx, %eax
    // 92: 85 c0                         testl   %eax, %eax
    // 94: 74 c8                         je      0x5e <__JIT_ENTRY+0x5e>
    // 96: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x9d <__JIT_ENTRY+0x9d>
    // 0000000000000099:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // 9d: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // a1: 5d                            popq    %rbp
    // a2: e9 00 00 00 00                jmp     0xa7 <__JIT_ENTRY+0xa7>
    // 00000000000000a3:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // a7: 48 89 df                      movq    %rbx, %rdi
    // aa: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xb0 <__JIT_ENTRY+0xb0>
    // 00000000000000ac:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // b0: 49 83 c5 f8                   addq    $-0x8, %r13
    // b4: 5d                            popq    %rbp
    // b5: e9 00 00 00 00                jmp     0xba <__JIT_ENTRY+0xba>
    // 00000000000000b6:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[186] = {
        0x55, 0x48, 0x89, 0xe5, 0x4d, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x5d, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x40, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x4c, 0x89, 0xff, 0x48,
        0x89, 0xde, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0b,
        0x85, 0xc9, 0x78, 0x06, 0xff, 0xc9, 0x89, 0x0b,
        0x74, 0x2b, 0x85, 0xc0, 0x75, 0x38, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45,
        0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x03, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89,
        0x03, 0x74, 0x2c, 0x49, 0x83, 0xc5, 0xf8, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf,
        0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xd8, 0x85, 0xc0, 0x74, 0xc8, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45,
        0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x83, 0xc5, 0xf8, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: &_Py_FalseStruct+0x0
    // 18: &PyErr_GivenExceptionMatches+0x0
    // 20: &_PyEval_CheckExceptTypeValid+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)&PyErr_GivenExceptionMatches);
    patch_64(data + 0x20, (uintptr_t)&_PyEval_CheckExceptTypeValid);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)data + 0xc);
    patch_32r(code + 0x6b, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x81, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x8c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x99, (uintptr_t)data + 0x4);
    patch_32r(code + 0xa3, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xac, (uintptr_t)data + -0x4);
    patch_32r(code + 0xb6, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CHECK_FUNCTION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_FUNCTION.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 44 24 10                movq    0x10(%r12), %rax
    // 9: 8b 80 90 00 00 00             movl    0x90(%rax), %eax
    // f: 3b 05 00 00 00 00             cmpl    (%rip), %eax            ## 0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 15: 75 06                         jne     0x1d <__JIT_ENTRY+0x1d>
    // 17: 5d                            popq    %rbp
    // 18: e9 00 00 00 00                jmp     0x1d <__JIT_ENTRY+0x1d>
    // 0000000000000019:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 1d: 5d                            popq    %rbp
    // 1e: e9 00 00 00 00                jmp     0x23 <__JIT_ENTRY+0x23>
    // 000000000000001f:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[35] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x44, 0x24,
        0x10, 0x8b, 0x80, 0x90, 0x00, 0x00, 0x00, 0x3b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x75, 0x06, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
    patch_32r(code + 0x19, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x1f, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_FUNCTION_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_FUNCTION_EXACT_ARGS.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: 89 c1                         movl    %eax, %ecx
    // d: f7 d1                         notl    %ecx
    // f: 48 63 c9                      movslq  %ecx, %rcx
    // 12: ba fe ff ff ff                movl    $0xfffffffe, %edx       ## imm = 0xFFFFFFFE
    // 17: 29 c2                         subl    %eax, %edx
    // 19: 48 63 d2                      movslq  %edx, %rdx
    // 1c: 49 8b 54 d5 00                movq    (%r13,%rdx,8), %rdx
    // 21: 48 8b 52 30                   movq    0x30(%rdx), %rdx
    // 25: 49 83 7c cd 00 01             cmpq    $0x1, (%r13,%rcx,8)
    // 2b: 83 d8 ff                      sbbl    $-0x1, %eax
    // 2e: 39 42 34                      cmpl    %eax, 0x34(%rdx)
    // 31: 75 06                         jne     0x39 <__JIT_ENTRY+0x39>
    // 33: 5d                            popq    %rbp
    // 34: e9 00 00 00 00                jmp     0x39 <__JIT_ENTRY+0x39>
    // 0000000000000035:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 39: 5d                            popq    %rbp
    // 3a: e9 00 00 00 00                jmp     0x3f <__JIT_ENTRY+0x3f>
    // 000000000000003b:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[63] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x48,
        0x63, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29,
        0xc2, 0x48, 0x63, 0xd2, 0x49, 0x8b, 0x54, 0xd5,
        0x00, 0x48, 0x8b, 0x52, 0x30, 0x49, 0x83, 0x7c,
        0xcd, 0x00, 0x01, 0x83, 0xd8, 0xff, 0x39, 0x42,
        0x34, 0x75, 0x06, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_32r(code + 0x35, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x3b, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_FUNCTION_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_FUNCTION_VERSION.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: 48 c7 c1 fe ff ff ff          movq    $-0x2, %rcx
    // 12: 48 29 c1                      subq    %rax, %rcx
    // 15: 49 8b 44 cd 00                movq    (%r13,%rcx,8), %rax
    // 1a: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 1e: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            ## 0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_GOT     _PyFunction_Type@GOTPCREL
    // 25: 75 14                         jne     0x3b <__JIT_ENTRY+0x3b>
    // 27: 8b 80 90 00 00 00             movl    0x90(%rax), %eax
    // 2d: 3b 05 00 00 00 00             cmpl    (%rip), %eax            ## 0x33 <__JIT_ENTRY+0x33>
    // 000000000000002f:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 33: 75 06                         jne     0x3b <__JIT_ENTRY+0x3b>
    // 35: 5d                            popq    %rbp
    // 36: e9 00 00 00 00                jmp     0x3b <__JIT_ENTRY+0x3b>
    // 0000000000000037:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3b: 5d                            popq    %rbp
    // 3c: e9 00 00 00 00                jmp     0x41 <__JIT_ENTRY+0x41>
    // 000000000000003d:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[65] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0xc7, 0xc1, 0xfe, 0xff,
        0xff, 0xff, 0x48, 0x29, 0xc1, 0x49, 0x8b, 0x44,
        0xcd, 0x00, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x3b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x75, 0x14, 0x8b,
        0x80, 0x90, 0x00, 0x00, 0x00, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x75, 0x06, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: OPERAND0
    // 8: &PyFunction_Type+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)data + -0x4);
    patch_32r(code + 0x37, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x3d, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_FUNCTION_VERSION_INLINE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_FUNCTION_VERSION_INLINE.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_OPERAND1@GOTPCREL
    // b: 8b 80 90 00 00 00             movl    0x90(%rax), %eax
    // 11: 3b 05 00 00 00 00             cmpl    (%rip), %eax            ## 0x17 <__JIT_ENTRY+0x17>
    // 0000000000000013:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 17: 75 06                         jne     0x1f <__JIT_ENTRY+0x1f>
    // 19: 5d                            popq    %rbp
    // 1a: e9 00 00 00 00                jmp     0x1f <__JIT_ENTRY+0x1f>
    // 000000000000001b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 1f: 5d                            popq    %rbp
    // 20: e9 00 00 00 00                jmp     0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[37] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x80, 0x90, 0x00, 0x00,
        0x00, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x06, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: OPERAND1
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->operand1);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + -0x4);
    patch_32r(code + 0x1b, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x21, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_FUNCTION_VERSION_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_FUNCTION_VERSION_KW.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: 48 c7 c1 fd ff ff ff          movq    $-0x3, %rcx
    // 12: 48 29 c1                      subq    %rax, %rcx
    // 15: 49 8b 44 cd 00                movq    (%r13,%rcx,8), %rax
    // 1a: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 1e: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            ## 0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_GOT     _PyFunction_Type@GOTPCREL
    // 25: 75 14                         jne     0x3b <__JIT_ENTRY+0x3b>
    // 27: 8b 80 90 00 00 00             movl    0x90(%rax), %eax
    // 2d: 3b 05 00 00 00 00             cmpl    (%rip), %eax            ## 0x33 <__JIT_ENTRY+0x33>
    // 000000000000002f:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 33: 75 06                         jne     0x3b <__JIT_ENTRY+0x3b>
    // 35: 5d                            popq    %rbp
    // 36: e9 00 00 00 00                jmp     0x3b <__JIT_ENTRY+0x3b>
    // 0000000000000037:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3b: 5d                            popq    %rbp
    // 3c: e9 00 00 00 00                jmp     0x41 <__JIT_ENTRY+0x41>
    // 000000000000003d:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[65] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0xc7, 0xc1, 0xfd, 0xff,
        0xff, 0xff, 0x48, 0x29, 0xc1, 0x49, 0x8b, 0x44,
        0xcd, 0x00, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x3b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x75, 0x14, 0x8b,
        0x80, 0x90, 0x00, 0x00, 0x00, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x75, 0x06, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: OPERAND0
    // 8: &PyFunction_Type+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)data + -0x4);
    patch_32r(code + 0x37, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x3d, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_IS_NOT_PY_CALLABLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_IS_NOT_PY_CALLABLE.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: 48 c7 c1 fe ff ff ff          movq    $-0x2, %rcx
    // 12: 48 29 c1                      subq    %rax, %rcx
    // 15: 49 8b 44 cd 00                movq    (%r13,%rcx,8), %rax
    // 1a: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 1e: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_GOT     _PyFunction_Type@GOTPCREL
    // 25: 74 0f                         je      0x36 <__JIT_ENTRY+0x36>
    // 27: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x2e <__JIT_ENTRY+0x2e>
    // 000000000000002a:  X86_64_RELOC_GOT     _PyMethod_Type@GOTPCREL
    // 2e: 74 06                         je      0x36 <__JIT_ENTRY+0x36>
    // 30: 5d                            popq    %rbp
    // 31: e9 00 00 00 00                jmp     0x36 <__JIT_ENTRY+0x36>
    // 0000000000000032:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 36: 5d                            popq    %rbp
    // 37: e9 00 00 00 00                jmp     0x3c <__JIT_ENTRY+0x3c>
    // 0000000000000038:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[60] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0xc7, 0xc1, 0xfe, 0xff,
        0xff, 0xff, 0x48, 0x29, 0xc1, 0x49, 0x8b, 0x44,
        0xcd, 0x00, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x74, 0x0f, 0x48,
        0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74, 0x06,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyMethod_Type+0x0
    // 8: &PyFunction_Type+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)data + -0x4);
    patch_32r(code + 0x32, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x38, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_IS_NOT_PY_CALLABLE_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_IS_NOT_PY_CALLABLE_KW.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: 48 c7 c1 fd ff ff ff          movq    $-0x3, %rcx
    // 12: 48 29 c1                      subq    %rax, %rcx
    // 15: 49 8b 44 cd 00                movq    (%r13,%rcx,8), %rax
    // 1a: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 1e: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_GOT     _PyFunction_Type@GOTPCREL
    // 25: 74 0f                         je      0x36 <__JIT_ENTRY+0x36>
    // 27: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x2e <__JIT_ENTRY+0x2e>
    // 000000000000002a:  X86_64_RELOC_GOT     _PyMethod_Type@GOTPCREL
    // 2e: 74 06                         je      0x36 <__JIT_ENTRY+0x36>
    // 30: 5d                            popq    %rbp
    // 31: e9 00 00 00 00                jmp     0x36 <__JIT_ENTRY+0x36>
    // 0000000000000032:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 36: 5d                            popq    %rbp
    // 37: e9 00 00 00 00                jmp     0x3c <__JIT_ENTRY+0x3c>
    // 0000000000000038:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[60] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0xc7, 0xc1, 0xfd, 0xff,
        0xff, 0xff, 0x48, 0x29, 0xc1, 0x49, 0x8b, 0x44,
        0xcd, 0x00, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x74, 0x0f, 0x48,
        0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74, 0x06,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyMethod_Type+0x0
    // 8: &PyFunction_Type+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)data + -0x4);
    patch_32r(code + 0x32, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x38, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_MANAGED_OBJECT_HAS_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_MANAGED_OBJECT_HAS_VALUES.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // c: 48 8b 49 20                   movq    0x20(%rcx), %rcx
    // 10: 80 7c 08 03 00                cmpb    $0x0, 0x3(%rax,%rcx)
    // 15: 74 06                         je      0x1d <__JIT_ENTRY+0x1d>
    // 17: 5d                            popq    %rbp
    // 18: e9 00 00 00 00                jmp     0x1d <__JIT_ENTRY+0x1d>
    // 0000000000000019:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 1d: 5d                            popq    %rbp
    // 1e: e9 00 00 00 00                jmp     0x23 <__JIT_ENTRY+0x23>
    // 000000000000001f:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[35] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b, 0x49, 0x20,
        0x80, 0x7c, 0x08, 0x03, 0x00, 0x74, 0x06, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x19, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x1f, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_METHOD_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_METHOD_VERSION.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       ## imm = 0xFFFFFFFE
    // 10: 29 c1                         subl    %eax, %ecx
    // 12: 48 63 c9                      movslq  %ecx, %rcx
    // 15: 49 8b 4c cd 00                movq    (%r13,%rcx,8), %rcx
    // 1a: 48 8b 51 08                   movq    0x8(%rcx), %rdx
    // 1e: 48 3b 15 00 00 00 00          cmpq    (%rip), %rdx            ## 0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_GOT     _PyMethod_Type@GOTPCREL
    // 25: 75 2b                         jne     0x52 <__JIT_ENTRY+0x52>
    // 27: 48 8b 49 10                   movq    0x10(%rcx), %rcx
    // 2b: 48 8b 51 08                   movq    0x8(%rcx), %rdx
    // 2f: 48 3b 15 00 00 00 00          cmpq    (%rip), %rdx            ## 0x36 <__JIT_ENTRY+0x36>
    // 0000000000000032:  X86_64_RELOC_GOT     _PyFunction_Type@GOTPCREL
    // 36: 75 1a                         jne     0x52 <__JIT_ENTRY+0x52>
    // 38: 8b 89 90 00 00 00             movl    0x90(%rcx), %ecx
    // 3e: 3b 0d 00 00 00 00             cmpl    (%rip), %ecx            ## 0x44 <__JIT_ENTRY+0x44>
    // 0000000000000040:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 44: 75 0c                         jne     0x52 <__JIT_ENTRY+0x52>
    // 46: f7 d0                         notl    %eax
    // 48: 48 98                         cltq
    // 4a: 49 83 7c c5 00 00             cmpq    $0x0, (%r13,%rax,8)
    // 50: 74 06                         je      0x58 <__JIT_ENTRY+0x58>
    // 52: 5d                            popq    %rbp
    // 53: e9 00 00 00 00                jmp     0x58 <__JIT_ENTRY+0x58>
    // 0000000000000054:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 58: 5d                            popq    %rbp
    // 59: e9 00 00 00 00                jmp     0x5e <__JIT_ENTRY+0x5e>
    // 000000000000005a:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[89] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x4c,
        0xcd, 0x00, 0x48, 0x8b, 0x51, 0x08, 0x48, 0x3b,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x75, 0x2b, 0x48,
        0x8b, 0x49, 0x10, 0x48, 0x8b, 0x51, 0x08, 0x48,
        0x3b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1a,
        0x8b, 0x89, 0x90, 0x00, 0x00, 0x00, 0x3b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x0c, 0xf7, 0xd0,
        0x48, 0x98, 0x49, 0x83, 0x7c, 0xc5, 0x00, 0x00,
        0x74, 0x06, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x5d,
    };
    // 0: OPERAND0
    // 8: &PyFunction_Type+0x0
    // 10: &PyMethod_Type+0x0
    // 18: OPARG
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x18, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + -0x4);
    patch_32r(code + 0x54, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_METHOD_VERSION_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_METHOD_VERSION_KW.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: b9 fd ff ff ff                movl    $0xfffffffd, %ecx       ## imm = 0xFFFFFFFD
    // 10: 29 c1                         subl    %eax, %ecx
    // 12: 48 63 c9                      movslq  %ecx, %rcx
    // 15: 49 8b 4c cd 00                movq    (%r13,%rcx,8), %rcx
    // 1a: 48 8b 51 08                   movq    0x8(%rcx), %rdx
    // 1e: 48 3b 15 00 00 00 00          cmpq    (%rip), %rdx            ## 0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_GOT     _PyMethod_Type@GOTPCREL
    // 25: 75 31                         jne     0x58 <__JIT_ENTRY+0x58>
    // 27: 48 8b 49 10                   movq    0x10(%rcx), %rcx
    // 2b: 48 8b 51 08                   movq    0x8(%rcx), %rdx
    // 2f: 48 3b 15 00 00 00 00          cmpq    (%rip), %rdx            ## 0x36 <__JIT_ENTRY+0x36>
    // 0000000000000032:  X86_64_RELOC_GOT     _PyFunction_Type@GOTPCREL
    // 36: 75 20                         jne     0x58 <__JIT_ENTRY+0x58>
    // 38: 8b 89 90 00 00 00             movl    0x90(%rcx), %ecx
    // 3e: 3b 0d 00 00 00 00             cmpl    (%rip), %ecx            ## 0x44 <__JIT_ENTRY+0x44>
    // 0000000000000040:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 44: 75 12                         jne     0x58 <__JIT_ENTRY+0x58>
    // 46: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       ## imm = 0xFFFFFFFE
    // 4b: 29 c1                         subl    %eax, %ecx
    // 4d: 48 63 c1                      movslq  %ecx, %rax
    // 50: 49 83 7c c5 00 00             cmpq    $0x0, (%r13,%rax,8)
    // 56: 74 06                         je      0x5e <__JIT_ENTRY+0x5e>
    // 58: 5d                            popq    %rbp
    // 59: e9 00 00 00 00                jmp     0x5e <__JIT_ENTRY+0x5e>
    // 000000000000005a:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 5e: 5d                            popq    %rbp
    // 5f: e9 00 00 00 00                jmp     0x64 <__JIT_ENTRY+0x64>
    // 0000000000000060:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[95] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xb9, 0xfd, 0xff, 0xff, 0xff,
        0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x4c,
        0xcd, 0x00, 0x48, 0x8b, 0x51, 0x08, 0x48, 0x3b,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x75, 0x31, 0x48,
        0x8b, 0x49, 0x10, 0x48, 0x8b, 0x51, 0x08, 0x48,
        0x3b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x75, 0x20,
        0x8b, 0x89, 0x90, 0x00, 0x00, 0x00, 0x3b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x12, 0xb9, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1,
        0x49, 0x83, 0x7c, 0xc5, 0x00, 0x00, 0x74, 0x06,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d,
    };
    // 0: OPERAND0
    // 8: &PyFunction_Type+0x0
    // 10: &PyMethod_Type+0x0
    // 18: OPARG
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x18, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + -0x4);
    patch_32r(code + 0x5a, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_PEP_523(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_PEP_523.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 46 10                   movq    0x10(%r14), %rax
    // 8: 48 83 b8 48 21 00 00 00       cmpq    $0x0, 0x2148(%rax)
    // 10: 74 06                         je      0x18 <__JIT_ENTRY+0x18>
    // 12: 5d                            popq    %rbp
    // 13: e9 00 00 00 00                jmp     0x18 <__JIT_ENTRY+0x18>
    // 0000000000000014:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 18: 5d                            popq    %rbp
    // 19: e9 00 00 00 00                jmp     0x1e <__JIT_ENTRY+0x1e>
    // 000000000000001a:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[25] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x46, 0x10,
        0x48, 0x83, 0xb8, 0x48, 0x21, 0x00, 0x00, 0x00,
        0x74, 0x06, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x14, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_PERIODIC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_PERIODIC.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 46 18                   movq    0x18(%r14), %rax
    // 4: 84 c0                         testb   %al, %al
    // 6: 0f 84 00 00 00 00             je      0xc <__JIT_ENTRY+0xc>
    // 0000000000000008:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // c: 55                            pushq   %rbp
    // d: 48 89 e5                      movq    %rsp, %rbp
    // 10: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 15: 4c 89 f7                      movq    %r14, %rdi
    // 18: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x1e <__JIT_ENTRY+0x1e>
    // 000000000000001a:  X86_64_RELOC_GOT     __Py_HandlePending@GOTPCREL
    // 1e: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 23: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 2c: 85 c0                         testl   %eax, %eax
    // 2e: 5d                            popq    %rbp
    // 2f: 0f 84 00 00 00 00             je      0x35 <__JIT_ENTRY+0x35>
    // 0000000000000031:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 35: e9 00 00 00 00                jmp     0x3a <__JIT_ENTRY+0x3a>
    // 0000000000000036:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[58] = {
        0x49, 0x8b, 0x46, 0x18, 0x84, 0xc0, 0x0f, 0x84,
        0x00, 0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x4c, 0x89, 0xf7,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x5d, 0x0f,
        0x84, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &_Py_HandlePending+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_HandlePending);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x8, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + -0x4);
    patch_32r(code + 0x31, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x36, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CHECK_PERIODIC_IF_NOT_YIELD_FROM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_PERIODIC_IF_NOT_YIELD_FROM.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x7 <__JIT_ENTRY+0x7>
    // 0000000000000003:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 7: a8 02                         testb   $0x2, %al
    // 9: 0f 85 00 00 00 00             jne     0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // f: 49 8b 46 18                   movq    0x18(%r14), %rax
    // 13: 84 c0                         testb   %al, %al
    // 15: 0f 84 00 00 00 00             je      0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 1b: 55                            pushq   %rbp
    // 1c: 48 89 e5                      movq    %rsp, %rbp
    // 1f: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 24: 4c 89 f7                      movq    %r14, %rdi
    // 27: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2d <__JIT_ENTRY+0x2d>
    // 0000000000000029:  X86_64_RELOC_GOT     __Py_HandlePending@GOTPCREL
    // 2d: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 32: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3b: 85 c0                         testl   %eax, %eax
    // 3d: 5d                            popq    %rbp
    // 3e: 0f 84 00 00 00 00             je      0x44 <__JIT_ENTRY+0x44>
    // 0000000000000040:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 44: e9 00 00 00 00                jmp     0x49 <__JIT_ENTRY+0x49>
    // 0000000000000045:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[73] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xa8,
        0x02, 0x0f, 0x85, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x46, 0x18, 0x84, 0xc0, 0x0f, 0x84, 0x00,
        0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x4c, 0x89, 0xf7, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x5d, 0x0f, 0x84,
        0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &_Py_HandlePending+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_HandlePending);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + 0x4);
    patch_32r(code + 0xb, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x17, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + -0x4);
    patch_32r(code + 0x40, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x45, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CHECK_STACK_SPACE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_STACK_SPACE.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 86 f0 00 00 00          movq    0xf0(%r14), %rax
    // b: 48 85 c0                      testq   %rax, %rax
    // e: 74 38                         je      0x48 <__JIT_ENTRY+0x48>
    // 10: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x17 <__JIT_ENTRY+0x17>
    // 0000000000000013:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 17: 48 c7 c2 fe ff ff ff          movq    $-0x2, %rdx
    // 1e: 48 29 ca                      subq    %rcx, %rdx
    // 21: 49 8b 4c d5 00                movq    (%r13,%rdx,8), %rcx
    // 26: 48 8b 49 30                   movq    0x30(%rcx), %rcx
    // 2a: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
    // 2e: 49 8b 96 f8 00 00 00          movq    0xf8(%r14), %rdx
    // 35: 48 29 c2                      subq    %rax, %rdx
    // 38: 48 c1 fa 03                   sarq    $0x3, %rdx
    // 3c: 48 39 ca                      cmpq    %rcx, %rdx
    // 3f: 7e 07                         jle     0x48 <__JIT_ENTRY+0x48>
    // 41: 41 83 7e 2c 01                cmpl    $0x1, 0x2c(%r14)
    // 46: 7f 06                         jg      0x4e <__JIT_ENTRY+0x4e>
    // 48: 5d                            popq    %rbp
    // 49: e9 00 00 00 00                jmp     0x4e <__JIT_ENTRY+0x4e>
    // 000000000000004a:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 4e: 5d                            popq    %rbp
    // 4f: e9 00 00 00 00                jmp     0x54 <__JIT_ENTRY+0x54>
    // 0000000000000050:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[79] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x86, 0xf0,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x38,
        0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0xc7, 0xc2, 0xfe, 0xff, 0xff, 0xff, 0x48, 0x29,
        0xca, 0x49, 0x8b, 0x4c, 0xd5, 0x00, 0x48, 0x8b,
        0x49, 0x30, 0x48, 0x63, 0x49, 0x4c, 0x49, 0x8b,
        0x96, 0xf8, 0x00, 0x00, 0x00, 0x48, 0x29, 0xc2,
        0x48, 0xc1, 0xfa, 0x03, 0x48, 0x39, 0xca, 0x7e,
        0x07, 0x41, 0x83, 0x7e, 0x2c, 0x01, 0x7f, 0x06,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + -0x4);
    patch_32r(code + 0x4a, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_STACK_SPACE_OPERAND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_STACK_SPACE_OPERAND.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 86 f0 00 00 00          movq    0xf0(%r14), %rax
    // b: 48 85 c0                      testq   %rax, %rax
    // e: 74 21                         je      0x31 <__JIT_ENTRY+0x31>
    // 10: 48 63 0d 00 00 00 00          movslq  (%rip), %rcx            ## 0x17 <__JIT_ENTRY+0x17>
    // 0000000000000013:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 17: 49 8b 96 f8 00 00 00          movq    0xf8(%r14), %rdx
    // 1e: 48 29 c2                      subq    %rax, %rdx
    // 21: 48 c1 fa 03                   sarq    $0x3, %rdx
    // 25: 48 39 ca                      cmpq    %rcx, %rdx
    // 28: 7e 07                         jle     0x31 <__JIT_ENTRY+0x31>
    // 2a: 41 83 7e 2c 01                cmpl    $0x1, 0x2c(%r14)
    // 2f: 7f 06                         jg      0x37 <__JIT_ENTRY+0x37>
    // 31: 5d                            popq    %rbp
    // 32: e9 00 00 00 00                jmp     0x37 <__JIT_ENTRY+0x37>
    // 0000000000000033:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 37: 5d                            popq    %rbp
    // 38: e9 00 00 00 00                jmp     0x3d <__JIT_ENTRY+0x3d>
    // 0000000000000039:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x86, 0xf0,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x21,
        0x48, 0x63, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x96, 0xf8, 0x00, 0x00, 0x00, 0x48, 0x29,
        0xc2, 0x48, 0xc1, 0xfa, 0x03, 0x48, 0x39, 0xca,
        0x7e, 0x07, 0x41, 0x83, 0x7e, 0x2c, 0x01, 0x7f,
        0x06, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + -0x4);
    patch_32r(code + 0x33, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_VALIDITY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_VALIDITY.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_EXECUTOR@GOTPCREL
    // b: f6 40 22 01                   testb   $0x1, 0x22(%rax)
    // f: 75 06                         jne     0x17 <__JIT_ENTRY+0x17>
    // 11: 5d                            popq    %rbp
    // 12: e9 00 00 00 00                jmp     0x17 <__JIT_ENTRY+0x17>
    // 0000000000000013:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 17: 5d                            popq    %rbp
    // 18: e9 00 00 00 00                jmp     0x1d <__JIT_ENTRY+0x1d>
    // 0000000000000019:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xf6, 0x40, 0x22, 0x01, 0x75,
        0x06, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d,
    };
    // 0: EXECUTOR
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_32r(code + 0x13, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__CHECK_VALIDITY_AND_SET_IP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CHECK_VALIDITY_AND_SET_IP.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_EXECUTOR@GOTPCREL
    // b: f6 40 22 01                   testb   $0x1, 0x22(%rax)
    // f: 75 06                         jne     0x17 <__JIT_ENTRY+0x17>
    // 11: 5d                            popq    %rbp
    // 12: e9 00 00 00 00                jmp     0x17 <__JIT_ENTRY+0x17>
    // 0000000000000013:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 17: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x1e <__JIT_ENTRY+0x1e>
    // 000000000000001a:  X86_64_RELOC_GOT_LOAD        __JIT_OPERAND0@GOTPCREL
    // 1e: 49 89 44 24 38                movq    %rax, 0x38(%r12)
    // 23: 5d                            popq    %rbp
    // 24: e9 00 00 00 00                jmp     0x29 <__JIT_ENTRY+0x29>
    // 0000000000000025:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[36] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xf6, 0x40, 0x22, 0x01, 0x75,
        0x06, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x44, 0x24, 0x38, 0x5d,
    };
    // 0: OPERAND0
    // 8: EXECUTOR
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x4);
    patch_32r(code + 0x13, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + -0x4);
}

void
emit__COMPARE_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COMPARE_OP.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 44 0f b7 35 00 00 00 00       movzwl  (%rip), %r14d           ## 0x14 <__JIT_ENTRY+0x14>
    // 0000000000000010:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 14: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 18: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // 1c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 21: 44 89 f2                      movl    %r14d, %edx
    // 24: c1 ea 05                      shrl    $0x5, %edx
    // 27: 48 89 df                      movq    %rbx, %rdi
    // 2a: 4c 89 fe                      movq    %r15, %rsi
    // 2d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x33 <__JIT_ENTRY+0x33>
    // 000000000000002f:  X86_64_RELOC_GOT     _PyObject_RichCompare@GOTPCREL
    // 33: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 38: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 41: 8b 0b                         movl    (%rbx), %ecx
    // 43: 85 c9                         testl   %ecx, %ecx
    // 45: 78 17                         js      0x5e <__JIT_ENTRY+0x5e>
    // 47: ff c9                         decl    %ecx
    // 49: 89 0b                         movl    %ecx, (%rbx)
    // 4b: 75 11                         jne     0x5e <__JIT_ENTRY+0x5e>
    // 4d: 48 89 45 f0                   movq    %rax, -0x10(%rbp)
    // 51: 48 89 df                      movq    %rbx, %rdi
    // 54: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5a <__JIT_ENTRY+0x5a>
    // 0000000000000056:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 5a: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // 5e: 41 8b 0f                      movl    (%r15), %ecx
    // 61: 85 c9                         testl   %ecx, %ecx
    // 63: 78 07                         js      0x6c <__JIT_ENTRY+0x6c>
    // 65: ff c9                         decl    %ecx
    // 67: 41 89 0f                      movl    %ecx, (%r15)
    // 6a: 74 4d                         je      0xb9 <__JIT_ENTRY+0xb9>
    // 6c: 49 83 c5 f0                   addq    $-0x10, %r13
    // 70: 48 85 c0                      testq   %rax, %rax
    // 73: 0f 84 96 00 00 00             je      0x10f <__JIT_ENTRY+0x10f>
    // 79: 41 f6 c6 10                   testb   $0x10, %r14b
    // 7d: 74 5b                         je      0xda <__JIT_ENTRY+0xda>
    // 7f: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 84: 48 89 c3                      movq    %rax, %rbx
    // 87: 48 89 c7                      movq    %rax, %rdi
    // 8a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x90 <__JIT_ENTRY+0x90>
    // 000000000000008c:  X86_64_RELOC_GOT     _PyObject_IsTrue@GOTPCREL
    // 90: 8b 0b                         movl    (%rbx), %ecx
    // 92: 85 c9                         testl   %ecx, %ecx
    // 94: 78 06                         js      0x9c <__JIT_ENTRY+0x9c>
    // 96: ff c9                         decl    %ecx
    // 98: 89 0b                         movl    %ecx, (%rbx)
    // 9a: 74 54                         je      0xf0 <__JIT_ENTRY+0xf0>
    // 9c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // a1: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // aa: 85 c0                         testl   %eax, %eax
    // ac: 78 61                         js      0x10f <__JIT_ENTRY+0x10f>
    // ae: 75 23                         jne     0xd3 <__JIT_ENTRY+0xd3>
    // b0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xb7 <__JIT_ENTRY+0xb7>
    // 00000000000000b3:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // b7: eb 21                         jmp     0xda <__JIT_ENTRY+0xda>
    // b9: 48 89 c3                      movq    %rax, %rbx
    // bc: 4c 89 ff                      movq    %r15, %rdi
    // bf: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xc5 <__JIT_ENTRY+0xc5>
    // 00000000000000c1:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // c5: 48 89 d8                      movq    %rbx, %rax
    // c8: 49 83 c5 f0                   addq    $-0x10, %r13
    // cc: 48 85 c0                      testq   %rax, %rax
    // cf: 75 a8                         jne     0x79 <__JIT_ENTRY+0x79>
    // d1: eb 3c                         jmp     0x10f <__JIT_ENTRY+0x10f>
    // d3: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xda <__JIT_ENTRY+0xda>
    // 00000000000000d6:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // da: 49 89 45 00                   movq    %rax, (%r13)
    // de: 49 83 c5 08                   addq    $0x8, %r13
    // e2: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // e6: 48 83 c4 10                   addq    $0x10, %rsp
    // ea: 5d                            popq    %rbp
    // eb: e9 00 00 00 00                jmp     0xf0 <__JIT_ENTRY+0xf0>
    // 00000000000000ec:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // f0: 48 89 df                      movq    %rbx, %rdi
    // f3: 89 c3                         movl    %eax, %ebx
    // f5: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xfb <__JIT_ENTRY+0xfb>
    // 00000000000000f7:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // fb: 89 d8                         movl    %ebx, %eax
    // fd: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 102: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 10b: 85 c0                         testl   %eax, %eax
    // 10d: 79 9f                         jns     0xae <__JIT_ENTRY+0xae>
    // 10f: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 113: 48 83 c4 10                   addq    $0x10, %rsp
    // 117: 5d                            popq    %rbp
    // 118: e9 00 00 00 00                jmp     0x11d <__JIT_ENTRY+0x11d>
    // 0000000000000119:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[285] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0x75, 0xf8, 0x44, 0x0f, 0xb7, 0x35,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x5d, 0xf0,
        0x4d, 0x8b, 0x7d, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x44, 0x89, 0xf2, 0xc1, 0xea, 0x05, 0x48,
        0x89, 0xdf, 0x4c, 0x89, 0xfe, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x17, 0xff,
        0xc9, 0x89, 0x0b, 0x75, 0x11, 0x48, 0x89, 0x45,
        0xf0, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x45, 0xf0, 0x41, 0x8b,
        0x0f, 0x85, 0xc9, 0x78, 0x07, 0xff, 0xc9, 0x41,
        0x89, 0x0f, 0x74, 0x4d, 0x49, 0x83, 0xc5, 0xf0,
        0x48, 0x85, 0xc0, 0x0f, 0x84, 0x96, 0x00, 0x00,
        0x00, 0x41, 0xf6, 0xc6, 0x10, 0x74, 0x5b, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xc3, 0x48,
        0x89, 0xc7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x06, 0xff, 0xc9,
        0x89, 0x0b, 0x74, 0x54, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x78, 0x61, 0x75, 0x23,
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0xeb,
        0x21, 0x48, 0x89, 0xc3, 0x4c, 0x89, 0xff, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8,
        0x49, 0x83, 0xc5, 0xf0, 0x48, 0x85, 0xc0, 0x75,
        0xa8, 0xeb, 0x3c, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83,
        0xc5, 0x08, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83,
        0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xdf, 0x89, 0xc3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xd8, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x9f, 0x4c,
        0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: &_Py_FalseStruct+0x0
    // 18: &PyObject_IsTrue+0x0
    // 20: &PyObject_RichCompare+0x0
    // 28: OPARG
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)&PyObject_IsTrue);
    patch_64(data + 0x20, (uintptr_t)&PyObject_RichCompare);
    patch_64(data + 0x28, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x56, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x8c, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xb3, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xc1, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xd6, (uintptr_t)data + 0x4);
    patch_32r(code + 0xec, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xf7, (uintptr_t)data + -0x4);
    patch_32r(code + 0x119, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__COMPARE_OP_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COMPARE_OP_FLOAT.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // c: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 10: f2 41 0f 10 47 10             movsd   0x10(%r15), %xmm0
    // 16: f2 0f 10 4b 10                movsd   0x10(%rbx), %xmm1
    // 1b: 41 8b 07                      movl    (%r15), %eax
    // 1e: 85 c0                         testl   %eax, %eax
    // 20: 78 48                         js      0x6a <__JIT_ENTRY+0x6a>
    // 22: ff c8                         decl    %eax
    // 24: 41 89 07                      movl    %eax, (%r15)
    // 27: 75 41                         jne     0x6a <__JIT_ENTRY+0x6a>
    // 29: f2 0f 11 4d f8                movsd   %xmm1, -0x8(%rbp)
    // 2e: f2 0f 11 45 f0                movsd   %xmm0, -0x10(%rbp)
    // 33: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x3a <__JIT_ENTRY+0x3a>
    // 0000000000000036:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 3a: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 41: 48 85 c0                      testq   %rax, %rax
    // 44: 74 11                         je      0x57 <__JIT_ENTRY+0x57>
    // 46: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // 4d: 4c 89 ff                      movq    %r15, %rdi
    // 50: be 01 00 00 00                movl    $0x1, %esi
    // 55: ff d0                         callq   *%rax
    // 57: 4c 89 ff                      movq    %r15, %rdi
    // 5a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x60 <__JIT_ENTRY+0x60>
    // 000000000000005c:  X86_64_RELOC_GOT     __PyFloat_ExactDealloc@GOTPCREL
    // 60: f2 0f 10 45 f0                movsd   -0x10(%rbp), %xmm0
    // 65: f2 0f 10 4d f8                movsd   -0x8(%rbp), %xmm1
    // 6a: 8b 03                         movl    (%rbx), %eax
    // 6c: 85 c0                         testl   %eax, %eax
    // 6e: 78 47                         js      0xb7 <__JIT_ENTRY+0xb7>
    // 70: ff c8                         decl    %eax
    // 72: 89 03                         movl    %eax, (%rbx)
    // 74: 75 41                         jne     0xb7 <__JIT_ENTRY+0xb7>
    // 76: f2 0f 11 4d f8                movsd   %xmm1, -0x8(%rbp)
    // 7b: f2 0f 11 45 f0                movsd   %xmm0, -0x10(%rbp)
    // 80: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x87 <__JIT_ENTRY+0x87>
    // 0000000000000083:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 87: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 8e: 48 85 c0                      testq   %rax, %rax
    // 91: 74 11                         je      0xa4 <__JIT_ENTRY+0xa4>
    // 93: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // 9a: 48 89 df                      movq    %rbx, %rdi
    // 9d: be 01 00 00 00                movl    $0x1, %esi
    // a2: ff d0                         callq   *%rax
    // a4: 48 89 df                      movq    %rbx, %rdi
    // a7: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xad <__JIT_ENTRY+0xad>
    // 00000000000000a9:  X86_64_RELOC_GOT     __PyFloat_ExactDealloc@GOTPCREL
    // ad: f2 0f 10 45 f0                movsd   -0x10(%rbp), %xmm0
    // b2: f2 0f 10 4d f8                movsd   -0x8(%rbp), %xmm1
    // b7: 49 8d 45 f8                   leaq    -0x8(%r13), %rax
    // bb: 31 c9                         xorl    %ecx, %ecx
    // bd: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
    // c1: 0f 93 c1                      setae   %cl
    // c4: 01 c9                         addl    %ecx, %ecx
    // c6: 31 d2                         xorl    %edx, %edx
    // c8: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
    // cc: 0f 93 c2                      setae   %dl
    // cf: 09 ca                         orl     %ecx, %edx
    // d1: 8b 0d 00 00 00 00             movl    (%rip), %ecx            ## 0xd7 <__JIT_ENTRY+0xd7>
    // 00000000000000d3:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // d7: 0f a3 d1                      btl     %edx, %ecx
    // da: 72 09                         jb      0xe5 <__JIT_ENTRY+0xe5>
    // dc: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0xe3 <__JIT_ENTRY+0xe3>
    // 00000000000000df:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // e3: eb 07                         jmp     0xec <__JIT_ENTRY+0xec>
    // e5: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0xec <__JIT_ENTRY+0xec>
    // 00000000000000e8:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // ec: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
    // f0: 49 89 c5                      movq    %rax, %r13
    // f3: 48 83 c4 10                   addq    $0x10, %rsp
    // f7: 5d                            popq    %rbp
    // f8: e9 00 00 00 00                jmp     0xfd <__JIT_ENTRY+0xfd>
    // 00000000000000f9:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[248] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4d, 0x8b, 0x7d, 0xf0, 0x49, 0x8b, 0x5d, 0xf8,
        0xf2, 0x41, 0x0f, 0x10, 0x47, 0x10, 0xf2, 0x0f,
        0x10, 0x4b, 0x10, 0x41, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x48, 0xff, 0xc8, 0x41, 0x89, 0x07, 0x75,
        0x41, 0xf2, 0x0f, 0x11, 0x4d, 0xf8, 0xf2, 0x0f,
        0x11, 0x45, 0xf0, 0x48, 0x8b, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x81, 0x40, 0x26, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x74, 0x11, 0x48, 0x8b,
        0x91, 0x48, 0x26, 0x00, 0x00, 0x4c, 0x89, 0xff,
        0xbe, 0x01, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c,
        0x89, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0xf2, 0x0f, 0x10, 0x45, 0xf0, 0xf2, 0x0f, 0x10,
        0x4d, 0xf8, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x47,
        0xff, 0xc8, 0x89, 0x03, 0x75, 0x41, 0xf2, 0x0f,
        0x11, 0x4d, 0xf8, 0xf2, 0x0f, 0x11, 0x45, 0xf0,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x81, 0x40, 0x26, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x11, 0x48, 0x8b, 0x91, 0x48, 0x26,
        0x00, 0x00, 0x48, 0x89, 0xdf, 0xbe, 0x01, 0x00,
        0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0xdf, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0xf2, 0x0f, 0x10,
        0x45, 0xf0, 0xf2, 0x0f, 0x10, 0x4d, 0xf8, 0x49,
        0x8d, 0x45, 0xf8, 0x31, 0xc9, 0x66, 0x0f, 0x2e,
        0xc1, 0x0f, 0x93, 0xc1, 0x01, 0xc9, 0x31, 0xd2,
        0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc2, 0x09,
        0xca, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0xa3, 0xd1, 0x72, 0x09, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0x07, 0x48, 0x8b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4d, 0xf0,
        0x49, 0x89, 0xc5, 0x48, 0x83, 0xc4, 0x10, 0x5d,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: OPARG
    // 18: &_PyFloat_ExactDealloc+0x0
    // 20: &_PyRuntime+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_PyFloat_ExactDealloc);
    patch_64(data + 0x20, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x36, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x5c, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x83, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xa9, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xd3, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xdf, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xe8, (uintptr_t)data + -0x4);
}

void
emit__COMPARE_OP_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COMPARE_OP_INT.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // 4: 49 8b 5f 10                   movq    0x10(%r15), %rbx
    // 8: 48 83 fb 10                   cmpq    $0x10, %rbx
    // c: 0f 83 00 00 00 00             jae     0x12 <__JIT_ENTRY+0x12>
    // 000000000000000e:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 12: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 16: 48 8b 77 10                   movq    0x10(%rdi), %rsi
    // 1a: 48 83 fe 10                   cmpq    $0x10, %rsi
    // 1e: 0f 83 00 00 00 00             jae     0x24 <__JIT_ENTRY+0x24>
    // 0000000000000020:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 24: 55                            pushq   %rbp
    // 25: 48 89 e5                      movq    %rsp, %rbp
    // 28: 48 83 ec 20                   subq    $0x20, %rsp
    // 2c: 41 8b 07                      movl    (%r15), %eax
    // 2f: 45 8b 47 18                   movl    0x18(%r15), %r8d
    // 33: 44 8b 4f 18                   movl    0x18(%rdi), %r9d
    // 37: 85 c0                         testl   %eax, %eax
    // 39: 78 54                         js      0x8f <__JIT_ENTRY+0x8f>
    // 3b: ff c8                         decl    %eax
    // 3d: 41 89 07                      movl    %eax, (%r15)
    // 40: 75 4d                         jne     0x8f <__JIT_ENTRY+0x8f>
    // 42: 48 89 7d e0                   movq    %rdi, -0x20(%rbp)
    // 46: 4c 89 45 f8                   movq    %r8, -0x8(%rbp)
    // 4a: 4c 89 4d f0                   movq    %r9, -0x10(%rbp)
    // 4e: 48 89 75 e8                   movq    %rsi, -0x18(%rbp)
    // 52: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x59 <__JIT_ENTRY+0x59>
    // 0000000000000055:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 59: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 60: 48 85 c0                      testq   %rax, %rax
    // 63: 74 11                         je      0x76 <__JIT_ENTRY+0x76>
    // 65: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // 6c: 4c 89 ff                      movq    %r15, %rdi
    // 6f: be 01 00 00 00                movl    $0x1, %esi
    // 74: ff d0                         callq   *%rax
    // 76: 4c 89 ff                      movq    %r15, %rdi
    // 79: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x7f <__JIT_ENTRY+0x7f>
    // 000000000000007b:  X86_64_RELOC_GOT     __PyLong_ExactDealloc@GOTPCREL
    // 7f: 48 8b 75 e8                   movq    -0x18(%rbp), %rsi
    // 83: 4c 8b 4d f0                   movq    -0x10(%rbp), %r9
    // 87: 4c 8b 45 f8                   movq    -0x8(%rbp), %r8
    // 8b: 48 8b 7d e0                   movq    -0x20(%rbp), %rdi
    // 8f: 8b 07                         movl    (%rdi), %eax
    // 91: 85 c0                         testl   %eax, %eax
    // 93: 78 4b                         js      0xe0 <__JIT_ENTRY+0xe0>
    // 95: ff c8                         decl    %eax
    // 97: 89 07                         movl    %eax, (%rdi)
    // 99: 75 45                         jne     0xe0 <__JIT_ENTRY+0xe0>
    // 9b: 4c 89 45 f8                   movq    %r8, -0x8(%rbp)
    // 9f: 4c 89 4d f0                   movq    %r9, -0x10(%rbp)
    // a3: 48 89 75 e8                   movq    %rsi, -0x18(%rbp)
    // a7: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0xae <__JIT_ENTRY+0xae>
    // 00000000000000aa:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // ae: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // b5: 48 85 c0                      testq   %rax, %rax
    // b8: 74 14                         je      0xce <__JIT_ENTRY+0xce>
    // ba: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // c1: be 01 00 00 00                movl    $0x1, %esi
    // c6: 49 89 ff                      movq    %rdi, %r15
    // c9: ff d0                         callq   *%rax
    // cb: 4c 89 ff                      movq    %r15, %rdi
    // ce: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xd4 <__JIT_ENTRY+0xd4>
    // 00000000000000d0:  X86_64_RELOC_GOT     __PyLong_ExactDealloc@GOTPCREL
    // d4: 48 8b 75 e8                   movq    -0x18(%rbp), %rsi
    // d8: 4c 8b 4d f0                   movq    -0x10(%rbp), %r9
    // dc: 4c 8b 45 f8                   movq    -0x8(%rbp), %r8
    // e0: 49 8d 45 f8                   leaq    -0x8(%r13), %rax
    // e4: 83 e3 03                      andl    $0x3, %ebx
    // e7: b9 01 00 00 00                movl    $0x1, %ecx
    // ec: ba 01 00 00 00                movl    $0x1, %edx
    // f1: 48 29 da                      subq    %rbx, %rdx
    // f4: 49 0f af d0                   imulq   %r8, %rdx
    // f8: 83 e6 03                      andl    $0x3, %esi
    // fb: 48 29 f1                      subq    %rsi, %rcx
    // fe: 49 0f af c9                   imulq   %r9, %rcx
    // 102: 31 f6                         xorl    %esi, %esi
    // 104: 31 ff                         xorl    %edi, %edi
    // 106: 48 39 ca                      cmpq    %rcx, %rdx
    // 109: 40 0f 9d c6                   setge   %sil
    // 10d: 40 0f 9e c7                   setle   %dil
    // 111: 01 f6                         addl    %esi, %esi
    // 113: 09 f7                         orl     %esi, %edi
    // 115: 8b 0d 00 00 00 00             movl    (%rip), %ecx            ## 0x11b <__JIT_ENTRY+0x11b>
    // 0000000000000117:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 11b: 0f a3 f9                      btl     %edi, %ecx
    // 11e: 72 09                         jb      0x129 <__JIT_ENTRY+0x129>
    // 120: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x127 <__JIT_ENTRY+0x127>
    // 0000000000000123:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // 127: eb 07                         jmp     0x130 <__JIT_ENTRY+0x130>
    // 129: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x130 <__JIT_ENTRY+0x130>
    // 000000000000012c:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // 130: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
    // 134: 49 89 c5                      movq    %rax, %r13
    // 137: 48 83 c4 20                   addq    $0x20, %rsp
    // 13b: 5d                            popq    %rbp
    // 13c: e9 00 00 00 00                jmp     0x141 <__JIT_ENTRY+0x141>
    // 000000000000013d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[316] = {
        0x4d, 0x8b, 0x7d, 0xf0, 0x49, 0x8b, 0x5f, 0x10,
        0x48, 0x83, 0xfb, 0x10, 0x0f, 0x83, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x7d, 0xf8, 0x48, 0x8b,
        0x77, 0x10, 0x48, 0x83, 0xfe, 0x10, 0x0f, 0x83,
        0x00, 0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5,
        0x48, 0x83, 0xec, 0x20, 0x41, 0x8b, 0x07, 0x45,
        0x8b, 0x47, 0x18, 0x44, 0x8b, 0x4f, 0x18, 0x85,
        0xc0, 0x78, 0x54, 0xff, 0xc8, 0x41, 0x89, 0x07,
        0x75, 0x4d, 0x48, 0x89, 0x7d, 0xe0, 0x4c, 0x89,
        0x45, 0xf8, 0x4c, 0x89, 0x4d, 0xf0, 0x48, 0x89,
        0x75, 0xe8, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x81, 0x40, 0x26, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x11, 0x48, 0x8b, 0x91,
        0x48, 0x26, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xbe,
        0x01, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89,
        0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x75, 0xe8, 0x4c, 0x8b, 0x4d, 0xf0, 0x4c,
        0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x7d, 0xe0, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x4b, 0xff, 0xc8, 0x89,
        0x07, 0x75, 0x45, 0x4c, 0x89, 0x45, 0xf8, 0x4c,
        0x89, 0x4d, 0xf0, 0x48, 0x89, 0x75, 0xe8, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x81, 0x40, 0x26, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x14, 0x48, 0x8b, 0x91, 0x48, 0x26, 0x00,
        0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x49, 0x89,
        0xff, 0xff, 0xd0, 0x4c, 0x89, 0xff, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x75, 0xe8,
        0x4c, 0x8b, 0x4d, 0xf0, 0x4c, 0x8b, 0x45, 0xf8,
        0x49, 0x8d, 0x45, 0xf8, 0x83, 0xe3, 0x03, 0xb9,
        0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00,
        0x00, 0x48, 0x29, 0xda, 0x49, 0x0f, 0xaf, 0xd0,
        0x83, 0xe6, 0x03, 0x48, 0x29, 0xf1, 0x49, 0x0f,
        0xaf, 0xc9, 0x31, 0xf6, 0x31, 0xff, 0x48, 0x39,
        0xca, 0x40, 0x0f, 0x9d, 0xc6, 0x40, 0x0f, 0x9e,
        0xc7, 0x01, 0xf6, 0x09, 0xf7, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xa3, 0xf9, 0x72, 0x09,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0xeb,
        0x07, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x4d, 0xf0, 0x49, 0x89, 0xc5, 0x48,
        0x83, 0xc4, 0x20, 0x5d,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: OPARG
    // 18: &_PyLong_ExactDealloc+0x0
    // 20: &_PyRuntime+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x20, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0xe, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x20, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x55, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xaa, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xd0, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x117, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x123, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x12c, (uintptr_t)data + -0x4);
}

void
emit__COMPARE_OP_STR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COMPARE_OP_STR.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 10: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // 14: 48 89 df                      movq    %rbx, %rdi
    // 17: 4c 89 fe                      movq    %r15, %rsi
    // 1a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_GOT     __PyUnicode_Equal@GOTPCREL
    // 20: 41 89 c6                      movl    %eax, %r14d
    // 23: 8b 03                         movl    (%rbx), %eax
    // 25: 85 c0                         testl   %eax, %eax
    // 27: 78 33                         js      0x5c <__JIT_ENTRY+0x5c>
    // 29: ff c8                         decl    %eax
    // 2b: 89 03                         movl    %eax, (%rbx)
    // 2d: 75 2d                         jne     0x5c <__JIT_ENTRY+0x5c>
    // 2f: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x36 <__JIT_ENTRY+0x36>
    // 0000000000000032:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 36: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 3d: 48 85 c0                      testq   %rax, %rax
    // 40: 74 11                         je      0x53 <__JIT_ENTRY+0x53>
    // 42: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // 49: 48 89 df                      movq    %rbx, %rdi
    // 4c: be 01 00 00 00                movl    $0x1, %esi
    // 51: ff d0                         callq   *%rax
    // 53: 48 89 df                      movq    %rbx, %rdi
    // 56: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5c <__JIT_ENTRY+0x5c>
    // 0000000000000058:  X86_64_RELOC_GOT     __PyUnicode_ExactDealloc@GOTPCREL
    // 5c: 41 8b 07                      movl    (%r15), %eax
    // 5f: 85 c0                         testl   %eax, %eax
    // 61: 78 34                         js      0x97 <__JIT_ENTRY+0x97>
    // 63: ff c8                         decl    %eax
    // 65: 41 89 07                      movl    %eax, (%r15)
    // 68: 75 2d                         jne     0x97 <__JIT_ENTRY+0x97>
    // 6a: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x71 <__JIT_ENTRY+0x71>
    // 000000000000006d:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 71: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 78: 48 85 c0                      testq   %rax, %rax
    // 7b: 74 11                         je      0x8e <__JIT_ENTRY+0x8e>
    // 7d: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // 84: 4c 89 ff                      movq    %r15, %rdi
    // 87: be 01 00 00 00                movl    $0x1, %esi
    // 8c: ff d0                         callq   *%rax
    // 8e: 4c 89 ff                      movq    %r15, %rdi
    // 91: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x97 <__JIT_ENTRY+0x97>
    // 0000000000000093:  X86_64_RELOC_GOT     __PyUnicode_ExactDealloc@GOTPCREL
    // 97: 49 8d 45 f8                   leaq    -0x8(%r13), %rax
    // 9b: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0xa2 <__JIT_ENTRY+0xa2>
    // 000000000000009e:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // a2: 41 83 c6 07                   addl    $0x7, %r14d
    // a6: 66 44 85 f1                   testw   %r14w, %cx
    // aa: 75 09                         jne     0xb5 <__JIT_ENTRY+0xb5>
    // ac: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0xb3 <__JIT_ENTRY+0xb3>
    // 00000000000000af:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // b3: eb 07                         jmp     0xbc <__JIT_ENTRY+0xbc>
    // b5: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0xbc <__JIT_ENTRY+0xbc>
    // 00000000000000b8:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // bc: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
    // c0: 49 89 c5                      movq    %rax, %r13
    // c3: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // c7: 48 83 c4 10                   addq    $0x10, %rsp
    // cb: 5d                            popq    %rbp
    // cc: e9 00 00 00 00                jmp     0xd1 <__JIT_ENTRY+0xd1>
    // 00000000000000cd:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[204] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0x75, 0xf8, 0x49, 0x8b, 0x5d, 0xf0,
        0x4d, 0x8b, 0x7d, 0xf8, 0x48, 0x89, 0xdf, 0x4c,
        0x89, 0xfe, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x41, 0x89, 0xc6, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x33, 0xff, 0xc8, 0x89, 0x03, 0x75, 0x2d, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x81, 0x40, 0x26, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x11, 0x48, 0x8b, 0x91, 0x48, 0x26, 0x00,
        0x00, 0x48, 0x89, 0xdf, 0xbe, 0x01, 0x00, 0x00,
        0x00, 0xff, 0xd0, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x34, 0xff, 0xc8, 0x41, 0x89, 0x07,
        0x75, 0x2d, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x81, 0x40, 0x26, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x11, 0x48, 0x8b, 0x91,
        0x48, 0x26, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xbe,
        0x01, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89,
        0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8d, 0x45, 0xf8, 0x48, 0x8b, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x41, 0x83, 0xc6, 0x07, 0x66, 0x44,
        0x85, 0xf1, 0x75, 0x09, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0x07, 0x48, 0x8b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4d, 0xf0,
        0x49, 0x89, 0xc5, 0x4c, 0x8b, 0x75, 0xf8, 0x48,
        0x83, 0xc4, 0x10, 0x5d,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: OPARG
    // 18: &_PyUnicode_ExactDealloc+0x0
    // 20: &_PyRuntime+0x0
    // 28: &_PyUnicode_Equal+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_64(data + 0x20, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x28, (uintptr_t)&_PyUnicode_Equal);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x6d, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x93, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x9e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xaf, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xb8, (uintptr_t)data + -0x4);
}

void
emit__CONTAINS_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CONTAINS_OP.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 10: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // 14: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 19: 4c 89 ff                      movq    %r15, %rdi
    // 1c: 48 89 de                      movq    %rbx, %rsi
    // 1f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_GOT     _PySequence_Contains@GOTPCREL
    // 25: 41 89 c6                      movl    %eax, %r14d
    // 28: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2d: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 36: 8b 03                         movl    (%rbx), %eax
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 78 0f                         js      0x4b <__JIT_ENTRY+0x4b>
    // 3c: ff c8                         decl    %eax
    // 3e: 89 03                         movl    %eax, (%rbx)
    // 40: 75 09                         jne     0x4b <__JIT_ENTRY+0x4b>
    // 42: 48 89 df                      movq    %rbx, %rdi
    // 45: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4b <__JIT_ENTRY+0x4b>
    // 0000000000000047:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 4b: 41 8b 07                      movl    (%r15), %eax
    // 4e: 85 c0                         testl   %eax, %eax
    // 50: 78 07                         js      0x59 <__JIT_ENTRY+0x59>
    // 52: ff c8                         decl    %eax
    // 54: 41 89 07                      movl    %eax, (%r15)
    // 57: 74 37                         je      0x90 <__JIT_ENTRY+0x90>
    // 59: 45 85 f6                      testl   %r14d, %r14d
    // 5c: 78 40                         js      0x9e <__JIT_ENTRY+0x9e>
    // 5e: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x65 <__JIT_ENTRY+0x65>
    // 0000000000000061:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 65: 41 39 c6                      cmpl    %eax, %r14d
    // 68: 75 09                         jne     0x73 <__JIT_ENTRY+0x73>
    // 6a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x71 <__JIT_ENTRY+0x71>
    // 000000000000006d:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // 71: eb 07                         jmp     0x7a <__JIT_ENTRY+0x7a>
    // 73: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x7a <__JIT_ENTRY+0x7a>
    // 0000000000000076:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // 7a: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // 7e: 49 83 c5 f8                   addq    $-0x8, %r13
    // 82: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 86: 48 83 c4 10                   addq    $0x10, %rsp
    // 8a: 5d                            popq    %rbp
    // 8b: e9 00 00 00 00                jmp     0x90 <__JIT_ENTRY+0x90>
    // 000000000000008c:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 90: 4c 89 ff                      movq    %r15, %rdi
    // 93: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x99 <__JIT_ENTRY+0x99>
    // 0000000000000095:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 99: 45 85 f6                      testl   %r14d, %r14d
    // 9c: 79 c0                         jns     0x5e <__JIT_ENTRY+0x5e>
    // 9e: 49 83 c5 f0                   addq    $-0x10, %r13
    // a2: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // a6: 48 83 c4 10                   addq    $0x10, %rsp
    // aa: 5d                            popq    %rbp
    // ab: e9 00 00 00 00                jmp     0xb0 <__JIT_ENTRY+0xb0>
    // 00000000000000ac:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[176] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0x75, 0xf8, 0x49, 0x8b, 0x5d, 0xf0,
        0x4d, 0x8b, 0x7d, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xde, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x41, 0x89, 0xc6,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89, 0x03,
        0x75, 0x09, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x07, 0xff, 0xc8, 0x41, 0x89, 0x07, 0x74,
        0x37, 0x45, 0x85, 0xf6, 0x78, 0x40, 0x0f, 0xb7,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x41, 0x39, 0xc6,
        0x75, 0x09, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0xeb, 0x07, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0x45, 0xf0, 0x49, 0x83,
        0xc5, 0xf8, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83,
        0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x45, 0x85, 0xf6, 0x79, 0xc0, 0x49, 0x83,
        0xc5, 0xf0, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83,
        0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: &_Py_FalseStruct+0x0
    // 18: OPARG
    // 20: &PySequence_Contains+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, instruction->oparg);
    patch_64(data + 0x20, (uintptr_t)&PySequence_Contains);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x6d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x76, (uintptr_t)data + 0x4);
    patch_32r(code + 0x8c, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x95, (uintptr_t)data + -0x4);
    patch_32r(code + 0xac, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CONTAINS_OP_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CONTAINS_OP_DICT.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 8: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyDict_Type@GOTPCREL
    // 13: 74 06                         je      0x1b <__JIT_ENTRY+0x1b>
    // 15: 5d                            popq    %rbp
    // 16: e9 00 00 00 00                jmp     0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 1b: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // 1f: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 24: 48 89 df                      movq    %rbx, %rdi
    // 27: 4c 89 fe                      movq    %r15, %rsi
    // 2a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x30 <__JIT_ENTRY+0x30>
    // 000000000000002c:  X86_64_RELOC_GOT     _PyDict_Contains@GOTPCREL
    // 30: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 35: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3e: 41 8b 0f                      movl    (%r15), %ecx
    // 41: 85 c9                         testl   %ecx, %ecx
    // 43: 78 16                         js      0x5b <__JIT_ENTRY+0x5b>
    // 45: ff c9                         decl    %ecx
    // 47: 41 89 0f                      movl    %ecx, (%r15)
    // 4a: 75 0f                         jne     0x5b <__JIT_ENTRY+0x5b>
    // 4c: 4c 89 ff                      movq    %r15, %rdi
    // 4f: 41 89 c7                      movl    %eax, %r15d
    // 52: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x58 <__JIT_ENTRY+0x58>
    // 0000000000000054:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 58: 44 89 f8                      movl    %r15d, %eax
    // 5b: 8b 0b                         movl    (%rbx), %ecx
    // 5d: 85 c9                         testl   %ecx, %ecx
    // 5f: 78 06                         js      0x67 <__JIT_ENTRY+0x67>
    // 61: ff c9                         decl    %ecx
    // 63: 89 0b                         movl    %ecx, (%rbx)
    // 65: 74 39                         je      0xa0 <__JIT_ENTRY+0xa0>
    // 67: 85 c0                         testl   %eax, %eax
    // 69: 78 46                         js      0xb1 <__JIT_ENTRY+0xb1>
    // 6b: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x72 <__JIT_ENTRY+0x72>
    // 000000000000006e:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 72: 39 c8                         cmpl    %ecx, %eax
    // 74: 75 15                         jne     0x8b <__JIT_ENTRY+0x8b>
    // 76: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x7d <__JIT_ENTRY+0x7d>
    // 0000000000000079:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // 7d: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // 81: 49 83 c5 f8                   addq    $-0x8, %r13
    // 85: 5d                            popq    %rbp
    // 86: e9 00 00 00 00                jmp     0x8b <__JIT_ENTRY+0x8b>
    // 0000000000000087:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 8b: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x92 <__JIT_ENTRY+0x92>
    // 000000000000008e:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // 92: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // 96: 49 83 c5 f8                   addq    $-0x8, %r13
    // 9a: 5d                            popq    %rbp
    // 9b: e9 00 00 00 00                jmp     0xa0 <__JIT_ENTRY+0xa0>
    // 000000000000009c:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // a0: 48 89 df                      movq    %rbx, %rdi
    // a3: 89 c3                         movl    %eax, %ebx
    // a5: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xab <__JIT_ENTRY+0xab>
    // 00000000000000a7:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // ab: 89 d8                         movl    %ebx, %eax
    // ad: 85 c0                         testl   %eax, %eax
    // af: 79 ba                         jns     0x6b <__JIT_ENTRY+0x6b>
    // b1: 49 83 c5 f0                   addq    $-0x10, %r13
    // b5: 5d                            popq    %rbp
    // b6: e9 00 00 00 00                jmp     0xbb <__JIT_ENTRY+0xbb>
    // 00000000000000b7:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[187] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x5d, 0xf8,
        0x48, 0x8b, 0x43, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x06, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x7d, 0xf0, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xdf, 0x4c,
        0x89, 0xfe, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b,
        0x0f, 0x85, 0xc9, 0x78, 0x16, 0xff, 0xc9, 0x41,
        0x89, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x41,
        0x89, 0xc7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x44, 0x89, 0xf8, 0x8b, 0x0b, 0x85, 0xc9, 0x78,
        0x06, 0xff, 0xc9, 0x89, 0x0b, 0x74, 0x39, 0x85,
        0xc0, 0x78, 0x46, 0x0f, 0xb7, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x39, 0xc8, 0x75, 0x15, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45,
        0xf0, 0x49, 0x83, 0xc5, 0xf8, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0x45, 0xf0, 0x49, 0x83,
        0xc5, 0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xdf, 0x89, 0xc3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xd8, 0x85, 0xc0, 0x79,
        0xba, 0x49, 0x83, 0xc5, 0xf0, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: &_Py_FalseStruct+0x0
    // 18: OPARG
    // 20: &PyDict_Contains+0x0
    // 28: &PyDict_Type+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, instruction->oparg);
    patch_64(data + 0x20, (uintptr_t)&PyDict_Contains);
    patch_64(data + 0x28, (uintptr_t)&PyDict_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x24);
    patch_32r(code + 0x17, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x54, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x6e, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x79, (uintptr_t)data + 0xc);
    patch_32r(code + 0x87, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x8e, (uintptr_t)data + 0x4);
    patch_32r(code + 0x9c, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xa7, (uintptr_t)data + -0x4);
    patch_32r(code + 0xb7, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CONTAINS_OP_SET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CONTAINS_OP_SET.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // c: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 10: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x17 <__JIT_ENTRY+0x17>
    // 0000000000000013:  X86_64_RELOC_GOT     _PySet_Type@GOTPCREL
    // 17: 0f 94 c1                      sete    %cl
    // 1a: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_GOT     _PyFrozenSet_Type@GOTPCREL
    // 21: 0f 94 c0                      sete    %al
    // 24: 08 c8                         orb     %cl, %al
    // 26: 74 67                         je      0x8f <__JIT_ENTRY+0x8f>
    // 28: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // 2c: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // 30: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 35: 48 89 df                      movq    %rbx, %rdi
    // 38: 4c 89 fe                      movq    %r15, %rsi
    // 3b: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x41 <__JIT_ENTRY+0x41>
    // 000000000000003d:  X86_64_RELOC_GOT     __PySet_Contains@GOTPCREL
    // 41: 41 89 c6                      movl    %eax, %r14d
    // 44: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 49: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 52: 41 8b 07                      movl    (%r15), %eax
    // 55: 85 c0                         testl   %eax, %eax
    // 57: 78 10                         js      0x69 <__JIT_ENTRY+0x69>
    // 59: ff c8                         decl    %eax
    // 5b: 41 89 07                      movl    %eax, (%r15)
    // 5e: 75 09                         jne     0x69 <__JIT_ENTRY+0x69>
    // 60: 4c 89 ff                      movq    %r15, %rdi
    // 63: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x69 <__JIT_ENTRY+0x69>
    // 0000000000000065:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 69: 8b 03                         movl    (%rbx), %eax
    // 6b: 85 c0                         testl   %eax, %eax
    // 6d: 78 06                         js      0x75 <__JIT_ENTRY+0x75>
    // 6f: ff c8                         decl    %eax
    // 71: 89 03                         movl    %eax, (%rbx)
    // 73: 74 41                         je      0xb6 <__JIT_ENTRY+0xb6>
    // 75: 45 85 f6                      testl   %r14d, %r14d
    // 78: 78 4a                         js      0xc4 <__JIT_ENTRY+0xc4>
    // 7a: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x81 <__JIT_ENTRY+0x81>
    // 000000000000007d:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 81: 41 39 c6                      cmpl    %eax, %r14d
    // 84: 75 13                         jne     0x99 <__JIT_ENTRY+0x99>
    // 86: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x8d <__JIT_ENTRY+0x8d>
    // 0000000000000089:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // 8d: eb 11                         jmp     0xa0 <__JIT_ENTRY+0xa0>
    // 8f: 48 83 c4 10                   addq    $0x10, %rsp
    // 93: 5d                            popq    %rbp
    // 94: e9 00 00 00 00                jmp     0x99 <__JIT_ENTRY+0x99>
    // 0000000000000095:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 99: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xa0 <__JIT_ENTRY+0xa0>
    // 000000000000009c:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // a0: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // a4: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // a8: 49 83 c5 f8                   addq    $-0x8, %r13
    // ac: 48 83 c4 10                   addq    $0x10, %rsp
    // b0: 5d                            popq    %rbp
    // b1: e9 00 00 00 00                jmp     0xb6 <__JIT_ENTRY+0xb6>
    // 00000000000000b2:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // b6: 48 89 df                      movq    %rbx, %rdi
    // b9: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xbf <__JIT_ENTRY+0xbf>
    // 00000000000000bb:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // bf: 45 85 f6                      testl   %r14d, %r14d
    // c2: 79 b6                         jns     0x7a <__JIT_ENTRY+0x7a>
    // c4: 49 83 c5 f0                   addq    $-0x10, %r13
    // c8: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // cc: 48 83 c4 10                   addq    $0x10, %rsp
    // d0: 5d                            popq    %rbp
    // d1: e9 00 00 00 00                jmp     0xd6 <__JIT_ENTRY+0xd6>
    // 00000000000000d2:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[214] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x49, 0x8b, 0x5d, 0xf8, 0x48, 0x8b, 0x43, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x94, 0xc1, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0x94, 0xc0, 0x08, 0xc8, 0x74, 0x67,
        0x4c, 0x89, 0x75, 0xf8, 0x4d, 0x8b, 0x7d, 0xf0,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xdf,
        0x4c, 0x89, 0xfe, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x41, 0x89, 0xc6, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x41, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x10, 0xff, 0xc8, 0x41, 0x89, 0x07, 0x75, 0x09,
        0x4c, 0x89, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x06, 0xff,
        0xc8, 0x89, 0x03, 0x74, 0x41, 0x45, 0x85, 0xf6,
        0x78, 0x4a, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x41, 0x39, 0xc6, 0x75, 0x13, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x48,
        0x83, 0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x8b, 0x75, 0xf8, 0x49, 0x89, 0x45, 0xf0,
        0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4, 0x10,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x45,
        0x85, 0xf6, 0x79, 0xb6, 0x49, 0x83, 0xc5, 0xf0,
        0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: &_Py_FalseStruct+0x0
    // 18: OPARG
    // 20: &_PySet_Contains+0x0
    // 28: &PyFrozenSet_Type+0x0
    // 30: &PySet_Type+0x0
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, instruction->oparg);
    patch_64(data + 0x20, (uintptr_t)&_PySet_Contains);
    patch_64(data + 0x28, (uintptr_t)&PyFrozenSet_Type);
    patch_64(data + 0x30, (uintptr_t)&PySet_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x3d, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x65, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x7d, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x89, (uintptr_t)data + 0xc);
    patch_32r(code + 0x95, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x9c, (uintptr_t)data + 0x4);
    patch_32r(code + 0xb2, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xbb, (uintptr_t)data + -0x4);
    patch_32r(code + 0xd2, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__CONVERT_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CONVERT_VALUE.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 8: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // f: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x16 <__JIT_ENTRY+0x16>
    // 0000000000000012:  X86_64_RELOC_GOT_LOAD        __PyEval_ConversionFuncs@GOTPCREL
    // 16: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 1b: 48 89 df                      movq    %rbx, %rdi
    // 1e: ff 14 c1                      callq   *(%rcx,%rax,8)
    // 21: 49 83 44 24 40 f8             addq    $-0x8, 0x40(%r12)
    // 27: 8b 0b                         movl    (%rbx), %ecx
    // 29: 85 c9                         testl   %ecx, %ecx
    // 2b: 78 06                         js      0x33 <__JIT_ENTRY+0x33>
    // 2d: ff c9                         decl    %ecx
    // 2f: 89 0b                         movl    %ecx, (%rbx)
    // 31: 74 21                         je      0x54 <__JIT_ENTRY+0x54>
    // 33: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 38: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 41: 48 85 c0                      testq   %rax, %rax
    // 44: 74 30                         je      0x76 <__JIT_ENTRY+0x76>
    // 46: 49 89 45 00                   movq    %rax, (%r13)
    // 4a: 49 83 c5 08                   addq    $0x8, %r13
    // 4e: 5d                            popq    %rbp
    // 4f: e9 00 00 00 00                jmp     0x54 <__JIT_ENTRY+0x54>
    // 0000000000000050:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 54: 48 89 df                      movq    %rbx, %rdi
    // 57: 48 89 c3                      movq    %rax, %rbx
    // 5a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x60 <__JIT_ENTRY+0x60>
    // 000000000000005c:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 60: 48 89 d8                      movq    %rbx, %rax
    // 63: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 68: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 71: 48 85 c0                      testq   %rax, %rax
    // 74: 75 d0                         jne     0x46 <__JIT_ENTRY+0x46>
    // 76: 5d                            popq    %rbp
    // 77: e9 00 00 00 00                jmp     0x7c <__JIT_ENTRY+0x7c>
    // 0000000000000078:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[124] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x5d, 0xf8,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0xdf, 0xff, 0x14,
        0xc1, 0x49, 0x83, 0x44, 0x24, 0x40, 0xf8, 0x8b,
        0x0b, 0x85, 0xc9, 0x78, 0x06, 0xff, 0xc9, 0x89,
        0x0b, 0x74, 0x21, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x74, 0x30, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48,
        0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xd8, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x75, 0xd0, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyEval_ConversionFuncs+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_ConversionFuncs);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + 0x4);
    patch_32r(code + 0x50, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x5c, (uintptr_t)data + -0x4);
    patch_32r(code + 0x78, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__COPY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COPY.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: c1 e0 03                      shll    $0x3, %eax
    // e: 4c 89 e9                      movq    %r13, %rcx
    // 11: 48 29 c1                      subq    %rax, %rcx
    // 14: 48 8b 01                      movq    (%rcx), %rax
    // 17: 8b 08                         movl    (%rax), %ecx
    // 19: 85 c9                         testl   %ecx, %ecx
    // 1b: 78 04                         js      0x21 <__JIT_ENTRY+0x21>
    // 1d: ff c1                         incl    %ecx
    // 1f: 89 08                         movl    %ecx, (%rax)
    // 21: 49 89 45 00                   movq    %rax, (%r13)
    // 25: 49 83 c5 08                   addq    $0x8, %r13
    // 29: 5d                            popq    %rbp
    // 2a: e9 00 00 00 00                jmp     0x2f <__JIT_ENTRY+0x2f>
    // 000000000000002b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[42] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xc1, 0xe0, 0x03, 0x4c, 0x89,
        0xe9, 0x48, 0x29, 0xc1, 0x48, 0x8b, 0x01, 0x8b,
        0x08, 0x85, 0xc9, 0x78, 0x04, 0xff, 0xc1, 0x89,
        0x08, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5,
        0x08, 0x5d,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
}

void
emit__COPY_FREE_VARS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _COPY_FREE_VARS.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // b: 66 85 c0                      testw   %ax, %ax
    // e: 74 45                         je      0x55 <__JIT_ENTRY+0x55>
    // 10: 49 8b 04 24                   movq    (%r12), %rax
    // 14: 49 8b 4c 24 10                movq    0x10(%r12), %rcx
    // 19: 8b 40 48                      movl    0x48(%rax), %eax
    // 1c: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            ## 0x23 <__JIT_ENTRY+0x23>
    // 000000000000001f:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // 23: 0f b7 f2                      movzwl  %dx, %esi
    // 26: 29 f0                         subl    %esi, %eax
    // 28: 48 8b 49 48                   movq    0x48(%rcx), %rcx
    // 2c: 48 98                         cltq
    // 2e: 0f b7 d2                      movzwl  %dx, %edx
    // 31: 66 83 fa 01                   cmpw    $0x1, %dx
    // 35: 75 24                         jne     0x5b <__JIT_ENTRY+0x5b>
    // 37: 31 f6                         xorl    %esi, %esi
    // 39: f6 c2 01                      testb   $0x1, %dl
    // 3c: 74 17                         je      0x55 <__JIT_ENTRY+0x55>
    // 3e: 48 8b 4c f1 18                movq    0x18(%rcx,%rsi,8), %rcx
    // 43: 48 01 f0                      addq    %rsi, %rax
    // 46: 8b 11                         movl    (%rcx), %edx
    // 48: 85 d2                         testl   %edx, %edx
    // 4a: 78 04                         js      0x50 <__JIT_ENTRY+0x50>
    // 4c: ff c2                         incl    %edx
    // 4e: 89 11                         movl    %edx, (%rcx)
    // 50: 49 89 4c c4 50                movq    %rcx, 0x50(%r12,%rax,8)
    // 55: 5d                            popq    %rbp
    // 56: e9 00 00 00 00                jmp     0x5b <__JIT_ENTRY+0x5b>
    // 0000000000000057:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 5b: 89 d7                         movl    %edx, %edi
    // 5d: 83 e7 fe                      andl    $-0x2, %edi
    // 60: 4d 8d 04 c4                   leaq    (%r12,%rax,8), %r8
    // 64: 49 83 c0 58                   addq    $0x58, %r8
    // 68: 31 f6                         xorl    %esi, %esi
    // 6a: eb 11                         jmp     0x7d <__JIT_ENTRY+0x7d>
    // 6c: 0f 1f 40 00                   nopl    (%rax)
    // 70: 4d 89 0c f0                   movq    %r9, (%r8,%rsi,8)
    // 74: 48 83 c6 02                   addq    $0x2, %rsi
    // 78: 48 39 f7                      cmpq    %rsi, %rdi
    // 7b: 74 bc                         je      0x39 <__JIT_ENTRY+0x39>
    // 7d: 4c 8b 4c f1 18                movq    0x18(%rcx,%rsi,8), %r9
    // 82: 41 8b 19                      movl    (%r9), %ebx
    // 85: 85 db                         testl   %ebx, %ebx
    // 87: 78 05                         js      0x8e <__JIT_ENTRY+0x8e>
    // 89: ff c3                         incl    %ebx
    // 8b: 41 89 19                      movl    %ebx, (%r9)
    // 8e: 4d 89 4c f0 f8                movq    %r9, -0x8(%r8,%rsi,8)
    // 93: 4c 8b 4c f1 20                movq    0x20(%rcx,%rsi,8), %r9
    // 98: 41 8b 19                      movl    (%r9), %ebx
    // 9b: 85 db                         testl   %ebx, %ebx
    // 9d: 78 d1                         js      0x70 <__JIT_ENTRY+0x70>
    // 9f: ff c3                         incl    %ebx
    // a1: 41 89 19                      movl    %ebx, (%r9)
    // a4: eb ca                         jmp     0x70 <__JIT_ENTRY+0x70>
    const unsigned char code_body[166] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x45,
        0x49, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x4c, 0x24,
        0x10, 0x8b, 0x40, 0x48, 0x48, 0x8b, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf2, 0x29, 0xf0,
        0x48, 0x8b, 0x49, 0x48, 0x48, 0x98, 0x0f, 0xb7,
        0xd2, 0x66, 0x83, 0xfa, 0x01, 0x75, 0x24, 0x31,
        0xf6, 0xf6, 0xc2, 0x01, 0x74, 0x17, 0x48, 0x8b,
        0x4c, 0xf1, 0x18, 0x48, 0x01, 0xf0, 0x8b, 0x11,
        0x85, 0xd2, 0x78, 0x04, 0xff, 0xc2, 0x89, 0x11,
        0x49, 0x89, 0x4c, 0xc4, 0x50, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xd7, 0x83, 0xe7, 0xfe,
        0x4d, 0x8d, 0x04, 0xc4, 0x49, 0x83, 0xc0, 0x58,
        0x31, 0xf6, 0xeb, 0x11, 0x0f, 0x1f, 0x40, 0x00,
        0x4d, 0x89, 0x0c, 0xf0, 0x48, 0x83, 0xc6, 0x02,
        0x48, 0x39, 0xf7, 0x74, 0xbc, 0x4c, 0x8b, 0x4c,
        0xf1, 0x18, 0x41, 0x8b, 0x19, 0x85, 0xdb, 0x78,
        0x05, 0xff, 0xc3, 0x41, 0x89, 0x19, 0x4d, 0x89,
        0x4c, 0xf0, 0xf8, 0x4c, 0x8b, 0x4c, 0xf1, 0x20,
        0x41, 0x8b, 0x19, 0x85, 0xdb, 0x78, 0xd1, 0xff,
        0xc3, 0x41, 0x89, 0x19, 0xeb, 0xca,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + -0x4);
    patch_32r(code + 0x57, (uintptr_t)code + sizeof(code_body) + -0x4);
}

void
emit__CREATE_INIT_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _CREATE_INIT_FRAME.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 e8                      movq    %r13, %rax
    // b: 44 0f b7 05 00 00 00 00       movzwl  (%rip), %r8d            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 13: 42 8d 14 c5 00 00 00 00       leal    (,%r8,8), %edx
    // 1b: 4c 89 e9                      movq    %r13, %rcx
    // 1e: 48 29 d1                      subq    %rdx, %rcx
    // 21: 44 89 c2                      movl    %r8d, %edx
    // 24: f7 d2                         notl    %edx
    // 26: 48 63 f2                      movslq  %edx, %rsi
    // 29: ba fe ff ff ff                movl    $0xfffffffe, %edx       ## imm = 0xFFFFFFFE
    // 2e: 44 29 c2                      subl    %r8d, %edx
    // 31: 4c 63 ea                      movslq  %edx, %r13
    // 34: 49 89 44 24 40                movq    %rax, 0x40(%r12)
    // 39: 49 8b 9e f0 00 00 00          movq    0xf0(%r14), %rbx
    // 40: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            ## 0x47 <__JIT_ENTRY+0x47>
    // 0000000000000043:  X86_64_RELOC_GOT_LOAD        __Py_InitCleanup@GOTPCREL
    // 47: 48 63 7a 4c                   movslq  0x4c(%rdx), %rdi
    // 4b: 48 8d 3c fb                   leaq    (%rbx,%rdi,8), %rdi
    // 4f: 49 89 be f0 00 00 00          movq    %rdi, 0xf0(%r14)
    // 56: 4c 89 63 08                   movq    %r12, 0x8(%rbx)
    // 5a: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            ## 0x61 <__JIT_ENTRY+0x61>
    // 000000000000005d:  X86_64_RELOC_GOT_LOAD        __Py_NoneStruct@GOTPCREL
    // 61: 48 89 7b 10                   movq    %rdi, 0x10(%rbx)
    // 65: 48 89 13                      movq    %rdx, (%rbx)
    // 68: 0f 57 c0                      xorps   %xmm0, %xmm0
    // 6b: 0f 11 43 28                   movups  %xmm0, 0x28(%rbx)
    // 6f: 48 63 7a 48                   movslq  0x48(%rdx), %rdi
    // 73: 48 8d 3c fb                   leaq    (%rbx,%rdi,8), %rdi
    // 77: 48 83 c7 58                   addq    $0x58, %rdi
    // 7b: 48 89 7b 40                   movq    %rdi, 0x40(%rbx)
    // 7f: 48 81 c2 d0 00 00 00          addq    $0xd0, %rdx
    // 86: 48 89 53 38                   movq    %rdx, 0x38(%rbx)
    // 8a: c7 43 48 00 00 00 00          movl    $0x0, 0x48(%rbx)
    // 91: 49 8b 54 24 40                movq    0x40(%r12), %rdx
    // 96: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 9f: 48 8b 34 f0                   movq    (%rax,%rsi,8), %rsi
    // a3: 8b 3e                         movl    (%rsi), %edi
    // a5: 85 ff                         testl   %edi, %edi
    // a7: 78 04                         js      0xad <__JIT_ENTRY+0xad>
    // a9: ff c7                         incl    %edi
    // ab: 89 3e                         movl    %edi, (%rsi)
    // ad: 48 89 73 50                   movq    %rsi, 0x50(%rbx)
    // b1: 49 89 54 24 40                movq    %rdx, 0x40(%r12)
    // b6: 48 83 c1 f8                   addq    $-0x8, %rcx
    // ba: 41 ff c0                      incl    %r8d
    // bd: 4a 8b 34 e8                   movq    (%rax,%r13,8), %rsi
    // c1: 49 c1 e5 03                   shlq    $0x3, %r13
    // c5: 48 89 1c 24                   movq    %rbx, (%rsp)
    // c9: 4c 89 f7                      movq    %r14, %rdi
    // cc: 31 d2                         xorl    %edx, %edx
    // ce: 45 31 c9                      xorl    %r9d, %r9d
    // d1: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xd7 <__JIT_ENTRY+0xd7>
    // 00000000000000d3:  X86_64_RELOC_GOT     __PyEvalFramePushAndInit@GOTPCREL
    // d7: 4d 03 6c 24 40                addq    0x40(%r12), %r13
    // dc: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // e5: 48 85 c0                      testq   %rax, %rax
    // e8: 74 1e                         je      0x108 <__JIT_ENTRY+0x108>
    // ea: 66 41 c7 44 24 48 04 00       movw    $0x4, 0x48(%r12)
    // f2: 41 ff 4e 2c                   decl    0x2c(%r14)
    // f6: 49 89 45 00                   movq    %rax, (%r13)
    // fa: 49 83 c5 08                   addq    $0x8, %r13
    // fe: 48 83 c4 10                   addq    $0x10, %rsp
    // 102: 5d                            popq    %rbp
    // 103: e9 00 00 00 00                jmp     0x108 <__JIT_ENTRY+0x108>
    // 0000000000000104:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 108: 4c 89 f7                      movq    %r14, %rdi
    // 10b: 48 89 de                      movq    %rbx, %rsi
    // 10e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x114 <__JIT_ENTRY+0x114>
    // 0000000000000110:  X86_64_RELOC_GOT     __PyEval_FrameClearAndPop@GOTPCREL
    // 114: 48 83 c4 10                   addq    $0x10, %rsp
    // 118: 5d                            popq    %rbp
    // 119: e9 00 00 00 00                jmp     0x11e <__JIT_ENTRY+0x11e>
    // 000000000000011a:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[286] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0xe8, 0x44, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x42, 0x8d, 0x14, 0xc5, 0x00,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0xe9, 0x48, 0x29,
        0xd1, 0x44, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63,
        0xf2, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29,
        0xc2, 0x4c, 0x63, 0xea, 0x49, 0x89, 0x44, 0x24,
        0x40, 0x49, 0x8b, 0x9e, 0xf0, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x63, 0x7a, 0x4c, 0x48, 0x8d, 0x3c, 0xfb, 0x49,
        0x89, 0xbe, 0xf0, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0x63, 0x08, 0x48, 0x8b, 0x3d, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0x7b, 0x10, 0x48, 0x89, 0x13,
        0x0f, 0x57, 0xc0, 0x0f, 0x11, 0x43, 0x28, 0x48,
        0x63, 0x7a, 0x48, 0x48, 0x8d, 0x3c, 0xfb, 0x48,
        0x83, 0xc7, 0x58, 0x48, 0x89, 0x7b, 0x40, 0x48,
        0x81, 0xc2, 0xd0, 0x00, 0x00, 0x00, 0x48, 0x89,
        0x53, 0x38, 0xc7, 0x43, 0x48, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x54, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x34, 0xf0, 0x8b, 0x3e, 0x85, 0xff, 0x78,
        0x04, 0xff, 0xc7, 0x89, 0x3e, 0x48, 0x89, 0x73,
        0x50, 0x49, 0x89, 0x54, 0x24, 0x40, 0x48, 0x83,
        0xc1, 0xf8, 0x41, 0xff, 0xc0, 0x4a, 0x8b, 0x34,
        0xe8, 0x49, 0xc1, 0xe5, 0x03, 0x48, 0x89, 0x1c,
        0x24, 0x4c, 0x89, 0xf7, 0x31, 0xd2, 0x45, 0x31,
        0xc9, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x03, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x1e, 0x66, 0x41, 0xc7, 0x44, 0x24, 0x48,
        0x04, 0x00, 0x41, 0xff, 0x4e, 0x2c, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0x83,
        0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x10,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyEval_FrameClearAndPop+0x0
    // 8: &_PyEvalFramePushAndInit+0x0
    // 10: &_Py_NoneStruct+0x0
    // 18: &_Py_InitCleanup+0x0
    // 20: OPARG
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_FrameClearAndPop);
    patch_64(data + 0x8, (uintptr_t)&_PyEvalFramePushAndInit);
    patch_64(data + 0x10, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x18, (uintptr_t)&_Py_InitCleanup);
    patch_64(data + 0x20, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x43, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xd3, (uintptr_t)data + 0x4);
    patch_32r(code + 0x104, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x110, (uintptr_t)data + -0x4);
    patch_32r(code + 0x11a, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__DELETE_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_ATTR.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 8: 49 8b 04 24                   movq    (%r12), %rax
    // c: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 10: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x17 <__JIT_ENTRY+0x17>
    // 0000000000000013:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 17: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
    // 1c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 21: 48 89 df                      movq    %rbx, %rdi
    // 24: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2a <__JIT_ENTRY+0x2a>
    // 0000000000000026:  X86_64_RELOC_GOT     _PyObject_DelAttr@GOTPCREL
    // 2a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 38: 8b 0b                         movl    (%rbx), %ecx
    // 3a: 85 c9                         testl   %ecx, %ecx
    // 3c: 78 06                         js      0x44 <__JIT_ENTRY+0x44>
    // 3e: ff c9                         decl    %ecx
    // 40: 89 0b                         movl    %ecx, (%rbx)
    // 42: 74 0e                         je      0x52 <__JIT_ENTRY+0x52>
    // 44: 49 83 c5 f8                   addq    $-0x8, %r13
    // 48: 85 c0                         testl   %eax, %eax
    // 4a: 74 1b                         je      0x67 <__JIT_ENTRY+0x67>
    // 4c: 5d                            popq    %rbp
    // 4d: e9 00 00 00 00                jmp     0x52 <__JIT_ENTRY+0x52>
    // 000000000000004e:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 52: 48 89 df                      movq    %rbx, %rdi
    // 55: 89 c3                         movl    %eax, %ebx
    // 57: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5d <__JIT_ENTRY+0x5d>
    // 0000000000000059:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 5d: 89 d8                         movl    %ebx, %eax
    // 5f: 49 83 c5 f8                   addq    $-0x8, %r13
    // 63: 85 c0                         testl   %eax, %eax
    // 65: 75 e5                         jne     0x4c <__JIT_ENTRY+0x4c>
    // 67: 5d                            popq    %rbp
    // 68: e9 00 00 00 00                jmp     0x6d <__JIT_ENTRY+0x6d>
    // 0000000000000069:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[104] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x5d, 0xf8,
        0x49, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40, 0x20,
        0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x74, 0xc8, 0x18, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x06, 0xff, 0xc9,
        0x89, 0x0b, 0x74, 0x0e, 0x49, 0x83, 0xc5, 0xf8,
        0x85, 0xc0, 0x74, 0x1b, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xdf, 0x89, 0xc3, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x89, 0xd8, 0x49,
        0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x75, 0xe5, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyObject_DelAttr+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyObject_DelAttr);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + 0x4);
    patch_32r(code + 0x4e, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x59, (uintptr_t)data + -0x4);
}

void
emit__DELETE_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_DEREF.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: 49 8b 44 c4 50                movq    0x50(%r12,%rax,8), %rax
    // 10: 48 8b 78 10                   movq    0x10(%rax), %rdi
    // 14: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
    // 1c: 48 85 ff                      testq   %rdi, %rdi
    // 1f: 74 25                         je      0x46 <__JIT_ENTRY+0x46>
    // 21: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 26: 8b 07                         movl    (%rdi), %eax
    // 28: 85 c0                         testl   %eax, %eax
    // 2a: 78 06                         js      0x32 <__JIT_ENTRY+0x32>
    // 2c: ff c8                         decl    %eax
    // 2e: 89 07                         movl    %eax, (%rdi)
    // 30: 74 41                         je      0x73 <__JIT_ENTRY+0x73>
    // 32: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 37: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 40: 5d                            popq    %rbp
    // 41: e9 00 00 00 00                jmp     0x46 <__JIT_ENTRY+0x46>
    // 0000000000000042:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 46: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            ## 0x4d <__JIT_ENTRY+0x4d>
    // 0000000000000049:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 4d: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 52: 49 8b 34 24                   movq    (%r12), %rsi
    // 56: 4c 89 f7                      movq    %r14, %rdi
    // 59: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5f <__JIT_ENTRY+0x5f>
    // 000000000000005b:  X86_64_RELOC_GOT     __PyEval_FormatExcUnbound@GOTPCREL
    // 5f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 64: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 6d: 5d                            popq    %rbp
    // 6e: e9 00 00 00 00                jmp     0x73 <__JIT_ENTRY+0x73>
    // 000000000000006f:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 73: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x79 <__JIT_ENTRY+0x79>
    // 0000000000000075:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 79: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 7e: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 87: 5d                            popq    %rbp
    // 88: e9 00 00 00 00                jmp     0x8d <__JIT_ENTRY+0x8d>
    // 0000000000000089:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[136] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0xc4, 0x50,
        0x48, 0x8b, 0x78, 0x10, 0x48, 0xc7, 0x40, 0x10,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xff, 0x74,
        0x25, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x07,
        0x74, 0x41, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x49, 0x8b, 0x34, 0x24, 0x4c, 0x89,
        0xf7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyEval_FormatExcUnbound+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_FormatExcUnbound);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0xc);
    patch_32r(code + 0x42, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x49, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)data + 0x4);
    patch_32r(code + 0x6f, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x75, (uintptr_t)data + -0x4);
}

void
emit__DELETE_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_FAST.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // b: 0f b7 f0                      movzwl  %ax, %esi
    // e: 0f b7 c0                      movzwl  %ax, %eax
    // 11: 49 8b 7c c4 50                movq    0x50(%r12,%rax,8), %rdi
    // 16: 48 85 ff                      testq   %rdi, %rdi
    // 19: 74 2e                         je      0x49 <__JIT_ENTRY+0x49>
    // 1b: 49 c7 44 f4 50 00 00 00 00    movq    $0x0, 0x50(%r12,%rsi,8)
    // 24: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 29: 8b 07                         movl    (%rdi), %eax
    // 2b: 85 c0                         testl   %eax, %eax
    // 2d: 78 06                         js      0x35 <__JIT_ENTRY+0x35>
    // 2f: ff c8                         decl    %eax
    // 31: 89 07                         movl    %eax, (%rdi)
    // 33: 74 5b                         je      0x90 <__JIT_ENTRY+0x90>
    // 35: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 43: 5d                            popq    %rbp
    // 44: e9 00 00 00 00                jmp     0x49 <__JIT_ENTRY+0x49>
    // 0000000000000045:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 49: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 4e: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x55 <__JIT_ENTRY+0x55>
    // 0000000000000051:  X86_64_RELOC_GOT_LOAD        _PyExc_UnboundLocalError@GOTPCREL
    // 55: 48 8b 18                      movq    (%rax), %rbx
    // 58: 49 8b 04 24                   movq    (%r12), %rax
    // 5c: 48 8b 78 60                   movq    0x60(%rax), %rdi
    // 60: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x66 <__JIT_ENTRY+0x66>
    // 0000000000000062:  X86_64_RELOC_GOT     _PyTuple_GetItem@GOTPCREL
    // 66: 48 8d 15 3d 00 00 00          leaq    0x3d(%rip), %rdx        ## 0xaa <__JIT_ENTRY+0xaa>
    // 0000000000000069:  X86_64_RELOC_SIGNED  __cstring
    // 6d: 4c 89 f7                      movq    %r14, %rdi
    // 70: 48 89 de                      movq    %rbx, %rsi
    // 73: 48 89 c1                      movq    %rax, %rcx
    // 76: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x7c <__JIT_ENTRY+0x7c>
    // 0000000000000078:  X86_64_RELOC_GOT     __PyEval_FormatExcCheckArg@GOTPCREL
    // 7c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 81: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 8a: 5d                            popq    %rbp
    // 8b: e9 00 00 00 00                jmp     0x90 <__JIT_ENTRY+0x90>
    // 000000000000008c:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 90: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x96 <__JIT_ENTRY+0x96>
    // 0000000000000092:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 96: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 9b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // a4: 5d                            popq    %rbp
    // a5: e9 00 00 00 00                jmp     0xaa <__JIT_ENTRY+0xaa>
    // 00000000000000a6:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[165] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x0f, 0xb7,
        0xc0, 0x49, 0x8b, 0x7c, 0xc4, 0x50, 0x48, 0x85,
        0xff, 0x74, 0x2e, 0x49, 0xc7, 0x44, 0xf4, 0x50,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x06, 0xff,
        0xc8, 0x89, 0x07, 0x74, 0x5b, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x18,
        0x49, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x78, 0x60,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d,
        0x15, 0x3d, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7,
        0x48, 0x89, 0xde, 0x48, 0x89, 0xc1, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x5d,
    };
    // 0: "cannot access local variable '%s' where it is not associated with a value\x00"
    // 4a: 00 00 00 00 00 00
    // 50: &_Py_Dealloc+0x0
    // 58: &_PyEval_FormatExcCheckArg+0x0
    // 60: &PyTuple_GetItem+0x0
    // 68: &PyExc_UnboundLocalError+0x0
    // 70: OPARG
    const unsigned char data_body[120] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69,
        0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73,
        0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
        0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
        0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
        0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
        0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75,
        0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x50, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x58, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_64(data + 0x60, (uintptr_t)&PyTuple_GetItem);
    patch_64(data + 0x68, (uintptr_t)&PyExc_UnboundLocalError);
    patch_64(data + 0x70, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x6c);
    patch_32r(code + 0x45, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0x62, (uintptr_t)data + 0x5c);
    patch_32r(code + 0x69, (uintptr_t)data + 0xe3);
    patch_x86_64_32rx(code + 0x78, (uintptr_t)data + 0x54);
    patch_32r(code + 0x8c, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x92, (uintptr_t)data + 0x4c);
}

void
emit__DELETE_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_GLOBAL.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 04 24                   movq    (%r12), %rax
    // 8: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
    // d: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 11: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x18 <__JIT_ENTRY+0x18>
    // 0000000000000014:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 18: 48 8b 5c c8 18                movq    0x18(%rax,%rcx,8), %rbx
    // 1d: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 22: 48 89 de                      movq    %rbx, %rsi
    // 25: 31 d2                         xorl    %edx, %edx
    // 27: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2d <__JIT_ENTRY+0x2d>
    // 0000000000000029:  X86_64_RELOC_GOT     _PyDict_Pop@GOTPCREL
    // 2d: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 32: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3b: 85 c0                         testl   %eax, %eax
    // 3d: 78 08                         js      0x47 <__JIT_ENTRY+0x47>
    // 3f: 74 0c                         je      0x4d <__JIT_ENTRY+0x4d>
    // 41: 5d                            popq    %rbp
    // 42: e9 00 00 00 00                jmp     0x47 <__JIT_ENTRY+0x47>
    // 0000000000000043:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 47: 5d                            popq    %rbp
    // 48: e9 00 00 00 00                jmp     0x4d <__JIT_ENTRY+0x4d>
    // 0000000000000049:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 4d: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 52: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x59 <__JIT_ENTRY+0x59>
    // 0000000000000055:  X86_64_RELOC_GOT_LOAD        _PyExc_NameError@GOTPCREL
    // 59: 48 8b 30                      movq    (%rax), %rsi
    // 5c: 48 8d 15 20 00 00 00          leaq    0x20(%rip), %rdx        ## 0x83 <__JIT_ENTRY+0x83>
    // 000000000000005f:  X86_64_RELOC_SIGNED  __cstring
    // 63: 4c 89 f7                      movq    %r14, %rdi
    // 66: 48 89 d9                      movq    %rbx, %rcx
    // 69: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x6f <__JIT_ENTRY+0x6f>
    // 000000000000006b:  X86_64_RELOC_GOT     __PyEval_FormatExcCheckArg@GOTPCREL
    // 6f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 74: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 7d: 5d                            popq    %rbp
    // 7e: e9 00 00 00 00                jmp     0x83 <__JIT_ENTRY+0x83>
    // 000000000000007f:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[131] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x04, 0x24,
        0x49, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x40,
        0x20, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x5c, 0xc8, 0x18, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x48, 0x89, 0xde, 0x31, 0xd2, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x08, 0x74,
        0x0c, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x30, 0x48, 0x8d, 0x15, 0x20,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89,
        0xd9, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: "name '%.200s' is not defined\x00"
    // 1d: 00 00 00
    // 20: &_PyEval_FormatExcCheckArg+0x0
    // 28: &PyExc_NameError+0x0
    // 30: &PyDict_Pop+0x0
    // 38: OPARG
    const unsigned char data_body[64] = {
        0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e,
        0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73,
        0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66,
        0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_64(data + 0x28, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x30, (uintptr_t)&PyDict_Pop);
    patch_64(data + 0x38, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0x2c);
    patch_32r(code + 0x43, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x49, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x55, (uintptr_t)data + 0x24);
    patch_32r(code + 0x5f, (uintptr_t)data + 0x9f);
    patch_x86_64_32rx(code + 0x6b, (uintptr_t)data + 0x1c);
    patch_32r(code + 0x7f, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__DELETE_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_NAME.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 04 24                   movq    (%r12), %rax
    // 8: 49 8b 7c 24 28                movq    0x28(%r12), %rdi
    // d: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 11: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x18 <__JIT_ENTRY+0x18>
    // 0000000000000014:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 18: 48 8b 5c c8 18                movq    0x18(%rax,%rcx,8), %rbx
    // 1d: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 22: 48 85 ff                      testq   %rdi, %rdi
    // 25: 74 51                         je      0x78 <__JIT_ENTRY+0x78>
    // 27: 48 89 de                      movq    %rbx, %rsi
    // 2a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x30 <__JIT_ENTRY+0x30>
    // 000000000000002c:  X86_64_RELOC_GOT     _PyObject_DelItem@GOTPCREL
    // 30: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 35: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3e: 85 c0                         testl   %eax, %eax
    // 40: 74 69                         je      0xab <__JIT_ENTRY+0xab>
    // 42: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 47: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x4e <__JIT_ENTRY+0x4e>
    // 000000000000004a:  X86_64_RELOC_GOT_LOAD        _PyExc_NameError@GOTPCREL
    // 4e: 48 8b 30                      movq    (%rax), %rsi
    // 51: 48 8d 15 74 00 00 00          leaq    0x74(%rip), %rdx        ## 0xcc <__JIT_ENTRY+0xcc>
    // 0000000000000054:  X86_64_RELOC_SIGNED  __cstring
    // 58: 4c 89 f7                      movq    %r14, %rdi
    // 5b: 48 89 d9                      movq    %rbx, %rcx
    // 5e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x64 <__JIT_ENTRY+0x64>
    // 0000000000000060:  X86_64_RELOC_GOT     __PyEval_FormatExcCheckArg@GOTPCREL
    // 64: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 69: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 72: 5d                            popq    %rbp
    // 73: e9 00 00 00 00                jmp     0x78 <__JIT_ENTRY+0x78>
    // 0000000000000074:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 78: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x7f <__JIT_ENTRY+0x7f>
    // 000000000000007b:  X86_64_RELOC_GOT_LOAD        _PyExc_SystemError@GOTPCREL
    // 7f: 48 8b 30                      movq    (%rax), %rsi
    // 82: 48 8d 15 28 00 00 00          leaq    0x28(%rip), %rdx        ## 0xb1 <__JIT_ENTRY+0xb1>
    // 0000000000000085:  X86_64_RELOC_SIGNED  __cstring
    // 89: 4c 89 f7                      movq    %r14, %rdi
    // 8c: 48 89 d9                      movq    %rbx, %rcx
    // 8f: 31 c0                         xorl    %eax, %eax
    // 91: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x97 <__JIT_ENTRY+0x97>
    // 0000000000000093:  X86_64_RELOC_GOT     __PyErr_Format@GOTPCREL
    // 97: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 9c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // a5: 5d                            popq    %rbp
    // a6: e9 00 00 00 00                jmp     0xab <__JIT_ENTRY+0xab>
    // 00000000000000a7:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // ab: 5d                            popq    %rbp
    // ac: e9 00 00 00 00                jmp     0xb1 <__JIT_ENTRY+0xb1>
    // 00000000000000ad:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[172] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x04, 0x24,
        0x49, 0x8b, 0x7c, 0x24, 0x28, 0x48, 0x8b, 0x40,
        0x20, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x5c, 0xc8, 0x18, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x48, 0x85, 0xff, 0x74, 0x51, 0x48,
        0x89, 0xde, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0,
        0x74, 0x69, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x30, 0x48, 0x8d, 0x15, 0x74, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0xf7, 0x48, 0x89, 0xd9, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x30, 0x48, 0x8d, 0x15, 0x28, 0x00, 0x00,
        0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xd9, 0x31,
        0xc0, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d,
    };
    // 0: "no locals when deleting %R\x00name '%.200s' is not defined\x00"
    // 38: &_PyErr_Format+0x0
    // 40: &PyExc_SystemError+0x0
    // 48: &_PyEval_FormatExcCheckArg+0x0
    // 50: &PyExc_NameError+0x0
    // 58: &PyObject_DelItem+0x0
    // 60: OPARG
    const unsigned char data_body[104] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64,
        0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20,
        0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20,
        0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27,
        0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
        0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x38, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x40, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x48, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_64(data + 0x50, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x58, (uintptr_t)&PyObject_DelItem);
    patch_64(data + 0x60, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)data + 0x4c);
    patch_32r(code + 0x54, (uintptr_t)data + 0x121);
    patch_x86_64_32rx(code + 0x60, (uintptr_t)data + 0x44);
    patch_32r(code + 0x74, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)data + 0x3c);
    patch_32r(code + 0x85, (uintptr_t)data + 0xd5);
    patch_x86_64_32rx(code + 0x93, (uintptr_t)data + 0x34);
    patch_32r(code + 0xa7, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__DELETE_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DELETE_SUBSCR.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // 10: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 14: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 19: 4c 89 ff                      movq    %r15, %rdi
    // 1c: 48 89 de                      movq    %rbx, %rsi
    // 1f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_GOT     _PyObject_DelItem@GOTPCREL
    // 25: 41 89 c6                      movl    %eax, %r14d
    // 28: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2d: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 36: 41 8b 07                      movl    (%r15), %eax
    // 39: 85 c0                         testl   %eax, %eax
    // 3b: 78 10                         js      0x4d <__JIT_ENTRY+0x4d>
    // 3d: ff c8                         decl    %eax
    // 3f: 41 89 07                      movl    %eax, (%r15)
    // 42: 75 09                         jne     0x4d <__JIT_ENTRY+0x4d>
    // 44: 4c 89 ff                      movq    %r15, %rdi
    // 47: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4d <__JIT_ENTRY+0x4d>
    // 0000000000000049:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 4d: 8b 03                         movl    (%rbx), %eax
    // 4f: 85 c0                         testl   %eax, %eax
    // 51: 78 06                         js      0x59 <__JIT_ENTRY+0x59>
    // 53: ff c8                         decl    %eax
    // 55: 89 03                         movl    %eax, (%rbx)
    // 57: 74 17                         je      0x70 <__JIT_ENTRY+0x70>
    // 59: 49 83 c5 f0                   addq    $-0x10, %r13
    // 5d: 45 85 f6                      testl   %r14d, %r14d
    // 60: 74 20                         je      0x82 <__JIT_ENTRY+0x82>
    // 62: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 66: 48 83 c4 10                   addq    $0x10, %rsp
    // 6a: 5d                            popq    %rbp
    // 6b: e9 00 00 00 00                jmp     0x70 <__JIT_ENTRY+0x70>
    // 000000000000006c:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 70: 48 89 df                      movq    %rbx, %rdi
    // 73: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x79 <__JIT_ENTRY+0x79>
    // 0000000000000075:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 79: 49 83 c5 f0                   addq    $-0x10, %r13
    // 7d: 45 85 f6                      testl   %r14d, %r14d
    // 80: 75 e0                         jne     0x62 <__JIT_ENTRY+0x62>
    // 82: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 86: 48 83 c4 10                   addq    $0x10, %rsp
    // 8a: 5d                            popq    %rbp
    // 8b: e9 00 00 00 00                jmp     0x90 <__JIT_ENTRY+0x90>
    // 000000000000008c:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[139] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0x75, 0xf8, 0x4d, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x5d, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xde, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x41, 0x89, 0xc6,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x10, 0xff, 0xc8, 0x41,
        0x89, 0x07, 0x75, 0x09, 0x4c, 0x89, 0xff, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0x85,
        0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x03, 0x74,
        0x17, 0x49, 0x83, 0xc5, 0xf0, 0x45, 0x85, 0xf6,
        0x74, 0x20, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83,
        0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x83, 0xc5, 0xf0, 0x45, 0x85, 0xf6,
        0x75, 0xe0, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83,
        0xc4, 0x10, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyObject_DelItem+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyObject_DelItem);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x49, (uintptr_t)data + -0x4);
    patch_32r(code + 0x6c, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x75, (uintptr_t)data + -0x4);
}

void
emit__DEOPT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DEOPT.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_EXECUTOR@GOTPCREL
    // b: 49 89 86 10 01 00 00          movq    %rax, 0x110(%r14)
    // 12: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 17: 49 8b 04 24                   movq    (%r12), %rax
    // 1b: 8b 0d 00 00 00 00             movl    (%rip), %ecx            ## 0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_GOT     __JIT_TARGET@GOTPCREL
    // 21: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
    // 25: 48 05 d0 00 00 00             addq    $0xd0, %rax
    // 2b: 5d                            popq    %rbp
    // 2c: c3                            retq
    const unsigned char code_body[45] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0x86, 0x10, 0x01,
        0x00, 0x00, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x49,
        0x8b, 0x04, 0x24, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xd0,
        0x00, 0x00, 0x00, 0x5d, 0xc3,
    };
    // 0: TARGET
    // 8: EXECUTOR
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->target);
    patch_64(data + 0x8, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + -0x4);
}

void
emit__DICT_MERGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DICT_MERGE.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // f: b9 fc ff ff ff                movl    $0xfffffffc, %ecx       ## imm = 0xFFFFFFFC
    // 14: 29 c1                         subl    %eax, %ecx
    // 16: f7 d0                         notl    %eax
    // 18: 48 98                         cltq
    // 1a: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
    // 1f: 48 63 c1                      movslq  %ecx, %rax
    // 22: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
    // 27: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2c: 48 89 de                      movq    %rbx, %rsi
    // 2f: ba 02 00 00 00                movl    $0x2, %edx
    // 34: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x3a <__JIT_ENTRY+0x3a>
    // 0000000000000036:  X86_64_RELOC_GOT     __PyDict_MergeEx@GOTPCREL
    // 3a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 48: 85 c0                         testl   %eax, %eax
    // 4a: 78 16                         js      0x62 <__JIT_ENTRY+0x62>
    // 4c: 8b 03                         movl    (%rbx), %eax
    // 4e: 85 c0                         testl   %eax, %eax
    // 50: 78 06                         js      0x58 <__JIT_ENTRY+0x58>
    // 52: ff c8                         decl    %eax
    // 54: 89 03                         movl    %eax, (%rbx)
    // 56: 74 42                         je      0x9a <__JIT_ENTRY+0x9a>
    // 58: 49 83 c5 f8                   addq    $-0x8, %r13
    // 5c: 5d                            popq    %rbp
    // 5d: e9 00 00 00 00                jmp     0x62 <__JIT_ENTRY+0x62>
    // 000000000000005e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 62: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 67: 4c 89 f7                      movq    %r14, %rdi
    // 6a: 4c 89 fe                      movq    %r15, %rsi
    // 6d: 48 89 da                      movq    %rbx, %rdx
    // 70: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x76 <__JIT_ENTRY+0x76>
    // 0000000000000072:  X86_64_RELOC_GOT     __PyEval_FormatKwargsError@GOTPCREL
    // 76: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 7b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 84: 8b 03                         movl    (%rbx), %eax
    // 86: 85 c0                         testl   %eax, %eax
    // 88: 78 06                         js      0x90 <__JIT_ENTRY+0x90>
    // 8a: ff c8                         decl    %eax
    // 8c: 89 03                         movl    %eax, (%rbx)
    // 8e: 74 1d                         je      0xad <__JIT_ENTRY+0xad>
    // 90: 49 83 c5 f8                   addq    $-0x8, %r13
    // 94: 5d                            popq    %rbp
    // 95: e9 00 00 00 00                jmp     0x9a <__JIT_ENTRY+0x9a>
    // 0000000000000096:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 9a: 48 89 df                      movq    %rbx, %rdi
    // 9d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xa3 <__JIT_ENTRY+0xa3>
    // 000000000000009f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // a3: 49 83 c5 f8                   addq    $-0x8, %r13
    // a7: 5d                            popq    %rbp
    // a8: e9 00 00 00 00                jmp     0xad <__JIT_ENTRY+0xad>
    // 00000000000000a9:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // ad: 48 89 df                      movq    %rbx, %rdi
    // b0: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xb6 <__JIT_ENTRY+0xb6>
    // 00000000000000b2:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // b6: 49 83 c5 f8                   addq    $-0x8, %r13
    // ba: 5d                            popq    %rbp
    // bb: e9 00 00 00 00                jmp     0xc0 <__JIT_ENTRY+0xc0>
    // 00000000000000bc:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[192] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x5d, 0xf8, 0xb9,
        0xfc, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0,
        0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc5, 0x00, 0x48,
        0x63, 0xc1, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xde, 0xba,
        0x02, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x78, 0x16, 0x8b, 0x03, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x03, 0x74, 0x42,
        0x49, 0x83, 0xc5, 0xf8, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x4c,
        0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xda,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x03, 0x74, 0x1d,
        0x49, 0x83, 0xc5, 0xf8, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x83, 0xc5, 0xf8, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83,
        0xc5, 0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyEval_FormatKwargsError+0x0
    // 10: &_PyDict_MergeEx+0x0
    // 18: OPARG
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_FormatKwargsError);
    patch_64(data + 0x10, (uintptr_t)&_PyDict_MergeEx);
    patch_64(data + 0x18, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x36, (uintptr_t)data + 0xc);
    patch_32r(code + 0x5e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x72, (uintptr_t)data + 0x4);
    patch_32r(code + 0x96, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x9f, (uintptr_t)data + -0x4);
    patch_32r(code + 0xa9, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xb2, (uintptr_t)data + -0x4);
    patch_32r(code + 0xbc, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__DICT_UPDATE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _DICT_UPDATE.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 8b 05 00 00 00 00             movl    (%rip), %eax            ## 0xa <__JIT_ENTRY+0xa>
    // 0000000000000006:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // a: f7 d0                         notl    %eax
    // c: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 10: c1 e0 03                      shll    $0x3, %eax
    // 13: 48 0d 00 00 f8 ff             orq     $-0x80000, %rax         ## imm = 0xFFF80000
    // 19: 49 8b 7c 05 00                movq    (%r13,%rax), %rdi
    // 1e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 23: 48 89 de                      movq    %rbx, %rsi
    // 26: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2c <__JIT_ENTRY+0x2c>
    // 0000000000000028:  X86_64_RELOC_GOT     _PyDict_Update@GOTPCREL
    // 2c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 31: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3a: 85 c0                         testl   %eax, %eax
    // 3c: 78 1a                         js      0x58 <__JIT_ENTRY+0x58>
    // 3e: 8b 03                         movl    (%rbx), %eax
    // 40: 85 c0                         testl   %eax, %eax
    // 42: 78 0a                         js      0x4e <__JIT_ENTRY+0x4e>
    // 44: ff c8                         decl    %eax
    // 46: 89 03                         movl    %eax, (%rbx)
    // 48: 0f 84 81 00 00 00             je      0xcf <__JIT_ENTRY+0xcf>
    // 4e: 49 83 c5 f8                   addq    $-0x8, %r13
    // 52: 5d                            popq    %rbp
    // 53: e9 00 00 00 00                jmp     0x58 <__JIT_ENTRY+0x58>
    // 0000000000000054:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 58: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 5d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x64 <__JIT_ENTRY+0x64>
    // 0000000000000060:  X86_64_RELOC_GOT_LOAD        _PyExc_AttributeError@GOTPCREL
    // 64: 48 8b 30                      movq    (%rax), %rsi
    // 67: 4c 89 f7                      movq    %r14, %rdi
    // 6a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x70 <__JIT_ENTRY+0x70>
    // 000000000000006c:  X86_64_RELOC_GOT     __PyErr_ExceptionMatches@GOTPCREL
    // 70: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 75: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 7e: 85 c0                         testl   %eax, %eax
    // 80: 74 37                         je      0xb9 <__JIT_ENTRY+0xb9>
    // 82: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 87: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x8e <__JIT_ENTRY+0x8e>
    // 000000000000008a:  X86_64_RELOC_GOT_LOAD        _PyExc_TypeError@GOTPCREL
    // 8e: 48 8b 30                      movq    (%rax), %rsi
    // 91: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 95: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // 99: 48 8d 15 55 00 00 00          leaq    0x55(%rip), %rdx        ## 0xf5 <__JIT_ENTRY+0xf5>
    // 000000000000009c:  X86_64_RELOC_SIGNED  __cstring
    // a0: 4c 89 f7                      movq    %r14, %rdi
    // a3: 31 c0                         xorl    %eax, %eax
    // a5: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xab <__JIT_ENTRY+0xab>
    // 00000000000000a7:  X86_64_RELOC_GOT     __PyErr_Format@GOTPCREL
    // ab: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // b0: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // b9: 8b 03                         movl    (%rbx), %eax
    // bb: 85 c0                         testl   %eax, %eax
    // bd: 78 06                         js      0xc5 <__JIT_ENTRY+0xc5>
    // bf: ff c8                         decl    %eax
    // c1: 89 03                         movl    %eax, (%rbx)
    // c3: 74 1d                         je      0xe2 <__JIT_ENTRY+0xe2>
    // c5: 49 83 c5 f8                   addq    $-0x8, %r13
    // c9: 5d                            popq    %rbp
    // ca: e9 00 00 00 00                jmp     0xcf <__JIT_ENTRY+0xcf>
    // 00000000000000cb:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // cf: 48 89 df                      movq    %rbx, %rdi
    // d2: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xd8 <__JIT_ENTRY+0xd8>
    // 00000000000000d4:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // d8: 49 83 c5 f8                   addq    $-0x8, %r13
    // dc: 5d                            popq    %rbp
    // dd: e9 00 00 00 00                jmp     0xe2 <__JIT_ENTRY+0xe2>
    // 00000000000000de:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // e2: 48 89 df                      movq    %rbx, %rdi
    // e5: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xeb <__JIT_ENTRY+0xeb>
    // 00000000000000e7:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // eb: 49 83 c5 f8                   addq    $-0x8, %r13
    // ef: 5d                            popq    %rbp
    // f0: e9 00 00 00 00                jmp     0xf5 <__JIT_ENTRY+0xf5>
    // 00000000000000f1:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[245] = {
        0x55, 0x48, 0x89, 0xe5, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0xf7, 0xd0, 0x49, 0x8b, 0x5d, 0xf8,
        0xc1, 0xe0, 0x03, 0x48, 0x0d, 0x00, 0x00, 0xf8,
        0xff, 0x49, 0x8b, 0x7c, 0x05, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0xde, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x78, 0x1a, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x0a, 0xff, 0xc8, 0x89, 0x03,
        0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x49, 0x83,
        0xc5, 0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x4c,
        0x89, 0xf7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0,
        0x74, 0x37, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x30, 0x48, 0x8b, 0x43, 0x08, 0x48, 0x8b, 0x48,
        0x18, 0x48, 0x8d, 0x15, 0x55, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0xf7, 0x31, 0xc0, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x06, 0xff,
        0xc8, 0x89, 0x03, 0x74, 0x1d, 0x49, 0x83, 0xc5,
        0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x83, 0xc5, 0xf8, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x83, 0xc5, 0xf8, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: "'%.200s' object is not a mapping\x00"
    // 21: 00 00 00 00 00 00 00
    // 28: &_Py_Dealloc+0x0
    // 30: &_PyErr_Format+0x0
    // 38: &PyExc_TypeError+0x0
    // 40: &_PyErr_ExceptionMatches+0x0
    // 48: &PyExc_AttributeError+0x0
    // 50: &PyDict_Update+0x0
    // 58: OPARG
    const unsigned char data_body[96] = {
        0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27,
        0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
        0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x28, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x30, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x38, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x40, (uintptr_t)&_PyErr_ExceptionMatches);
    patch_64(data + 0x48, (uintptr_t)&PyExc_AttributeError);
    patch_64(data + 0x50, (uintptr_t)&PyDict_Update);
    patch_64(data + 0x58, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x6, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x4c);
    patch_32r(code + 0x54, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x60, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x6c, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x8a, (uintptr_t)data + 0x34);
    patch_32r(code + 0x9c, (uintptr_t)data + 0x146);
    patch_x86_64_32rx(code + 0xa7, (uintptr_t)data + 0x2c);
    patch_32r(code + 0xcb, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0xd4, (uintptr_t)data + 0x24);
    patch_32r(code + 0xde, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xe7, (uintptr_t)data + 0x24);
    patch_32r(code + 0xf1, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__END_FOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _END_FOR.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 4: 49 83 c5 f8                   addq    $-0x8, %r13
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 8b 07                         movl    (%rdi), %eax
    // f: 85 c0                         testl   %eax, %eax
    // 11: 78 06                         js      0x19 <__JIT_ENTRY+0x19>
    // 13: ff c8                         decl    %eax
    // 15: 89 07                         movl    %eax, (%rdi)
    // 17: 74 13                         je      0x2c <__JIT_ENTRY+0x2c>
    // 19: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 1e: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 27: e9 00 00 00 00                jmp     0x2c <__JIT_ENTRY+0x2c>
    // 0000000000000028:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 2c: 55                            pushq   %rbp
    // 2d: 48 89 e5                      movq    %rsp, %rbp
    // 30: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x36 <__JIT_ENTRY+0x36>
    // 0000000000000032:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 36: 5d                            popq    %rbp
    // 37: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 45: e9 00 00 00 00                jmp     0x4a <__JIT_ENTRY+0x4a>
    // 0000000000000046:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[69] = {
        0x49, 0x8b, 0x7d, 0xf8, 0x49, 0x83, 0xc5, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74,
        0x13, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x28, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + -0x4);
}

void
emit__END_SEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _END_SEND.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 4c 89 eb                      movq    %r13, %rbx
    // 3: 49 83 c5 f8                   addq    $-0x8, %r13
    // 7: 48 8b 7b f0                   movq    -0x10(%rbx), %rdi
    // b: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
    // f: 8b 07                         movl    (%rdi), %eax
    // 11: 85 c0                         testl   %eax, %eax
    // 13: 78 06                         js      0x1b <__JIT_ENTRY+0x1b>
    // 15: ff c8                         decl    %eax
    // 17: 89 07                         movl    %eax, (%rdi)
    // 19: 74 09                         je      0x24 <__JIT_ENTRY+0x24>
    // 1b: 4c 89 7b f0                   movq    %r15, -0x10(%rbx)
    // 1f: e9 00 00 00 00                jmp     0x24 <__JIT_ENTRY+0x24>
    // 0000000000000020:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 24: 55                            pushq   %rbp
    // 25: 48 89 e5                      movq    %rsp, %rbp
    // 28: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2e <__JIT_ENTRY+0x2e>
    // 000000000000002a:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 2e: 5d                            popq    %rbp
    // 2f: 4c 89 7b f0                   movq    %r15, -0x10(%rbx)
    // 33: e9 00 00 00 00                jmp     0x38 <__JIT_ENTRY+0x38>
    // 0000000000000034:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[51] = {
        0x4c, 0x89, 0xeb, 0x49, 0x83, 0xc5, 0xf8, 0x48,
        0x8b, 0x7b, 0xf0, 0x4c, 0x8b, 0x7b, 0xf8, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89,
        0x07, 0x74, 0x09, 0x4c, 0x89, 0x7b, 0xf0, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x4c,
        0x89, 0x7b, 0xf0,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x20, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)data + -0x4);
}

void
emit__ERROR_POP_N(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ERROR_POP_N.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_EXECUTOR@GOTPCREL
    // b: 49 89 86 10 01 00 00          movq    %rax, 0x110(%r14)
    // 12: 49 8b 04 24                   movq    (%r12), %rax
    // 16: 8b 0d 00 00 00 00             movl    (%rip), %ecx            ## 0x1c <__JIT_ENTRY+0x1c>
    // 0000000000000018:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 1c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
    // 20: 48 05 d0 00 00 00             addq    $0xd0, %rax
    // 26: 49 89 44 24 38                movq    %rax, 0x38(%r12)
    // 2b: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 30: 31 c0                         xorl    %eax, %eax
    // 32: 5d                            popq    %rbp
    // 33: c3                            retq
    const unsigned char code_body[52] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0x86, 0x10, 0x01,
        0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x8b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x04, 0x48,
        0x48, 0x05, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x44, 0x24, 0x38, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x31, 0xc0, 0x5d, 0xc3,
    };
    // 0: OPERAND0
    // 8: EXECUTOR
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + -0x4);
}

void
emit__EXIT_INIT_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _EXIT_INIT_CHECK.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __Py_NoneStruct@GOTPCREL
    // b: 74 3e                         je      0x4b <__JIT_ENTRY+0x4b>
    // d: 55                            pushq   %rbp
    // e: 48 89 e5                      movq    %rsp, %rbp
    // 11: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 16: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x1d <__JIT_ENTRY+0x1d>
    // 0000000000000019:  X86_64_RELOC_GOT_LOAD        _PyExc_TypeError@GOTPCREL
    // 1d: 48 8b 39                      movq    (%rcx), %rdi
    // 20: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 24: 48 8b 50 18                   movq    0x18(%rax), %rdx
    // 28: 48 8d 35 25 00 00 00          leaq    0x25(%rip), %rsi        ## 0x54 <__JIT_ENTRY+0x54>
    // 000000000000002b:  X86_64_RELOC_SIGNED  __cstring
    // 2f: 31 c0                         xorl    %eax, %eax
    // 31: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x37 <__JIT_ENTRY+0x37>
    // 0000000000000033:  X86_64_RELOC_GOT     _PyErr_Format@GOTPCREL
    // 37: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 45: 5d                            popq    %rbp
    // 46: e9 00 00 00 00                jmp     0x4b <__JIT_ENTRY+0x4b>
    // 0000000000000047:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 4b: 49 83 c5 f8                   addq    $-0x8, %r13
    // 4f: e9 00 00 00 00                jmp     0x54 <__JIT_ENTRY+0x54>
    // 0000000000000050:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[79] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x3e, 0x55, 0x48, 0x89,
        0xe5, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x39,
        0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x50, 0x18,
        0x48, 0x8d, 0x35, 0x25, 0x00, 0x00, 0x00, 0x31,
        0xc0, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x83, 0xc5, 0xf8,
    };
    // 0: "__init__() should return None, not '%.200s'\x00"
    // 2c: 00 00 00 00
    // 30: &PyErr_Format+0x0
    // 38: &PyExc_TypeError+0x0
    // 40: &_Py_NoneStruct+0x0
    const unsigned char data_body[72] = {
        0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f,
        0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
        0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
        0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e,
        0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30,
        0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, (uintptr_t)&PyErr_Format);
    patch_64(data + 0x38, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x40, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + 0x34);
    patch_32r(code + 0x2b, (uintptr_t)data + 0x75);
    patch_x86_64_32rx(code + 0x33, (uintptr_t)data + 0x2c);
    patch_32r(code + 0x47, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__EXIT_TRACE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _EXIT_TRACE.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4d 8b 3c 24                   movq    (%r12), %r15
    // c: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT_LOAD        __JIT_OPERAND0@GOTPCREL
    // 13: 8b 1a                         movl    (%rdx), %ebx
    // 15: 48 8b 7a 08                   movq    0x8(%rdx), %rdi
    // 19: 48 85 ff                      testq   %rdi, %rdi
    // 1c: 0f 84 0c 01 00 00             je      0x12e <__JIT_ENTRY+0x12e>
    // 22: f6 47 22 01                   testb   $0x1, 0x22(%rdi)
    // 26: 0f 85 cd 00 00 00             jne     0xf9 <__JIT_ENTRY+0xf9>
    // 2c: 66 c7 42 04 fc ff             movw    $0xfffc, 0x4(%rdx)      ## imm = 0xFFFC
    // 32: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 37: 48 c7 42 08 00 00 00 00       movq    $0x0, 0x8(%rdx)
    // 3f: 8b 07                         movl    (%rdi), %eax
    // 41: 85 c0                         testl   %eax, %eax
    // 43: 0f 88 d7 00 00 00             js      0x120 <__JIT_ENTRY+0x120>
    // 49: ff c8                         decl    %eax
    // 4b: 89 07                         movl    %eax, (%rdi)
    // 4d: 75 0c                         jne     0x5b <__JIT_ENTRY+0x5b>
    // 4f: 49 89 d5                      movq    %rdx, %r13
    // 52: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x58 <__JIT_ENTRY+0x58>
    // 0000000000000054:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 58: 4c 89 ea                      movq    %r13, %rdx
    // 5b: 48 8b 7a 08                   movq    0x8(%rdx), %rdi
    // 5f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 64: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 6d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x74 <__JIT_ENTRY+0x74>
    // 0000000000000070:  X86_64_RELOC_GOT_LOAD        __JIT_EXECUTOR@GOTPCREL
    // 74: 49 89 86 10 01 00 00          movq    %rax, 0x110(%r14)
    // 7b: 48 85 ff                      testq   %rdi, %rdi
    // 7e: 0f 85 83 00 00 00             jne     0x107 <__JIT_ENTRY+0x107>
    // 84: 49 8d 04 5f                   leaq    (%r15,%rbx,2), %rax
    // 88: 48 05 d0 00 00 00             addq    $0xd0, %rax
    // 8e: 0f b7 5a 04                   movzwl  0x4(%rdx), %ebx
    // 92: 83 fb 0f                      cmpl    $0xf, %ebx
    // 95: 0f 83 b8 00 00 00             jae     0x153 <__JIT_ENTRY+0x153>
    // 9b: 80 38 ff                      cmpb    $-0x1, (%rax)
    // 9e: 0f 84 c1 00 00 00             je      0x165 <__JIT_ENTRY+0x165>
    // a4: 49 89 d7                      movq    %rdx, %r15
    // a7: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0xae <__JIT_ENTRY+0xae>
    // 00000000000000aa:  X86_64_RELOC_GOT_LOAD        __JIT_EXECUTOR@GOTPCREL
    // ae: 0f b6 49 22                   movzbl  0x22(%rcx), %ecx
    // b2: c1 e9 02                      shrl    $0x2, %ecx
    // b5: ff c1                         incl    %ecx
    // b7: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // bc: 48 8d 55 f0                   leaq    -0x10(%rbp), %rdx
    // c0: 4c 89 e7                      movq    %r12, %rdi
    // c3: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // c7: 48 89 c6                      movq    %rax, %rsi
    // ca: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xd0 <__JIT_ENTRY+0xd0>
    // 00000000000000cc:  X86_64_RELOC_GOT     __PyOptimizer_Optimize@GOTPCREL
    // d0: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // d5: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // de: 85 c0                         testl   %eax, %eax
    // e0: 0f 8e a5 00 00 00             jle     0x18b <__JIT_ENTRY+0x18b>
    // e6: 4c 89 fa                      movq    %r15, %rdx
    // e9: 66 41 c7 47 04 fc ff          movw    $0xfffc, 0x4(%r15)      ## imm = 0xFFFC
    // f0: 48 8b 7d f0                   movq    -0x10(%rbp), %rdi
    // f4: e9 86 00 00 00                jmp     0x17f <__JIT_ENTRY+0x17f>
    // f9: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x100 <__JIT_ENTRY+0x100>
    // 00000000000000fc:  X86_64_RELOC_GOT_LOAD        __JIT_EXECUTOR@GOTPCREL
    // 100: 49 89 86 10 01 00 00          movq    %rax, 0x110(%r14)
    // 107: 8b 07                         movl    (%rdi), %eax
    // 109: 85 c0                         testl   %eax, %eax
    // 10b: 78 08                         js      0x115 <__JIT_ENTRY+0x115>
    // 10d: ff c0                         incl    %eax
    // 10f: 89 07                         movl    %eax, (%rdi)
    // 111: 48 8b 7a 08                   movq    0x8(%rdx), %rdi
    // 115: 48 8b 47 78                   movq    0x78(%rdi), %rax
    // 119: 48 83 c4 10                   addq    $0x10, %rsp
    // 11d: 5d                            popq    %rbp
    // 11e: ff e0                         jmpq    *%rax
    // 120: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 125: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 12e: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x135 <__JIT_ENTRY+0x135>
    // 0000000000000131:  X86_64_RELOC_GOT_LOAD        __JIT_EXECUTOR@GOTPCREL
    // 135: 49 89 86 10 01 00 00          movq    %rax, 0x110(%r14)
    // 13c: 49 8d 04 5f                   leaq    (%r15,%rbx,2), %rax
    // 140: 48 05 d0 00 00 00             addq    $0xd0, %rax
    // 146: 0f b7 5a 04                   movzwl  0x4(%rdx), %ebx
    // 14a: 83 fb 0f                      cmpl    $0xf, %ebx
    // 14d: 0f 82 48 ff ff ff             jb      0x9b <__JIT_ENTRY+0x9b>
    // 153: 83 c3 f0                      addl    $-0x10, %ebx
    // 156: 66 89 5a 04                   movw    %bx, 0x4(%rdx)
    // 15a: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 15f: 48 83 c4 10                   addq    $0x10, %rsp
    // 163: 5d                            popq    %rbp
    // 164: c3                            retq
    // 165: 49 8b 8f 98 00 00 00          movq    0x98(%r15), %rcx
    // 16c: 0f b6 40 01                   movzbl  0x1(%rax), %eax
    // 170: 48 8b 7c c1 08                movq    0x8(%rcx,%rax,8), %rdi
    // 175: 8b 07                         movl    (%rdi), %eax
    // 177: 85 c0                         testl   %eax, %eax
    // 179: 78 04                         js      0x17f <__JIT_ENTRY+0x17f>
    // 17b: ff c0                         incl    %eax
    // 17d: 89 07                         movl    %eax, (%rdi)
    // 17f: 48 89 7a 08                   movq    %rdi, 0x8(%rdx)
    // 183: 8b 07                         movl    (%rdi), %eax
    // 185: 85 c0                         testl   %eax, %eax
    // 187: 79 84                         jns     0x10d <__JIT_ENTRY+0x10d>
    // 189: eb 8a                         jmp     0x115 <__JIT_ENTRY+0x115>
    // 18b: 66 ba fc ff                   movw    $0xfffc, %dx            ## imm = 0xFFFC
    // 18f: 66 83 fb 0b                   cmpw    $0xb, %bx
    // 193: 77 12                         ja      0x1a7 <__JIT_ENTRY+0x1a7>
    // 195: ff c3                         incl    %ebx
    // 197: ba ff ff ff ff                movl    $0xffffffff, %edx       ## imm = 0xFFFFFFFF
    // 19c: 89 d9                         movl    %ebx, %ecx
    // 19e: d3 e2                         shll    %cl, %edx
    // 1a0: f7 d2                         notl    %edx
    // 1a2: c1 e2 04                      shll    $0x4, %edx
    // 1a5: 09 da                         orl     %ebx, %edx
    // 1a7: 66 41 89 57 04                movw    %dx, 0x4(%r15)
    // 1ac: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 1b1: 31 c9                         xorl    %ecx, %ecx
    // 1b3: 85 c0                         testl   %eax, %eax
    // 1b5: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 1b9: 48 0f 45 c1                   cmovneq %rcx, %rax
    // 1bd: 48 83 c4 10                   addq    $0x10, %rsp
    // 1c1: 5d                            popq    %rbp
    // 1c2: c3                            retq
    const unsigned char code_body[451] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4d, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x1a, 0x48, 0x8b, 0x7a,
        0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x0c, 0x01,
        0x00, 0x00, 0xf6, 0x47, 0x22, 0x01, 0x0f, 0x85,
        0xcd, 0x00, 0x00, 0x00, 0x66, 0xc7, 0x42, 0x04,
        0xfc, 0xff, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48,
        0xc7, 0x42, 0x08, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x07, 0x85, 0xc0, 0x0f, 0x88, 0xd7, 0x00, 0x00,
        0x00, 0xff, 0xc8, 0x89, 0x07, 0x75, 0x0c, 0x49,
        0x89, 0xd5, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0xea, 0x48, 0x8b, 0x7a, 0x08, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x86, 0x10,
        0x01, 0x00, 0x00, 0x48, 0x85, 0xff, 0x0f, 0x85,
        0x83, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x04, 0x5f,
        0x48, 0x05, 0xd0, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0x5a, 0x04, 0x83, 0xfb, 0x0f, 0x0f, 0x83, 0xb8,
        0x00, 0x00, 0x00, 0x80, 0x38, 0xff, 0x0f, 0x84,
        0xc1, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6,
        0x49, 0x22, 0xc1, 0xe9, 0x02, 0xff, 0xc1, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x8d, 0x55, 0xf0,
        0x4c, 0x89, 0xe7, 0x48, 0x89, 0x45, 0xf8, 0x48,
        0x89, 0xc6, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0,
        0x0f, 0x8e, 0xa5, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xfa, 0x66, 0x41, 0xc7, 0x47, 0x04, 0xfc, 0xff,
        0x48, 0x8b, 0x7d, 0xf0, 0xe9, 0x86, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x86, 0x10, 0x01, 0x00, 0x00, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xc0, 0x89,
        0x07, 0x48, 0x8b, 0x7a, 0x08, 0x48, 0x8b, 0x47,
        0x78, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xff, 0xe0,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x86,
        0x10, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0x5f,
        0x48, 0x05, 0xd0, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0x5a, 0x04, 0x83, 0xfb, 0x0f, 0x0f, 0x82, 0x48,
        0xff, 0xff, 0xff, 0x83, 0xc3, 0xf0, 0x66, 0x89,
        0x5a, 0x04, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48,
        0x83, 0xc4, 0x10, 0x5d, 0xc3, 0x49, 0x8b, 0x8f,
        0x98, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0x40, 0x01,
        0x48, 0x8b, 0x7c, 0xc1, 0x08, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89, 0x07, 0x48,
        0x89, 0x7a, 0x08, 0x8b, 0x07, 0x85, 0xc0, 0x79,
        0x84, 0xeb, 0x8a, 0x66, 0xba, 0xfc, 0xff, 0x66,
        0x83, 0xfb, 0x0b, 0x77, 0x12, 0xff, 0xc3, 0xba,
        0xff, 0xff, 0xff, 0xff, 0x89, 0xd9, 0xd3, 0xe2,
        0xf7, 0xd2, 0xc1, 0xe2, 0x04, 0x09, 0xda, 0x66,
        0x41, 0x89, 0x57, 0x04, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x31, 0xc9, 0x85, 0xc0, 0x48, 0x8b, 0x45,
        0xf8, 0x48, 0x0f, 0x45, 0xc1, 0x48, 0x83, 0xc4,
        0x10, 0x5d, 0xc3,
    };
    // 0: EXECUTOR
    // 8: &_PyOptimizer_Optimize+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: OPERAND0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, (uintptr_t)&_PyOptimizer_Optimize);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x54, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x70, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xaa, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xcc, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xfc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x131, (uintptr_t)data + -0x4);
}

void
emit__EXPAND_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _EXPAND_METHOD.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x7 <__JIT_ENTRY+0x7>
    // 0000000000000003:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 7: ba fe ff ff ff                movl    $0xfffffffe, %edx       ## imm = 0xFFFFFFFE
    // c: 29 c2                         subl    %eax, %edx
    // e: f7 d0                         notl    %eax
    // 10: 48 63 c8                      movslq  %eax, %rcx
    // 13: 48 63 c2                      movslq  %edx, %rax
    // 16: 49 8b 54 c5 00                movq    (%r13,%rax,8), %rdx
    // 1b: 48 8b 72 18                   movq    0x18(%rdx), %rsi
    // 1f: 8b 3e                         movl    (%rsi), %edi
    // 21: 85 ff                         testl   %edi, %edi
    // 23: 78 04                         js      0x29 <__JIT_ENTRY+0x29>
    // 25: ff c7                         incl    %edi
    // 27: 89 3e                         movl    %edi, (%rsi)
    // 29: 49 89 74 cd 00                movq    %rsi, (%r13,%rcx,8)
    // 2e: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
    // 33: 48 8b 4a 10                   movq    0x10(%rdx), %rcx
    // 37: 8b 11                         movl    (%rcx), %edx
    // 39: 85 d2                         testl   %edx, %edx
    // 3b: 78 04                         js      0x41 <__JIT_ENTRY+0x41>
    // 3d: ff c2                         incl    %edx
    // 3f: 89 11                         movl    %edx, (%rcx)
    // 41: 49 89 4c c5 00                movq    %rcx, (%r13,%rax,8)
    // 46: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 4b: 8b 07                         movl    (%rdi), %eax
    // 4d: 85 c0                         testl   %eax, %eax
    // 4f: 78 06                         js      0x57 <__JIT_ENTRY+0x57>
    // 51: ff c8                         decl    %eax
    // 53: 89 07                         movl    %eax, (%rdi)
    // 55: 74 13                         je      0x6a <__JIT_ENTRY+0x6a>
    // 57: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 5c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 65: e9 00 00 00 00                jmp     0x6a <__JIT_ENTRY+0x6a>
    // 0000000000000066:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 6a: 55                            pushq   %rbp
    // 6b: 48 89 e5                      movq    %rsp, %rbp
    // 6e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x74 <__JIT_ENTRY+0x74>
    // 0000000000000070:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 74: 5d                            popq    %rbp
    // 75: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 7a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 83: e9 00 00 00 00                jmp     0x88 <__JIT_ENTRY+0x88>
    // 0000000000000084:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[131] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xba,
        0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0xf7, 0xd0,
        0x48, 0x63, 0xc8, 0x48, 0x63, 0xc2, 0x49, 0x8b,
        0x54, 0xc5, 0x00, 0x48, 0x8b, 0x72, 0x18, 0x8b,
        0x3e, 0x85, 0xff, 0x78, 0x04, 0xff, 0xc7, 0x89,
        0x3e, 0x49, 0x89, 0x74, 0xcd, 0x00, 0x49, 0x8b,
        0x7c, 0xc5, 0x00, 0x48, 0x8b, 0x4a, 0x10, 0x8b,
        0x11, 0x85, 0xd2, 0x78, 0x04, 0xff, 0xc2, 0x89,
        0x11, 0x49, 0x89, 0x4c, 0xc5, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x13, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + 0x4);
    patch_32r(code + 0x66, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x70, (uintptr_t)data + -0x4);
}

void
emit__EXPAND_METHOD_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _EXPAND_METHOD_KW.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x7 <__JIT_ENTRY+0x7>
    // 0000000000000003:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 7: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       ## imm = 0xFFFFFFFE
    // c: 29 c1                         subl    %eax, %ecx
    // e: 48 63 c9                      movslq  %ecx, %rcx
    // 11: ba fd ff ff ff                movl    $0xfffffffd, %edx       ## imm = 0xFFFFFFFD
    // 16: 29 c2                         subl    %eax, %edx
    // 18: 48 63 c2                      movslq  %edx, %rax
    // 1b: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
    // 20: 48 8b 57 18                   movq    0x18(%rdi), %rdx
    // 24: 8b 32                         movl    (%rdx), %esi
    // 26: 85 f6                         testl   %esi, %esi
    // 28: 78 04                         js      0x2e <__JIT_ENTRY+0x2e>
    // 2a: ff c6                         incl    %esi
    // 2c: 89 32                         movl    %esi, (%rdx)
    // 2e: 49 89 54 cd 00                movq    %rdx, (%r13,%rcx,8)
    // 33: 48 8b 4f 10                   movq    0x10(%rdi), %rcx
    // 37: 8b 11                         movl    (%rcx), %edx
    // 39: 85 d2                         testl   %edx, %edx
    // 3b: 78 04                         js      0x41 <__JIT_ENTRY+0x41>
    // 3d: ff c2                         incl    %edx
    // 3f: 89 11                         movl    %edx, (%rcx)
    // 41: 49 89 4c c5 00                movq    %rcx, (%r13,%rax,8)
    // 46: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 4b: 8b 07                         movl    (%rdi), %eax
    // 4d: 85 c0                         testl   %eax, %eax
    // 4f: 78 06                         js      0x57 <__JIT_ENTRY+0x57>
    // 51: ff c8                         decl    %eax
    // 53: 89 07                         movl    %eax, (%rdi)
    // 55: 74 13                         je      0x6a <__JIT_ENTRY+0x6a>
    // 57: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 5c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 65: e9 00 00 00 00                jmp     0x6a <__JIT_ENTRY+0x6a>
    // 0000000000000066:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 6a: 55                            pushq   %rbp
    // 6b: 48 89 e5                      movq    %rsp, %rbp
    // 6e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x74 <__JIT_ENTRY+0x74>
    // 0000000000000070:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 74: 5d                            popq    %rbp
    // 75: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 7a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 83: e9 00 00 00 00                jmp     0x88 <__JIT_ENTRY+0x88>
    // 0000000000000084:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[131] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xb9,
        0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63,
        0xc9, 0xba, 0xfd, 0xff, 0xff, 0xff, 0x29, 0xc2,
        0x48, 0x63, 0xc2, 0x49, 0x8b, 0x7c, 0xc5, 0x00,
        0x48, 0x8b, 0x57, 0x18, 0x8b, 0x32, 0x85, 0xf6,
        0x78, 0x04, 0xff, 0xc6, 0x89, 0x32, 0x49, 0x89,
        0x54, 0xcd, 0x00, 0x48, 0x8b, 0x4f, 0x10, 0x8b,
        0x11, 0x85, 0xd2, 0x78, 0x04, 0xff, 0xc2, 0x89,
        0x11, 0x49, 0x89, 0x4c, 0xc5, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x13, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + 0x4);
    patch_32r(code + 0x66, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x70, (uintptr_t)data + -0x4);
}

void
emit__FATAL_ERROR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _FATAL_ERROR.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8d 3d 0d 00 00 00          leaq    0xd(%rip), %rdi         ## 0x18 <__JIT_ENTRY+0x18>
    // 0000000000000007:  X86_64_RELOC_SIGNED  __cstring
    // b: 48 8d 35 11 00 00 00          leaq    0x11(%rip), %rsi        ## 0x23 <__JIT_ENTRY+0x23>
    // 000000000000000e:  X86_64_RELOC_SIGNED  __cstring
    // 12: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x18 <__JIT_ENTRY+0x18>
    // 0000000000000014:  X86_64_RELOC_GOT     __Py_FatalErrorFunc@GOTPCREL
    const unsigned char code_body[24] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8d, 0x3d, 0x0d,
        0x00, 0x00, 0x00, 0x48, 0x8d, 0x35, 0x11, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: '_JIT_ENTRY\x00Fatal error uop executed.\x00'
    // 25: 00 00 00
    // 28: &_Py_FatalErrorFunc+0x0
    const unsigned char data_body[48] = {
        0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54,
        0x52, 0x59, 0x00, 0x46, 0x61, 0x74, 0x61, 0x6c,
        0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x75,
        0x6f, 0x70, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75,
        0x74, 0x65, 0x64, 0x2e, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x28, (uintptr_t)&_Py_FatalErrorFunc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x7, (uintptr_t)data + 0x21);
    patch_32r(code + 0xe, (uintptr_t)data + 0x25);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x24);
}

void
emit__FORMAT_SIMPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _FORMAT_SIMPLE.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 8: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyUnicode_Type@GOTPCREL
    // 13: 74 46                         je      0x5b <__JIT_ENTRY+0x5b>
    // 15: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 1a: 48 89 df                      movq    %rbx, %rdi
    // 1d: 31 f6                         xorl    %esi, %esi
    // 1f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_GOT     _PyObject_Format@GOTPCREL
    // 25: 49 83 44 24 40 f8             addq    $-0x8, 0x40(%r12)
    // 2b: 8b 0b                         movl    (%rbx), %ecx
    // 2d: 85 c9                         testl   %ecx, %ecx
    // 2f: 78 06                         js      0x37 <__JIT_ENTRY+0x37>
    // 31: ff c9                         decl    %ecx
    // 33: 89 0b                         movl    %ecx, (%rbx)
    // 35: 74 36                         je      0x6d <__JIT_ENTRY+0x6d>
    // 37: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 45: 48 85 c0                      testq   %rax, %rax
    // 48: 74 45                         je      0x8f <__JIT_ENTRY+0x8f>
    // 4a: 48 89 c3                      movq    %rax, %rbx
    // 4d: 49 89 5d 00                   movq    %rbx, (%r13)
    // 51: 49 83 c5 08                   addq    $0x8, %r13
    // 55: 5d                            popq    %rbp
    // 56: e9 00 00 00 00                jmp     0x5b <__JIT_ENTRY+0x5b>
    // 0000000000000057:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 5b: 49 83 c5 f8                   addq    $-0x8, %r13
    // 5f: 49 89 5d 00                   movq    %rbx, (%r13)
    // 63: 49 83 c5 08                   addq    $0x8, %r13
    // 67: 5d                            popq    %rbp
    // 68: e9 00 00 00 00                jmp     0x6d <__JIT_ENTRY+0x6d>
    // 0000000000000069:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 6d: 48 89 df                      movq    %rbx, %rdi
    // 70: 48 89 c3                      movq    %rax, %rbx
    // 73: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x79 <__JIT_ENTRY+0x79>
    // 0000000000000075:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 79: 48 89 d8                      movq    %rbx, %rax
    // 7c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 81: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 8a: 48 85 c0                      testq   %rax, %rax
    // 8d: 75 bb                         jne     0x4a <__JIT_ENTRY+0x4a>
    // 8f: 5d                            popq    %rbp
    // 90: e9 00 00 00 00                jmp     0x95 <__JIT_ENTRY+0x95>
    // 0000000000000091:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[149] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x5d, 0xf8,
        0x48, 0x8b, 0x43, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x46, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x48, 0x89, 0xdf, 0x31, 0xf6, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0x44,
        0x24, 0x40, 0xf8, 0x8b, 0x0b, 0x85, 0xc9, 0x78,
        0x06, 0xff, 0xc9, 0x89, 0x0b, 0x74, 0x36, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x45, 0x48, 0x89, 0xc3, 0x49, 0x89, 0x5d,
        0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x83, 0xc5, 0xf8, 0x49,
        0x89, 0x5d, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf,
        0x48, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xd8, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x75, 0xbb, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyObject_Format+0x0
    // 10: &PyUnicode_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyObject_Format);
    patch_64(data + 0x10, (uintptr_t)&PyUnicode_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_32r(code + 0x57, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x69, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x75, (uintptr_t)data + -0x4);
    patch_32r(code + 0x91, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__FORMAT_WITH_SPEC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _FORMAT_WITH_SPEC.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 10: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // 14: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 19: 48 89 df                      movq    %rbx, %rdi
    // 1c: 4c 89 fe                      movq    %r15, %rsi
    // 1f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_GOT     _PyObject_Format@GOTPCREL
    // 25: 49 89 c6                      movq    %rax, %r14
    // 28: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2d: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 36: 8b 03                         movl    (%rbx), %eax
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 78 0f                         js      0x4b <__JIT_ENTRY+0x4b>
    // 3c: ff c8                         decl    %eax
    // 3e: 89 03                         movl    %eax, (%rbx)
    // 40: 75 09                         jne     0x4b <__JIT_ENTRY+0x4b>
    // 42: 48 89 df                      movq    %rbx, %rdi
    // 45: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4b <__JIT_ENTRY+0x4b>
    // 0000000000000047:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 4b: 41 8b 07                      movl    (%r15), %eax
    // 4e: 85 c0                         testl   %eax, %eax
    // 50: 78 07                         js      0x59 <__JIT_ENTRY+0x59>
    // 52: ff c8                         decl    %eax
    // 54: 41 89 07                      movl    %eax, (%r15)
    // 57: 74 1b                         je      0x74 <__JIT_ENTRY+0x74>
    // 59: 4d 85 f6                      testq   %r14, %r14
    // 5c: 74 24                         je      0x82 <__JIT_ENTRY+0x82>
    // 5e: 4d 89 75 f0                   movq    %r14, -0x10(%r13)
    // 62: 49 83 c5 f8                   addq    $-0x8, %r13
    // 66: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 6a: 48 83 c4 10                   addq    $0x10, %rsp
    // 6e: 5d                            popq    %rbp
    // 6f: e9 00 00 00 00                jmp     0x74 <__JIT_ENTRY+0x74>
    // 0000000000000070:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 74: 4c 89 ff                      movq    %r15, %rdi
    // 77: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x7d <__JIT_ENTRY+0x7d>
    // 0000000000000079:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 7d: 4d 85 f6                      testq   %r14, %r14
    // 80: 75 dc                         jne     0x5e <__JIT_ENTRY+0x5e>
    // 82: 49 83 c5 f0                   addq    $-0x10, %r13
    // 86: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 8a: 48 83 c4 10                   addq    $0x10, %rsp
    // 8e: 5d                            popq    %rbp
    // 8f: e9 00 00 00 00                jmp     0x94 <__JIT_ENTRY+0x94>
    // 0000000000000090:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[148] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0x75, 0xf8, 0x49, 0x8b, 0x5d, 0xf0,
        0x4d, 0x8b, 0x7d, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89, 0x03,
        0x75, 0x09, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x07, 0xff, 0xc8, 0x41, 0x89, 0x07, 0x74,
        0x1b, 0x4d, 0x85, 0xf6, 0x74, 0x24, 0x4d, 0x89,
        0x75, 0xf0, 0x49, 0x83, 0xc5, 0xf8, 0x4c, 0x8b,
        0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xf6,
        0x75, 0xdc, 0x49, 0x83, 0xc5, 0xf0, 0x4c, 0x8b,
        0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyObject_Format+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyObject_Format);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + -0x4);
    patch_32r(code + 0x70, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x79, (uintptr_t)data + -0x4);
    patch_32r(code + 0x90, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__FOR_ITER_GEN_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _FOR_ITER_GEN_FRAME.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // c: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyGen_Type@GOTPCREL
    // 13: 75 06                         jne     0x1b <__JIT_ENTRY+0x1b>
    // 15: 80 78 43 00                   cmpb    $0x0, 0x43(%rax)
    // 19: 78 06                         js      0x21 <__JIT_ENTRY+0x21>
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 21: 48 8b 88 88 00 00 00          movq    0x88(%rax), %rcx
    // 28: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            ## 0x2f <__JIT_ENTRY+0x2f>
    // 000000000000002b:  X86_64_RELOC_GOT_LOAD        __Py_NoneStruct@GOTPCREL
    // 2f: 48 89 11                      movq    %rdx, (%rcx)
    // 32: 48 83 80 88 00 00 00 08       addq    $0x8, 0x88(%rax)
    // 3a: 48 8d 48 48                   leaq    0x48(%rax), %rcx
    // 3e: c6 40 43 00                   movb    $0x0, 0x43(%rax)
    // 42: 49 8b 56 78                   movq    0x78(%r14), %rdx
    // 46: 48 8d 70 28                   leaq    0x28(%rax), %rsi
    // 4a: 48 89 50 30                   movq    %rdx, 0x30(%rax)
    // 4e: 49 89 76 78                   movq    %rsi, 0x78(%r14)
    // 52: 4c 89 60 50                   movq    %r12, 0x50(%rax)
    // 56: 8b 05 00 00 00 00             movl    (%rip), %eax            ## 0x5c <__JIT_ENTRY+0x5c>
    // 0000000000000058:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 5c: 83 c0 02                      addl    $0x2, %eax
    // 5f: 66 41 89 44 24 48             movw    %ax, 0x48(%r12)
    // 65: 49 89 4d 00                   movq    %rcx, (%r13)
    // 69: 49 83 c5 08                   addq    $0x8, %r13
    // 6d: 5d                            popq    %rbp
    // 6e: e9 00 00 00 00                jmp     0x73 <__JIT_ENTRY+0x73>
    // 000000000000006f:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[110] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x48, 0x08, 0x48, 0x3b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x75, 0x06, 0x80, 0x78, 0x43,
        0x00, 0x78, 0x06, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x88, 0x88, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0x11, 0x48, 0x83, 0x80, 0x88, 0x00, 0x00,
        0x00, 0x08, 0x48, 0x8d, 0x48, 0x48, 0xc6, 0x40,
        0x43, 0x00, 0x49, 0x8b, 0x56, 0x78, 0x48, 0x8d,
        0x70, 0x28, 0x48, 0x89, 0x50, 0x30, 0x49, 0x89,
        0x76, 0x78, 0x4c, 0x89, 0x60, 0x50, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc0, 0x02, 0x66,
        0x41, 0x89, 0x44, 0x24, 0x48, 0x49, 0x89, 0x4d,
        0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d,
    };
    // 0: OPARG
    // 8: &_Py_NoneStruct+0x0
    // 10: &PyGen_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x10, (uintptr_t)&PyGen_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0xc);
    patch_32r(code + 0x1d, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)data + -0x4);
}

void
emit__FOR_ITER_TIER_TWO(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _FOR_ITER_TIER_TWO.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 11: ff 90 e0 00 00 00             callq   *0xe0(%rax)
    // 17: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 1c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 25: 48 85 c0                      testq   %rax, %rax
    // 28: 74 0e                         je      0x38 <__JIT_ENTRY+0x38>
    // 2a: 49 89 45 00                   movq    %rax, (%r13)
    // 2e: 49 83 c5 08                   addq    $0x8, %r13
    // 32: 5d                            popq    %rbp
    // 33: e9 00 00 00 00                jmp     0x38 <__JIT_ENTRY+0x38>
    // 0000000000000034:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 38: 49 8b 46 70                   movq    0x70(%r14), %rax
    // 3c: 48 85 c0                      testq   %rax, %rax
    // 3f: 74 5e                         je      0x9f <__JIT_ENTRY+0x9f>
    // 41: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
    // 46: 74 57                         je      0x9f <__JIT_ENTRY+0x9f>
    // 48: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 4d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x54 <__JIT_ENTRY+0x54>
    // 0000000000000050:  X86_64_RELOC_GOT_LOAD        _PyExc_StopIteration@GOTPCREL
    // 54: 48 8b 30                      movq    (%rax), %rsi
    // 57: 4c 89 f7                      movq    %r14, %rdi
    // 5a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x60 <__JIT_ENTRY+0x60>
    // 000000000000005c:  X86_64_RELOC_GOT     __PyErr_ExceptionMatches@GOTPCREL
    // 60: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 65: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 6e: 85 c0                         testl   %eax, %eax
    // 70: 74 33                         je      0xa5 <__JIT_ENTRY+0xa5>
    // 72: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 77: 49 8b 54 24 38                movq    0x38(%r12), %rdx
    // 7c: 4c 89 f7                      movq    %r14, %rdi
    // 7f: 4c 89 e6                      movq    %r12, %rsi
    // 82: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x88 <__JIT_ENTRY+0x88>
    // 0000000000000084:  X86_64_RELOC_GOT     __PyEval_MonitorRaise@GOTPCREL
    // 88: 4c 89 f7                      movq    %r14, %rdi
    // 8b: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x91 <__JIT_ENTRY+0x91>
    // 000000000000008d:  X86_64_RELOC_GOT     __PyErr_Clear@GOTPCREL
    // 91: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 96: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 9f: 5d                            popq    %rbp
    // a0: e9 00 00 00 00                jmp     0xa5 <__JIT_ENTRY+0xa5>
    // 00000000000000a1:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // a5: 5d                            popq    %rbp
    // a6: e9 00 00 00 00                jmp     0xab <__JIT_ENTRY+0xab>
    // 00000000000000a7:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[171] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x7d, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b, 0x47,
        0x08, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x0e, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83,
        0xc5, 0x08, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x46, 0x70, 0x48, 0x85, 0xc0, 0x74,
        0x5e, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x57,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x4c,
        0x89, 0xf7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0,
        0x74, 0x33, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x49,
        0x8b, 0x54, 0x24, 0x38, 0x4c, 0x89, 0xf7, 0x4c,
        0x89, 0xe6, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_PyErr_Clear+0x0
    // 8: &_PyEval_MonitorRaise+0x0
    // 10: &_PyErr_ExceptionMatches+0x0
    // 18: &PyExc_StopIteration+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyErr_Clear);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_MonitorRaise);
    patch_64(data + 0x10, (uintptr_t)&_PyErr_ExceptionMatches);
    patch_64(data + 0x18, (uintptr_t)&PyExc_StopIteration);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x34, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x5c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x84, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x8d, (uintptr_t)data + -0x4);
    patch_32r(code + 0xa1, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0xa7, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__GET_AITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_AITER.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // 8: 49 8b 47 08                   movq    0x8(%r15), %rax
    // c: 48 8b 48 50                   movq    0x50(%rax), %rcx
    // 10: 48 85 c9                      testq   %rcx, %rcx
    // 13: 74 59                         je      0x6e <__JIT_ENTRY+0x6e>
    // 15: 48 8b 49 08                   movq    0x8(%rcx), %rcx
    // 19: 48 85 c9                      testq   %rcx, %rcx
    // 1c: 74 50                         je      0x6e <__JIT_ENTRY+0x6e>
    // 1e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 23: 4c 89 ff                      movq    %r15, %rdi
    // 26: ff d1                         callq   *%rcx
    // 28: 48 89 c3                      movq    %rax, %rbx
    // 2b: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 30: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 39: 41 8b 07                      movl    (%r15), %eax
    // 3c: 85 c0                         testl   %eax, %eax
    // 3e: 78 0b                         js      0x4b <__JIT_ENTRY+0x4b>
    // 40: ff c8                         decl    %eax
    // 42: 41 89 07                      movl    %eax, (%r15)
    // 45: 0f 84 ca 00 00 00             je      0x115 <__JIT_ENTRY+0x115>
    // 4b: 48 85 db                      testq   %rbx, %rbx
    // 4e: 74 5f                         je      0xaf <__JIT_ENTRY+0xaf>
    // 50: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 54: 48 8b 48 50                   movq    0x50(%rax), %rcx
    // 58: 48 85 c9                      testq   %rcx, %rcx
    // 5b: 74 5c                         je      0xb9 <__JIT_ENTRY+0xb9>
    // 5d: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
    // 62: 74 55                         je      0xb9 <__JIT_ENTRY+0xb9>
    // 64: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 68: 5d                            popq    %rbp
    // 69: e9 00 00 00 00                jmp     0x6e <__JIT_ENTRY+0x6e>
    // 000000000000006a:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 6e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 73: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x7a <__JIT_ENTRY+0x7a>
    // 0000000000000076:  X86_64_RELOC_GOT_LOAD        _PyExc_TypeError@GOTPCREL
    // 7a: 48 8b 31                      movq    (%rcx), %rsi
    // 7d: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // 81: 48 8d 15 be 00 00 00          leaq    0xbe(%rip), %rdx        ## 0x146 <__JIT_ENTRY+0x146>
    // 0000000000000084:  X86_64_RELOC_SIGNED  __cstring
    // 88: 4c 89 f7                      movq    %r14, %rdi
    // 8b: 31 c0                         xorl    %eax, %eax
    // 8d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x93 <__JIT_ENTRY+0x93>
    // 000000000000008f:  X86_64_RELOC_GOT     __PyErr_Format@GOTPCREL
    // 93: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 98: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // a1: 41 8b 07                      movl    (%r15), %eax
    // a4: 85 c0                         testl   %eax, %eax
    // a6: 78 07                         js      0xaf <__JIT_ENTRY+0xaf>
    // a8: ff c8                         decl    %eax
    // aa: 41 89 07                      movl    %eax, (%r15)
    // ad: 74 53                         je      0x102 <__JIT_ENTRY+0x102>
    // af: 49 83 c5 f8                   addq    $-0x8, %r13
    // b3: 5d                            popq    %rbp
    // b4: e9 00 00 00 00                jmp     0xb9 <__JIT_ENTRY+0xb9>
    // 00000000000000b5:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // b9: 49 83 c5 f8                   addq    $-0x8, %r13
    // bd: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // c2: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0xc9 <__JIT_ENTRY+0xc9>
    // 00000000000000c5:  X86_64_RELOC_GOT_LOAD        _PyExc_TypeError@GOTPCREL
    // c9: 48 8b 31                      movq    (%rcx), %rsi
    // cc: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // d0: 48 8d 15 b0 00 00 00          leaq    0xb0(%rip), %rdx        ## 0x187 <__JIT_ENTRY+0x187>
    // 00000000000000d3:  X86_64_RELOC_SIGNED  __cstring
    // d7: 4c 89 f7                      movq    %r14, %rdi
    // da: 31 c0                         xorl    %eax, %eax
    // dc: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xe2 <__JIT_ENTRY+0xe2>
    // 00000000000000de:  X86_64_RELOC_GOT     __PyErr_Format@GOTPCREL
    // e2: 8b 03                         movl    (%rbx), %eax
    // e4: 85 c0                         testl   %eax, %eax
    // e6: 78 06                         js      0xee <__JIT_ENTRY+0xee>
    // e8: ff c8                         decl    %eax
    // ea: 89 03                         movl    %eax, (%rbx)
    // ec: 74 3b                         je      0x129 <__JIT_ENTRY+0x129>
    // ee: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // f3: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // fc: 5d                            popq    %rbp
    // fd: e9 00 00 00 00                jmp     0x102 <__JIT_ENTRY+0x102>
    // 00000000000000fe:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 102: 4c 89 ff                      movq    %r15, %rdi
    // 105: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x10b <__JIT_ENTRY+0x10b>
    // 0000000000000107:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 10b: 49 83 c5 f8                   addq    $-0x8, %r13
    // 10f: 5d                            popq    %rbp
    // 110: e9 00 00 00 00                jmp     0x115 <__JIT_ENTRY+0x115>
    // 0000000000000111:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 115: 4c 89 ff                      movq    %r15, %rdi
    // 118: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x11e <__JIT_ENTRY+0x11e>
    // 000000000000011a:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 11e: 48 85 db                      testq   %rbx, %rbx
    // 121: 0f 85 29 ff ff ff             jne     0x50 <__JIT_ENTRY+0x50>
    // 127: eb 86                         jmp     0xaf <__JIT_ENTRY+0xaf>
    // 129: 48 89 df                      movq    %rbx, %rdi
    // 12c: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x132 <__JIT_ENTRY+0x132>
    // 000000000000012e:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 132: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 137: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 140: 5d                            popq    %rbp
    // 141: e9 00 00 00 00                jmp     0x146 <__JIT_ENTRY+0x146>
    // 0000000000000142:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[326] = {
        0x55, 0x48, 0x89, 0xe5, 0x4d, 0x8b, 0x7d, 0xf8,
        0x49, 0x8b, 0x47, 0x08, 0x48, 0x8b, 0x48, 0x50,
        0x48, 0x85, 0xc9, 0x74, 0x59, 0x48, 0x8b, 0x49,
        0x08, 0x48, 0x85, 0xc9, 0x74, 0x50, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x4c, 0x89, 0xff, 0xff, 0xd1,
        0x48, 0x89, 0xc3, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x41, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0b,
        0xff, 0xc8, 0x41, 0x89, 0x07, 0x0f, 0x84, 0xca,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xdb, 0x74, 0x5f,
        0x48, 0x8b, 0x43, 0x08, 0x48, 0x8b, 0x48, 0x50,
        0x48, 0x85, 0xc9, 0x74, 0x5c, 0x48, 0x83, 0x79,
        0x10, 0x00, 0x74, 0x55, 0x49, 0x89, 0x5d, 0xf8,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x8b, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48,
        0x18, 0x48, 0x8d, 0x15, 0xbe, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0xf7, 0x31, 0xc0, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x41, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x07,
        0xff, 0xc8, 0x41, 0x89, 0x07, 0x74, 0x53, 0x49,
        0x83, 0xc5, 0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x83, 0xc5, 0xf8, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18,
        0x48, 0x8d, 0x15, 0xb0, 0x00, 0x00, 0x00, 0x4c,
        0x89, 0xf7, 0x31, 0xc0, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x03, 0x74, 0x3b, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x83, 0xc5, 0xf8, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85,
        0xdb, 0x0f, 0x85, 0x29, 0xff, 0xff, 0xff, 0xeb,
        0x86, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: "'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
    // 99: 00 00 00 00 00 00 00
    // a0: &_Py_Dealloc+0x0
    // a8: &_PyErr_Format+0x0
    // b0: &PyExc_TypeError+0x0
    const unsigned char data_body[184] = {
        0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66,
        0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75,
        0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20,
        0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77,
        0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69,
        0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65,
        0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f,
        0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73,
        0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20,
        0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63,
        0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e,
        0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
        0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61,
        0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74,
        0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73,
        0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70,
        0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f,
        0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f,
        0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0xa0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0xa8, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0xb0, (uintptr_t)&PyExc_TypeError);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x6a, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x76, (uintptr_t)data + 0xac);
    patch_32r(code + 0x84, (uintptr_t)data + 0x200);
    patch_x86_64_32rx(code + 0x8f, (uintptr_t)data + 0xa4);
    patch_32r(code + 0xb5, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0xc5, (uintptr_t)data + 0xac);
    patch_32r(code + 0xd3, (uintptr_t)data + 0x1f2);
    patch_x86_64_32rx(code + 0xde, (uintptr_t)data + 0xa4);
    patch_32r(code + 0xfe, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x107, (uintptr_t)data + 0x9c);
    patch_32r(code + 0x111, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x11a, (uintptr_t)data + 0x9c);
    patch_x86_64_32rx(code + 0x12e, (uintptr_t)data + 0x9c);
    patch_32r(code + 0x142, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__GET_ANEXT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_ANEXT.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     __PyEval_GetANext@GOTPCREL
    // 13: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 18: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 21: 48 85 c0                      testq   %rax, %rax
    // 24: 74 0e                         je      0x34 <__JIT_ENTRY+0x34>
    // 26: 49 89 45 00                   movq    %rax, (%r13)
    // 2a: 49 83 c5 08                   addq    $0x8, %r13
    // 2e: 5d                            popq    %rbp
    // 2f: e9 00 00 00 00                jmp     0x34 <__JIT_ENTRY+0x34>
    // 0000000000000030:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 34: 5d                            popq    %rbp
    // 35: e9 00 00 00 00                jmp     0x3a <__JIT_ENTRY+0x3a>
    // 0000000000000036:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[58] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x7d, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x74, 0x0e, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &_PyEval_GetANext+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_GetANext);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_32r(code + 0x30, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x36, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__GET_AWAITABLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_AWAITABLE.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 35 00 00 00 00          movzwl  (%rip), %esi            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // f: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 14: 48 89 df                      movq    %rbx, %rdi
    // 17: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x1d <__JIT_ENTRY+0x1d>
    // 0000000000000019:  X86_64_RELOC_GOT     __PyEval_GetAwaitable@GOTPCREL
    // 1d: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 22: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 2b: 8b 0b                         movl    (%rbx), %ecx
    // 2d: 85 c9                         testl   %ecx, %ecx
    // 2f: 78 06                         js      0x37 <__JIT_ENTRY+0x37>
    // 31: ff c9                         decl    %ecx
    // 33: 89 0b                         movl    %ecx, (%rbx)
    // 35: 74 0f                         je      0x46 <__JIT_ENTRY+0x46>
    // 37: 48 85 c0                      testq   %rax, %rax
    // 3a: 74 1e                         je      0x5a <__JIT_ENTRY+0x5a>
    // 3c: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 40: 5d                            popq    %rbp
    // 41: e9 00 00 00 00                jmp     0x46 <__JIT_ENTRY+0x46>
    // 0000000000000042:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 46: 48 89 df                      movq    %rbx, %rdi
    // 49: 48 89 c3                      movq    %rax, %rbx
    // 4c: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x52 <__JIT_ENTRY+0x52>
    // 000000000000004e:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 52: 48 89 d8                      movq    %rbx, %rax
    // 55: 48 85 c0                      testq   %rax, %rax
    // 58: 75 e2                         jne     0x3c <__JIT_ENTRY+0x3c>
    // 5a: 49 83 c5 f8                   addq    $-0x8, %r13
    // 5e: 5d                            popq    %rbp
    // 5f: e9 00 00 00 00                jmp     0x64 <__JIT_ENTRY+0x64>
    // 0000000000000060:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[100] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x35, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x5d, 0xf8, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xdf, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x0b, 0x85, 0xc9, 0x78,
        0x06, 0xff, 0xc9, 0x89, 0x0b, 0x74, 0x0f, 0x48,
        0x85, 0xc0, 0x74, 0x1e, 0x49, 0x89, 0x45, 0xf8,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xdf, 0x48, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x85, 0xc0,
        0x75, 0xe2, 0x49, 0x83, 0xc5, 0xf8, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyEval_GetAwaitable+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_GetAwaitable);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + 0x4);
    patch_32r(code + 0x42, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)data + -0x4);
    patch_32r(code + 0x60, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__GET_ITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_ITER.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 48 89 df                      movq    %rbx, %rdi
    // 10: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x16 <__JIT_ENTRY+0x16>
    // 0000000000000012:  X86_64_RELOC_GOT     _PyObject_GetIter@GOTPCREL
    // 16: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 1b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 24: 8b 0b                         movl    (%rbx), %ecx
    // 26: 85 c9                         testl   %ecx, %ecx
    // 28: 78 06                         js      0x30 <__JIT_ENTRY+0x30>
    // 2a: ff c9                         decl    %ecx
    // 2c: 89 0b                         movl    %ecx, (%rbx)
    // 2e: 74 0f                         je      0x3f <__JIT_ENTRY+0x3f>
    // 30: 48 85 c0                      testq   %rax, %rax
    // 33: 74 1e                         je      0x53 <__JIT_ENTRY+0x53>
    // 35: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 39: 5d                            popq    %rbp
    // 3a: e9 00 00 00 00                jmp     0x3f <__JIT_ENTRY+0x3f>
    // 000000000000003b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3f: 48 89 df                      movq    %rbx, %rdi
    // 42: 48 89 c3                      movq    %rax, %rbx
    // 45: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4b <__JIT_ENTRY+0x4b>
    // 0000000000000047:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 4b: 48 89 d8                      movq    %rbx, %rax
    // 4e: 48 85 c0                      testq   %rax, %rax
    // 51: 75 e2                         jne     0x35 <__JIT_ENTRY+0x35>
    // 53: 49 83 c5 f8                   addq    $-0x8, %r13
    // 57: 5d                            popq    %rbp
    // 58: e9 00 00 00 00                jmp     0x5d <__JIT_ENTRY+0x5d>
    // 0000000000000059:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[93] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x5d, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x0b, 0x85, 0xc9,
        0x78, 0x06, 0xff, 0xc9, 0x89, 0x0b, 0x74, 0x0f,
        0x48, 0x85, 0xc0, 0x74, 0x1e, 0x49, 0x89, 0x45,
        0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xdf, 0x48, 0x89, 0xc3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x85,
        0xc0, 0x75, 0xe2, 0x49, 0x83, 0xc5, 0xf8, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyObject_GetIter+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyObject_GetIter);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + 0x4);
    patch_32r(code + 0x3b, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + -0x4);
    patch_32r(code + 0x59, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__GET_LEN(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_LEN.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyObject_Size@GOTPCREL
    // 13: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 18: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 21: 48 85 c0                      testq   %rax, %rax
    // 24: 78 1c                         js      0x42 <__JIT_ENTRY+0x42>
    // 26: 48 89 c7                      movq    %rax, %rdi
    // 29: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2f <__JIT_ENTRY+0x2f>
    // 000000000000002b:  X86_64_RELOC_GOT     _PyLong_FromSsize_t@GOTPCREL
    // 2f: 48 85 c0                      testq   %rax, %rax
    // 32: 74 0e                         je      0x42 <__JIT_ENTRY+0x42>
    // 34: 49 89 45 00                   movq    %rax, (%r13)
    // 38: 49 83 c5 08                   addq    $0x8, %r13
    // 3c: 5d                            popq    %rbp
    // 3d: e9 00 00 00 00                jmp     0x42 <__JIT_ENTRY+0x42>
    // 000000000000003e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 42: 5d                            popq    %rbp
    // 43: e9 00 00 00 00                jmp     0x48 <__JIT_ENTRY+0x48>
    // 0000000000000044:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[72] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x7d, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x78, 0x1c, 0x48, 0x89,
        0xc7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x0e, 0x49, 0x89, 0x45, 0x00,
        0x49, 0x83, 0xc5, 0x08, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyLong_FromSsize_t+0x0
    // 8: &PyObject_Size+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_FromSsize_t);
    patch_64(data + 0x8, (uintptr_t)&PyObject_Size);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + -0x4);
    patch_32r(code + 0x3e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x44, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__GET_YIELD_FROM_ITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GET_YIELD_FROM_ITER.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 8: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyCoro_Type@GOTPCREL
    // 13: 74 43                         je      0x58 <__JIT_ENTRY+0x58>
    // 15: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x1c <__JIT_ENTRY+0x1c>
    // 0000000000000018:  X86_64_RELOC_GOT     _PyGen_Type@GOTPCREL
    // 1c: 74 49                         je      0x67 <__JIT_ENTRY+0x67>
    // 1e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 23: 48 89 df                      movq    %rbx, %rdi
    // 26: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2c <__JIT_ENTRY+0x2c>
    // 0000000000000028:  X86_64_RELOC_GOT     _PyObject_GetIter@GOTPCREL
    // 2c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 31: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3a: 48 85 c0                      testq   %rax, %rax
    // 3d: 74 5f                         je      0x9e <__JIT_ENTRY+0x9e>
    // 3f: 8b 0b                         movl    (%rbx), %ecx
    // 41: 85 c9                         testl   %ecx, %ecx
    // 43: 78 5f                         js      0xa4 <__JIT_ENTRY+0xa4>
    // 45: ff c9                         decl    %ecx
    // 47: 89 0b                         movl    %ecx, (%rbx)
    // 49: 74 66                         je      0xb1 <__JIT_ENTRY+0xb1>
    // 4b: 48 89 c3                      movq    %rax, %rbx
    // 4e: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 52: 5d                            popq    %rbp
    // 53: e9 00 00 00 00                jmp     0x58 <__JIT_ENTRY+0x58>
    // 0000000000000054:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 58: 49 8b 04 24                   movq    (%r12), %rax
    // 5c: 0f b7 40 30                   movzwl  0x30(%rax), %eax
    // 60: a9 80 01 00 00                testl   $0x180, %eax            ## imm = 0x180
    // 65: 74 0a                         je      0x71 <__JIT_ENTRY+0x71>
    // 67: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 6b: 5d                            popq    %rbp
    // 6c: e9 00 00 00 00                jmp     0x71 <__JIT_ENTRY+0x71>
    // 000000000000006d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 71: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 76: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x7d <__JIT_ENTRY+0x7d>
    // 0000000000000079:  X86_64_RELOC_GOT_LOAD        _PyExc_TypeError@GOTPCREL
    // 7d: 48 8b 30                      movq    (%rax), %rsi
    // 80: 48 8d 15 40 00 00 00          leaq    0x40(%rip), %rdx        ## 0xc7 <__JIT_ENTRY+0xc7>
    // 0000000000000083:  X86_64_RELOC_SIGNED  __cstring
    // 87: 4c 89 f7                      movq    %r14, %rdi
    // 8a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x90 <__JIT_ENTRY+0x90>
    // 000000000000008c:  X86_64_RELOC_GOT     __PyErr_SetString@GOTPCREL
    // 90: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 95: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 9e: 5d                            popq    %rbp
    // 9f: e9 00 00 00 00                jmp     0xa4 <__JIT_ENTRY+0xa4>
    // 00000000000000a0:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // a4: 48 89 c3                      movq    %rax, %rbx
    // a7: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // ab: 5d                            popq    %rbp
    // ac: e9 00 00 00 00                jmp     0xb1 <__JIT_ENTRY+0xb1>
    // 00000000000000ad:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // b1: 48 89 df                      movq    %rbx, %rdi
    // b4: 48 89 c3                      movq    %rax, %rbx
    // b7: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xbd <__JIT_ENTRY+0xbd>
    // 00000000000000b9:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // bd: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // c1: 5d                            popq    %rbp
    // c2: e9 00 00 00 00                jmp     0xc7 <__JIT_ENTRY+0xc7>
    // 00000000000000c3:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[194] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x5d, 0xf8,
        0x48, 0x8b, 0x43, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x43, 0x48, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x74, 0x49, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x5f, 0x8b,
        0x0b, 0x85, 0xc9, 0x78, 0x5f, 0xff, 0xc9, 0x89,
        0x0b, 0x74, 0x66, 0x48, 0x89, 0xc3, 0x49, 0x89,
        0x5d, 0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x04, 0x24, 0x0f, 0xb7, 0x40, 0x30,
        0xa9, 0x80, 0x01, 0x00, 0x00, 0x74, 0x0a, 0x49,
        0x89, 0x5d, 0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30,
        0x48, 0x8d, 0x15, 0x40, 0x00, 0x00, 0x00, 0x4c,
        0x89, 0xf7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc3, 0x49,
        0x89, 0x5d, 0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xc3, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x5d,
        0xf8, 0x5d,
    };
    // 0: "cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
    // 44: 00 00 00 00
    // 48: &_Py_Dealloc+0x0
    // 50: &_PyErr_SetString+0x0
    // 58: &PyExc_TypeError+0x0
    // 60: &PyObject_GetIter+0x0
    // 68: &PyGen_Type+0x0
    // 70: &PyCoro_Type+0x0
    const unsigned char data_body[120] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27,
        0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72,
        0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f,
        0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20,
        0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69,
        0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d,
        0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
        0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
        0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x48, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x50, (uintptr_t)&_PyErr_SetString);
    patch_64(data + 0x58, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x60, (uintptr_t)&PyObject_GetIter);
    patch_64(data + 0x68, (uintptr_t)&PyGen_Type);
    patch_64(data + 0x70, (uintptr_t)&PyCoro_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x6c);
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x5c);
    patch_32r(code + 0x54, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x6d, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x79, (uintptr_t)data + 0x54);
    patch_32r(code + 0x83, (uintptr_t)data + 0x103);
    patch_x86_64_32rx(code + 0x8c, (uintptr_t)data + 0x4c);
    patch_32r(code + 0xa0, state->instruction_starts[instruction->error_target] + -0x4);
    patch_32r(code + 0xad, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xb9, (uintptr_t)data + 0x44);
}

void
emit__GUARD_BINARY_OP_EXTEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_BINARY_OP_EXTEND.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 7d f0                   movq    -0x10(%r13), %rdi
    // 8: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x18 <__JIT_ENTRY+0x18>
    // 0000000000000014:  X86_64_RELOC_GOT_LOAD        __JIT_OPERAND0@GOTPCREL
    // 18: ff 50 08                      callq   *0x8(%rax)
    // 1b: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 20: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 29: 85 c0                         testl   %eax, %eax
    // 2b: 74 06                         je      0x33 <__JIT_ENTRY+0x33>
    // 2d: 5d                            popq    %rbp
    // 2e: e9 00 00 00 00                jmp     0x33 <__JIT_ENTRY+0x33>
    // 000000000000002f:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 33: 5d                            popq    %rbp
    // 34: e9 00 00 00 00                jmp     0x39 <__JIT_ENTRY+0x39>
    // 0000000000000035:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[57] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x75, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x50, 0x08, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xc0, 0x74, 0x06, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_32r(code + 0x2f, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x35, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_BOTH_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_BOTH_FLOAT.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 8: 48 8b 40 08                   movq    0x8(%rax), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyFloat_Type@GOTPCREL
    // 13: 75 11                         jne     0x26 <__JIT_ENTRY+0x26>
    // 15: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 19: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 1d: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x24 <__JIT_ENTRY+0x24>
    // 0000000000000020:  X86_64_RELOC_GOT     _PyFloat_Type@GOTPCREL
    // 24: 74 06                         je      0x2c <__JIT_ENTRY+0x2c>
    // 26: 5d                            popq    %rbp
    // 27: e9 00 00 00 00                jmp     0x2c <__JIT_ENTRY+0x2c>
    // 0000000000000028:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 2c: 5d                            popq    %rbp
    // 2d: e9 00 00 00 00                jmp     0x32 <__JIT_ENTRY+0x32>
    // 000000000000002e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[45] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf0,
        0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x75, 0x11, 0x49, 0x8b, 0x45,
        0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x74, 0x06, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &PyFloat_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + -0x4);
    patch_32r(code + 0x28, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_BOTH_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_BOTH_INT.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 8: 48 8b 40 08                   movq    0x8(%rax), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyLong_Type@GOTPCREL
    // 13: 75 11                         jne     0x26 <__JIT_ENTRY+0x26>
    // 15: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 19: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 1d: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x24 <__JIT_ENTRY+0x24>
    // 0000000000000020:  X86_64_RELOC_GOT     _PyLong_Type@GOTPCREL
    // 24: 74 06                         je      0x2c <__JIT_ENTRY+0x2c>
    // 26: 5d                            popq    %rbp
    // 27: e9 00 00 00 00                jmp     0x2c <__JIT_ENTRY+0x2c>
    // 0000000000000028:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 2c: 5d                            popq    %rbp
    // 2d: e9 00 00 00 00                jmp     0x32 <__JIT_ENTRY+0x32>
    // 000000000000002e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[45] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf0,
        0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x75, 0x11, 0x49, 0x8b, 0x45,
        0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x74, 0x06, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &PyLong_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + -0x4);
    patch_32r(code + 0x28, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_BOTH_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_BOTH_UNICODE.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 8: 48 8b 40 08                   movq    0x8(%rax), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyUnicode_Type@GOTPCREL
    // 13: 75 11                         jne     0x26 <__JIT_ENTRY+0x26>
    // 15: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 19: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 1d: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x24 <__JIT_ENTRY+0x24>
    // 0000000000000020:  X86_64_RELOC_GOT     _PyUnicode_Type@GOTPCREL
    // 24: 74 06                         je      0x2c <__JIT_ENTRY+0x2c>
    // 26: 5d                            popq    %rbp
    // 27: e9 00 00 00 00                jmp     0x2c <__JIT_ENTRY+0x2c>
    // 0000000000000028:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 2c: 5d                            popq    %rbp
    // 2d: e9 00 00 00 00                jmp     0x32 <__JIT_ENTRY+0x32>
    // 000000000000002e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[45] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf0,
        0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x75, 0x11, 0x49, 0x8b, 0x45,
        0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x74, 0x06, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &PyUnicode_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + -0x4);
    patch_32r(code + 0x28, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_BUILTINS_VERSION_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_BUILTINS_VERSION_PUSH_KEYS.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 44 24 20                movq    0x20(%r12), %rax
    // 9: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // d: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            ## 0x14 <__JIT_ENTRY+0x14>
    // 0000000000000010:  X86_64_RELOC_GOT     _PyDict_Type@GOTPCREL
    // 14: 75 1e                         jne     0x34 <__JIT_ENTRY+0x34>
    // 16: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 1a: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 21: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
    // 24: 75 0e                         jne     0x34 <__JIT_ENTRY+0x34>
    // 26: 49 89 45 00                   movq    %rax, (%r13)
    // 2a: 49 83 c5 08                   addq    $0x8, %r13
    // 2e: 5d                            popq    %rbp
    // 2f: e9 00 00 00 00                jmp     0x34 <__JIT_ENTRY+0x34>
    // 0000000000000030:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 34: 5d                            popq    %rbp
    // 35: e9 00 00 00 00                jmp     0x3a <__JIT_ENTRY+0x3a>
    // 0000000000000036:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[58] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x44, 0x24,
        0x20, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x3b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0x48, 0x8b,
        0x40, 0x20, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x39, 0x48, 0x0c, 0x75, 0x0e, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: &PyDict_Type+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&PyDict_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + -0x4);
    patch_32r(code + 0x30, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x36, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_DORV_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_DORV_NO_DICT.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 83 78 e8 00                cmpq    $0x0, -0x18(%rax)
    // d: 74 06                         je      0x15 <__JIT_ENTRY+0x15>
    // f: 5d                            popq    %rbp
    // 10: e9 00 00 00 00                jmp     0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 15: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 19: 48 8b 49 20                   movq    0x20(%rcx), %rcx
    // 1d: 80 7c 08 03 00                cmpb    $0x0, 0x3(%rax,%rcx)
    // 22: 74 eb                         je      0xf <__JIT_ENTRY+0xf>
    // 24: 5d                            popq    %rbp
    // 25: e9 00 00 00 00                jmp     0x2a <__JIT_ENTRY+0x2a>
    // 0000000000000026:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[37] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x83, 0x78, 0xe8, 0x00, 0x74, 0x06, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48,
        0x08, 0x48, 0x8b, 0x49, 0x20, 0x80, 0x7c, 0x08,
        0x03, 0x00, 0x74, 0xeb, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x11, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_DORV_VALUES_INST_ATTR_FROM_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // c: 48 8b 49 20                   movq    0x20(%rcx), %rcx
    // 10: 80 7c 08 03 00                cmpb    $0x0, 0x3(%rax,%rcx)
    // 15: 74 06                         je      0x1d <__JIT_ENTRY+0x1d>
    // 17: 5d                            popq    %rbp
    // 18: e9 00 00 00 00                jmp     0x1d <__JIT_ENTRY+0x1d>
    // 0000000000000019:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 1d: 5d                            popq    %rbp
    // 1e: e9 00 00 00 00                jmp     0x23 <__JIT_ENTRY+0x23>
    // 000000000000001f:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[35] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b, 0x49, 0x20,
        0x80, 0x7c, 0x08, 0x03, 0x00, 0x74, 0x06, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x19, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x1f, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_GLOBALS_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_GLOBALS_VERSION.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 44 24 18                movq    0x18(%r12), %rax
    // 9: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // d: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            ## 0x14 <__JIT_ENTRY+0x14>
    // 0000000000000010:  X86_64_RELOC_GOT     _PyDict_Type@GOTPCREL
    // 14: 75 16                         jne     0x2c <__JIT_ENTRY+0x2c>
    // 16: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 1a: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 21: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
    // 24: 75 06                         jne     0x2c <__JIT_ENTRY+0x2c>
    // 26: 5d                            popq    %rbp
    // 27: e9 00 00 00 00                jmp     0x2c <__JIT_ENTRY+0x2c>
    // 0000000000000028:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 2c: 5d                            popq    %rbp
    // 2d: e9 00 00 00 00                jmp     0x32 <__JIT_ENTRY+0x32>
    // 000000000000002e:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[50] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x44, 0x24,
        0x18, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x3b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x16, 0x48, 0x8b,
        0x40, 0x20, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x39, 0x48, 0x0c, 0x75, 0x06, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: &PyDict_Type+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&PyDict_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + -0x4);
    patch_32r(code + 0x28, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x2e, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_GLOBALS_VERSION_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_GLOBALS_VERSION_PUSH_KEYS.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 44 24 18                movq    0x18(%r12), %rax
    // 9: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // d: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            ## 0x14 <__JIT_ENTRY+0x14>
    // 0000000000000010:  X86_64_RELOC_GOT     _PyDict_Type@GOTPCREL
    // 14: 75 1e                         jne     0x34 <__JIT_ENTRY+0x34>
    // 16: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 1a: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 21: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
    // 24: 75 0e                         jne     0x34 <__JIT_ENTRY+0x34>
    // 26: 49 89 45 00                   movq    %rax, (%r13)
    // 2a: 49 83 c5 08                   addq    $0x8, %r13
    // 2e: 5d                            popq    %rbp
    // 2f: e9 00 00 00 00                jmp     0x34 <__JIT_ENTRY+0x34>
    // 0000000000000030:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 34: 5d                            popq    %rbp
    // 35: e9 00 00 00 00                jmp     0x3a <__JIT_ENTRY+0x3a>
    // 0000000000000036:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[58] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x44, 0x24,
        0x18, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x3b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0x48, 0x8b,
        0x40, 0x20, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x39, 0x48, 0x0c, 0x75, 0x0e, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: &PyDict_Type+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&PyDict_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + -0x4);
    patch_32r(code + 0x30, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x36, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_IS_FALSE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_IS_FALSE_POP.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     __Py_FalseStruct@GOTPCREL
    // 13: 74 06                         je      0x1b <__JIT_ENTRY+0x1b>
    // 15: 5d                            popq    %rbp
    // 16: e9 00 00 00 00                jmp     0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x06, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &_Py_FalseStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_32r(code + 0x17, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_IS_NONE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_IS_NONE_POP.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 4: 49 83 c5 f8                   addq    $-0x8, %r13
    // 8: 48 3b 3d 00 00 00 00          cmpq    (%rip), %rdi            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     __Py_NoneStruct@GOTPCREL
    // f: 0f 84 00 00 00 00             je      0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 15: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 1a: 8b 07                         movl    (%rdi), %eax
    // 1c: 85 c0                         testl   %eax, %eax
    // 1e: 78 06                         js      0x26 <__JIT_ENTRY+0x26>
    // 20: ff c8                         decl    %eax
    // 22: 89 07                         movl    %eax, (%rdi)
    // 24: 74 13                         je      0x39 <__JIT_ENTRY+0x39>
    // 26: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 34: e9 00 00 00 00                jmp     0x39 <__JIT_ENTRY+0x39>
    // 0000000000000035:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 39: 55                            pushq   %rbp
    // 3a: 48 89 e5                      movq    %rsp, %rbp
    // 3d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x43 <__JIT_ENTRY+0x43>
    // 000000000000003f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 43: 5d                            popq    %rbp
    // 44: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 49: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 52: e9 00 00 00 00                jmp     0x57 <__JIT_ENTRY+0x57>
    // 0000000000000053:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[87] = {
        0x49, 0x8b, 0x7d, 0xf8, 0x49, 0x83, 0xc5, 0xf8,
        0x48, 0x3b, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x84, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x07, 0x74, 0x13, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x55, 0x48, 0x89, 0xe5, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x5d, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_Py_NoneStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x4);
    patch_32r(code + 0x11, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x35, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)data + -0x4);
    patch_32r(code + 0x53, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_IS_NOT_NONE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_IS_NOT_NONE_POP.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 8b 03                         movl    (%rbx), %eax
    // 13: 85 c0                         testl   %eax, %eax
    // 15: 78 06                         js      0x1d <__JIT_ENTRY+0x1d>
    // 17: ff c8                         decl    %eax
    // 19: 89 03                         movl    %eax, (%rbx)
    // 1b: 74 1d                         je      0x3a <__JIT_ENTRY+0x3a>
    // 1d: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 22: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 2b: 48 3b 1d 00 00 00 00          cmpq    (%rip), %rbx            ## 0x32 <__JIT_ENTRY+0x32>
    // 000000000000002e:  X86_64_RELOC_GOT     __Py_NoneStruct@GOTPCREL
    // 32: 74 26                         je      0x5a <__JIT_ENTRY+0x5a>
    // 34: 5d                            popq    %rbp
    // 35: e9 00 00 00 00                jmp     0x3a <__JIT_ENTRY+0x3a>
    // 0000000000000036:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3a: 48 89 df                      movq    %rbx, %rdi
    // 3d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x43 <__JIT_ENTRY+0x43>
    // 000000000000003f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 43: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 48: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 51: 48 3b 1d 00 00 00 00          cmpq    (%rip), %rbx            ## 0x58 <__JIT_ENTRY+0x58>
    // 0000000000000054:  X86_64_RELOC_GOT     __Py_NoneStruct@GOTPCREL
    // 58: 75 da                         jne     0x34 <__JIT_ENTRY+0x34>
    // 5a: 5d                            popq    %rbp
    // 5b: e9 00 00 00 00                jmp     0x60 <__JIT_ENTRY+0x60>
    // 000000000000005c:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[96] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x5d, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x06, 0xff,
        0xc8, 0x89, 0x03, 0x74, 0x1d, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x3b, 0x1d, 0x00, 0x00,
        0x00, 0x00, 0x74, 0x26, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x3b, 0x1d, 0x00, 0x00, 0x00, 0x00,
        0x75, 0xda, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + -0x4);
    patch_32r(code + 0x36, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x54, (uintptr_t)data + -0x4);
    patch_32r(code + 0x5c, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_IS_TRUE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_IS_TRUE_POP.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     __Py_TrueStruct@GOTPCREL
    // 13: 74 06                         je      0x1b <__JIT_ENTRY+0x1b>
    // 15: 5d                            popq    %rbp
    // 16: e9 00 00 00 00                jmp     0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x06, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &_Py_TrueStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_32r(code + 0x17, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_KEYS_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_KEYS_VERSION.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 40 08                   movq    0x8(%rax), %rax
    // c: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
    // 13: 8b 40 0c                      movl    0xc(%rax), %eax
    // 16: 3b 05 00 00 00 00             cmpl    (%rip), %eax            ## 0x1c <__JIT_ENTRY+0x1c>
    // 0000000000000018:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 1c: 75 06                         jne     0x24 <__JIT_ENTRY+0x24>
    // 1e: 5d                            popq    %rbp
    // 1f: e9 00 00 00 00                jmp     0x24 <__JIT_ENTRY+0x24>
    // 0000000000000020:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 24: 5d                            popq    %rbp
    // 25: e9 00 00 00 00                jmp     0x2a <__JIT_ENTRY+0x2a>
    // 0000000000000026:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[42] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x80, 0x70,
        0x03, 0x00, 0x00, 0x8b, 0x40, 0x0c, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x06, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + -0x4);
    patch_32r(code + 0x20, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x26, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_NOS_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_NOS_FLOAT.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 8: 48 8b 40 08                   movq    0x8(%rax), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyFloat_Type@GOTPCREL
    // 13: 74 06                         je      0x1b <__JIT_ENTRY+0x1b>
    // 15: 5d                            popq    %rbp
    // 16: e9 00 00 00 00                jmp     0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf0,
        0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x06, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &PyFloat_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_32r(code + 0x17, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_NOS_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_NOS_INT.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 8: 48 8b 40 08                   movq    0x8(%rax), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyLong_Type@GOTPCREL
    // 13: 74 06                         je      0x1b <__JIT_ENTRY+0x1b>
    // 15: 5d                            popq    %rbp
    // 16: e9 00 00 00 00                jmp     0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf0,
        0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x06, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &PyLong_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_32r(code + 0x17, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_NOT_EXHAUSTED_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_NOT_EXHAUSTED_LIST.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // c: 48 85 c9                      testq   %rcx, %rcx
    // f: 74 10                         je      0x21 <__JIT_ENTRY+0x21>
    // 11: 48 8b 50 10                   movq    0x10(%rax), %rdx
    // 15: 48 3b 51 10                   cmpq    0x10(%rcx), %rdx
    // 19: 73 0c                         jae     0x27 <__JIT_ENTRY+0x27>
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 21: 5d                            popq    %rbp
    // 22: e9 00 00 00 00                jmp     0x27 <__JIT_ENTRY+0x27>
    // 0000000000000023:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 27: 48 c7 40 10 ff ff ff ff       movq    $-0x1, 0x10(%rax)
    // 2f: 5d                            popq    %rbp
    // 30: e9 00 00 00 00                jmp     0x35 <__JIT_ENTRY+0x35>
    // 0000000000000031:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[53] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74,
        0x10, 0x48, 0x8b, 0x50, 0x10, 0x48, 0x3b, 0x51,
        0x10, 0x73, 0x0c, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48,
        0xc7, 0x40, 0x10, 0xff, 0xff, 0xff, 0xff, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x1d, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x23, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x31, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_NOT_EXHAUSTED_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_NOT_EXHAUSTED_RANGE.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 83 78 20 00                cmpq    $0x0, 0x20(%rax)
    // d: 7e 06                         jle     0x15 <__JIT_ENTRY+0x15>
    // f: 5d                            popq    %rbp
    // 10: e9 00 00 00 00                jmp     0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 15: 5d                            popq    %rbp
    // 16: e9 00 00 00 00                jmp     0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[27] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x83, 0x78, 0x20, 0x00, 0x7e, 0x06, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x11, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x17, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_NOT_EXHAUSTED_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_NOT_EXHAUSTED_TUPLE.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // c: 48 85 c9                      testq   %rcx, %rcx
    // f: 74 10                         je      0x21 <__JIT_ENTRY+0x21>
    // 11: 48 8b 40 10                   movq    0x10(%rax), %rax
    // 15: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
    // 19: 7d 06                         jge     0x21 <__JIT_ENTRY+0x21>
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 21: 5d                            popq    %rbp
    // 22: e9 00 00 00 00                jmp     0x27 <__JIT_ENTRY+0x27>
    // 0000000000000023:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[39] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74,
        0x10, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41,
        0x10, 0x7d, 0x06, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x1d, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x23, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_TOS_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_TOS_FLOAT.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 40 08                   movq    0x8(%rax), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyFloat_Type@GOTPCREL
    // 13: 74 06                         je      0x1b <__JIT_ENTRY+0x1b>
    // 15: 5d                            popq    %rbp
    // 16: e9 00 00 00 00                jmp     0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x06, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &PyFloat_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_32r(code + 0x17, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_TOS_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_TOS_INT.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 40 08                   movq    0x8(%rax), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyLong_Type@GOTPCREL
    // 13: 74 06                         je      0x1b <__JIT_ENTRY+0x1b>
    // 15: 5d                            popq    %rbp
    // 16: e9 00 00 00 00                jmp     0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x06, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &PyLong_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_32r(code + 0x17, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_TYPE_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_TYPE_VERSION.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 40 08                   movq    0x8(%rax), %rax
    // c: 8b 80 80 01 00 00             movl    0x180(%rax), %eax
    // 12: 3b 05 00 00 00 00             cmpl    (%rip), %eax            ## 0x18 <__JIT_ENTRY+0x18>
    // 0000000000000014:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 18: 75 06                         jne     0x20 <__JIT_ENTRY+0x20>
    // 1a: 5d                            popq    %rbp
    // 1b: e9 00 00 00 00                jmp     0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 20: 5d                            popq    %rbp
    // 21: e9 00 00 00 00                jmp     0x26 <__JIT_ENTRY+0x26>
    // 0000000000000022:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[38] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x40, 0x08, 0x8b, 0x80, 0x80, 0x01,
        0x00, 0x00, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x06, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_32r(code + 0x1c, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x22, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__GUARD_TYPE_VERSION_AND_LOCK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _GUARD_TYPE_VERSION_AND_LOCK.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 40 08                   movq    0x8(%rax), %rax
    // c: 8b 80 80 01 00 00             movl    0x180(%rax), %eax
    // 12: 3b 05 00 00 00 00             cmpl    (%rip), %eax            ## 0x18 <__JIT_ENTRY+0x18>
    // 0000000000000014:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 18: 75 06                         jne     0x20 <__JIT_ENTRY+0x20>
    // 1a: 5d                            popq    %rbp
    // 1b: e9 00 00 00 00                jmp     0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 20: 5d                            popq    %rbp
    // 21: e9 00 00 00 00                jmp     0x26 <__JIT_ENTRY+0x26>
    // 0000000000000022:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[38] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x40, 0x08, 0x8b, 0x80, 0x80, 0x01,
        0x00, 0x00, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x06, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_32r(code + 0x1c, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x22, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__IMPORT_FROM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _IMPORT_FROM.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 49 8b 04 24                   movq    (%r12), %rax
    // c: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 10: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x17 <__JIT_ENTRY+0x17>
    // 0000000000000013:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 17: 48 8b 54 c8 18                movq    0x18(%rax,%rcx,8), %rdx
    // 1c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 21: 4c 89 f7                      movq    %r14, %rdi
    // 24: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2a <__JIT_ENTRY+0x2a>
    // 0000000000000026:  X86_64_RELOC_GOT     __PyEval_ImportFrom@GOTPCREL
    // 2a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 38: 48 85 c0                      testq   %rax, %rax
    // 3b: 74 0e                         je      0x4b <__JIT_ENTRY+0x4b>
    // 3d: 49 89 45 00                   movq    %rax, (%r13)
    // 41: 49 83 c5 08                   addq    $0x8, %r13
    // 45: 5d                            popq    %rbp
    // 46: e9 00 00 00 00                jmp     0x4b <__JIT_ENTRY+0x4b>
    // 0000000000000047:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 4b: 5d                            popq    %rbp
    // 4c: e9 00 00 00 00                jmp     0x51 <__JIT_ENTRY+0x51>
    // 000000000000004d:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[81] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x75, 0xf8,
        0x49, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40, 0x20,
        0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x54, 0xc8, 0x18, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x0e, 0x49, 0x89, 0x45,
        0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &_PyEval_ImportFrom+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_ImportFrom);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + -0x4);
    patch_32r(code + 0x47, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x4d, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__IMPORT_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _IMPORT_NAME.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 f7                      movq    %r14, %rdi
    // b: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // f: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 13: 49 8b 04 24                   movq    (%r12), %rax
    // 17: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 1b: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x22 <__JIT_ENTRY+0x22>
    // 000000000000001e:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 22: 48 8b 54 c8 18                movq    0x18(%rax,%rcx,8), %rdx
    // 27: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2c: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // 30: 4c 89 e6                      movq    %r12, %rsi
    // 33: 48 89 d9                      movq    %rbx, %rcx
    // 36: 4d 89 f8                      movq    %r15, %r8
    // 39: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x3f <__JIT_ENTRY+0x3f>
    // 000000000000003b:  X86_64_RELOC_GOT     __PyEval_ImportName@GOTPCREL
    // 3f: 49 89 c6                      movq    %rax, %r14
    // 42: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 47: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 50: 41 8b 07                      movl    (%r15), %eax
    // 53: 85 c0                         testl   %eax, %eax
    // 55: 78 10                         js      0x67 <__JIT_ENTRY+0x67>
    // 57: ff c8                         decl    %eax
    // 59: 41 89 07                      movl    %eax, (%r15)
    // 5c: 75 09                         jne     0x67 <__JIT_ENTRY+0x67>
    // 5e: 4c 89 ff                      movq    %r15, %rdi
    // 61: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x67 <__JIT_ENTRY+0x67>
    // 0000000000000063:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 67: 8b 03                         movl    (%rbx), %eax
    // 69: 85 c0                         testl   %eax, %eax
    // 6b: 78 06                         js      0x73 <__JIT_ENTRY+0x73>
    // 6d: ff c8                         decl    %eax
    // 6f: 89 03                         movl    %eax, (%rbx)
    // 71: 74 1b                         je      0x8e <__JIT_ENTRY+0x8e>
    // 73: 4d 85 f6                      testq   %r14, %r14
    // 76: 74 24                         je      0x9c <__JIT_ENTRY+0x9c>
    // 78: 4d 89 75 f0                   movq    %r14, -0x10(%r13)
    // 7c: 49 83 c5 f8                   addq    $-0x8, %r13
    // 80: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 84: 48 83 c4 10                   addq    $0x10, %rsp
    // 88: 5d                            popq    %rbp
    // 89: e9 00 00 00 00                jmp     0x8e <__JIT_ENTRY+0x8e>
    // 000000000000008a:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 8e: 48 89 df                      movq    %rbx, %rdi
    // 91: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x97 <__JIT_ENTRY+0x97>
    // 0000000000000093:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 97: 4d 85 f6                      testq   %r14, %r14
    // 9a: 75 dc                         jne     0x78 <__JIT_ENTRY+0x78>
    // 9c: 49 83 c5 f0                   addq    $-0x10, %r13
    // a0: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // a4: 48 83 c4 10                   addq    $0x10, %rsp
    // a8: 5d                            popq    %rbp
    // a9: e9 00 00 00 00                jmp     0xae <__JIT_ENTRY+0xae>
    // 00000000000000aa:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[174] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0xf7, 0x4d, 0x8b, 0x7d, 0xf0, 0x49,
        0x8b, 0x5d, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48,
        0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x54, 0xc8, 0x18, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x4c, 0x89, 0x75, 0xf8,
        0x4c, 0x89, 0xe6, 0x48, 0x89, 0xd9, 0x4d, 0x89,
        0xf8, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0xc6, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x41, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x10, 0xff,
        0xc8, 0x41, 0x89, 0x07, 0x75, 0x09, 0x4c, 0x89,
        0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x03, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89,
        0x03, 0x74, 0x1b, 0x4d, 0x85, 0xf6, 0x74, 0x24,
        0x4d, 0x89, 0x75, 0xf0, 0x49, 0x83, 0xc5, 0xf8,
        0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x85, 0xf6, 0x75, 0xdc, 0x49, 0x83, 0xc5, 0xf0,
        0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyEval_ImportName+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_ImportName);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x63, (uintptr_t)data + -0x4);
    patch_32r(code + 0x8a, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x93, (uintptr_t)data + -0x4);
    patch_32r(code + 0xaa, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__INIT_CALL_BOUND_METHOD_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x7 <__JIT_ENTRY+0x7>
    // 0000000000000003:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 7: ba fe ff ff ff                movl    $0xfffffffe, %edx       ## imm = 0xFFFFFFFE
    // c: 29 c2                         subl    %eax, %edx
    // e: f7 d0                         notl    %eax
    // 10: 48 63 c8                      movslq  %eax, %rcx
    // 13: 48 63 c2                      movslq  %edx, %rax
    // 16: 49 8b 54 c5 00                movq    (%r13,%rax,8), %rdx
    // 1b: 48 8b 72 18                   movq    0x18(%rdx), %rsi
    // 1f: 8b 3e                         movl    (%rsi), %edi
    // 21: 85 ff                         testl   %edi, %edi
    // 23: 78 04                         js      0x29 <__JIT_ENTRY+0x29>
    // 25: ff c7                         incl    %edi
    // 27: 89 3e                         movl    %edi, (%rsi)
    // 29: 49 89 74 cd 00                movq    %rsi, (%r13,%rcx,8)
    // 2e: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
    // 33: 48 8b 4a 10                   movq    0x10(%rdx), %rcx
    // 37: 8b 11                         movl    (%rcx), %edx
    // 39: 85 d2                         testl   %edx, %edx
    // 3b: 78 04                         js      0x41 <__JIT_ENTRY+0x41>
    // 3d: ff c2                         incl    %edx
    // 3f: 89 11                         movl    %edx, (%rcx)
    // 41: 49 89 4c c5 00                movq    %rcx, (%r13,%rax,8)
    // 46: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 4b: 8b 07                         movl    (%rdi), %eax
    // 4d: 85 c0                         testl   %eax, %eax
    // 4f: 78 06                         js      0x57 <__JIT_ENTRY+0x57>
    // 51: ff c8                         decl    %eax
    // 53: 89 07                         movl    %eax, (%rdi)
    // 55: 74 13                         je      0x6a <__JIT_ENTRY+0x6a>
    // 57: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 5c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 65: e9 00 00 00 00                jmp     0x6a <__JIT_ENTRY+0x6a>
    // 0000000000000066:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 6a: 55                            pushq   %rbp
    // 6b: 48 89 e5                      movq    %rsp, %rbp
    // 6e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x74 <__JIT_ENTRY+0x74>
    // 0000000000000070:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 74: 5d                            popq    %rbp
    // 75: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 7a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 83: e9 00 00 00 00                jmp     0x88 <__JIT_ENTRY+0x88>
    // 0000000000000084:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[131] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xba,
        0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0xf7, 0xd0,
        0x48, 0x63, 0xc8, 0x48, 0x63, 0xc2, 0x49, 0x8b,
        0x54, 0xc5, 0x00, 0x48, 0x8b, 0x72, 0x18, 0x8b,
        0x3e, 0x85, 0xff, 0x78, 0x04, 0xff, 0xc7, 0x89,
        0x3e, 0x49, 0x89, 0x74, 0xcd, 0x00, 0x49, 0x8b,
        0x7c, 0xc5, 0x00, 0x48, 0x8b, 0x4a, 0x10, 0x8b,
        0x11, 0x85, 0xd2, 0x78, 0x04, 0xff, 0xc2, 0x89,
        0x11, 0x49, 0x89, 0x4c, 0xc5, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x13, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + 0x4);
    patch_32r(code + 0x66, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x70, (uintptr_t)data + -0x4);
}

void
emit__INIT_CALL_PY_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 0f b7 35 00 00 00 00          movzwl  (%rip), %esi            ## 0x7 <__JIT_ENTRY+0x7>
    // 0000000000000003:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 7: 89 f0                         movl    %esi, %eax
    // 9: f7 d0                         notl    %eax
    // b: 48 98                         cltq
    // d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       ## imm = 0xFFFFFFFE
    // 12: 29 f1                         subl    %esi, %ecx
    // 14: 48 63 c9                      movslq  %ecx, %rcx
    // 17: 4d 8b 54 c5 00                movq    (%r13,%rax,8), %r10
    // 1c: 49 83 fa 01                   cmpq    $0x1, %r10
    // 20: 89 f3                         movl    %esi, %ebx
    // 22: 83 db ff                      sbbl    $-0x1, %ebx
    // 25: 4d 8b 44 cd 00                movq    (%r13,%rcx,8), %r8
    // 2a: 49 8b 78 30                   movq    0x30(%r8), %rdi
    // 2e: 49 8b 96 f0 00 00 00          movq    0xf0(%r14), %rdx
    // 35: 4c 63 4f 4c                   movslq  0x4c(%rdi), %r9
    // 39: 4e 8d 0c ca                   leaq    (%rdx,%r9,8), %r9
    // 3d: 4d 89 8e f0 00 00 00          movq    %r9, 0xf0(%r14)
    // 44: 4c 89 62 08                   movq    %r12, 0x8(%rdx)
    // 48: 4c 89 42 10                   movq    %r8, 0x10(%rdx)
    // 4c: 44 8b 0f                      movl    (%rdi), %r9d
    // 4f: 45 85 c9                      testl   %r9d, %r9d
    // 52: 78 06                         js      0x5a <__JIT_ENTRY+0x5a>
    // 54: 41 ff c1                      incl    %r9d
    // 57: 44 89 0f                      movl    %r9d, (%rdi)
    // 5a: 55                            pushq   %rbp
    // 5b: 48 89 e5                      movq    %rsp, %rbp
    // 5e: 48 8d 04 c5 00 00 00 00       leaq    (,%rax,8), %rax
    // 66: 4c 01 e8                      addq    %r13, %rax
    // 69: 48 89 3a                      movq    %rdi, (%rdx)
    // 6c: 41 0f 10 40 10                movups  0x10(%r8), %xmm0
    // 71: 0f 11 42 18                   movups  %xmm0, 0x18(%rdx)
    // 75: 48 c7 42 28 00 00 00 00       movq    $0x0, 0x28(%rdx)
    // 7d: 4c 8d 4a 50                   leaq    0x50(%rdx), %r9
    // 81: 4c 63 47 48                   movslq  0x48(%rdi), %r8
    // 85: 4e 8d 5c c2 50                leaq    0x50(%rdx,%r8,8), %r11
    // 8a: 4c 89 5a 40                   movq    %r11, 0x40(%rdx)
    // 8e: 48 c7 42 30 00 00 00 00       movq    $0x0, 0x30(%rdx)
    // 96: 4c 8d 9f d0 00 00 00          leaq    0xd0(%rdi), %r11
    // 9d: 4c 89 5a 38                   movq    %r11, 0x38(%rdx)
    // a1: c7 42 48 00 00 00 00          movl    $0x0, 0x48(%rdx)
    // a8: 41 39 d8                      cmpl    %ebx, %r8d
    // ab: 7e 17                         jle     0xc4 <__JIT_ENTRY+0xc4>
    // ad: 41 89 d8                      movl    %ebx, %r8d
    // b0: 4b c7 04 c1 00 00 00 00       movq    $0x0, (%r9,%r8,8)
    // b8: 49 ff c0                      incq    %r8
    // bb: 4c 63 5f 48                   movslq  0x48(%rdi), %r11
    // bf: 4d 39 d8                      cmpq    %r11, %r8
    // c2: 7c ec                         jl      0xb0 <__JIT_ENTRY+0xb0>
    // c4: 45 31 c0                      xorl    %r8d, %r8d
    // c7: 4d 85 d2                      testq   %r10, %r10
    // ca: 0f 95 c3                      setne   %bl
    // cd: 48 8b 38                      movq    (%rax), %rdi
    // d0: 49 89 39                      movq    %rdi, (%r9)
    // d3: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            ## 0xda <__JIT_ENTRY+0xda>
    // 00000000000000d6:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // da: 66 85 ff                      testw   %di, %di
    // dd: 0f 84 15 01 00 00             je      0x1f8 <__JIT_ENTRY+0x1f8>
    // e3: 41 88 d8                      movb    %bl, %r8b
    // e6: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            ## 0xed <__JIT_ENTRY+0xed>
    // 00000000000000e9:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // ed: 0f b7 ff                      movzwl  %di, %edi
    // f0: 66 83 ff 11                   cmpw    $0x11, %di
    // f4: 76 2a                         jbe     0x120 <__JIT_ENTRY+0x120>
    // f6: 45 31 db                      xorl    %r11d, %r11d
    // f9: 4d 85 d2                      testq   %r10, %r10
    // fc: 41 0f 95 c3                   setne   %r11b
    // 100: 4e 8d 14 da                   leaq    (%rdx,%r11,8), %r10
    // 104: 44 8d 3c fd 00 00 00 00       leal    (,%rdi,8), %r15d
    // 10c: 4d 01 fa                      addq    %r15, %r10
    // 10f: 4d 29 ea                      subq    %r13, %r10
    // 112: 49 83 c2 50                   addq    $0x50, %r10
    // 116: 49 83 fa 20                   cmpq    $0x20, %r10
    // 11a: 0f 83 91 00 00 00             jae     0x1b1 <__JIT_ENTRY+0x1b1>
    // 120: 45 31 d2                      xorl    %r10d, %r10d
    // 123: 48 89 fb                      movq    %rdi, %rbx
    // 126: 4d 89 d3                      movq    %r10, %r11
    // 129: 48 83 e3 03                   andq    $0x3, %rbx
    // 12d: 74 21                         je      0x150 <__JIT_ENTRY+0x150>
    // 12f: c1 e6 03                      shll    $0x3, %esi
    // 132: 4d 89 ef                      movq    %r13, %r15
    // 135: 49 29 f7                      subq    %rsi, %r15
    // 138: 4b 8d 34 c1                   leaq    (%r9,%r8,8), %rsi
    // 13c: 4d 89 d3                      movq    %r10, %r11
    // 13f: 90                            nop
    // 140: 4f 8b 0c df                   movq    (%r15,%r11,8), %r9
    // 144: 4e 89 0c de                   movq    %r9, (%rsi,%r11,8)
    // 148: 49 ff c3                      incq    %r11
    // 14b: 48 ff cb                      decq    %rbx
    // 14e: 75 f0                         jne     0x140 <__JIT_ENTRY+0x140>
    // 150: 49 29 fa                      subq    %rdi, %r10
    // 153: 49 83 fa fc                   cmpq    $-0x4, %r10
    // 157: 0f 87 9b 00 00 00             ja      0x1f8 <__JIT_ENTRY+0x1f8>
    // 15d: 44 8d 0c fd 00 00 00 00       leal    (,%rdi,8), %r9d
    // 165: 4c 89 ee                      movq    %r13, %rsi
    // 168: 4c 29 ce                      subq    %r9, %rsi
    // 16b: 48 83 c6 18                   addq    $0x18, %rsi
    // 16f: 4e 8d 04 c2                   leaq    (%rdx,%r8,8), %r8
    // 173: 49 83 c0 68                   addq    $0x68, %r8
    // 177: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
    // 180: 4e 8b 4c de e8                movq    -0x18(%rsi,%r11,8), %r9
    // 185: 4f 89 4c d8 e8                movq    %r9, -0x18(%r8,%r11,8)
    // 18a: 4e 8b 4c de f0                movq    -0x10(%rsi,%r11,8), %r9
    // 18f: 4f 89 4c d8 f0                movq    %r9, -0x10(%r8,%r11,8)
    // 194: 4e 8b 4c de f8                movq    -0x8(%rsi,%r11,8), %r9
    // 199: 4f 89 4c d8 f8                movq    %r9, -0x8(%r8,%r11,8)
    // 19e: 4e 8b 0c de                   movq    (%rsi,%r11,8), %r9
    // 1a2: 4f 89 0c d8                   movq    %r9, (%r8,%r11,8)
    // 1a6: 49 83 c3 04                   addq    $0x4, %r11
    // 1aa: 4c 39 df                      cmpq    %r11, %rdi
    // 1ad: 75 d1                         jne     0x180 <__JIT_ENTRY+0x180>
    // 1af: eb 47                         jmp     0x1f8 <__JIT_ENTRY+0x1f8>
    // 1b1: 41 89 fa                      movl    %edi, %r10d
    // 1b4: 41 83 e2 fc                   andl    $-0x4, %r10d
    // 1b8: 4e 8d 1c c2                   leaq    (%rdx,%r8,8), %r11
    // 1bc: 49 83 c3 60                   addq    $0x60, %r11
    // 1c0: 4c 89 eb                      movq    %r13, %rbx
    // 1c3: 4c 29 fb                      subq    %r15, %rbx
    // 1c6: 48 83 c3 10                   addq    $0x10, %rbx
    // 1ca: 45 31 ff                      xorl    %r15d, %r15d
    // 1cd: 0f 1f 00                      nopl    (%rax)
    // 1d0: 42 0f 10 44 fb f0             movups  -0x10(%rbx,%r15,8), %xmm0
    // 1d6: 42 0f 10 0c fb                movups  (%rbx,%r15,8), %xmm1
    // 1db: 43 0f 11 44 fb f0             movups  %xmm0, -0x10(%r11,%r15,8)
    // 1e1: 43 0f 11 0c fb                movups  %xmm1, (%r11,%r15,8)
    // 1e6: 49 83 c7 04                   addq    $0x4, %r15
    // 1ea: 4d 39 fa                      cmpq    %r15, %r10
    // 1ed: 75 e1                         jne     0x1d0 <__JIT_ENTRY+0x1d0>
    // 1ef: 41 39 fa                      cmpl    %edi, %r10d
    // 1f2: 0f 85 2b ff ff ff             jne     0x123 <__JIT_ENTRY+0x123>
    // 1f8: 49 89 54 cd 00                movq    %rdx, (%r13,%rcx,8)
    // 1fd: 49 89 c5                      movq    %rax, %r13
    // 200: 5d                            popq    %rbp
    // 201: e9 00 00 00 00                jmp     0x206 <__JIT_ENTRY+0x206>
    // 0000000000000202:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[513] = {
        0x0f, 0xb7, 0x35, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xf0, 0xf7, 0xd0, 0x48, 0x98, 0xb9, 0xfe, 0xff,
        0xff, 0xff, 0x29, 0xf1, 0x48, 0x63, 0xc9, 0x4d,
        0x8b, 0x54, 0xc5, 0x00, 0x49, 0x83, 0xfa, 0x01,
        0x89, 0xf3, 0x83, 0xdb, 0xff, 0x4d, 0x8b, 0x44,
        0xcd, 0x00, 0x49, 0x8b, 0x78, 0x30, 0x49, 0x8b,
        0x96, 0xf0, 0x00, 0x00, 0x00, 0x4c, 0x63, 0x4f,
        0x4c, 0x4e, 0x8d, 0x0c, 0xca, 0x4d, 0x89, 0x8e,
        0xf0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x62, 0x08,
        0x4c, 0x89, 0x42, 0x10, 0x44, 0x8b, 0x0f, 0x45,
        0x85, 0xc9, 0x78, 0x06, 0x41, 0xff, 0xc1, 0x44,
        0x89, 0x0f, 0x55, 0x48, 0x89, 0xe5, 0x48, 0x8d,
        0x04, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01,
        0xe8, 0x48, 0x89, 0x3a, 0x41, 0x0f, 0x10, 0x40,
        0x10, 0x0f, 0x11, 0x42, 0x18, 0x48, 0xc7, 0x42,
        0x28, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x4a,
        0x50, 0x4c, 0x63, 0x47, 0x48, 0x4e, 0x8d, 0x5c,
        0xc2, 0x50, 0x4c, 0x89, 0x5a, 0x40, 0x48, 0xc7,
        0x42, 0x30, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8d,
        0x9f, 0xd0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x5a,
        0x38, 0xc7, 0x42, 0x48, 0x00, 0x00, 0x00, 0x00,
        0x41, 0x39, 0xd8, 0x7e, 0x17, 0x41, 0x89, 0xd8,
        0x4b, 0xc7, 0x04, 0xc1, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xc0, 0x4c, 0x63, 0x5f, 0x48, 0x4d,
        0x39, 0xd8, 0x7c, 0xec, 0x45, 0x31, 0xc0, 0x4d,
        0x85, 0xd2, 0x0f, 0x95, 0xc3, 0x48, 0x8b, 0x38,
        0x49, 0x89, 0x39, 0x48, 0x8b, 0x3d, 0x00, 0x00,
        0x00, 0x00, 0x66, 0x85, 0xff, 0x0f, 0x84, 0x15,
        0x01, 0x00, 0x00, 0x41, 0x88, 0xd8, 0x48, 0x8b,
        0x3d, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xff,
        0x66, 0x83, 0xff, 0x11, 0x76, 0x2a, 0x45, 0x31,
        0xdb, 0x4d, 0x85, 0xd2, 0x41, 0x0f, 0x95, 0xc3,
        0x4e, 0x8d, 0x14, 0xda, 0x44, 0x8d, 0x3c, 0xfd,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xfa, 0x4d,
        0x29, 0xea, 0x49, 0x83, 0xc2, 0x50, 0x49, 0x83,
        0xfa, 0x20, 0x0f, 0x83, 0x91, 0x00, 0x00, 0x00,
        0x45, 0x31, 0xd2, 0x48, 0x89, 0xfb, 0x4d, 0x89,
        0xd3, 0x48, 0x83, 0xe3, 0x03, 0x74, 0x21, 0xc1,
        0xe6, 0x03, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xf7,
        0x4b, 0x8d, 0x34, 0xc1, 0x4d, 0x89, 0xd3, 0x90,
        0x4f, 0x8b, 0x0c, 0xdf, 0x4e, 0x89, 0x0c, 0xde,
        0x49, 0xff, 0xc3, 0x48, 0xff, 0xcb, 0x75, 0xf0,
        0x49, 0x29, 0xfa, 0x49, 0x83, 0xfa, 0xfc, 0x0f,
        0x87, 0x9b, 0x00, 0x00, 0x00, 0x44, 0x8d, 0x0c,
        0xfd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee,
        0x4c, 0x29, 0xce, 0x48, 0x83, 0xc6, 0x18, 0x4e,
        0x8d, 0x04, 0xc2, 0x49, 0x83, 0xc0, 0x68, 0x66,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4e, 0x8b, 0x4c, 0xde, 0xe8, 0x4f, 0x89, 0x4c,
        0xd8, 0xe8, 0x4e, 0x8b, 0x4c, 0xde, 0xf0, 0x4f,
        0x89, 0x4c, 0xd8, 0xf0, 0x4e, 0x8b, 0x4c, 0xde,
        0xf8, 0x4f, 0x89, 0x4c, 0xd8, 0xf8, 0x4e, 0x8b,
        0x0c, 0xde, 0x4f, 0x89, 0x0c, 0xd8, 0x49, 0x83,
        0xc3, 0x04, 0x4c, 0x39, 0xdf, 0x75, 0xd1, 0xeb,
        0x47, 0x41, 0x89, 0xfa, 0x41, 0x83, 0xe2, 0xfc,
        0x4e, 0x8d, 0x1c, 0xc2, 0x49, 0x83, 0xc3, 0x60,
        0x4c, 0x89, 0xeb, 0x4c, 0x29, 0xfb, 0x48, 0x83,
        0xc3, 0x10, 0x45, 0x31, 0xff, 0x0f, 0x1f, 0x00,
        0x42, 0x0f, 0x10, 0x44, 0xfb, 0xf0, 0x42, 0x0f,
        0x10, 0x0c, 0xfb, 0x43, 0x0f, 0x11, 0x44, 0xfb,
        0xf0, 0x43, 0x0f, 0x11, 0x0c, 0xfb, 0x49, 0x83,
        0xc7, 0x04, 0x4d, 0x39, 0xfa, 0x75, 0xe1, 0x41,
        0x39, 0xfa, 0x0f, 0x85, 0x2b, 0xff, 0xff, 0xff,
        0x49, 0x89, 0x54, 0xcd, 0x00, 0x49, 0x89, 0xc5,
        0x5d,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xd6, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xe9, (uintptr_t)data + -0x4);
}

void
emit__INIT_CALL_PY_EXACT_ARGS_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS_0.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 4d 8b 45 f0                   movq    -0x10(%r13), %r8
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 31 ff                         xorl    %edi, %edi
    // a: 48 85 f6                      testq   %rsi, %rsi
    // d: 40 0f 95 c7                   setne   %dil
    // 11: 49 8b 50 30                   movq    0x30(%r8), %rdx
    // 15: 49 8b 8e f0 00 00 00          movq    0xf0(%r14), %rcx
    // 1c: 48 63 42 4c                   movslq  0x4c(%rdx), %rax
    // 20: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
    // 24: 49 89 86 f0 00 00 00          movq    %rax, 0xf0(%r14)
    // 2b: 4c 89 61 08                   movq    %r12, 0x8(%rcx)
    // 2f: 4c 89 41 10                   movq    %r8, 0x10(%rcx)
    // 33: 8b 02                         movl    (%rdx), %eax
    // 35: 85 c0                         testl   %eax, %eax
    // 37: 78 04                         js      0x3d <__JIT_ENTRY+0x3d>
    // 39: ff c0                         incl    %eax
    // 3b: 89 02                         movl    %eax, (%rdx)
    // 3d: 55                            pushq   %rbp
    // 3e: 48 89 e5                      movq    %rsp, %rbp
    // 41: 49 8d 45 f8                   leaq    -0x8(%r13), %rax
    // 45: 48 89 11                      movq    %rdx, (%rcx)
    // 48: 41 0f 10 40 10                movups  0x10(%r8), %xmm0
    // 4d: 0f 11 41 18                   movups  %xmm0, 0x18(%rcx)
    // 51: 48 c7 41 28 00 00 00 00       movq    $0x0, 0x28(%rcx)
    // 59: 4c 63 42 48                   movslq  0x48(%rdx), %r8
    // 5d: 4e 8d 4c c1 50                leaq    0x50(%rcx,%r8,8), %r9
    // 62: 4c 89 49 40                   movq    %r9, 0x40(%rcx)
    // 66: 48 c7 41 30 00 00 00 00       movq    $0x0, 0x30(%rcx)
    // 6e: 4c 8d 8a d0 00 00 00          leaq    0xd0(%rdx), %r9
    // 75: 4c 89 49 38                   movq    %r9, 0x38(%rcx)
    // 79: c7 41 48 00 00 00 00          movl    $0x0, 0x48(%rcx)
    // 80: 41 39 f8                      cmpl    %edi, %r8d
    // 83: 7e 2f                         jle     0xb4 <__JIT_ENTRY+0xb4>
    // 85: 48 8d 79 50                   leaq    0x50(%rcx), %rdi
    // 89: 45 31 c0                      xorl    %r8d, %r8d
    // 8c: 48 85 f6                      testq   %rsi, %rsi
    // 8f: 41 0f 95 c0                   setne   %r8b
    // 93: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
    // a0: 4a c7 04 c7 00 00 00 00       movq    $0x0, (%rdi,%r8,8)
    // a8: 49 ff c0                      incq    %r8
    // ab: 48 63 72 48                   movslq  0x48(%rdx), %rsi
    // af: 49 39 f0                      cmpq    %rsi, %r8
    // b2: 7c ec                         jl      0xa0 <__JIT_ENTRY+0xa0>
    // b4: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // b8: 48 89 51 50                   movq    %rdx, 0x50(%rcx)
    // bc: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
    // c0: 49 89 c5                      movq    %rax, %r13
    // c3: 5d                            popq    %rbp
    // c4: e9 00 00 00 00                jmp     0xc9 <__JIT_ENTRY+0xc9>
    // 00000000000000c5:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[196] = {
        0x4d, 0x8b, 0x45, 0xf0, 0x49, 0x8b, 0x75, 0xf8,
        0x31, 0xff, 0x48, 0x85, 0xf6, 0x40, 0x0f, 0x95,
        0xc7, 0x49, 0x8b, 0x50, 0x30, 0x49, 0x8b, 0x8e,
        0xf0, 0x00, 0x00, 0x00, 0x48, 0x63, 0x42, 0x4c,
        0x48, 0x8d, 0x04, 0xc1, 0x49, 0x89, 0x86, 0xf0,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0x61, 0x08, 0x4c,
        0x89, 0x41, 0x10, 0x8b, 0x02, 0x85, 0xc0, 0x78,
        0x04, 0xff, 0xc0, 0x89, 0x02, 0x55, 0x48, 0x89,
        0xe5, 0x49, 0x8d, 0x45, 0xf8, 0x48, 0x89, 0x11,
        0x41, 0x0f, 0x10, 0x40, 0x10, 0x0f, 0x11, 0x41,
        0x18, 0x48, 0xc7, 0x41, 0x28, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x63, 0x42, 0x48, 0x4e, 0x8d, 0x4c,
        0xc1, 0x50, 0x4c, 0x89, 0x49, 0x40, 0x48, 0xc7,
        0x41, 0x30, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8d,
        0x8a, 0xd0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x49,
        0x38, 0xc7, 0x41, 0x48, 0x00, 0x00, 0x00, 0x00,
        0x41, 0x39, 0xf8, 0x7e, 0x2f, 0x48, 0x8d, 0x79,
        0x50, 0x45, 0x31, 0xc0, 0x48, 0x85, 0xf6, 0x41,
        0x0f, 0x95, 0xc0, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4a, 0xc7, 0x04, 0xc7, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xc0, 0x48, 0x63, 0x72, 0x48, 0x49,
        0x39, 0xf0, 0x7c, 0xec, 0x49, 0x8b, 0x55, 0xf8,
        0x48, 0x89, 0x51, 0x50, 0x49, 0x89, 0x4d, 0xf0,
        0x49, 0x89, 0xc5, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS_1.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 4d 8b 45 e8                   movq    -0x18(%r13), %r8
    // 4: 49 8b 55 f0                   movq    -0x10(%r13), %rdx
    // 8: 48 83 fa 01                   cmpq    $0x1, %rdx
    // c: bf 01 00 00 00                movl    $0x1, %edi
    // 11: 83 df ff                      sbbl    $-0x1, %edi
    // 14: 49 8b 70 30                   movq    0x30(%r8), %rsi
    // 18: 49 8b 8e f0 00 00 00          movq    0xf0(%r14), %rcx
    // 1f: 48 63 46 4c                   movslq  0x4c(%rsi), %rax
    // 23: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
    // 27: 49 89 86 f0 00 00 00          movq    %rax, 0xf0(%r14)
    // 2e: 4c 89 61 08                   movq    %r12, 0x8(%rcx)
    // 32: 4c 89 41 10                   movq    %r8, 0x10(%rcx)
    // 36: 8b 06                         movl    (%rsi), %eax
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 78 04                         js      0x40 <__JIT_ENTRY+0x40>
    // 3c: ff c0                         incl    %eax
    // 3e: 89 06                         movl    %eax, (%rsi)
    // 40: 55                            pushq   %rbp
    // 41: 48 89 e5                      movq    %rsp, %rbp
    // 44: 49 8d 45 f0                   leaq    -0x10(%r13), %rax
    // 48: 48 89 31                      movq    %rsi, (%rcx)
    // 4b: 41 0f 10 40 10                movups  0x10(%r8), %xmm0
    // 50: 0f 11 41 18                   movups  %xmm0, 0x18(%rcx)
    // 54: 48 c7 41 28 00 00 00 00       movq    $0x0, 0x28(%rcx)
    // 5c: 4c 63 46 48                   movslq  0x48(%rsi), %r8
    // 60: 4e 8d 4c c1 50                leaq    0x50(%rcx,%r8,8), %r9
    // 65: 4c 89 49 40                   movq    %r9, 0x40(%rcx)
    // 69: 48 c7 41 30 00 00 00 00       movq    $0x0, 0x30(%rcx)
    // 71: 4c 8d 8e d0 00 00 00          leaq    0xd0(%rsi), %r9
    // 78: 4c 89 49 38                   movq    %r9, 0x38(%rcx)
    // 7c: c7 41 48 00 00 00 00          movl    $0x0, 0x48(%rcx)
    // 83: 41 39 f8                      cmpl    %edi, %r8d
    // 86: 7e 1c                         jle     0xa4 <__JIT_ENTRY+0xa4>
    // 88: 4c 8d 41 50                   leaq    0x50(%rcx), %r8
    // 8c: 89 ff                         movl    %edi, %edi
    // 8e: 66 90                         nop
    // 90: 49 c7 04 f8 00 00 00 00       movq    $0x0, (%r8,%rdi,8)
    // 98: 48 ff c7                      incq    %rdi
    // 9b: 4c 63 4e 48                   movslq  0x48(%rsi), %r9
    // 9f: 4c 39 cf                      cmpq    %r9, %rdi
    // a2: 7c ec                         jl      0x90 <__JIT_ENTRY+0x90>
    // a4: 31 f6                         xorl    %esi, %esi
    // a6: 48 85 d2                      testq   %rdx, %rdx
    // a9: 40 0f 95 c6                   setne   %sil
    // ad: 49 8b 55 f0                   movq    -0x10(%r13), %rdx
    // b1: 48 89 51 50                   movq    %rdx, 0x50(%rcx)
    // b5: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // b9: 48 89 54 f1 50                movq    %rdx, 0x50(%rcx,%rsi,8)
    // be: 49 89 4d e8                   movq    %rcx, -0x18(%r13)
    // c2: 49 89 c5                      movq    %rax, %r13
    // c5: 5d                            popq    %rbp
    // c6: e9 00 00 00 00                jmp     0xcb <__JIT_ENTRY+0xcb>
    // 00000000000000c7:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[198] = {
        0x4d, 0x8b, 0x45, 0xe8, 0x49, 0x8b, 0x55, 0xf0,
        0x48, 0x83, 0xfa, 0x01, 0xbf, 0x01, 0x00, 0x00,
        0x00, 0x83, 0xdf, 0xff, 0x49, 0x8b, 0x70, 0x30,
        0x49, 0x8b, 0x8e, 0xf0, 0x00, 0x00, 0x00, 0x48,
        0x63, 0x46, 0x4c, 0x48, 0x8d, 0x04, 0xc1, 0x49,
        0x89, 0x86, 0xf0, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0x61, 0x08, 0x4c, 0x89, 0x41, 0x10, 0x8b, 0x06,
        0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89, 0x06,
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8d, 0x45, 0xf0,
        0x48, 0x89, 0x31, 0x41, 0x0f, 0x10, 0x40, 0x10,
        0x0f, 0x11, 0x41, 0x18, 0x48, 0xc7, 0x41, 0x28,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x63, 0x46, 0x48,
        0x4e, 0x8d, 0x4c, 0xc1, 0x50, 0x4c, 0x89, 0x49,
        0x40, 0x48, 0xc7, 0x41, 0x30, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x8d, 0x8e, 0xd0, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0x49, 0x38, 0xc7, 0x41, 0x48, 0x00,
        0x00, 0x00, 0x00, 0x41, 0x39, 0xf8, 0x7e, 0x1c,
        0x4c, 0x8d, 0x41, 0x50, 0x89, 0xff, 0x66, 0x90,
        0x49, 0xc7, 0x04, 0xf8, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0xc7, 0x4c, 0x63, 0x4e, 0x48, 0x4c,
        0x39, 0xcf, 0x7c, 0xec, 0x31, 0xf6, 0x48, 0x85,
        0xd2, 0x40, 0x0f, 0x95, 0xc6, 0x49, 0x8b, 0x55,
        0xf0, 0x48, 0x89, 0x51, 0x50, 0x49, 0x8b, 0x55,
        0xf8, 0x48, 0x89, 0x54, 0xf1, 0x50, 0x49, 0x89,
        0x4d, 0xe8, 0x49, 0x89, 0xc5, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS_2.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 4d 8b 45 e0                   movq    -0x20(%r13), %r8
    // 4: 49 8b 55 e8                   movq    -0x18(%r13), %rdx
    // 8: 48 83 fa 01                   cmpq    $0x1, %rdx
    // c: bf 02 00 00 00                movl    $0x2, %edi
    // 11: 83 df ff                      sbbl    $-0x1, %edi
    // 14: 49 8b 70 30                   movq    0x30(%r8), %rsi
    // 18: 49 8b 8e f0 00 00 00          movq    0xf0(%r14), %rcx
    // 1f: 48 63 46 4c                   movslq  0x4c(%rsi), %rax
    // 23: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
    // 27: 49 89 86 f0 00 00 00          movq    %rax, 0xf0(%r14)
    // 2e: 4c 89 61 08                   movq    %r12, 0x8(%rcx)
    // 32: 4c 89 41 10                   movq    %r8, 0x10(%rcx)
    // 36: 8b 06                         movl    (%rsi), %eax
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 78 04                         js      0x40 <__JIT_ENTRY+0x40>
    // 3c: ff c0                         incl    %eax
    // 3e: 89 06                         movl    %eax, (%rsi)
    // 40: 55                            pushq   %rbp
    // 41: 48 89 e5                      movq    %rsp, %rbp
    // 44: 49 8d 45 e8                   leaq    -0x18(%r13), %rax
    // 48: 48 89 31                      movq    %rsi, (%rcx)
    // 4b: 41 0f 10 40 10                movups  0x10(%r8), %xmm0
    // 50: 0f 11 41 18                   movups  %xmm0, 0x18(%rcx)
    // 54: 48 c7 41 28 00 00 00 00       movq    $0x0, 0x28(%rcx)
    // 5c: 4c 63 46 48                   movslq  0x48(%rsi), %r8
    // 60: 4e 8d 4c c1 50                leaq    0x50(%rcx,%r8,8), %r9
    // 65: 4c 89 49 40                   movq    %r9, 0x40(%rcx)
    // 69: 48 c7 41 30 00 00 00 00       movq    $0x0, 0x30(%rcx)
    // 71: 4c 8d 8e d0 00 00 00          leaq    0xd0(%rsi), %r9
    // 78: 4c 89 49 38                   movq    %r9, 0x38(%rcx)
    // 7c: c7 41 48 00 00 00 00          movl    $0x0, 0x48(%rcx)
    // 83: 41 39 f8                      cmpl    %edi, %r8d
    // 86: 7e 1c                         jle     0xa4 <__JIT_ENTRY+0xa4>
    // 88: 4c 8d 41 50                   leaq    0x50(%rcx), %r8
    // 8c: 89 ff                         movl    %edi, %edi
    // 8e: 66 90                         nop
    // 90: 49 c7 04 f8 00 00 00 00       movq    $0x0, (%r8,%rdi,8)
    // 98: 48 ff c7                      incq    %rdi
    // 9b: 4c 63 4e 48                   movslq  0x48(%rsi), %r9
    // 9f: 4c 39 cf                      cmpq    %r9, %rdi
    // a2: 7c ec                         jl      0x90 <__JIT_ENTRY+0x90>
    // a4: 31 f6                         xorl    %esi, %esi
    // a6: 48 85 d2                      testq   %rdx, %rdx
    // a9: 40 0f 95 c6                   setne   %sil
    // ad: 49 8b 55 e8                   movq    -0x18(%r13), %rdx
    // b1: 48 89 51 50                   movq    %rdx, 0x50(%rcx)
    // b5: 49 8b 55 f0                   movq    -0x10(%r13), %rdx
    // b9: 48 89 54 f1 50                movq    %rdx, 0x50(%rcx,%rsi,8)
    // be: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // c2: 48 89 54 f1 58                movq    %rdx, 0x58(%rcx,%rsi,8)
    // c7: 49 89 4d e0                   movq    %rcx, -0x20(%r13)
    // cb: 49 89 c5                      movq    %rax, %r13
    // ce: 5d                            popq    %rbp
    // cf: e9 00 00 00 00                jmp     0xd4 <__JIT_ENTRY+0xd4>
    // 00000000000000d0:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[207] = {
        0x4d, 0x8b, 0x45, 0xe0, 0x49, 0x8b, 0x55, 0xe8,
        0x48, 0x83, 0xfa, 0x01, 0xbf, 0x02, 0x00, 0x00,
        0x00, 0x83, 0xdf, 0xff, 0x49, 0x8b, 0x70, 0x30,
        0x49, 0x8b, 0x8e, 0xf0, 0x00, 0x00, 0x00, 0x48,
        0x63, 0x46, 0x4c, 0x48, 0x8d, 0x04, 0xc1, 0x49,
        0x89, 0x86, 0xf0, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0x61, 0x08, 0x4c, 0x89, 0x41, 0x10, 0x8b, 0x06,
        0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89, 0x06,
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8d, 0x45, 0xe8,
        0x48, 0x89, 0x31, 0x41, 0x0f, 0x10, 0x40, 0x10,
        0x0f, 0x11, 0x41, 0x18, 0x48, 0xc7, 0x41, 0x28,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x63, 0x46, 0x48,
        0x4e, 0x8d, 0x4c, 0xc1, 0x50, 0x4c, 0x89, 0x49,
        0x40, 0x48, 0xc7, 0x41, 0x30, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x8d, 0x8e, 0xd0, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0x49, 0x38, 0xc7, 0x41, 0x48, 0x00,
        0x00, 0x00, 0x00, 0x41, 0x39, 0xf8, 0x7e, 0x1c,
        0x4c, 0x8d, 0x41, 0x50, 0x89, 0xff, 0x66, 0x90,
        0x49, 0xc7, 0x04, 0xf8, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0xc7, 0x4c, 0x63, 0x4e, 0x48, 0x4c,
        0x39, 0xcf, 0x7c, 0xec, 0x31, 0xf6, 0x48, 0x85,
        0xd2, 0x40, 0x0f, 0x95, 0xc6, 0x49, 0x8b, 0x55,
        0xe8, 0x48, 0x89, 0x51, 0x50, 0x49, 0x8b, 0x55,
        0xf0, 0x48, 0x89, 0x54, 0xf1, 0x50, 0x49, 0x8b,
        0x55, 0xf8, 0x48, 0x89, 0x54, 0xf1, 0x58, 0x49,
        0x89, 0x4d, 0xe0, 0x49, 0x89, 0xc5, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS_3.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 4d 8b 45 d8                   movq    -0x28(%r13), %r8
    // 4: 49 8b 55 e0                   movq    -0x20(%r13), %rdx
    // 8: 48 83 fa 01                   cmpq    $0x1, %rdx
    // c: bf 03 00 00 00                movl    $0x3, %edi
    // 11: 83 df ff                      sbbl    $-0x1, %edi
    // 14: 49 8b 70 30                   movq    0x30(%r8), %rsi
    // 18: 49 8b 8e f0 00 00 00          movq    0xf0(%r14), %rcx
    // 1f: 48 63 46 4c                   movslq  0x4c(%rsi), %rax
    // 23: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
    // 27: 49 89 86 f0 00 00 00          movq    %rax, 0xf0(%r14)
    // 2e: 4c 89 61 08                   movq    %r12, 0x8(%rcx)
    // 32: 4c 89 41 10                   movq    %r8, 0x10(%rcx)
    // 36: 8b 06                         movl    (%rsi), %eax
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 78 04                         js      0x40 <__JIT_ENTRY+0x40>
    // 3c: ff c0                         incl    %eax
    // 3e: 89 06                         movl    %eax, (%rsi)
    // 40: 55                            pushq   %rbp
    // 41: 48 89 e5                      movq    %rsp, %rbp
    // 44: 49 8d 45 e0                   leaq    -0x20(%r13), %rax
    // 48: 48 89 31                      movq    %rsi, (%rcx)
    // 4b: 41 0f 10 40 10                movups  0x10(%r8), %xmm0
    // 50: 0f 11 41 18                   movups  %xmm0, 0x18(%rcx)
    // 54: 48 c7 41 28 00 00 00 00       movq    $0x0, 0x28(%rcx)
    // 5c: 4c 63 46 48                   movslq  0x48(%rsi), %r8
    // 60: 4e 8d 4c c1 50                leaq    0x50(%rcx,%r8,8), %r9
    // 65: 4c 89 49 40                   movq    %r9, 0x40(%rcx)
    // 69: 48 c7 41 30 00 00 00 00       movq    $0x0, 0x30(%rcx)
    // 71: 4c 8d 8e d0 00 00 00          leaq    0xd0(%rsi), %r9
    // 78: 4c 89 49 38                   movq    %r9, 0x38(%rcx)
    // 7c: c7 41 48 00 00 00 00          movl    $0x0, 0x48(%rcx)
    // 83: 41 39 f8                      cmpl    %edi, %r8d
    // 86: 7e 1c                         jle     0xa4 <__JIT_ENTRY+0xa4>
    // 88: 4c 8d 41 50                   leaq    0x50(%rcx), %r8
    // 8c: 89 ff                         movl    %edi, %edi
    // 8e: 66 90                         nop
    // 90: 49 c7 04 f8 00 00 00 00       movq    $0x0, (%r8,%rdi,8)
    // 98: 48 ff c7                      incq    %rdi
    // 9b: 4c 63 4e 48                   movslq  0x48(%rsi), %r9
    // 9f: 4c 39 cf                      cmpq    %r9, %rdi
    // a2: 7c ec                         jl      0x90 <__JIT_ENTRY+0x90>
    // a4: 31 f6                         xorl    %esi, %esi
    // a6: 48 85 d2                      testq   %rdx, %rdx
    // a9: 40 0f 95 c6                   setne   %sil
    // ad: 49 8b 55 e0                   movq    -0x20(%r13), %rdx
    // b1: 48 89 51 50                   movq    %rdx, 0x50(%rcx)
    // b5: 49 8b 55 e8                   movq    -0x18(%r13), %rdx
    // b9: 48 89 54 f1 50                movq    %rdx, 0x50(%rcx,%rsi,8)
    // be: 49 8b 55 f0                   movq    -0x10(%r13), %rdx
    // c2: 48 89 54 f1 58                movq    %rdx, 0x58(%rcx,%rsi,8)
    // c7: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // cb: 48 89 54 f1 60                movq    %rdx, 0x60(%rcx,%rsi,8)
    // d0: 49 89 4d d8                   movq    %rcx, -0x28(%r13)
    // d4: 49 89 c5                      movq    %rax, %r13
    // d7: 5d                            popq    %rbp
    // d8: e9 00 00 00 00                jmp     0xdd <__JIT_ENTRY+0xdd>
    // 00000000000000d9:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[216] = {
        0x4d, 0x8b, 0x45, 0xd8, 0x49, 0x8b, 0x55, 0xe0,
        0x48, 0x83, 0xfa, 0x01, 0xbf, 0x03, 0x00, 0x00,
        0x00, 0x83, 0xdf, 0xff, 0x49, 0x8b, 0x70, 0x30,
        0x49, 0x8b, 0x8e, 0xf0, 0x00, 0x00, 0x00, 0x48,
        0x63, 0x46, 0x4c, 0x48, 0x8d, 0x04, 0xc1, 0x49,
        0x89, 0x86, 0xf0, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0x61, 0x08, 0x4c, 0x89, 0x41, 0x10, 0x8b, 0x06,
        0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89, 0x06,
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8d, 0x45, 0xe0,
        0x48, 0x89, 0x31, 0x41, 0x0f, 0x10, 0x40, 0x10,
        0x0f, 0x11, 0x41, 0x18, 0x48, 0xc7, 0x41, 0x28,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x63, 0x46, 0x48,
        0x4e, 0x8d, 0x4c, 0xc1, 0x50, 0x4c, 0x89, 0x49,
        0x40, 0x48, 0xc7, 0x41, 0x30, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x8d, 0x8e, 0xd0, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0x49, 0x38, 0xc7, 0x41, 0x48, 0x00,
        0x00, 0x00, 0x00, 0x41, 0x39, 0xf8, 0x7e, 0x1c,
        0x4c, 0x8d, 0x41, 0x50, 0x89, 0xff, 0x66, 0x90,
        0x49, 0xc7, 0x04, 0xf8, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0xc7, 0x4c, 0x63, 0x4e, 0x48, 0x4c,
        0x39, 0xcf, 0x7c, 0xec, 0x31, 0xf6, 0x48, 0x85,
        0xd2, 0x40, 0x0f, 0x95, 0xc6, 0x49, 0x8b, 0x55,
        0xe0, 0x48, 0x89, 0x51, 0x50, 0x49, 0x8b, 0x55,
        0xe8, 0x48, 0x89, 0x54, 0xf1, 0x50, 0x49, 0x8b,
        0x55, 0xf0, 0x48, 0x89, 0x54, 0xf1, 0x58, 0x49,
        0x8b, 0x55, 0xf8, 0x48, 0x89, 0x54, 0xf1, 0x60,
        0x49, 0x89, 0x4d, 0xd8, 0x49, 0x89, 0xc5, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _INIT_CALL_PY_EXACT_ARGS_4.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 4d 8b 45 d0                   movq    -0x30(%r13), %r8
    // 4: 49 8b 55 d8                   movq    -0x28(%r13), %rdx
    // 8: 48 83 fa 01                   cmpq    $0x1, %rdx
    // c: bf 04 00 00 00                movl    $0x4, %edi
    // 11: 83 df ff                      sbbl    $-0x1, %edi
    // 14: 49 8b 70 30                   movq    0x30(%r8), %rsi
    // 18: 49 8b 8e f0 00 00 00          movq    0xf0(%r14), %rcx
    // 1f: 48 63 46 4c                   movslq  0x4c(%rsi), %rax
    // 23: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
    // 27: 49 89 86 f0 00 00 00          movq    %rax, 0xf0(%r14)
    // 2e: 4c 89 61 08                   movq    %r12, 0x8(%rcx)
    // 32: 4c 89 41 10                   movq    %r8, 0x10(%rcx)
    // 36: 8b 06                         movl    (%rsi), %eax
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 78 04                         js      0x40 <__JIT_ENTRY+0x40>
    // 3c: ff c0                         incl    %eax
    // 3e: 89 06                         movl    %eax, (%rsi)
    // 40: 55                            pushq   %rbp
    // 41: 48 89 e5                      movq    %rsp, %rbp
    // 44: 49 8d 45 d8                   leaq    -0x28(%r13), %rax
    // 48: 48 89 31                      movq    %rsi, (%rcx)
    // 4b: 41 0f 10 40 10                movups  0x10(%r8), %xmm0
    // 50: 0f 11 41 18                   movups  %xmm0, 0x18(%rcx)
    // 54: 48 c7 41 28 00 00 00 00       movq    $0x0, 0x28(%rcx)
    // 5c: 4c 63 46 48                   movslq  0x48(%rsi), %r8
    // 60: 4e 8d 4c c1 50                leaq    0x50(%rcx,%r8,8), %r9
    // 65: 4c 89 49 40                   movq    %r9, 0x40(%rcx)
    // 69: 48 c7 41 30 00 00 00 00       movq    $0x0, 0x30(%rcx)
    // 71: 4c 8d 8e d0 00 00 00          leaq    0xd0(%rsi), %r9
    // 78: 4c 89 49 38                   movq    %r9, 0x38(%rcx)
    // 7c: c7 41 48 00 00 00 00          movl    $0x0, 0x48(%rcx)
    // 83: 41 39 f8                      cmpl    %edi, %r8d
    // 86: 7e 1c                         jle     0xa4 <__JIT_ENTRY+0xa4>
    // 88: 4c 8d 41 50                   leaq    0x50(%rcx), %r8
    // 8c: 89 ff                         movl    %edi, %edi
    // 8e: 66 90                         nop
    // 90: 49 c7 04 f8 00 00 00 00       movq    $0x0, (%r8,%rdi,8)
    // 98: 48 ff c7                      incq    %rdi
    // 9b: 4c 63 4e 48                   movslq  0x48(%rsi), %r9
    // 9f: 4c 39 cf                      cmpq    %r9, %rdi
    // a2: 7c ec                         jl      0x90 <__JIT_ENTRY+0x90>
    // a4: 31 f6                         xorl    %esi, %esi
    // a6: 48 85 d2                      testq   %rdx, %rdx
    // a9: 40 0f 95 c6                   setne   %sil
    // ad: 49 8b 55 d8                   movq    -0x28(%r13), %rdx
    // b1: 48 89 51 50                   movq    %rdx, 0x50(%rcx)
    // b5: 49 8b 55 e0                   movq    -0x20(%r13), %rdx
    // b9: 48 89 54 f1 50                movq    %rdx, 0x50(%rcx,%rsi,8)
    // be: 49 8b 55 e8                   movq    -0x18(%r13), %rdx
    // c2: 48 89 54 f1 58                movq    %rdx, 0x58(%rcx,%rsi,8)
    // c7: 49 8b 55 f0                   movq    -0x10(%r13), %rdx
    // cb: 48 89 54 f1 60                movq    %rdx, 0x60(%rcx,%rsi,8)
    // d0: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // d4: 48 89 54 f1 68                movq    %rdx, 0x68(%rcx,%rsi,8)
    // d9: 49 89 4d d0                   movq    %rcx, -0x30(%r13)
    // dd: 49 89 c5                      movq    %rax, %r13
    // e0: 5d                            popq    %rbp
    // e1: e9 00 00 00 00                jmp     0xe6 <__JIT_ENTRY+0xe6>
    // 00000000000000e2:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[225] = {
        0x4d, 0x8b, 0x45, 0xd0, 0x49, 0x8b, 0x55, 0xd8,
        0x48, 0x83, 0xfa, 0x01, 0xbf, 0x04, 0x00, 0x00,
        0x00, 0x83, 0xdf, 0xff, 0x49, 0x8b, 0x70, 0x30,
        0x49, 0x8b, 0x8e, 0xf0, 0x00, 0x00, 0x00, 0x48,
        0x63, 0x46, 0x4c, 0x48, 0x8d, 0x04, 0xc1, 0x49,
        0x89, 0x86, 0xf0, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0x61, 0x08, 0x4c, 0x89, 0x41, 0x10, 0x8b, 0x06,
        0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89, 0x06,
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8d, 0x45, 0xd8,
        0x48, 0x89, 0x31, 0x41, 0x0f, 0x10, 0x40, 0x10,
        0x0f, 0x11, 0x41, 0x18, 0x48, 0xc7, 0x41, 0x28,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x63, 0x46, 0x48,
        0x4e, 0x8d, 0x4c, 0xc1, 0x50, 0x4c, 0x89, 0x49,
        0x40, 0x48, 0xc7, 0x41, 0x30, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x8d, 0x8e, 0xd0, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0x49, 0x38, 0xc7, 0x41, 0x48, 0x00,
        0x00, 0x00, 0x00, 0x41, 0x39, 0xf8, 0x7e, 0x1c,
        0x4c, 0x8d, 0x41, 0x50, 0x89, 0xff, 0x66, 0x90,
        0x49, 0xc7, 0x04, 0xf8, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0xc7, 0x4c, 0x63, 0x4e, 0x48, 0x4c,
        0x39, 0xcf, 0x7c, 0xec, 0x31, 0xf6, 0x48, 0x85,
        0xd2, 0x40, 0x0f, 0x95, 0xc6, 0x49, 0x8b, 0x55,
        0xd8, 0x48, 0x89, 0x51, 0x50, 0x49, 0x8b, 0x55,
        0xe0, 0x48, 0x89, 0x54, 0xf1, 0x50, 0x49, 0x8b,
        0x55, 0xe8, 0x48, 0x89, 0x54, 0xf1, 0x58, 0x49,
        0x8b, 0x55, 0xf0, 0x48, 0x89, 0x54, 0xf1, 0x60,
        0x49, 0x8b, 0x55, 0xf8, 0x48, 0x89, 0x54, 0xf1,
        0x68, 0x49, 0x89, 0x4d, 0xd0, 0x49, 0x89, 0xc5,
        0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__IS_NONE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _IS_NONE.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 4: 48 3b 3d 00 00 00 00          cmpq    (%rip), %rdi            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __Py_NoneStruct@GOTPCREL
    // b: 74 1c                         je      0x29 <__JIT_ENTRY+0x29>
    // d: 8b 07                         movl    (%rdi), %eax
    // f: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            ## 0x16 <__JIT_ENTRY+0x16>
    // 0000000000000012:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // 16: 85 c0                         testl   %eax, %eax
    // 18: 78 06                         js      0x20 <__JIT_ENTRY+0x20>
    // 1a: ff c8                         decl    %eax
    // 1c: 89 07                         movl    %eax, (%rdi)
    // 1e: 74 19                         je      0x39 <__JIT_ENTRY+0x39>
    // 20: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 24: e9 00 00 00 00                jmp     0x29 <__JIT_ENTRY+0x29>
    // 0000000000000025:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 29: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            ## 0x30 <__JIT_ENTRY+0x30>
    // 000000000000002c:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // 30: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 34: e9 00 00 00 00                jmp     0x39 <__JIT_ENTRY+0x39>
    // 0000000000000035:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 39: 55                            pushq   %rbp
    // 3a: 48 89 e5                      movq    %rsp, %rbp
    // 3d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x43 <__JIT_ENTRY+0x43>
    // 000000000000003f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 43: 5d                            popq    %rbp
    // 44: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 48: e9 00 00 00 00                jmp     0x4d <__JIT_ENTRY+0x4d>
    // 0000000000000049:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[72] = {
        0x49, 0x8b, 0x7d, 0xf8, 0x48, 0x3b, 0x3d, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x1c, 0x8b, 0x07, 0x48,
        0x8b, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x19,
        0x49, 0x89, 0x5d, 0xf8, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x1d, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x5d, 0xf8, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x55, 0x48, 0x89, 0xe5, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x5d, 0x49, 0x89, 0x5d, 0xf8,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: &_Py_FalseStruct+0x0
    // 18: &_Py_NoneStruct+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + 0xc);
    patch_32r(code + 0x25, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)data + 0x4);
    patch_32r(code + 0x35, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)data + -0x4);
}

void
emit__IS_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _IS_OP.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 8: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // c: 8b 03                         movl    (%rbx), %eax
    // e: 85 c0                         testl   %eax, %eax
    // 10: 78 0f                         js      0x21 <__JIT_ENTRY+0x21>
    // 12: ff c8                         decl    %eax
    // 14: 89 03                         movl    %eax, (%rbx)
    // 16: 75 09                         jne     0x21 <__JIT_ENTRY+0x21>
    // 18: 48 89 df                      movq    %rbx, %rdi
    // 1b: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 21: 41 8b 07                      movl    (%r15), %eax
    // 24: 85 c0                         testl   %eax, %eax
    // 26: 78 10                         js      0x38 <__JIT_ENTRY+0x38>
    // 28: ff c8                         decl    %eax
    // 2a: 41 89 07                      movl    %eax, (%r15)
    // 2d: 75 09                         jne     0x38 <__JIT_ENTRY+0x38>
    // 2f: 4c 89 ff                      movq    %r15, %rdi
    // 32: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x38 <__JIT_ENTRY+0x38>
    // 0000000000000034:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 38: 49 8d 45 f8                   leaq    -0x8(%r13), %rax
    // 3c: 31 c9                         xorl    %ecx, %ecx
    // 3e: 4c 39 fb                      cmpq    %r15, %rbx
    // 41: 0f 94 c1                      sete    %cl
    // 44: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            ## 0x4b <__JIT_ENTRY+0x4b>
    // 0000000000000047:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // 4b: 66 39 d1                      cmpw    %dx, %cx
    // 4e: 75 14                         jne     0x64 <__JIT_ENTRY+0x64>
    // 50: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x57 <__JIT_ENTRY+0x57>
    // 0000000000000053:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // 57: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
    // 5b: 49 89 c5                      movq    %rax, %r13
    // 5e: 5d                            popq    %rbp
    // 5f: e9 00 00 00 00                jmp     0x64 <__JIT_ENTRY+0x64>
    // 0000000000000060:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 64: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x6b <__JIT_ENTRY+0x6b>
    // 0000000000000067:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // 6b: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
    // 6f: 49 89 c5                      movq    %rax, %r13
    // 72: 5d                            popq    %rbp
    // 73: e9 00 00 00 00                jmp     0x78 <__JIT_ENTRY+0x78>
    // 0000000000000074:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[115] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x5d, 0xf0,
        0x4d, 0x8b, 0x7d, 0xf8, 0x8b, 0x03, 0x85, 0xc0,
        0x78, 0x0f, 0xff, 0xc8, 0x89, 0x03, 0x75, 0x09,
        0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x41, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x10,
        0xff, 0xc8, 0x41, 0x89, 0x07, 0x75, 0x09, 0x4c,
        0x89, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8d, 0x45, 0xf8, 0x31, 0xc9, 0x4c, 0x39,
        0xfb, 0x0f, 0x94, 0xc1, 0x48, 0x8b, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x66, 0x39, 0xd1, 0x75, 0x14,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x4d, 0xf0, 0x49, 0x89, 0xc5, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0x4d, 0xf0, 0x49,
        0x89, 0xc5, 0x5d,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: OPARG
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x53, (uintptr_t)data + 0x4);
    patch_32r(code + 0x60, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x67, (uintptr_t)data + -0x4);
}

void
emit__ITER_CHECK_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_CHECK_LIST.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 40 08                   movq    0x8(%rax), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyListIter_Type@GOTPCREL
    // 13: 74 06                         je      0x1b <__JIT_ENTRY+0x1b>
    // 15: 5d                            popq    %rbp
    // 16: e9 00 00 00 00                jmp     0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x06, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &PyListIter_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyListIter_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_32r(code + 0x17, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__ITER_CHECK_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_CHECK_RANGE.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 40 08                   movq    0x8(%rax), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyRangeIter_Type@GOTPCREL
    // 13: 74 06                         je      0x1b <__JIT_ENTRY+0x1b>
    // 15: 5d                            popq    %rbp
    // 16: e9 00 00 00 00                jmp     0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x06, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &PyRangeIter_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyRangeIter_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_32r(code + 0x17, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__ITER_CHECK_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_CHECK_TUPLE.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 40 08                   movq    0x8(%rax), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyTupleIter_Type@GOTPCREL
    // 13: 74 06                         je      0x1b <__JIT_ENTRY+0x1b>
    // 15: 5d                            popq    %rbp
    // 16: e9 00 00 00 00                jmp     0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x06, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &PyTupleIter_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTupleIter_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_32r(code + 0x17, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__ITER_NEXT_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_NEXT_LIST.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 48 10                   movq    0x10(%rax), %rcx
    // c: 48 8b 50 18                   movq    0x18(%rax), %rdx
    // 10: 48 8b 52 18                   movq    0x18(%rdx), %rdx
    // 14: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
    // 18: 48 89 70 10                   movq    %rsi, 0x10(%rax)
    // 1c: 48 8b 04 ca                   movq    (%rdx,%rcx,8), %rax
    // 20: 8b 08                         movl    (%rax), %ecx
    // 22: 85 c9                         testl   %ecx, %ecx
    // 24: 78 04                         js      0x2a <__JIT_ENTRY+0x2a>
    // 26: ff c1                         incl    %ecx
    // 28: 89 08                         movl    %ecx, (%rax)
    // 2a: 49 89 45 00                   movq    %rax, (%r13)
    // 2e: 49 83 c5 08                   addq    $0x8, %r13
    // 32: 5d                            popq    %rbp
    // 33: e9 00 00 00 00                jmp     0x38 <__JIT_ENTRY+0x38>
    // 0000000000000034:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[51] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18,
        0x48, 0x8b, 0x52, 0x18, 0x48, 0x8d, 0x71, 0x01,
        0x48, 0x89, 0x70, 0x10, 0x48, 0x8b, 0x04, 0xca,
        0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff, 0xc1,
        0x89, 0x08, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83,
        0xc5, 0x08, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__ITER_NEXT_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_NEXT_RANGE.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 78 10                   movq    0x10(%rax), %rdi
    // c: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // 10: 48 01 f9                      addq    %rdi, %rcx
    // 13: 48 89 48 10                   movq    %rcx, 0x10(%rax)
    // 17: 48 ff 48 20                   decq    0x20(%rax)
    // 1b: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_GOT     _PyLong_FromLong@GOTPCREL
    // 21: 48 85 c0                      testq   %rax, %rax
    // 24: 74 0e                         je      0x34 <__JIT_ENTRY+0x34>
    // 26: 49 89 45 00                   movq    %rax, (%r13)
    // 2a: 49 83 c5 08                   addq    $0x8, %r13
    // 2e: 5d                            popq    %rbp
    // 2f: e9 00 00 00 00                jmp     0x34 <__JIT_ENTRY+0x34>
    // 0000000000000030:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 34: 5d                            popq    %rbp
    // 35: e9 00 00 00 00                jmp     0x3a <__JIT_ENTRY+0x3a>
    // 0000000000000036:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[58] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x78, 0x10, 0x48, 0x8b, 0x48, 0x18,
        0x48, 0x01, 0xf9, 0x48, 0x89, 0x48, 0x10, 0x48,
        0xff, 0x48, 0x20, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x74, 0x0e, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &PyLong_FromLong+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_FromLong);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + -0x4);
    patch_32r(code + 0x30, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x36, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__ITER_NEXT_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _ITER_NEXT_TUPLE.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 48 10                   movq    0x10(%rax), %rcx
    // c: 48 8b 50 18                   movq    0x18(%rax), %rdx
    // 10: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
    // 14: 48 89 70 10                   movq    %rsi, 0x10(%rax)
    // 18: 48 8b 44 ca 18                movq    0x18(%rdx,%rcx,8), %rax
    // 1d: 8b 08                         movl    (%rax), %ecx
    // 1f: 85 c9                         testl   %ecx, %ecx
    // 21: 78 04                         js      0x27 <__JIT_ENTRY+0x27>
    // 23: ff c1                         incl    %ecx
    // 25: 89 08                         movl    %ecx, (%rax)
    // 27: 49 89 45 00                   movq    %rax, (%r13)
    // 2b: 49 83 c5 08                   addq    $0x8, %r13
    // 2f: 5d                            popq    %rbp
    // 30: e9 00 00 00 00                jmp     0x35 <__JIT_ENTRY+0x35>
    // 0000000000000031:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[48] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18,
        0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10,
        0x48, 0x8b, 0x44, 0xca, 0x18, 0x8b, 0x08, 0x85,
        0xc9, 0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x49,
        0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__JUMP_TO_TOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _JUMP_TO_TOP.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 5d                            popq    %rbp
    // 5: e9 00 00 00 00                jmp     0xa <__JIT_ENTRY+0xa>
    // 0000000000000006:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[10] = {
        0x55, 0x48, 0x89, 0xe5, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x6, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__LIST_APPEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LIST_APPEND.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 4c 89 e8                      movq    %r13, %rax
    // 3: 8b 0d 00 00 00 00             movl    (%rip), %ecx            ## 0x9 <__JIT_ENTRY+0x9>
    // 0000000000000005:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 9: f7 d1                         notl    %ecx
    // b: 49 83 c5 f8                   addq    $-0x8, %r13
    // f: 48 8b 70 f8                   movq    -0x8(%rax), %rsi
    // 13: c1 e1 03                      shll    $0x3, %ecx
    // 16: 48 81 c9 00 00 f8 ff          orq     $-0x80000, %rcx         ## imm = 0xFFF80000
    // 1d: 48 8b 3c 08                   movq    (%rax,%rcx), %rdi
    // 21: 48 8b 47 10                   movq    0x10(%rdi), %rax
    // 25: 48 39 47 20                   cmpq    %rax, 0x20(%rdi)
    // 29: 7e 14                         jle     0x3f <__JIT_ENTRY+0x3f>
    // 2b: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
    // 2f: 48 89 34 c1                   movq    %rsi, (%rcx,%rax,8)
    // 33: 48 ff c0                      incq    %rax
    // 36: 48 89 47 10                   movq    %rax, 0x10(%rdi)
    // 3a: e9 00 00 00 00                jmp     0x3f <__JIT_ENTRY+0x3f>
    // 000000000000003b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3f: 55                            pushq   %rbp
    // 40: 48 89 e5                      movq    %rsp, %rbp
    // 43: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x49 <__JIT_ENTRY+0x49>
    // 0000000000000045:  X86_64_RELOC_GOT     __PyList_AppendTakeRefListResize@GOTPCREL
    // 49: 85 c0                         testl   %eax, %eax
    // 4b: 5d                            popq    %rbp
    // 4c: 0f 89 00 00 00 00             jns     0x52 <__JIT_ENTRY+0x52>
    // 000000000000004e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 52: e9 00 00 00 00                jmp     0x57 <__JIT_ENTRY+0x57>
    // 0000000000000053:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[87] = {
        0x4c, 0x89, 0xe8, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0xf7, 0xd1, 0x49, 0x83, 0xc5, 0xf8, 0x48,
        0x8b, 0x70, 0xf8, 0xc1, 0xe1, 0x03, 0x48, 0x81,
        0xc9, 0x00, 0x00, 0xf8, 0xff, 0x48, 0x8b, 0x3c,
        0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x39, 0x47,
        0x20, 0x7e, 0x14, 0x48, 0x8b, 0x4f, 0x18, 0x48,
        0x89, 0x34, 0xc1, 0x48, 0xff, 0xc0, 0x48, 0x89,
        0x47, 0x10, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x55,
        0x48, 0x89, 0xe5, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xc0, 0x5d, 0x0f, 0x89, 0x00, 0x00,
        0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyList_AppendTakeRefListResize+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyList_AppendTakeRefListResize);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x5, (uintptr_t)data + 0x4);
    patch_32r(code + 0x3b, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + -0x4);
    patch_32r(code + 0x4e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x53, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LIST_EXTEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LIST_EXTEND.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 8b 05 00 00 00 00             movl    (%rip), %eax            ## 0xa <__JIT_ENTRY+0xa>
    // 0000000000000006:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // a: f7 d0                         notl    %eax
    // c: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 10: c1 e0 03                      shll    $0x3, %eax
    // 13: 48 0d 00 00 f8 ff             orq     $-0x80000, %rax         ## imm = 0xFFF80000
    // 19: 49 8b 7c 05 00                movq    (%r13,%rax), %rdi
    // 1e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 23: 48 89 de                      movq    %rbx, %rsi
    // 26: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2c <__JIT_ENTRY+0x2c>
    // 0000000000000028:  X86_64_RELOC_GOT     __PyList_Extend@GOTPCREL
    // 2c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 31: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3a: 48 85 c0                      testq   %rax, %rax
    // 3d: 74 1a                         je      0x59 <__JIT_ENTRY+0x59>
    // 3f: 8b 03                         movl    (%rbx), %eax
    // 41: 85 c0                         testl   %eax, %eax
    // 43: 78 0a                         js      0x4f <__JIT_ENTRY+0x4f>
    // 45: ff c8                         decl    %eax
    // 47: 89 03                         movl    %eax, (%rbx)
    // 49: 0f 84 9e 00 00 00             je      0xed <__JIT_ENTRY+0xed>
    // 4f: 49 83 c5 f8                   addq    $-0x8, %r13
    // 53: 5d                            popq    %rbp
    // 54: e9 00 00 00 00                jmp     0x59 <__JIT_ENTRY+0x59>
    // 0000000000000055:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 59: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 5e: 4c 8b 3d 00 00 00 00          movq    (%rip), %r15            ## 0x65 <__JIT_ENTRY+0x65>
    // 0000000000000061:  X86_64_RELOC_GOT_LOAD        _PyExc_TypeError@GOTPCREL
    // 65: 49 8b 37                      movq    (%r15), %rsi
    // 68: 4c 89 f7                      movq    %r14, %rdi
    // 6b: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x71 <__JIT_ENTRY+0x71>
    // 000000000000006d:  X86_64_RELOC_GOT     __PyErr_ExceptionMatches@GOTPCREL
    // 71: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 76: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 7f: 85 c0                         testl   %eax, %eax
    // 81: 74 54                         je      0xd7 <__JIT_ENTRY+0xd7>
    // 83: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 87: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
    // 8f: 75 46                         jne     0xd7 <__JIT_ENTRY+0xd7>
    // 91: 48 89 df                      movq    %rbx, %rdi
    // 94: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x9a <__JIT_ENTRY+0x9a>
    // 0000000000000096:  X86_64_RELOC_GOT     _PySequence_Check@GOTPCREL
    // 9a: 85 c0                         testl   %eax, %eax
    // 9c: 75 39                         jne     0xd7 <__JIT_ENTRY+0xd7>
    // 9e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // a3: 4c 89 f7                      movq    %r14, %rdi
    // a6: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xac <__JIT_ENTRY+0xac>
    // 00000000000000a8:  X86_64_RELOC_GOT     __PyErr_Clear@GOTPCREL
    // ac: 49 8b 37                      movq    (%r15), %rsi
    // af: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // b3: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // b7: 48 8d 15 55 00 00 00          leaq    0x55(%rip), %rdx        ## 0x113 <__JIT_ENTRY+0x113>
    // 00000000000000ba:  X86_64_RELOC_SIGNED  __cstring
    // be: 4c 89 f7                      movq    %r14, %rdi
    // c1: 31 c0                         xorl    %eax, %eax
    // c3: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xc9 <__JIT_ENTRY+0xc9>
    // 00000000000000c5:  X86_64_RELOC_GOT     __PyErr_Format@GOTPCREL
    // c9: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // ce: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // d7: 8b 03                         movl    (%rbx), %eax
    // d9: 85 c0                         testl   %eax, %eax
    // db: 78 06                         js      0xe3 <__JIT_ENTRY+0xe3>
    // dd: ff c8                         decl    %eax
    // df: 89 03                         movl    %eax, (%rbx)
    // e1: 74 1d                         je      0x100 <__JIT_ENTRY+0x100>
    // e3: 49 83 c5 f8                   addq    $-0x8, %r13
    // e7: 5d                            popq    %rbp
    // e8: e9 00 00 00 00                jmp     0xed <__JIT_ENTRY+0xed>
    // 00000000000000e9:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // ed: 48 89 df                      movq    %rbx, %rdi
    // f0: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xf6 <__JIT_ENTRY+0xf6>
    // 00000000000000f2:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // f6: 49 83 c5 f8                   addq    $-0x8, %r13
    // fa: 5d                            popq    %rbp
    // fb: e9 00 00 00 00                jmp     0x100 <__JIT_ENTRY+0x100>
    // 00000000000000fc:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 100: 48 89 df                      movq    %rbx, %rdi
    // 103: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x109 <__JIT_ENTRY+0x109>
    // 0000000000000105:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 109: 49 83 c5 f8                   addq    $-0x8, %r13
    // 10d: 5d                            popq    %rbp
    // 10e: e9 00 00 00 00                jmp     0x113 <__JIT_ENTRY+0x113>
    // 000000000000010f:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[275] = {
        0x55, 0x48, 0x89, 0xe5, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0xf7, 0xd0, 0x49, 0x8b, 0x5d, 0xf8,
        0xc1, 0xe0, 0x03, 0x48, 0x0d, 0x00, 0x00, 0xf8,
        0xff, 0x49, 0x8b, 0x7c, 0x05, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0xde, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x1a, 0x8b,
        0x03, 0x85, 0xc0, 0x78, 0x0a, 0xff, 0xc8, 0x89,
        0x03, 0x0f, 0x84, 0x9e, 0x00, 0x00, 0x00, 0x49,
        0x83, 0xc5, 0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x4c, 0x8b,
        0x3d, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x37,
        0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x85,
        0xc0, 0x74, 0x54, 0x48, 0x8b, 0x43, 0x08, 0x48,
        0x83, 0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x46, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x75, 0x39, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x4c, 0x89, 0xf7, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x37, 0x48,
        0x8b, 0x43, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48,
        0x8d, 0x15, 0x55, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xf7, 0x31, 0xc0, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x03, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89,
        0x03, 0x74, 0x1d, 0x49, 0x83, 0xc5, 0xf8, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83,
        0xc5, 0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x83, 0xc5, 0xf8, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: 'Value after * must be an iterable, not %.200s\x00'
    // 2e: 00 00
    // 30: &_Py_Dealloc+0x0
    // 38: &_PyErr_Format+0x0
    // 40: &_PyErr_Clear+0x0
    // 48: &PySequence_Check+0x0
    // 50: &_PyErr_ExceptionMatches+0x0
    // 58: &PyExc_TypeError+0x0
    // 60: &_PyList_Extend+0x0
    // 68: OPARG
    const unsigned char data_body[112] = {
        0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66,
        0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75,
        0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e,
        0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c,
        0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25,
        0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x38, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x40, (uintptr_t)&_PyErr_Clear);
    patch_64(data + 0x48, (uintptr_t)&PySequence_Check);
    patch_64(data + 0x50, (uintptr_t)&_PyErr_ExceptionMatches);
    patch_64(data + 0x58, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x60, (uintptr_t)&_PyList_Extend);
    patch_64(data + 0x68, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x6, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x5c);
    patch_32r(code + 0x55, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0x6d, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0x96, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0xa8, (uintptr_t)data + 0x3c);
    patch_32r(code + 0xba, (uintptr_t)data + 0x164);
    patch_x86_64_32rx(code + 0xc5, (uintptr_t)data + 0x34);
    patch_32r(code + 0xe9, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0xf2, (uintptr_t)data + 0x2c);
    patch_32r(code + 0xfc, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x105, (uintptr_t)data + 0x2c);
    patch_32r(code + 0x10f, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 4d 89 ef                      movq    %r13, %r15
    // f: 44 8b 35 00 00 00 00          movl    (%rip), %r14d           ## 0x16 <__JIT_ENTRY+0x16>
    // 0000000000000012:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 16: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 1a: 49 8b 04 24                   movq    (%r12), %rax
    // 1e: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 22: 44 89 f1                      movl    %r14d, %ecx
    // 25: 81 e1 fe ff 00 00             andl    $0xfffe, %ecx           ## imm = 0xFFFE
    // 2b: 48 8b 74 88 18                movq    0x18(%rax,%rcx,4), %rsi
    // 30: 41 83 e6 01                   andl    $0x1, %r14d
    // 34: 75 32                         jne     0x68 <__JIT_ENTRY+0x68>
    // 36: 4d 89 7c 24 40                movq    %r15, 0x40(%r12)
    // 3b: 48 89 df                      movq    %rbx, %rdi
    // 3e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x44 <__JIT_ENTRY+0x44>
    // 0000000000000040:  X86_64_RELOC_GOT     _PyObject_GetAttr@GOTPCREL
    // 44: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 49: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 52: 8b 0b                         movl    (%rbx), %ecx
    // 54: 85 c9                         testl   %ecx, %ecx
    // 56: 78 06                         js      0x5e <__JIT_ENTRY+0x5e>
    // 58: ff c9                         decl    %ecx
    // 5a: 89 0b                         movl    %ecx, (%rbx)
    // 5c: 74 79                         je      0xd7 <__JIT_ENTRY+0xd7>
    // 5e: 48 85 c0                      testq   %rax, %rax
    // 61: 75 5a                         jne     0xbd <__JIT_ENTRY+0xbd>
    // 63: e9 83 00 00 00                jmp     0xeb <__JIT_ENTRY+0xeb>
    // 68: 48 c7 45 f0 00 00 00 00       movq    $0x0, -0x10(%rbp)
    // 70: 4d 89 7c 24 40                movq    %r15, 0x40(%r12)
    // 75: 48 8d 55 f0                   leaq    -0x10(%rbp), %rdx
    // 79: 48 89 df                      movq    %rbx, %rdi
    // 7c: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x82 <__JIT_ENTRY+0x82>
    // 000000000000007e:  X86_64_RELOC_GOT     __PyObject_GetMethod@GOTPCREL
    // 82: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 87: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 90: 85 c0                         testl   %eax, %eax
    // 92: 74 06                         je      0x9a <__JIT_ENTRY+0x9a>
    // 94: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // 98: eb 20                         jmp     0xba <__JIT_ENTRY+0xba>
    // 9a: 8b 03                         movl    (%rbx), %eax
    // 9c: 85 c0                         testl   %eax, %eax
    // 9e: 78 0f                         js      0xaf <__JIT_ENTRY+0xaf>
    // a0: ff c8                         decl    %eax
    // a2: 89 03                         movl    %eax, (%rbx)
    // a4: 75 09                         jne     0xaf <__JIT_ENTRY+0xaf>
    // a6: 48 89 df                      movq    %rbx, %rdi
    // a9: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xaf <__JIT_ENTRY+0xaf>
    // 00000000000000ab:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // af: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // b3: 48 85 c0                      testq   %rax, %rax
    // b6: 74 33                         je      0xeb <__JIT_ENTRY+0xeb>
    // b8: 31 db                         xorl    %ebx, %ebx
    // ba: 49 89 1f                      movq    %rbx, (%r15)
    // bd: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // c1: 44 89 f0                      movl    %r14d, %eax
    // c4: 4d 8d 6c c5 00                leaq    (%r13,%rax,8), %r13
    // c9: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // cd: 48 83 c4 10                   addq    $0x10, %rsp
    // d1: 5d                            popq    %rbp
    // d2: e9 00 00 00 00                jmp     0xd7 <__JIT_ENTRY+0xd7>
    // 00000000000000d3:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // d7: 48 89 df                      movq    %rbx, %rdi
    // da: 48 89 c3                      movq    %rax, %rbx
    // dd: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xe3 <__JIT_ENTRY+0xe3>
    // 00000000000000df:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // e3: 48 89 d8                      movq    %rbx, %rax
    // e6: 48 85 c0                      testq   %rax, %rax
    // e9: 75 d2                         jne     0xbd <__JIT_ENTRY+0xbd>
    // eb: 49 83 c5 f8                   addq    $-0x8, %r13
    // ef: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // f3: 48 83 c4 10                   addq    $0x10, %rsp
    // f7: 5d                            popq    %rbp
    // f8: e9 00 00 00 00                jmp     0xfd <__JIT_ENTRY+0xfd>
    // 00000000000000f9:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[253] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0x75, 0xf8, 0x4d, 0x89, 0xef, 0x44,
        0x8b, 0x35, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b,
        0x5d, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8b,
        0x40, 0x20, 0x44, 0x89, 0xf1, 0x81, 0xe1, 0xfe,
        0xff, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x88, 0x18,
        0x41, 0x83, 0xe6, 0x01, 0x75, 0x32, 0x4d, 0x89,
        0x7c, 0x24, 0x40, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x06,
        0xff, 0xc9, 0x89, 0x0b, 0x74, 0x79, 0x48, 0x85,
        0xc0, 0x75, 0x5a, 0xe9, 0x83, 0x00, 0x00, 0x00,
        0x48, 0xc7, 0x45, 0xf0, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x89, 0x7c, 0x24, 0x40, 0x48, 0x8d, 0x55,
        0xf0, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x74, 0x06, 0x48, 0x8b, 0x45, 0xf0,
        0xeb, 0x20, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x0f,
        0xff, 0xc8, 0x89, 0x03, 0x75, 0x09, 0x48, 0x89,
        0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x45, 0xf0, 0x48, 0x85, 0xc0, 0x74, 0x33,
        0x31, 0xdb, 0x49, 0x89, 0x1f, 0x49, 0x89, 0x45,
        0xf8, 0x44, 0x89, 0xf0, 0x4d, 0x8d, 0x6c, 0xc5,
        0x00, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4,
        0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xdf, 0x48, 0x89, 0xc3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x85,
        0xc0, 0x75, 0xd2, 0x49, 0x83, 0xc5, 0xf8, 0x4c,
        0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyObject_GetMethod+0x0
    // 10: &PyObject_GetAttr+0x0
    // 18: OPARG
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyObject_GetMethod);
    patch_64(data + 0x10, (uintptr_t)&PyObject_GetAttr);
    patch_64(data + 0x18, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x7e, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xab, (uintptr_t)data + -0x4);
    patch_32r(code + 0xd3, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xdf, (uintptr_t)data + -0x4);
    patch_32r(code + 0xf9, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_ATTR_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_CLASS.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 4: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_OPERAND0@GOTPCREL
    // b: 8b 03                         movl    (%rbx), %eax
    // d: 85 c0                         testl   %eax, %eax
    // f: 78 04                         js      0x15 <__JIT_ENTRY+0x15>
    // 11: ff c0                         incl    %eax
    // 13: 89 03                         movl    %eax, (%rbx)
    // 15: 8b 07                         movl    (%rdi), %eax
    // 17: 85 c0                         testl   %eax, %eax
    // 19: 78 06                         js      0x21 <__JIT_ENTRY+0x21>
    // 1b: ff c8                         decl    %eax
    // 1d: 89 07                         movl    %eax, (%rdi)
    // 1f: 74 09                         je      0x2a <__JIT_ENTRY+0x2a>
    // 21: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 25: e9 00 00 00 00                jmp     0x2a <__JIT_ENTRY+0x2a>
    // 0000000000000026:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 2a: 55                            pushq   %rbp
    // 2b: 48 89 e5                      movq    %rsp, %rbp
    // 2e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x34 <__JIT_ENTRY+0x34>
    // 0000000000000030:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 34: 5d                            popq    %rbp
    // 35: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 39: e9 00 00 00 00                jmp     0x3e <__JIT_ENTRY+0x3e>
    // 000000000000003a:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[57] = {
        0x49, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x1d, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x04, 0xff, 0xc0, 0x89, 0x03, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74,
        0x09, 0x49, 0x89, 0x5d, 0xf8, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0x49, 0x89, 0x5d,
        0xf8,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x4);
    patch_32r(code + 0x26, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_INSTANCE_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_INSTANCE_VALUE.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // b: 48 8b 04 07                   movq    (%rdi,%rax), %rax
    // f: 48 85 c0                      testq   %rax, %rax
    // 12: 0f 84 00 00 00 00             je      0x18 <__JIT_ENTRY+0x18>
    // 0000000000000014:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 18: 8b 08                         movl    (%rax), %ecx
    // 1a: 85 c9                         testl   %ecx, %ecx
    // 1c: 78 04                         js      0x22 <__JIT_ENTRY+0x22>
    // 1e: ff c1                         incl    %ecx
    // 20: 89 08                         movl    %ecx, (%rax)
    // 22: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 26: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2b: 8b 07                         movl    (%rdi), %eax
    // 2d: 85 c0                         testl   %eax, %eax
    // 2f: 78 06                         js      0x37 <__JIT_ENTRY+0x37>
    // 31: ff c8                         decl    %eax
    // 33: 89 07                         movl    %eax, (%rdi)
    // 35: 74 13                         je      0x4a <__JIT_ENTRY+0x4a>
    // 37: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 45: e9 00 00 00 00                jmp     0x4a <__JIT_ENTRY+0x4a>
    // 0000000000000046:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 4a: 55                            pushq   %rbp
    // 4b: 48 89 e5                      movq    %rsp, %rbp
    // 4e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x54 <__JIT_ENTRY+0x54>
    // 0000000000000050:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 54: 5d                            popq    %rbp
    // 55: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 5a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 63: e9 00 00 00 00                jmp     0x68 <__JIT_ENTRY+0x68>
    // 0000000000000064:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[99] = {
        0x49, 0x8b, 0x7d, 0xf8, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x07, 0x48,
        0x85, 0xc0, 0x0f, 0x84, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff, 0xc1,
        0x89, 0x08, 0x49, 0x89, 0x45, 0xf8, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x13, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x4);
    patch_32r(code + 0x14, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x46, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_METHOD_LAZY_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_METHOD_LAZY_DICT.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT_LOAD        __JIT_OPERAND0@GOTPCREL
    // f: 8b 11                         movl    (%rcx), %edx
    // 11: 85 d2                         testl   %edx, %edx
    // 13: 78 04                         js      0x19 <__JIT_ENTRY+0x19>
    // 15: ff c2                         incl    %edx
    // 17: 89 11                         movl    %edx, (%rcx)
    // 19: 49 89 4d f8                   movq    %rcx, -0x8(%r13)
    // 1d: 49 89 45 00                   movq    %rax, (%r13)
    // 21: 49 83 c5 08                   addq    $0x8, %r13
    // 25: 5d                            popq    %rbp
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 0000000000000027:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[38] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x11, 0x85, 0xd2, 0x78, 0x04, 0xff, 0xc2, 0x89,
        0x11, 0x49, 0x89, 0x4d, 0xf8, 0x49, 0x89, 0x45,
        0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_METHOD_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_METHOD_NO_DICT.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT_LOAD        __JIT_OPERAND0@GOTPCREL
    // f: 8b 11                         movl    (%rcx), %edx
    // 11: 85 d2                         testl   %edx, %edx
    // 13: 78 04                         js      0x19 <__JIT_ENTRY+0x19>
    // 15: ff c2                         incl    %edx
    // 17: 89 11                         movl    %edx, (%rcx)
    // 19: 49 89 4d f8                   movq    %rcx, -0x8(%r13)
    // 1d: 49 89 45 00                   movq    %rax, (%r13)
    // 21: 49 83 c5 08                   addq    $0x8, %r13
    // 25: 5d                            popq    %rbp
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 0000000000000027:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[38] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x11, 0x85, 0xd2, 0x78, 0x04, 0xff, 0xc2, 0x89,
        0x11, 0x49, 0x89, 0x4d, 0xf8, 0x49, 0x89, 0x45,
        0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_METHOD_WITH_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_METHOD_WITH_VALUES.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT_LOAD        __JIT_OPERAND0@GOTPCREL
    // f: 8b 11                         movl    (%rcx), %edx
    // 11: 85 d2                         testl   %edx, %edx
    // 13: 78 04                         js      0x19 <__JIT_ENTRY+0x19>
    // 15: ff c2                         incl    %edx
    // 17: 89 11                         movl    %edx, (%rcx)
    // 19: 49 89 4d f8                   movq    %rcx, -0x8(%r13)
    // 1d: 49 89 45 00                   movq    %rax, (%r13)
    // 21: 49 83 c5 08                   addq    $0x8, %r13
    // 25: 5d                            popq    %rbp
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 0000000000000027:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[38] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x11, 0x85, 0xd2, 0x78, 0x04, 0xff, 0xc2, 0x89,
        0x11, 0x49, 0x89, 0x4d, 0xf8, 0x49, 0x89, 0x45,
        0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_MODULE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_MODULE.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 4: 48 8b 47 10                   movq    0x10(%rdi), %rax
    // 8: 48 8b 40 20                   movq    0x20(%rax), %rax
    // c: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
    // 10: ba 01 00 00 00                movl    $0x1, %edx
    // 15: 48 d3 e2                      shlq    %cl, %rdx
    // 18: 48 01 c2                      addq    %rax, %rdx
    // 1b: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x22 <__JIT_ENTRY+0x22>
    // 000000000000001e:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 22: c1 e0 04                      shll    $0x4, %eax
    // 25: 48 8b 5c 10 28                movq    0x28(%rax,%rdx), %rbx
    // 2a: 48 85 db                      testq   %rbx, %rbx
    // 2d: 0f 84 00 00 00 00             je      0x33 <__JIT_ENTRY+0x33>
    // 000000000000002f:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 33: 8b 03                         movl    (%rbx), %eax
    // 35: 85 c0                         testl   %eax, %eax
    // 37: 78 04                         js      0x3d <__JIT_ENTRY+0x3d>
    // 39: ff c0                         incl    %eax
    // 3b: 89 03                         movl    %eax, (%rbx)
    // 3d: 8b 07                         movl    (%rdi), %eax
    // 3f: 85 c0                         testl   %eax, %eax
    // 41: 78 06                         js      0x49 <__JIT_ENTRY+0x49>
    // 43: ff c8                         decl    %eax
    // 45: 89 07                         movl    %eax, (%rdi)
    // 47: 74 09                         je      0x52 <__JIT_ENTRY+0x52>
    // 49: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 4d: e9 00 00 00 00                jmp     0x52 <__JIT_ENTRY+0x52>
    // 000000000000004e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 52: 55                            pushq   %rbp
    // 53: 48 89 e5                      movq    %rsp, %rbp
    // 56: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5c <__JIT_ENTRY+0x5c>
    // 0000000000000058:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 5c: 5d                            popq    %rbp
    // 5d: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 61: e9 00 00 00 00                jmp     0x66 <__JIT_ENTRY+0x66>
    // 0000000000000062:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[97] = {
        0x49, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x47, 0x10,
        0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09,
        0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2,
        0x48, 0x01, 0xc2, 0x0f, 0xb7, 0x05, 0x00, 0x00,
        0x00, 0x00, 0xc1, 0xe0, 0x04, 0x48, 0x8b, 0x5c,
        0x10, 0x28, 0x48, 0x85, 0xdb, 0x0f, 0x84, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x04, 0xff, 0xc0, 0x89, 0x03, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74,
        0x09, 0x49, 0x89, 0x5d, 0xf8, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0x49, 0x89, 0x5d,
        0xf8,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1e, (uintptr_t)data + 0x4);
    patch_32r(code + 0x2f, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x4e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_MODULE_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_MODULE_FROM_KEYS.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 4c 89 e8                      movq    %r13, %rax
    // 3: 49 83 c5 f8                   addq    $-0x8, %r13
    // 7: 48 8b 50 f8                   movq    -0x8(%rax), %rdx
    // b: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
    // f: be 01 00 00 00                movl    $0x1, %esi
    // 14: 48 d3 e6                      shlq    %cl, %rsi
    // 17: 48 01 d6                      addq    %rdx, %rsi
    // 1a: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 21: c1 e1 04                      shll    $0x4, %ecx
    // 24: 48 8b 4c 31 28                movq    0x28(%rcx,%rsi), %rcx
    // 29: 48 85 c9                      testq   %rcx, %rcx
    // 2c: 0f 84 00 00 00 00             je      0x32 <__JIT_ENTRY+0x32>
    // 000000000000002e:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 32: 48 8b 78 f0                   movq    -0x10(%rax), %rdi
    // 36: 8b 11                         movl    (%rcx), %edx
    // 38: 85 d2                         testl   %edx, %edx
    // 3a: 78 04                         js      0x40 <__JIT_ENTRY+0x40>
    // 3c: ff c2                         incl    %edx
    // 3e: 89 11                         movl    %edx, (%rcx)
    // 40: 48 89 48 f0                   movq    %rcx, -0x10(%rax)
    // 44: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 49: 8b 07                         movl    (%rdi), %eax
    // 4b: 85 c0                         testl   %eax, %eax
    // 4d: 78 06                         js      0x55 <__JIT_ENTRY+0x55>
    // 4f: ff c8                         decl    %eax
    // 51: 89 07                         movl    %eax, (%rdi)
    // 53: 74 13                         je      0x68 <__JIT_ENTRY+0x68>
    // 55: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 5a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 63: e9 00 00 00 00                jmp     0x68 <__JIT_ENTRY+0x68>
    // 0000000000000064:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 68: 55                            pushq   %rbp
    // 69: 48 89 e5                      movq    %rsp, %rbp
    // 6c: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x72 <__JIT_ENTRY+0x72>
    // 000000000000006e:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 72: 5d                            popq    %rbp
    // 73: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 78: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 81: e9 00 00 00 00                jmp     0x86 <__JIT_ENTRY+0x86>
    // 0000000000000082:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[129] = {
        0x4c, 0x89, 0xe8, 0x49, 0x83, 0xc5, 0xf8, 0x48,
        0x8b, 0x50, 0xf8, 0x0f, 0xb6, 0x4a, 0x09, 0xbe,
        0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe6, 0x48,
        0x01, 0xd6, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0xc1, 0xe1, 0x04, 0x48, 0x8b, 0x4c, 0x31,
        0x28, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x78, 0xf0, 0x8b, 0x11,
        0x85, 0xd2, 0x78, 0x04, 0xff, 0xc2, 0x89, 0x11,
        0x48, 0x89, 0x48, 0xf0, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x06, 0xff,
        0xc8, 0x89, 0x07, 0x74, 0x13, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x55, 0x48, 0x89, 0xe5, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x5d, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
    patch_32r(code + 0x2e, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x64, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x6e, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_NONDESCRIPTOR_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 8: 8b 07                         movl    (%rdi), %eax
    // a: 85 c0                         testl   %eax, %eax
    // c: 78 0c                         js      0x1a <__JIT_ENTRY+0x1a>
    // e: ff c8                         decl    %eax
    // 10: 89 07                         movl    %eax, (%rdi)
    // 12: 75 06                         jne     0x1a <__JIT_ENTRY+0x1a>
    // 14: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x1a <__JIT_ENTRY+0x1a>
    // 0000000000000016:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 1a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_GOT_LOAD        __JIT_OPERAND0@GOTPCREL
    // 21: 8b 08                         movl    (%rax), %ecx
    // 23: 85 c9                         testl   %ecx, %ecx
    // 25: 78 04                         js      0x2b <__JIT_ENTRY+0x2b>
    // 27: ff c1                         incl    %ecx
    // 29: 89 08                         movl    %ecx, (%rax)
    // 2b: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 2f: 5d                            popq    %rbp
    // 30: e9 00 00 00 00                jmp     0x35 <__JIT_ENTRY+0x35>
    // 0000000000000031:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[48] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x7d, 0xf8,
        0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xc8,
        0x89, 0x07, 0x75, 0x06, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff,
        0xc1, 0x89, 0x08, 0x49, 0x89, 0x45, 0xf8, 0x5d,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 8: 8b 07                         movl    (%rdi), %eax
    // a: 85 c0                         testl   %eax, %eax
    // c: 78 0c                         js      0x1a <__JIT_ENTRY+0x1a>
    // e: ff c8                         decl    %eax
    // 10: 89 07                         movl    %eax, (%rdi)
    // 12: 75 06                         jne     0x1a <__JIT_ENTRY+0x1a>
    // 14: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x1a <__JIT_ENTRY+0x1a>
    // 0000000000000016:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 1a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_GOT_LOAD        __JIT_OPERAND0@GOTPCREL
    // 21: 8b 08                         movl    (%rax), %ecx
    // 23: 85 c9                         testl   %ecx, %ecx
    // 25: 78 04                         js      0x2b <__JIT_ENTRY+0x2b>
    // 27: ff c1                         incl    %ecx
    // 29: 89 08                         movl    %ecx, (%rax)
    // 2b: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 2f: 5d                            popq    %rbp
    // 30: e9 00 00 00 00                jmp     0x35 <__JIT_ENTRY+0x35>
    // 0000000000000031:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[48] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x7d, 0xf8,
        0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xc8,
        0x89, 0x07, 0x75, 0x06, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff,
        0xc1, 0x89, 0x08, 0x49, 0x89, 0x45, 0xf8, 0x5d,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_PROPERTY_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_PROPERTY_FRAME.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            ## 0x7 <__JIT_ENTRY+0x7>
    // 0000000000000003:  X86_64_RELOC_GOT_LOAD        __JIT_OPERAND0@GOTPCREL
    // 7: 48 8b 42 30                   movq    0x30(%rdx), %rax
    // b: 8b 48 30                      movl    0x30(%rax), %ecx
    // e: 83 e1 0d                      andl    $0xd, %ecx
    // 11: 83 f9 01                      cmpl    $0x1, %ecx
    // 14: 0f 85 00 00 00 00             jne     0x1a <__JIT_ENTRY+0x1a>
    // 0000000000000016:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 1a: 83 78 3c 00                   cmpl    $0x0, 0x3c(%rax)
    // 1e: 0f 85 00 00 00 00             jne     0x24 <__JIT_ENTRY+0x24>
    // 0000000000000020:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 24: 83 78 34 01                   cmpl    $0x1, 0x34(%rax)
    // 28: 0f 85 00 00 00 00             jne     0x2e <__JIT_ENTRY+0x2e>
    // 000000000000002a:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 2e: 49 8b 8e f0 00 00 00          movq    0xf0(%r14), %rcx
    // 35: 48 85 c9                      testq   %rcx, %rcx
    // 38: 0f 84 00 00 00 00             je      0x3e <__JIT_ENTRY+0x3e>
    // 000000000000003a:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 3e: 48 63 78 4c                   movslq  0x4c(%rax), %rdi
    // 42: 49 8b b6 f8 00 00 00          movq    0xf8(%r14), %rsi
    // 49: 48 29 ce                      subq    %rcx, %rsi
    // 4c: 48 c1 fe 03                   sarq    $0x3, %rsi
    // 50: 48 39 fe                      cmpq    %rdi, %rsi
    // 53: 0f 8e 00 00 00 00             jle     0x59 <__JIT_ENTRY+0x59>
    // 0000000000000055:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 59: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 5d: 8b 1a                         movl    (%rdx), %ebx
    // 5f: 85 db                         testl   %ebx, %ebx
    // 61: 78 04                         js      0x67 <__JIT_ENTRY+0x67>
    // 63: ff c3                         incl    %ebx
    // 65: 89 1a                         movl    %ebx, (%rdx)
    // 67: 48 8d 3c f9                   leaq    (%rcx,%rdi,8), %rdi
    // 6b: 49 89 be f0 00 00 00          movq    %rdi, 0xf0(%r14)
    // 72: 4c 89 61 08                   movq    %r12, 0x8(%rcx)
    // 76: 48 89 51 10                   movq    %rdx, 0x10(%rcx)
    // 7a: 8b 38                         movl    (%rax), %edi
    // 7c: 85 ff                         testl   %edi, %edi
    // 7e: 78 04                         js      0x84 <__JIT_ENTRY+0x84>
    // 80: ff c7                         incl    %edi
    // 82: 89 38                         movl    %edi, (%rax)
    // 84: 55                            pushq   %rbp
    // 85: 48 89 e5                      movq    %rsp, %rbp
    // 88: 48 89 01                      movq    %rax, (%rcx)
    // 8b: 0f 10 42 10                   movups  0x10(%rdx), %xmm0
    // 8f: 0f 11 41 18                   movups  %xmm0, 0x18(%rcx)
    // 93: 48 c7 41 28 00 00 00 00       movq    $0x0, 0x28(%rcx)
    // 9b: 48 63 50 48                   movslq  0x48(%rax), %rdx
    // 9f: 48 8d 7c d1 50                leaq    0x50(%rcx,%rdx,8), %rdi
    // a4: 48 89 79 40                   movq    %rdi, 0x40(%rcx)
    // a8: 48 8d b8 d0 00 00 00          leaq    0xd0(%rax), %rdi
    // af: 48 c7 41 30 00 00 00 00       movq    $0x0, 0x30(%rcx)
    // b7: 48 89 79 38                   movq    %rdi, 0x38(%rcx)
    // bb: c7 41 48 00 00 00 00          movl    $0x0, 0x48(%rcx)
    // c2: 48 83 fa 02                   cmpq    $0x2, %rdx
    // c6: 7c 24                         jl      0xec <__JIT_ENTRY+0xec>
    // c8: ba 0b 00 00 00                movl    $0xb, %edx
    // cd: 0f 1f 00                      nopl    (%rax)
    // d0: 48 c7 04 d1 00 00 00 00       movq    $0x0, (%rcx,%rdx,8)
    // d8: 48 63 78 48                   movslq  0x48(%rax), %rdi
    // dc: 4c 8d 42 01                   leaq    0x1(%rdx), %r8
    // e0: 48 83 c2 f7                   addq    $-0x9, %rdx
    // e4: 48 39 fa                      cmpq    %rdi, %rdx
    // e7: 4c 89 c2                      movq    %r8, %rdx
    // ea: 7c e4                         jl      0xd0 <__JIT_ENTRY+0xd0>
    // ec: 48 89 71 50                   movq    %rsi, 0x50(%rcx)
    // f0: 49 89 4d f8                   movq    %rcx, -0x8(%r13)
    // f4: 5d                            popq    %rbp
    // f5: e9 00 00 00 00                jmp     0xfa <__JIT_ENTRY+0xfa>
    // 00000000000000f6:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[245] = {
        0x48, 0x8b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x42, 0x30, 0x8b, 0x48, 0x30, 0x83, 0xe1,
        0x0d, 0x83, 0xf9, 0x01, 0x0f, 0x85, 0x00, 0x00,
        0x00, 0x00, 0x83, 0x78, 0x3c, 0x00, 0x0f, 0x85,
        0x00, 0x00, 0x00, 0x00, 0x83, 0x78, 0x34, 0x01,
        0x0f, 0x85, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b,
        0x8e, 0xf0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc9,
        0x0f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x48, 0x63,
        0x78, 0x4c, 0x49, 0x8b, 0xb6, 0xf8, 0x00, 0x00,
        0x00, 0x48, 0x29, 0xce, 0x48, 0xc1, 0xfe, 0x03,
        0x48, 0x39, 0xfe, 0x0f, 0x8e, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x75, 0xf8, 0x8b, 0x1a, 0x85,
        0xdb, 0x78, 0x04, 0xff, 0xc3, 0x89, 0x1a, 0x48,
        0x8d, 0x3c, 0xf9, 0x49, 0x89, 0xbe, 0xf0, 0x00,
        0x00, 0x00, 0x4c, 0x89, 0x61, 0x08, 0x48, 0x89,
        0x51, 0x10, 0x8b, 0x38, 0x85, 0xff, 0x78, 0x04,
        0xff, 0xc7, 0x89, 0x38, 0x55, 0x48, 0x89, 0xe5,
        0x48, 0x89, 0x01, 0x0f, 0x10, 0x42, 0x10, 0x0f,
        0x11, 0x41, 0x18, 0x48, 0xc7, 0x41, 0x28, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x63, 0x50, 0x48, 0x48,
        0x8d, 0x7c, 0xd1, 0x50, 0x48, 0x89, 0x79, 0x40,
        0x48, 0x8d, 0xb8, 0xd0, 0x00, 0x00, 0x00, 0x48,
        0xc7, 0x41, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0x79, 0x38, 0xc7, 0x41, 0x48, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x83, 0xfa, 0x02, 0x7c, 0x24,
        0xba, 0x0b, 0x00, 0x00, 0x00, 0x0f, 0x1f, 0x00,
        0x48, 0xc7, 0x04, 0xd1, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x63, 0x78, 0x48, 0x4c, 0x8d, 0x42, 0x01,
        0x48, 0x83, 0xc2, 0xf7, 0x48, 0x39, 0xfa, 0x4c,
        0x89, 0xc2, 0x7c, 0xe4, 0x48, 0x89, 0x71, 0x50,
        0x49, 0x89, 0x4d, 0xf8, 0x5d,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_32r(code + 0x16, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x20, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x2a, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x3a, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x55, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__LOAD_ATTR_SLOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_SLOT.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // b: 48 8b 1c 07                   movq    (%rdi,%rax), %rbx
    // f: 48 85 db                      testq   %rbx, %rbx
    // 12: 0f 84 00 00 00 00             je      0x18 <__JIT_ENTRY+0x18>
    // 0000000000000014:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 18: 8b 03                         movl    (%rbx), %eax
    // 1a: 85 c0                         testl   %eax, %eax
    // 1c: 78 04                         js      0x22 <__JIT_ENTRY+0x22>
    // 1e: ff c0                         incl    %eax
    // 20: 89 03                         movl    %eax, (%rbx)
    // 22: 8b 07                         movl    (%rdi), %eax
    // 24: 85 c0                         testl   %eax, %eax
    // 26: 78 06                         js      0x2e <__JIT_ENTRY+0x2e>
    // 28: ff c8                         decl    %eax
    // 2a: 89 07                         movl    %eax, (%rdi)
    // 2c: 74 09                         je      0x37 <__JIT_ENTRY+0x37>
    // 2e: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 32: e9 00 00 00 00                jmp     0x37 <__JIT_ENTRY+0x37>
    // 0000000000000033:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 37: 55                            pushq   %rbp
    // 38: 48 89 e5                      movq    %rsp, %rbp
    // 3b: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x41 <__JIT_ENTRY+0x41>
    // 000000000000003d:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 41: 5d                            popq    %rbp
    // 42: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 46: e9 00 00 00 00                jmp     0x4b <__JIT_ENTRY+0x4b>
    // 0000000000000047:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[70] = {
        0x49, 0x8b, 0x7d, 0xf8, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x1c, 0x07, 0x48,
        0x85, 0xdb, 0x0f, 0x84, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x03, 0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0,
        0x89, 0x03, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x07, 0x74, 0x09, 0x49, 0x89,
        0x5d, 0xf8, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x55,
        0x48, 0x89, 0xe5, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x5d, 0x49, 0x89, 0x5d, 0xf8,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x4);
    patch_32r(code + 0x14, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x33, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x3d, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_ATTR_WITH_HINT.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 4c 89 eb                      movq    %r13, %rbx
    // 3: 49 83 c5 f8                   addq    $-0x8, %r13
    // 7: 48 8b 4b f8                   movq    -0x8(%rbx), %rcx
    // b: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x12 <__JIT_ENTRY+0x12>
    // 000000000000000e:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 12: 48 8b 51 20                   movq    0x20(%rcx), %rdx
    // 16: 48 39 42 18                   cmpq    %rax, 0x18(%rdx)
    // 1a: 0f 86 00 00 00 00             jbe     0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 20: 80 7a 0a 01                   cmpb    $0x1, 0xa(%rdx)
    // 24: 0f 85 00 00 00 00             jne     0x2a <__JIT_ENTRY+0x2a>
    // 0000000000000026:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 2a: 49 8b 0c 24                   movq    (%r12), %rcx
    // 2e: 48 8b 79 20                   movq    0x20(%rcx), %rdi
    // 32: 44 0f b7 05 00 00 00 00       movzwl  (%rip), %r8d            ## 0x3a <__JIT_ENTRY+0x3a>
    // 0000000000000036:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 3a: 41 83 e0 fe                   andl    $-0x2, %r8d
    // 3e: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
    // 42: be 01 00 00 00                movl    $0x1, %esi
    // 47: 48 d3 e6                      shlq    %cl, %rsi
    // 4a: 48 01 d6                      addq    %rdx, %rsi
    // 4d: c1 e0 04                      shll    $0x4, %eax
    // 50: 48 8b 4c 30 20                movq    0x20(%rax,%rsi), %rcx
    // 55: 4a 3b 4c 87 18                cmpq    0x18(%rdi,%r8,4), %rcx
    // 5a: 0f 85 00 00 00 00             jne     0x60 <__JIT_ENTRY+0x60>
    // 000000000000005c:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 60: 48 01 f0                      addq    %rsi, %rax
    // 63: 48 83 c0 20                   addq    $0x20, %rax
    // 67: 4c 8b 78 08                   movq    0x8(%rax), %r15
    // 6b: 4d 85 ff                      testq   %r15, %r15
    // 6e: 0f 84 00 00 00 00             je      0x74 <__JIT_ENTRY+0x74>
    // 0000000000000070:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 74: 48 8b 7b f0                   movq    -0x10(%rbx), %rdi
    // 78: 41 8b 07                      movl    (%r15), %eax
    // 7b: 85 c0                         testl   %eax, %eax
    // 7d: 78 05                         js      0x84 <__JIT_ENTRY+0x84>
    // 7f: ff c0                         incl    %eax
    // 81: 41 89 07                      movl    %eax, (%r15)
    // 84: 8b 07                         movl    (%rdi), %eax
    // 86: 85 c0                         testl   %eax, %eax
    // 88: 78 06                         js      0x90 <__JIT_ENTRY+0x90>
    // 8a: ff c8                         decl    %eax
    // 8c: 89 07                         movl    %eax, (%rdi)
    // 8e: 74 09                         je      0x99 <__JIT_ENTRY+0x99>
    // 90: 4c 89 7b f0                   movq    %r15, -0x10(%rbx)
    // 94: e9 00 00 00 00                jmp     0x99 <__JIT_ENTRY+0x99>
    // 0000000000000095:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 99: 55                            pushq   %rbp
    // 9a: 48 89 e5                      movq    %rsp, %rbp
    // 9d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xa3 <__JIT_ENTRY+0xa3>
    // 000000000000009f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // a3: 5d                            popq    %rbp
    // a4: 4c 89 7b f0                   movq    %r15, -0x10(%rbx)
    // a8: e9 00 00 00 00                jmp     0xad <__JIT_ENTRY+0xad>
    // 00000000000000a9:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[168] = {
        0x4c, 0x89, 0xeb, 0x49, 0x83, 0xc5, 0xf8, 0x48,
        0x8b, 0x4b, 0xf8, 0x0f, 0xb7, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x51, 0x20, 0x48, 0x39,
        0x42, 0x18, 0x0f, 0x86, 0x00, 0x00, 0x00, 0x00,
        0x80, 0x7a, 0x0a, 0x01, 0x0f, 0x85, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x0c, 0x24, 0x48, 0x8b,
        0x79, 0x20, 0x44, 0x0f, 0xb7, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x41, 0x83, 0xe0, 0xfe, 0x0f, 0xb6,
        0x4a, 0x09, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x48,
        0xd3, 0xe6, 0x48, 0x01, 0xd6, 0xc1, 0xe0, 0x04,
        0x48, 0x8b, 0x4c, 0x30, 0x20, 0x4a, 0x3b, 0x4c,
        0x87, 0x18, 0x0f, 0x85, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x01, 0xf0, 0x48, 0x83, 0xc0, 0x20, 0x4c,
        0x8b, 0x78, 0x08, 0x4d, 0x85, 0xff, 0x0f, 0x84,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7b, 0xf0,
        0x41, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x05, 0xff,
        0xc0, 0x41, 0x89, 0x07, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x09,
        0x4c, 0x89, 0x7b, 0xf0, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x55, 0x48, 0x89, 0xe5, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x5d, 0x4c, 0x89, 0x7b, 0xf0,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    // 10: OPERAND0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xe, (uintptr_t)data + 0xc);
    patch_32r(code + 0x1c, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x26, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x36, (uintptr_t)data + 0x4);
    patch_32r(code + 0x5c, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x70, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x95, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x9f, (uintptr_t)data + -0x4);
}

void
emit__LOAD_BUILD_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_BUILD_CLASS.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 49 8b 7c 24 20                movq    0x20(%r12), %rdi
    // 12: be b0 8f 00 00                movl    $0x8fb0, %esi           ## imm = 0x8FB0
    // 17: 48 03 35 00 00 00 00          addq    (%rip), %rsi            ## 0x1e <__JIT_ENTRY+0x1e>
    // 000000000000001a:  X86_64_RELOC_GOT     __PyRuntime@GOTPCREL
    // 1e: 48 8d 55 f8                   leaq    -0x8(%rbp), %rdx
    // 22: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x28 <__JIT_ENTRY+0x28>
    // 0000000000000024:  X86_64_RELOC_GOT     _PyMapping_GetOptionalItem@GOTPCREL
    // 28: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2d: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 36: 85 c0                         testl   %eax, %eax
    // 38: 78 48                         js      0x82 <__JIT_ENTRY+0x82>
    // 3a: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 3e: 48 85 c0                      testq   %rax, %rax
    // 41: 74 12                         je      0x55 <__JIT_ENTRY+0x55>
    // 43: 49 89 45 00                   movq    %rax, (%r13)
    // 47: 49 83 c5 08                   addq    $0x8, %r13
    // 4b: 48 83 c4 10                   addq    $0x10, %rsp
    // 4f: 5d                            popq    %rbp
    // 50: e9 00 00 00 00                jmp     0x55 <__JIT_ENTRY+0x55>
    // 0000000000000051:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 55: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 5a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x61 <__JIT_ENTRY+0x61>
    // 000000000000005d:  X86_64_RELOC_GOT_LOAD        _PyExc_NameError@GOTPCREL
    // 61: 48 8b 30                      movq    (%rax), %rsi
    // 64: 48 8d 15 21 00 00 00          leaq    0x21(%rip), %rdx        ## 0x8c <__JIT_ENTRY+0x8c>
    // 0000000000000067:  X86_64_RELOC_SIGNED  __cstring
    // 6b: 4c 89 f7                      movq    %r14, %rdi
    // 6e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x74 <__JIT_ENTRY+0x74>
    // 0000000000000070:  X86_64_RELOC_GOT     __PyErr_SetString@GOTPCREL
    // 74: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 79: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 82: 48 83 c4 10                   addq    $0x10, %rsp
    // 86: 5d                            popq    %rbp
    // 87: e9 00 00 00 00                jmp     0x8c <__JIT_ENTRY+0x8c>
    // 0000000000000088:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[140] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x49, 0x8b, 0x7c,
        0x24, 0x20, 0xbe, 0xb0, 0x8f, 0x00, 0x00, 0x48,
        0x03, 0x35, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d,
        0x55, 0xf8, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0,
        0x78, 0x48, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x85,
        0xc0, 0x74, 0x12, 0x49, 0x89, 0x45, 0x00, 0x49,
        0x83, 0xc5, 0x08, 0x48, 0x83, 0xc4, 0x10, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x30, 0x48, 0x8d, 0x15, 0x21,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: '__build_class__ not found\x00'
    // 1a: 00 00 00 00 00 00
    // 20: &_PyErr_SetString+0x0
    // 28: &PyExc_NameError+0x0
    // 30: &PyMapping_GetOptionalItem+0x0
    // 38: &_PyRuntime+0x0
    const unsigned char data_body[64] = {
        0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
        0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20,
        0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e,
        0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, (uintptr_t)&_PyErr_SetString);
    patch_64(data + 0x28, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x30, (uintptr_t)&PyMapping_GetOptionalItem);
    patch_64(data + 0x38, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0x2c);
    patch_32r(code + 0x51, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)data + 0x24);
    patch_32r(code + 0x67, (uintptr_t)data + 0xa9);
    patch_x86_64_32rx(code + 0x70, (uintptr_t)data + 0x1c);
    patch_32r(code + 0x88, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_COMMON_CONSTANT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_COMMON_CONSTANT.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // b: 66 85 c0                      testw   %ax, %ax
    // e: 75 09                         jne     0x19 <__JIT_ENTRY+0x19>
    // 10: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x17 <__JIT_ENTRY+0x17>
    // 0000000000000013:  X86_64_RELOC_GOT_LOAD        _PyExc_AssertionError@GOTPCREL
    // 17: eb 07                         jmp     0x20 <__JIT_ENTRY+0x20>
    // 19: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_GOT_LOAD        _PyExc_NotImplementedError@GOTPCREL
    // 20: 48 8b 00                      movq    (%rax), %rax
    // 23: 49 89 45 00                   movq    %rax, (%r13)
    // 27: 49 83 c5 08                   addq    $0x8, %r13
    // 2b: 5d                            popq    %rbp
    // 2c: e9 00 00 00 00                jmp     0x31 <__JIT_ENTRY+0x31>
    // 000000000000002d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[44] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x75, 0x09,
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0xeb,
        0x07, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x00, 0x49, 0x89, 0x45, 0x00, 0x49,
        0x83, 0xc5, 0x08, 0x5d,
    };
    // 0: &PyExc_NotImplementedError+0x0
    // 8: &PyExc_AssertionError+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyExc_NotImplementedError);
    patch_64(data + 0x8, (uintptr_t)&PyExc_AssertionError);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + -0x4);
}

void
emit__LOAD_CONST_IMMORTAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_CONST_IMMORTAL.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 04 24                   movq    (%r12), %rax
    // 8: 48 8b 40 18                   movq    0x18(%rax), %rax
    // c: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 13: 48 8b 44 c8 18                movq    0x18(%rax,%rcx,8), %rax
    // 18: 49 89 45 00                   movq    %rax, (%r13)
    // 1c: 49 83 c5 08                   addq    $0x8, %r13
    // 20: 5d                            popq    %rbp
    // 21: e9 00 00 00 00                jmp     0x26 <__JIT_ENTRY+0x26>
    // 0000000000000022:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[33] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x04, 0x24,
        0x48, 0x8b, 0x40, 0x18, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0xc8, 0x18,
        0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x5d,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
}

void
emit__LOAD_CONST_INLINE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_CONST_INLINE.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_OPERAND0@GOTPCREL
    // b: 8b 08                         movl    (%rax), %ecx
    // d: 85 c9                         testl   %ecx, %ecx
    // f: 78 04                         js      0x15 <__JIT_ENTRY+0x15>
    // 11: ff c1                         incl    %ecx
    // 13: 89 08                         movl    %ecx, (%rax)
    // 15: 49 89 45 00                   movq    %rax, (%r13)
    // 19: 49 83 c5 08                   addq    $0x8, %r13
    // 1d: 5d                            popq    %rbp
    // 1e: e9 00 00 00 00                jmp     0x23 <__JIT_ENTRY+0x23>
    // 000000000000001f:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[30] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x08, 0x85, 0xc9, 0x78,
        0x04, 0xff, 0xc1, 0x89, 0x08, 0x49, 0x89, 0x45,
        0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
}

void
emit__LOAD_CONST_INLINE_BORROW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_CONST_INLINE_BORROW.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_OPERAND0@GOTPCREL
    // b: 49 89 45 00                   movq    %rax, (%r13)
    // f: 49 83 c5 08                   addq    $0x8, %r13
    // 13: 5d                            popq    %rbp
    // 14: e9 00 00 00 00                jmp     0x19 <__JIT_ENTRY+0x19>
    // 0000000000000015:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[20] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0x00, 0x49,
        0x83, 0xc5, 0x08, 0x5d,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
}

void
emit__LOAD_CONST_MORTAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_CONST_MORTAL.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 04 24                   movq    (%r12), %rax
    // 8: 48 8b 40 18                   movq    0x18(%rax), %rax
    // c: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 13: 48 8b 44 c8 18                movq    0x18(%rax,%rcx,8), %rax
    // 18: 8b 08                         movl    (%rax), %ecx
    // 1a: 85 c9                         testl   %ecx, %ecx
    // 1c: 78 04                         js      0x22 <__JIT_ENTRY+0x22>
    // 1e: ff c1                         incl    %ecx
    // 20: 89 08                         movl    %ecx, (%rax)
    // 22: 49 89 45 00                   movq    %rax, (%r13)
    // 26: 49 83 c5 08                   addq    $0x8, %r13
    // 2a: 5d                            popq    %rbp
    // 2b: e9 00 00 00 00                jmp     0x30 <__JIT_ENTRY+0x30>
    // 000000000000002c:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[43] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x04, 0x24,
        0x48, 0x8b, 0x40, 0x18, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0xc8, 0x18,
        0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff, 0xc1,
        0x89, 0x08, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83,
        0xc5, 0x08, 0x5d,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
}

void
emit__LOAD_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_DEREF.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x7 <__JIT_ENTRY+0x7>
    // 0000000000000003:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 7: 49 8b 44 c4 50                movq    0x50(%r12,%rax,8), %rax
    // c: 48 8b 40 10                   movq    0x10(%rax), %rax
    // 10: 48 85 c0                      testq   %rax, %rax
    // 13: 74 17                         je      0x2c <__JIT_ENTRY+0x2c>
    // 15: 8b 08                         movl    (%rax), %ecx
    // 17: 85 c9                         testl   %ecx, %ecx
    // 19: 78 04                         js      0x1f <__JIT_ENTRY+0x1f>
    // 1b: ff c1                         incl    %ecx
    // 1d: 89 08                         movl    %ecx, (%rax)
    // 1f: 49 89 45 00                   movq    %rax, (%r13)
    // 23: 49 83 c5 08                   addq    $0x8, %r13
    // 27: e9 00 00 00 00                jmp     0x2c <__JIT_ENTRY+0x2c>
    // 0000000000000028:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 2c: 55                            pushq   %rbp
    // 2d: 48 89 e5                      movq    %rsp, %rbp
    // 30: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            ## 0x37 <__JIT_ENTRY+0x37>
    // 0000000000000033:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 37: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 3c: 49 8b 34 24                   movq    (%r12), %rsi
    // 40: 4c 89 f7                      movq    %r14, %rdi
    // 43: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x49 <__JIT_ENTRY+0x49>
    // 0000000000000045:  X86_64_RELOC_GOT     __PyEval_FormatExcUnbound@GOTPCREL
    // 49: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 4e: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 57: 5d                            popq    %rbp
    // 58: e9 00 00 00 00                jmp     0x5d <__JIT_ENTRY+0x5d>
    // 0000000000000059:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[93] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x44, 0xc4, 0x50, 0x48, 0x8b, 0x40, 0x10,
        0x48, 0x85, 0xc0, 0x74, 0x17, 0x8b, 0x08, 0x85,
        0xc9, 0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x49,
        0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5,
        0x0f, 0xb7, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x49, 0x8b, 0x34, 0x24,
        0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyEval_FormatExcUnbound+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_FormatExcUnbound);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + 0x4);
    patch_32r(code + 0x28, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x33, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + -0x4);
    patch_32r(code + 0x59, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: 49 8b 44 c4 50                movq    0x50(%r12,%rax,8), %rax
    // 10: 8b 08                         movl    (%rax), %ecx
    // 12: 85 c9                         testl   %ecx, %ecx
    // 14: 78 04                         js      0x1a <__JIT_ENTRY+0x1a>
    // 16: ff c1                         incl    %ecx
    // 18: 89 08                         movl    %ecx, (%rax)
    // 1a: 49 89 45 00                   movq    %rax, (%r13)
    // 1e: 49 83 c5 08                   addq    $0x8, %r13
    // 22: 5d                            popq    %rbp
    // 23: e9 00 00 00 00                jmp     0x28 <__JIT_ENTRY+0x28>
    // 0000000000000024:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[35] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0xc4, 0x50,
        0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff, 0xc1,
        0x89, 0x08, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83,
        0xc5, 0x08, 0x5d,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
}

void
emit__LOAD_FAST_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_0.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 44 24 50                movq    0x50(%r12), %rax
    // 9: 8b 08                         movl    (%rax), %ecx
    // b: 85 c9                         testl   %ecx, %ecx
    // d: 78 04                         js      0x13 <__JIT_ENTRY+0x13>
    // f: ff c1                         incl    %ecx
    // 11: 89 08                         movl    %ecx, (%rax)
    // 13: 49 89 45 00                   movq    %rax, (%r13)
    // 17: 49 83 c5 08                   addq    $0x8, %r13
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x44, 0x24,
        0x50, 0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff,
        0xc1, 0x89, 0x08, 0x49, 0x89, 0x45, 0x00, 0x49,
        0x83, 0xc5, 0x08, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_1.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 44 24 58                movq    0x58(%r12), %rax
    // 9: 8b 08                         movl    (%rax), %ecx
    // b: 85 c9                         testl   %ecx, %ecx
    // d: 78 04                         js      0x13 <__JIT_ENTRY+0x13>
    // f: ff c1                         incl    %ecx
    // 11: 89 08                         movl    %ecx, (%rax)
    // 13: 49 89 45 00                   movq    %rax, (%r13)
    // 17: 49 83 c5 08                   addq    $0x8, %r13
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x44, 0x24,
        0x58, 0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff,
        0xc1, 0x89, 0x08, 0x49, 0x89, 0x45, 0x00, 0x49,
        0x83, 0xc5, 0x08, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_2.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 44 24 60                movq    0x60(%r12), %rax
    // 9: 8b 08                         movl    (%rax), %ecx
    // b: 85 c9                         testl   %ecx, %ecx
    // d: 78 04                         js      0x13 <__JIT_ENTRY+0x13>
    // f: ff c1                         incl    %ecx
    // 11: 89 08                         movl    %ecx, (%rax)
    // 13: 49 89 45 00                   movq    %rax, (%r13)
    // 17: 49 83 c5 08                   addq    $0x8, %r13
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x44, 0x24,
        0x60, 0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff,
        0xc1, 0x89, 0x08, 0x49, 0x89, 0x45, 0x00, 0x49,
        0x83, 0xc5, 0x08, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_3.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 44 24 68                movq    0x68(%r12), %rax
    // 9: 8b 08                         movl    (%rax), %ecx
    // b: 85 c9                         testl   %ecx, %ecx
    // d: 78 04                         js      0x13 <__JIT_ENTRY+0x13>
    // f: ff c1                         incl    %ecx
    // 11: 89 08                         movl    %ecx, (%rax)
    // 13: 49 89 45 00                   movq    %rax, (%r13)
    // 17: 49 83 c5 08                   addq    $0x8, %r13
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x44, 0x24,
        0x68, 0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff,
        0xc1, 0x89, 0x08, 0x49, 0x89, 0x45, 0x00, 0x49,
        0x83, 0xc5, 0x08, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_4.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 44 24 70                movq    0x70(%r12), %rax
    // 9: 8b 08                         movl    (%rax), %ecx
    // b: 85 c9                         testl   %ecx, %ecx
    // d: 78 04                         js      0x13 <__JIT_ENTRY+0x13>
    // f: ff c1                         incl    %ecx
    // 11: 89 08                         movl    %ecx, (%rax)
    // 13: 49 89 45 00                   movq    %rax, (%r13)
    // 17: 49 83 c5 08                   addq    $0x8, %r13
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x44, 0x24,
        0x70, 0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff,
        0xc1, 0x89, 0x08, 0x49, 0x89, 0x45, 0x00, 0x49,
        0x83, 0xc5, 0x08, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_5(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_5.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 44 24 78                movq    0x78(%r12), %rax
    // 9: 8b 08                         movl    (%rax), %ecx
    // b: 85 c9                         testl   %ecx, %ecx
    // d: 78 04                         js      0x13 <__JIT_ENTRY+0x13>
    // f: ff c1                         incl    %ecx
    // 11: 89 08                         movl    %ecx, (%rax)
    // 13: 49 89 45 00                   movq    %rax, (%r13)
    // 17: 49 83 c5 08                   addq    $0x8, %r13
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x44, 0x24,
        0x78, 0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff,
        0xc1, 0x89, 0x08, 0x49, 0x89, 0x45, 0x00, 0x49,
        0x83, 0xc5, 0x08, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_6(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_6.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 84 24 80 00 00 00       movq    0x80(%r12), %rax
    // c: 8b 08                         movl    (%rax), %ecx
    // e: 85 c9                         testl   %ecx, %ecx
    // 10: 78 04                         js      0x16 <__JIT_ENTRY+0x16>
    // 12: ff c1                         incl    %ecx
    // 14: 89 08                         movl    %ecx, (%rax)
    // 16: 49 89 45 00                   movq    %rax, (%r13)
    // 1a: 49 83 c5 08                   addq    $0x8, %r13
    // 1e: 5d                            popq    %rbp
    // 1f: e9 00 00 00 00                jmp     0x24 <__JIT_ENTRY+0x24>
    // 0000000000000020:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[31] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x84, 0x24,
        0x80, 0x00, 0x00, 0x00, 0x8b, 0x08, 0x85, 0xc9,
        0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_7(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_7.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 84 24 88 00 00 00       movq    0x88(%r12), %rax
    // c: 8b 08                         movl    (%rax), %ecx
    // e: 85 c9                         testl   %ecx, %ecx
    // 10: 78 04                         js      0x16 <__JIT_ENTRY+0x16>
    // 12: ff c1                         incl    %ecx
    // 14: 89 08                         movl    %ecx, (%rax)
    // 16: 49 89 45 00                   movq    %rax, (%r13)
    // 1a: 49 83 c5 08                   addq    $0x8, %r13
    // 1e: 5d                            popq    %rbp
    // 1f: e9 00 00 00 00                jmp     0x24 <__JIT_ENTRY+0x24>
    // 0000000000000020:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[31] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x84, 0x24,
        0x88, 0x00, 0x00, 0x00, 0x8b, 0x08, 0x85, 0xc9,
        0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_AND_CLEAR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_AND_CLEAR.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: 49 8b 4c c4 50                movq    0x50(%r12,%rax,8), %rcx
    // 10: 49 c7 44 c4 50 00 00 00 00    movq    $0x0, 0x50(%r12,%rax,8)
    // 19: 49 89 4d 00                   movq    %rcx, (%r13)
    // 1d: 49 83 c5 08                   addq    $0x8, %r13
    // 21: 5d                            popq    %rbp
    // 22: e9 00 00 00 00                jmp     0x27 <__JIT_ENTRY+0x27>
    // 0000000000000023:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[34] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x4c, 0xc4, 0x50,
        0x49, 0xc7, 0x44, 0xc4, 0x50, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x89, 0x4d, 0x00, 0x49, 0x83, 0xc5,
        0x08, 0x5d,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
}

void
emit__LOAD_FAST_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FAST_CHECK.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x7 <__JIT_ENTRY+0x7>
    // 0000000000000003:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // 7: 0f b7 c1                      movzwl  %cx, %eax
    // a: 49 8b 44 c4 50                movq    0x50(%r12,%rax,8), %rax
    // f: 48 85 c0                      testq   %rax, %rax
    // 12: 74 17                         je      0x2b <__JIT_ENTRY+0x2b>
    // 14: 8b 08                         movl    (%rax), %ecx
    // 16: 85 c9                         testl   %ecx, %ecx
    // 18: 78 04                         js      0x1e <__JIT_ENTRY+0x1e>
    // 1a: ff c1                         incl    %ecx
    // 1c: 89 08                         movl    %ecx, (%rax)
    // 1e: 49 89 45 00                   movq    %rax, (%r13)
    // 22: 49 83 c5 08                   addq    $0x8, %r13
    // 26: e9 00 00 00 00                jmp     0x2b <__JIT_ENTRY+0x2b>
    // 0000000000000027:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 2b: 55                            pushq   %rbp
    // 2c: 48 89 e5                      movq    %rsp, %rbp
    // 2f: 0f b7 f1                      movzwl  %cx, %esi
    // 32: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 37: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x3e <__JIT_ENTRY+0x3e>
    // 000000000000003a:  X86_64_RELOC_GOT_LOAD        _PyExc_UnboundLocalError@GOTPCREL
    // 3e: 48 8b 18                      movq    (%rax), %rbx
    // 41: 49 8b 04 24                   movq    (%r12), %rax
    // 45: 48 8b 78 60                   movq    0x60(%rax), %rdi
    // 49: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4f <__JIT_ENTRY+0x4f>
    // 000000000000004b:  X86_64_RELOC_GOT     _PyTuple_GetItem@GOTPCREL
    // 4f: 48 8d 15 23 00 00 00          leaq    0x23(%rip), %rdx        ## 0x79 <__JIT_ENTRY+0x79>
    // 0000000000000052:  X86_64_RELOC_SIGNED  __cstring
    // 56: 4c 89 f7                      movq    %r14, %rdi
    // 59: 48 89 de                      movq    %rbx, %rsi
    // 5c: 48 89 c1                      movq    %rax, %rcx
    // 5f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x65 <__JIT_ENTRY+0x65>
    // 0000000000000061:  X86_64_RELOC_GOT     __PyEval_FormatExcCheckArg@GOTPCREL
    // 65: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 6a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 73: 5d                            popq    %rbp
    // 74: e9 00 00 00 00                jmp     0x79 <__JIT_ENTRY+0x79>
    // 0000000000000075:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[121] = {
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0xb7, 0xc1, 0x49, 0x8b, 0x44, 0xc4, 0x50, 0x48,
        0x85, 0xc0, 0x74, 0x17, 0x8b, 0x08, 0x85, 0xc9,
        0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0x0f,
        0xb7, 0xf1, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x18, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x78,
        0x60, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8d, 0x15, 0x23, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xf7, 0x48, 0x89, 0xde, 0x48, 0x89, 0xc1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: "cannot access local variable '%s' where it is not associated with a value\x00"
    // 4a: 00 00 00 00 00 00
    // 50: &_PyEval_FormatExcCheckArg+0x0
    // 58: &PyTuple_GetItem+0x0
    // 60: &PyExc_UnboundLocalError+0x0
    // 68: OPARG
    const unsigned char data_body[112] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69,
        0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73,
        0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
        0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
        0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
        0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
        0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75,
        0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x50, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_64(data + 0x58, (uintptr_t)&PyTuple_GetItem);
    patch_64(data + 0x60, (uintptr_t)&PyExc_UnboundLocalError);
    patch_64(data + 0x68, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + 0x64);
    patch_32r(code + 0x27, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + 0x54);
    patch_32r(code + 0x52, (uintptr_t)data + 0x98);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)data + 0x4c);
    patch_32r(code + 0x75, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_FROM_DICT_OR_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_FROM_DICT_OR_DEREF.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // c: 49 8b 04 24                   movq    (%r12), %rax
    // 10: 48 8b 40 60                   movq    0x60(%rax), %rax
    // 14: 4c 8b 3d 00 00 00 00          movq    (%rip), %r15            ## 0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // 1b: 41 0f b7 cf                   movzwl  %r15w, %ecx
    // 1f: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
    // 24: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 29: 48 8d 55 f8                   leaq    -0x8(%rbp), %rdx
    // 2d: 48 89 df                      movq    %rbx, %rdi
    // 30: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x36 <__JIT_ENTRY+0x36>
    // 0000000000000032:  X86_64_RELOC_GOT     _PyMapping_GetOptionalItem@GOTPCREL
    // 36: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 44: 85 c0                         testl   %eax, %eax
    // 46: 0f 88 9a 00 00 00             js      0xe6 <__JIT_ENTRY+0xe6>
    // 4c: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 50: 48 85 c0                      testq   %rax, %rax
    // 53: 75 20                         jne     0x75 <__JIT_ENTRY+0x75>
    // 55: 41 0f b7 c7                   movzwl  %r15w, %eax
    // 59: 49 8b 44 c4 50                movq    0x50(%r12,%rax,8), %rax
    // 5e: 48 8b 40 10                   movq    0x10(%rax), %rax
    // 62: 48 85 c0                      testq   %rax, %rax
    // 65: 74 50                         je      0xb7 <__JIT_ENTRY+0xb7>
    // 67: 8b 08                         movl    (%rax), %ecx
    // 69: 85 c9                         testl   %ecx, %ecx
    // 6b: 78 04                         js      0x71 <__JIT_ENTRY+0x71>
    // 6d: ff c1                         incl    %ecx
    // 6f: 89 08                         movl    %ecx, (%rax)
    // 71: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 75: 49 83 c5 f8                   addq    $-0x8, %r13
    // 79: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 7e: 8b 0b                         movl    (%rbx), %ecx
    // 80: 85 c9                         testl   %ecx, %ecx
    // 82: 78 13                         js      0x97 <__JIT_ENTRY+0x97>
    // 84: ff c9                         decl    %ecx
    // 86: 89 0b                         movl    %ecx, (%rbx)
    // 88: 75 0d                         jne     0x97 <__JIT_ENTRY+0x97>
    // 8a: 48 89 df                      movq    %rbx, %rdi
    // 8d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x93 <__JIT_ENTRY+0x93>
    // 000000000000008f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 93: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 97: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 9c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // a5: 49 89 45 00                   movq    %rax, (%r13)
    // a9: 49 83 c5 08                   addq    $0x8, %r13
    // ad: 48 83 c4 10                   addq    $0x10, %rsp
    // b1: 5d                            popq    %rbp
    // b2: e9 00 00 00 00                jmp     0xb7 <__JIT_ENTRY+0xb7>
    // 00000000000000b3:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // b7: 48 c7 45 f8 00 00 00 00       movq    $0x0, -0x8(%rbp)
    // bf: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            ## 0xc6 <__JIT_ENTRY+0xc6>
    // 00000000000000c2:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // c6: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // cb: 49 8b 34 24                   movq    (%r12), %rsi
    // cf: 4c 89 f7                      movq    %r14, %rdi
    // d2: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xd8 <__JIT_ENTRY+0xd8>
    // 00000000000000d4:  X86_64_RELOC_GOT     __PyEval_FormatExcUnbound@GOTPCREL
    // d8: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // dd: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // e6: 48 83 c4 10                   addq    $0x10, %rsp
    // ea: 5d                            popq    %rbp
    // eb: e9 00 00 00 00                jmp     0xf0 <__JIT_ENTRY+0xf0>
    // 00000000000000ec:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[240] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x49, 0x8b, 0x5d, 0xf8, 0x49, 0x8b, 0x04, 0x24,
        0x48, 0x8b, 0x40, 0x60, 0x4c, 0x8b, 0x3d, 0x00,
        0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xcf, 0x48,
        0x8b, 0x74, 0xc8, 0x18, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x8d, 0x55, 0xf8, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88,
        0x9a, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0xf8,
        0x48, 0x85, 0xc0, 0x75, 0x20, 0x41, 0x0f, 0xb7,
        0xc7, 0x49, 0x8b, 0x44, 0xc4, 0x50, 0x48, 0x8b,
        0x40, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x50, 0x8b,
        0x08, 0x85, 0xc9, 0x78, 0x04, 0xff, 0xc1, 0x89,
        0x08, 0x48, 0x89, 0x45, 0xf8, 0x49, 0x83, 0xc5,
        0xf8, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x8b, 0x0b,
        0x85, 0xc9, 0x78, 0x13, 0xff, 0xc9, 0x89, 0x0b,
        0x75, 0x0d, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0xf8, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45,
        0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0x83, 0xc4,
        0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48,
        0xc7, 0x45, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0xb7, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x49, 0x8b, 0x34, 0x24, 0x4c,
        0x89, 0xf7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyEval_FormatExcUnbound+0x0
    // 8: OPARG
    // 10: &_Py_Dealloc+0x0
    // 18: &PyMapping_GetOptionalItem+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_FormatExcUnbound);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)&PyMapping_GetOptionalItem);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x8f, (uintptr_t)data + 0xc);
    patch_32r(code + 0xb3, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xc2, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xd4, (uintptr_t)data + -0x4);
    patch_32r(code + 0xec, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_GLOBAL.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 4c 89 eb                      movq    %r13, %rbx
    // 7: 49 8b 04 24                   movq    (%r12), %rax
    // b: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
    // 10: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 14: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 1b: 83 e1 fe                      andl    $-0x2, %ecx
    // 1e: 48 8b 54 88 18                movq    0x18(%rax,%rcx,4), %rdx
    // 23: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 28: 49 8b 74 24 20                movq    0x20(%r12), %rsi
    // 2d: 4c 89 e9                      movq    %r13, %rcx
    // 30: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x36 <__JIT_ENTRY+0x36>
    // 0000000000000032:  X86_64_RELOC_GOT     __PyEval_LoadGlobalStackRef@GOTPCREL
    // 36: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 44: 48 83 3b 00                   cmpq    $0x0, (%rbx)
    // 48: 74 0a                         je      0x54 <__JIT_ENTRY+0x54>
    // 4a: 49 83 c5 08                   addq    $0x8, %r13
    // 4e: 5d                            popq    %rbp
    // 4f: e9 00 00 00 00                jmp     0x54 <__JIT_ENTRY+0x54>
    // 0000000000000050:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 54: 5d                            popq    %rbp
    // 55: e9 00 00 00 00                jmp     0x5a <__JIT_ENTRY+0x5a>
    // 0000000000000056:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[90] = {
        0x55, 0x48, 0x89, 0xe5, 0x4c, 0x89, 0xeb, 0x49,
        0x8b, 0x04, 0x24, 0x49, 0x8b, 0x7c, 0x24, 0x18,
        0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xe1, 0xfe, 0x48, 0x8b,
        0x54, 0x88, 0x18, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x49, 0x8b, 0x74, 0x24, 0x20, 0x4c, 0x89, 0xe9,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0x3b, 0x00,
        0x74, 0x0a, 0x49, 0x83, 0xc5, 0x08, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &_PyEval_LoadGlobalStackRef+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_LoadGlobalStackRef);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + -0x4);
    patch_32r(code + 0x50, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x56, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_GLOBAL_BUILTINS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_GLOBAL_BUILTINS.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 44 24 20                movq    0x20(%r12), %rax
    // 9: 48 8b 40 20                   movq    0x20(%rax), %rax
    // d: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
    // 11: ba 01 00 00 00                movl    $0x1, %edx
    // 16: 48 d3 e2                      shlq    %cl, %rdx
    // 19: 48 01 c2                      addq    %rax, %rdx
    // 1c: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x23 <__JIT_ENTRY+0x23>
    // 000000000000001f:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 23: c1 e0 04                      shll    $0x4, %eax
    // 26: 48 8b 44 10 28                movq    0x28(%rax,%rdx), %rax
    // 2b: 48 85 c0                      testq   %rax, %rax
    // 2e: 74 18                         je      0x48 <__JIT_ENTRY+0x48>
    // 30: 8b 08                         movl    (%rax), %ecx
    // 32: 85 c9                         testl   %ecx, %ecx
    // 34: 78 04                         js      0x3a <__JIT_ENTRY+0x3a>
    // 36: ff c1                         incl    %ecx
    // 38: 89 08                         movl    %ecx, (%rax)
    // 3a: 49 89 45 00                   movq    %rax, (%r13)
    // 3e: 49 83 c5 08                   addq    $0x8, %r13
    // 42: 5d                            popq    %rbp
    // 43: e9 00 00 00 00                jmp     0x48 <__JIT_ENTRY+0x48>
    // 0000000000000044:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 48: 5d                            popq    %rbp
    // 49: e9 00 00 00 00                jmp     0x4e <__JIT_ENTRY+0x4e>
    // 000000000000004a:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[78] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x44, 0x24,
        0x20, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48,
        0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3,
        0xe2, 0x48, 0x01, 0xc2, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xc1, 0xe0, 0x04, 0x48, 0x8b,
        0x44, 0x10, 0x28, 0x48, 0x85, 0xc0, 0x74, 0x18,
        0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff, 0xc1,
        0x89, 0x08, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83,
        0xc5, 0x08, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + -0x4);
    patch_32r(code + 0x44, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x4a, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__LOAD_GLOBAL_BUILTINS_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_GLOBAL_BUILTINS_FROM_KEYS.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
    // c: ba 01 00 00 00                movl    $0x1, %edx
    // 11: 48 d3 e2                      shlq    %cl, %rdx
    // 14: 48 01 c2                      addq    %rax, %rdx
    // 17: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x1e <__JIT_ENTRY+0x1e>
    // 000000000000001a:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 1e: c1 e0 04                      shll    $0x4, %eax
    // 21: 48 8b 44 10 28                movq    0x28(%rax,%rdx), %rax
    // 26: 48 85 c0                      testq   %rax, %rax
    // 29: 74 14                         je      0x3f <__JIT_ENTRY+0x3f>
    // 2b: 8b 08                         movl    (%rax), %ecx
    // 2d: 85 c9                         testl   %ecx, %ecx
    // 2f: 78 04                         js      0x35 <__JIT_ENTRY+0x35>
    // 31: ff c1                         incl    %ecx
    // 33: 89 08                         movl    %ecx, (%rax)
    // 35: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 39: 5d                            popq    %rbp
    // 3a: e9 00 00 00 00                jmp     0x3f <__JIT_ENTRY+0x3f>
    // 000000000000003b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3f: 49 83 c5 f8                   addq    $-0x8, %r13
    // 43: 5d                            popq    %rbp
    // 44: e9 00 00 00 00                jmp     0x49 <__JIT_ENTRY+0x49>
    // 0000000000000045:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[73] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00,
        0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x0f,
        0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xe0,
        0x04, 0x48, 0x8b, 0x44, 0x10, 0x28, 0x48, 0x85,
        0xc0, 0x74, 0x14, 0x8b, 0x08, 0x85, 0xc9, 0x78,
        0x04, 0xff, 0xc1, 0x89, 0x08, 0x49, 0x89, 0x45,
        0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x83, 0xc5, 0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + -0x4);
    patch_32r(code + 0x3b, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x45, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__LOAD_GLOBAL_MODULE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_GLOBAL_MODULE.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 44 24 18                movq    0x18(%r12), %rax
    // 9: 48 8b 40 20                   movq    0x20(%rax), %rax
    // d: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
    // 11: ba 01 00 00 00                movl    $0x1, %edx
    // 16: 48 d3 e2                      shlq    %cl, %rdx
    // 19: 48 01 c2                      addq    %rax, %rdx
    // 1c: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x23 <__JIT_ENTRY+0x23>
    // 000000000000001f:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 23: c1 e0 04                      shll    $0x4, %eax
    // 26: 48 8b 44 10 28                movq    0x28(%rax,%rdx), %rax
    // 2b: 48 85 c0                      testq   %rax, %rax
    // 2e: 74 18                         je      0x48 <__JIT_ENTRY+0x48>
    // 30: 8b 08                         movl    (%rax), %ecx
    // 32: 85 c9                         testl   %ecx, %ecx
    // 34: 78 04                         js      0x3a <__JIT_ENTRY+0x3a>
    // 36: ff c1                         incl    %ecx
    // 38: 89 08                         movl    %ecx, (%rax)
    // 3a: 49 89 45 00                   movq    %rax, (%r13)
    // 3e: 49 83 c5 08                   addq    $0x8, %r13
    // 42: 5d                            popq    %rbp
    // 43: e9 00 00 00 00                jmp     0x48 <__JIT_ENTRY+0x48>
    // 0000000000000044:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 48: 5d                            popq    %rbp
    // 49: e9 00 00 00 00                jmp     0x4e <__JIT_ENTRY+0x4e>
    // 000000000000004a:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[78] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x44, 0x24,
        0x18, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48,
        0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3,
        0xe2, 0x48, 0x01, 0xc2, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xc1, 0xe0, 0x04, 0x48, 0x8b,
        0x44, 0x10, 0x28, 0x48, 0x85, 0xc0, 0x74, 0x18,
        0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff, 0xc1,
        0x89, 0x08, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83,
        0xc5, 0x08, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + -0x4);
    patch_32r(code + 0x44, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x4a, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__LOAD_GLOBAL_MODULE_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_GLOBAL_MODULE_FROM_KEYS.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
    // c: ba 01 00 00 00                movl    $0x1, %edx
    // 11: 48 d3 e2                      shlq    %cl, %rdx
    // 14: 48 01 c2                      addq    %rax, %rdx
    // 17: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x1e <__JIT_ENTRY+0x1e>
    // 000000000000001a:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 1e: c1 e0 04                      shll    $0x4, %eax
    // 21: 48 8b 44 10 28                movq    0x28(%rax,%rdx), %rax
    // 26: 48 85 c0                      testq   %rax, %rax
    // 29: 74 14                         je      0x3f <__JIT_ENTRY+0x3f>
    // 2b: 8b 08                         movl    (%rax), %ecx
    // 2d: 85 c9                         testl   %ecx, %ecx
    // 2f: 78 04                         js      0x35 <__JIT_ENTRY+0x35>
    // 31: ff c1                         incl    %ecx
    // 33: 89 08                         movl    %ecx, (%rax)
    // 35: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 39: 5d                            popq    %rbp
    // 3a: e9 00 00 00 00                jmp     0x3f <__JIT_ENTRY+0x3f>
    // 000000000000003b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3f: 49 83 c5 f8                   addq    $-0x8, %r13
    // 43: 5d                            popq    %rbp
    // 44: e9 00 00 00 00                jmp     0x49 <__JIT_ENTRY+0x49>
    // 0000000000000045:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[73] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00,
        0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x0f,
        0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xe0,
        0x04, 0x48, 0x8b, 0x44, 0x10, 0x28, 0x48, 0x85,
        0xc0, 0x74, 0x14, 0x8b, 0x08, 0x85, 0xc9, 0x78,
        0x04, 0xff, 0xc1, 0x89, 0x08, 0x49, 0x89, 0x45,
        0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x83, 0xc5, 0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + -0x4);
    patch_32r(code + 0x3b, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x45, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__LOAD_LOCALS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_LOCALS.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 44 24 28                movq    0x28(%r12), %rax
    // 5: 48 85 c0                      testq   %rax, %rax
    // 8: 74 17                         je      0x21 <__JIT_ENTRY+0x21>
    // a: 8b 08                         movl    (%rax), %ecx
    // c: 85 c9                         testl   %ecx, %ecx
    // e: 78 04                         js      0x14 <__JIT_ENTRY+0x14>
    // 10: ff c1                         incl    %ecx
    // 12: 89 08                         movl    %ecx, (%rax)
    // 14: 49 89 45 00                   movq    %rax, (%r13)
    // 18: 49 83 c5 08                   addq    $0x8, %r13
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 21: 55                            pushq   %rbp
    // 22: 48 89 e5                      movq    %rsp, %rbp
    // 25: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x31 <__JIT_ENTRY+0x31>
    // 000000000000002d:  X86_64_RELOC_GOT_LOAD        _PyExc_SystemError@GOTPCREL
    // 31: 48 8b 30                      movq    (%rax), %rsi
    // 34: 48 8d 15 1d 00 00 00          leaq    0x1d(%rip), %rdx        ## 0x58 <__JIT_ENTRY+0x58>
    // 0000000000000037:  X86_64_RELOC_SIGNED  __cstring
    // 3b: 4c 89 f7                      movq    %r14, %rdi
    // 3e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x44 <__JIT_ENTRY+0x44>
    // 0000000000000040:  X86_64_RELOC_GOT     __PyErr_SetString@GOTPCREL
    // 44: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 49: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 52: 5d                            popq    %rbp
    // 53: e9 00 00 00 00                jmp     0x58 <__JIT_ENTRY+0x58>
    // 0000000000000054:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[88] = {
        0x49, 0x8b, 0x44, 0x24, 0x28, 0x48, 0x85, 0xc0,
        0x74, 0x17, 0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04,
        0xff, 0xc1, 0x89, 0x08, 0x49, 0x89, 0x45, 0x00,
        0x49, 0x83, 0xc5, 0x08, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x55, 0x48, 0x89, 0xe5, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x30, 0x48, 0x8d, 0x15, 0x1d,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 'no locals found\x00'
    // 10: &_PyErr_SetString+0x0
    // 18: &PyExc_SystemError+0x0
    const unsigned char data_body[32] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x10, (uintptr_t)&_PyErr_SetString);
    patch_64(data + 0x18, (uintptr_t)&PyExc_SystemError);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x1d, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)data + 0x14);
    patch_32r(code + 0x37, (uintptr_t)data + 0x71);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + 0xc);
    patch_32r(code + 0x54, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_NAME.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 04 24                   movq    (%r12), %rax
    // 8: 48 8b 40 20                   movq    0x20(%rax), %rax
    // c: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 13: 48 8b 54 c8 18                movq    0x18(%rax,%rcx,8), %rdx
    // 18: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 1d: 4c 89 f7                      movq    %r14, %rdi
    // 20: 4c 89 e6                      movq    %r12, %rsi
    // 23: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x29 <__JIT_ENTRY+0x29>
    // 0000000000000025:  X86_64_RELOC_GOT     __PyEval_LoadName@GOTPCREL
    // 29: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2e: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 37: 48 85 c0                      testq   %rax, %rax
    // 3a: 74 0e                         je      0x4a <__JIT_ENTRY+0x4a>
    // 3c: 49 89 45 00                   movq    %rax, (%r13)
    // 40: 49 83 c5 08                   addq    $0x8, %r13
    // 44: 5d                            popq    %rbp
    // 45: e9 00 00 00 00                jmp     0x4a <__JIT_ENTRY+0x4a>
    // 0000000000000046:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 4a: 5d                            popq    %rbp
    // 4b: e9 00 00 00 00                jmp     0x50 <__JIT_ENTRY+0x50>
    // 000000000000004c:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[80] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x04, 0x24,
        0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x54, 0xc8, 0x18,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x4c, 0x89, 0xf7,
        0x4c, 0x89, 0xe6, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x0e, 0x49, 0x89, 0x45, 0x00,
        0x49, 0x83, 0xc5, 0x08, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyEval_LoadName+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_LoadName);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + -0x4);
    patch_32r(code + 0x46, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x4c, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_SMALL_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SMALL_INT.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: c1 e0 05                      shll    $0x5, %eax
    // e: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 15: 48 01 c8                      addq    %rcx, %rax
    // 18: 48 05 a8 34 00 00             addq    $0x34a8, %rax           ## imm = 0x34A8
    // 1e: 49 89 45 00                   movq    %rax, (%r13)
    // 22: 49 83 c5 08                   addq    $0x8, %r13
    // 26: 5d                            popq    %rbp
    // 27: e9 00 00 00 00                jmp     0x2c <__JIT_ENTRY+0x2c>
    // 0000000000000028:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[39] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xc1, 0xe0, 0x05, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8,
        0x48, 0x05, 0xa8, 0x34, 0x00, 0x00, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d,
    };
    // 0: &_PyRuntime+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
}

void
emit__LOAD_SMALL_INT_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SMALL_INT_0.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: b8 a8 34 00 00                movl    $0x34a8, %eax           ## imm = 0x34A8
    // 9: 48 03 05 00 00 00 00          addq    (%rip), %rax            ## 0x10 <__JIT_ENTRY+0x10>
    // 000000000000000c:  X86_64_RELOC_GOT     __PyRuntime@GOTPCREL
    // 10: 49 89 45 00                   movq    %rax, (%r13)
    // 14: 49 83 c5 08                   addq    $0x8, %r13
    // 18: 5d                            popq    %rbp
    // 19: e9 00 00 00 00                jmp     0x1e <__JIT_ENTRY+0x1e>
    // 000000000000001a:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[25] = {
        0x55, 0x48, 0x89, 0xe5, 0xb8, 0xa8, 0x34, 0x00,
        0x00, 0x48, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x5d,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
}

void
emit__LOAD_SMALL_INT_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SMALL_INT_1.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: b8 c8 34 00 00                movl    $0x34c8, %eax           ## imm = 0x34C8
    // 9: 48 03 05 00 00 00 00          addq    (%rip), %rax            ## 0x10 <__JIT_ENTRY+0x10>
    // 000000000000000c:  X86_64_RELOC_GOT     __PyRuntime@GOTPCREL
    // 10: 49 89 45 00                   movq    %rax, (%r13)
    // 14: 49 83 c5 08                   addq    $0x8, %r13
    // 18: 5d                            popq    %rbp
    // 19: e9 00 00 00 00                jmp     0x1e <__JIT_ENTRY+0x1e>
    // 000000000000001a:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[25] = {
        0x55, 0x48, 0x89, 0xe5, 0xb8, 0xc8, 0x34, 0x00,
        0x00, 0x48, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x5d,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
}

void
emit__LOAD_SMALL_INT_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SMALL_INT_2.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: b8 e8 34 00 00                movl    $0x34e8, %eax           ## imm = 0x34E8
    // 9: 48 03 05 00 00 00 00          addq    (%rip), %rax            ## 0x10 <__JIT_ENTRY+0x10>
    // 000000000000000c:  X86_64_RELOC_GOT     __PyRuntime@GOTPCREL
    // 10: 49 89 45 00                   movq    %rax, (%r13)
    // 14: 49 83 c5 08                   addq    $0x8, %r13
    // 18: 5d                            popq    %rbp
    // 19: e9 00 00 00 00                jmp     0x1e <__JIT_ENTRY+0x1e>
    // 000000000000001a:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[25] = {
        0x55, 0x48, 0x89, 0xe5, 0xb8, 0xe8, 0x34, 0x00,
        0x00, 0x48, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x5d,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
}

void
emit__LOAD_SMALL_INT_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SMALL_INT_3.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: b8 08 35 00 00                movl    $0x3508, %eax           ## imm = 0x3508
    // 9: 48 03 05 00 00 00 00          addq    (%rip), %rax            ## 0x10 <__JIT_ENTRY+0x10>
    // 000000000000000c:  X86_64_RELOC_GOT     __PyRuntime@GOTPCREL
    // 10: 49 89 45 00                   movq    %rax, (%r13)
    // 14: 49 83 c5 08                   addq    $0x8, %r13
    // 18: 5d                            popq    %rbp
    // 19: e9 00 00 00 00                jmp     0x1e <__JIT_ENTRY+0x1e>
    // 000000000000001a:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[25] = {
        0x55, 0x48, 0x89, 0xe5, 0xb8, 0x08, 0x35, 0x00,
        0x00, 0x48, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x5d,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
}

void
emit__LOAD_SPECIAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SPECIAL.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // 10: 49 83 c5 f8                   addq    $-0x8, %r13
    // 14: 0f b7 1d 00 00 00 00          movzwl  (%rip), %ebx            ## 0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 1b: c1 e3 04                      shll    $0x4, %ebx
    // 1e: 4c 8b 35 00 00 00 00          movq    (%rip), %r14            ## 0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_GOT_LOAD        __Py_SpecialMethods@GOTPCREL
    // 25: 49 8b 34 1e                   movq    (%r14,%rbx), %rsi
    // 29: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2e: 48 8d 55 f0                   leaq    -0x10(%rbp), %rdx
    // 32: 4c 89 ff                      movq    %r15, %rdi
    // 35: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x3b <__JIT_ENTRY+0x3b>
    // 0000000000000037:  X86_64_RELOC_GOT     __PyObject_LookupSpecialMethod@GOTPCREL
    // 3b: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 40: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 49: 48 85 c0                      testq   %rax, %rax
    // 4c: 74 1e                         je      0x6c <__JIT_ENTRY+0x6c>
    // 4e: 48 8b 4d f0                   movq    -0x10(%rbp), %rcx
    // 52: 49 89 45 00                   movq    %rax, (%r13)
    // 56: 49 89 4d 08                   movq    %rcx, 0x8(%r13)
    // 5a: 49 83 c5 10                   addq    $0x10, %r13
    // 5e: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 62: 48 83 c4 10                   addq    $0x10, %rsp
    // 66: 5d                            popq    %rbp
    // 67: e9 00 00 00 00                jmp     0x6c <__JIT_ENTRY+0x6c>
    // 0000000000000068:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 6c: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 70: 48 8b 47 70                   movq    0x70(%rdi), %rax
    // 74: 48 85 c0                      testq   %rax, %rax
    // 77: 74 14                         je      0x8d <__JIT_ENTRY+0x8d>
    // 79: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
    // 7e: 74 0d                         je      0x8d <__JIT_ENTRY+0x8d>
    // 80: 49 89 fe                      movq    %rdi, %r14
    // 83: 48 83 c4 10                   addq    $0x10, %rsp
    // 87: 5d                            popq    %rbp
    // 88: e9 00 00 00 00                jmp     0x8d <__JIT_ENTRY+0x8d>
    // 0000000000000089:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 8d: 49 01 de                      addq    %rbx, %r14
    // 90: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 95: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x9c <__JIT_ENTRY+0x9c>
    // 0000000000000098:  X86_64_RELOC_GOT_LOAD        _PyExc_TypeError@GOTPCREL
    // 9c: 48 8b 30                      movq    (%rax), %rsi
    // 9f: 49 8b 56 08                   movq    0x8(%r14), %rdx
    // a3: 49 8b 47 08                   movq    0x8(%r15), %rax
    // a7: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // ab: 49 89 fe                      movq    %rdi, %r14
    // ae: 31 c0                         xorl    %eax, %eax
    // b0: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xb6 <__JIT_ENTRY+0xb6>
    // 00000000000000b2:  X86_64_RELOC_GOT     __PyErr_Format@GOTPCREL
    // b6: 4c 89 f7                      movq    %r14, %rdi
    // b9: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // be: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // c7: 49 89 fe                      movq    %rdi, %r14
    // ca: 48 83 c4 10                   addq    $0x10, %rsp
    // ce: 5d                            popq    %rbp
    // cf: e9 00 00 00 00                jmp     0xd4 <__JIT_ENTRY+0xd4>
    // 00000000000000d0:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[212] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0x75, 0xf8, 0x4d, 0x8b, 0x7d, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x0f, 0xb7, 0x1d, 0x00,
        0x00, 0x00, 0x00, 0xc1, 0xe3, 0x04, 0x4c, 0x8b,
        0x35, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x34,
        0x1e, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8d,
        0x55, 0xf0, 0x4c, 0x89, 0xff, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x74, 0x1e, 0x48, 0x8b,
        0x4d, 0xf0, 0x49, 0x89, 0x45, 0x00, 0x49, 0x89,
        0x4d, 0x08, 0x49, 0x83, 0xc5, 0x10, 0x4c, 0x8b,
        0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7d, 0xf8,
        0x48, 0x8b, 0x47, 0x70, 0x48, 0x85, 0xc0, 0x74,
        0x14, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x0d,
        0x49, 0x89, 0xfe, 0x48, 0x83, 0xc4, 0x10, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xde,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49,
        0x8b, 0x56, 0x08, 0x49, 0x8b, 0x47, 0x08, 0x48,
        0x8b, 0x48, 0x18, 0x49, 0x89, 0xfe, 0x31, 0xc0,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xf7, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0xfe, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyErr_Format+0x0
    // 8: &PyExc_TypeError+0x0
    // 10: &_PyObject_LookupSpecialMethod+0x0
    // 18: &_Py_SpecialMethods+0x0
    // 20: OPARG
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x8, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x10, (uintptr_t)&_PyObject_LookupSpecialMethod);
    patch_64(data + 0x18, (uintptr_t)&_Py_SpecialMethods);
    patch_64(data + 0x20, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x37, (uintptr_t)data + 0xc);
    patch_32r(code + 0x68, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x89, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x98, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xb2, (uintptr_t)data + -0x4);
    patch_32r(code + 0xd0, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_SUPER_ATTR_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SUPER_ATTR_ATTR.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 49 8b 45 e8                   movq    -0x18(%r13), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PySuper_Type@GOTPCREL
    // 13: 75 11                         jne     0x26 <__JIT_ENTRY+0x26>
    // 15: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // 19: 49 8b 47 08                   movq    0x8(%r15), %rax
    // 1d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
    // 24: 75 0a                         jne     0x30 <__JIT_ENTRY+0x30>
    // 26: 48 83 c4 10                   addq    $0x10, %rsp
    // 2a: 5d                            popq    %rbp
    // 2b: e9 00 00 00 00                jmp     0x30 <__JIT_ENTRY+0x30>
    // 000000000000002c:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 30: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 34: 49 8b 04 24                   movq    (%r12), %rax
    // 38: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 3c: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x43 <__JIT_ENTRY+0x43>
    // 000000000000003f:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 43: 83 e1 fc                      andl    $-0x4, %ecx
    // 46: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
    // 4b: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 50: 4c 89 ff                      movq    %r15, %rdi
    // 53: 48 89 de                      movq    %rbx, %rsi
    // 56: 31 c9                         xorl    %ecx, %ecx
    // 58: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5e <__JIT_ENTRY+0x5e>
    // 000000000000005a:  X86_64_RELOC_GOT     __PySuper_Lookup@GOTPCREL
    // 5e: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 63: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 6c: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            ## 0x73 <__JIT_ENTRY+0x73>
    // 000000000000006f:  X86_64_RELOC_GOT_LOAD        _PySuper_Type@GOTPCREL
    // 73: 8b 0a                         movl    (%rdx), %ecx
    // 75: 85 c9                         testl   %ecx, %ecx
    // 77: 78 1b                         js      0x94 <__JIT_ENTRY+0x94>
    // 79: ff c9                         decl    %ecx
    // 7b: 89 0a                         movl    %ecx, (%rdx)
    // 7d: 75 15                         jne     0x94 <__JIT_ENTRY+0x94>
    // 7f: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            ## 0x86 <__JIT_ENTRY+0x86>
    // 0000000000000082:  X86_64_RELOC_GOT_LOAD        _PySuper_Type@GOTPCREL
    // 86: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 8a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x90 <__JIT_ENTRY+0x90>
    // 000000000000008c:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 90: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 94: 41 8b 0f                      movl    (%r15), %ecx
    // 97: 85 c9                         testl   %ecx, %ecx
    // 99: 78 16                         js      0xb1 <__JIT_ENTRY+0xb1>
    // 9b: ff c9                         decl    %ecx
    // 9d: 41 89 0f                      movl    %ecx, (%r15)
    // a0: 75 0f                         jne     0xb1 <__JIT_ENTRY+0xb1>
    // a2: 4c 89 ff                      movq    %r15, %rdi
    // a5: 49 89 c7                      movq    %rax, %r15
    // a8: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xae <__JIT_ENTRY+0xae>
    // 00000000000000aa:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // ae: 4c 89 f8                      movq    %r15, %rax
    // b1: 8b 0b                         movl    (%rbx), %ecx
    // b3: 85 c9                         testl   %ecx, %ecx
    // b5: 78 15                         js      0xcc <__JIT_ENTRY+0xcc>
    // b7: ff c9                         decl    %ecx
    // b9: 89 0b                         movl    %ecx, (%rbx)
    // bb: 75 0f                         jne     0xcc <__JIT_ENTRY+0xcc>
    // bd: 48 89 df                      movq    %rbx, %rdi
    // c0: 48 89 c3                      movq    %rax, %rbx
    // c3: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xc9 <__JIT_ENTRY+0xc9>
    // 00000000000000c5:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // c9: 48 89 d8                      movq    %rbx, %rax
    // cc: 48 85 c0                      testq   %rax, %rax
    // cf: 74 12                         je      0xe3 <__JIT_ENTRY+0xe3>
    // d1: 49 89 45 e8                   movq    %rax, -0x18(%r13)
    // d5: 49 83 c5 f0                   addq    $-0x10, %r13
    // d9: 48 83 c4 10                   addq    $0x10, %rsp
    // dd: 5d                            popq    %rbp
    // de: e9 00 00 00 00                jmp     0xe3 <__JIT_ENTRY+0xe3>
    // 00000000000000df:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // e3: 49 83 c5 e8                   addq    $-0x18, %r13
    // e7: 48 83 c4 10                   addq    $0x10, %rsp
    // eb: 5d                            popq    %rbp
    // ec: e9 00 00 00 00                jmp     0xf1 <__JIT_ENTRY+0xf1>
    // 00000000000000ed:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[241] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x49, 0x8b, 0x45, 0xe8, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x75, 0x11, 0x4d, 0x8b, 0x7d,
        0xf0, 0x49, 0x8b, 0x47, 0x08, 0xf6, 0x80, 0xab,
        0x00, 0x00, 0x00, 0x80, 0x75, 0x0a, 0x48, 0x83,
        0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x5d, 0xf8, 0x49, 0x8b, 0x04, 0x24,
        0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xe1, 0xfc, 0x48, 0x8b,
        0x54, 0x48, 0x18, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x4c, 0x89, 0xff, 0x48, 0x89, 0xde, 0x31, 0xc9,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x0a, 0x85, 0xc9, 0x78,
        0x1b, 0xff, 0xc9, 0x89, 0x0a, 0x75, 0x15, 0x48,
        0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0x45, 0xf8, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x45, 0xf8, 0x41, 0x8b, 0x0f, 0x85,
        0xc9, 0x78, 0x16, 0xff, 0xc9, 0x41, 0x89, 0x0f,
        0x75, 0x0f, 0x4c, 0x89, 0xff, 0x49, 0x89, 0xc7,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xf8, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x15, 0xff,
        0xc9, 0x89, 0x0b, 0x75, 0x0f, 0x48, 0x89, 0xdf,
        0x48, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xd8, 0x48, 0x85, 0xc0, 0x74,
        0x12, 0x49, 0x89, 0x45, 0xe8, 0x49, 0x83, 0xc5,
        0xf0, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x83, 0xc5, 0xe8, 0x48,
        0x83, 0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PySuper_Type+0x0
    // 10: &_PySuper_Lookup+0x0
    // 18: OPARG
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PySuper_Type);
    patch_64(data + 0x10, (uintptr_t)&_PySuper_Lookup);
    patch_64(data + 0x18, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x4);
    patch_32r(code + 0x2c, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x6f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x82, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x8c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xaa, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xc5, (uintptr_t)data + -0x4);
    patch_32r(code + 0xdf, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0xed, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__LOAD_SUPER_ATTR_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _LOAD_SUPER_ATTR_METHOD.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 49 8b 45 e8                   movq    -0x18(%r13), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PySuper_Type@GOTPCREL
    // 13: 75 11                         jne     0x26 <__JIT_ENTRY+0x26>
    // 15: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 19: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 1d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
    // 24: 75 0a                         jne     0x30 <__JIT_ENTRY+0x30>
    // 26: 48 83 c4 10                   addq    $0x10, %rsp
    // 2a: 5d                            popq    %rbp
    // 2b: e9 00 00 00 00                jmp     0x30 <__JIT_ENTRY+0x30>
    // 000000000000002c:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 30: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // 34: 49 8b 04 24                   movq    (%r12), %rax
    // 38: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 3c: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x43 <__JIT_ENTRY+0x43>
    // 000000000000003f:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 43: 83 e1 fc                      andl    $-0x4, %ecx
    // 46: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
    // 4b: c7 45 fc 00 00 00 00          movl    $0x0, -0x4(%rbp)
    // 52: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 57: 49 8b 47 08                   movq    0x8(%r15), %rax
    // 5b: 48 8b 80 90 00 00 00          movq    0x90(%rax), %rax
    // 62: 31 f6                         xorl    %esi, %esi
    // 64: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x6b <__JIT_ENTRY+0x6b>
    // 0000000000000067:  X86_64_RELOC_GOT     _PyObject_GenericGetAttr@GOTPCREL
    // 6b: 48 8d 4d fc                   leaq    -0x4(%rbp), %rcx
    // 6f: 48 0f 45 ce                   cmovneq %rsi, %rcx
    // 73: 48 89 df                      movq    %rbx, %rdi
    // 76: 4c 89 fe                      movq    %r15, %rsi
    // 79: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x7f <__JIT_ENTRY+0x7f>
    // 000000000000007b:  X86_64_RELOC_GOT     __PySuper_Lookup@GOTPCREL
    // 7f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 84: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 8d: 48 85 c0                      testq   %rax, %rax
    // 90: 0f 84 9a 00 00 00             je      0x130 <__JIT_ENTRY+0x130>
    // 96: 83 7d fc 00                   cmpl    $0x0, -0x4(%rbp)
    // 9a: 75 3b                         jne     0xd7 <__JIT_ENTRY+0xd7>
    // 9c: 49 83 c5 f8                   addq    $-0x8, %r13
    // a0: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // a5: 41 8b 0f                      movl    (%r15), %ecx
    // a8: 85 c9                         testl   %ecx, %ecx
    // aa: 78 16                         js      0xc2 <__JIT_ENTRY+0xc2>
    // ac: ff c9                         decl    %ecx
    // ae: 41 89 0f                      movl    %ecx, (%r15)
    // b1: 75 0f                         jne     0xc2 <__JIT_ENTRY+0xc2>
    // b3: 4c 89 ff                      movq    %r15, %rdi
    // b6: 49 89 c7                      movq    %rax, %r15
    // b9: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xbf <__JIT_ENTRY+0xbf>
    // 00000000000000bb:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // bf: 4c 89 f8                      movq    %r15, %rax
    // c2: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // c7: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // d0: 49 83 c5 08                   addq    $0x8, %r13
    // d4: 45 31 ff                      xorl    %r15d, %r15d
    // d7: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0xde <__JIT_ENTRY+0xde>
    // 00000000000000da:  X86_64_RELOC_GOT_LOAD        _PySuper_Type@GOTPCREL
    // de: 8b 11                         movl    (%rcx), %edx
    // e0: 85 d2                         testl   %edx, %edx
    // e2: 78 1b                         js      0xff <__JIT_ENTRY+0xff>
    // e4: ff ca                         decl    %edx
    // e6: 89 11                         movl    %edx, (%rcx)
    // e8: 75 15                         jne     0xff <__JIT_ENTRY+0xff>
    // ea: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            ## 0xf1 <__JIT_ENTRY+0xf1>
    // 00000000000000ed:  X86_64_RELOC_GOT_LOAD        _PySuper_Type@GOTPCREL
    // f1: 48 89 45 f0                   movq    %rax, -0x10(%rbp)
    // f5: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xfb <__JIT_ENTRY+0xfb>
    // 00000000000000f7:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // fb: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // ff: 8b 0b                         movl    (%rbx), %ecx
    // 101: 85 c9                         testl   %ecx, %ecx
    // 103: 78 15                         js      0x11a <__JIT_ENTRY+0x11a>
    // 105: ff c9                         decl    %ecx
    // 107: 89 0b                         movl    %ecx, (%rbx)
    // 109: 75 0f                         jne     0x11a <__JIT_ENTRY+0x11a>
    // 10b: 48 89 df                      movq    %rbx, %rdi
    // 10e: 48 89 c3                      movq    %rax, %rbx
    // 111: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x117 <__JIT_ENTRY+0x117>
    // 0000000000000113:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 117: 48 89 d8                      movq    %rbx, %rax
    // 11a: 49 89 45 e8                   movq    %rax, -0x18(%r13)
    // 11e: 4d 89 7d f0                   movq    %r15, -0x10(%r13)
    // 122: 49 83 c5 f8                   addq    $-0x8, %r13
    // 126: 48 83 c4 10                   addq    $0x10, %rsp
    // 12a: 5d                            popq    %rbp
    // 12b: e9 00 00 00 00                jmp     0x130 <__JIT_ENTRY+0x130>
    // 000000000000012c:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 130: 48 83 c4 10                   addq    $0x10, %rsp
    // 134: 5d                            popq    %rbp
    // 135: e9 00 00 00 00                jmp     0x13a <__JIT_ENTRY+0x13a>
    // 0000000000000136:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[314] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x49, 0x8b, 0x45, 0xe8, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x75, 0x11, 0x49, 0x8b, 0x5d,
        0xf0, 0x48, 0x8b, 0x43, 0x08, 0xf6, 0x80, 0xab,
        0x00, 0x00, 0x00, 0x80, 0x75, 0x0a, 0x48, 0x83,
        0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x7d, 0xf8, 0x49, 0x8b, 0x04, 0x24,
        0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xe1, 0xfc, 0x48, 0x8b,
        0x54, 0x48, 0x18, 0xc7, 0x45, 0xfc, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x49,
        0x8b, 0x47, 0x08, 0x48, 0x8b, 0x80, 0x90, 0x00,
        0x00, 0x00, 0x31, 0xf6, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8d, 0x4d, 0xfc, 0x48,
        0x0f, 0x45, 0xce, 0x48, 0x89, 0xdf, 0x4c, 0x89,
        0xfe, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x83, 0x7d,
        0xfc, 0x00, 0x75, 0x3b, 0x49, 0x83, 0xc5, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x41, 0x8b, 0x0f,
        0x85, 0xc9, 0x78, 0x16, 0xff, 0xc9, 0x41, 0x89,
        0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x49, 0x89,
        0xc7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x89, 0xf8, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x83, 0xc5, 0x08, 0x45, 0x31, 0xff, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x11,
        0x85, 0xd2, 0x78, 0x1b, 0xff, 0xca, 0x89, 0x11,
        0x75, 0x15, 0x48, 0x8b, 0x3d, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0x45, 0xf0, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0xf0, 0x8b,
        0x0b, 0x85, 0xc9, 0x78, 0x15, 0xff, 0xc9, 0x89,
        0x0b, 0x75, 0x0f, 0x48, 0x89, 0xdf, 0x48, 0x89,
        0xc3, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xd8, 0x49, 0x89, 0x45, 0xe8, 0x4d, 0x89,
        0x7d, 0xf0, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83,
        0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PySuper_Type+0x0
    // 10: &_PySuper_Lookup+0x0
    // 18: &PyObject_GenericGetAttr+0x0
    // 20: OPARG
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PySuper_Type);
    patch_64(data + 0x10, (uintptr_t)&_PySuper_Lookup);
    patch_64(data + 0x18, (uintptr_t)&PyObject_GenericGetAttr);
    patch_64(data + 0x20, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x4);
    patch_32r(code + 0x2c, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x67, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xbb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xda, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xed, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xf7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x113, (uintptr_t)data + -0x4);
    patch_32r(code + 0x12c, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x136, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__MAKE_CALLARGS_A_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAKE_CALLARGS_A_TUPLE.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 8: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // c: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 10: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x17 <__JIT_ENTRY+0x17>
    // 0000000000000013:  X86_64_RELOC_GOT     _PyTuple_Type@GOTPCREL
    // 17: 0f 84 81 00 00 00             je      0x9e <__JIT_ENTRY+0x9e>
    // 1d: 49 8b 75 e0                   movq    -0x20(%r13), %rsi
    // 21: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 26: 4c 89 f7                      movq    %r14, %rdi
    // 29: 48 89 da                      movq    %rbx, %rdx
    // 2c: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x32 <__JIT_ENTRY+0x32>
    // 000000000000002e:  X86_64_RELOC_GOT     __Py_Check_ArgsIterable@GOTPCREL
    // 32: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 37: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 40: 85 c0                         testl   %eax, %eax
    // 42: 78 68                         js      0xac <__JIT_ENTRY+0xac>
    // 44: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 49: 48 89 df                      movq    %rbx, %rdi
    // 4c: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x52 <__JIT_ENTRY+0x52>
    // 000000000000004e:  X86_64_RELOC_GOT     _PySequence_Tuple@GOTPCREL
    // 52: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 57: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 60: 48 85 c0                      testq   %rax, %rax
    // 63: 74 47                         je      0xac <__JIT_ENTRY+0xac>
    // 65: 49 83 c5 f0                   addq    $-0x10, %r13
    // 69: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 6e: 8b 0b                         movl    (%rbx), %ecx
    // 70: 85 c9                         testl   %ecx, %ecx
    // 72: 78 15                         js      0x89 <__JIT_ENTRY+0x89>
    // 74: ff c9                         decl    %ecx
    // 76: 89 0b                         movl    %ecx, (%rbx)
    // 78: 75 0f                         jne     0x89 <__JIT_ENTRY+0x89>
    // 7a: 48 89 df                      movq    %rbx, %rdi
    // 7d: 48 89 c3                      movq    %rax, %rbx
    // 80: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x86 <__JIT_ENTRY+0x86>
    // 0000000000000082:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 86: 48 89 d8                      movq    %rbx, %rax
    // 89: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 8e: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 97: 49 83 c5 10                   addq    $0x10, %r13
    // 9b: 48 89 c3                      movq    %rax, %rbx
    // 9e: 49 89 5d f0                   movq    %rbx, -0x10(%r13)
    // a2: 4d 89 7d f8                   movq    %r15, -0x8(%r13)
    // a6: 5d                            popq    %rbp
    // a7: e9 00 00 00 00                jmp     0xac <__JIT_ENTRY+0xac>
    // 00000000000000a8:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // ac: 5d                            popq    %rbp
    // ad: e9 00 00 00 00                jmp     0xb2 <__JIT_ENTRY+0xb2>
    // 00000000000000ae:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[178] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x5d, 0xf0,
        0x4d, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x43, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x84, 0x81, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x75,
        0xe0, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x4c, 0x89,
        0xf7, 0x48, 0x89, 0xda, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x78, 0x68, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x47, 0x49, 0x83, 0xc5,
        0xf0, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x8b, 0x0b,
        0x85, 0xc9, 0x78, 0x15, 0xff, 0xc9, 0x89, 0x0b,
        0x75, 0x0f, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xc3,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xd8, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x83, 0xc5, 0x10, 0x48, 0x89, 0xc3, 0x49, 0x89,
        0x5d, 0xf0, 0x4d, 0x89, 0x7d, 0xf8, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PySequence_Tuple+0x0
    // 10: &_Py_Check_ArgsIterable+0x0
    // 18: &PyTuple_Type+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PySequence_Tuple);
    patch_64(data + 0x10, (uintptr_t)&_Py_Check_ArgsIterable);
    patch_64(data + 0x18, (uintptr_t)&PyTuple_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x82, (uintptr_t)data + -0x4);
    patch_32r(code + 0xa8, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0xae, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__MAKE_CELL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAKE_CELL.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // b: 0f b7 c3                      movzwl  %bx, %eax
    // e: 49 8b 7c c4 50                movq    0x50(%r12,%rax,8), %rdi
    // 13: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x19 <__JIT_ENTRY+0x19>
    // 0000000000000015:  X86_64_RELOC_GOT     _PyCell_New@GOTPCREL
    // 19: 48 85 c0                      testq   %rax, %rax
    // 1c: 74 37                         je      0x55 <__JIT_ENTRY+0x55>
    // 1e: 0f b7 cb                      movzwl  %bx, %ecx
    // 21: 49 8b 7c cc 50                movq    0x50(%r12,%rcx,8), %rdi
    // 26: 49 89 44 cc 50                movq    %rax, 0x50(%r12,%rcx,8)
    // 2b: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 30: 48 85 ff                      testq   %rdi, %rdi
    // 33: 74 0c                         je      0x41 <__JIT_ENTRY+0x41>
    // 35: 8b 07                         movl    (%rdi), %eax
    // 37: 85 c0                         testl   %eax, %eax
    // 39: 78 06                         js      0x41 <__JIT_ENTRY+0x41>
    // 3b: ff c8                         decl    %eax
    // 3d: 89 07                         movl    %eax, (%rdi)
    // 3f: 74 1a                         je      0x5b <__JIT_ENTRY+0x5b>
    // 41: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 46: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 4f: 5d                            popq    %rbp
    // 50: e9 00 00 00 00                jmp     0x55 <__JIT_ENTRY+0x55>
    // 0000000000000051:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 55: 5d                            popq    %rbp
    // 56: e9 00 00 00 00                jmp     0x5b <__JIT_ENTRY+0x5b>
    // 0000000000000057:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 5b: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x61 <__JIT_ENTRY+0x61>
    // 000000000000005d:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 61: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 66: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 6f: 5d                            popq    %rbp
    // 70: e9 00 00 00 00                jmp     0x75 <__JIT_ENTRY+0x75>
    // 0000000000000071:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[112] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x1d, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc3, 0x49, 0x8b,
        0x7c, 0xc4, 0x50, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x74, 0x37, 0x0f, 0xb7,
        0xcb, 0x49, 0x8b, 0x7c, 0xcc, 0x50, 0x49, 0x89,
        0x44, 0xcc, 0x50, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x48, 0x85, 0xff, 0x74, 0x0c, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74,
        0x1a, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyCell_New+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyCell_New);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + 0x4);
    patch_32r(code + 0x51, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x57, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)data + -0x4);
}

void
emit__MAKE_FUNCTION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAKE_FUNCTION.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 49 8b 74 24 18                movq    0x18(%r12), %rsi
    // 12: 48 89 df                      movq    %rbx, %rdi
    // 15: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_GOT     _PyFunction_New@GOTPCREL
    // 1b: 49 83 44 24 40 f8             addq    $-0x8, 0x40(%r12)
    // 21: 49 89 c7                      movq    %rax, %r15
    // 24: 8b 03                         movl    (%rbx), %eax
    // 26: 85 c0                         testl   %eax, %eax
    // 28: 78 06                         js      0x30 <__JIT_ENTRY+0x30>
    // 2a: ff c8                         decl    %eax
    // 2c: 89 03                         movl    %eax, (%rbx)
    // 2e: 74 2d                         je      0x5d <__JIT_ENTRY+0x5d>
    // 30: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 35: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3e: 4d 85 ff                      testq   %r15, %r15
    // 41: 74 36                         je      0x79 <__JIT_ENTRY+0x79>
    // 43: 8b 73 5c                      movl    0x5c(%rbx), %esi
    // 46: 4c 89 ff                      movq    %r15, %rdi
    // 49: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4f <__JIT_ENTRY+0x4f>
    // 000000000000004b:  X86_64_RELOC_GOT     __PyFunction_SetVersion@GOTPCREL
    // 4f: 4d 89 7d 00                   movq    %r15, (%r13)
    // 53: 49 83 c5 08                   addq    $0x8, %r13
    // 57: 5d                            popq    %rbp
    // 58: e9 00 00 00 00                jmp     0x5d <__JIT_ENTRY+0x5d>
    // 0000000000000059:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 5d: 48 89 df                      movq    %rbx, %rdi
    // 60: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x66 <__JIT_ENTRY+0x66>
    // 0000000000000062:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 66: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 6b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 74: 4d 85 ff                      testq   %r15, %r15
    // 77: 75 ca                         jne     0x43 <__JIT_ENTRY+0x43>
    // 79: 5d                            popq    %rbp
    // 7a: e9 00 00 00 00                jmp     0x7f <__JIT_ENTRY+0x7f>
    // 000000000000007b:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[127] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x5d, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x49, 0x8b, 0x74,
        0x24, 0x18, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x83, 0x44, 0x24, 0x40,
        0xf8, 0x49, 0x89, 0xc7, 0x8b, 0x03, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x03, 0x74, 0x2d,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x85,
        0xff, 0x74, 0x36, 0x8b, 0x73, 0x5c, 0x4c, 0x89,
        0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x89, 0x7d, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xff, 0x75,
        0xca, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyFunction_SetVersion+0x0
    // 10: &PyFunction_New+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyFunction_SetVersion);
    patch_64(data + 0x10, (uintptr_t)&PyFunction_New);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + 0x4);
    patch_32r(code + 0x59, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x62, (uintptr_t)data + -0x4);
    patch_32r(code + 0x7b, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__MAKE_WARM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAKE_WARM.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_EXECUTOR@GOTPCREL
    // b: c6 40 23 01                   movb    $0x1, 0x23(%rax)
    // f: 49 8b 46 10                   movq    0x10(%r14), %rax
    // 13: 48 ff 88 50 67 03 00          decq    0x36750(%rax)
    // 1a: 74 06                         je      0x22 <__JIT_ENTRY+0x22>
    // 1c: 5d                            popq    %rbp
    // 1d: e9 00 00 00 00                jmp     0x22 <__JIT_ENTRY+0x22>
    // 000000000000001e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 22: f0                            lock
    // 23: 49 81 4e 18 80 00 00 00       orq     $0x80, 0x18(%r14)
    // 2b: 5d                            popq    %rbp
    // 2c: e9 00 00 00 00                jmp     0x31 <__JIT_ENTRY+0x31>
    // 000000000000002d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[44] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xc6, 0x40, 0x23, 0x01, 0x49,
        0x8b, 0x46, 0x10, 0x48, 0xff, 0x88, 0x50, 0x67,
        0x03, 0x00, 0x74, 0x06, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0xf0, 0x49, 0x81, 0x4e, 0x18, 0x80,
        0x00, 0x00, 0x00, 0x5d,
    };
    // 0: EXECUTOR
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_32r(code + 0x1e, (uintptr_t)code + sizeof(code_body) + -0x4);
}

void
emit__MAP_ADD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAP_ADD.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: 49 8b 75 f0                   movq    -0x10(%r13), %rsi
    // f: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // 13: 48 c7 c1 fe ff ff ff          movq    $-0x2, %rcx
    // 1a: 48 29 c1                      subq    %rax, %rcx
    // 1d: 49 8b 7c cd 00                movq    (%r13,%rcx,8), %rdi
    // 22: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 27: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2d <__JIT_ENTRY+0x2d>
    // 0000000000000029:  X86_64_RELOC_GOT     __PyDict_SetItem_Take2@GOTPCREL
    // 2d: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 32: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3b: 49 83 c5 f0                   addq    $-0x10, %r13
    // 3f: 85 c0                         testl   %eax, %eax
    // 41: 74 06                         je      0x49 <__JIT_ENTRY+0x49>
    // 43: 5d                            popq    %rbp
    // 44: e9 00 00 00 00                jmp     0x49 <__JIT_ENTRY+0x49>
    // 0000000000000045:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 49: 5d                            popq    %rbp
    // 4a: e9 00 00 00 00                jmp     0x4f <__JIT_ENTRY+0x4f>
    // 000000000000004b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[74] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x75, 0xf0, 0x49,
        0x8b, 0x55, 0xf8, 0x48, 0xc7, 0xc1, 0xfe, 0xff,
        0xff, 0xff, 0x48, 0x29, 0xc1, 0x49, 0x8b, 0x7c,
        0xcd, 0x00, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x83, 0xc5, 0xf0, 0x85,
        0xc0, 0x74, 0x06, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x5d,
    };
    // 0: &_PyDict_SetItem_Take2+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyDict_SetItem_Take2);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + -0x4);
    patch_32r(code + 0x45, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__MATCH_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MATCH_CLASS.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 f7                      movq    %r14, %rdi
    // b: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // f: 4d 8b 75 e8                   movq    -0x18(%r13), %r14
    // 13: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 17: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 1c: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x23 <__JIT_ENTRY+0x23>
    // 000000000000001f:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 23: 48 89 7d f8                   movq    %rdi, -0x8(%rbp)
    // 27: 4c 89 f6                      movq    %r14, %rsi
    // 2a: 48 89 da                      movq    %rbx, %rdx
    // 2d: 4d 89 f8                      movq    %r15, %r8
    // 30: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x36 <__JIT_ENTRY+0x36>
    // 0000000000000032:  X86_64_RELOC_GOT     __PyEval_MatchClass@GOTPCREL
    // 36: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 44: 41 8b 0e                      movl    (%r14), %ecx
    // 47: 85 c9                         testl   %ecx, %ecx
    // 49: 78 16                         js      0x61 <__JIT_ENTRY+0x61>
    // 4b: ff c9                         decl    %ecx
    // 4d: 41 89 0e                      movl    %ecx, (%r14)
    // 50: 75 0f                         jne     0x61 <__JIT_ENTRY+0x61>
    // 52: 4c 89 f7                      movq    %r14, %rdi
    // 55: 49 89 c6                      movq    %rax, %r14
    // 58: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5e <__JIT_ENTRY+0x5e>
    // 000000000000005a:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 5e: 4c 89 f0                      movq    %r14, %rax
    // 61: 8b 0b                         movl    (%rbx), %ecx
    // 63: 85 c9                         testl   %ecx, %ecx
    // 65: 78 15                         js      0x7c <__JIT_ENTRY+0x7c>
    // 67: ff c9                         decl    %ecx
    // 69: 89 0b                         movl    %ecx, (%rbx)
    // 6b: 75 0f                         jne     0x7c <__JIT_ENTRY+0x7c>
    // 6d: 48 89 df                      movq    %rbx, %rdi
    // 70: 48 89 c3                      movq    %rax, %rbx
    // 73: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x79 <__JIT_ENTRY+0x79>
    // 0000000000000075:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 79: 48 89 d8                      movq    %rbx, %rax
    // 7c: 41 8b 0f                      movl    (%r15), %ecx
    // 7f: 85 c9                         testl   %ecx, %ecx
    // 81: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 85: 78 07                         js      0x8e <__JIT_ENTRY+0x8e>
    // 87: ff c9                         decl    %ecx
    // 89: 41 89 0f                      movl    %ecx, (%r15)
    // 8c: 74 17                         je      0xa5 <__JIT_ENTRY+0xa5>
    // 8e: 48 85 c0                      testq   %rax, %rax
    // 91: 74 26                         je      0xb9 <__JIT_ENTRY+0xb9>
    // 93: 49 89 45 e8                   movq    %rax, -0x18(%r13)
    // 97: 49 83 c5 f0                   addq    $-0x10, %r13
    // 9b: 48 83 c4 10                   addq    $0x10, %rsp
    // 9f: 5d                            popq    %rbp
    // a0: e9 00 00 00 00                jmp     0xa5 <__JIT_ENTRY+0xa5>
    // 00000000000000a1:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // a5: 4c 89 ff                      movq    %r15, %rdi
    // a8: 48 89 c3                      movq    %rax, %rbx
    // ab: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xb1 <__JIT_ENTRY+0xb1>
    // 00000000000000ad:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // b1: 48 89 d8                      movq    %rbx, %rax
    // b4: 48 85 c0                      testq   %rax, %rax
    // b7: 75 da                         jne     0x93 <__JIT_ENTRY+0x93>
    // b9: 49 8b 4e 70                   movq    0x70(%r14), %rcx
    // bd: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xc4 <__JIT_ENTRY+0xc4>
    // 00000000000000c0:  X86_64_RELOC_GOT_LOAD        __Py_NoneStruct@GOTPCREL
    // c4: 48 85 c9                      testq   %rcx, %rcx
    // c7: 74 ca                         je      0x93 <__JIT_ENTRY+0x93>
    // c9: 48 83 79 08 00                cmpq    $0x0, 0x8(%rcx)
    // ce: 74 c3                         je      0x93 <__JIT_ENTRY+0x93>
    // d0: 49 83 c5 e8                   addq    $-0x18, %r13
    // d4: 48 83 c4 10                   addq    $0x10, %rsp
    // d8: 5d                            popq    %rbp
    // d9: e9 00 00 00 00                jmp     0xde <__JIT_ENTRY+0xde>
    // 00000000000000da:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[222] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0xf7, 0x4d, 0x8b, 0x7d, 0xf8, 0x4d,
        0x8b, 0x75, 0xe8, 0x49, 0x8b, 0x5d, 0xf0, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0x7d, 0xf8, 0x4c,
        0x89, 0xf6, 0x48, 0x89, 0xda, 0x4d, 0x89, 0xf8,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x0e, 0x85,
        0xc9, 0x78, 0x16, 0xff, 0xc9, 0x41, 0x89, 0x0e,
        0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x49, 0x89, 0xc6,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xf0, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x15, 0xff,
        0xc9, 0x89, 0x0b, 0x75, 0x0f, 0x48, 0x89, 0xdf,
        0x48, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xd8, 0x41, 0x8b, 0x0f, 0x85,
        0xc9, 0x4c, 0x8b, 0x75, 0xf8, 0x78, 0x07, 0xff,
        0xc9, 0x41, 0x89, 0x0f, 0x74, 0x17, 0x48, 0x85,
        0xc0, 0x74, 0x26, 0x49, 0x89, 0x45, 0xe8, 0x49,
        0x83, 0xc5, 0xf0, 0x48, 0x83, 0xc4, 0x10, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff,
        0x48, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xd8, 0x48, 0x85, 0xc0, 0x75,
        0xda, 0x49, 0x8b, 0x4e, 0x70, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc9, 0x74,
        0xca, 0x48, 0x83, 0x79, 0x08, 0x00, 0x74, 0xc3,
        0x49, 0x83, 0xc5, 0xe8, 0x48, 0x83, 0xc4, 0x10,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: &_PyEval_MatchClass+0x0
    // 18: OPARG
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)&_PyEval_MatchClass);
    patch_64(data + 0x18, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x75, (uintptr_t)data + 0x4);
    patch_32r(code + 0xa1, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xad, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xc0, (uintptr_t)data + -0x4);
    patch_32r(code + 0xda, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__MATCH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MATCH_KEYS.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 75 f0                   movq    -0x10(%r13), %rsi
    // 8: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 4c 89 f7                      movq    %r14, %rdi
    // 14: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x1a <__JIT_ENTRY+0x1a>
    // 0000000000000016:  X86_64_RELOC_GOT     __PyEval_MatchKeys@GOTPCREL
    // 1a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 1f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 28: 48 85 c0                      testq   %rax, %rax
    // 2b: 74 0e                         je      0x3b <__JIT_ENTRY+0x3b>
    // 2d: 49 89 45 00                   movq    %rax, (%r13)
    // 31: 49 83 c5 08                   addq    $0x8, %r13
    // 35: 5d                            popq    %rbp
    // 36: e9 00 00 00 00                jmp     0x3b <__JIT_ENTRY+0x3b>
    // 0000000000000037:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3b: 5d                            popq    %rbp
    // 3c: e9 00 00 00 00                jmp     0x41 <__JIT_ENTRY+0x41>
    // 000000000000003d:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[65] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x75, 0xf0,
        0x49, 0x8b, 0x55, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x0e, 0x49, 0x89, 0x45,
        0x00, 0x49, 0x83, 0xc5, 0x08, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &_PyEval_MatchKeys+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_MatchKeys);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + -0x4);
    patch_32r(code + 0x37, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x3d, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__MATCH_MAPPING(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MATCH_MAPPING.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 40 08                   movq    0x8(%rax), %rax
    // c: f6 80 a8 00 00 00 40          testb   $0x40, 0xa8(%rax)
    // 13: 75 15                         jne     0x2a <__JIT_ENTRY+0x2a>
    // 15: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x1c <__JIT_ENTRY+0x1c>
    // 0000000000000018:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // 1c: 49 89 45 00                   movq    %rax, (%r13)
    // 20: 49 83 c5 08                   addq    $0x8, %r13
    // 24: 5d                            popq    %rbp
    // 25: e9 00 00 00 00                jmp     0x2a <__JIT_ENTRY+0x2a>
    // 0000000000000026:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 2a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x31 <__JIT_ENTRY+0x31>
    // 000000000000002d:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // 31: 49 89 45 00                   movq    %rax, (%r13)
    // 35: 49 83 c5 08                   addq    $0x8, %r13
    // 39: 5d                            popq    %rbp
    // 3a: e9 00 00 00 00                jmp     0x3f <__JIT_ENTRY+0x3f>
    // 000000000000003b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[58] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x40, 0x08, 0xf6, 0x80, 0xa8, 0x00,
        0x00, 0x00, 0x40, 0x75, 0x15, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0x00,
        0x49, 0x83, 0xc5, 0x08, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5,
        0x08, 0x5d,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + 0x4);
    patch_32r(code + 0x26, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)data + -0x4);
}

void
emit__MATCH_SEQUENCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MATCH_SEQUENCE.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 40 08                   movq    0x8(%rax), %rax
    // c: f6 80 a8 00 00 00 20          testb   $0x20, 0xa8(%rax)
    // 13: 75 15                         jne     0x2a <__JIT_ENTRY+0x2a>
    // 15: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x1c <__JIT_ENTRY+0x1c>
    // 0000000000000018:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // 1c: 49 89 45 00                   movq    %rax, (%r13)
    // 20: 49 83 c5 08                   addq    $0x8, %r13
    // 24: 5d                            popq    %rbp
    // 25: e9 00 00 00 00                jmp     0x2a <__JIT_ENTRY+0x2a>
    // 0000000000000026:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 2a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x31 <__JIT_ENTRY+0x31>
    // 000000000000002d:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // 31: 49 89 45 00                   movq    %rax, (%r13)
    // 35: 49 83 c5 08                   addq    $0x8, %r13
    // 39: 5d                            popq    %rbp
    // 3a: e9 00 00 00 00                jmp     0x3f <__JIT_ENTRY+0x3f>
    // 000000000000003b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[58] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x40, 0x08, 0xf6, 0x80, 0xa8, 0x00,
        0x00, 0x00, 0x20, 0x75, 0x15, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0x00,
        0x49, 0x83, 0xc5, 0x08, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5,
        0x08, 0x5d,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + 0x4);
    patch_32r(code + 0x26, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)data + -0x4);
}

void
emit__MAYBE_EXPAND_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAYBE_EXPAND_METHOD.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            ## 0x7 <__JIT_ENTRY+0x7>
    // 0000000000000003:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 7: b8 fe ff ff ff                movl    $0xfffffffe, %eax       ## imm = 0xFFFFFFFE
    // c: 29 d0                         subl    %edx, %eax
    // e: 48 98                         cltq
    // 10: 49 8b 4c c5 00                movq    (%r13,%rax,8), %rcx
    // 15: 48 8b 71 08                   movq    0x8(%rcx), %rsi
    // 19: 48 3b 35 00 00 00 00          cmpq    (%rip), %rsi            ## 0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_GOT     _PyMethod_Type@GOTPCREL
    // 20: 0f 85 00 00 00 00             jne     0x26 <__JIT_ENTRY+0x26>
    // 0000000000000022:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 26: f7 d2                         notl    %edx
    // 28: 48 63 d2                      movslq  %edx, %rdx
    // 2b: 49 83 7c d5 00 00             cmpq    $0x0, (%r13,%rdx,8)
    // 31: 0f 85 00 00 00 00             jne     0x37 <__JIT_ENTRY+0x37>
    // 0000000000000033:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 37: 48 8b 71 18                   movq    0x18(%rcx), %rsi
    // 3b: 8b 3e                         movl    (%rsi), %edi
    // 3d: 85 ff                         testl   %edi, %edi
    // 3f: 78 04                         js      0x45 <__JIT_ENTRY+0x45>
    // 41: ff c7                         incl    %edi
    // 43: 89 3e                         movl    %edi, (%rsi)
    // 45: 49 89 74 d5 00                movq    %rsi, (%r13,%rdx,8)
    // 4a: 48 8b 49 10                   movq    0x10(%rcx), %rcx
    // 4e: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
    // 53: 8b 11                         movl    (%rcx), %edx
    // 55: 85 d2                         testl   %edx, %edx
    // 57: 78 04                         js      0x5d <__JIT_ENTRY+0x5d>
    // 59: ff c2                         incl    %edx
    // 5b: 89 11                         movl    %edx, (%rcx)
    // 5d: 49 89 4c c5 00                movq    %rcx, (%r13,%rax,8)
    // 62: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 67: 8b 07                         movl    (%rdi), %eax
    // 69: 85 c0                         testl   %eax, %eax
    // 6b: 78 06                         js      0x73 <__JIT_ENTRY+0x73>
    // 6d: ff c8                         decl    %eax
    // 6f: 89 07                         movl    %eax, (%rdi)
    // 71: 74 13                         je      0x86 <__JIT_ENTRY+0x86>
    // 73: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 78: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 81: e9 00 00 00 00                jmp     0x86 <__JIT_ENTRY+0x86>
    // 0000000000000082:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 86: 55                            pushq   %rbp
    // 87: 48 89 e5                      movq    %rsp, %rbp
    // 8a: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x90 <__JIT_ENTRY+0x90>
    // 000000000000008c:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 90: 5d                            popq    %rbp
    // 91: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 96: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 9f: e9 00 00 00 00                jmp     0xa4 <__JIT_ENTRY+0xa4>
    // 00000000000000a0:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[159] = {
        0x0f, 0xb7, 0x15, 0x00, 0x00, 0x00, 0x00, 0xb8,
        0xfe, 0xff, 0xff, 0xff, 0x29, 0xd0, 0x48, 0x98,
        0x49, 0x8b, 0x4c, 0xc5, 0x00, 0x48, 0x8b, 0x71,
        0x08, 0x48, 0x3b, 0x35, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x85, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd2,
        0x48, 0x63, 0xd2, 0x49, 0x83, 0x7c, 0xd5, 0x00,
        0x00, 0x0f, 0x85, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x71, 0x18, 0x8b, 0x3e, 0x85, 0xff, 0x78,
        0x04, 0xff, 0xc7, 0x89, 0x3e, 0x49, 0x89, 0x74,
        0xd5, 0x00, 0x48, 0x8b, 0x49, 0x10, 0x49, 0x8b,
        0x7c, 0xc5, 0x00, 0x8b, 0x11, 0x85, 0xd2, 0x78,
        0x04, 0xff, 0xc2, 0x89, 0x11, 0x49, 0x89, 0x4c,
        0xc5, 0x00, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89,
        0x07, 0x74, 0x13, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x55, 0x48,
        0x89, 0xe5, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x5d, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyMethod_Type+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0x4);
    patch_32r(code + 0x22, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x33, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x82, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x8c, (uintptr_t)data + -0x4);
}

void
emit__MAYBE_EXPAND_METHOD_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _MAYBE_EXPAND_METHOD_KW.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // f: b8 fd ff ff ff                movl    $0xfffffffd, %eax       ## imm = 0xFFFFFFFD
    // 14: 29 d0                         subl    %edx, %eax
    // 16: 48 98                         cltq
    // 18: 49 8b 4c c5 00                movq    (%r13,%rax,8), %rcx
    // 1d: 48 8b 71 08                   movq    0x8(%rcx), %rsi
    // 21: 48 3b 35 00 00 00 00          cmpq    (%rip), %rsi            ## 0x28 <__JIT_ENTRY+0x28>
    // 0000000000000024:  X86_64_RELOC_GOT     _PyMethod_Type@GOTPCREL
    // 28: 74 0a                         je      0x34 <__JIT_ENTRY+0x34>
    // 2a: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 2e: 5d                            popq    %rbp
    // 2f: e9 00 00 00 00                jmp     0x34 <__JIT_ENTRY+0x34>
    // 0000000000000030:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 34: be fe ff ff ff                movl    $0xfffffffe, %esi       ## imm = 0xFFFFFFFE
    // 39: 29 d6                         subl    %edx, %esi
    // 3b: 48 63 d6                      movslq  %esi, %rdx
    // 3e: 49 83 7c d5 00 00             cmpq    $0x0, (%r13,%rdx,8)
    // 44: 75 e4                         jne     0x2a <__JIT_ENTRY+0x2a>
    // 46: 48 8b 71 18                   movq    0x18(%rcx), %rsi
    // 4a: 44 8b 06                      movl    (%rsi), %r8d
    // 4d: 48 89 cf                      movq    %rcx, %rdi
    // 50: 45 85 c0                      testl   %r8d, %r8d
    // 53: 78 0b                         js      0x60 <__JIT_ENTRY+0x60>
    // 55: 41 ff c0                      incl    %r8d
    // 58: 44 89 06                      movl    %r8d, (%rsi)
    // 5b: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
    // 60: 49 89 74 d5 00                movq    %rsi, (%r13,%rdx,8)
    // 65: 48 8b 49 10                   movq    0x10(%rcx), %rcx
    // 69: 8b 11                         movl    (%rcx), %edx
    // 6b: 85 d2                         testl   %edx, %edx
    // 6d: 78 04                         js      0x73 <__JIT_ENTRY+0x73>
    // 6f: ff c2                         incl    %edx
    // 71: 89 11                         movl    %edx, (%rcx)
    // 73: 49 89 4c c5 00                movq    %rcx, (%r13,%rax,8)
    // 78: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 7d: 8b 07                         movl    (%rdi), %eax
    // 7f: 85 c0                         testl   %eax, %eax
    // 81: 78 0c                         js      0x8f <__JIT_ENTRY+0x8f>
    // 83: ff c8                         decl    %eax
    // 85: 89 07                         movl    %eax, (%rdi)
    // 87: 75 06                         jne     0x8f <__JIT_ENTRY+0x8f>
    // 89: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x8f <__JIT_ENTRY+0x8f>
    // 000000000000008b:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 8f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 94: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 9d: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // a1: 5d                            popq    %rbp
    // a2: e9 00 00 00 00                jmp     0xa7 <__JIT_ENTRY+0xa7>
    // 00000000000000a3:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[162] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x5d, 0xf8, 0xb8,
        0xfd, 0xff, 0xff, 0xff, 0x29, 0xd0, 0x48, 0x98,
        0x49, 0x8b, 0x4c, 0xc5, 0x00, 0x48, 0x8b, 0x71,
        0x08, 0x48, 0x3b, 0x35, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x0a, 0x49, 0x89, 0x5d, 0xf8, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0xff, 0xff,
        0xff, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x49, 0x83,
        0x7c, 0xd5, 0x00, 0x00, 0x75, 0xe4, 0x48, 0x8b,
        0x71, 0x18, 0x44, 0x8b, 0x06, 0x48, 0x89, 0xcf,
        0x45, 0x85, 0xc0, 0x78, 0x0b, 0x41, 0xff, 0xc0,
        0x44, 0x89, 0x06, 0x49, 0x8b, 0x7c, 0xc5, 0x00,
        0x49, 0x89, 0x74, 0xd5, 0x00, 0x48, 0x8b, 0x49,
        0x10, 0x8b, 0x11, 0x85, 0xd2, 0x78, 0x04, 0xff,
        0xc2, 0x89, 0x11, 0x49, 0x89, 0x4c, 0xc5, 0x00,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x0c, 0xff, 0xc8, 0x89, 0x07, 0x75,
        0x06, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x5d,
        0xf8, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyMethod_Type+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0x4);
    patch_32r(code + 0x30, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x8b, (uintptr_t)data + -0x4);
}

void
emit__NOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _NOP.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 5d                            popq    %rbp
    // 5: e9 00 00 00 00                jmp     0xa <__JIT_ENTRY+0xa>
    // 0000000000000006:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[5] = {
        0x55, 0x48, 0x89, 0xe5, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__POP_EXCEPT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _POP_EXCEPT.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 49 8b 4e 78                   movq    0x78(%r14), %rcx
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 48 8b 39                      movq    (%rcx), %rdi
    // 10: 31 d2                         xorl    %edx, %edx
    // 12: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x19 <__JIT_ENTRY+0x19>
    // 0000000000000015:  X86_64_RELOC_GOT     __Py_NoneStruct@GOTPCREL
    // 19: 48 0f 45 d0                   cmovneq %rax, %rdx
    // 1d: 48 89 11                      movq    %rdx, (%rcx)
    // 20: 48 85 ff                      testq   %rdi, %rdi
    // 23: 74 0c                         je      0x31 <__JIT_ENTRY+0x31>
    // 25: 8b 07                         movl    (%rdi), %eax
    // 27: 85 c0                         testl   %eax, %eax
    // 29: 78 06                         js      0x31 <__JIT_ENTRY+0x31>
    // 2b: ff c8                         decl    %eax
    // 2d: 89 07                         movl    %eax, (%rdi)
    // 2f: 74 17                         je      0x48 <__JIT_ENTRY+0x48>
    // 31: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 36: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3f: 49 83 c5 f8                   addq    $-0x8, %r13
    // 43: e9 00 00 00 00                jmp     0x48 <__JIT_ENTRY+0x48>
    // 0000000000000044:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 48: 55                            pushq   %rbp
    // 49: 48 89 e5                      movq    %rsp, %rbp
    // 4c: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x52 <__JIT_ENTRY+0x52>
    // 000000000000004e:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 52: 5d                            popq    %rbp
    // 53: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 58: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 61: 49 83 c5 f8                   addq    $-0x8, %r13
    // 65: e9 00 00 00 00                jmp     0x6a <__JIT_ENTRY+0x6a>
    // 0000000000000066:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[101] = {
        0x49, 0x8b, 0x45, 0xf8, 0x49, 0x8b, 0x4e, 0x78,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b, 0x39,
        0x31, 0xd2, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x0f, 0x45, 0xd0, 0x48, 0x89, 0x11,
        0x48, 0x85, 0xff, 0x74, 0x0c, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74,
        0x17, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x83, 0xc5, 0xf8, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x55, 0x48, 0x89, 0xe5, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x5d, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x83, 0xc5, 0xf8,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_Py_NoneStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + 0x4);
    patch_32r(code + 0x44, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)data + -0x4);
}

void
emit__POP_TOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _POP_TOP.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 4: 49 83 c5 f8                   addq    $-0x8, %r13
    // 8: 8b 07                         movl    (%rdi), %eax
    // a: 85 c0                         testl   %eax, %eax
    // c: 0f 88 00 00 00 00             js      0x12 <__JIT_ENTRY+0x12>
    // 000000000000000e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 12: ff c8                         decl    %eax
    // 14: 89 07                         movl    %eax, (%rdi)
    // 16: 0f 85 00 00 00 00             jne     0x1c <__JIT_ENTRY+0x1c>
    // 0000000000000018:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 1c: 55                            pushq   %rbp
    // 1d: 48 89 e5                      movq    %rsp, %rbp
    // 20: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x26 <__JIT_ENTRY+0x26>
    // 0000000000000022:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 26: 5d                            popq    %rbp
    // 27: e9 00 00 00 00                jmp     0x2c <__JIT_ENTRY+0x2c>
    // 0000000000000028:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[39] = {
        0x49, 0x8b, 0x7d, 0xf8, 0x49, 0x83, 0xc5, 0xf8,
        0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x00, 0x00,
        0x00, 0x00, 0xff, 0xc8, 0x89, 0x07, 0x0f, 0x85,
        0x00, 0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0xe, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x18, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x22, (uintptr_t)data + -0x4);
}

void
emit__POP_TOP_LOAD_CONST_INLINE_BORROW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _POP_TOP_LOAD_CONST_INLINE_BORROW.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 8b 07                         movl    (%rdi), %eax
    // 13: 85 c0                         testl   %eax, %eax
    // 15: 78 0c                         js      0x23 <__JIT_ENTRY+0x23>
    // 17: ff c8                         decl    %eax
    // 19: 89 07                         movl    %eax, (%rdi)
    // 1b: 75 06                         jne     0x23 <__JIT_ENTRY+0x23>
    // 1d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x23 <__JIT_ENTRY+0x23>
    // 000000000000001f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 23: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 28: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 31: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x38 <__JIT_ENTRY+0x38>
    // 0000000000000034:  X86_64_RELOC_GOT_LOAD        __JIT_OPERAND0@GOTPCREL
    // 38: 49 89 45 00                   movq    %rax, (%r13)
    // 3c: 49 83 c5 08                   addq    $0x8, %r13
    // 40: 5d                            popq    %rbp
    // 41: e9 00 00 00 00                jmp     0x46 <__JIT_ENTRY+0x46>
    // 0000000000000042:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[65] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x7d, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0c, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0x06, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x5d,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + -0x4);
}

void
emit__PUSH_EXC_INFO(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PUSH_EXC_INFO.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 49 8b 4e 78                   movq    0x78(%r14), %rcx
    // c: 48 8b 11                      movq    (%rcx), %rdx
    // f: 8b 30                         movl    (%rax), %esi
    // 11: 85 f6                         testl   %esi, %esi
    // 13: 78 04                         js      0x19 <__JIT_ENTRY+0x19>
    // 15: ff c6                         incl    %esi
    // 17: 89 30                         movl    %esi, (%rax)
    // 19: 48 85 d2                      testq   %rdx, %rdx
    // 1c: 75 07                         jne     0x25 <__JIT_ENTRY+0x25>
    // 1e: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            ## 0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_GOT_LOAD        __Py_NoneStruct@GOTPCREL
    // 25: 48 89 01                      movq    %rax, (%rcx)
    // 28: 49 89 55 f8                   movq    %rdx, -0x8(%r13)
    // 2c: 49 89 45 00                   movq    %rax, (%r13)
    // 30: 49 83 c5 08                   addq    $0x8, %r13
    // 34: 5d                            popq    %rbp
    // 35: e9 00 00 00 00                jmp     0x3a <__JIT_ENTRY+0x3a>
    // 0000000000000036:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[53] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x49, 0x8b, 0x4e, 0x78, 0x48, 0x8b, 0x11, 0x8b,
        0x30, 0x85, 0xf6, 0x78, 0x04, 0xff, 0xc6, 0x89,
        0x30, 0x48, 0x85, 0xd2, 0x75, 0x07, 0x48, 0x8b,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x01,
        0x49, 0x89, 0x55, 0xf8, 0x49, 0x89, 0x45, 0x00,
        0x49, 0x83, 0xc5, 0x08, 0x5d,
    };
    // 0: &_Py_NoneStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + -0x4);
}

void
emit__PUSH_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PUSH_FRAME.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 49 89 46 48                   movq    %rax, 0x48(%r14)
    // 15: 41 ff 4e 2c                   decl    0x2c(%r14)
    // 19: 4c 8b 68 40                   movq    0x40(%rax), %r13
    // 1d: 48 c7 40 40 00 00 00 00       movq    $0x0, 0x40(%rax)
    // 25: 49 89 c4                      movq    %rax, %r12
    // 28: 5d                            popq    %rbp
    // 29: e9 00 00 00 00                jmp     0x2e <__JIT_ENTRY+0x2e>
    // 000000000000002a:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[41] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x49, 0x89, 0x46, 0x48, 0x41, 0xff, 0x4e,
        0x2c, 0x4c, 0x8b, 0x68, 0x40, 0x48, 0xc7, 0x40,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4,
        0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__PUSH_NULL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PUSH_NULL.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
    // c: 49 83 c5 08                   addq    $0x8, %r13
    // 10: 5d                            popq    %rbp
    // 11: e9 00 00 00 00                jmp     0x16 <__JIT_ENTRY+0x16>
    // 0000000000000012:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[17] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0xc7, 0x45, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__PUSH_NULL_CONDITIONAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PUSH_NULL_CONDITIONAL.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // b: 66 83 e0 01                   andw    $0x1, %ax
    // f: 74 08                         je      0x19 <__JIT_ENTRY+0x19>
    // 11: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
    // 19: 0f b7 c0                      movzwl  %ax, %eax
    // 1c: 4d 8d 6c c5 00                leaq    (%r13,%rax,8), %r13
    // 21: 5d                            popq    %rbp
    // 22: e9 00 00 00 00                jmp     0x27 <__JIT_ENTRY+0x27>
    // 0000000000000023:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[34] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x66, 0x83, 0xe0, 0x01, 0x74,
        0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8d, 0x6c, 0xc5,
        0x00, 0x5d,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
}

void
emit__PY_FRAME_GENERAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PY_FRAME_GENERAL.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 e8                      movq    %r13, %rax
    // b: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x12 <__JIT_ENTRY+0x12>
    // 000000000000000e:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 12: 8d 14 cd 00 00 00 00          leal    (,%rcx,8), %edx
    // 19: 4c 89 ef                      movq    %r13, %rdi
    // 1c: 48 29 d7                      subq    %rdx, %rdi
    // 1f: 89 ca                         movl    %ecx, %edx
    // 21: f7 d2                         notl    %edx
    // 23: 48 63 d2                      movslq  %edx, %rdx
    // 26: be fe ff ff ff                movl    $0xfffffffe, %esi       ## imm = 0xFFFFFFFE
    // 2b: 29 ce                         subl    %ecx, %esi
    // 2d: 4c 63 ee                      movslq  %esi, %r13
    // 30: 45 31 c0                      xorl    %r8d, %r8d
    // 33: 31 f6                         xorl    %esi, %esi
    // 35: 48 83 3c d0 00                cmpq    $0x0, (%rax,%rdx,8)
    // 3a: 4a 8b 14 e8                   movq    (%rax,%r13,8), %rdx
    // 3e: 41 0f 94 c0                   sete    %r8b
    // 42: 40 0f 95 c6                   setne   %sil
    // 46: 01 ce                         addl    %ecx, %esi
    // 48: 4a 8d 0c c7                   leaq    (%rdi,%r8,8), %rcx
    // 4c: 48 83 c1 f8                   addq    $-0x8, %rcx
    // 50: 48 8b 7a 30                   movq    0x30(%rdx), %rdi
    // 54: f6 47 30 01                   testb   $0x1, 0x30(%rdi)
    // 58: 75 10                         jne     0x6a <__JIT_ENTRY+0x6a>
    // 5a: 48 8b 52 10                   movq    0x10(%rdx), %rdx
    // 5e: 8b 3a                         movl    (%rdx), %edi
    // 60: 85 ff                         testl   %edi, %edi
    // 62: 78 08                         js      0x6c <__JIT_ENTRY+0x6c>
    // 64: ff c7                         incl    %edi
    // 66: 89 3a                         movl    %edi, (%rdx)
    // 68: eb 02                         jmp     0x6c <__JIT_ENTRY+0x6c>
    // 6a: 31 d2                         xorl    %edx, %edx
    // 6c: 49 89 44 24 40                movq    %rax, 0x40(%r12)
    // 71: 41 89 f0                      movl    %esi, %r8d
    // 74: 4a 8b 34 e8                   movq    (%rax,%r13,8), %rsi
    // 78: 49 c1 e5 03                   shlq    $0x3, %r13
    // 7c: 4c 89 24 24                   movq    %r12, (%rsp)
    // 80: 4c 89 f7                      movq    %r14, %rdi
    // 83: 45 31 c9                      xorl    %r9d, %r9d
    // 86: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x8c <__JIT_ENTRY+0x8c>
    // 0000000000000088:  X86_64_RELOC_GOT     __PyEvalFramePushAndInit@GOTPCREL
    // 8c: 4d 03 6c 24 40                addq    0x40(%r12), %r13
    // 91: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 9a: 48 85 c0                      testq   %rax, %rax
    // 9d: 74 12                         je      0xb1 <__JIT_ENTRY+0xb1>
    // 9f: 49 89 45 00                   movq    %rax, (%r13)
    // a3: 49 83 c5 08                   addq    $0x8, %r13
    // a7: 48 83 c4 10                   addq    $0x10, %rsp
    // ab: 5d                            popq    %rbp
    // ac: e9 00 00 00 00                jmp     0xb1 <__JIT_ENTRY+0xb1>
    // 00000000000000ad:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // b1: 48 83 c4 10                   addq    $0x10, %rsp
    // b5: 5d                            popq    %rbp
    // b6: e9 00 00 00 00                jmp     0xbb <__JIT_ENTRY+0xbb>
    // 00000000000000b7:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[187] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0xe8, 0x0f, 0xb7, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x89, 0xef, 0x48, 0x29, 0xd7, 0x89,
        0xca, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0xbe, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xce, 0x4c, 0x63, 0xee,
        0x45, 0x31, 0xc0, 0x31, 0xf6, 0x48, 0x83, 0x3c,
        0xd0, 0x00, 0x4a, 0x8b, 0x14, 0xe8, 0x41, 0x0f,
        0x94, 0xc0, 0x40, 0x0f, 0x95, 0xc6, 0x01, 0xce,
        0x4a, 0x8d, 0x0c, 0xc7, 0x48, 0x83, 0xc1, 0xf8,
        0x48, 0x8b, 0x7a, 0x30, 0xf6, 0x47, 0x30, 0x01,
        0x75, 0x10, 0x48, 0x8b, 0x52, 0x10, 0x8b, 0x3a,
        0x85, 0xff, 0x78, 0x08, 0xff, 0xc7, 0x89, 0x3a,
        0xeb, 0x02, 0x31, 0xd2, 0x49, 0x89, 0x44, 0x24,
        0x40, 0x41, 0x89, 0xf0, 0x4a, 0x8b, 0x34, 0xe8,
        0x49, 0xc1, 0xe5, 0x03, 0x4c, 0x89, 0x24, 0x24,
        0x4c, 0x89, 0xf7, 0x45, 0x31, 0xc9, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x03, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x12, 0x49,
        0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x48,
        0x83, 0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_PyEvalFramePushAndInit+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEvalFramePushAndInit);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xe, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x88, (uintptr_t)data + -0x4);
    patch_32r(code + 0xad, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0xb7, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__PY_FRAME_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _PY_FRAME_KW.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 e8                      movq    %r13, %rax
    // b: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x12 <__JIT_ENTRY+0x12>
    // 000000000000000e:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 12: ba fe ff ff ff                movl    $0xfffffffe, %edx       ## imm = 0xFFFFFFFE
    // 17: 29 ca                         subl    %ecx, %edx
    // 19: 4c 63 ea                      movslq  %edx, %r13
    // 1c: ba fd ff ff ff                movl    $0xfffffffd, %edx       ## imm = 0xFFFFFFFD
    // 21: 29 ca                         subl    %ecx, %edx
    // 23: 31 f6                         xorl    %esi, %esi
    // 25: 45 31 c0                      xorl    %r8d, %r8d
    // 28: 4a 83 3c e8 00                cmpq    $0x0, (%rax,%r13,8)
    // 2d: 48 8b 58 f8                   movq    -0x8(%rax), %rbx
    // 31: 40 0f 95 c6                   setne   %sil
    // 35: 41 0f 94 c0                   sete    %r8b
    // 39: 01 ce                         addl    %ecx, %esi
    // 3b: f7 d1                         notl    %ecx
    // 3d: 48 63 c9                      movslq  %ecx, %rcx
    // 40: 48 8d 0c c8                   leaq    (%rax,%rcx,8), %rcx
    // 44: 48 63 fa                      movslq  %edx, %rdi
    // 47: 48 8b 14 f8                   movq    (%rax,%rdi,8), %rdx
    // 4b: 4a 8d 0c c1                   leaq    (%rcx,%r8,8), %rcx
    // 4f: 48 83 c1 f8                   addq    $-0x8, %rcx
    // 53: 4c 8b 42 30                   movq    0x30(%rdx), %r8
    // 57: 2b 73 10                      subl    0x10(%rbx), %esi
    // 5a: 41 f6 40 30 01                testb   $0x1, 0x30(%r8)
    // 5f: 75 14                         jne     0x75 <__JIT_ENTRY+0x75>
    // 61: 48 8b 52 10                   movq    0x10(%rdx), %rdx
    // 65: 44 8b 02                      movl    (%rdx), %r8d
    // 68: 45 85 c0                      testl   %r8d, %r8d
    // 6b: 78 0a                         js      0x77 <__JIT_ENTRY+0x77>
    // 6d: 41 ff c0                      incl    %r8d
    // 70: 44 89 02                      movl    %r8d, (%rdx)
    // 73: eb 02                         jmp     0x77 <__JIT_ENTRY+0x77>
    // 75: 31 d2                         xorl    %edx, %edx
    // 77: 49 89 44 24 40                movq    %rax, 0x40(%r12)
    // 7c: 4c 63 c6                      movslq  %esi, %r8
    // 7f: 48 8b 34 f8                   movq    (%rax,%rdi,8), %rsi
    // 83: 4c 89 24 24                   movq    %r12, (%rsp)
    // 87: 4c 89 f7                      movq    %r14, %rdi
    // 8a: 49 89 d9                      movq    %rbx, %r9
    // 8d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x93 <__JIT_ENTRY+0x93>
    // 000000000000008f:  X86_64_RELOC_GOT     __PyEvalFramePushAndInit@GOTPCREL
    // 93: 49 83 44 24 40 f8             addq    $-0x8, 0x40(%r12)
    // 99: 8b 0b                         movl    (%rbx), %ecx
    // 9b: 85 c9                         testl   %ecx, %ecx
    // 9d: 78 15                         js      0xb4 <__JIT_ENTRY+0xb4>
    // 9f: ff c9                         decl    %ecx
    // a1: 89 0b                         movl    %ecx, (%rbx)
    // a3: 75 0f                         jne     0xb4 <__JIT_ENTRY+0xb4>
    // a5: 48 89 df                      movq    %rbx, %rdi
    // a8: 48 89 c3                      movq    %rax, %rbx
    // ab: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xb1 <__JIT_ENTRY+0xb1>
    // 00000000000000ad:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // b1: 48 89 d8                      movq    %rbx, %rax
    // b4: 49 c1 e5 03                   shlq    $0x3, %r13
    // b8: 4d 03 6c 24 40                addq    0x40(%r12), %r13
    // bd: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // c6: 48 85 c0                      testq   %rax, %rax
    // c9: 74 12                         je      0xdd <__JIT_ENTRY+0xdd>
    // cb: 49 89 45 00                   movq    %rax, (%r13)
    // cf: 49 83 c5 08                   addq    $0x8, %r13
    // d3: 48 83 c4 10                   addq    $0x10, %rsp
    // d7: 5d                            popq    %rbp
    // d8: e9 00 00 00 00                jmp     0xdd <__JIT_ENTRY+0xdd>
    // 00000000000000d9:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // dd: 48 83 c4 10                   addq    $0x10, %rsp
    // e1: 5d                            popq    %rbp
    // e2: e9 00 00 00 00                jmp     0xe7 <__JIT_ENTRY+0xe7>
    // 00000000000000e3:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[231] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0xe8, 0x0f, 0xb7, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29,
        0xca, 0x4c, 0x63, 0xea, 0xba, 0xfd, 0xff, 0xff,
        0xff, 0x29, 0xca, 0x31, 0xf6, 0x45, 0x31, 0xc0,
        0x4a, 0x83, 0x3c, 0xe8, 0x00, 0x48, 0x8b, 0x58,
        0xf8, 0x40, 0x0f, 0x95, 0xc6, 0x41, 0x0f, 0x94,
        0xc0, 0x01, 0xce, 0xf7, 0xd1, 0x48, 0x63, 0xc9,
        0x48, 0x8d, 0x0c, 0xc8, 0x48, 0x63, 0xfa, 0x48,
        0x8b, 0x14, 0xf8, 0x4a, 0x8d, 0x0c, 0xc1, 0x48,
        0x83, 0xc1, 0xf8, 0x4c, 0x8b, 0x42, 0x30, 0x2b,
        0x73, 0x10, 0x41, 0xf6, 0x40, 0x30, 0x01, 0x75,
        0x14, 0x48, 0x8b, 0x52, 0x10, 0x44, 0x8b, 0x02,
        0x45, 0x85, 0xc0, 0x78, 0x0a, 0x41, 0xff, 0xc0,
        0x44, 0x89, 0x02, 0xeb, 0x02, 0x31, 0xd2, 0x49,
        0x89, 0x44, 0x24, 0x40, 0x4c, 0x63, 0xc6, 0x48,
        0x8b, 0x34, 0xf8, 0x4c, 0x89, 0x24, 0x24, 0x4c,
        0x89, 0xf7, 0x49, 0x89, 0xd9, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x83, 0x44, 0x24, 0x40,
        0xf8, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x15, 0xff,
        0xc9, 0x89, 0x0b, 0x75, 0x0f, 0x48, 0x89, 0xdf,
        0x48, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xd8, 0x49, 0xc1, 0xe5, 0x03,
        0x4d, 0x03, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x12, 0x49, 0x89, 0x45, 0x00, 0x49,
        0x83, 0xc5, 0x08, 0x48, 0x83, 0xc4, 0x10, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4,
        0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyEvalFramePushAndInit+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyEvalFramePushAndInit);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xe, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x8f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xad, (uintptr_t)data + -0x4);
    patch_32r(code + 0xd9, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0xe3, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__REPLACE_WITH_TRUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _REPLACE_WITH_TRUE.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 8: 8b 07                         movl    (%rdi), %eax
    // a: 85 c0                         testl   %eax, %eax
    // c: 78 06                         js      0x14 <__JIT_ENTRY+0x14>
    // e: ff c8                         decl    %eax
    // 10: 89 07                         movl    %eax, (%rdi)
    // 12: 74 11                         je      0x25 <__JIT_ENTRY+0x25>
    // 14: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // 1b: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 1f: 5d                            popq    %rbp
    // 20: e9 00 00 00 00                jmp     0x25 <__JIT_ENTRY+0x25>
    // 0000000000000021:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 25: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2b <__JIT_ENTRY+0x2b>
    // 0000000000000027:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 2b: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x32 <__JIT_ENTRY+0x32>
    // 000000000000002e:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // 32: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 36: 5d                            popq    %rbp
    // 37: e9 00 00 00 00                jmp     0x3c <__JIT_ENTRY+0x3c>
    // 0000000000000038:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[55] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x7d, 0xf8,
        0x8b, 0x07, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8,
        0x89, 0x07, 0x74, 0x11, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0xf8, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0x45, 0xf8, 0x5d,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + -0x4);
    patch_32r(code + 0x21, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x27, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + -0x4);
}

void
emit__RESUME_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _RESUME_CHECK.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 46 18                   movq    0x18(%r14), %rax
    // 8: 49 8b 0c 24                   movq    (%r12), %rcx
    // c: 48 3b 81 a8 00 00 00          cmpq    0xa8(%rcx), %rax
    // 13: 75 06                         jne     0x1b <__JIT_ENTRY+0x1b>
    // 15: 5d                            popq    %rbp
    // 16: e9 00 00 00 00                jmp     0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    const unsigned char code_body[33] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x46, 0x18,
        0x49, 0x8b, 0x0c, 0x24, 0x48, 0x3b, 0x81, 0xa8,
        0x00, 0x00, 0x00, 0x75, 0x06, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x17, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x1d, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__RETURN_GENERATOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _RETURN_GENERATOR.o:       file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 7c 24 10                movq    0x10(%r12), %rdi
    // 9: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x14 <__JIT_ENTRY+0x14>
    // 0000000000000010:  X86_64_RELOC_GOT     __Py_MakeCoro@GOTPCREL
    // 14: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 19: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 22: 48 85 c0                      testq   %rax, %rax
    // 25: 0f 84 ae 01 00 00             je      0x1d9 <__JIT_ENTRY+0x1d9>
    // 2b: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 30: 49 83 44 24 38 02             addq    $0x2, 0x38(%r12)
    // 36: 49 8b 4c 24 50                movq    0x50(%r12), %rcx
    // 3b: 48 89 88 98 00 00 00          movq    %rcx, 0x98(%rax)
    // 42: 41 0f 10 04 24                movups  (%r12), %xmm0
    // 47: 41 0f 10 4c 24 10             movups  0x10(%r12), %xmm1
    // 4d: 41 0f 10 54 24 20             movups  0x20(%r12), %xmm2
    // 53: 0f 11 50 68                   movups  %xmm2, 0x68(%rax)
    // 57: 0f 11 48 58                   movups  %xmm1, 0x58(%rax)
    // 5b: 0f 11 40 48                   movups  %xmm0, 0x48(%rax)
    // 5f: 41 0f 10 44 24 40             movups  0x40(%r12), %xmm0
    // 65: 0f 11 80 88 00 00 00          movups  %xmm0, 0x88(%rax)
    // 6c: 41 0f 10 44 24 30             movups  0x30(%r12), %xmm0
    // 72: 0f 11 40 78                   movups  %xmm0, 0x78(%rax)
    // 76: 49 8d 54 24 50                leaq    0x50(%r12), %rdx
    // 7b: 49 8b 74 24 40                movq    0x40(%r12), %rsi
    // 80: 48 29 d6                      subq    %rdx, %rsi
    // 83: 48 c1 ee 03                   shrq    $0x3, %rsi
    // 87: 48 63 ce                      movslq  %esi, %rcx
    // 8a: 48 8d 3c c8                   leaq    (%rax,%rcx,8), %rdi
    // 8e: 48 81 c7 98 00 00 00          addq    $0x98, %rdi
    // 95: 48 89 b8 88 00 00 00          movq    %rdi, 0x88(%rax)
    // 9c: 83 f9 02                      cmpl    $0x2, %ecx
    // 9f: 0f 8c e8 00 00 00             jl      0x18d <__JIT_ENTRY+0x18d>
    // a5: 89 f1                         movl    %esi, %ecx
    // a7: 81 e1 ff ff ff 7f             andl    $0x7fffffff, %ecx       ## imm = 0x7FFFFFFF
    // ad: 4c 8d 41 ff                   leaq    -0x1(%rcx), %r8
    // b1: bf 01 00 00 00                movl    $0x1, %edi
    // b6: 49 83 f8 08                   cmpq    $0x8, %r8
    // ba: 72 54                         jb      0x110 <__JIT_ENTRY+0x110>
    // bc: 49 89 c1                      movq    %rax, %r9
    // bf: 4d 29 e1                      subq    %r12, %r9
    // c2: 49 83 c1 48                   addq    $0x48, %r9
    // c6: 49 83 f9 20                   cmpq    $0x20, %r9
    // ca: 72 44                         jb      0x110 <__JIT_ENTRY+0x110>
    // cc: 4d 89 c1                      movq    %r8, %r9
    // cf: 49 83 e1 fc                   andq    $-0x4, %r9
    // d3: 49 8d 79 01                   leaq    0x1(%r9), %rdi
    // d7: 45 31 d2                      xorl    %r10d, %r10d
    // da: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
    // e0: 43 0f 10 44 d4 58             movups  0x58(%r12,%r10,8), %xmm0
    // e6: 43 0f 10 4c d4 68             movups  0x68(%r12,%r10,8), %xmm1
    // ec: 42 0f 11 84 d0 a0 00 00 00    movups  %xmm0, 0xa0(%rax,%r10,8)
    // f5: 42 0f 11 8c d0 b0 00 00 00    movups  %xmm1, 0xb0(%rax,%r10,8)
    // fe: 49 83 c2 04                   addq    $0x4, %r10
    // 102: 4d 39 d1                      cmpq    %r10, %r9
    // 105: 75 d9                         jne     0xe0 <__JIT_ENTRY+0xe0>
    // 107: 4d 39 c8                      cmpq    %r9, %r8
    // 10a: 0f 84 7d 00 00 00             je      0x18d <__JIT_ENTRY+0x18d>
    // 110: 29 fe                         subl    %edi, %esi
    // 112: 49 89 f8                      movq    %rdi, %r8
    // 115: 83 e6 03                      andl    $0x3, %esi
    // 118: 74 26                         je      0x140 <__JIT_ENTRY+0x140>
    // 11a: 49 89 c1                      movq    %rax, %r9
    // 11d: 49 81 c1 98 00 00 00          addq    $0x98, %r9
    // 124: 49 89 f8                      movq    %rdi, %r8
    // 127: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
    // 130: 4e 8b 14 c2                   movq    (%rdx,%r8,8), %r10
    // 134: 4f 89 14 c1                   movq    %r10, (%r9,%r8,8)
    // 138: 49 ff c0                      incq    %r8
    // 13b: 48 ff ce                      decq    %rsi
    // 13e: 75 f0                         jne     0x130 <__JIT_ENTRY+0x130>
    // 140: 48 29 cf                      subq    %rcx, %rdi
    // 143: 48 83 ff fc                   cmpq    $-0x4, %rdi
    // 147: 77 44                         ja      0x18d <__JIT_ENTRY+0x18d>
    // 149: 0f 1f 80 00 00 00 00          nopl    (%rax)
    // 150: 4b 8b 54 c4 50                movq    0x50(%r12,%r8,8), %rdx
    // 155: 4a 89 94 c0 98 00 00 00       movq    %rdx, 0x98(%rax,%r8,8)
    // 15d: 4b 8b 54 c4 58                movq    0x58(%r12,%r8,8), %rdx
    // 162: 4a 89 94 c0 a0 00 00 00       movq    %rdx, 0xa0(%rax,%r8,8)
    // 16a: 4b 8b 54 c4 60                movq    0x60(%r12,%r8,8), %rdx
    // 16f: 4a 89 94 c0 a8 00 00 00       movq    %rdx, 0xa8(%rax,%r8,8)
    // 177: 4b 8b 54 c4 68                movq    0x68(%r12,%r8,8), %rdx
    // 17c: 4a 89 94 c0 b0 00 00 00       movq    %rdx, 0xb0(%rax,%r8,8)
    // 184: 49 83 c0 04                   addq    $0x4, %r8
    // 188: 4c 39 c1                      cmpq    %r8, %rcx
    // 18b: 75 c3                         jne     0x150 <__JIT_ENTRY+0x150>
    // 18d: 48 c7 40 50 00 00 00 00       movq    $0x0, 0x50(%rax)
    // 195: c6 40 43 fd                   movb    $-0x3, 0x43(%rax)
    // 199: c6 80 92 00 00 00 01          movb    $0x1, 0x92(%rax)
    // 1a0: 41 ff 46 2c                   incl    0x2c(%r14)
    // 1a4: 49 8b 5c 24 08                movq    0x8(%r12), %rbx
    // 1a9: 4c 89 f7                      movq    %r14, %rdi
    // 1ac: 4c 89 e6                      movq    %r12, %rsi
    // 1af: 49 89 c7                      movq    %rax, %r15
    // 1b2: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x1b8 <__JIT_ENTRY+0x1b8>
    // 00000000000001b4:  X86_64_RELOC_GOT     __PyThreadState_PopFrame@GOTPCREL
    // 1b8: 49 89 5e 48                   movq    %rbx, 0x48(%r14)
    // 1bc: 4c 8b 6b 40                   movq    0x40(%rbx), %r13
    // 1c0: 48 c7 43 40 00 00 00 00       movq    $0x0, 0x40(%rbx)
    // 1c8: 4d 89 7d 00                   movq    %r15, (%r13)
    // 1cc: 49 83 c5 08                   addq    $0x8, %r13
    // 1d0: 49 89 dc                      movq    %rbx, %r12
    // 1d3: 5d                            popq    %rbp
    // 1d4: e9 00 00 00 00                jmp     0x1d9 <__JIT_ENTRY+0x1d9>
    // 00000000000001d5:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 1d9: 5d                            popq    %rbp
    // 1da: e9 00 00 00 00                jmp     0x1df <__JIT_ENTRY+0x1df>
    // 00000000000001db:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[479] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x7c, 0x24,
        0x10, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xae,
        0x01, 0x00, 0x00, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x49, 0x83, 0x44, 0x24, 0x38, 0x02, 0x49, 0x8b,
        0x4c, 0x24, 0x50, 0x48, 0x89, 0x88, 0x98, 0x00,
        0x00, 0x00, 0x41, 0x0f, 0x10, 0x04, 0x24, 0x41,
        0x0f, 0x10, 0x4c, 0x24, 0x10, 0x41, 0x0f, 0x10,
        0x54, 0x24, 0x20, 0x0f, 0x11, 0x50, 0x68, 0x0f,
        0x11, 0x48, 0x58, 0x0f, 0x11, 0x40, 0x48, 0x41,
        0x0f, 0x10, 0x44, 0x24, 0x40, 0x0f, 0x11, 0x80,
        0x88, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x10, 0x44,
        0x24, 0x30, 0x0f, 0x11, 0x40, 0x78, 0x49, 0x8d,
        0x54, 0x24, 0x50, 0x49, 0x8b, 0x74, 0x24, 0x40,
        0x48, 0x29, 0xd6, 0x48, 0xc1, 0xee, 0x03, 0x48,
        0x63, 0xce, 0x48, 0x8d, 0x3c, 0xc8, 0x48, 0x81,
        0xc7, 0x98, 0x00, 0x00, 0x00, 0x48, 0x89, 0xb8,
        0x88, 0x00, 0x00, 0x00, 0x83, 0xf9, 0x02, 0x0f,
        0x8c, 0xe8, 0x00, 0x00, 0x00, 0x89, 0xf1, 0x81,
        0xe1, 0xff, 0xff, 0xff, 0x7f, 0x4c, 0x8d, 0x41,
        0xff, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x49, 0x83,
        0xf8, 0x08, 0x72, 0x54, 0x49, 0x89, 0xc1, 0x4d,
        0x29, 0xe1, 0x49, 0x83, 0xc1, 0x48, 0x49, 0x83,
        0xf9, 0x20, 0x72, 0x44, 0x4d, 0x89, 0xc1, 0x49,
        0x83, 0xe1, 0xfc, 0x49, 0x8d, 0x79, 0x01, 0x45,
        0x31, 0xd2, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00,
        0x43, 0x0f, 0x10, 0x44, 0xd4, 0x58, 0x43, 0x0f,
        0x10, 0x4c, 0xd4, 0x68, 0x42, 0x0f, 0x11, 0x84,
        0xd0, 0xa0, 0x00, 0x00, 0x00, 0x42, 0x0f, 0x11,
        0x8c, 0xd0, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83,
        0xc2, 0x04, 0x4d, 0x39, 0xd1, 0x75, 0xd9, 0x4d,
        0x39, 0xc8, 0x0f, 0x84, 0x7d, 0x00, 0x00, 0x00,
        0x29, 0xfe, 0x49, 0x89, 0xf8, 0x83, 0xe6, 0x03,
        0x74, 0x26, 0x49, 0x89, 0xc1, 0x49, 0x81, 0xc1,
        0x98, 0x00, 0x00, 0x00, 0x49, 0x89, 0xf8, 0x66,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4e, 0x8b, 0x14, 0xc2, 0x4f, 0x89, 0x14, 0xc1,
        0x49, 0xff, 0xc0, 0x48, 0xff, 0xce, 0x75, 0xf0,
        0x48, 0x29, 0xcf, 0x48, 0x83, 0xff, 0xfc, 0x77,
        0x44, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00,
        0x4b, 0x8b, 0x54, 0xc4, 0x50, 0x4a, 0x89, 0x94,
        0xc0, 0x98, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x54,
        0xc4, 0x58, 0x4a, 0x89, 0x94, 0xc0, 0xa0, 0x00,
        0x00, 0x00, 0x4b, 0x8b, 0x54, 0xc4, 0x60, 0x4a,
        0x89, 0x94, 0xc0, 0xa8, 0x00, 0x00, 0x00, 0x4b,
        0x8b, 0x54, 0xc4, 0x68, 0x4a, 0x89, 0x94, 0xc0,
        0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc0, 0x04,
        0x4c, 0x39, 0xc1, 0x75, 0xc3, 0x48, 0xc7, 0x40,
        0x50, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x40, 0x43,
        0xfd, 0xc6, 0x80, 0x92, 0x00, 0x00, 0x00, 0x01,
        0x41, 0xff, 0x46, 0x2c, 0x49, 0x8b, 0x5c, 0x24,
        0x08, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x49,
        0x89, 0xc7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x5e, 0x48, 0x4c, 0x8b, 0x6b, 0x40,
        0x48, 0xc7, 0x43, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x89, 0x7d, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x49, 0x89, 0xdc, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyThreadState_PopFrame+0x0
    // 8: &_Py_MakeCoro+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyThreadState_PopFrame);
    patch_64(data + 0x8, (uintptr_t)&_Py_MakeCoro);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x1b4, (uintptr_t)data + -0x4);
    patch_32r(code + 0x1d5, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0x1db, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__RETURN_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _RETURN_VALUE.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 4c 89 e6                      movq    %r12, %rsi
    // 7: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // b: 49 83 c5 f8                   addq    $-0x8, %r13
    // f: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 14: 41 ff 46 2c                   incl    0x2c(%r14)
    // 18: 4d 8b 64 24 08                movq    0x8(%r12), %r12
    // 1d: 4d 89 66 48                   movq    %r12, 0x48(%r14)
    // 21: 4c 89 f7                      movq    %r14, %rdi
    // 24: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2a <__JIT_ENTRY+0x2a>
    // 0000000000000026:  X86_64_RELOC_GOT     __PyEval_FrameClearAndPop@GOTPCREL
    // 2a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 38: 49 89 5d 00                   movq    %rbx, (%r13)
    // 3c: 49 83 c5 08                   addq    $0x8, %r13
    // 40: 5d                            popq    %rbp
    // 41: e9 00 00 00 00                jmp     0x46 <__JIT_ENTRY+0x46>
    // 0000000000000042:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[65] = {
        0x55, 0x48, 0x89, 0xe5, 0x4c, 0x89, 0xe6, 0x49,
        0x8b, 0x5d, 0xf8, 0x49, 0x83, 0xc5, 0xf8, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x41, 0xff, 0x46, 0x2c,
        0x4d, 0x8b, 0x64, 0x24, 0x08, 0x4d, 0x89, 0x66,
        0x48, 0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x5d, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x5d,
    };
    // 0: &_PyEval_FrameClearAndPop+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_FrameClearAndPop);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + -0x4);
}

void
emit__SAVE_RETURN_OFFSET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SAVE_RETURN_OFFSET.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // b: 66 41 89 44 24 48             movw    %ax, 0x48(%r12)
    // 11: 5d                            popq    %rbp
    // 12: e9 00 00 00 00                jmp     0x17 <__JIT_ENTRY+0x17>
    // 0000000000000013:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[18] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x66, 0x41, 0x89, 0x44, 0x24,
        0x48, 0x5d,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
}

void
emit__SEND_GEN_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SEND_GEN_FRAME.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 8: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // c: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyGen_Type@GOTPCREL
    // 13: 0f 94 c2                      sete    %dl
    // 16: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            ## 0x1d <__JIT_ENTRY+0x1d>
    // 0000000000000019:  X86_64_RELOC_GOT     _PyCoro_Type@GOTPCREL
    // 1d: 0f 94 c1                      sete    %cl
    // 20: 08 d1                         orb     %dl, %cl
    // 22: 74 06                         je      0x2a <__JIT_ENTRY+0x2a>
    // 24: 80 78 43 00                   cmpb    $0x0, 0x43(%rax)
    // 28: 78 06                         js      0x30 <__JIT_ENTRY+0x30>
    // 2a: 5d                            popq    %rbp
    // 2b: e9 00 00 00 00                jmp     0x30 <__JIT_ENTRY+0x30>
    // 000000000000002c:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 30: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 34: 48 8d 50 48                   leaq    0x48(%rax), %rdx
    // 38: 48 8b b0 88 00 00 00          movq    0x88(%rax), %rsi
    // 3f: 48 89 0e                      movq    %rcx, (%rsi)
    // 42: 48 83 80 88 00 00 00 08       addq    $0x8, 0x88(%rax)
    // 4a: c6 40 43 00                   movb    $0x0, 0x43(%rax)
    // 4e: 49 8b 4e 78                   movq    0x78(%r14), %rcx
    // 52: 48 8d 70 28                   leaq    0x28(%rax), %rsi
    // 56: 48 89 48 30                   movq    %rcx, 0x30(%rax)
    // 5a: 49 89 76 78                   movq    %rsi, 0x78(%r14)
    // 5e: 8b 0d 00 00 00 00             movl    (%rip), %ecx            ## 0x64 <__JIT_ENTRY+0x64>
    // 0000000000000060:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 64: 83 c1 02                      addl    $0x2, %ecx
    // 67: 66 41 89 4c 24 48             movw    %cx, 0x48(%r12)
    // 6d: 4c 89 60 50                   movq    %r12, 0x50(%rax)
    // 71: 49 89 55 f8                   movq    %rdx, -0x8(%r13)
    // 75: 5d                            popq    %rbp
    // 76: e9 00 00 00 00                jmp     0x7b <__JIT_ENTRY+0x7b>
    // 0000000000000077:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[118] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf0,
        0x48, 0x8b, 0x48, 0x08, 0x48, 0x3b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0x94, 0xc2, 0x48, 0x3b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x94, 0xc1,
        0x08, 0xd1, 0x74, 0x06, 0x80, 0x78, 0x43, 0x00,
        0x78, 0x06, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x4d, 0xf8, 0x48, 0x8d, 0x50, 0x48,
        0x48, 0x8b, 0xb0, 0x88, 0x00, 0x00, 0x00, 0x48,
        0x89, 0x0e, 0x48, 0x83, 0x80, 0x88, 0x00, 0x00,
        0x00, 0x08, 0xc6, 0x40, 0x43, 0x00, 0x49, 0x8b,
        0x4e, 0x78, 0x48, 0x8d, 0x70, 0x28, 0x48, 0x89,
        0x48, 0x30, 0x49, 0x89, 0x76, 0x78, 0x8b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x83, 0xc1, 0x02, 0x66,
        0x41, 0x89, 0x4c, 0x24, 0x48, 0x4c, 0x89, 0x60,
        0x50, 0x49, 0x89, 0x55, 0xf8, 0x5d,
    };
    // 0: OPARG
    // 8: &PyCoro_Type+0x0
    // 10: &PyGen_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCoro_Type);
    patch_64(data + 0x10, (uintptr_t)&PyGen_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + 0x4);
    patch_32r(code + 0x2c, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x60, (uintptr_t)data + -0x4);
}

void
emit__SETUP_ANNOTATIONS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SETUP_ANNOTATIONS.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 49 8b 7c 24 28                movq    0x28(%r12), %rdi
    // d: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 12: 48 85 ff                      testq   %rdi, %rdi
    // 15: 74 60                         je      0x77 <__JIT_ENTRY+0x77>
    // 17: be 60 8e 00 00                movl    $0x8e60, %esi           ## imm = 0x8E60
    // 1c: 48 03 35 00 00 00 00          addq    (%rip), %rsi            ## 0x23 <__JIT_ENTRY+0x23>
    // 000000000000001f:  X86_64_RELOC_GOT     __PyRuntime@GOTPCREL
    // 23: 48 8d 55 f8                   leaq    -0x8(%rbp), %rdx
    // 27: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2d <__JIT_ENTRY+0x2d>
    // 0000000000000029:  X86_64_RELOC_GOT     _PyMapping_GetOptionalItem@GOTPCREL
    // 2d: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 32: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3b: 85 c0                         testl   %eax, %eax
    // 3d: 78 62                         js      0xa1 <__JIT_ENTRY+0xa1>
    // 3f: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 43: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 48: 48 85 ff                      testq   %rdi, %rdi
    // 4b: 74 5e                         je      0xab <__JIT_ENTRY+0xab>
    // 4d: 8b 07                         movl    (%rdi), %eax
    // 4f: 85 c0                         testl   %eax, %eax
    // 51: 78 0c                         js      0x5f <__JIT_ENTRY+0x5f>
    // 53: ff c8                         decl    %eax
    // 55: 89 07                         movl    %eax, (%rdi)
    // 57: 75 06                         jne     0x5f <__JIT_ENTRY+0x5f>
    // 59: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5f <__JIT_ENTRY+0x5f>
    // 000000000000005b:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 5f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 64: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 6d: 48 83 c4 10                   addq    $0x10, %rsp
    // 71: 5d                            popq    %rbp
    // 72: e9 00 00 00 00                jmp     0x77 <__JIT_ENTRY+0x77>
    // 0000000000000073:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 77: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x7e <__JIT_ENTRY+0x7e>
    // 000000000000007a:  X86_64_RELOC_GOT_LOAD        _PyExc_SystemError@GOTPCREL
    // 7e: 48 8b 30                      movq    (%rax), %rsi
    // 81: 48 8d 15 90 00 00 00          leaq    0x90(%rip), %rdx        ## 0x118 <__JIT_ENTRY+0x118>
    // 0000000000000084:  X86_64_RELOC_SIGNED  __cstring
    // 88: 4c 89 f7                      movq    %r14, %rdi
    // 8b: 31 c0                         xorl    %eax, %eax
    // 8d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x93 <__JIT_ENTRY+0x93>
    // 000000000000008f:  X86_64_RELOC_GOT     __PyErr_Format@GOTPCREL
    // 93: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 98: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // a1: 48 83 c4 10                   addq    $0x10, %rsp
    // a5: 5d                            popq    %rbp
    // a6: e9 00 00 00 00                jmp     0xab <__JIT_ENTRY+0xab>
    // 00000000000000a7:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // ab: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xb1 <__JIT_ENTRY+0xb1>
    // 00000000000000ad:  X86_64_RELOC_GOT     _PyDict_New@GOTPCREL
    // b1: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // b5: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // ba: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // c3: 48 85 c0                      testq   %rax, %rax
    // c6: 74 d9                         je      0xa1 <__JIT_ENTRY+0xa1>
    // c8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // cd: 49 8b 7c 24 28                movq    0x28(%r12), %rdi
    // d2: be 60 8e 00 00                movl    $0x8e60, %esi           ## imm = 0x8E60
    // d7: 48 03 35 00 00 00 00          addq    (%rip), %rsi            ## 0xde <__JIT_ENTRY+0xde>
    // 00000000000000da:  X86_64_RELOC_GOT     __PyRuntime@GOTPCREL
    // de: 48 89 c2                      movq    %rax, %rdx
    // e1: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xe7 <__JIT_ENTRY+0xe7>
    // 00000000000000e3:  X86_64_RELOC_GOT     _PyObject_SetItem@GOTPCREL
    // e7: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // eb: 8b 0f                         movl    (%rdi), %ecx
    // ed: 85 c9                         testl   %ecx, %ecx
    // ef: 78 10                         js      0x101 <__JIT_ENTRY+0x101>
    // f1: ff c9                         decl    %ecx
    // f3: 89 0f                         movl    %ecx, (%rdi)
    // f5: 75 0a                         jne     0x101 <__JIT_ENTRY+0x101>
    // f7: 89 c3                         movl    %eax, %ebx
    // f9: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xff <__JIT_ENTRY+0xff>
    // 00000000000000fb:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // ff: 89 d8                         movl    %ebx, %eax
    // 101: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 106: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 10f: 85 c0                         testl   %eax, %eax
    // 111: 75 8e                         jne     0xa1 <__JIT_ENTRY+0xa1>
    // 113: e9 55 ff ff ff                jmp     0x6d <__JIT_ENTRY+0x6d>
    const unsigned char code_body[280] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x49, 0x8b, 0x7c, 0x24, 0x28, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x48, 0x85, 0xff, 0x74, 0x60, 0xbe,
        0x60, 0x8e, 0x00, 0x00, 0x48, 0x03, 0x35, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8d, 0x55, 0xf8, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x62, 0x48,
        0x8b, 0x7d, 0xf8, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x48, 0x85, 0xff, 0x74, 0x5e, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x0c, 0xff, 0xc8, 0x89, 0x07, 0x75,
        0x06, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4,
        0x10, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x30, 0x48, 0x8d, 0x15, 0x90, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0xf7, 0x31, 0xc0, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0x45, 0xf8, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0xd9,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x49, 0x8b, 0x7c,
        0x24, 0x28, 0xbe, 0x60, 0x8e, 0x00, 0x00, 0x48,
        0x03, 0x35, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xc2, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x7d, 0xf8, 0x8b, 0x0f, 0x85, 0xc9, 0x78,
        0x10, 0xff, 0xc9, 0x89, 0x0f, 0x75, 0x0a, 0x89,
        0xc3, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xd8, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x85,
        0xc0, 0x75, 0x8e, 0xe9, 0x55, 0xff, 0xff, 0xff,
    };
    // 0: 'no locals found when setting up annotations\x00'
    // 2c: 00 00 00 00
    // 30: &_Py_Dealloc+0x0
    // 38: &PyObject_SetItem+0x0
    // 40: &_PyRuntime+0x0
    // 48: &PyDict_New+0x0
    // 50: &_PyErr_Format+0x0
    // 58: &PyExc_SystemError+0x0
    // 60: &PyMapping_GetOptionalItem+0x0
    const unsigned char data_body[104] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
        0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74,
        0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20,
        0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
        0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x38, (uintptr_t)&PyObject_SetItem);
    patch_64(data + 0x40, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x48, (uintptr_t)&PyDict_New);
    patch_64(data + 0x50, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x58, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x60, (uintptr_t)&PyMapping_GetOptionalItem);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)data + 0x2c);
    patch_32r(code + 0x73, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x7a, (uintptr_t)data + 0x54);
    patch_32r(code + 0x84, (uintptr_t)data + 0x1a4);
    patch_x86_64_32rx(code + 0x8f, (uintptr_t)data + 0x4c);
    patch_32r(code + 0xa7, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0xad, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0xda, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0xe3, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0xfb, (uintptr_t)data + 0x2c);
}

void
emit__SET_ADD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SET_ADD.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 8b 05 00 00 00 00             movl    (%rip), %eax            ## 0xa <__JIT_ENTRY+0xa>
    // 0000000000000006:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // a: f7 d0                         notl    %eax
    // c: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 10: c1 e0 03                      shll    $0x3, %eax
    // 13: 48 0d 00 00 f8 ff             orq     $-0x80000, %rax         ## imm = 0xFFF80000
    // 19: 49 8b 7c 05 00                movq    (%r13,%rax), %rdi
    // 1e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 23: 48 89 de                      movq    %rbx, %rsi
    // 26: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2c <__JIT_ENTRY+0x2c>
    // 0000000000000028:  X86_64_RELOC_GOT     _PySet_Add@GOTPCREL
    // 2c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 31: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3a: 8b 0b                         movl    (%rbx), %ecx
    // 3c: 85 c9                         testl   %ecx, %ecx
    // 3e: 78 06                         js      0x46 <__JIT_ENTRY+0x46>
    // 40: ff c9                         decl    %ecx
    // 42: 89 0b                         movl    %ecx, (%rbx)
    // 44: 74 0e                         je      0x54 <__JIT_ENTRY+0x54>
    // 46: 49 83 c5 f8                   addq    $-0x8, %r13
    // 4a: 85 c0                         testl   %eax, %eax
    // 4c: 74 1b                         je      0x69 <__JIT_ENTRY+0x69>
    // 4e: 5d                            popq    %rbp
    // 4f: e9 00 00 00 00                jmp     0x54 <__JIT_ENTRY+0x54>
    // 0000000000000050:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 54: 48 89 df                      movq    %rbx, %rdi
    // 57: 89 c3                         movl    %eax, %ebx
    // 59: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5f <__JIT_ENTRY+0x5f>
    // 000000000000005b:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 5f: 89 d8                         movl    %ebx, %eax
    // 61: 49 83 c5 f8                   addq    $-0x8, %r13
    // 65: 85 c0                         testl   %eax, %eax
    // 67: 75 e5                         jne     0x4e <__JIT_ENTRY+0x4e>
    // 69: 5d                            popq    %rbp
    // 6a: e9 00 00 00 00                jmp     0x6f <__JIT_ENTRY+0x6f>
    // 000000000000006b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[106] = {
        0x55, 0x48, 0x89, 0xe5, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0xf7, 0xd0, 0x49, 0x8b, 0x5d, 0xf8,
        0xc1, 0xe0, 0x03, 0x48, 0x0d, 0x00, 0x00, 0xf8,
        0xff, 0x49, 0x8b, 0x7c, 0x05, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0xde, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x06,
        0xff, 0xc9, 0x89, 0x0b, 0x74, 0x0e, 0x49, 0x83,
        0xc5, 0xf8, 0x85, 0xc0, 0x74, 0x1b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x89,
        0xc3, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xd8, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x75,
        0xe5, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PySet_Add+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PySet_Add);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x6, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x4);
    patch_32r(code + 0x50, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)data + -0x4);
}

void
emit__SET_FUNCTION_ATTRIBUTE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SET_FUNCTION_ATTRIBUTE.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8d 45 f8                   leaq    -0x8(%r13), %rax
    // 8: 49 8b 4d f0                   movq    -0x10(%r13), %rcx
    // c: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // 10: 0f b7 35 00 00 00 00          movzwl  (%rip), %esi            ## 0x17 <__JIT_ENTRY+0x17>
    // 0000000000000013:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 17: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            ## 0x1e <__JIT_ENTRY+0x1e>
    // 000000000000001a:  X86_64_RELOC_GOT_LOAD        __Py_FunctionAttributeOffsets@GOTPCREL
    // 1e: 48 8b 34 f7                   movq    (%rdi,%rsi,8), %rsi
    // 22: 48 89 0c 32                   movq    %rcx, (%rdx,%rsi)
    // 26: 49 89 55 f0                   movq    %rdx, -0x10(%r13)
    // 2a: 49 89 c5                      movq    %rax, %r13
    // 2d: 5d                            popq    %rbp
    // 2e: e9 00 00 00 00                jmp     0x33 <__JIT_ENTRY+0x33>
    // 000000000000002f:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[46] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8d, 0x45, 0xf8,
        0x49, 0x8b, 0x4d, 0xf0, 0x49, 0x8b, 0x55, 0xf8,
        0x0f, 0xb7, 0x35, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x34, 0xf7, 0x48, 0x89, 0x0c, 0x32, 0x49, 0x89,
        0x55, 0xf0, 0x49, 0x89, 0xc5, 0x5d,
    };
    // 0: &_Py_FunctionAttributeOffsets+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FunctionAttributeOffsets);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + -0x4);
}

void
emit__SET_IP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SET_IP.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_OPERAND0@GOTPCREL
    // b: 49 89 44 24 38                movq    %rax, 0x38(%r12)
    // 10: 5d                            popq    %rbp
    // 11: e9 00 00 00 00                jmp     0x16 <__JIT_ENTRY+0x16>
    // 0000000000000012:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[17] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0x44, 0x24, 0x38,
        0x5d,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
}

void
emit__SET_UPDATE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SET_UPDATE.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 8b 05 00 00 00 00             movl    (%rip), %eax            ## 0xa <__JIT_ENTRY+0xa>
    // 0000000000000006:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // a: f7 d0                         notl    %eax
    // c: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 10: c1 e0 03                      shll    $0x3, %eax
    // 13: 48 0d 00 00 f8 ff             orq     $-0x80000, %rax         ## imm = 0xFFF80000
    // 19: 49 8b 7c 05 00                movq    (%r13,%rax), %rdi
    // 1e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 23: 48 89 de                      movq    %rbx, %rsi
    // 26: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2c <__JIT_ENTRY+0x2c>
    // 0000000000000028:  X86_64_RELOC_GOT     __PySet_Update@GOTPCREL
    // 2c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 31: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3a: 8b 0b                         movl    (%rbx), %ecx
    // 3c: 85 c9                         testl   %ecx, %ecx
    // 3e: 78 06                         js      0x46 <__JIT_ENTRY+0x46>
    // 40: ff c9                         decl    %ecx
    // 42: 89 0b                         movl    %ecx, (%rbx)
    // 44: 74 0e                         je      0x54 <__JIT_ENTRY+0x54>
    // 46: 49 83 c5 f8                   addq    $-0x8, %r13
    // 4a: 85 c0                         testl   %eax, %eax
    // 4c: 78 1b                         js      0x69 <__JIT_ENTRY+0x69>
    // 4e: 5d                            popq    %rbp
    // 4f: e9 00 00 00 00                jmp     0x54 <__JIT_ENTRY+0x54>
    // 0000000000000050:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 54: 48 89 df                      movq    %rbx, %rdi
    // 57: 89 c3                         movl    %eax, %ebx
    // 59: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5f <__JIT_ENTRY+0x5f>
    // 000000000000005b:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 5f: 89 d8                         movl    %ebx, %eax
    // 61: 49 83 c5 f8                   addq    $-0x8, %r13
    // 65: 85 c0                         testl   %eax, %eax
    // 67: 79 e5                         jns     0x4e <__JIT_ENTRY+0x4e>
    // 69: 5d                            popq    %rbp
    // 6a: e9 00 00 00 00                jmp     0x6f <__JIT_ENTRY+0x6f>
    // 000000000000006b:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[111] = {
        0x55, 0x48, 0x89, 0xe5, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0xf7, 0xd0, 0x49, 0x8b, 0x5d, 0xf8,
        0xc1, 0xe0, 0x03, 0x48, 0x0d, 0x00, 0x00, 0xf8,
        0xff, 0x49, 0x8b, 0x7c, 0x05, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0xde, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x06,
        0xff, 0xc9, 0x89, 0x0b, 0x74, 0x0e, 0x49, 0x83,
        0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x1b, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x89,
        0xc3, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xd8, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x79,
        0xe5, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PySet_Update+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PySet_Update);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x6, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x4);
    patch_32r(code + 0x50, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)data + -0x4);
    patch_32r(code + 0x6b, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__START_EXECUTOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _START_EXECUTOR.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 5: 49 8b be 10 01 00 00          movq    0x110(%r14), %rdi
    // c: 48 85 ff                      testq   %rdi, %rdi
    // f: 74 17                         je      0x28 <__JIT_ENTRY+0x28>
    // 11: 49 c7 86 10 01 00 00 00 00 00 00      movq    $0x0, 0x110(%r14)
    // 1c: 8b 07                         movl    (%rdi), %eax
    // 1e: 85 c0                         testl   %eax, %eax
    // 20: 78 06                         js      0x28 <__JIT_ENTRY+0x28>
    // 22: ff c8                         decl    %eax
    // 24: 89 07                         movl    %eax, (%rdi)
    // 26: 74 13                         je      0x3b <__JIT_ENTRY+0x3b>
    // 28: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2d: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 36: e9 00 00 00 00                jmp     0x3b <__JIT_ENTRY+0x3b>
    // 0000000000000037:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3b: 55                            pushq   %rbp
    // 3c: 48 89 e5                      movq    %rsp, %rbp
    // 3f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x45 <__JIT_ENTRY+0x45>
    // 0000000000000041:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 45: 5d                            popq    %rbp
    // 46: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 4b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 54: e9 00 00 00 00                jmp     0x59 <__JIT_ENTRY+0x59>
    // 0000000000000055:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[84] = {
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x49, 0x8b, 0xbe,
        0x10, 0x01, 0x00, 0x00, 0x48, 0x85, 0xff, 0x74,
        0x17, 0x49, 0xc7, 0x86, 0x10, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x13,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x37, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + -0x4);
}

void
emit__STORE_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_ATTR.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // 10: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 14: 49 8b 04 24                   movq    (%r12), %rax
    // 18: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 1c: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x23 <__JIT_ENTRY+0x23>
    // 000000000000001f:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 23: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
    // 28: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2d: 48 89 df                      movq    %rbx, %rdi
    // 30: 4c 89 fa                      movq    %r15, %rdx
    // 33: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x39 <__JIT_ENTRY+0x39>
    // 0000000000000035:  X86_64_RELOC_GOT     _PyObject_SetAttr@GOTPCREL
    // 39: 41 89 c6                      movl    %eax, %r14d
    // 3c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 41: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 4a: 41 8b 07                      movl    (%r15), %eax
    // 4d: 85 c0                         testl   %eax, %eax
    // 4f: 78 10                         js      0x61 <__JIT_ENTRY+0x61>
    // 51: ff c8                         decl    %eax
    // 53: 41 89 07                      movl    %eax, (%r15)
    // 56: 75 09                         jne     0x61 <__JIT_ENTRY+0x61>
    // 58: 4c 89 ff                      movq    %r15, %rdi
    // 5b: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x61 <__JIT_ENTRY+0x61>
    // 000000000000005d:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 61: 8b 03                         movl    (%rbx), %eax
    // 63: 85 c0                         testl   %eax, %eax
    // 65: 78 06                         js      0x6d <__JIT_ENTRY+0x6d>
    // 67: ff c8                         decl    %eax
    // 69: 89 03                         movl    %eax, (%rbx)
    // 6b: 74 17                         je      0x84 <__JIT_ENTRY+0x84>
    // 6d: 49 83 c5 f0                   addq    $-0x10, %r13
    // 71: 45 85 f6                      testl   %r14d, %r14d
    // 74: 74 20                         je      0x96 <__JIT_ENTRY+0x96>
    // 76: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 7a: 48 83 c4 10                   addq    $0x10, %rsp
    // 7e: 5d                            popq    %rbp
    // 7f: e9 00 00 00 00                jmp     0x84 <__JIT_ENTRY+0x84>
    // 0000000000000080:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 84: 48 89 df                      movq    %rbx, %rdi
    // 87: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x8d <__JIT_ENTRY+0x8d>
    // 0000000000000089:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 8d: 49 83 c5 f0                   addq    $-0x10, %r13
    // 91: 45 85 f6                      testl   %r14d, %r14d
    // 94: 75 e0                         jne     0x76 <__JIT_ENTRY+0x76>
    // 96: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 9a: 48 83 c4 10                   addq    $0x10, %rsp
    // 9e: 5d                            popq    %rbp
    // 9f: e9 00 00 00 00                jmp     0xa4 <__JIT_ENTRY+0xa4>
    // 00000000000000a0:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[159] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0x75, 0xf8, 0x4d, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x5d, 0xf8, 0x49, 0x8b, 0x04, 0x24,
        0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x74, 0xc8, 0x18,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xdf,
        0x4c, 0x89, 0xfa, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x41, 0x89, 0xc6, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x41, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x10, 0xff, 0xc8, 0x41, 0x89, 0x07, 0x75, 0x09,
        0x4c, 0x89, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x06, 0xff,
        0xc8, 0x89, 0x03, 0x74, 0x17, 0x49, 0x83, 0xc5,
        0xf0, 0x45, 0x85, 0xf6, 0x74, 0x20, 0x4c, 0x8b,
        0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc5,
        0xf0, 0x45, 0x85, 0xf6, 0x75, 0xe0, 0x4c, 0x8b,
        0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyObject_SetAttr+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyObject_SetAttr);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x35, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)data + -0x4);
    patch_32r(code + 0x80, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x89, (uintptr_t)data + -0x4);
}

void
emit__STORE_ATTR_INSTANCE_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_ATTR_INSTANCE_VALUE.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 4d f0                   movq    -0x10(%r13), %rcx
    // 4: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 8: 49 83 c5 f0                   addq    $-0x10, %r13
    // c: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 13: 48 8b 1c 07                   movq    (%rdi,%rax), %rbx
    // 17: 48 89 0c 07                   movq    %rcx, (%rdi,%rax)
    // 1b: 48 85 db                      testq   %rbx, %rbx
    // 1e: 75 38                         jne     0x58 <__JIT_ENTRY+0x58>
    // 20: 48 01 f8                      addq    %rdi, %rax
    // 23: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
    // 27: 48 8b 49 20                   movq    0x20(%rcx), %rcx
    // 2b: 48 8d 14 0f                   leaq    (%rdi,%rcx), %rdx
    // 2f: 48 8d 34 0f                   leaq    (%rdi,%rcx), %rsi
    // 33: 48 83 c6 08                   addq    $0x8, %rsi
    // 37: 29 f0                         subl    %esi, %eax
    // 39: c1 e8 03                      shrl    $0x3, %eax
    // 3c: 0f b6 74 0f 01                movzbl  0x1(%rdi,%rcx), %esi
    // 41: 44 0f b6 04 0f                movzbl  (%rdi,%rcx), %r8d
    // 46: 4a 8d 14 c2                   leaq    (%rdx,%r8,8), %rdx
    // 4a: 48 83 c2 08                   addq    $0x8, %rdx
    // 4e: 88 04 16                      movb    %al, (%rsi,%rdx)
    // 51: 8d 46 01                      leal    0x1(%rsi), %eax
    // 54: 88 44 0f 01                   movb    %al, 0x1(%rdi,%rcx)
    // 58: 55                            pushq   %rbp
    // 59: 48 89 e5                      movq    %rsp, %rbp
    // 5c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 61: 8b 07                         movl    (%rdi), %eax
    // 63: 85 c0                         testl   %eax, %eax
    // 65: 78 0c                         js      0x73 <__JIT_ENTRY+0x73>
    // 67: ff c8                         decl    %eax
    // 69: 89 07                         movl    %eax, (%rdi)
    // 6b: 75 06                         jne     0x73 <__JIT_ENTRY+0x73>
    // 6d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x73 <__JIT_ENTRY+0x73>
    // 000000000000006f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 73: 48 85 db                      testq   %rbx, %rbx
    // 76: 74 0c                         je      0x84 <__JIT_ENTRY+0x84>
    // 78: 8b 03                         movl    (%rbx), %eax
    // 7a: 85 c0                         testl   %eax, %eax
    // 7c: 78 06                         js      0x84 <__JIT_ENTRY+0x84>
    // 7e: ff c8                         decl    %eax
    // 80: 89 03                         movl    %eax, (%rbx)
    // 82: 74 14                         je      0x98 <__JIT_ENTRY+0x98>
    // 84: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 89: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 92: 5d                            popq    %rbp
    // 93: e9 00 00 00 00                jmp     0x98 <__JIT_ENTRY+0x98>
    // 0000000000000094:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 98: 48 89 df                      movq    %rbx, %rdi
    // 9b: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xa1 <__JIT_ENTRY+0xa1>
    // 000000000000009d:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // a1: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // a6: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // af: 5d                            popq    %rbp
    // b0: e9 00 00 00 00                jmp     0xb5 <__JIT_ENTRY+0xb5>
    // 00000000000000b1:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[176] = {
        0x49, 0x8b, 0x4d, 0xf0, 0x49, 0x8b, 0x7d, 0xf8,
        0x49, 0x83, 0xc5, 0xf0, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x1c, 0x07, 0x48,
        0x89, 0x0c, 0x07, 0x48, 0x85, 0xdb, 0x75, 0x38,
        0x48, 0x01, 0xf8, 0x48, 0x8b, 0x4f, 0x08, 0x48,
        0x8b, 0x49, 0x20, 0x48, 0x8d, 0x14, 0x0f, 0x48,
        0x8d, 0x34, 0x0f, 0x48, 0x83, 0xc6, 0x08, 0x29,
        0xf0, 0xc1, 0xe8, 0x03, 0x0f, 0xb6, 0x74, 0x0f,
        0x01, 0x44, 0x0f, 0xb6, 0x04, 0x0f, 0x4a, 0x8d,
        0x14, 0xc2, 0x48, 0x83, 0xc2, 0x08, 0x88, 0x04,
        0x16, 0x8d, 0x46, 0x01, 0x88, 0x44, 0x0f, 0x01,
        0x55, 0x48, 0x89, 0xe5, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0c, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0x06, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xdb, 0x74, 0x0c,
        0x8b, 0x03, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8,
        0x89, 0x03, 0x74, 0x14, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x6f, (uintptr_t)data + -0x4);
    patch_32r(code + 0x94, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x9d, (uintptr_t)data + -0x4);
}

void
emit__STORE_ATTR_SLOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_ATTR_SLOT.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 8: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // c: 49 83 c5 f0                   addq    $-0x10, %r13
    // 10: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x17 <__JIT_ENTRY+0x17>
    // 0000000000000013:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 17: 48 8b 1c 0f                   movq    (%rdi,%rcx), %rbx
    // 1b: 48 89 04 0f                   movq    %rax, (%rdi,%rcx)
    // 1f: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 24: 8b 07                         movl    (%rdi), %eax
    // 26: 85 c0                         testl   %eax, %eax
    // 28: 78 0c                         js      0x36 <__JIT_ENTRY+0x36>
    // 2a: ff c8                         decl    %eax
    // 2c: 89 07                         movl    %eax, (%rdi)
    // 2e: 75 06                         jne     0x36 <__JIT_ENTRY+0x36>
    // 30: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x36 <__JIT_ENTRY+0x36>
    // 0000000000000032:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 36: 48 85 db                      testq   %rbx, %rbx
    // 39: 74 0c                         je      0x47 <__JIT_ENTRY+0x47>
    // 3b: 8b 03                         movl    (%rbx), %eax
    // 3d: 85 c0                         testl   %eax, %eax
    // 3f: 78 06                         js      0x47 <__JIT_ENTRY+0x47>
    // 41: ff c8                         decl    %eax
    // 43: 89 03                         movl    %eax, (%rbx)
    // 45: 74 14                         je      0x5b <__JIT_ENTRY+0x5b>
    // 47: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 4c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 55: 5d                            popq    %rbp
    // 56: e9 00 00 00 00                jmp     0x5b <__JIT_ENTRY+0x5b>
    // 0000000000000057:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 5b: 48 89 df                      movq    %rbx, %rdi
    // 5e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x64 <__JIT_ENTRY+0x64>
    // 0000000000000060:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 64: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 69: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 72: 5d                            popq    %rbp
    // 73: e9 00 00 00 00                jmp     0x78 <__JIT_ENTRY+0x78>
    // 0000000000000074:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[115] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf0,
        0x49, 0x8b, 0x7d, 0xf8, 0x49, 0x83, 0xc5, 0xf0,
        0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x1c, 0x0f, 0x48, 0x89, 0x04, 0x0f, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x0c, 0xff, 0xc8, 0x89, 0x07, 0x75, 0x06,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85,
        0xdb, 0x74, 0x0c, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x03, 0x74, 0x14, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + -0x4);
    patch_32r(code + 0x57, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x60, (uintptr_t)data + -0x4);
}

void
emit__STORE_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_ATTR_WITH_HINT.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 4: 48 8b 53 e8                   movq    -0x18(%rbx), %rdx
    // 8: 48 85 d2                      testq   %rdx, %rdx
    // b: 0f 84 00 00 00 00             je      0x11 <__JIT_ENTRY+0x11>
    // 000000000000000d:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 11: 0f b7 35 00 00 00 00          movzwl  (%rip), %esi            ## 0x18 <__JIT_ENTRY+0x18>
    // 0000000000000014:  X86_64_RELOC_GOT     __JIT_OPERAND0@GOTPCREL
    // 18: 48 8b 7a 20                   movq    0x20(%rdx), %rdi
    // 1c: 48 39 77 18                   cmpq    %rsi, 0x18(%rdi)
    // 20: 0f 86 00 00 00 00             jbe     0x26 <__JIT_ENTRY+0x26>
    // 0000000000000022:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 26: 80 7f 0a 00                   cmpb    $0x0, 0xa(%rdi)
    // 2a: 0f 84 00 00 00 00             je      0x30 <__JIT_ENTRY+0x30>
    // 000000000000002c:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 30: 49 8b 04 24                   movq    (%r12), %rax
    // 34: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 38: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x3f <__JIT_ENTRY+0x3f>
    // 000000000000003b:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 3f: 48 8b 44 c8 18                movq    0x18(%rax,%rcx,8), %rax
    // 44: 0f b6 4f 09                   movzbl  0x9(%rdi), %ecx
    // 48: 41 b8 01 00 00 00             movl    $0x1, %r8d
    // 4e: 49 d3 e0                      shlq    %cl, %r8
    // 51: 49 01 f8                      addq    %rdi, %r8
    // 54: c1 e6 04                      shll    $0x4, %esi
    // 57: 4a 39 44 06 20                cmpq    %rax, 0x20(%rsi,%r8)
    // 5c: 0f 85 00 00 00 00             jne     0x62 <__JIT_ENTRY+0x62>
    // 000000000000005e:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 62: 4e 8d 3c 06                   leaq    (%rsi,%r8), %r15
    // 66: 49 83 c7 20                   addq    $0x20, %r15
    // 6a: 49 8b 4f 08                   movq    0x8(%r15), %rcx
    // 6e: 48 85 c9                      testq   %rcx, %rcx
    // 71: 0f 84 00 00 00 00             je      0x77 <__JIT_ENTRY+0x77>
    // 0000000000000073:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 77: 55                            pushq   %rbp
    // 78: 48 89 e5                      movq    %rsp, %rbp
    // 7b: 48 83 ec 10                   subq    $0x10, %rsp
    // 7f: 4d 8b 45 f0                   movq    -0x10(%r13), %r8
    // 83: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 88: 0f b6 7a 18                   movzbl  0x18(%rdx), %edi
    // 8c: 85 ff                         testl   %edi, %edi
    // 8e: 74 21                         je      0xb1 <__JIT_ENTRY+0xb1>
    // 90: be 01 00 00 00                movl    $0x1, %esi
    // 95: 48 89 4d f8                   movq    %rcx, -0x8(%rbp)
    // 99: 48 89 c1                      movq    %rax, %rcx
    // 9c: 4d 89 c5                      movq    %r8, %r13
    // 9f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xa5 <__JIT_ENTRY+0xa5>
    // 00000000000000a1:  X86_64_RELOC_GOT     __PyDict_SendEvent@GOTPCREL
    // a5: 4d 89 e8                      movq    %r13, %r8
    // a8: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // ac: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // b1: 4d 89 47 08                   movq    %r8, 0x8(%r15)
    // b5: 49 83 c5 f0                   addq    $-0x10, %r13
    // b9: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // be: 8b 03                         movl    (%rbx), %eax
    // c0: 85 c0                         testl   %eax, %eax
    // c2: 78 15                         js      0xd9 <__JIT_ENTRY+0xd9>
    // c4: ff c8                         decl    %eax
    // c6: 89 03                         movl    %eax, (%rbx)
    // c8: 75 0f                         jne     0xd9 <__JIT_ENTRY+0xd9>
    // ca: 48 89 df                      movq    %rbx, %rdi
    // cd: 48 89 cb                      movq    %rcx, %rbx
    // d0: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xd6 <__JIT_ENTRY+0xd6>
    // 00000000000000d2:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // d6: 48 89 d9                      movq    %rbx, %rcx
    // d9: 8b 01                         movl    (%rcx), %eax
    // db: 85 c0                         testl   %eax, %eax
    // dd: 78 0f                         js      0xee <__JIT_ENTRY+0xee>
    // df: ff c8                         decl    %eax
    // e1: 89 01                         movl    %eax, (%rcx)
    // e3: 75 09                         jne     0xee <__JIT_ENTRY+0xee>
    // e5: 48 89 cf                      movq    %rcx, %rdi
    // e8: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xee <__JIT_ENTRY+0xee>
    // 00000000000000ea:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // ee: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // f3: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // fc: 48 83 c4 10                   addq    $0x10, %rsp
    // 100: 5d                            popq    %rbp
    // 101: e9 00 00 00 00                jmp     0x106 <__JIT_ENTRY+0x106>
    // 0000000000000102:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[257] = {
        0x49, 0x8b, 0x5d, 0xf8, 0x48, 0x8b, 0x53, 0xe8,
        0x48, 0x85, 0xd2, 0x0f, 0x84, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xb7, 0x35, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x7a, 0x20, 0x48, 0x39, 0x77, 0x18,
        0x0f, 0x86, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7f,
        0x0a, 0x00, 0x0f, 0x84, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40, 0x20,
        0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x44, 0xc8, 0x18, 0x0f, 0xb6, 0x4f, 0x09,
        0x41, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x49, 0xd3,
        0xe0, 0x49, 0x01, 0xf8, 0xc1, 0xe6, 0x04, 0x4a,
        0x39, 0x44, 0x06, 0x20, 0x0f, 0x85, 0x00, 0x00,
        0x00, 0x00, 0x4e, 0x8d, 0x3c, 0x06, 0x49, 0x83,
        0xc7, 0x20, 0x49, 0x8b, 0x4f, 0x08, 0x48, 0x85,
        0xc9, 0x0f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x55,
        0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10, 0x4d,
        0x8b, 0x45, 0xf0, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x0f, 0xb6, 0x7a, 0x18, 0x85, 0xff, 0x74, 0x21,
        0xbe, 0x01, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4d,
        0xf8, 0x48, 0x89, 0xc1, 0x4d, 0x89, 0xc5, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe8,
        0x48, 0x8b, 0x4d, 0xf8, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x4d, 0x89, 0x47, 0x08, 0x49, 0x83, 0xc5,
        0xf0, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x15, 0xff, 0xc8, 0x89, 0x03,
        0x75, 0x0f, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xcb,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xd9, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x0f, 0xff,
        0xc8, 0x89, 0x01, 0x75, 0x09, 0x48, 0x89, 0xcf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x10,
        0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyDict_SendEvent+0x0
    // 10: OPARG
    // 18: OPERAND0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyDict_SendEvent);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0xd, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x14);
    patch_32r(code + 0x22, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x2c, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0xc);
    patch_32r(code + 0x5e, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x73, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0xa1, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xd2, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xea, (uintptr_t)data + -0x4);
}

void
emit__STORE_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_DEREF.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: 49 8b 4c cc 50                movq    0x50(%r12,%rcx,8), %rcx
    // 10: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 15: 48 8b 79 10                   movq    0x10(%rcx), %rdi
    // 19: 48 89 41 10                   movq    %rax, 0x10(%rcx)
    // 1d: 48 85 ff                      testq   %rdi, %rdi
    // 20: 74 0c                         je      0x2e <__JIT_ENTRY+0x2e>
    // 22: 8b 07                         movl    (%rdi), %eax
    // 24: 85 c0                         testl   %eax, %eax
    // 26: 78 06                         js      0x2e <__JIT_ENTRY+0x2e>
    // 28: ff c8                         decl    %eax
    // 2a: 89 07                         movl    %eax, (%rdi)
    // 2c: 74 17                         je      0x45 <__JIT_ENTRY+0x45>
    // 2e: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 33: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3c: 49 83 c5 f8                   addq    $-0x8, %r13
    // 40: e9 00 00 00 00                jmp     0x45 <__JIT_ENTRY+0x45>
    // 0000000000000041:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 45: 55                            pushq   %rbp
    // 46: 48 89 e5                      movq    %rsp, %rbp
    // 49: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4f <__JIT_ENTRY+0x4f>
    // 000000000000004b:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 4f: 5d                            popq    %rbp
    // 50: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 55: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 5e: 49 83 c5 f8                   addq    $-0x8, %r13
    // 62: e9 00 00 00 00                jmp     0x67 <__JIT_ENTRY+0x67>
    // 0000000000000063:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[98] = {
        0x49, 0x8b, 0x45, 0xf8, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x4c, 0xcc, 0x50,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b, 0x79,
        0x10, 0x48, 0x89, 0x41, 0x10, 0x48, 0x85, 0xff,
        0x74, 0x0c, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x07, 0x74, 0x17, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc5, 0xf8,
        0xe9, 0x00, 0x00, 0x00, 0x00, 0x55, 0x48, 0x89,
        0xe5, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x5d,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83,
        0xc5, 0xf8,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x4);
    patch_32r(code + 0x41, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + -0x4);
}

void
emit__STORE_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 49 83 c5 f8                   addq    $-0x8, %r13
    // 8: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // f: 49 8b 7c cc 50                movq    0x50(%r12,%rcx,8), %rdi
    // 14: 49 89 44 cc 50                movq    %rax, 0x50(%r12,%rcx,8)
    // 19: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 1e: 48 85 ff                      testq   %rdi, %rdi
    // 21: 74 0c                         je      0x2f <__JIT_ENTRY+0x2f>
    // 23: 8b 07                         movl    (%rdi), %eax
    // 25: 85 c0                         testl   %eax, %eax
    // 27: 78 06                         js      0x2f <__JIT_ENTRY+0x2f>
    // 29: ff c8                         decl    %eax
    // 2b: 89 07                         movl    %eax, (%rdi)
    // 2d: 74 13                         je      0x42 <__JIT_ENTRY+0x42>
    // 2f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 34: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3d: e9 00 00 00 00                jmp     0x42 <__JIT_ENTRY+0x42>
    // 000000000000003e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 42: 55                            pushq   %rbp
    // 43: 48 89 e5                      movq    %rsp, %rbp
    // 46: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4c <__JIT_ENTRY+0x4c>
    // 0000000000000048:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 4c: 5d                            popq    %rbp
    // 4d: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 52: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 5b: e9 00 00 00 00                jmp     0x60 <__JIT_ENTRY+0x60>
    // 000000000000005c:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[91] = {
        0x49, 0x8b, 0x45, 0xf8, 0x49, 0x83, 0xc5, 0xf8,
        0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x7c, 0xcc, 0x50, 0x49, 0x89, 0x44, 0xcc,
        0x50, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x85,
        0xff, 0x74, 0x0c, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x13, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x4);
    patch_32r(code + 0x3e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x48, (uintptr_t)data + -0x4);
}

void
emit__STORE_FAST_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_0.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 49 83 c5 f8                   addq    $-0x8, %r13
    // 8: 49 8b 7c 24 50                movq    0x50(%r12), %rdi
    // d: 49 89 44 24 50                movq    %rax, 0x50(%r12)
    // 12: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 17: 48 85 ff                      testq   %rdi, %rdi
    // 1a: 74 0c                         je      0x28 <__JIT_ENTRY+0x28>
    // 1c: 8b 07                         movl    (%rdi), %eax
    // 1e: 85 c0                         testl   %eax, %eax
    // 20: 78 06                         js      0x28 <__JIT_ENTRY+0x28>
    // 22: ff c8                         decl    %eax
    // 24: 89 07                         movl    %eax, (%rdi)
    // 26: 74 13                         je      0x3b <__JIT_ENTRY+0x3b>
    // 28: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2d: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 36: e9 00 00 00 00                jmp     0x3b <__JIT_ENTRY+0x3b>
    // 0000000000000037:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3b: 55                            pushq   %rbp
    // 3c: 48 89 e5                      movq    %rsp, %rbp
    // 3f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x45 <__JIT_ENTRY+0x45>
    // 0000000000000041:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 45: 5d                            popq    %rbp
    // 46: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 4b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 54: e9 00 00 00 00                jmp     0x59 <__JIT_ENTRY+0x59>
    // 0000000000000055:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[84] = {
        0x49, 0x8b, 0x45, 0xf8, 0x49, 0x83, 0xc5, 0xf8,
        0x49, 0x8b, 0x7c, 0x24, 0x50, 0x49, 0x89, 0x44,
        0x24, 0x50, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48,
        0x85, 0xff, 0x74, 0x0c, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x13,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x37, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + -0x4);
}

void
emit__STORE_FAST_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_1.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 49 83 c5 f8                   addq    $-0x8, %r13
    // 8: 49 8b 7c 24 58                movq    0x58(%r12), %rdi
    // d: 49 89 44 24 58                movq    %rax, 0x58(%r12)
    // 12: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 17: 48 85 ff                      testq   %rdi, %rdi
    // 1a: 74 0c                         je      0x28 <__JIT_ENTRY+0x28>
    // 1c: 8b 07                         movl    (%rdi), %eax
    // 1e: 85 c0                         testl   %eax, %eax
    // 20: 78 06                         js      0x28 <__JIT_ENTRY+0x28>
    // 22: ff c8                         decl    %eax
    // 24: 89 07                         movl    %eax, (%rdi)
    // 26: 74 13                         je      0x3b <__JIT_ENTRY+0x3b>
    // 28: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2d: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 36: e9 00 00 00 00                jmp     0x3b <__JIT_ENTRY+0x3b>
    // 0000000000000037:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3b: 55                            pushq   %rbp
    // 3c: 48 89 e5                      movq    %rsp, %rbp
    // 3f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x45 <__JIT_ENTRY+0x45>
    // 0000000000000041:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 45: 5d                            popq    %rbp
    // 46: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 4b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 54: e9 00 00 00 00                jmp     0x59 <__JIT_ENTRY+0x59>
    // 0000000000000055:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[84] = {
        0x49, 0x8b, 0x45, 0xf8, 0x49, 0x83, 0xc5, 0xf8,
        0x49, 0x8b, 0x7c, 0x24, 0x58, 0x49, 0x89, 0x44,
        0x24, 0x58, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48,
        0x85, 0xff, 0x74, 0x0c, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x13,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x37, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + -0x4);
}

void
emit__STORE_FAST_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_2.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 49 83 c5 f8                   addq    $-0x8, %r13
    // 8: 49 8b 7c 24 60                movq    0x60(%r12), %rdi
    // d: 49 89 44 24 60                movq    %rax, 0x60(%r12)
    // 12: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 17: 48 85 ff                      testq   %rdi, %rdi
    // 1a: 74 0c                         je      0x28 <__JIT_ENTRY+0x28>
    // 1c: 8b 07                         movl    (%rdi), %eax
    // 1e: 85 c0                         testl   %eax, %eax
    // 20: 78 06                         js      0x28 <__JIT_ENTRY+0x28>
    // 22: ff c8                         decl    %eax
    // 24: 89 07                         movl    %eax, (%rdi)
    // 26: 74 13                         je      0x3b <__JIT_ENTRY+0x3b>
    // 28: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2d: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 36: e9 00 00 00 00                jmp     0x3b <__JIT_ENTRY+0x3b>
    // 0000000000000037:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3b: 55                            pushq   %rbp
    // 3c: 48 89 e5                      movq    %rsp, %rbp
    // 3f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x45 <__JIT_ENTRY+0x45>
    // 0000000000000041:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 45: 5d                            popq    %rbp
    // 46: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 4b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 54: e9 00 00 00 00                jmp     0x59 <__JIT_ENTRY+0x59>
    // 0000000000000055:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[84] = {
        0x49, 0x8b, 0x45, 0xf8, 0x49, 0x83, 0xc5, 0xf8,
        0x49, 0x8b, 0x7c, 0x24, 0x60, 0x49, 0x89, 0x44,
        0x24, 0x60, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48,
        0x85, 0xff, 0x74, 0x0c, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x13,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x37, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + -0x4);
}

void
emit__STORE_FAST_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_3.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 49 83 c5 f8                   addq    $-0x8, %r13
    // 8: 49 8b 7c 24 68                movq    0x68(%r12), %rdi
    // d: 49 89 44 24 68                movq    %rax, 0x68(%r12)
    // 12: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 17: 48 85 ff                      testq   %rdi, %rdi
    // 1a: 74 0c                         je      0x28 <__JIT_ENTRY+0x28>
    // 1c: 8b 07                         movl    (%rdi), %eax
    // 1e: 85 c0                         testl   %eax, %eax
    // 20: 78 06                         js      0x28 <__JIT_ENTRY+0x28>
    // 22: ff c8                         decl    %eax
    // 24: 89 07                         movl    %eax, (%rdi)
    // 26: 74 13                         je      0x3b <__JIT_ENTRY+0x3b>
    // 28: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2d: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 36: e9 00 00 00 00                jmp     0x3b <__JIT_ENTRY+0x3b>
    // 0000000000000037:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3b: 55                            pushq   %rbp
    // 3c: 48 89 e5                      movq    %rsp, %rbp
    // 3f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x45 <__JIT_ENTRY+0x45>
    // 0000000000000041:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 45: 5d                            popq    %rbp
    // 46: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 4b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 54: e9 00 00 00 00                jmp     0x59 <__JIT_ENTRY+0x59>
    // 0000000000000055:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[84] = {
        0x49, 0x8b, 0x45, 0xf8, 0x49, 0x83, 0xc5, 0xf8,
        0x49, 0x8b, 0x7c, 0x24, 0x68, 0x49, 0x89, 0x44,
        0x24, 0x68, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48,
        0x85, 0xff, 0x74, 0x0c, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x13,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x37, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + -0x4);
}

void
emit__STORE_FAST_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_4.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 49 83 c5 f8                   addq    $-0x8, %r13
    // 8: 49 8b 7c 24 70                movq    0x70(%r12), %rdi
    // d: 49 89 44 24 70                movq    %rax, 0x70(%r12)
    // 12: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 17: 48 85 ff                      testq   %rdi, %rdi
    // 1a: 74 0c                         je      0x28 <__JIT_ENTRY+0x28>
    // 1c: 8b 07                         movl    (%rdi), %eax
    // 1e: 85 c0                         testl   %eax, %eax
    // 20: 78 06                         js      0x28 <__JIT_ENTRY+0x28>
    // 22: ff c8                         decl    %eax
    // 24: 89 07                         movl    %eax, (%rdi)
    // 26: 74 13                         je      0x3b <__JIT_ENTRY+0x3b>
    // 28: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2d: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 36: e9 00 00 00 00                jmp     0x3b <__JIT_ENTRY+0x3b>
    // 0000000000000037:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3b: 55                            pushq   %rbp
    // 3c: 48 89 e5                      movq    %rsp, %rbp
    // 3f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x45 <__JIT_ENTRY+0x45>
    // 0000000000000041:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 45: 5d                            popq    %rbp
    // 46: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 4b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 54: e9 00 00 00 00                jmp     0x59 <__JIT_ENTRY+0x59>
    // 0000000000000055:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[84] = {
        0x49, 0x8b, 0x45, 0xf8, 0x49, 0x83, 0xc5, 0xf8,
        0x49, 0x8b, 0x7c, 0x24, 0x70, 0x49, 0x89, 0x44,
        0x24, 0x70, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48,
        0x85, 0xff, 0x74, 0x0c, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x13,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x37, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + -0x4);
}

void
emit__STORE_FAST_5(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_5.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 49 83 c5 f8                   addq    $-0x8, %r13
    // 8: 49 8b 7c 24 78                movq    0x78(%r12), %rdi
    // d: 49 89 44 24 78                movq    %rax, 0x78(%r12)
    // 12: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 17: 48 85 ff                      testq   %rdi, %rdi
    // 1a: 74 0c                         je      0x28 <__JIT_ENTRY+0x28>
    // 1c: 8b 07                         movl    (%rdi), %eax
    // 1e: 85 c0                         testl   %eax, %eax
    // 20: 78 06                         js      0x28 <__JIT_ENTRY+0x28>
    // 22: ff c8                         decl    %eax
    // 24: 89 07                         movl    %eax, (%rdi)
    // 26: 74 13                         je      0x3b <__JIT_ENTRY+0x3b>
    // 28: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2d: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 36: e9 00 00 00 00                jmp     0x3b <__JIT_ENTRY+0x3b>
    // 0000000000000037:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3b: 55                            pushq   %rbp
    // 3c: 48 89 e5                      movq    %rsp, %rbp
    // 3f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x45 <__JIT_ENTRY+0x45>
    // 0000000000000041:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 45: 5d                            popq    %rbp
    // 46: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 4b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 54: e9 00 00 00 00                jmp     0x59 <__JIT_ENTRY+0x59>
    // 0000000000000055:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[84] = {
        0x49, 0x8b, 0x45, 0xf8, 0x49, 0x83, 0xc5, 0xf8,
        0x49, 0x8b, 0x7c, 0x24, 0x78, 0x49, 0x89, 0x44,
        0x24, 0x78, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48,
        0x85, 0xff, 0x74, 0x0c, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x13,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x37, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + -0x4);
}

void
emit__STORE_FAST_6(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_6.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 49 83 c5 f8                   addq    $-0x8, %r13
    // 8: 49 8b bc 24 80 00 00 00       movq    0x80(%r12), %rdi
    // 10: 49 89 84 24 80 00 00 00       movq    %rax, 0x80(%r12)
    // 18: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 1d: 48 85 ff                      testq   %rdi, %rdi
    // 20: 74 0c                         je      0x2e <__JIT_ENTRY+0x2e>
    // 22: 8b 07                         movl    (%rdi), %eax
    // 24: 85 c0                         testl   %eax, %eax
    // 26: 78 06                         js      0x2e <__JIT_ENTRY+0x2e>
    // 28: ff c8                         decl    %eax
    // 2a: 89 07                         movl    %eax, (%rdi)
    // 2c: 74 13                         je      0x41 <__JIT_ENTRY+0x41>
    // 2e: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 33: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3c: e9 00 00 00 00                jmp     0x41 <__JIT_ENTRY+0x41>
    // 000000000000003d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 41: 55                            pushq   %rbp
    // 42: 48 89 e5                      movq    %rsp, %rbp
    // 45: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4b <__JIT_ENTRY+0x4b>
    // 0000000000000047:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 4b: 5d                            popq    %rbp
    // 4c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 51: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 5a: e9 00 00 00 00                jmp     0x5f <__JIT_ENTRY+0x5f>
    // 000000000000005b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[90] = {
        0x49, 0x8b, 0x45, 0xf8, 0x49, 0x83, 0xc5, 0xf8,
        0x49, 0x8b, 0xbc, 0x24, 0x80, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x85, 0xff,
        0x74, 0x0c, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x07, 0x74, 0x13, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x55, 0x48, 0x89, 0xe5, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x5d, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x3d, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + -0x4);
}

void
emit__STORE_FAST_7(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_FAST_7.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 49 83 c5 f8                   addq    $-0x8, %r13
    // 8: 49 8b bc 24 88 00 00 00       movq    0x88(%r12), %rdi
    // 10: 49 89 84 24 88 00 00 00       movq    %rax, 0x88(%r12)
    // 18: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 1d: 48 85 ff                      testq   %rdi, %rdi
    // 20: 74 0c                         je      0x2e <__JIT_ENTRY+0x2e>
    // 22: 8b 07                         movl    (%rdi), %eax
    // 24: 85 c0                         testl   %eax, %eax
    // 26: 78 06                         js      0x2e <__JIT_ENTRY+0x2e>
    // 28: ff c8                         decl    %eax
    // 2a: 89 07                         movl    %eax, (%rdi)
    // 2c: 74 13                         je      0x41 <__JIT_ENTRY+0x41>
    // 2e: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 33: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3c: e9 00 00 00 00                jmp     0x41 <__JIT_ENTRY+0x41>
    // 000000000000003d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 41: 55                            pushq   %rbp
    // 42: 48 89 e5                      movq    %rsp, %rbp
    // 45: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4b <__JIT_ENTRY+0x4b>
    // 0000000000000047:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 4b: 5d                            popq    %rbp
    // 4c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 51: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 5a: e9 00 00 00 00                jmp     0x5f <__JIT_ENTRY+0x5f>
    // 000000000000005b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[90] = {
        0x49, 0x8b, 0x45, 0xf8, 0x49, 0x83, 0xc5, 0xf8,
        0x49, 0x8b, 0xbc, 0x24, 0x88, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x85, 0xff,
        0x74, 0x0c, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x07, 0x74, 0x13, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x55, 0x48, 0x89, 0xe5, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x5d, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x3d, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + -0x4);
}

void
emit__STORE_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_GLOBAL.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 8: 49 8b 04 24                   movq    (%r12), %rax
    // c: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
    // 11: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 15: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x1c <__JIT_ENTRY+0x1c>
    // 0000000000000018:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 1c: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
    // 21: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 26: 48 89 da                      movq    %rbx, %rdx
    // 29: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2f <__JIT_ENTRY+0x2f>
    // 000000000000002b:  X86_64_RELOC_GOT     _PyDict_SetItem@GOTPCREL
    // 2f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 34: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3d: 8b 0b                         movl    (%rbx), %ecx
    // 3f: 85 c9                         testl   %ecx, %ecx
    // 41: 78 06                         js      0x49 <__JIT_ENTRY+0x49>
    // 43: ff c9                         decl    %ecx
    // 45: 89 0b                         movl    %ecx, (%rbx)
    // 47: 74 0e                         je      0x57 <__JIT_ENTRY+0x57>
    // 49: 49 83 c5 f8                   addq    $-0x8, %r13
    // 4d: 85 c0                         testl   %eax, %eax
    // 4f: 74 1b                         je      0x6c <__JIT_ENTRY+0x6c>
    // 51: 5d                            popq    %rbp
    // 52: e9 00 00 00 00                jmp     0x57 <__JIT_ENTRY+0x57>
    // 0000000000000053:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 57: 48 89 df                      movq    %rbx, %rdi
    // 5a: 89 c3                         movl    %eax, %ebx
    // 5c: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x62 <__JIT_ENTRY+0x62>
    // 000000000000005e:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 62: 89 d8                         movl    %ebx, %eax
    // 64: 49 83 c5 f8                   addq    $-0x8, %r13
    // 68: 85 c0                         testl   %eax, %eax
    // 6a: 75 e5                         jne     0x51 <__JIT_ENTRY+0x51>
    // 6c: 5d                            popq    %rbp
    // 6d: e9 00 00 00 00                jmp     0x72 <__JIT_ENTRY+0x72>
    // 000000000000006e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[109] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x5d, 0xf8,
        0x49, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x7c, 0x24,
        0x18, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x74, 0xc8,
        0x18, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89,
        0xda, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0b, 0x85,
        0xc9, 0x78, 0x06, 0xff, 0xc9, 0x89, 0x0b, 0x74,
        0x0e, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x74,
        0x1b, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xdf, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xd8, 0x49, 0x83, 0xc5, 0xf8,
        0x85, 0xc0, 0x75, 0xe5, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyDict_SetItem+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyDict_SetItem);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + 0x4);
    patch_32r(code + 0x53, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x5e, (uintptr_t)data + -0x4);
}

void
emit__STORE_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_NAME.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 8: 49 8b 04 24                   movq    (%r12), %rax
    // c: 49 8b 7c 24 28                movq    0x28(%r12), %rdi
    // 11: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 15: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            ## 0x1c <__JIT_ENTRY+0x1c>
    // 0000000000000018:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 1c: 48 8b 4c c8 18                movq    0x18(%rax,%rcx,8), %rcx
    // 21: 48 85 ff                      testq   %rdi, %rdi
    // 24: 74 20                         je      0x46 <__JIT_ENTRY+0x46>
    // 26: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 2a: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2f: 48 89 ce                      movq    %rcx, %rsi
    // 32: 48 89 da                      movq    %rbx, %rdx
    // 35: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x3c <__JIT_ENTRY+0x3c>
    // 0000000000000038:  X86_64_RELOC_GOT     _PyDict_Type@GOTPCREL
    // 3c: 74 4d                         je      0x8b <__JIT_ENTRY+0x8b>
    // 3e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x44 <__JIT_ENTRY+0x44>
    // 0000000000000040:  X86_64_RELOC_GOT     _PyObject_SetItem@GOTPCREL
    // 44: eb 4b                         jmp     0x91 <__JIT_ENTRY+0x91>
    // 46: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 4b: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x52 <__JIT_ENTRY+0x52>
    // 000000000000004e:  X86_64_RELOC_GOT_LOAD        _PyExc_SystemError@GOTPCREL
    // 52: 48 8b 30                      movq    (%rax), %rsi
    // 55: 48 8d 15 8b 00 00 00          leaq    0x8b(%rip), %rdx        ## 0xe7 <__JIT_ENTRY+0xe7>
    // 0000000000000058:  X86_64_RELOC_SIGNED  __cstring
    // 5c: 4c 89 f7                      movq    %r14, %rdi
    // 5f: 31 c0                         xorl    %eax, %eax
    // 61: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x67 <__JIT_ENTRY+0x67>
    // 0000000000000063:  X86_64_RELOC_GOT     __PyErr_Format@GOTPCREL
    // 67: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 6c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 75: 8b 03                         movl    (%rbx), %eax
    // 77: 85 c0                         testl   %eax, %eax
    // 79: 78 06                         js      0x81 <__JIT_ENTRY+0x81>
    // 7b: ff c8                         decl    %eax
    // 7d: 89 03                         movl    %eax, (%rbx)
    // 7f: 74 53                         je      0xd4 <__JIT_ENTRY+0xd4>
    // 81: 49 83 c5 f8                   addq    $-0x8, %r13
    // 85: 5d                            popq    %rbp
    // 86: e9 00 00 00 00                jmp     0x8b <__JIT_ENTRY+0x8b>
    // 0000000000000087:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 8b: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x91 <__JIT_ENTRY+0x91>
    // 000000000000008d:  X86_64_RELOC_GOT     _PyDict_SetItem@GOTPCREL
    // 91: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 96: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 9f: 8b 0b                         movl    (%rbx), %ecx
    // a1: 85 c9                         testl   %ecx, %ecx
    // a3: 78 06                         js      0xab <__JIT_ENTRY+0xab>
    // a5: ff c9                         decl    %ecx
    // a7: 89 0b                         movl    %ecx, (%rbx)
    // a9: 74 0e                         je      0xb9 <__JIT_ENTRY+0xb9>
    // ab: 49 83 c5 f8                   addq    $-0x8, %r13
    // af: 85 c0                         testl   %eax, %eax
    // b1: 74 1b                         je      0xce <__JIT_ENTRY+0xce>
    // b3: 5d                            popq    %rbp
    // b4: e9 00 00 00 00                jmp     0xb9 <__JIT_ENTRY+0xb9>
    // 00000000000000b5:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // b9: 48 89 df                      movq    %rbx, %rdi
    // bc: 89 c3                         movl    %eax, %ebx
    // be: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xc4 <__JIT_ENTRY+0xc4>
    // 00000000000000c0:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // c4: 89 d8                         movl    %ebx, %eax
    // c6: 49 83 c5 f8                   addq    $-0x8, %r13
    // ca: 85 c0                         testl   %eax, %eax
    // cc: 75 e5                         jne     0xb3 <__JIT_ENTRY+0xb3>
    // ce: 5d                            popq    %rbp
    // cf: e9 00 00 00 00                jmp     0xd4 <__JIT_ENTRY+0xd4>
    // 00000000000000d0:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // d4: 48 89 df                      movq    %rbx, %rdi
    // d7: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xdd <__JIT_ENTRY+0xdd>
    // 00000000000000d9:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // dd: 49 83 c5 f8                   addq    $-0x8, %r13
    // e1: 5d                            popq    %rbp
    // e2: e9 00 00 00 00                jmp     0xe7 <__JIT_ENTRY+0xe7>
    // 00000000000000e3:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[231] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x5d, 0xf8,
        0x49, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x7c, 0x24,
        0x28, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0xc8,
        0x18, 0x48, 0x85, 0xff, 0x74, 0x20, 0x48, 0x8b,
        0x47, 0x08, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48,
        0x89, 0xce, 0x48, 0x89, 0xda, 0x48, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x74, 0x4d, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0xeb, 0x4b, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8d, 0x15,
        0x8b, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31,
        0xc0, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0x85,
        0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x03, 0x74,
        0x53, 0x49, 0x83, 0xc5, 0xf8, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x0b, 0x85, 0xc9, 0x78, 0x06, 0xff, 0xc9, 0x89,
        0x0b, 0x74, 0x0e, 0x49, 0x83, 0xc5, 0xf8, 0x85,
        0xc0, 0x74, 0x1b, 0x5d, 0xe9, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xdf, 0x89, 0xc3, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xd8, 0x49, 0x83,
        0xc5, 0xf8, 0x85, 0xc0, 0x75, 0xe5, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc5,
        0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 'no locals found when storing %R\x00'
    // 20: &_Py_Dealloc+0x0
    // 28: &PyDict_SetItem+0x0
    // 30: &_PyErr_Format+0x0
    // 38: &PyExc_SystemError+0x0
    // 40: &PyObject_SetItem+0x0
    // 48: &PyDict_Type+0x0
    // 50: OPARG
    const unsigned char data_body[88] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
        0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f,
        0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)&PyDict_SetItem);
    patch_64(data + 0x30, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x38, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x40, (uintptr_t)&PyObject_SetItem);
    patch_64(data + 0x48, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x50, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0x38, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)data + 0x34);
    patch_32r(code + 0x58, (uintptr_t)data + 0x16e);
    patch_x86_64_32rx(code + 0x63, (uintptr_t)data + 0x2c);
    patch_32r(code + 0x87, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x8d, (uintptr_t)data + 0x24);
    patch_32r(code + 0xb5, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0xc0, (uintptr_t)data + 0x1c);
    patch_32r(code + 0xd0, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xd9, (uintptr_t)data + 0x1c);
    patch_32r(code + 0xe3, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__STORE_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_SLICE.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 10: 49 8b 7d f0                   movq    -0x10(%r13), %rdi
    // 14: 4d 8b 7d e0                   movq    -0x20(%r13), %r15
    // 18: 4d 8b 75 e8                   movq    -0x18(%r13), %r14
    // 1c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 21: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x27 <__JIT_ENTRY+0x27>
    // 0000000000000023:  X86_64_RELOC_GOT     __PyBuildSlice_ConsumeRefs@GOTPCREL
    // 27: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 35: 48 85 c0                      testq   %rax, %rax
    // 38: 74 54                         je      0x8e <__JIT_ENTRY+0x8e>
    // 3a: 48 89 c3                      movq    %rax, %rbx
    // 3d: 49 83 c5 f0                   addq    $-0x10, %r13
    // 41: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 46: 4c 89 f7                      movq    %r14, %rdi
    // 49: 48 89 c6                      movq    %rax, %rsi
    // 4c: 4c 89 fa                      movq    %r15, %rdx
    // 4f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x55 <__JIT_ENTRY+0x55>
    // 0000000000000051:  X86_64_RELOC_GOT     _PyObject_SetItem@GOTPCREL
    // 55: 8b 0b                         movl    (%rbx), %ecx
    // 57: 85 c9                         testl   %ecx, %ecx
    // 59: 78 13                         js      0x6e <__JIT_ENTRY+0x6e>
    // 5b: ff c9                         decl    %ecx
    // 5d: 89 0b                         movl    %ecx, (%rbx)
    // 5f: 75 0d                         jne     0x6e <__JIT_ENTRY+0x6e>
    // 61: 48 89 df                      movq    %rbx, %rdi
    // 64: 89 c3                         movl    %eax, %ebx
    // 66: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x6c <__JIT_ENTRY+0x6c>
    // 0000000000000068:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 6c: 89 d8                         movl    %ebx, %eax
    // 6e: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 73: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 7c: 49 83 c5 10                   addq    $0x10, %r13
    // 80: 85 c0                         testl   %eax, %eax
    // 82: 0f 94 c3                      sete    %bl
    // 85: 41 8b 07                      movl    (%r15), %eax
    // 88: 85 c0                         testl   %eax, %eax
    // 8a: 79 0b                         jns     0x97 <__JIT_ENTRY+0x97>
    // 8c: eb 19                         jmp     0xa7 <__JIT_ENTRY+0xa7>
    // 8e: 31 db                         xorl    %ebx, %ebx
    // 90: 41 8b 07                      movl    (%r15), %eax
    // 93: 85 c0                         testl   %eax, %eax
    // 95: 78 10                         js      0xa7 <__JIT_ENTRY+0xa7>
    // 97: ff c8                         decl    %eax
    // 99: 41 89 07                      movl    %eax, (%r15)
    // 9c: 75 09                         jne     0xa7 <__JIT_ENTRY+0xa7>
    // 9e: 4c 89 ff                      movq    %r15, %rdi
    // a1: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xa7 <__JIT_ENTRY+0xa7>
    // 00000000000000a3:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // a7: 41 8b 06                      movl    (%r14), %eax
    // aa: 85 c0                         testl   %eax, %eax
    // ac: 78 07                         js      0xb5 <__JIT_ENTRY+0xb5>
    // ae: ff c8                         decl    %eax
    // b0: 41 89 06                      movl    %eax, (%r14)
    // b3: 74 16                         je      0xcb <__JIT_ENTRY+0xcb>
    // b5: 49 83 c5 e0                   addq    $-0x20, %r13
    // b9: 84 db                         testb   %bl, %bl
    // bb: 74 1f                         je      0xdc <__JIT_ENTRY+0xdc>
    // bd: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // c1: 48 83 c4 10                   addq    $0x10, %rsp
    // c5: 5d                            popq    %rbp
    // c6: e9 00 00 00 00                jmp     0xcb <__JIT_ENTRY+0xcb>
    // 00000000000000c7:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // cb: 4c 89 f7                      movq    %r14, %rdi
    // ce: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xd4 <__JIT_ENTRY+0xd4>
    // 00000000000000d0:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // d4: 49 83 c5 e0                   addq    $-0x20, %r13
    // d8: 84 db                         testb   %bl, %bl
    // da: 75 e1                         jne     0xbd <__JIT_ENTRY+0xbd>
    // dc: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // e0: 48 83 c4 10                   addq    $0x10, %rsp
    // e4: 5d                            popq    %rbp
    // e5: e9 00 00 00 00                jmp     0xea <__JIT_ENTRY+0xea>
    // 00000000000000e6:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[234] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0x75, 0xf8, 0x49, 0x8b, 0x75, 0xf8,
        0x49, 0x8b, 0x7d, 0xf0, 0x4d, 0x8b, 0x7d, 0xe0,
        0x4d, 0x8b, 0x75, 0xe8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x54, 0x48, 0x89, 0xc3, 0x49, 0x83, 0xc5,
        0xf0, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x4c, 0x89,
        0xf7, 0x48, 0x89, 0xc6, 0x4c, 0x89, 0xfa, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0b, 0x85,
        0xc9, 0x78, 0x13, 0xff, 0xc9, 0x89, 0x0b, 0x75,
        0x0d, 0x48, 0x89, 0xdf, 0x89, 0xc3, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xd8, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc5, 0x10,
        0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8b, 0x07,
        0x85, 0xc0, 0x79, 0x0b, 0xeb, 0x19, 0x31, 0xdb,
        0x41, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x10, 0xff,
        0xc8, 0x41, 0x89, 0x07, 0x75, 0x09, 0x4c, 0x89,
        0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x41,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x07, 0xff, 0xc8,
        0x41, 0x89, 0x06, 0x74, 0x16, 0x49, 0x83, 0xc5,
        0xe0, 0x84, 0xdb, 0x74, 0x1f, 0x4c, 0x8b, 0x75,
        0xf8, 0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc5, 0xe0,
        0x84, 0xdb, 0x75, 0xe1, 0x4c, 0x8b, 0x75, 0xf8,
        0x48, 0x83, 0xc4, 0x10, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyObject_SetItem+0x0
    // 10: &_PyBuildSlice_ConsumeRefs+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyObject_SetItem);
    patch_64(data + 0x10, (uintptr_t)&_PyBuildSlice_ConsumeRefs);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x23, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xa3, (uintptr_t)data + -0x4);
    patch_32r(code + 0xc7, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0xd0, (uintptr_t)data + -0x4);
    patch_32r(code + 0xe6, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__STORE_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_SUBSCR.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 10: 4d 8b 75 e8                   movq    -0x18(%r13), %r14
    // 14: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // 18: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 1d: 4c 89 ff                      movq    %r15, %rdi
    // 20: 48 89 de                      movq    %rbx, %rsi
    // 23: 4c 89 f2                      movq    %r14, %rdx
    // 26: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2c <__JIT_ENTRY+0x2c>
    // 0000000000000028:  X86_64_RELOC_GOT     _PyObject_SetItem@GOTPCREL
    // 2c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 31: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3a: 41 8b 0e                      movl    (%r14), %ecx
    // 3d: 85 c9                         testl   %ecx, %ecx
    // 3f: 78 16                         js      0x57 <__JIT_ENTRY+0x57>
    // 41: ff c9                         decl    %ecx
    // 43: 41 89 0e                      movl    %ecx, (%r14)
    // 46: 75 0f                         jne     0x57 <__JIT_ENTRY+0x57>
    // 48: 4c 89 f7                      movq    %r14, %rdi
    // 4b: 41 89 c6                      movl    %eax, %r14d
    // 4e: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x54 <__JIT_ENTRY+0x54>
    // 0000000000000050:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 54: 44 89 f0                      movl    %r14d, %eax
    // 57: 41 8b 0f                      movl    (%r15), %ecx
    // 5a: 85 c9                         testl   %ecx, %ecx
    // 5c: 78 16                         js      0x74 <__JIT_ENTRY+0x74>
    // 5e: ff c9                         decl    %ecx
    // 60: 41 89 0f                      movl    %ecx, (%r15)
    // 63: 75 0f                         jne     0x74 <__JIT_ENTRY+0x74>
    // 65: 4c 89 ff                      movq    %r15, %rdi
    // 68: 41 89 c6                      movl    %eax, %r14d
    // 6b: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x71 <__JIT_ENTRY+0x71>
    // 000000000000006d:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 71: 44 89 f0                      movl    %r14d, %eax
    // 74: 8b 0b                         movl    (%rbx), %ecx
    // 76: 85 c9                         testl   %ecx, %ecx
    // 78: 78 06                         js      0x80 <__JIT_ENTRY+0x80>
    // 7a: ff c9                         decl    %ecx
    // 7c: 89 0b                         movl    %ecx, (%rbx)
    // 7e: 74 16                         je      0x96 <__JIT_ENTRY+0x96>
    // 80: 49 83 c5 e8                   addq    $-0x18, %r13
    // 84: 85 c0                         testl   %eax, %eax
    // 86: 74 23                         je      0xab <__JIT_ENTRY+0xab>
    // 88: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 8c: 48 83 c4 10                   addq    $0x10, %rsp
    // 90: 5d                            popq    %rbp
    // 91: e9 00 00 00 00                jmp     0x96 <__JIT_ENTRY+0x96>
    // 0000000000000092:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 96: 48 89 df                      movq    %rbx, %rdi
    // 99: 89 c3                         movl    %eax, %ebx
    // 9b: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xa1 <__JIT_ENTRY+0xa1>
    // 000000000000009d:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // a1: 89 d8                         movl    %ebx, %eax
    // a3: 49 83 c5 e8                   addq    $-0x18, %r13
    // a7: 85 c0                         testl   %eax, %eax
    // a9: 75 dd                         jne     0x88 <__JIT_ENTRY+0x88>
    // ab: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // af: 48 83 c4 10                   addq    $0x10, %rsp
    // b3: 5d                            popq    %rbp
    // b4: e9 00 00 00 00                jmp     0xb9 <__JIT_ENTRY+0xb9>
    // 00000000000000b5:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[180] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0x75, 0xf8, 0x49, 0x8b, 0x5d, 0xf8,
        0x4d, 0x8b, 0x75, 0xe8, 0x4d, 0x8b, 0x7d, 0xf0,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x4c, 0x89, 0xff,
        0x48, 0x89, 0xde, 0x4c, 0x89, 0xf2, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x41, 0x8b, 0x0e, 0x85, 0xc9, 0x78,
        0x16, 0xff, 0xc9, 0x41, 0x89, 0x0e, 0x75, 0x0f,
        0x4c, 0x89, 0xf7, 0x41, 0x89, 0xc6, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x44, 0x89, 0xf0, 0x41,
        0x8b, 0x0f, 0x85, 0xc9, 0x78, 0x16, 0xff, 0xc9,
        0x41, 0x89, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff,
        0x41, 0x89, 0xc6, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x44, 0x89, 0xf0, 0x8b, 0x0b, 0x85, 0xc9,
        0x78, 0x06, 0xff, 0xc9, 0x89, 0x0b, 0x74, 0x16,
        0x49, 0x83, 0xc5, 0xe8, 0x85, 0xc0, 0x74, 0x23,
        0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xdf, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xd8, 0x49, 0x83, 0xc5, 0xe8, 0x85,
        0xc0, 0x75, 0xdd, 0x4c, 0x8b, 0x75, 0xf8, 0x48,
        0x83, 0xc4, 0x10, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyObject_SetItem+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyObject_SetItem);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x6d, (uintptr_t)data + -0x4);
    patch_32r(code + 0x92, state->instruction_starts[instruction->error_target] + -0x4);
    patch_x86_64_32rx(code + 0x9d, (uintptr_t)data + -0x4);
}

void
emit__STORE_SUBSCR_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_SUBSCR_DICT.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 4: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     _PyDict_Type@GOTPCREL
    // f: 0f 85 00 00 00 00             jne     0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 15: 55                            pushq   %rbp
    // 16: 48 89 e5                      movq    %rsp, %rbp
    // 19: 49 8b 55 e8                   movq    -0x18(%r13), %rdx
    // 1d: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 21: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 26: 48 89 df                      movq    %rbx, %rdi
    // 29: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2f <__JIT_ENTRY+0x2f>
    // 000000000000002b:  X86_64_RELOC_GOT     __PyDict_SetItem_Take2@GOTPCREL
    // 2f: 49 83 44 24 40 e8             addq    $-0x18, 0x40(%r12)
    // 35: 8b 0b                         movl    (%rbx), %ecx
    // 37: 85 c9                         testl   %ecx, %ecx
    // 39: 78 13                         js      0x4e <__JIT_ENTRY+0x4e>
    // 3b: ff c9                         decl    %ecx
    // 3d: 89 0b                         movl    %ecx, (%rbx)
    // 3f: 75 0d                         jne     0x4e <__JIT_ENTRY+0x4e>
    // 41: 48 89 df                      movq    %rbx, %rdi
    // 44: 89 c3                         movl    %eax, %ebx
    // 46: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4c <__JIT_ENTRY+0x4c>
    // 0000000000000048:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 4c: 89 d8                         movl    %ebx, %eax
    // 4e: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 53: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 5c: 85 c0                         testl   %eax, %eax
    // 5e: 5d                            popq    %rbp
    // 5f: 0f 85 00 00 00 00             jne     0x65 <__JIT_ENTRY+0x65>
    // 0000000000000061:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    // 65: e9 00 00 00 00                jmp     0x6a <__JIT_ENTRY+0x6a>
    // 0000000000000066:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[101] = {
        0x49, 0x8b, 0x5d, 0xf0, 0x48, 0x8b, 0x43, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x85, 0x00, 0x00, 0x00, 0x00, 0x55, 0x48, 0x89,
        0xe5, 0x49, 0x8b, 0x55, 0xe8, 0x49, 0x8b, 0x75,
        0xf8, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89,
        0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x83, 0x44, 0x24, 0x40, 0xe8, 0x8b, 0x0b, 0x85,
        0xc9, 0x78, 0x13, 0xff, 0xc9, 0x89, 0x0b, 0x75,
        0x0d, 0x48, 0x89, 0xdf, 0x89, 0xc3, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xd8, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x5d, 0x0f,
        0x85, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyDict_SetItem_Take2+0x0
    // 10: &PyDict_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyDict_SetItem_Take2);
    patch_64(data + 0x10, (uintptr_t)&PyDict_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0xc);
    patch_32r(code + 0x11, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x48, (uintptr_t)data + -0x4);
    patch_32r(code + 0x61, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__STORE_SUBSCR_LIST_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _STORE_SUBSCR_LIST_INT.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // 4: 49 8b 47 08                   movq    0x8(%r15), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     _PyLong_Type@GOTPCREL
    // f: 0f 85 00 00 00 00             jne     0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 15: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 19: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 1d: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x24 <__JIT_ENTRY+0x24>
    // 0000000000000020:  X86_64_RELOC_GOT     _PyList_Type@GOTPCREL
    // 24: 0f 85 00 00 00 00             jne     0x2a <__JIT_ENTRY+0x2a>
    // 0000000000000026:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 2a: 49 8b 47 10                   movq    0x10(%r15), %rax
    // 2e: 48 83 e0 fb                   andq    $-0x5, %rax
    // 32: 48 83 f8 09                   cmpq    $0x9, %rax
    // 36: 0f 83 00 00 00 00             jae     0x3c <__JIT_ENTRY+0x3c>
    // 0000000000000038:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 3c: 41 8b 47 18                   movl    0x18(%r15), %eax
    // 40: 48 39 43 10                   cmpq    %rax, 0x10(%rbx)
    // 44: 0f 8e 00 00 00 00             jle     0x4a <__JIT_ENTRY+0x4a>
    // 0000000000000046:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 4a: 55                            pushq   %rbp
    // 4b: 48 89 e5                      movq    %rsp, %rbp
    // 4e: 48 83 ec 10                   subq    $0x10, %rsp
    // 52: 49 8b 4d e8                   movq    -0x18(%r13), %rcx
    // 56: 49 83 c5 e8                   addq    $-0x18, %r13
    // 5a: 48 8b 53 18                   movq    0x18(%rbx), %rdx
    // 5e: 48 8b 3c c2                   movq    (%rdx,%rax,8), %rdi
    // 62: 48 89 0c c2                   movq    %rcx, (%rdx,%rax,8)
    // 66: 41 8b 07                      movl    (%r15), %eax
    // 69: 85 c0                         testl   %eax, %eax
    // 6b: 78 3c                         js      0xa9 <__JIT_ENTRY+0xa9>
    // 6d: ff c8                         decl    %eax
    // 6f: 41 89 07                      movl    %eax, (%r15)
    // 72: 75 35                         jne     0xa9 <__JIT_ENTRY+0xa9>
    // 74: 48 89 7d f8                   movq    %rdi, -0x8(%rbp)
    // 78: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            ## 0x7f <__JIT_ENTRY+0x7f>
    // 000000000000007b:  X86_64_RELOC_GOT_LOAD        __PyRuntime@GOTPCREL
    // 7f: 48 8b 81 40 26 00 00          movq    0x2640(%rcx), %rax
    // 86: 48 85 c0                      testq   %rax, %rax
    // 89: 74 11                         je      0x9c <__JIT_ENTRY+0x9c>
    // 8b: 48 8b 91 48 26 00 00          movq    0x2648(%rcx), %rdx
    // 92: 4c 89 ff                      movq    %r15, %rdi
    // 95: be 01 00 00 00                movl    $0x1, %esi
    // 9a: ff d0                         callq   *%rax
    // 9c: 4c 89 ff                      movq    %r15, %rdi
    // 9f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xa5 <__JIT_ENTRY+0xa5>
    // 00000000000000a1:  X86_64_RELOC_GOT     __PyLong_ExactDealloc@GOTPCREL
    // a5: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // a9: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // ae: 8b 03                         movl    (%rbx), %eax
    // b0: 85 c0                         testl   %eax, %eax
    // b2: 78 15                         js      0xc9 <__JIT_ENTRY+0xc9>
    // b4: ff c8                         decl    %eax
    // b6: 89 03                         movl    %eax, (%rbx)
    // b8: 75 0f                         jne     0xc9 <__JIT_ENTRY+0xc9>
    // ba: 49 89 ff                      movq    %rdi, %r15
    // bd: 48 89 df                      movq    %rbx, %rdi
    // c0: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xc6 <__JIT_ENTRY+0xc6>
    // 00000000000000c2:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // c6: 4c 89 ff                      movq    %r15, %rdi
    // c9: 8b 07                         movl    (%rdi), %eax
    // cb: 85 c0                         testl   %eax, %eax
    // cd: 78 0c                         js      0xdb <__JIT_ENTRY+0xdb>
    // cf: ff c8                         decl    %eax
    // d1: 89 07                         movl    %eax, (%rdi)
    // d3: 75 06                         jne     0xdb <__JIT_ENTRY+0xdb>
    // d5: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xdb <__JIT_ENTRY+0xdb>
    // 00000000000000d7:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // db: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // e0: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // e9: 48 83 c4 10                   addq    $0x10, %rsp
    // ed: 5d                            popq    %rbp
    // ee: e9 00 00 00 00                jmp     0xf3 <__JIT_ENTRY+0xf3>
    // 00000000000000ef:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[238] = {
        0x4d, 0x8b, 0x7d, 0xf8, 0x49, 0x8b, 0x47, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x85, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x5d,
        0xf0, 0x48, 0x8b, 0x43, 0x08, 0x48, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x83,
        0xe0, 0xfb, 0x48, 0x83, 0xf8, 0x09, 0x0f, 0x83,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x47, 0x18,
        0x48, 0x39, 0x43, 0x10, 0x0f, 0x8e, 0x00, 0x00,
        0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0x48, 0x83,
        0xec, 0x10, 0x49, 0x8b, 0x4d, 0xe8, 0x49, 0x83,
        0xc5, 0xe8, 0x48, 0x8b, 0x53, 0x18, 0x48, 0x8b,
        0x3c, 0xc2, 0x48, 0x89, 0x0c, 0xc2, 0x41, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x3c, 0xff, 0xc8, 0x41,
        0x89, 0x07, 0x75, 0x35, 0x48, 0x89, 0x7d, 0xf8,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x81, 0x40, 0x26, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x11, 0x48, 0x8b, 0x91, 0x48, 0x26,
        0x00, 0x00, 0x4c, 0x89, 0xff, 0xbe, 0x01, 0x00,
        0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0xff, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7d,
        0xf8, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x15, 0xff, 0xc8, 0x89, 0x03,
        0x75, 0x0f, 0x49, 0x89, 0xff, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xff, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0c, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0x06, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x10, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyLong_ExactDealloc+0x0
    // 10: &_PyRuntime+0x0
    // 18: &PyList_Type+0x0
    // 20: &PyLong_Type+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&PyList_Type);
    patch_64(data + 0x20, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x1c);
    patch_32r(code + 0x11, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + 0x14);
    patch_32r(code + 0x26, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x38, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x46, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xa1, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xc2, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xd7, (uintptr_t)data + -0x4);
}

void
emit__SWAP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _SWAP.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // b: c1 e0 03                      shll    $0x3, %eax
    // e: 4c 89 e9                      movq    %r13, %rcx
    // 11: 48 29 c1                      subq    %rax, %rcx
    // 14: 48 8b 01                      movq    (%rcx), %rax
    // 17: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // 1b: 48 89 11                      movq    %rdx, (%rcx)
    // 1e: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 22: 5d                            popq    %rbp
    // 23: e9 00 00 00 00                jmp     0x28 <__JIT_ENTRY+0x28>
    // 0000000000000024:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[35] = {
        0x55, 0x48, 0x89, 0xe5, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xc1, 0xe0, 0x03, 0x4c, 0x89,
        0xe9, 0x48, 0x29, 0xc1, 0x48, 0x8b, 0x01, 0x49,
        0x8b, 0x55, 0xf8, 0x48, 0x89, 0x11, 0x49, 0x89,
        0x45, 0xf8, 0x5d,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
}

void
emit__TIER2_RESUME_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TIER2_RESUME_CHECK.o:     file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 46 18                   movq    0x18(%r14), %rax
    // 8: 84 c0                         testb   %al, %al
    // a: 74 06                         je      0x12 <__JIT_ENTRY+0x12>
    // c: 5d                            popq    %rbp
    // d: e9 00 00 00 00                jmp     0x12 <__JIT_ENTRY+0x12>
    // 000000000000000e:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 12: 5d                            popq    %rbp
    // 13: e9 00 00 00 00                jmp     0x18 <__JIT_ENTRY+0x18>
    // 0000000000000014:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[19] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x46, 0x18,
        0x84, 0xc0, 0x74, 0x06, 0x5d, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x5d,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0xe, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__TO_BOOL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 48 89 df                      movq    %rbx, %rdi
    // 10: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x16 <__JIT_ENTRY+0x16>
    // 0000000000000012:  X86_64_RELOC_GOT     _PyObject_IsTrue@GOTPCREL
    // 16: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 1b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 24: 8b 0b                         movl    (%rbx), %ecx
    // 26: 85 c9                         testl   %ecx, %ecx
    // 28: 78 06                         js      0x30 <__JIT_ENTRY+0x30>
    // 2a: ff c9                         decl    %ecx
    // 2c: 89 0b                         movl    %ecx, (%rbx)
    // 2e: 74 28                         je      0x58 <__JIT_ENTRY+0x58>
    // 30: 85 c0                         testl   %eax, %eax
    // 32: 78 35                         js      0x69 <__JIT_ENTRY+0x69>
    // 34: 75 11                         jne     0x47 <__JIT_ENTRY+0x47>
    // 36: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x3d <__JIT_ENTRY+0x3d>
    // 0000000000000039:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // 3d: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 41: 5d                            popq    %rbp
    // 42: e9 00 00 00 00                jmp     0x47 <__JIT_ENTRY+0x47>
    // 0000000000000043:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 47: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x4e <__JIT_ENTRY+0x4e>
    // 000000000000004a:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // 4e: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 52: 5d                            popq    %rbp
    // 53: e9 00 00 00 00                jmp     0x58 <__JIT_ENTRY+0x58>
    // 0000000000000054:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 58: 48 89 df                      movq    %rbx, %rdi
    // 5b: 89 c3                         movl    %eax, %ebx
    // 5d: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x63 <__JIT_ENTRY+0x63>
    // 000000000000005f:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 63: 89 d8                         movl    %ebx, %eax
    // 65: 85 c0                         testl   %eax, %eax
    // 67: 79 cb                         jns     0x34 <__JIT_ENTRY+0x34>
    // 69: 49 83 c5 f8                   addq    $-0x8, %r13
    // 6d: 5d                            popq    %rbp
    // 6e: e9 00 00 00 00                jmp     0x73 <__JIT_ENTRY+0x73>
    // 000000000000006f:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[115] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x5d, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x0b, 0x85, 0xc9,
        0x78, 0x06, 0xff, 0xc9, 0x89, 0x0b, 0x74, 0x28,
        0x85, 0xc0, 0x78, 0x35, 0x75, 0x11, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45,
        0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x45, 0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xdf, 0x89, 0xc3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xd8, 0x85, 0xc0, 0x79,
        0xcb, 0x49, 0x83, 0xc5, 0xf8, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: &_Py_FalseStruct+0x0
    // 18: &PyObject_IsTrue+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)&PyObject_IsTrue);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x39, (uintptr_t)data + 0xc);
    patch_32r(code + 0x43, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)data + 0x4);
    patch_32r(code + 0x54, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + -0x4);
    patch_32r(code + 0x6f, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__TO_BOOL_BOOL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL_BOOL.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 40 08                   movq    0x8(%rax), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0x13 <__JIT_ENTRY+0x13>
    // 000000000000000f:  X86_64_RELOC_GOT     _PyBool_Type@GOTPCREL
    // 13: 74 06                         je      0x1b <__JIT_ENTRY+0x1b>
    // 15: 5d                            popq    %rbp
    // 16: e9 00 00 00 00                jmp     0x1b <__JIT_ENTRY+0x1b>
    // 0000000000000017:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 1b: 5d                            popq    %rbp
    // 1c: e9 00 00 00 00                jmp     0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x40, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x06, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x5d,
    };
    // 0: &PyBool_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyBool_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_32r(code + 0x17, state->instruction_starts[instruction->jump_target] + -0x4);
}

void
emit__TO_BOOL_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL_INT.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 4: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     _PyLong_Type@GOTPCREL
    // f: 0f 85 00 00 00 00             jne     0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 15: 8b 47 10                      movl    0x10(%rdi), %eax
    // 18: 83 e0 03                      andl    $0x3, %eax
    // 1b: 83 f8 01                      cmpl    $0x1, %eax
    // 1e: 75 10                         jne     0x30 <__JIT_ENTRY+0x30>
    // 20: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            ## 0x27 <__JIT_ENTRY+0x27>
    // 0000000000000023:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // 27: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 2b: e9 00 00 00 00                jmp     0x30 <__JIT_ENTRY+0x30>
    // 000000000000002c:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 30: 8b 07                         movl    (%rdi), %eax
    // 32: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            ## 0x39 <__JIT_ENTRY+0x39>
    // 0000000000000035:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // 39: 85 c0                         testl   %eax, %eax
    // 3b: 78 06                         js      0x43 <__JIT_ENTRY+0x43>
    // 3d: ff c8                         decl    %eax
    // 3f: 89 07                         movl    %eax, (%rdi)
    // 41: 74 09                         je      0x4c <__JIT_ENTRY+0x4c>
    // 43: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 47: e9 00 00 00 00                jmp     0x4c <__JIT_ENTRY+0x4c>
    // 0000000000000048:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 4c: 55                            pushq   %rbp
    // 4d: 48 89 e5                      movq    %rsp, %rbp
    // 50: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x56 <__JIT_ENTRY+0x56>
    // 0000000000000052:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 56: 5d                            popq    %rbp
    // 57: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 5b: e9 00 00 00 00                jmp     0x60 <__JIT_ENTRY+0x60>
    // 000000000000005c:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[91] = {
        0x49, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x47, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x85, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x47, 0x10,
        0x83, 0xe0, 0x03, 0x83, 0xf8, 0x01, 0x75, 0x10,
        0x48, 0x8b, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x5d, 0xf8, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x07, 0x48, 0x8b, 0x1d, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89,
        0x07, 0x74, 0x09, 0x49, 0x89, 0x5d, 0xf8, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x49,
        0x89, 0x5d, 0xf8,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: &_Py_FalseStruct+0x0
    // 18: &PyLong_Type+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x14);
    patch_32r(code + 0x11, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x23, (uintptr_t)data + 0xc);
    patch_32r(code + 0x2c, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x35, (uintptr_t)data + 0x4);
    patch_32r(code + 0x48, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x52, (uintptr_t)data + -0x4);
}

void
emit__TO_BOOL_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL_LIST.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 4: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     _PyList_Type@GOTPCREL
    // f: 0f 85 00 00 00 00             jne     0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 15: 55                            pushq   %rbp
    // 16: 48 89 e5                      movq    %rsp, %rbp
    // 19: 48 8b 5f 10                   movq    0x10(%rdi), %rbx
    // 1d: 8b 07                         movl    (%rdi), %eax
    // 1f: 85 c0                         testl   %eax, %eax
    // 21: 78 06                         js      0x29 <__JIT_ENTRY+0x29>
    // 23: ff c8                         decl    %eax
    // 25: 89 07                         movl    %eax, (%rdi)
    // 27: 74 16                         je      0x3f <__JIT_ENTRY+0x3f>
    // 29: 48 85 db                      testq   %rbx, %rbx
    // 2c: 75 1c                         jne     0x4a <__JIT_ENTRY+0x4a>
    // 2e: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x35 <__JIT_ENTRY+0x35>
    // 0000000000000031:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // 35: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 39: 5d                            popq    %rbp
    // 3a: e9 00 00 00 00                jmp     0x3f <__JIT_ENTRY+0x3f>
    // 000000000000003b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x45 <__JIT_ENTRY+0x45>
    // 0000000000000041:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 45: 48 85 db                      testq   %rbx, %rbx
    // 48: 74 e4                         je      0x2e <__JIT_ENTRY+0x2e>
    // 4a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x51 <__JIT_ENTRY+0x51>
    // 000000000000004d:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // 51: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 55: 5d                            popq    %rbp
    // 56: e9 00 00 00 00                jmp     0x5b <__JIT_ENTRY+0x5b>
    // 0000000000000057:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[86] = {
        0x49, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x47, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x85, 0x00, 0x00, 0x00, 0x00, 0x55, 0x48, 0x89,
        0xe5, 0x48, 0x8b, 0x5f, 0x10, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74,
        0x16, 0x48, 0x85, 0xdb, 0x75, 0x1c, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45,
        0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xdb,
        0x74, 0xe4, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x89, 0x45, 0xf8, 0x5d,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: &_Py_FalseStruct+0x0
    // 18: &PyList_Type+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)&PyList_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x14);
    patch_32r(code + 0x11, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x31, (uintptr_t)data + 0xc);
    patch_32r(code + 0x3b, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4d, (uintptr_t)data + -0x4);
}

void
emit__TO_BOOL_NONE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL_NONE.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     __Py_NoneStruct@GOTPCREL
    // f: 74 06                         je      0x17 <__JIT_ENTRY+0x17>
    // 11: 5d                            popq    %rbp
    // 12: e9 00 00 00 00                jmp     0x17 <__JIT_ENTRY+0x17>
    // 0000000000000013:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 17: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x1e <__JIT_ENTRY+0x1e>
    // 000000000000001a:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // 1e: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 22: 5d                            popq    %rbp
    // 23: e9 00 00 00 00                jmp     0x28 <__JIT_ENTRY+0x28>
    // 0000000000000024:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[35] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x06, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x45, 0xf8, 0x5d,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_NoneStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x4);
    patch_32r(code + 0x13, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + -0x4);
}

void
emit__TO_BOOL_STR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _TO_BOOL_STR.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 4: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     _PyUnicode_Type@GOTPCREL
    // f: 0f 85 00 00 00 00             jne     0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 15: b8 e0 87 00 00                movl    $0x87e0, %eax           ## imm = 0x87E0
    // 1a: 48 03 05 00 00 00 00          addq    (%rip), %rax            ## 0x21 <__JIT_ENTRY+0x21>
    // 000000000000001d:  X86_64_RELOC_GOT     __PyRuntime@GOTPCREL
    // 21: 48 39 c7                      cmpq    %rax, %rdi
    // 24: 74 1c                         je      0x42 <__JIT_ENTRY+0x42>
    // 26: 8b 07                         movl    (%rdi), %eax
    // 28: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            ## 0x2f <__JIT_ENTRY+0x2f>
    // 000000000000002b:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // 2f: 85 c0                         testl   %eax, %eax
    // 31: 78 06                         js      0x39 <__JIT_ENTRY+0x39>
    // 33: ff c8                         decl    %eax
    // 35: 89 07                         movl    %eax, (%rdi)
    // 37: 74 19                         je      0x52 <__JIT_ENTRY+0x52>
    // 39: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 3d: e9 00 00 00 00                jmp     0x42 <__JIT_ENTRY+0x42>
    // 000000000000003e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 42: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            ## 0x49 <__JIT_ENTRY+0x49>
    // 0000000000000045:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // 49: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 4d: e9 00 00 00 00                jmp     0x52 <__JIT_ENTRY+0x52>
    // 000000000000004e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 52: 55                            pushq   %rbp
    // 53: 48 89 e5                      movq    %rsp, %rbp
    // 56: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x5c <__JIT_ENTRY+0x5c>
    // 0000000000000058:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 5c: 5d                            popq    %rbp
    // 5d: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // 61: e9 00 00 00 00                jmp     0x66 <__JIT_ENTRY+0x66>
    // 0000000000000062:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[97] = {
        0x49, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x47, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x85, 0x00, 0x00, 0x00, 0x00, 0xb8, 0xe0, 0x87,
        0x00, 0x00, 0x48, 0x03, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x39, 0xc7, 0x74, 0x1c, 0x8b, 0x07,
        0x48, 0x8b, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x85,
        0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74,
        0x19, 0x49, 0x89, 0x5d, 0xf8, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x1d, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x89, 0x5d, 0xf8, 0xe9, 0x00, 0x00,
        0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x5d, 0x49, 0x89, 0x5d,
        0xf8,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: &_Py_TrueStruct+0x0
    // 18: &_PyRuntime+0x0
    // 20: &PyUnicode_Type+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x18, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x20, (uintptr_t)&PyUnicode_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x1c);
    patch_32r(code + 0x11, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + 0xc);
    patch_32r(code + 0x3e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + 0x4);
    patch_32r(code + 0x4e, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)data + -0x4);
}

void
emit__UNARY_INVERT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNARY_INVERT.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 48 89 df                      movq    %rbx, %rdi
    // 10: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x16 <__JIT_ENTRY+0x16>
    // 0000000000000012:  X86_64_RELOC_GOT     _PyNumber_Invert@GOTPCREL
    // 16: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 1b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 24: 8b 0b                         movl    (%rbx), %ecx
    // 26: 85 c9                         testl   %ecx, %ecx
    // 28: 78 06                         js      0x30 <__JIT_ENTRY+0x30>
    // 2a: ff c9                         decl    %ecx
    // 2c: 89 0b                         movl    %ecx, (%rbx)
    // 2e: 74 0f                         je      0x3f <__JIT_ENTRY+0x3f>
    // 30: 48 85 c0                      testq   %rax, %rax
    // 33: 74 1e                         je      0x53 <__JIT_ENTRY+0x53>
    // 35: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 39: 5d                            popq    %rbp
    // 3a: e9 00 00 00 00                jmp     0x3f <__JIT_ENTRY+0x3f>
    // 000000000000003b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3f: 48 89 df                      movq    %rbx, %rdi
    // 42: 48 89 c3                      movq    %rax, %rbx
    // 45: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4b <__JIT_ENTRY+0x4b>
    // 0000000000000047:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 4b: 48 89 d8                      movq    %rbx, %rax
    // 4e: 48 85 c0                      testq   %rax, %rax
    // 51: 75 e2                         jne     0x35 <__JIT_ENTRY+0x35>
    // 53: 49 83 c5 f8                   addq    $-0x8, %r13
    // 57: 5d                            popq    %rbp
    // 58: e9 00 00 00 00                jmp     0x5d <__JIT_ENTRY+0x5d>
    // 0000000000000059:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[93] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x5d, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x0b, 0x85, 0xc9,
        0x78, 0x06, 0xff, 0xc9, 0x89, 0x0b, 0x74, 0x0f,
        0x48, 0x85, 0xc0, 0x74, 0x1e, 0x49, 0x89, 0x45,
        0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xdf, 0x48, 0x89, 0xc3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x85,
        0xc0, 0x75, 0xe2, 0x49, 0x83, 0xc5, 0xf8, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyNumber_Invert+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyNumber_Invert);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + 0x4);
    patch_32r(code + 0x3b, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + -0x4);
    patch_32r(code + 0x59, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__UNARY_NEGATIVE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNARY_NEGATIVE.o: file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 48 89 df                      movq    %rbx, %rdi
    // 10: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x16 <__JIT_ENTRY+0x16>
    // 0000000000000012:  X86_64_RELOC_GOT     _PyNumber_Negative@GOTPCREL
    // 16: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 1b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 24: 8b 0b                         movl    (%rbx), %ecx
    // 26: 85 c9                         testl   %ecx, %ecx
    // 28: 78 06                         js      0x30 <__JIT_ENTRY+0x30>
    // 2a: ff c9                         decl    %ecx
    // 2c: 89 0b                         movl    %ecx, (%rbx)
    // 2e: 74 0f                         je      0x3f <__JIT_ENTRY+0x3f>
    // 30: 48 85 c0                      testq   %rax, %rax
    // 33: 74 1e                         je      0x53 <__JIT_ENTRY+0x53>
    // 35: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 39: 5d                            popq    %rbp
    // 3a: e9 00 00 00 00                jmp     0x3f <__JIT_ENTRY+0x3f>
    // 000000000000003b:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 3f: 48 89 df                      movq    %rbx, %rdi
    // 42: 48 89 c3                      movq    %rax, %rbx
    // 45: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4b <__JIT_ENTRY+0x4b>
    // 0000000000000047:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 4b: 48 89 d8                      movq    %rbx, %rax
    // 4e: 48 85 c0                      testq   %rax, %rax
    // 51: 75 e2                         jne     0x35 <__JIT_ENTRY+0x35>
    // 53: 49 83 c5 f8                   addq    $-0x8, %r13
    // 57: 5d                            popq    %rbp
    // 58: e9 00 00 00 00                jmp     0x5d <__JIT_ENTRY+0x5d>
    // 0000000000000059:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[93] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x5d, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x0b, 0x85, 0xc9,
        0x78, 0x06, 0xff, 0xc9, 0x89, 0x0b, 0x74, 0x0f,
        0x48, 0x85, 0xc0, 0x74, 0x1e, 0x49, 0x89, 0x45,
        0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xdf, 0x48, 0x89, 0xc3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x85,
        0xc0, 0x75, 0xe2, 0x49, 0x83, 0xc5, 0xf8, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyNumber_Negative+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyNumber_Negative);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + 0x4);
    patch_32r(code + 0x3b, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + -0x4);
    patch_32r(code + 0x59, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__UNARY_NOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNARY_NOT.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __Py_FalseStruct@GOTPCREL
    // b: 49 39 45 f8                   cmpq    %rax, -0x8(%r13)
    // f: 75 07                         jne     0x18 <__JIT_ENTRY+0x18>
    // 11: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x18 <__JIT_ENTRY+0x18>
    // 0000000000000014:  X86_64_RELOC_GOT_LOAD        __Py_TrueStruct@GOTPCREL
    // 18: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 1c: 5d                            popq    %rbp
    // 1d: e9 00 00 00 00                jmp     0x22 <__JIT_ENTRY+0x22>
    // 000000000000001e:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[29] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0xf8, 0x75,
        0x07, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x45, 0xf8, 0x5d,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
}

void
emit__UNPACK_EX(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNPACK_EX.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 10                   subq    $0x10, %rsp
    // 8: 4c 89 f7                      movq    %r14, %rdi
    // b: 8b 05 00 00 00 00             movl    (%rip), %eax            ## 0x11 <__JIT_ENTRY+0x11>
    // 000000000000000d:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 11: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // 15: 0f b6 d8                      movzbl  %al, %ebx
    // 18: 49 8d 54 dd 00                leaq    (%r13,%rbx,8), %rdx
    // 1d: 0f b6 cc                      movzbl  %ah, %ecx
    // 20: 4c 8d 04 ca                   leaq    (%rdx,%rcx,8), %r8
    // 24: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 29: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // 2d: 4c 89 fe                      movq    %r15, %rsi
    // 30: 89 da                         movl    %ebx, %edx
    // 32: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // 36: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x3c <__JIT_ENTRY+0x3c>
    // 0000000000000038:  X86_64_RELOC_GOT     __PyEval_UnpackIterableStackRef@GOTPCREL
    // 3c: 41 89 c6                      movl    %eax, %r14d
    // 3f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 44: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 4d: 41 8b 07                      movl    (%r15), %eax
    // 50: 85 c0                         testl   %eax, %eax
    // 52: 78 07                         js      0x5b <__JIT_ENTRY+0x5b>
    // 54: ff c8                         decl    %eax
    // 56: 41 89 07                      movl    %eax, (%r15)
    // 59: 74 1b                         je      0x76 <__JIT_ENTRY+0x76>
    // 5b: 45 85 f6                      testl   %r14d, %r14d
    // 5e: 74 24                         je      0x84 <__JIT_ENTRY+0x84>
    // 60: 03 5d f0                      addl    -0x10(%rbp), %ebx
    // 63: 4d 8d 6c dd 00                leaq    (%r13,%rbx,8), %r13
    // 68: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 6c: 48 83 c4 10                   addq    $0x10, %rsp
    // 70: 5d                            popq    %rbp
    // 71: e9 00 00 00 00                jmp     0x76 <__JIT_ENTRY+0x76>
    // 0000000000000072:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 76: 4c 89 ff                      movq    %r15, %rdi
    // 79: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x7f <__JIT_ENTRY+0x7f>
    // 000000000000007b:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 7f: 45 85 f6                      testl   %r14d, %r14d
    // 82: 75 dc                         jne     0x60 <__JIT_ENTRY+0x60>
    // 84: 49 83 c5 f8                   addq    $-0x8, %r13
    // 88: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 8c: 48 83 c4 10                   addq    $0x10, %rsp
    // 90: 5d                            popq    %rbp
    // 91: e9 00 00 00 00                jmp     0x96 <__JIT_ENTRY+0x96>
    // 0000000000000092:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[150] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10,
        0x4c, 0x89, 0xf7, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x8b, 0x7d, 0xf8, 0x0f, 0xb6, 0xd8,
        0x49, 0x8d, 0x54, 0xdd, 0x00, 0x0f, 0xb6, 0xcc,
        0x4c, 0x8d, 0x04, 0xca, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x4c, 0x89, 0x75, 0xf8, 0x4c, 0x89, 0xfe,
        0x89, 0xda, 0x48, 0x89, 0x4d, 0xf0, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x89, 0xc6, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x07, 0xff, 0xc8, 0x41, 0x89,
        0x07, 0x74, 0x1b, 0x45, 0x85, 0xf6, 0x74, 0x24,
        0x03, 0x5d, 0xf0, 0x4d, 0x8d, 0x6c, 0xdd, 0x00,
        0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x45,
        0x85, 0xf6, 0x75, 0xdc, 0x49, 0x83, 0xc5, 0xf8,
        0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4, 0x10,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyEval_UnpackIterableStackRef+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_UnpackIterableStackRef);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xd, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x38, (uintptr_t)data + 0x4);
    patch_32r(code + 0x72, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)data + -0x4);
    patch_32r(code + 0x92, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__UNPACK_SEQUENCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNPACK_SEQUENCE.o:        file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 4c 8b 3d 00 00 00 00          movq    (%rip), %r15            ## 0xb <__JIT_ENTRY+0xb>
    // 0000000000000007:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // b: 41 0f b7 d7                   movzwl  %r15w, %edx
    // f: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 13: 4d 8d 44 d5 f8                leaq    -0x8(%r13,%rdx,8), %r8
    // 18: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 1d: 4c 89 f7                      movq    %r14, %rdi
    // 20: 48 89 de                      movq    %rbx, %rsi
    // 23: b9 ff ff ff ff                movl    $0xffffffff, %ecx       ## imm = 0xFFFFFFFF
    // 28: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2e <__JIT_ENTRY+0x2e>
    // 000000000000002a:  X86_64_RELOC_GOT     __PyEval_UnpackIterableStackRef@GOTPCREL
    // 2e: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 33: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3c: 8b 0b                         movl    (%rbx), %ecx
    // 3e: 85 c9                         testl   %ecx, %ecx
    // 40: 78 06                         js      0x48 <__JIT_ENTRY+0x48>
    // 42: ff c9                         decl    %ecx
    // 44: 89 0b                         movl    %ecx, (%rbx)
    // 46: 74 13                         je      0x5b <__JIT_ENTRY+0x5b>
    // 48: 85 c0                         testl   %eax, %eax
    // 4a: 74 20                         je      0x6c <__JIT_ENTRY+0x6c>
    // 4c: 41 0f b7 c7                   movzwl  %r15w, %eax
    // 50: 4d 8d 6c c5 f8                leaq    -0x8(%r13,%rax,8), %r13
    // 55: 5d                            popq    %rbp
    // 56: e9 00 00 00 00                jmp     0x5b <__JIT_ENTRY+0x5b>
    // 0000000000000057:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 5b: 48 89 df                      movq    %rbx, %rdi
    // 5e: 89 c3                         movl    %eax, %ebx
    // 60: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x66 <__JIT_ENTRY+0x66>
    // 0000000000000062:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 66: 89 d8                         movl    %ebx, %eax
    // 68: 85 c0                         testl   %eax, %eax
    // 6a: 75 e0                         jne     0x4c <__JIT_ENTRY+0x4c>
    // 6c: 49 83 c5 f8                   addq    $-0x8, %r13
    // 70: 5d                            popq    %rbp
    // 71: e9 00 00 00 00                jmp     0x76 <__JIT_ENTRY+0x76>
    // 0000000000000072:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[118] = {
        0x55, 0x48, 0x89, 0xe5, 0x4c, 0x8b, 0x3d, 0x00,
        0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xd7, 0x49,
        0x8b, 0x5d, 0xf8, 0x4d, 0x8d, 0x44, 0xd5, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x4c, 0x89, 0xf7,
        0x48, 0x89, 0xde, 0xb9, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x0b, 0x85, 0xc9,
        0x78, 0x06, 0xff, 0xc9, 0x89, 0x0b, 0x74, 0x13,
        0x85, 0xc0, 0x74, 0x20, 0x41, 0x0f, 0xb7, 0xc7,
        0x4d, 0x8d, 0x6c, 0xc5, 0xf8, 0x5d, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x89, 0xc3,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x89, 0xd8,
        0x85, 0xc0, 0x75, 0xe0, 0x49, 0x83, 0xc5, 0xf8,
        0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &_PyEval_UnpackIterableStackRef+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_UnpackIterableStackRef);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)data + 0x4);
    patch_32r(code + 0x57, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x62, (uintptr_t)data + -0x4);
    patch_32r(code + 0x72, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__UNPACK_SEQUENCE_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNPACK_SEQUENCE_LIST.o:   file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 4: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     _PyList_Type@GOTPCREL
    // f: 0f 85 00 00 00 00             jne     0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 15: 48 8b 5f 10                   movq    0x10(%rdi), %rbx
    // 19: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 20: 48 39 c3                      cmpq    %rax, %rbx
    // 23: 0f 85 00 00 00 00             jne     0x29 <__JIT_ENTRY+0x29>
    // 0000000000000025:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 29: 55                            pushq   %rbp
    // 2a: 48 89 e5                      movq    %rsp, %rbp
    // 2d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x34 <__JIT_ENTRY+0x34>
    // 0000000000000030:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // 34: 66 85 c0                      testw   %ax, %ax
    // 37: 74 3c                         je      0x75 <__JIT_ENTRY+0x75>
    // 39: 49 8d 45 f8                   leaq    -0x8(%r13), %rax
    // 3d: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
    // 41: 48 8d 53 01                   leaq    0x1(%rbx), %rdx
    // 45: eb 19                         jmp     0x60 <__JIT_ENTRY+0x60>
    // 47: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
    // 50: 48 89 30                      movq    %rsi, (%rax)
    // 53: 48 83 c0 08                   addq    $0x8, %rax
    // 57: 48 ff ca                      decq    %rdx
    // 5a: 48 83 fa 01                   cmpq    $0x1, %rdx
    // 5e: 76 15                         jbe     0x75 <__JIT_ENTRY+0x75>
    // 60: 48 8b 74 d1 f0                movq    -0x10(%rcx,%rdx,8), %rsi
    // 65: 44 8b 06                      movl    (%rsi), %r8d
    // 68: 45 85 c0                      testl   %r8d, %r8d
    // 6b: 78 e3                         js      0x50 <__JIT_ENTRY+0x50>
    // 6d: 41 ff c0                      incl    %r8d
    // 70: 44 89 06                      movl    %r8d, (%rsi)
    // 73: eb db                         jmp     0x50 <__JIT_ENTRY+0x50>
    // 75: 8b 07                         movl    (%rdi), %eax
    // 77: 85 c0                         testl   %eax, %eax
    // 79: 78 06                         js      0x81 <__JIT_ENTRY+0x81>
    // 7b: ff c8                         decl    %eax
    // 7d: 89 07                         movl    %eax, (%rdi)
    // 7f: 74 0b                         je      0x8c <__JIT_ENTRY+0x8c>
    // 81: 4d 8d 6c dd f8                leaq    -0x8(%r13,%rbx,8), %r13
    // 86: 5d                            popq    %rbp
    // 87: e9 00 00 00 00                jmp     0x8c <__JIT_ENTRY+0x8c>
    // 0000000000000088:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 8c: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x92 <__JIT_ENTRY+0x92>
    // 000000000000008e:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 92: 4d 8d 6c dd f8                leaq    -0x8(%r13,%rbx,8), %r13
    // 97: 5d                            popq    %rbp
    // 98: e9 00 00 00 00                jmp     0x9d <__JIT_ENTRY+0x9d>
    // 0000000000000099:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[152] = {
        0x49, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x47, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x85, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x5f,
        0x10, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x39, 0xc3, 0x0f, 0x85, 0x00, 0x00, 0x00,
        0x00, 0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74,
        0x3c, 0x49, 0x8d, 0x45, 0xf8, 0x48, 0x8b, 0x4f,
        0x18, 0x48, 0x8d, 0x53, 0x01, 0xeb, 0x19, 0x66,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x30, 0x48, 0x83, 0xc0, 0x08, 0x48,
        0xff, 0xca, 0x48, 0x83, 0xfa, 0x01, 0x76, 0x15,
        0x48, 0x8b, 0x74, 0xd1, 0xf0, 0x44, 0x8b, 0x06,
        0x45, 0x85, 0xc0, 0x78, 0xe3, 0x41, 0xff, 0xc0,
        0x44, 0x89, 0x06, 0xeb, 0xdb, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74,
        0x0b, 0x4d, 0x8d, 0x6c, 0xdd, 0xf8, 0x5d, 0xe9,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8d, 0x6c, 0xdd, 0xf8, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    // 10: &PyList_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&PyList_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0xc);
    patch_32r(code + 0x11, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0x4);
    patch_32r(code + 0x25, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0x4);
    patch_32r(code + 0x88, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x8e, (uintptr_t)data + -0x4);
}

void
emit__UNPACK_SEQUENCE_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNPACK_SEQUENCE_TUPLE.o:  file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 4: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     _PyTuple_Type@GOTPCREL
    // f: 0f 85 00 00 00 00             jne     0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 15: 48 8b 5f 10                   movq    0x10(%rdi), %rbx
    // 19: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            ## 0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 20: 48 39 c3                      cmpq    %rax, %rbx
    // 23: 0f 85 00 00 00 00             jne     0x29 <__JIT_ENTRY+0x29>
    // 0000000000000025:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 29: 55                            pushq   %rbp
    // 2a: 48 89 e5                      movq    %rsp, %rbp
    // 2d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            ## 0x34 <__JIT_ENTRY+0x34>
    // 0000000000000030:  X86_64_RELOC_GOT_LOAD        __JIT_OPARG@GOTPCREL
    // 34: 66 85 c0                      testw   %ax, %ax
    // 37: 74 38                         je      0x71 <__JIT_ENTRY+0x71>
    // 39: 49 8d 45 f8                   leaq    -0x8(%r13), %rax
    // 3d: 48 8d 4b 01                   leaq    0x1(%rbx), %rcx
    // 41: eb 1d                         jmp     0x60 <__JIT_ENTRY+0x60>
    // 43: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
    // 50: 48 89 10                      movq    %rdx, (%rax)
    // 53: 48 83 c0 08                   addq    $0x8, %rax
    // 57: 48 ff c9                      decq    %rcx
    // 5a: 48 83 f9 01                   cmpq    $0x1, %rcx
    // 5e: 76 11                         jbe     0x71 <__JIT_ENTRY+0x71>
    // 60: 48 8b 54 cf 08                movq    0x8(%rdi,%rcx,8), %rdx
    // 65: 8b 32                         movl    (%rdx), %esi
    // 67: 85 f6                         testl   %esi, %esi
    // 69: 78 e5                         js      0x50 <__JIT_ENTRY+0x50>
    // 6b: ff c6                         incl    %esi
    // 6d: 89 32                         movl    %esi, (%rdx)
    // 6f: eb df                         jmp     0x50 <__JIT_ENTRY+0x50>
    // 71: 8b 07                         movl    (%rdi), %eax
    // 73: 85 c0                         testl   %eax, %eax
    // 75: 78 06                         js      0x7d <__JIT_ENTRY+0x7d>
    // 77: ff c8                         decl    %eax
    // 79: 89 07                         movl    %eax, (%rdi)
    // 7b: 74 0b                         je      0x88 <__JIT_ENTRY+0x88>
    // 7d: 4d 8d 6c dd f8                leaq    -0x8(%r13,%rbx,8), %r13
    // 82: 5d                            popq    %rbp
    // 83: e9 00 00 00 00                jmp     0x88 <__JIT_ENTRY+0x88>
    // 0000000000000084:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 88: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x8e <__JIT_ENTRY+0x8e>
    // 000000000000008a:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 8e: 4d 8d 6c dd f8                leaq    -0x8(%r13,%rbx,8), %r13
    // 93: 5d                            popq    %rbp
    // 94: e9 00 00 00 00                jmp     0x99 <__JIT_ENTRY+0x99>
    // 0000000000000095:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[148] = {
        0x49, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x47, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x85, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x5f,
        0x10, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x39, 0xc3, 0x0f, 0x85, 0x00, 0x00, 0x00,
        0x00, 0x55, 0x48, 0x89, 0xe5, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74,
        0x38, 0x49, 0x8d, 0x45, 0xf8, 0x48, 0x8d, 0x4b,
        0x01, 0xeb, 0x1d, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x10, 0x48, 0x83, 0xc0, 0x08, 0x48,
        0xff, 0xc9, 0x48, 0x83, 0xf9, 0x01, 0x76, 0x11,
        0x48, 0x8b, 0x54, 0xcf, 0x08, 0x8b, 0x32, 0x85,
        0xf6, 0x78, 0xe5, 0xff, 0xc6, 0x89, 0x32, 0xeb,
        0xdf, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x06, 0xff,
        0xc8, 0x89, 0x07, 0x74, 0x0b, 0x4d, 0x8d, 0x6c,
        0xdd, 0xf8, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8d,
        0x6c, 0xdd, 0xf8, 0x5d,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    // 10: &PyTuple_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&PyTuple_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0xc);
    patch_32r(code + 0x11, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0x4);
    patch_32r(code + 0x25, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0x4);
    patch_32r(code + 0x84, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x8a, (uintptr_t)data + -0x4);
}

void
emit__UNPACK_SEQUENCE_TWO_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _UNPACK_SEQUENCE_TWO_TUPLE.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 4: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            ## 0xf <__JIT_ENTRY+0xf>
    // 000000000000000b:  X86_64_RELOC_GOT     _PyTuple_Type@GOTPCREL
    // f: 0f 85 00 00 00 00             jne     0x15 <__JIT_ENTRY+0x15>
    // 0000000000000011:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 15: 48 83 7f 10 02                cmpq    $0x2, 0x10(%rdi)
    // 1a: 0f 85 00 00 00 00             jne     0x20 <__JIT_ENTRY+0x20>
    // 000000000000001c:  X86_64_RELOC_BRANCH  __JIT_JUMP_TARGET
    // 20: 48 8b 5f 18                   movq    0x18(%rdi), %rbx
    // 24: 8b 03                         movl    (%rbx), %eax
    // 26: 85 c0                         testl   %eax, %eax
    // 28: 78 04                         js      0x2e <__JIT_ENTRY+0x2e>
    // 2a: ff c0                         incl    %eax
    // 2c: 89 03                         movl    %eax, (%rbx)
    // 2e: 4c 8b 7f 20                   movq    0x20(%rdi), %r15
    // 32: 41 8b 07                      movl    (%r15), %eax
    // 35: 85 c0                         testl   %eax, %eax
    // 37: 78 05                         js      0x3e <__JIT_ENTRY+0x3e>
    // 39: ff c0                         incl    %eax
    // 3b: 41 89 07                      movl    %eax, (%r15)
    // 3e: 8b 07                         movl    (%rdi), %eax
    // 40: 85 c0                         testl   %eax, %eax
    // 42: 78 06                         js      0x4a <__JIT_ENTRY+0x4a>
    // 44: ff c8                         decl    %eax
    // 46: 89 07                         movl    %eax, (%rdi)
    // 48: 74 11                         je      0x5b <__JIT_ENTRY+0x5b>
    // 4a: 4d 89 7d f8                   movq    %r15, -0x8(%r13)
    // 4e: 49 89 5d 00                   movq    %rbx, (%r13)
    // 52: 49 83 c5 08                   addq    $0x8, %r13
    // 56: e9 00 00 00 00                jmp     0x5b <__JIT_ENTRY+0x5b>
    // 0000000000000057:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // 5b: 55                            pushq   %rbp
    // 5c: 48 89 e5                      movq    %rsp, %rbp
    // 5f: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x65 <__JIT_ENTRY+0x65>
    // 0000000000000061:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 65: 5d                            popq    %rbp
    // 66: 4d 89 7d f8                   movq    %r15, -0x8(%r13)
    // 6a: 49 89 5d 00                   movq    %rbx, (%r13)
    // 6e: 49 83 c5 08                   addq    $0x8, %r13
    // 72: e9 00 00 00 00                jmp     0x77 <__JIT_ENTRY+0x77>
    // 0000000000000073:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[114] = {
        0x49, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x47, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x85, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7f,
        0x10, 0x02, 0x0f, 0x85, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x5f, 0x18, 0x8b, 0x03, 0x85, 0xc0,
        0x78, 0x04, 0xff, 0xc0, 0x89, 0x03, 0x4c, 0x8b,
        0x7f, 0x20, 0x41, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x05, 0xff, 0xc0, 0x41, 0x89, 0x07, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x07,
        0x74, 0x11, 0x4d, 0x89, 0x7d, 0xf8, 0x49, 0x89,
        0x5d, 0x00, 0x49, 0x83, 0xc5, 0x08, 0xe9, 0x00,
        0x00, 0x00, 0x00, 0x55, 0x48, 0x89, 0xe5, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x4d, 0x89,
        0x7d, 0xf8, 0x49, 0x89, 0x5d, 0x00, 0x49, 0x83,
        0xc5, 0x08,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: &PyTuple_Type+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, (uintptr_t)&PyTuple_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x4);
    patch_32r(code + 0x11, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x1c, state->instruction_starts[instruction->jump_target] + -0x4);
    patch_32r(code + 0x57, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)data + -0x4);
}

void
emit__WITH_EXCEPT_START(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _WITH_EXCEPT_START.o:      file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 48 83 ec 40                   subq    $0x40, %rsp
    // 8: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // c: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // 10: 49 8b 45 d8                   movq    -0x28(%r13), %rax
    // 14: 48 89 45 e8                   movq    %rax, -0x18(%rbp)
    // 18: 4d 8b 75 e0                   movq    -0x20(%r13), %r14
    // 1c: 49 8b 47 08                   movq    0x8(%r15), %rax
    // 20: 48 89 45 f0                   movq    %rax, -0x10(%rbp)
    // 24: 4c 89 ff                      movq    %r15, %rdi
    // 27: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x2d <__JIT_ENTRY+0x2d>
    // 0000000000000029:  X86_64_RELOC_GOT     _PyException_GetTraceback@GOTPCREL
    // 2d: 48 85 c0                      testq   %rax, %rax
    // 30: 74 24                         je      0x56 <__JIT_ENTRY+0x56>
    // 32: 48 89 c3                      movq    %rax, %rbx
    // 35: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 3a: 8b 00                         movl    (%rax), %eax
    // 3c: 85 c0                         testl   %eax, %eax
    // 3e: 78 0f                         js      0x4f <__JIT_ENTRY+0x4f>
    // 40: ff c8                         decl    %eax
    // 42: 89 03                         movl    %eax, (%rbx)
    // 44: 75 09                         jne     0x4f <__JIT_ENTRY+0x4f>
    // 46: 48 89 df                      movq    %rbx, %rdi
    // 49: ff 15 00 00 00 00             callq   *(%rip)                 ## 0x4f <__JIT_ENTRY+0x4f>
    // 000000000000004b:  X86_64_RELOC_GOT     __Py_Dealloc@GOTPCREL
    // 4f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 54: eb 07                         jmp     0x5d <__JIT_ENTRY+0x5d>
    // 56: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            ## 0x5d <__JIT_ENTRY+0x5d>
    // 0000000000000059:  X86_64_RELOC_GOT_LOAD        __Py_NoneStruct@GOTPCREL
    // 5d: 48 c7 45 c0 00 00 00 00       movq    $0x0, -0x40(%rbp)
    // 65: 4c 89 75 c8                   movq    %r14, -0x38(%rbp)
    // 69: 48 8d 75 d0                   leaq    -0x30(%rbp), %rsi
    // 6d: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // 71: 48 89 45 d0                   movq    %rax, -0x30(%rbp)
    // 75: 4c 89 7d d8                   movq    %r15, -0x28(%rbp)
    // 79: 48 89 5d e0                   movq    %rbx, -0x20(%rbp)
    // 7d: 48 b8 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rax ## imm = 0x8000000000000003
    // 87: 48 8d 50 01                   leaq    0x1(%rax), %rdx
    // 8b: 31 c9                         xorl    %ecx, %ecx
    // 8d: 4d 85 f6                      testq   %r14, %r14
    // 90: 0f 95 c1                      setne   %cl
    // 93: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 98: 48 0f 44 d0                   cmoveq  %rax, %rdx
    // 9c: c1 e1 03                      shll    $0x3, %ecx
    // 9f: 48 29 ce                      subq    %rcx, %rsi
    // a2: 48 8b 7d e8                   movq    -0x18(%rbp), %rdi
    // a6: 31 c9                         xorl    %ecx, %ecx
    // a8: ff 15 00 00 00 00             callq   *(%rip)                 ## 0xae <__JIT_ENTRY+0xae>
    // 00000000000000aa:  X86_64_RELOC_GOT     _PyObject_Vectorcall@GOTPCREL
    // ae: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // b3: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // bc: 48 85 c0                      testq   %rax, %rax
    // bf: 74 16                         je      0xd7 <__JIT_ENTRY+0xd7>
    // c1: 49 89 45 00                   movq    %rax, (%r13)
    // c5: 49 83 c5 08                   addq    $0x8, %r13
    // c9: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // cd: 48 83 c4 40                   addq    $0x40, %rsp
    // d1: 5d                            popq    %rbp
    // d2: e9 00 00 00 00                jmp     0xd7 <__JIT_ENTRY+0xd7>
    // 00000000000000d3:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    // d7: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // db: 48 83 c4 40                   addq    $0x40, %rsp
    // df: 5d                            popq    %rbp
    // e0: e9 00 00 00 00                jmp     0xe5 <__JIT_ENTRY+0xe5>
    // 00000000000000e1:  X86_64_RELOC_BRANCH  __JIT_ERROR_TARGET
    const unsigned char code_body[229] = {
        0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x40,
        0x4c, 0x89, 0x75, 0xf8, 0x4d, 0x8b, 0x7d, 0xf8,
        0x49, 0x8b, 0x45, 0xd8, 0x48, 0x89, 0x45, 0xe8,
        0x4d, 0x8b, 0x75, 0xe0, 0x49, 0x8b, 0x47, 0x08,
        0x48, 0x89, 0x45, 0xf0, 0x4c, 0x89, 0xff, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x24, 0x48, 0x89, 0xc3, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x0f,
        0xff, 0xc8, 0x89, 0x03, 0x75, 0x09, 0x48, 0x89,
        0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0xeb, 0x07, 0x48, 0x8b,
        0x1d, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x45,
        0xc0, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x75,
        0xc8, 0x48, 0x8d, 0x75, 0xd0, 0x48, 0x8b, 0x45,
        0xf0, 0x48, 0x89, 0x45, 0xd0, 0x4c, 0x89, 0x7d,
        0xd8, 0x48, 0x89, 0x5d, 0xe0, 0x48, 0xb8, 0x03,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x48,
        0x8d, 0x50, 0x01, 0x31, 0xc9, 0x4d, 0x85, 0xf6,
        0x0f, 0x95, 0xc1, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x48, 0x0f, 0x44, 0xd0, 0xc1, 0xe1, 0x03, 0x48,
        0x29, 0xce, 0x48, 0x8b, 0x7d, 0xe8, 0x31, 0xc9,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x16, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5,
        0x08, 0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4,
        0x40, 0x5d, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x8b, 0x75, 0xf8, 0x48, 0x83, 0xc4, 0x40, 0x5d,
        0xe9, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyObject_Vectorcall+0x0
    // 8: &_Py_NoneStruct+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: &PyException_GetTraceback+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_Vectorcall);
    patch_64(data + 0x8, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)&PyException_GetTraceback);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x59, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xaa, (uintptr_t)data + -0x4);
    patch_32r(code + 0xd3, (uintptr_t)code + sizeof(code_body) + -0x4);
    patch_32r(code + 0xe1, state->instruction_starts[instruction->error_target] + -0x4);
}

void
emit__YIELD_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    //
    // _YIELD_VALUE.o:    file format mach-o 64-bit x86-64
    //
    // Disassembly of section __TEXT,__text:
    //
    // 0000000000000000 <__JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 89 e5                      movq    %rsp, %rbp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 49 83 44 24 38 02             addq    $0x2, 0x38(%r12)
    // e: 49 83 c5 f8                   addq    $-0x8, %r13
    // 12: 0f b6 05 00 00 00 00          movzbl  (%rip), %eax            ## 0x19 <__JIT_ENTRY+0x19>
    // 0000000000000015:  X86_64_RELOC_GOT     __JIT_OPARG@GOTPCREL
    // 19: 04 fe                         addb    $-0x2, %al
    // 1b: 41 88 44 24 fb                movb    %al, -0x5(%r12)
    // 20: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 25: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
    // 2a: 49 89 46 78                   movq    %rax, 0x78(%r14)
    // 2e: 49 c7 44 24 e8 00 00 00 00    movq    $0x0, -0x18(%r12)
    // 37: 41 ff 46 2c                   incl    0x2c(%r14)
    // 3b: 49 8b 44 24 08                movq    0x8(%r12), %rax
    // 40: 49 89 46 48                   movq    %rax, 0x48(%r14)
    // 44: 49 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%r12)
    // 4d: 4c 8b 68 40                   movq    0x40(%rax), %r13
    // 51: 48 c7 40 40 00 00 00 00       movq    $0x0, 0x40(%rax)
    // 59: 49 89 4d 00                   movq    %rcx, (%r13)
    // 5d: 49 83 c5 08                   addq    $0x8, %r13
    // 61: 49 89 c4                      movq    %rax, %r12
    // 64: 5d                            popq    %rbp
    // 65: e9 00 00 00 00                jmp     0x6a <__JIT_ENTRY+0x6a>
    // 0000000000000066:  X86_64_RELOC_BRANCH  __JIT_CONTINUE
    const unsigned char code_body[101] = {
        0x55, 0x48, 0x89, 0xe5, 0x49, 0x8b, 0x4d, 0xf8,
        0x49, 0x83, 0x44, 0x24, 0x38, 0x02, 0x49, 0x83,
        0xc5, 0xf8, 0x0f, 0xb6, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x04, 0xfe, 0x41, 0x88, 0x44, 0x24, 0xfb,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x49, 0x8b, 0x44,
        0x24, 0xe8, 0x49, 0x89, 0x46, 0x78, 0x49, 0xc7,
        0x44, 0x24, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x41,
        0xff, 0x46, 0x2c, 0x49, 0x8b, 0x44, 0x24, 0x08,
        0x49, 0x89, 0x46, 0x48, 0x49, 0xc7, 0x44, 0x24,
        0x08, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x68,
        0x40, 0x48, 0xc7, 0x40, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x89, 0x4d, 0x00, 0x49, 0x83, 0xc5,
        0x08, 0x49, 0x89, 0xc4, 0x5d,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + -0x4);
}

static_assert(SYMBOL_MASK_WORDS >= 1, "SYMBOL_MASK_WORDS too small");

typedef struct {
    void (*emit)(
        unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
        const _PyUOpInstruction *instruction, jit_state *state);
    size_t code_size;
    size_t data_size;
    symbol_mask trampoline_mask;
} StencilGroup;

static const StencilGroup shim = {emit_shim, 43, 0, {0}};

static const StencilGroup stencil_groups[MAX_UOP_ID + 1] = {
    [_BINARY_OP] = {emit__BINARY_OP, 159, 24, {0}},
    [_BINARY_OP_ADD_FLOAT] = {emit__BINARY_OP_ADD_FLOAT, 59, 8, {0}},
    [_BINARY_OP_ADD_INT] = {emit__BINARY_OP_ADD_INT, 207, 24, {0}},
    [_BINARY_OP_ADD_UNICODE] = {emit__BINARY_OP_ADD_UNICODE, 207, 24, {0}},
    [_BINARY_OP_EXTEND] = {emit__BINARY_OP_EXTEND, 119, 16, {0}},
    [_BINARY_OP_INPLACE_ADD_UNICODE] = {emit__BINARY_OP_INPLACE_ADD_UNICODE, 235, 32, {0}},
    [_BINARY_OP_MULTIPLY_FLOAT] = {emit__BINARY_OP_MULTIPLY_FLOAT, 59, 8, {0}},
    [_BINARY_OP_MULTIPLY_INT] = {emit__BINARY_OP_MULTIPLY_INT, 207, 24, {0}},
    [_BINARY_OP_SUBSCR_CHECK_FUNC] = {emit__BINARY_OP_SUBSCR_CHECK_FUNC, 116, 0, {0}},
    [_BINARY_OP_SUBSCR_DICT] = {emit__BINARY_OP_SUBSCR_DICT, 210, 32, {0}},
    [_BINARY_OP_SUBSCR_INIT_CALL] = {emit__BINARY_OP_SUBSCR_INIT_CALL, 177, 0, {0}},
    [_BINARY_OP_SUBSCR_LIST_INT] = {emit__BINARY_OP_SUBSCR_LIST_INT, 230, 40, {0}},
    [_BINARY_OP_SUBSCR_STR_INT] = {emit__BINARY_OP_SUBSCR_STR_INT, 378, 40, {0}},
    [_BINARY_OP_SUBSCR_TUPLE_INT] = {emit__BINARY_OP_SUBSCR_TUPLE_INT, 227, 40, {0}},
    [_BINARY_OP_SUBTRACT_FLOAT] = {emit__BINARY_OP_SUBTRACT_FLOAT, 59, 8, {0}},
    [_BINARY_OP_SUBTRACT_INT] = {emit__BINARY_OP_SUBTRACT_INT, 207, 24, {0}},
    [_BINARY_SLICE] = {emit__BINARY_SLICE, 191, 24, {0}},
    [_BUILD_LIST] = {emit__BUILD_LIST, 75, 16, {0}},
    [_BUILD_MAP] = {emit__BUILD_MAP, 250, 24, {0}},
    [_BUILD_SET] = {emit__BUILD_SET, 445, 32, {0}},
    [_BUILD_SLICE] = {emit__BUILD_SLICE, 227, 24, {0}},
    [_BUILD_STRING] = {emit__BUILD_STRING, 220, 32, {0}},
    [_BUILD_TUPLE] = {emit__BUILD_TUPLE, 75, 16, {0}},
    [_CALL_BUILTIN_CLASS] = {emit__CALL_BUILTIN_CLASS, 345, 16, {0}},
    [_CALL_BUILTIN_FAST] = {emit__CALL_BUILTIN_FAST, 360, 24, {0}},
    [_CALL_BUILTIN_FAST_WITH_KEYWORDS] = {emit__CALL_BUILTIN_FAST_WITH_KEYWORDS, 360, 24, {0}},
    [_CALL_BUILTIN_O] = {emit__CALL_BUILTIN_O, 273, 24, {0}},
    [_CALL_INTRINSIC_1] = {emit__CALL_INTRINSIC_1, 110, 24, {0}},
    [_CALL_INTRINSIC_2] = {emit__CALL_INTRINSIC_2, 165, 24, {0}},
    [_CALL_ISINSTANCE] = {emit__CALL_ISINSTANCE, 333, 40, {0}},
    [_CALL_KW_NON_PY] = {emit__CALL_KW_NON_PY, 380, 24, {0}},
    [_CALL_LEN] = {emit__CALL_LEN, 299, 32, {0}},
    [_CALL_LIST_APPEND] = {emit__CALL_LIST_APPEND, 197, 16, {0}},
    [_CALL_METHOD_DESCRIPTOR_FAST] = {emit__CALL_METHOD_DESCRIPTOR_FAST, 362, 24, {0}},
    [_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = {emit__CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS, 362, 24, {0}},
    [_CALL_METHOD_DESCRIPTOR_NOARGS] = {emit__CALL_METHOD_DESCRIPTOR_NOARGS, 281, 24, {0}},
    [_CALL_METHOD_DESCRIPTOR_O] = {emit__CALL_METHOD_DESCRIPTOR_O, 366, 24, {0}},
    [_CALL_NON_PY_GENERAL] = {emit__CALL_NON_PY_GENERAL, 319, 24, {0}},
    [_CALL_STR_1] = {emit__CALL_STR_1, 120, 24, {0}},
    [_CALL_TUPLE_1] = {emit__CALL_TUPLE_1, 120, 24, {0}},
    [_CALL_TYPE_1] = {emit__CALL_TYPE_1, 115, 16, {0}},
    [_CHECK_AND_ALLOCATE_OBJECT] = {emit__CHECK_AND_ALLOCATE_OBJECT, 283, 40, {0}},
    [_CHECK_ATTR_CLASS] = {emit__CHECK_ATTR_CLASS, 47, 8, {0}},
    [_CHECK_ATTR_METHOD_LAZY_DICT] = {emit__CHECK_ATTR_METHOD_LAZY_DICT, 30, 8, {0}},
    [_CHECK_ATTR_MODULE_PUSH_KEYS] = {emit__CHECK_ATTR_MODULE_PUSH_KEYS, 74, 16, {0}},
    [_CHECK_ATTR_WITH_HINT] = {emit__CHECK_ATTR_WITH_HINT, 37, 0, {0}},
    [_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = {emit__CHECK_CALL_BOUND_METHOD_EXACT_ARGS, 61, 16, {0}},
    [_CHECK_EG_MATCH] = {emit__CHECK_EG_MATCH, 346, 40, {0}},
    [_CHECK_EXC_MATCH] = {emit__CHECK_EXC_MATCH, 186, 40, {0}},
    [_CHECK_FUNCTION] = {emit__CHECK_FUNCTION, 35, 8, {0}},
    [_CHECK_FUNCTION_EXACT_ARGS] = {emit__CHECK_FUNCTION_EXACT_ARGS, 63, 8, {0}},
    [_CHECK_FUNCTION_VERSION] = {emit__CHECK_FUNCTION_VERSION, 65, 24, {0}},
    [_CHECK_FUNCTION_VERSION_INLINE] = {emit__CHECK_FUNCTION_VERSION_INLINE, 37, 16, {0}},
    [_CHECK_FUNCTION_VERSION_KW] = {emit__CHECK_FUNCTION_VERSION_KW, 65, 24, {0}},
    [_CHECK_IS_NOT_PY_CALLABLE] = {emit__CHECK_IS_NOT_PY_CALLABLE, 60, 24, {0}},
    [_CHECK_IS_NOT_PY_CALLABLE_KW] = {emit__CHECK_IS_NOT_PY_CALLABLE_KW, 60, 24, {0}},
    [_CHECK_MANAGED_OBJECT_HAS_VALUES] = {emit__CHECK_MANAGED_OBJECT_HAS_VALUES, 35, 0, {0}},
    [_CHECK_METHOD_VERSION] = {emit__CHECK_METHOD_VERSION, 89, 32, {0}},
    [_CHECK_METHOD_VERSION_KW] = {emit__CHECK_METHOD_VERSION_KW, 95, 32, {0}},
    [_CHECK_PEP_523] = {emit__CHECK_PEP_523, 25, 0, {0}},
    [_CHECK_PERIODIC] = {emit__CHECK_PERIODIC, 58, 8, {0}},
    [_CHECK_PERIODIC_IF_NOT_YIELD_FROM] = {emit__CHECK_PERIODIC_IF_NOT_YIELD_FROM, 73, 16, {0}},
    [_CHECK_STACK_SPACE] = {emit__CHECK_STACK_SPACE, 79, 8, {0}},
    [_CHECK_STACK_SPACE_OPERAND] = {emit__CHECK_STACK_SPACE_OPERAND, 56, 8, {0}},
    [_CHECK_VALIDITY] = {emit__CHECK_VALIDITY, 24, 8, {0}},
    [_CHECK_VALIDITY_AND_SET_IP] = {emit__CHECK_VALIDITY_AND_SET_IP, 36, 16, {0}},
    [_COMPARE_OP] = {emit__COMPARE_OP, 285, 48, {0}},
    [_COMPARE_OP_FLOAT] = {emit__COMPARE_OP_FLOAT, 248, 40, {0}},
    [_COMPARE_OP_INT] = {emit__COMPARE_OP_INT, 316, 40, {0}},
    [_COMPARE_OP_STR] = {emit__COMPARE_OP_STR, 204, 48, {0}},
    [_CONTAINS_OP] = {emit__CONTAINS_OP, 176, 40, {0}},
    [_CONTAINS_OP_DICT] = {emit__CONTAINS_OP_DICT, 187, 48, {0}},
    [_CONTAINS_OP_SET] = {emit__CONTAINS_OP_SET, 214, 56, {0}},
    [_CONVERT_VALUE] = {emit__CONVERT_VALUE, 124, 24, {0}},
    [_COPY] = {emit__COPY, 42, 8, {0}},
    [_COPY_FREE_VARS] = {emit__COPY_FREE_VARS, 166, 8, {0}},
    [_CREATE_INIT_FRAME] = {emit__CREATE_INIT_FRAME, 286, 40, {0}},
    [_DELETE_ATTR] = {emit__DELETE_ATTR, 104, 24, {0}},
    [_DELETE_DEREF] = {emit__DELETE_DEREF, 136, 24, {0}},
    [_DELETE_FAST] = {emit__DELETE_FAST, 165, 120, {0}},
    [_DELETE_GLOBAL] = {emit__DELETE_GLOBAL, 131, 64, {0}},
    [_DELETE_NAME] = {emit__DELETE_NAME, 172, 104, {0}},
    [_DELETE_SUBSCR] = {emit__DELETE_SUBSCR, 139, 16, {0}},
    [_DEOPT] = {emit__DEOPT, 45, 16, {0}},
    [_DICT_MERGE] = {emit__DICT_MERGE, 192, 32, {0}},
    [_DICT_UPDATE] = {emit__DICT_UPDATE, 245, 96, {0}},
    [_END_FOR] = {emit__END_FOR, 69, 8, {0}},
    [_END_SEND] = {emit__END_SEND, 51, 8, {0}},
    [_ERROR_POP_N] = {emit__ERROR_POP_N, 52, 16, {0}},
    [_EXIT_INIT_CHECK] = {emit__EXIT_INIT_CHECK, 79, 72, {0}},
    [_EXIT_TRACE] = {emit__EXIT_TRACE, 451, 32, {0}},
    [_EXPAND_METHOD] = {emit__EXPAND_METHOD, 131, 16, {0}},
    [_EXPAND_METHOD_KW] = {emit__EXPAND_METHOD_KW, 131, 16, {0}},
    [_FATAL_ERROR] = {emit__FATAL_ERROR, 24, 48, {0}},
    [_FORMAT_SIMPLE] = {emit__FORMAT_SIMPLE, 149, 24, {0}},
    [_FORMAT_WITH_SPEC] = {emit__FORMAT_WITH_SPEC, 148, 16, {0}},
    [_FOR_ITER_GEN_FRAME] = {emit__FOR_ITER_GEN_FRAME, 110, 24, {0}},
    [_FOR_ITER_TIER_TWO] = {emit__FOR_ITER_TIER_TWO, 171, 32, {0}},
    [_GET_AITER] = {emit__GET_AITER, 326, 184, {0}},
    [_GET_ANEXT] = {emit__GET_ANEXT, 58, 8, {0}},
    [_GET_AWAITABLE] = {emit__GET_AWAITABLE, 100, 24, {0}},
    [_GET_ITER] = {emit__GET_ITER, 93, 16, {0}},
    [_GET_LEN] = {emit__GET_LEN, 72, 16, {0}},
    [_GET_YIELD_FROM_ITER] = {emit__GET_YIELD_FROM_ITER, 194, 120, {0}},
    [_GUARD_BINARY_OP_EXTEND] = {emit__GUARD_BINARY_OP_EXTEND, 57, 8, {0}},
    [_GUARD_BOTH_FLOAT] = {emit__GUARD_BOTH_FLOAT, 45, 8, {0}},
    [_GUARD_BOTH_INT] = {emit__GUARD_BOTH_INT, 45, 8, {0}},
    [_GUARD_BOTH_UNICODE] = {emit__GUARD_BOTH_UNICODE, 45, 8, {0}},
    [_GUARD_BUILTINS_VERSION_PUSH_KEYS] = {emit__GUARD_BUILTINS_VERSION_PUSH_KEYS, 58, 16, {0}},
    [_GUARD_DORV_NO_DICT] = {emit__GUARD_DORV_NO_DICT, 37, 0, {0}},
    [_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = {emit__GUARD_DORV_VALUES_INST_ATTR_FROM_DICT, 35, 0, {0}},
    [_GUARD_GLOBALS_VERSION] = {emit__GUARD_GLOBALS_VERSION, 50, 16, {0}},
    [_GUARD_GLOBALS_VERSION_PUSH_KEYS] = {emit__GUARD_GLOBALS_VERSION_PUSH_KEYS, 58, 16, {0}},
    [_GUARD_IS_FALSE_POP] = {emit__GUARD_IS_FALSE_POP, 28, 8, {0}},
    [_GUARD_IS_NONE_POP] = {emit__GUARD_IS_NONE_POP, 87, 16, {0}},
    [_GUARD_IS_NOT_NONE_POP] = {emit__GUARD_IS_NOT_NONE_POP, 96, 16, {0}},
    [_GUARD_IS_TRUE_POP] = {emit__GUARD_IS_TRUE_POP, 28, 8, {0}},
    [_GUARD_KEYS_VERSION] = {emit__GUARD_KEYS_VERSION, 42, 8, {0}},
    [_GUARD_NOS_FLOAT] = {emit__GUARD_NOS_FLOAT, 28, 8, {0}},
    [_GUARD_NOS_INT] = {emit__GUARD_NOS_INT, 28, 8, {0}},
    [_GUARD_NOT_EXHAUSTED_LIST] = {emit__GUARD_NOT_EXHAUSTED_LIST, 53, 0, {0}},
    [_GUARD_NOT_EXHAUSTED_RANGE] = {emit__GUARD_NOT_EXHAUSTED_RANGE, 27, 0, {0}},
    [_GUARD_NOT_EXHAUSTED_TUPLE] = {emit__GUARD_NOT_EXHAUSTED_TUPLE, 39, 0, {0}},
    [_GUARD_TOS_FLOAT] = {emit__GUARD_TOS_FLOAT, 28, 8, {0}},
    [_GUARD_TOS_INT] = {emit__GUARD_TOS_INT, 28, 8, {0}},
    [_GUARD_TYPE_VERSION] = {emit__GUARD_TYPE_VERSION, 38, 8, {0}},
    [_GUARD_TYPE_VERSION_AND_LOCK] = {emit__GUARD_TYPE_VERSION_AND_LOCK, 38, 8, {0}},
    [_IMPORT_FROM] = {emit__IMPORT_FROM, 81, 16, {0}},
    [_IMPORT_NAME] = {emit__IMPORT_NAME, 174, 24, {0}},
    [_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = {emit__INIT_CALL_BOUND_METHOD_EXACT_ARGS, 131, 16, {0}},
    [_INIT_CALL_PY_EXACT_ARGS] = {emit__INIT_CALL_PY_EXACT_ARGS, 513, 8, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_0] = {emit__INIT_CALL_PY_EXACT_ARGS_0, 196, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_1] = {emit__INIT_CALL_PY_EXACT_ARGS_1, 198, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_2] = {emit__INIT_CALL_PY_EXACT_ARGS_2, 207, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_3] = {emit__INIT_CALL_PY_EXACT_ARGS_3, 216, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_4] = {emit__INIT_CALL_PY_EXACT_ARGS_4, 225, 0, {0}},
    [_IS_NONE] = {emit__IS_NONE, 72, 32, {0}},
    [_IS_OP] = {emit__IS_OP, 115, 32, {0}},
    [_ITER_CHECK_LIST] = {emit__ITER_CHECK_LIST, 28, 8, {0}},
    [_ITER_CHECK_RANGE] = {emit__ITER_CHECK_RANGE, 28, 8, {0}},
    [_ITER_CHECK_TUPLE] = {emit__ITER_CHECK_TUPLE, 28, 8, {0}},
    [_ITER_NEXT_LIST] = {emit__ITER_NEXT_LIST, 51, 0, {0}},
    [_ITER_NEXT_RANGE] = {emit__ITER_NEXT_RANGE, 58, 8, {0}},
    [_ITER_NEXT_TUPLE] = {emit__ITER_NEXT_TUPLE, 48, 0, {0}},
    [_JUMP_TO_TOP] = {emit__JUMP_TO_TOP, 10, 0, {0}},
    [_LIST_APPEND] = {emit__LIST_APPEND, 87, 16, {0}},
    [_LIST_EXTEND] = {emit__LIST_EXTEND, 275, 112, {0}},
    [_LOAD_ATTR] = {emit__LOAD_ATTR, 253, 32, {0}},
    [_LOAD_ATTR_CLASS] = {emit__LOAD_ATTR_CLASS, 57, 16, {0}},
    [_LOAD_ATTR_INSTANCE_VALUE] = {emit__LOAD_ATTR_INSTANCE_VALUE, 99, 16, {0}},
    [_LOAD_ATTR_METHOD_LAZY_DICT] = {emit__LOAD_ATTR_METHOD_LAZY_DICT, 38, 8, {0}},
    [_LOAD_ATTR_METHOD_NO_DICT] = {emit__LOAD_ATTR_METHOD_NO_DICT, 38, 8, {0}},
    [_LOAD_ATTR_METHOD_WITH_VALUES] = {emit__LOAD_ATTR_METHOD_WITH_VALUES, 38, 8, {0}},
    [_LOAD_ATTR_MODULE] = {emit__LOAD_ATTR_MODULE, 97, 16, {0}},
    [_LOAD_ATTR_MODULE_FROM_KEYS] = {emit__LOAD_ATTR_MODULE_FROM_KEYS, 129, 16, {0}},
    [_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = {emit__LOAD_ATTR_NONDESCRIPTOR_NO_DICT, 48, 16, {0}},
    [_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = {emit__LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES, 48, 16, {0}},
    [_LOAD_ATTR_PROPERTY_FRAME] = {emit__LOAD_ATTR_PROPERTY_FRAME, 245, 8, {0}},
    [_LOAD_ATTR_SLOT] = {emit__LOAD_ATTR_SLOT, 70, 16, {0}},
    [_LOAD_ATTR_WITH_HINT] = {emit__LOAD_ATTR_WITH_HINT, 168, 24, {0}},
    [_LOAD_BUILD_CLASS] = {emit__LOAD_BUILD_CLASS, 140, 64, {0}},
    [_LOAD_COMMON_CONSTANT] = {emit__LOAD_COMMON_CONSTANT, 44, 24, {0}},
    [_LOAD_CONST_IMMORTAL] = {emit__LOAD_CONST_IMMORTAL, 33, 8, {0}},
    [_LOAD_CONST_INLINE] = {emit__LOAD_CONST_INLINE, 30, 8, {0}},
    [_LOAD_CONST_INLINE_BORROW] = {emit__LOAD_CONST_INLINE_BORROW, 20, 8, {0}},
    [_LOAD_CONST_MORTAL] = {emit__LOAD_CONST_MORTAL, 43, 8, {0}},
    [_LOAD_DEREF] = {emit__LOAD_DEREF, 93, 16, {0}},
    [_LOAD_FAST] = {emit__LOAD_FAST, 35, 8, {0}},
    [_LOAD_FAST_0] = {emit__LOAD_FAST_0, 28, 0, {0}},
    [_LOAD_FAST_1] = {emit__LOAD_FAST_1, 28, 0, {0}},
    [_LOAD_FAST_2] = {emit__LOAD_FAST_2, 28, 0, {0}},
    [_LOAD_FAST_3] = {emit__LOAD_FAST_3, 28, 0, {0}},
    [_LOAD_FAST_4] = {emit__LOAD_FAST_4, 28, 0, {0}},
    [_LOAD_FAST_5] = {emit__LOAD_FAST_5, 28, 0, {0}},
    [_LOAD_FAST_6] = {emit__LOAD_FAST_6, 31, 0, {0}},
    [_LOAD_FAST_7] = {emit__LOAD_FAST_7, 31, 0, {0}},
    [_LOAD_FAST_AND_CLEAR] = {emit__LOAD_FAST_AND_CLEAR, 34, 8, {0}},
    [_LOAD_FAST_CHECK] = {emit__LOAD_FAST_CHECK, 121, 112, {0}},
    [_LOAD_FROM_DICT_OR_DEREF] = {emit__LOAD_FROM_DICT_OR_DEREF, 240, 32, {0}},
    [_LOAD_GLOBAL] = {emit__LOAD_GLOBAL, 90, 16, {0}},
    [_LOAD_GLOBAL_BUILTINS] = {emit__LOAD_GLOBAL_BUILTINS, 78, 8, {0}},
    [_LOAD_GLOBAL_BUILTINS_FROM_KEYS] = {emit__LOAD_GLOBAL_BUILTINS_FROM_KEYS, 73, 8, {0}},
    [_LOAD_GLOBAL_MODULE] = {emit__LOAD_GLOBAL_MODULE, 78, 8, {0}},
    [_LOAD_GLOBAL_MODULE_FROM_KEYS] = {emit__LOAD_GLOBAL_MODULE_FROM_KEYS, 73, 8, {0}},
    [_LOAD_LOCALS] = {emit__LOAD_LOCALS, 88, 32, {0}},
    [_LOAD_NAME] = {emit__LOAD_NAME, 80, 16, {0}},
    [_LOAD_SMALL_INT] = {emit__LOAD_SMALL_INT, 39, 16, {0}},
    [_LOAD_SMALL_INT_0] = {emit__LOAD_SMALL_INT_0, 25, 8, {0}},
    [_LOAD_SMALL_INT_1] = {emit__LOAD_SMALL_INT_1, 25, 8, {0}},
    [_LOAD_SMALL_INT_2] = {emit__LOAD_SMALL_INT_2, 25, 8, {0}},
    [_LOAD_SMALL_INT_3] = {emit__LOAD_SMALL_INT_3, 25, 8, {0}},
    [_LOAD_SPECIAL] = {emit__LOAD_SPECIAL, 212, 40, {0}},
    [_LOAD_SUPER_ATTR_ATTR] = {emit__LOAD_SUPER_ATTR_ATTR, 241, 32, {0}},
    [_LOAD_SUPER_ATTR_METHOD] = {emit__LOAD_SUPER_ATTR_METHOD, 314, 40, {0}},
    [_MAKE_CALLARGS_A_TUPLE] = {emit__MAKE_CALLARGS_A_TUPLE, 178, 32, {0}},
    [_MAKE_CELL] = {emit__MAKE_CELL, 112, 24, {0}},
    [_MAKE_FUNCTION] = {emit__MAKE_FUNCTION, 127, 24, {0}},
    [_MAKE_WARM] = {emit__MAKE_WARM, 44, 8, {0}},
    [_MAP_ADD] = {emit__MAP_ADD, 74, 16, {0}},
    [_MATCH_CLASS] = {emit__MATCH_CLASS, 222, 32, {0}},
    [_MATCH_KEYS] = {emit__MATCH_KEYS, 65, 8, {0}},
    [_MATCH_MAPPING] = {emit__MATCH_MAPPING, 58, 16, {0}},
    [_MATCH_SEQUENCE] = {emit__MATCH_SEQUENCE, 58, 16, {0}},
    [_MAYBE_EXPAND_METHOD] = {emit__MAYBE_EXPAND_METHOD, 159, 24, {0}},
    [_MAYBE_EXPAND_METHOD_KW] = {emit__MAYBE_EXPAND_METHOD_KW, 162, 24, {0}},
    [_NOP] = {emit__NOP, 5, 0, {0}},
    [_POP_EXCEPT] = {emit__POP_EXCEPT, 101, 16, {0}},
    [_POP_TOP] = {emit__POP_TOP, 39, 8, {0}},
    [_POP_TOP_LOAD_CONST_INLINE_BORROW] = {emit__POP_TOP_LOAD_CONST_INLINE_BORROW, 65, 16, {0}},
    [_PUSH_EXC_INFO] = {emit__PUSH_EXC_INFO, 53, 8, {0}},
    [_PUSH_FRAME] = {emit__PUSH_FRAME, 41, 0, {0}},
    [_PUSH_NULL] = {emit__PUSH_NULL, 17, 0, {0}},
    [_PUSH_NULL_CONDITIONAL] = {emit__PUSH_NULL_CONDITIONAL, 34, 8, {0}},
    [_PY_FRAME_GENERAL] = {emit__PY_FRAME_GENERAL, 187, 16, {0}},
    [_PY_FRAME_KW] = {emit__PY_FRAME_KW, 231, 24, {0}},
    [_REPLACE_WITH_TRUE] = {emit__REPLACE_WITH_TRUE, 55, 16, {0}},
    [_RESUME_CHECK] = {emit__RESUME_CHECK, 33, 0, {0}},
    [_RETURN_GENERATOR] = {emit__RETURN_GENERATOR, 479, 16, {0}},
    [_RETURN_VALUE] = {emit__RETURN_VALUE, 65, 8, {0}},
    [_SAVE_RETURN_OFFSET] = {emit__SAVE_RETURN_OFFSET, 18, 8, {0}},
    [_SEND_GEN_FRAME] = {emit__SEND_GEN_FRAME, 118, 24, {0}},
    [_SETUP_ANNOTATIONS] = {emit__SETUP_ANNOTATIONS, 280, 104, {0}},
    [_SET_ADD] = {emit__SET_ADD, 106, 24, {0}},
    [_SET_FUNCTION_ATTRIBUTE] = {emit__SET_FUNCTION_ATTRIBUTE, 46, 16, {0}},
    [_SET_IP] = {emit__SET_IP, 17, 8, {0}},
    [_SET_UPDATE] = {emit__SET_UPDATE, 111, 24, {0}},
    [_START_EXECUTOR] = {emit__START_EXECUTOR, 84, 8, {0}},
    [_STORE_ATTR] = {emit__STORE_ATTR, 159, 24, {0}},
    [_STORE_ATTR_INSTANCE_VALUE] = {emit__STORE_ATTR_INSTANCE_VALUE, 176, 16, {0}},
    [_STORE_ATTR_SLOT] = {emit__STORE_ATTR_SLOT, 115, 16, {0}},
    [_STORE_ATTR_WITH_HINT] = {emit__STORE_ATTR_WITH_HINT, 257, 32, {0}},
    [_STORE_DEREF] = {emit__STORE_DEREF, 98, 16, {0}},
    [_STORE_FAST] = {emit__STORE_FAST, 91, 16, {0}},
    [_STORE_FAST_0] = {emit__STORE_FAST_0, 84, 8, {0}},
    [_STORE_FAST_1] = {emit__STORE_FAST_1, 84, 8, {0}},
    [_STORE_FAST_2] = {emit__STORE_FAST_2, 84, 8, {0}},
    [_STORE_FAST_3] = {emit__STORE_FAST_3, 84, 8, {0}},
    [_STORE_FAST_4] = {emit__STORE_FAST_4, 84, 8, {0}},
    [_STORE_FAST_5] = {emit__STORE_FAST_5, 84, 8, {0}},
    [_STORE_FAST_6] = {emit__STORE_FAST_6, 90, 8, {0}},
    [_STORE_FAST_7] = {emit__STORE_FAST_7, 90, 8, {0}},
    [_STORE_GLOBAL] = {emit__STORE_GLOBAL, 109, 24, {0}},
    [_STORE_NAME] = {emit__STORE_NAME, 231, 88, {0}},
    [_STORE_SLICE] = {emit__STORE_SLICE, 234, 24, {0}},
    [_STORE_SUBSCR] = {emit__STORE_SUBSCR, 180, 16, {0}},
    [_STORE_SUBSCR_DICT] = {emit__STORE_SUBSCR_DICT, 101, 24, {0}},
    [_STORE_SUBSCR_LIST_INT] = {emit__STORE_SUBSCR_LIST_INT, 238, 40, {0}},
    [_SWAP] = {emit__SWAP, 35, 8, {0}},
    [_TIER2_RESUME_CHECK] = {emit__TIER2_RESUME_CHECK, 19, 0, {0}},
    [_TO_BOOL] = {emit__TO_BOOL, 115, 32, {0}},
    [_TO_BOOL_BOOL] = {emit__TO_BOOL_BOOL, 28, 8, {0}},
    [_TO_BOOL_INT] = {emit__TO_BOOL_INT, 91, 32, {0}},
    [_TO_BOOL_LIST] = {emit__TO_BOOL_LIST, 86, 32, {0}},
    [_TO_BOOL_NONE] = {emit__TO_BOOL_NONE, 35, 16, {0}},
    [_TO_BOOL_STR] = {emit__TO_BOOL_STR, 97, 40, {0}},
    [_UNARY_INVERT] = {emit__UNARY_INVERT, 93, 16, {0}},
    [_UNARY_NEGATIVE] = {emit__UNARY_NEGATIVE, 93, 16, {0}},
    [_UNARY_NOT] = {emit__UNARY_NOT, 29, 16, {0}},
    [_UNPACK_EX] = {emit__UNPACK_EX, 150, 24, {0}},
    [_UNPACK_SEQUENCE] = {emit__UNPACK_SEQUENCE, 118, 24, {0}},
    [_UNPACK_SEQUENCE_LIST] = {emit__UNPACK_SEQUENCE_LIST, 152, 24, {0}},
    [_UNPACK_SEQUENCE_TUPLE] = {emit__UNPACK_SEQUENCE_TUPLE, 148, 24, {0}},
    [_UNPACK_SEQUENCE_TWO_TUPLE] = {emit__UNPACK_SEQUENCE_TWO_TUPLE, 114, 16, {0}},
    [_WITH_EXCEPT_START] = {emit__WITH_EXCEPT_START, 229, 32, {0}},
    [_YIELD_VALUE] = {emit__YIELD_VALUE, 101, 8, {0}},
};

static const void * const symbols_map[1] = {
    0
};
