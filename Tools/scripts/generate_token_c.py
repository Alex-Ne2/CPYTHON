# This script generates the opcode.h header file.

template = """\
/* Auto-generated by Tools/scripts/generate_token_c.py */

#include "Python.h"
#include "token.h"

/* Token names */

const char *_PyParser_TokenNames[] = {
%s\
};

/* Return the token corresponding to a single character */

int
PyToken_OneChar(int c1)
{
%s\
    return OP;
}

int
PyToken_TwoChars(int c1, int c2)
{
%s\
    return OP;
}

int
PyToken_ThreeChars(int c1, int c2, int c3)
{
%s\
    return OP;
}
"""

def generate_chars_to_token(mapping, n=1):
    result = []
    write = result.append
    indent = '    ' * n
    write(indent)
    write('switch (c%d) {\n' % (n,))
    for c in sorted(mapping):
        write(indent)
        value = mapping[c]
        if isinstance(value, dict):
            write("case '%s':\n" % (c,))
            write(generate_chars_to_token(value, n + 1))
            write(indent)
            write('    break;\n')
        else:
            write("case '%s': return %s;\n" % (c, value))
    write(indent)
    write('}\n')
    return ''.join(result)

def main(token_py='Lib/token.py', outfile='Parser/token.c'):
    token = {}
    with open(token_py) as fp:
        code = fp.read()
    exec(code, token)
    tok_name = token['tok_name']
    ERRORTOKEN = token['ERRORTOKEN']
    N_TOKENS = token['N_TOKENS']
    EXACT_TOKEN_TYPES = token['EXACT_TOKEN_TYPES']
    chars_to_token = {}
    for string, value in EXACT_TOKEN_TYPES.items():
        assert 1 <= len(string) <= 3
        name = tok_name[value]
        m = chars_to_token.setdefault(len(string), {})
        for c in string[:-1]:
            m = m.setdefault(c, {})
        m[string[-1]] = name

    names = []
    for value in range(N_TOKENS + 1):
        name = tok_name[value]
        if value >= ERRORTOKEN:
            name = '<%s>' % name
        names.append('    "%s",\n' % name)

    with open(outfile, 'w') as fobj:
        fobj.write(template % (
            ''.join(names),
            generate_chars_to_token(chars_to_token[1]),
            generate_chars_to_token(chars_to_token[2]),
            generate_chars_to_token(chars_to_token[3])
        ))

    print("%s regenerated from %s" % (outfile, token_py))


if __name__ == '__main__':
    import sys
    main(*sys.argv[1:])
