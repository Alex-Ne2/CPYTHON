import ast
import sys


from test.test_ast.utils import to_tuple


eval_opt_tests = [
    # Common arithmetic operations
    # There's no snippet for `@` operand since we don't have
    # builtin constant that implements `@` operator
    "1 + 1",
    "1 - 1",
    "1 * 1",
    "1 / 1",
    "1 // 1",
    "1 % 1",
    "1 ** 1",
    "1 << 1",
    "1 >> 1",
    "1 | 1",
    "1 ^ 1",
    "1 & 1",
    # Unary operators
    "~1",
    "-1",
    "+1",
    # Transformation from list to tuple and from set to frozenset
    "1 in [1, 2, 3]",
    "1 in {1, 2, 3}",
    # Tuple must be folded
    "(1, 2, 3)",
    # Subscription
    "(1, 2, 3)[0]",
]

exec_opt_tests = [
    # The same transformation as in eval_opt_tests
    "for _ in [1, 2, 3]:\n pass",
    "for _ in {1, 2, 3}:\n pass",
]


def main():
    if __name__ != '__main__':
        return
    if sys.argv[1:] == ['-g']:
        for snippets, kind in ((eval_opt_tests, "eval"), (exec_opt_tests, "exec")):
            folded = kind+"_results_folded = ["
            not_folded = kind+"_results_not_folded =["
            for snippet in snippets:
                folded_tree = ast.parse(snippet, "?", kind, optimize=2)
                not_folded_tree = ast.parse(snippet, "?", kind, optimize=-1)

                folded += "%r," % (to_tuple(folded_tree),) + "\n"
                not_folded += "%r," % (to_tuple(not_folded_tree),) + "\n"
            folded += "]"
            not_folded += "]"
            print(folded)
            print(not_folded)
        print("main()")


# Lines below are generated by running Lib/test/test_ast/opt_snippets.py -g
eval_results_folded = [('Expression', ('Constant', (1, 0, 1, 5), 2, None)),
('Expression', ('Constant', (1, 0, 1, 5), 0, None)),
('Expression', ('Constant', (1, 0, 1, 5), 1, None)),
('Expression', ('Constant', (1, 0, 1, 5), 1.0, None)),
('Expression', ('Constant', (1, 0, 1, 6), 1, None)),
('Expression', ('Constant', (1, 0, 1, 5), 0, None)),
('Expression', ('Constant', (1, 0, 1, 6), 1, None)),
('Expression', ('Constant', (1, 0, 1, 6), 2, None)),
('Expression', ('Constant', (1, 0, 1, 6), 0, None)),
('Expression', ('Constant', (1, 0, 1, 5), 1, None)),
('Expression', ('Constant', (1, 0, 1, 5), 0, None)),
('Expression', ('Constant', (1, 0, 1, 5), 1, None)),
('Expression', ('Constant', (1, 0, 1, 2), -2, None)),
('Expression', ('Constant', (1, 0, 1, 2), -1, None)),
('Expression', ('Constant', (1, 0, 1, 2), 1, None)),
('Expression', ('Compare', (1, 0, 1, 14), ('Constant', (1, 0, 1, 1), 1, None), [('In',)], [('Constant', (1, 5, 1, 14), (1, 2, 3), None)])),
('Expression', ('Compare', (1, 0, 1, 14), ('Constant', (1, 0, 1, 1), 1, None), [('In',)], [('Constant', (1, 5, 1, 14), frozenset({1, 2, 3}), None)])),
('Expression', ('Constant', (1, 0, 1, 9), (1, 2, 3), None)),
('Expression', ('Constant', (1, 0, 1, 12), 1, None)),
]
eval_results_not_folded =[('Expression', ('BinOp', (1, 0, 1, 5), ('Constant', (1, 0, 1, 1), 1, None), ('Add',), ('Constant', (1, 4, 1, 5), 1, None))),
('Expression', ('BinOp', (1, 0, 1, 5), ('Constant', (1, 0, 1, 1), 1, None), ('Sub',), ('Constant', (1, 4, 1, 5), 1, None))),
('Expression', ('BinOp', (1, 0, 1, 5), ('Constant', (1, 0, 1, 1), 1, None), ('Mult',), ('Constant', (1, 4, 1, 5), 1, None))),
('Expression', ('BinOp', (1, 0, 1, 5), ('Constant', (1, 0, 1, 1), 1, None), ('Div',), ('Constant', (1, 4, 1, 5), 1, None))),
('Expression', ('BinOp', (1, 0, 1, 6), ('Constant', (1, 0, 1, 1), 1, None), ('FloorDiv',), ('Constant', (1, 5, 1, 6), 1, None))),
('Expression', ('BinOp', (1, 0, 1, 5), ('Constant', (1, 0, 1, 1), 1, None), ('Mod',), ('Constant', (1, 4, 1, 5), 1, None))),
('Expression', ('BinOp', (1, 0, 1, 6), ('Constant', (1, 0, 1, 1), 1, None), ('Pow',), ('Constant', (1, 5, 1, 6), 1, None))),
('Expression', ('BinOp', (1, 0, 1, 6), ('Constant', (1, 0, 1, 1), 1, None), ('LShift',), ('Constant', (1, 5, 1, 6), 1, None))),
('Expression', ('BinOp', (1, 0, 1, 6), ('Constant', (1, 0, 1, 1), 1, None), ('RShift',), ('Constant', (1, 5, 1, 6), 1, None))),
('Expression', ('BinOp', (1, 0, 1, 5), ('Constant', (1, 0, 1, 1), 1, None), ('BitOr',), ('Constant', (1, 4, 1, 5), 1, None))),
('Expression', ('BinOp', (1, 0, 1, 5), ('Constant', (1, 0, 1, 1), 1, None), ('BitXor',), ('Constant', (1, 4, 1, 5), 1, None))),
('Expression', ('BinOp', (1, 0, 1, 5), ('Constant', (1, 0, 1, 1), 1, None), ('BitAnd',), ('Constant', (1, 4, 1, 5), 1, None))),
('Expression', ('UnaryOp', (1, 0, 1, 2), ('Invert',), ('Constant', (1, 1, 1, 2), 1, None))),
('Expression', ('UnaryOp', (1, 0, 1, 2), ('USub',), ('Constant', (1, 1, 1, 2), 1, None))),
('Expression', ('UnaryOp', (1, 0, 1, 2), ('UAdd',), ('Constant', (1, 1, 1, 2), 1, None))),
('Expression', ('Compare', (1, 0, 1, 14), ('Constant', (1, 0, 1, 1), 1, None), [('In',)], [('List', (1, 5, 1, 14), [('Constant', (1, 6, 1, 7), 1, None), ('Constant', (1, 9, 1, 10), 2, None), ('Constant', (1, 12, 1, 13), 3, None)], ('Load',))])),
('Expression', ('Compare', (1, 0, 1, 14), ('Constant', (1, 0, 1, 1), 1, None), [('In',)], [('Set', (1, 5, 1, 14), [('Constant', (1, 6, 1, 7), 1, None), ('Constant', (1, 9, 1, 10), 2, None), ('Constant', (1, 12, 1, 13), 3, None)])])),
('Expression', ('Tuple', (1, 0, 1, 9), [('Constant', (1, 1, 1, 2), 1, None), ('Constant', (1, 4, 1, 5), 2, None), ('Constant', (1, 7, 1, 8), 3, None)], ('Load',))),
('Expression', ('Subscript', (1, 0, 1, 12), ('Tuple', (1, 0, 1, 9), [('Constant', (1, 1, 1, 2), 1, None), ('Constant', (1, 4, 1, 5), 2, None), ('Constant', (1, 7, 1, 8), 3, None)], ('Load',)), ('Constant', (1, 10, 1, 11), 0, None), ('Load',))),
]
exec_results_folded = [('Module', [('For', (1, 0, 2, 5), ('Name', (1, 4, 1, 5), '_', ('Store',)), ('Constant', (1, 9, 1, 18), (1, 2, 3), None), [('Pass', (2, 1, 2, 5))], [], None)], []),
('Module', [('For', (1, 0, 2, 5), ('Name', (1, 4, 1, 5), '_', ('Store',)), ('Constant', (1, 9, 1, 18), frozenset({1, 2, 3}), None), [('Pass', (2, 1, 2, 5))], [], None)], []),
]
exec_results_not_folded =[('Module', [('For', (1, 0, 2, 5), ('Name', (1, 4, 1, 5), '_', ('Store',)), ('List', (1, 9, 1, 18), [('Constant', (1, 10, 1, 11), 1, None), ('Constant', (1, 13, 1, 14), 2, None), ('Constant', (1, 16, 1, 17), 3, None)], ('Load',)), [('Pass', (2, 1, 2, 5))], [], None)], []),
('Module', [('For', (1, 0, 2, 5), ('Name', (1, 4, 1, 5), '_', ('Store',)), ('Set', (1, 9, 1, 18), [('Constant', (1, 10, 1, 11), 1, None), ('Constant', (1, 13, 1, 14), 2, None), ('Constant', (1, 16, 1, 17), 3, None)]), [('Pass', (2, 1, 2, 5))], [], None)], []),
]
main()
