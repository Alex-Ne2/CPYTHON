#ifndef Py_OPCODE_H
#define Py_OPCODE_H
#ifdef __cplusplus
extern "C" {
#endif

#ifdef NEED_OPARG_KIND_TABLE
#define FOREACH_OPARG_KIND(DEF) \
        DEF(OPARG_KIND_UNUSED) \
        DEF(OPARG_KIND_REG) \
        DEF(OPARG_KIND_REGS) \
        DEF(OPARG_KIND_FREE) \
        DEF(OPARG_KIND_NAME) \
        DEF(OPARG_KIND_NEG_ADDR) \
        DEF(OPARG_KIND_ADDR) \
        DEF(OPARG_KIND_FLAG)

#define DEF_OPARG_KIND(X) X,
enum OpargKind {
    FOREACH_OPARG_KIND(DEF_OPARG_KIND)
};

#ifdef NEED_STRING_FOR_ENUM
#define DEF_OPARG_KIND_NAME(X) #X,
static const char *oparg_kind_names[] = {
        FOREACH_OPARG_KIND(DEF_OPARG_KIND_NAME)
};
#endif
#endif

#define REPEAT10(F, I) F(I##0) F(I##1) F(I##2) F(I##3) F(I##4) F(I##5) F(I##6) F(I##7) F(I##8) F(I##9)
#define FOREACH_OPCODE(DEF, PAD) \
        DEF(NOP, UNUSED, UNUSED, UNUSED) \
        \
        DEF(EXTENDED_ARG, FLAG, FLAG, FLAG) \
        \
        DEF(MOVE_FAST, REG, UNUSED, REG) \
        DEF(LOAD_TWO_FAST, REG, REG, REGS) \
        DEF(STORE_TWO_FAST, REG, REG, REGS) \
        DEF(DELETE_FAST, REG, FLAG, UNUSED) \
        DEF(LOAD_DEREF, FREE, UNUSED, REG) \
        DEF(STORE_DEREF, FREE, UNUSED, REG) \
        DEF(DELETE_DEREF, FREE, FLAG, UNUSED) \
        DEF(LOAD_CLASSDEREF, FREE, UNUSED, REG) \
        DEF(LOAD_GLOBAL, NAME, UNUSED, REG) \
        DEF(STORE_GLOBAL, NAME, UNUSED, REG) \
        DEF(DELETE_GLOBAL, NAME, FLAG, UNUSED) \
        DEF(LOAD_NAME, NAME, UNUSED, REG) \
        DEF(STORE_NAME, NAME, UNUSED, REG) \
        DEF(DELETE_NAME, NAME, FLAG, UNUSED) \
        \
        DEF(LOAD_ATTR, REG, NAME, REG) \
        DEF(STORE_ATTR, REG, NAME, REG) \
        DEF(DELETE_ATTR, REG, NAME, UNUSED) \
        DEF(LOAD_METHOD, REG, NAME, REGS) \
        DEF(LOAD_SUBSCR, REG, REG, REG) \
        DEF(STORE_SUBSCR, REG, REG, REG) \
        DEF(DELETE_SUBSCR, REG, REG, UNUSED) \
        \
        DEF(CALL_FUNCTION, FLAG, REGS, REG) \
        DEF(CALL_METHOD, FLAG, REGS, REG) \
        DEF(CALL_FUNCTION_KW, FLAG, REGS, REG) \
        DEF(CALL_METHOD_KW, FLAG, REGS, REG) \
        DEF(CALL_FUNCTION_EX, FLAG, REGS, REG) \
        \
        DEF(UNARY_INVERT, REG, UNUSED, REG) \
        DEF(UNARY_NOT, REG, UNUSED, REG) \
        DEF(UNARY_POSITIVE, REG, UNUSED, REG) \
        DEF(UNARY_NEGATIVE, REG, UNUSED, REG) \
        \
        DEF(BINARY_ADD, REG, REG, REG) \
        DEF(INPLACE_ADD, REG, REG, UNUSED) \
        DEF(BINARY_SUBTRACT, REG, REG, REG) \
        DEF(INPLACE_SUBTRACT, REG, REG, UNUSED) \
        DEF(BINARY_MULTIPLY, REG, REG, REG) \
        DEF(INPLACE_MULTIPLY, REG, REG, UNUSED) \
        DEF(BINARY_MATRIX_MULTIPLY, REG, REG, REG) \
        DEF(INPLACE_MATRIX_MULTIPLY, REG, REG, UNUSED) \
        DEF(BINARY_TRUE_DIVIDE, REG, REG, REG) \
        DEF(INPLACE_TRUE_DIVIDE, REG, REG, UNUSED) \
        DEF(BINARY_MODULO, REG, REG, REG) \
        DEF(INPLACE_MODULO, REG, REG, UNUSED) \
        DEF(BINARY_POWER, REG, REG, REG) \
        DEF(INPLACE_POWER, REG, REG, UNUSED) \
        DEF(BINARY_LSHIFT, REG, REG, REG) \
        DEF(INPLACE_LSHIFT, REG, REG, UNUSED) \
        DEF(BINARY_RSHIFT, REG, REG, REG) \
        DEF(INPLACE_RSHIFT, REG, REG, UNUSED) \
        DEF(BINARY_OR, REG, REG, REG) \
        DEF(INPLACE_OR, REG, REG, UNUSED) \
        DEF(BINARY_XOR, REG, REG, REG) \
        DEF(INPLACE_XOR, REG, REG, UNUSED) \
        DEF(BINARY_AND, REG, REG, REG) \
        DEF(INPLACE_AND, REG, REG, UNUSED) \
        DEF(BINARY_FLOOR_DIVIDE, REG, REG, REG) \
        DEF(INPLACE_FLOOR_DIVIDE, REG, REG, UNUSED) \
        \
        DEF(COMPARE_LT, REG, REG, REG) \
        DEF(COMPARE_LE, REG, REG, REG) \
        DEF(COMPARE_EQ, REG, REG, REG) \
        DEF(COMPARE_NE, REG, REG, REG) \
        DEF(COMPARE_GT, REG, REG, REG) \
        DEF(COMPARE_GE, REG, REG, REG) \
        DEF(IS_OP, REG, REG, REG) \
        DEF(CONTAINS_OP, REG, REG, REG) \
        \
        DEF(RETURN_VALUE, REG, UNUSED, UNUSED) \
        DEF(YIELD_VALUE, REG, UNUSED, REG) \
        DEF(GET_YIELD_FROM_ITER, REG, UNUSED, REGS) \
        DEF(YIELD_FROM, REGS, UNUSED, REG) \
        DEF(RAISE_EXCEPTION, FLAG, REG, REG) \
        \
        DEF(GET_CLOSURES, FLAG, REG, REG) \
        DEF(MAKE_FUNCTION, FLAG, REGS, REG) \
        DEF(SETUP_CLASS, REG, REG, REGS) \
        \
        DEF(JUMP_ALWAYS, UNUSED, NEG_ADDR, ADDR) \
        DEF(JUMP_IF_FALSE, REG, NEG_ADDR, ADDR) \
        DEF(JUMP_IF_TRUE, REG, NEG_ADDR, ADDR) \
        DEF(JUMP_IF_NOT_EXC_MATCH, REG, REG, ADDR) \
        \
        DEF(GET_ITER, REG, UNUSED, REG) \
        DEF(FOR_ITER, REG, REG, ADDR) \
        \
        DEF(START_TRY, REGS, UNUSED, ADDR) \
        DEF(REVOKE_EXCEPT, UNUSED, UNUSED, UNUSED) \
        DEF(CALL_FINALLY, UNUSED, UNUSED, ADDR) \
        DEF(END_FINALLY, FLAG, UNUSED, UNUSED) \
        DEF(ENTER_WITH, REGS, REG, ADDR) \
        DEF(EXIT_WITH, REG, UNUSED, UNUSED) \
        \
        DEF(TUPLE_BUILD, FLAG, REGS, REG) \
        DEF(TUPLE_FROM_LIST, REG, UNUSED, REG) \
        DEF(LIST_BUILD, FLAG, REGS, REG) \
        DEF(LIST_UPDATE, FLAG, REG, REG) \
        DEF(SET_BUILD, FLAG, REGS, REG) \
        DEF(SET_UPDATE, FLAG, REG, REG) \
        DEF(DICT_BUILD, FLAG, REGS, REG) \
        DEF(DICT_WITH_CONST_KEYS, REG, REGS, REG) \
        DEF(DICT_INSERT, REG, REG, REG) \
        DEF(DICT_UPDATE, REG, UNUSED, REG) \
        DEF(DICT_MERGE, REG, UNUSED, REG) \
        DEF(UNPACK_SEQUENCE, FLAG, REG, REGS) \
        DEF(UNPACK_EX, FLAG, REG, REGS) \
        \
        DEF(STRINGIFY_VALUE, FLAG, REG, REG) \
        DEF(FORMAT_VALUE, REG, REG, REG) \
        DEF(BUILD_STRING, FLAG, REGS, REG) \
        \
        DEF(BUILD_SLICE, FLAG, REG, REG) \
        \
        DEF(IMPORT_NAME, NAME, REG, REG) \
        DEF(IMPORT_FROM, REG, NAME, REG) \
        DEF(IMPORT_STAR, REG, UNUSED, UNUSED) \
        \
        DEF(GEN_START, FLAG, UNUSED, UNUSED) \
        DEF(GET_AWAITABLE, REG, UNUSED, REGS) \
        DEF(ENTER_ASYNC_WITH, REG, UNUSED, REGS) \
        DEF(EXIT_ASYNC_WITH, REG, UNUSED, UNUSED) \
        DEF(GET_ASYNC_ITER, REG, UNUSED, REG) \
        DEF(GET_ASYNC_NEXT, REG, UNUSED, REGS) \
        DEF(END_ASYNC_FOR, UNUSED, UNUSED, UNUSED) \
        \
        DEF(SETUP_ANNOTATIONS, UNUSED, UNUSED, UNUSED) \
        \
        DEF(PRINT_EXPR, REG, UNUSED, UNUSED) \
        \
        DEF(MATCH_SEQUENCE, FLAG, REG, REG) \
        DEF(MATCH_DICT, REG, REG, REG) \
        DEF(COPY_DICT_WITHOUT_KEYS, REG, REG, REG) \
        DEF(MATCH_CLASS, FLAG, REG, REG) \
        \
        PAD(119) \
        REPEAT10(PAD, 12) \
        REPEAT10(PAD, 13) \
        REPEAT10(PAD, 14) \
        REPEAT10(PAD, 15) \
        REPEAT10(PAD, 16) \
        REPEAT10(PAD, 17) \
        REPEAT10(PAD, 18) \
        REPEAT10(PAD, 19) \
        REPEAT10(PAD, 20) \
        REPEAT10(PAD, 21) \
        REPEAT10(PAD, 22) \
        REPEAT10(PAD, 23) \
        REPEAT10(PAD, 24) \
        PAD(250) PAD(251) PAD(252) PAD(253) PAD(254) PAD(255)


#define DEF_OPCODE(C, ...) C,
#define NO_OPCODE(I) DEF_OPCODE(_INVALID_OPCODE_##I)
typedef enum {
    FOREACH_OPCODE(DEF_OPCODE, NO_OPCODE)
} Opcode;

#ifdef NEED_STRING_FOR_ENUM
#define DEF_OPCODE_NAME(C, ...) #C,
#define NO_OPCODE_NAME(I) NULL,
static const char *opcode_names[] = {
        FOREACH_OPCODE(DEF_OPCODE_NAME, NO_OPCODE_NAME)
};
#endif

#ifdef NEED_OPARG_KIND_TABLE
#define DEF_OPARG_KIND_TABLE(C, A1, A2, A3, ...) {OPARG_KIND_##A1, OPARG_KIND_##A2, OPARG_KIND_##A3},
#define NO_OPARG_KIND_TABLE(I) DEF_OPARG_KIND_TABLE(, UNUSED, UNUSED, UNUSED)
static const enum OpargKind oparg_kind_table[][3] = {
        FOREACH_OPCODE(DEF_OPARG_KIND_TABLE, NO_OPARG_KIND_TABLE)
};
#endif

#ifdef __cplusplus
}
#endif
#endif /* !Py_OPCODE_H */
