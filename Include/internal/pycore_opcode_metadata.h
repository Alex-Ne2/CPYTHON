// This file is generated by Tools/cases_generator/opcode_metadata_generator.py
// from:
//   Python/bytecodes.c
// Do not edit!

#ifndef Py_CORE_OPCODE_METADATA_H
#define Py_CORE_OPCODE_METADATA_H
#ifdef __cplusplus
extern "C" {
#endif

#ifndef Py_BUILD_CORE
#  error "this header requires Py_BUILD_CORE define"
#endif

#include <stdbool.h>              // bool
#include "opcode_ids.h"


#define IS_PSEUDO_INSTR(OP)  ( \
    ((OP) == LOAD_CLOSURE) || \
    ((OP) == STORE_FAST_MAYBE_NULL) || \
    ((OP) == LOAD_SUPER_METHOD) || \
    ((OP) == LOAD_ZERO_SUPER_METHOD) || \
    ((OP) == LOAD_ZERO_SUPER_ATTR) || \
    ((OP) == LOAD_METHOD) || \
    ((OP) == JUMP) || \
    ((OP) == JUMP_NO_INTERRUPT) || \
    ((OP) == SETUP_FINALLY) || \
    ((OP) == SETUP_CLEANUP) || \
    ((OP) == SETUP_WITH) || \
    ((OP) == POP_BLOCK) || \
    0)

#include "pycore_uop_ids.h"
enum InstructionFormat {
    INSTR_FMT_IB = 1,
    INSTR_FMT_IBC = 2,
    INSTR_FMT_IBC00 = 3,
    INSTR_FMT_IBC000 = 4,
    INSTR_FMT_IBC00000000 = 5,
    INSTR_FMT_IX = 6,
    INSTR_FMT_IXC = 7,
    INSTR_FMT_IXC00 = 8,
    INSTR_FMT_IXC000 = 9,
};

#define IS_VALID_OPCODE(OP) \
    (((OP) >= 0) && ((OP) < 256) && \
     (_PyOpcode_opcode_metadata[(OP)].valid_entry))

#define HAS_ARG_FLAG (1)
#define HAS_CONST_FLAG (2)
#define HAS_NAME_FLAG (4)
#define HAS_JUMP_FLAG (8)
#define HAS_FREE_FLAG (16)
#define HAS_LOCAL_FLAG (32)
#define HAS_EVAL_BREAK_FLAG (64)
#define HAS_DEOPT_FLAG (128)
#define HAS_ERROR_FLAG (256)
#define HAS_ESCAPES_FLAG (512)
#define OPCODE_HAS_ARG(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_ARG_FLAG))
#define OPCODE_HAS_CONST(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_CONST_FLAG))
#define OPCODE_HAS_NAME(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_NAME_FLAG))
#define OPCODE_HAS_JUMP(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_JUMP_FLAG))
#define OPCODE_HAS_FREE(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_FREE_FLAG))
#define OPCODE_HAS_LOCAL(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_LOCAL_FLAG))
#define OPCODE_HAS_EVAL_BREAK(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_EVAL_BREAK_FLAG))
#define OPCODE_HAS_DEOPT(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_DEOPT_FLAG))
#define OPCODE_HAS_ERROR(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_ERROR_FLAG))
#define OPCODE_HAS_ESCAPES(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_ESCAPES_FLAG))
struct opcode_metadata {
    uint8_t valid_entry;
    uint8_t instr_format;
    uint16_t flags;
};

const struct opcode_metadata _PyOpcode_opcode_metadata[256] = {
    [BEFORE_ASYNC_WITH] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [BEFORE_WITH] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [BINARY_OP] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [BINARY_OP_ADD_FLOAT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG },
    [BINARY_OP_ADD_INT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [BINARY_OP_ADD_UNICODE] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [BINARY_OP_INPLACE_ADD_UNICODE] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [BINARY_OP_MULTIPLY_FLOAT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG },
    [BINARY_OP_MULTIPLY_INT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [BINARY_OP_SUBTRACT_FLOAT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG },
    [BINARY_OP_SUBTRACT_INT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [BINARY_SLICE] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [BINARY_SUBSCR] = { true, INSTR_FMT_IXC, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [BINARY_SUBSCR_DICT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [BINARY_SUBSCR_GETITEM] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [BINARY_SUBSCR_LIST_INT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG },
    [BINARY_SUBSCR_STR_INT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG },
    [BINARY_SUBSCR_TUPLE_INT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG },
    [BUILD_CONST_KEY_MAP] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [BUILD_LIST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [BUILD_MAP] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [BUILD_SET] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [BUILD_SLICE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [BUILD_STRING] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [BUILD_TUPLE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CACHE] = { true, INSTR_FMT_IX, HAS_ESCAPES_FLAG },
    [CALL] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_ALLOC_AND_ENTER_INIT] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_BOUND_METHOD_EXACT_ARGS] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [CALL_BUILTIN_CLASS] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [CALL_BUILTIN_FAST] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_BUILTIN_FAST_WITH_KEYWORDS] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_BUILTIN_O] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_FUNCTION_EX] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_INTRINSIC_1] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_INTRINSIC_2] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_ISINSTANCE] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_KW] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_LEN] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_LIST_APPEND] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [CALL_METHOD_DESCRIPTOR_FAST] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_METHOD_DESCRIPTOR_NOARGS] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_METHOD_DESCRIPTOR_O] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_PY_EXACT_ARGS] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [CALL_PY_WITH_DEFAULTS] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [CALL_STR_1] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_TUPLE_1] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CALL_TYPE_1] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [CHECK_EG_MATCH] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CHECK_EXC_MATCH] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CLEANUP_THROW] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [COMPARE_OP] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [COMPARE_OP_FLOAT] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [COMPARE_OP_INT] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [COMPARE_OP_STR] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [CONTAINS_OP] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [CONVERT_VALUE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [COPY] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [COPY_FREE_VARS] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [DELETE_ATTR] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [DELETE_DEREF] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [DELETE_FAST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [DELETE_GLOBAL] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [DELETE_NAME] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [DELETE_SUBSCR] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [DICT_MERGE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [DICT_UPDATE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [END_ASYNC_FOR] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [END_FOR] = { true, INSTR_FMT_IX, 0 },
    [END_SEND] = { true, INSTR_FMT_IX, 0 },
    [ENTER_EXECUTOR] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [EXIT_INIT_CHECK] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [EXTENDED_ARG] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [FORMAT_SIMPLE] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [FORMAT_WITH_SPEC] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [FOR_ITER] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_JUMP_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [FOR_ITER_GEN] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [FOR_ITER_LIST] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_JUMP_FLAG },
    [FOR_ITER_RANGE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_JUMP_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [FOR_ITER_TUPLE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_JUMP_FLAG },
    [GET_AITER] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [GET_ANEXT] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [GET_AWAITABLE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [GET_ITER] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [GET_LEN] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [GET_YIELD_FROM_ITER] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [IMPORT_FROM] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [IMPORT_NAME] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [INSTRUMENTED_CALL] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [INSTRUMENTED_CALL_FUNCTION_EX] = { true, INSTR_FMT_IX, 0 },
    [INSTRUMENTED_CALL_KW] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [INSTRUMENTED_END_FOR] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [INSTRUMENTED_END_SEND] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [INSTRUMENTED_FOR_ITER] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [INSTRUMENTED_INSTRUCTION] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [INSTRUMENTED_JUMP_BACKWARD] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG },
    [INSTRUMENTED_JUMP_FORWARD] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [INSTRUMENTED_LOAD_SUPER_ATTR] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG },
    [INSTRUMENTED_POP_JUMP_IF_FALSE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG },
    [INSTRUMENTED_POP_JUMP_IF_NONE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG },
    [INSTRUMENTED_POP_JUMP_IF_NOT_NONE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG },
    [INSTRUMENTED_POP_JUMP_IF_TRUE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG },
    [INSTRUMENTED_RESUME] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [INSTRUMENTED_RETURN_CONST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_CONST_FLAG },
    [INSTRUMENTED_RETURN_VALUE] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [INSTRUMENTED_YIELD_VALUE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [INTERPRETER_EXIT] = { true, INSTR_FMT_IX, HAS_ESCAPES_FLAG },
    [IS_OP] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [JUMP_BACKWARD] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_JUMP_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [JUMP_BACKWARD_NO_INTERRUPT] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_JUMP_FLAG },
    [JUMP_FORWARD] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_JUMP_FLAG },
    [LIST_APPEND] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [LIST_EXTEND] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_ASSERTION_ERROR] = { true, INSTR_FMT_IX, 0 },
    [LOAD_ATTR] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_ATTR_CLASS] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_ATTR_INSTANCE_VALUE] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_ATTR_METHOD_LAZY_DICT] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_ATTR_METHOD_NO_DICT] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_ATTR_METHOD_WITH_VALUES] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_ATTR_MODULE] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_ATTR_PROPERTY] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_ATTR_SLOT] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_ATTR_WITH_HINT] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_BUILD_CLASS] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_CONST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_CONST_FLAG },
    [LOAD_DEREF] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_FAST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [LOAD_FAST_AND_CLEAR] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [LOAD_FAST_CHECK] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [LOAD_FAST_LOAD_FAST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [LOAD_FROM_DICT_OR_DEREF] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_FROM_DICT_OR_GLOBALS] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_GLOBAL] = { true, INSTR_FMT_IBC000, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_GLOBAL_BUILTIN] = { true, INSTR_FMT_IBC000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_GLOBAL_MODULE] = { true, INSTR_FMT_IBC000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_LOCALS] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_NAME] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_SUPER_ATTR] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_SUPER_ATTR_ATTR] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [LOAD_SUPER_ATTR_METHOD] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [MAKE_CELL] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [MAKE_FUNCTION] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [MAP_ADD] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [MATCH_CLASS] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [MATCH_KEYS] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [MATCH_MAPPING] = { true, INSTR_FMT_IX, 0 },
    [MATCH_SEQUENCE] = { true, INSTR_FMT_IX, 0 },
    [NOP] = { true, INSTR_FMT_IX, 0 },
    [POP_EXCEPT] = { true, INSTR_FMT_IX, HAS_ESCAPES_FLAG },
    [POP_JUMP_IF_FALSE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_JUMP_FLAG },
    [POP_JUMP_IF_NONE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_JUMP_FLAG },
    [POP_JUMP_IF_NOT_NONE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_JUMP_FLAG },
    [POP_JUMP_IF_TRUE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_JUMP_FLAG },
    [POP_TOP] = { true, INSTR_FMT_IX, 0 },
    [PUSH_EXC_INFO] = { true, INSTR_FMT_IX, 0 },
    [PUSH_NULL] = { true, INSTR_FMT_IX, 0 },
    [RAISE_VARARGS] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [RERAISE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [RESERVED] = { true, INSTR_FMT_IX, HAS_ESCAPES_FLAG },
    [RESUME] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [RESUME_CHECK] = { true, INSTR_FMT_IX, HAS_DEOPT_FLAG },
    [RETURN_CONST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_CONST_FLAG },
    [RETURN_GENERATOR] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [RETURN_VALUE] = { true, INSTR_FMT_IX, HAS_ESCAPES_FLAG },
    [SEND] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_JUMP_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [SEND_GEN] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [SETUP_ANNOTATIONS] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [SET_ADD] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [SET_FUNCTION_ATTRIBUTE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ESCAPES_FLAG },
    [SET_UPDATE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [STORE_ATTR] = { true, INSTR_FMT_IBC000, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [STORE_ATTR_INSTANCE_VALUE] = { true, INSTR_FMT_IXC000, HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [STORE_ATTR_SLOT] = { true, INSTR_FMT_IXC000, HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [STORE_ATTR_WITH_HINT] = { true, INSTR_FMT_IBC000, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [STORE_DEREF] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ESCAPES_FLAG },
    [STORE_FAST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [STORE_FAST_LOAD_FAST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [STORE_FAST_STORE_FAST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [STORE_GLOBAL] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [STORE_NAME] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [STORE_SLICE] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [STORE_SUBSCR] = { true, INSTR_FMT_IXC, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [STORE_SUBSCR_DICT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [STORE_SUBSCR_LIST_INT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG },
    [SWAP] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [TO_BOOL] = { true, INSTR_FMT_IXC00, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [TO_BOOL_ALWAYS_TRUE] = { true, INSTR_FMT_IXC00, HAS_DEOPT_FLAG },
    [TO_BOOL_BOOL] = { true, INSTR_FMT_IXC00, HAS_DEOPT_FLAG },
    [TO_BOOL_INT] = { true, INSTR_FMT_IXC00, HAS_DEOPT_FLAG },
    [TO_BOOL_LIST] = { true, INSTR_FMT_IXC00, HAS_DEOPT_FLAG },
    [TO_BOOL_NONE] = { true, INSTR_FMT_IXC00, HAS_DEOPT_FLAG },
    [TO_BOOL_STR] = { true, INSTR_FMT_IXC00, HAS_DEOPT_FLAG },
    [UNARY_INVERT] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [UNARY_NEGATIVE] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [UNARY_NOT] = { true, INSTR_FMT_IX, 0 },
    [UNPACK_EX] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [UNPACK_SEQUENCE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [UNPACK_SEQUENCE_LIST] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [UNPACK_SEQUENCE_TUPLE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [UNPACK_SEQUENCE_TWO_TUPLE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [WITH_EXCEPT_START] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },
    [YIELD_VALUE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ESCAPES_FLAG },
};

#define MAX_UOP_PER_EXPANSION 9
struct opcode_macro_expansion {
    int nuops;struct { int16_t uop; int8_t size; int8_t offset; } uops[MAX_UOP_PER_EXPANSION];
};
extern const struct opcode_macro_expansion
_PyOpcode_macro_expansion[256];

#ifdef NEED_OPCODE_METADATA
const struct opcode_macro_expansion
_PyOpcode_macro_expansion[256] = {
    [BEFORE_ASYNC_WITH] = { .nops = 1, .uops = { { _BEFORE_ASYNC_WITH 0, 0 } }},
    [BEFORE_WITH] = { .nops = 1, .uops = { { _BEFORE_WITH 0, 0 } }},
    [BINARY_OP] = { .nops = 0, .uops = {  }},
    [BINARY_OP_ADD_FLOAT] = { .nops = 2, .uops = { { _GUARD_BOTH_FLOAT 0, 0 }, { _BINARY_OP_ADD_FLOAT 1, 0 } }},
    [BINARY_OP_ADD_INT] = { .nops = 2, .uops = { { _GUARD_BOTH_INT 0, 0 }, { _BINARY_OP_ADD_INT 1, 0 } }},
    [BINARY_OP_ADD_UNICODE] = { .nops = 2, .uops = { { _GUARD_BOTH_UNICODE 0, 0 }, { _BINARY_OP_ADD_UNICODE 1, 0 } }},
    [BINARY_OP_INPLACE_ADD_UNICODE] = { .nops = 2, .uops = { { _GUARD_BOTH_UNICODE 0, 0 }, { _BINARY_OP_INPLACE_ADD_UNICODE 1, 0 } }},
    [BINARY_OP_MULTIPLY_FLOAT] = { .nops = 2, .uops = { { _GUARD_BOTH_FLOAT 0, 0 }, { _BINARY_OP_MULTIPLY_FLOAT 1, 0 } }},
    [BINARY_OP_MULTIPLY_INT] = { .nops = 2, .uops = { { _GUARD_BOTH_INT 0, 0 }, { _BINARY_OP_MULTIPLY_INT 1, 0 } }},
    [BINARY_OP_SUBTRACT_FLOAT] = { .nops = 2, .uops = { { _GUARD_BOTH_FLOAT 0, 0 }, { _BINARY_OP_SUBTRACT_FLOAT 1, 0 } }},
    [BINARY_OP_SUBTRACT_INT] = { .nops = 2, .uops = { { _GUARD_BOTH_INT 0, 0 }, { _BINARY_OP_SUBTRACT_INT 1, 0 } }},
    [BINARY_SLICE] = { .nops = 1, .uops = { { _BINARY_SLICE 0, 0 } }},
    [BINARY_SUBSCR] = { .nops = 0, .uops = {  }},
    [BINARY_SUBSCR_DICT] = { .nops = 1, .uops = { { _BINARY_SUBSCR_DICT 1, 0 } }},
    [BINARY_SUBSCR_GETITEM] = { .nops = 0, .uops = {  }},
    [BINARY_SUBSCR_LIST_INT] = { .nops = 1, .uops = { { _BINARY_SUBSCR_LIST_INT 1, 0 } }},
    [BINARY_SUBSCR_STR_INT] = { .nops = 1, .uops = { { _BINARY_SUBSCR_STR_INT 1, 0 } }},
    [BINARY_SUBSCR_TUPLE_INT] = { .nops = 1, .uops = { { _BINARY_SUBSCR_TUPLE_INT 1, 0 } }},
    [BUILD_CONST_KEY_MAP] = { .nops = 1, .uops = { { _BUILD_CONST_KEY_MAP 0, 0 } }},
    [BUILD_LIST] = { .nops = 1, .uops = { { _BUILD_LIST 0, 0 } }},
    [BUILD_MAP] = { .nops = 1, .uops = { { _BUILD_MAP 0, 0 } }},
    [BUILD_SET] = { .nops = 1, .uops = { { _BUILD_SET 0, 0 } }},
    [BUILD_SLICE] = { .nops = 1, .uops = { { _BUILD_SLICE 0, 0 } }},
    [BUILD_STRING] = { .nops = 1, .uops = { { _BUILD_STRING 0, 0 } }},
    [BUILD_TUPLE] = { .nops = 1, .uops = { { _BUILD_TUPLE 0, 0 } }},
    [CACHE] = { .nops = 1, .uops = { { _CACHE 0, 0 } }},
    [CALL] = { .nops = 0, .uops = {  }},
    [CALL_ALLOC_AND_ENTER_INIT] = { .nops = 0, .uops = {  }},
    [CALL_BOUND_METHOD_EXACT_ARGS] = { .nops = 9, .uops = { { unused/1 1, 0 }, { _CHECK_PEP_523 0, 0 }, { _CHECK_CALL_BOUND_METHOD_EXACT_ARGS 0, 0 }, { _INIT_CALL_BOUND_METHOD_EXACT_ARGS 0, 0 }, { _CHECK_FUNCTION_EXACT_ARGS 2, 1 }, { _CHECK_STACK_SPACE 0, 0 }, { _INIT_CALL_PY_EXACT_ARGS 0, 0 }, { _SAVE_RETURN_OFFSET 7, 3 }, { _PUSH_FRAME 0, 0 } }},
    [CALL_BUILTIN_CLASS] = { .nops = 1, .uops = { { _CALL_BUILTIN_CLASS 3, 0 } }},
    [CALL_BUILTIN_FAST] = { .nops = 1, .uops = { { _CALL_BUILTIN_FAST 3, 0 } }},
    [CALL_BUILTIN_FAST_WITH_KEYWORDS] = { .nops = 1, .uops = { { _CALL_BUILTIN_FAST_WITH_KEYWORDS 3, 0 } }},
    [CALL_BUILTIN_O] = { .nops = 1, .uops = { { _CALL_BUILTIN_O 3, 0 } }},
    [CALL_FUNCTION_EX] = { .nops = 0, .uops = {  }},
    [CALL_INTRINSIC_1] = { .nops = 1, .uops = { { _CALL_INTRINSIC_1 0, 0 } }},
    [CALL_INTRINSIC_2] = { .nops = 1, .uops = { { _CALL_INTRINSIC_2 0, 0 } }},
    [CALL_ISINSTANCE] = { .nops = 1, .uops = { { _CALL_ISINSTANCE 3, 0 } }},
    [CALL_KW] = { .nops = 0, .uops = {  }},
    [CALL_LEN] = { .nops = 1, .uops = { { _CALL_LEN 3, 0 } }},
    [CALL_LIST_APPEND] = { .nops = 1, .uops = { { _CALL_LIST_APPEND 3, 0 } }},
    [CALL_METHOD_DESCRIPTOR_FAST] = { .nops = 1, .uops = { { _CALL_METHOD_DESCRIPTOR_FAST 3, 0 } }},
    [CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = { .nops = 1, .uops = { { _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS 3, 0 } }},
    [CALL_METHOD_DESCRIPTOR_NOARGS] = { .nops = 1, .uops = { { _CALL_METHOD_DESCRIPTOR_NOARGS 3, 0 } }},
    [CALL_METHOD_DESCRIPTOR_O] = { .nops = 1, .uops = { { _CALL_METHOD_DESCRIPTOR_O 3, 0 } }},
    [CALL_PY_EXACT_ARGS] = { .nops = 7, .uops = { { unused/1 1, 0 }, { _CHECK_PEP_523 0, 0 }, { _CHECK_FUNCTION_EXACT_ARGS 2, 1 }, { _CHECK_STACK_SPACE 0, 0 }, { _INIT_CALL_PY_EXACT_ARGS 0, 0 }, { _SAVE_RETURN_OFFSET 7, 3 }, { _PUSH_FRAME 0, 0 } }},
    [CALL_PY_WITH_DEFAULTS] = { .nops = 0, .uops = {  }},
    [CALL_STR_1] = { .nops = 1, .uops = { { _CALL_STR_1 3, 0 } }},
    [CALL_TUPLE_1] = { .nops = 1, .uops = { { _CALL_TUPLE_1 3, 0 } }},
    [CALL_TYPE_1] = { .nops = 1, .uops = { { _CALL_TYPE_1 3, 0 } }},
    [CHECK_EG_MATCH] = { .nops = 1, .uops = { { _CHECK_EG_MATCH 0, 0 } }},
    [CHECK_EXC_MATCH] = { .nops = 1, .uops = { { _CHECK_EXC_MATCH 0, 0 } }},
    [CLEANUP_THROW] = { .nops = 0, .uops = {  }},
    [COMPARE_OP] = { .nops = 0, .uops = {  }},
    [COMPARE_OP_FLOAT] = { .nops = 1, .uops = { { _COMPARE_OP_FLOAT 1, 0 } }},
    [COMPARE_OP_INT] = { .nops = 1, .uops = { { _COMPARE_OP_INT 1, 0 } }},
    [COMPARE_OP_STR] = { .nops = 1, .uops = { { _COMPARE_OP_STR 1, 0 } }},
    [CONTAINS_OP] = { .nops = 1, .uops = { { _CONTAINS_OP 0, 0 } }},
    [CONVERT_VALUE] = { .nops = 1, .uops = { { _CONVERT_VALUE 0, 0 } }},
    [COPY] = { .nops = 1, .uops = { { _COPY 0, 0 } }},
    [COPY_FREE_VARS] = { .nops = 1, .uops = { { _COPY_FREE_VARS 0, 0 } }},
    [DELETE_ATTR] = { .nops = 1, .uops = { { _DELETE_ATTR 0, 0 } }},
    [DELETE_DEREF] = { .nops = 1, .uops = { { _DELETE_DEREF 0, 0 } }},
    [DELETE_FAST] = { .nops = 1, .uops = { { _DELETE_FAST 0, 0 } }},
    [DELETE_GLOBAL] = { .nops = 1, .uops = { { _DELETE_GLOBAL 0, 0 } }},
    [DELETE_NAME] = { .nops = 1, .uops = { { _DELETE_NAME 0, 0 } }},
    [DELETE_SUBSCR] = { .nops = 1, .uops = { { _DELETE_SUBSCR 0, 0 } }},
    [DICT_MERGE] = { .nops = 1, .uops = { { _DICT_MERGE 0, 0 } }},
    [DICT_UPDATE] = { .nops = 1, .uops = { { _DICT_UPDATE 0, 0 } }},
    [END_ASYNC_FOR] = { .nops = 0, .uops = {  }},
    [END_FOR] = { .nops = 2, .uops = { { _POP_TOP 0, 0 }, { _POP_TOP 0, 0 } }},
    [END_SEND] = { .nops = 1, .uops = { { _END_SEND 0, 0 } }},
    [ENTER_EXECUTOR] = { .nops = 1, .uops = { { _ENTER_EXECUTOR 0, 0 } }},
    [EXIT_INIT_CHECK] = { .nops = 1, .uops = { { _EXIT_INIT_CHECK 0, 0 } }},
    [EXTENDED_ARG] = { .nops = 1, .uops = { { _EXTENDED_ARG 0, 0 } }},
    [FORMAT_SIMPLE] = { .nops = 1, .uops = { { _FORMAT_SIMPLE 0, 0 } }},
    [FORMAT_WITH_SPEC] = { .nops = 1, .uops = { { _FORMAT_WITH_SPEC 0, 0 } }},
    [FOR_ITER] = { .nops = 0, .uops = {  }},
    [FOR_ITER_GEN] = { .nops = 0, .uops = {  }},
    [FOR_ITER_LIST] = { .nops = 0, .uops = {  }},
    [FOR_ITER_RANGE] = { .nops = 0, .uops = {  }},
    [FOR_ITER_TUPLE] = { .nops = 0, .uops = {  }},
    [GET_AITER] = { .nops = 1, .uops = { { _GET_AITER 0, 0 } }},
    [GET_ANEXT] = { .nops = 1, .uops = { { _GET_ANEXT 0, 0 } }},
    [GET_AWAITABLE] = { .nops = 1, .uops = { { _GET_AWAITABLE 0, 0 } }},
    [GET_ITER] = { .nops = 1, .uops = { { _GET_ITER 0, 0 } }},
    [GET_LEN] = { .nops = 1, .uops = { { _GET_LEN 0, 0 } }},
    [GET_YIELD_FROM_ITER] = { .nops = 1, .uops = { { _GET_YIELD_FROM_ITER 0, 0 } }},
    [IMPORT_FROM] = { .nops = 1, .uops = { { _IMPORT_FROM 0, 0 } }},
    [IMPORT_NAME] = { .nops = 1, .uops = { { _IMPORT_NAME 0, 0 } }},
    [INSTRUMENTED_CALL] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_CALL_FUNCTION_EX] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_CALL_KW] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_END_FOR] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_END_SEND] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_FOR_ITER] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_INSTRUCTION] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_JUMP_BACKWARD] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_JUMP_FORWARD] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_LOAD_SUPER_ATTR] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_POP_JUMP_IF_FALSE] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_POP_JUMP_IF_NONE] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_POP_JUMP_IF_NOT_NONE] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_POP_JUMP_IF_TRUE] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_RESUME] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_RETURN_CONST] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_RETURN_VALUE] = { .nops = 0, .uops = {  }},
    [INSTRUMENTED_YIELD_VALUE] = { .nops = 0, .uops = {  }},
    [INTERPRETER_EXIT] = { .nops = 1, .uops = { { _INTERPRETER_EXIT 0, 0 } }},
    [IS_OP] = { .nops = 1, .uops = { { _IS_OP 0, 0 } }},
    [JUMP_BACKWARD] = { .nops = 0, .uops = {  }},
    [JUMP_BACKWARD_NO_INTERRUPT] = { .nops = 1, .uops = { { _JUMP_BACKWARD_NO_INTERRUPT 0, 0 } }},
    [JUMP_FORWARD] = { .nops = 1, .uops = { { _JUMP_FORWARD 0, 0 } }},
    [LIST_APPEND] = { .nops = 1, .uops = { { _LIST_APPEND 0, 0 } }},
    [LIST_EXTEND] = { .nops = 1, .uops = { { _LIST_EXTEND 0, 0 } }},
    [LOAD_ASSERTION_ERROR] = { .nops = 1, .uops = { { _LOAD_ASSERTION_ERROR 0, 0 } }},
    [LOAD_ATTR] = { .nops = 0, .uops = {  }},
    [LOAD_ATTR_CLASS] = { .nops = 4, .uops = { { unused/1 1, 0 }, { _CHECK_ATTR_CLASS 2, 1 }, { unused/2 2, 3 }, { _LOAD_ATTR_CLASS 4, 5 } }},
    [LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN] = { .nops = 0, .uops = {  }},
    [LOAD_ATTR_INSTANCE_VALUE] = { .nops = 5, .uops = { { unused/1 1, 0 }, { _GUARD_TYPE_VERSION 2, 1 }, { _CHECK_MANAGED_OBJECT_HAS_VALUES 0, 0 }, { _LOAD_ATTR_INSTANCE_VALUE 1, 3 }, { unused/5 5, 4 } }},
    [LOAD_ATTR_METHOD_LAZY_DICT] = { .nops = 5, .uops = { { unused/1 1, 0 }, { _GUARD_TYPE_VERSION 2, 1 }, { _CHECK_ATTR_METHOD_LAZY_DICT 0, 0 }, { unused/2 2, 3 }, { _LOAD_ATTR_METHOD_LAZY_DICT 4, 5 } }},
    [LOAD_ATTR_METHOD_NO_DICT] = { .nops = 4, .uops = { { unused/1 1, 0 }, { _GUARD_TYPE_VERSION 2, 1 }, { unused/2 2, 3 }, { _LOAD_ATTR_METHOD_NO_DICT 4, 5 } }},
    [LOAD_ATTR_METHOD_WITH_VALUES] = { .nops = 5, .uops = { { unused/1 1, 0 }, { _GUARD_TYPE_VERSION 2, 1 }, { _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT 0, 0 }, { _GUARD_KEYS_VERSION 2, 3 }, { _LOAD_ATTR_METHOD_WITH_VALUES 4, 5 } }},
    [LOAD_ATTR_MODULE] = { .nops = 4, .uops = { { unused/1 1, 0 }, { _CHECK_ATTR_MODULE 2, 1 }, { _LOAD_ATTR_MODULE 1, 3 }, { unused/5 5, 4 } }},
    [LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = { .nops = 4, .uops = { { unused/1 1, 0 }, { _GUARD_TYPE_VERSION 2, 1 }, { unused/2 2, 3 }, { _LOAD_ATTR_NONDESCRIPTOR_NO_DICT 4, 5 } }},
    [LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = { .nops = 5, .uops = { { unused/1 1, 0 }, { _GUARD_TYPE_VERSION 2, 1 }, { _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT 0, 0 }, { _GUARD_KEYS_VERSION 2, 3 }, { _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES 4, 5 } }},
    [LOAD_ATTR_PROPERTY] = { .nops = 0, .uops = {  }},
    [LOAD_ATTR_SLOT] = { .nops = 4, .uops = { { unused/1 1, 0 }, { _GUARD_TYPE_VERSION 2, 1 }, { _LOAD_ATTR_SLOT 1, 3 }, { unused/5 5, 4 } }},
    [LOAD_ATTR_WITH_HINT] = { .nops = 5, .uops = { { unused/1 1, 0 }, { _GUARD_TYPE_VERSION 2, 1 }, { _CHECK_ATTR_WITH_HINT 0, 0 }, { _LOAD_ATTR_WITH_HINT 1, 3 }, { unused/5 5, 4 } }},
    [LOAD_BUILD_CLASS] = { .nops = 1, .uops = { { _LOAD_BUILD_CLASS 0, 0 } }},
    [LOAD_CONST] = { .nops = 1, .uops = { { _LOAD_CONST 0, 0 } }},
    [LOAD_DEREF] = { .nops = 1, .uops = { { _LOAD_DEREF 0, 0 } }},
    [LOAD_FAST] = { .nops = 1, .uops = { { _LOAD_FAST 0, 0 } }},
    [LOAD_FAST_AND_CLEAR] = { .nops = 1, .uops = { { _LOAD_FAST_AND_CLEAR 0, 0 } }},
    [LOAD_FAST_CHECK] = { .nops = 1, .uops = { { _LOAD_FAST_CHECK 0, 0 } }},
    [LOAD_FAST_LOAD_FAST] = { .nops = 2, .uops = { { _LOAD_FAST 5, 0 }, { _LOAD_FAST 6, 0 } }},
    [LOAD_FROM_DICT_OR_DEREF] = { .nops = 1, .uops = { { _LOAD_FROM_DICT_OR_DEREF 0, 0 } }},
    [LOAD_FROM_DICT_OR_GLOBALS] = { .nops = 1, .uops = { { _LOAD_FROM_DICT_OR_GLOBALS 0, 0 } }},
    [LOAD_GLOBAL] = { .nops = 0, .uops = {  }},
    [LOAD_GLOBAL_BUILTIN] = { .nops = 4, .uops = { { unused/1 1, 0 }, { _GUARD_GLOBALS_VERSION 1, 1 }, { _GUARD_BUILTINS_VERSION 1, 2 }, { _LOAD_GLOBAL_BUILTINS 1, 3 } }},
    [LOAD_GLOBAL_MODULE] = { .nops = 4, .uops = { { unused/1 1, 0 }, { _GUARD_GLOBALS_VERSION 1, 1 }, { unused/1 1, 2 }, { _LOAD_GLOBAL_MODULE 1, 3 } }},
    [LOAD_LOCALS] = { .nops = 1, .uops = { { _LOAD_LOCALS 0, 0 } }},
    [LOAD_NAME] = { .nops = 1, .uops = { { _LOAD_NAME 0, 0 } }},
    [LOAD_SUPER_ATTR] = { .nops = 0, .uops = {  }},
    [LOAD_SUPER_ATTR_ATTR] = { .nops = 1, .uops = { { _LOAD_SUPER_ATTR_ATTR 1, 0 } }},
    [LOAD_SUPER_ATTR_METHOD] = { .nops = 1, .uops = { { _LOAD_SUPER_ATTR_METHOD 1, 0 } }},
    [MAKE_CELL] = { .nops = 1, .uops = { { _MAKE_CELL 0, 0 } }},
    [MAKE_FUNCTION] = { .nops = 1, .uops = { { _MAKE_FUNCTION 0, 0 } }},
    [MAP_ADD] = { .nops = 1, .uops = { { _MAP_ADD 0, 0 } }},
    [MATCH_CLASS] = { .nops = 1, .uops = { { _MATCH_CLASS 0, 0 } }},
    [MATCH_KEYS] = { .nops = 1, .uops = { { _MATCH_KEYS 0, 0 } }},
    [MATCH_MAPPING] = { .nops = 1, .uops = { { _MATCH_MAPPING 0, 0 } }},
    [MATCH_SEQUENCE] = { .nops = 1, .uops = { { _MATCH_SEQUENCE 0, 0 } }},
    [NOP] = { .nops = 1, .uops = { { _NOP 0, 0 } }},
    [POP_EXCEPT] = { .nops = 1, .uops = { { _POP_EXCEPT 0, 0 } }},
    [POP_JUMP_IF_FALSE] = { .nops = 0, .uops = {  }},
    [POP_JUMP_IF_NONE] = { .nops = 0, .uops = {  }},
    [POP_JUMP_IF_NOT_NONE] = { .nops = 0, .uops = {  }},
    [POP_JUMP_IF_TRUE] = { .nops = 0, .uops = {  }},
    [POP_TOP] = { .nops = 1, .uops = { { _POP_TOP 0, 0 } }},
    [PUSH_EXC_INFO] = { .nops = 1, .uops = { { _PUSH_EXC_INFO 0, 0 } }},
    [PUSH_NULL] = { .nops = 1, .uops = { { _PUSH_NULL 0, 0 } }},
    [RAISE_VARARGS] = { .nops = 0, .uops = {  }},
    [RERAISE] = { .nops = 0, .uops = {  }},
    [RESERVED] = { .nops = 1, .uops = { { _RESERVED 0, 0 } }},
    [RESUME] = { .nops = 0, .uops = {  }},
    [RESUME_CHECK] = { .nops = 1, .uops = { { _RESUME_CHECK 0, 0 } }},
    [RETURN_CONST] = { .nops = 2, .uops = { { _LOAD_CONST 0, 0 }, { _POP_FRAME 0, 0 } }},
    [RETURN_GENERATOR] = { .nops = 1, .uops = { { _RETURN_GENERATOR 0, 0 } }},
    [RETURN_VALUE] = { .nops = 1, .uops = { { _POP_FRAME 0, 0 } }},
    [SEND] = { .nops = 0, .uops = {  }},
    [SEND_GEN] = { .nops = 0, .uops = {  }},
    [SETUP_ANNOTATIONS] = { .nops = 1, .uops = { { _SETUP_ANNOTATIONS 0, 0 } }},
    [SET_ADD] = { .nops = 1, .uops = { { _SET_ADD 0, 0 } }},
    [SET_FUNCTION_ATTRIBUTE] = { .nops = 1, .uops = { { _SET_FUNCTION_ATTRIBUTE 0, 0 } }},
    [SET_UPDATE] = { .nops = 1, .uops = { { _SET_UPDATE 0, 0 } }},
    [STORE_ATTR] = { .nops = 0, .uops = {  }},
    [STORE_ATTR_INSTANCE_VALUE] = { .nops = 4, .uops = { { unused/1 1, 0 }, { _GUARD_TYPE_VERSION 2, 1 }, { _GUARD_DORV_VALUES 0, 0 }, { _STORE_ATTR_INSTANCE_VALUE 1, 3 } }},
    [STORE_ATTR_SLOT] = { .nops = 3, .uops = { { unused/1 1, 0 }, { _GUARD_TYPE_VERSION 2, 1 }, { _STORE_ATTR_SLOT 1, 3 } }},
    [STORE_ATTR_WITH_HINT] = { .nops = 0, .uops = {  }},
    [STORE_DEREF] = { .nops = 1, .uops = { { _STORE_DEREF 0, 0 } }},
    [STORE_FAST] = { .nops = 1, .uops = { { _STORE_FAST 0, 0 } }},
    [STORE_FAST_LOAD_FAST] = { .nops = 2, .uops = { { _STORE_FAST 5, 0 }, { _LOAD_FAST 6, 0 } }},
    [STORE_FAST_STORE_FAST] = { .nops = 2, .uops = { { _STORE_FAST 5, 0 }, { _STORE_FAST 6, 0 } }},
    [STORE_GLOBAL] = { .nops = 1, .uops = { { _STORE_GLOBAL 0, 0 } }},
    [STORE_NAME] = { .nops = 1, .uops = { { _STORE_NAME 0, 0 } }},
    [STORE_SLICE] = { .nops = 1, .uops = { { _STORE_SLICE 0, 0 } }},
    [STORE_SUBSCR] = { .nops = 0, .uops = {  }},
    [STORE_SUBSCR_DICT] = { .nops = 1, .uops = { { _STORE_SUBSCR_DICT 1, 0 } }},
    [STORE_SUBSCR_LIST_INT] = { .nops = 1, .uops = { { _STORE_SUBSCR_LIST_INT 1, 0 } }},
    [SWAP] = { .nops = 1, .uops = { { _SWAP 0, 0 } }},
    [TO_BOOL] = { .nops = 0, .uops = {  }},
    [TO_BOOL_ALWAYS_TRUE] = { .nops = 1, .uops = { { _TO_BOOL_ALWAYS_TRUE 3, 0 } }},
    [TO_BOOL_BOOL] = { .nops = 1, .uops = { { _TO_BOOL_BOOL 3, 0 } }},
    [TO_BOOL_INT] = { .nops = 1, .uops = { { _TO_BOOL_INT 3, 0 } }},
    [TO_BOOL_LIST] = { .nops = 1, .uops = { { _TO_BOOL_LIST 3, 0 } }},
    [TO_BOOL_NONE] = { .nops = 1, .uops = { { _TO_BOOL_NONE 3, 0 } }},
    [TO_BOOL_STR] = { .nops = 1, .uops = { { _TO_BOOL_STR 3, 0 } }},
    [UNARY_INVERT] = { .nops = 1, .uops = { { _UNARY_INVERT 0, 0 } }},
    [UNARY_NEGATIVE] = { .nops = 1, .uops = { { _UNARY_NEGATIVE 0, 0 } }},
    [UNARY_NOT] = { .nops = 1, .uops = { { _UNARY_NOT 0, 0 } }},
    [UNPACK_EX] = { .nops = 1, .uops = { { _UNPACK_EX 0, 0 } }},
    [UNPACK_SEQUENCE] = { .nops = 0, .uops = {  }},
    [UNPACK_SEQUENCE_LIST] = { .nops = 1, .uops = { { _UNPACK_SEQUENCE_LIST 1, 0 } }},
    [UNPACK_SEQUENCE_TUPLE] = { .nops = 1, .uops = { { _UNPACK_SEQUENCE_TUPLE 1, 0 } }},
    [UNPACK_SEQUENCE_TWO_TUPLE] = { .nops = 1, .uops = { { _UNPACK_SEQUENCE_TWO_TUPLE 1, 0 } }},
    [WITH_EXCEPT_START] = { .nops = 1, .uops = { { _WITH_EXCEPT_START 0, 0 } }},
    [YIELD_VALUE] = { .nops = 1, .uops = { { _YIELD_VALUE 0, 0 } }},
};
#endif // NEED_OPCODE_METADATA

extern const uint8_t _PyOpcode_Deopt[256];
#ifdef NEED_OPCODE_METADATA
const uint8_t _PyOpcode_Deopt[256] = {
    [NOP] = NOP,
    [RESUME] = RESUME,
    [RESUME_CHECK] = RESUME,
    [INSTRUMENTED_RESUME] = INSTRUMENTED_RESUME,
    [LOAD_FAST_CHECK] = LOAD_FAST_CHECK,
    [LOAD_FAST] = LOAD_FAST,
    [LOAD_FAST_AND_CLEAR] = LOAD_FAST_AND_CLEAR,
    [LOAD_FAST_LOAD_FAST] = LOAD_FAST_LOAD_FAST,
    [LOAD_CONST] = LOAD_CONST,
    [STORE_FAST] = STORE_FAST,
    [STORE_FAST_LOAD_FAST] = STORE_FAST_LOAD_FAST,
    [STORE_FAST_STORE_FAST] = STORE_FAST_STORE_FAST,
    [POP_TOP] = POP_TOP,
    [PUSH_NULL] = PUSH_NULL,
    [INSTRUMENTED_END_FOR] = INSTRUMENTED_END_FOR,
    [END_SEND] = END_SEND,
    [INSTRUMENTED_END_SEND] = INSTRUMENTED_END_SEND,
    [UNARY_NEGATIVE] = UNARY_NEGATIVE,
    [UNARY_NOT] = UNARY_NOT,
    [TO_BOOL_BOOL] = TO_BOOL,
    [TO_BOOL_INT] = TO_BOOL,
    [TO_BOOL_LIST] = TO_BOOL,
    [TO_BOOL_NONE] = TO_BOOL,
    [TO_BOOL_STR] = TO_BOOL,
    [TO_BOOL_ALWAYS_TRUE] = TO_BOOL,
    [UNARY_INVERT] = UNARY_INVERT,
    [BINARY_SLICE] = BINARY_SLICE,
    [STORE_SLICE] = STORE_SLICE,
    [BINARY_SUBSCR_LIST_INT] = BINARY_SUBSCR,
    [BINARY_SUBSCR_STR_INT] = BINARY_SUBSCR,
    [BINARY_SUBSCR_TUPLE_INT] = BINARY_SUBSCR,
    [BINARY_SUBSCR_DICT] = BINARY_SUBSCR,
    [BINARY_SUBSCR_GETITEM] = BINARY_SUBSCR,
    [LIST_APPEND] = LIST_APPEND,
    [SET_ADD] = SET_ADD,
    [STORE_SUBSCR_LIST_INT] = STORE_SUBSCR,
    [STORE_SUBSCR_DICT] = STORE_SUBSCR,
    [DELETE_SUBSCR] = DELETE_SUBSCR,
    [CALL_INTRINSIC_1] = CALL_INTRINSIC_1,
    [CALL_INTRINSIC_2] = CALL_INTRINSIC_2,
    [RAISE_VARARGS] = RAISE_VARARGS,
    [INTERPRETER_EXIT] = INTERPRETER_EXIT,
    [INSTRUMENTED_RETURN_VALUE] = INSTRUMENTED_RETURN_VALUE,
    [INSTRUMENTED_RETURN_CONST] = INSTRUMENTED_RETURN_CONST,
    [GET_AITER] = GET_AITER,
    [GET_ANEXT] = GET_ANEXT,
    [GET_AWAITABLE] = GET_AWAITABLE,
    [SEND_GEN] = SEND,
    [INSTRUMENTED_YIELD_VALUE] = INSTRUMENTED_YIELD_VALUE,
    [YIELD_VALUE] = YIELD_VALUE,
    [POP_EXCEPT] = POP_EXCEPT,
    [RERAISE] = RERAISE,
    [END_ASYNC_FOR] = END_ASYNC_FOR,
    [CLEANUP_THROW] = CLEANUP_THROW,
    [LOAD_ASSERTION_ERROR] = LOAD_ASSERTION_ERROR,
    [LOAD_BUILD_CLASS] = LOAD_BUILD_CLASS,
    [STORE_NAME] = STORE_NAME,
    [DELETE_NAME] = DELETE_NAME,
    [UNPACK_SEQUENCE_TWO_TUPLE] = UNPACK_SEQUENCE,
    [UNPACK_SEQUENCE_TUPLE] = UNPACK_SEQUENCE,
    [UNPACK_SEQUENCE_LIST] = UNPACK_SEQUENCE,
    [UNPACK_EX] = UNPACK_EX,
    [DELETE_ATTR] = DELETE_ATTR,
    [STORE_GLOBAL] = STORE_GLOBAL,
    [DELETE_GLOBAL] = DELETE_GLOBAL,
    [LOAD_LOCALS] = LOAD_LOCALS,
    [LOAD_FROM_DICT_OR_GLOBALS] = LOAD_FROM_DICT_OR_GLOBALS,
    [LOAD_NAME] = LOAD_NAME,
    [DELETE_FAST] = DELETE_FAST,
    [MAKE_CELL] = MAKE_CELL,
    [DELETE_DEREF] = DELETE_DEREF,
    [LOAD_FROM_DICT_OR_DEREF] = LOAD_FROM_DICT_OR_DEREF,
    [LOAD_DEREF] = LOAD_DEREF,
    [STORE_DEREF] = STORE_DEREF,
    [COPY_FREE_VARS] = COPY_FREE_VARS,
    [BUILD_STRING] = BUILD_STRING,
    [BUILD_TUPLE] = BUILD_TUPLE,
    [BUILD_LIST] = BUILD_LIST,
    [LIST_EXTEND] = LIST_EXTEND,
    [SET_UPDATE] = SET_UPDATE,
    [BUILD_SET] = BUILD_SET,
    [BUILD_MAP] = BUILD_MAP,
    [SETUP_ANNOTATIONS] = SETUP_ANNOTATIONS,
    [BUILD_CONST_KEY_MAP] = BUILD_CONST_KEY_MAP,
    [DICT_UPDATE] = DICT_UPDATE,
    [DICT_MERGE] = DICT_MERGE,
    [MAP_ADD] = MAP_ADD,
    [INSTRUMENTED_LOAD_SUPER_ATTR] = INSTRUMENTED_LOAD_SUPER_ATTR,
    [LOAD_SUPER_ATTR_ATTR] = LOAD_SUPER_ATTR,
    [LOAD_SUPER_ATTR_METHOD] = LOAD_SUPER_ATTR,
    [LOAD_ATTR_PROPERTY] = LOAD_ATTR,
    [LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN] = LOAD_ATTR,
    [STORE_ATTR_WITH_HINT] = STORE_ATTR,
    [COMPARE_OP_FLOAT] = COMPARE_OP,
    [COMPARE_OP_INT] = COMPARE_OP,
    [COMPARE_OP_STR] = COMPARE_OP,
    [IS_OP] = IS_OP,
    [CONTAINS_OP] = CONTAINS_OP,
    [CHECK_EG_MATCH] = CHECK_EG_MATCH,
    [CHECK_EXC_MATCH] = CHECK_EXC_MATCH,
    [IMPORT_NAME] = IMPORT_NAME,
    [IMPORT_FROM] = IMPORT_FROM,
    [JUMP_FORWARD] = JUMP_FORWARD,
    [JUMP_BACKWARD] = JUMP_BACKWARD,
    [ENTER_EXECUTOR] = ENTER_EXECUTOR,
    [JUMP_BACKWARD_NO_INTERRUPT] = JUMP_BACKWARD_NO_INTERRUPT,
    [GET_LEN] = GET_LEN,
    [MATCH_CLASS] = MATCH_CLASS,
    [MATCH_MAPPING] = MATCH_MAPPING,
    [MATCH_SEQUENCE] = MATCH_SEQUENCE,
    [MATCH_KEYS] = MATCH_KEYS,
    [GET_ITER] = GET_ITER,
    [GET_YIELD_FROM_ITER] = GET_YIELD_FROM_ITER,
    [INSTRUMENTED_FOR_ITER] = INSTRUMENTED_FOR_ITER,
    [FOR_ITER_GEN] = FOR_ITER,
    [BEFORE_ASYNC_WITH] = BEFORE_ASYNC_WITH,
    [BEFORE_WITH] = BEFORE_WITH,
    [WITH_EXCEPT_START] = WITH_EXCEPT_START,
    [PUSH_EXC_INFO] = PUSH_EXC_INFO,
    [INSTRUMENTED_CALL] = INSTRUMENTED_CALL,
    [CALL_PY_WITH_DEFAULTS] = CALL,
    [CALL_TYPE_1] = CALL,
    [CALL_STR_1] = CALL,
    [CALL_TUPLE_1] = CALL,
    [CALL_ALLOC_AND_ENTER_INIT] = CALL,
    [EXIT_INIT_CHECK] = EXIT_INIT_CHECK,
    [CALL_BUILTIN_CLASS] = CALL,
    [CALL_BUILTIN_O] = CALL,
    [CALL_BUILTIN_FAST] = CALL,
    [CALL_BUILTIN_FAST_WITH_KEYWORDS] = CALL,
    [CALL_LEN] = CALL,
    [CALL_ISINSTANCE] = CALL,
    [CALL_LIST_APPEND] = CALL,
    [CALL_METHOD_DESCRIPTOR_O] = CALL,
    [CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = CALL,
    [CALL_METHOD_DESCRIPTOR_NOARGS] = CALL,
    [CALL_METHOD_DESCRIPTOR_FAST] = CALL,
    [INSTRUMENTED_CALL_KW] = INSTRUMENTED_CALL_KW,
    [CALL_KW] = CALL_KW,
    [INSTRUMENTED_CALL_FUNCTION_EX] = INSTRUMENTED_CALL_FUNCTION_EX,
    [CALL_FUNCTION_EX] = CALL_FUNCTION_EX,
    [MAKE_FUNCTION] = MAKE_FUNCTION,
    [SET_FUNCTION_ATTRIBUTE] = SET_FUNCTION_ATTRIBUTE,
    [RETURN_GENERATOR] = RETURN_GENERATOR,
    [BUILD_SLICE] = BUILD_SLICE,
    [CONVERT_VALUE] = CONVERT_VALUE,
    [FORMAT_SIMPLE] = FORMAT_SIMPLE,
    [FORMAT_WITH_SPEC] = FORMAT_WITH_SPEC,
    [COPY] = COPY,
    [SWAP] = SWAP,
    [INSTRUMENTED_INSTRUCTION] = INSTRUMENTED_INSTRUCTION,
    [INSTRUMENTED_JUMP_FORWARD] = INSTRUMENTED_JUMP_FORWARD,
    [INSTRUMENTED_JUMP_BACKWARD] = INSTRUMENTED_JUMP_BACKWARD,
    [INSTRUMENTED_POP_JUMP_IF_TRUE] = INSTRUMENTED_POP_JUMP_IF_TRUE,
    [INSTRUMENTED_POP_JUMP_IF_FALSE] = INSTRUMENTED_POP_JUMP_IF_FALSE,
    [INSTRUMENTED_POP_JUMP_IF_NONE] = INSTRUMENTED_POP_JUMP_IF_NONE,
    [INSTRUMENTED_POP_JUMP_IF_NOT_NONE] = INSTRUMENTED_POP_JUMP_IF_NOT_NONE,
    [EXTENDED_ARG] = EXTENDED_ARG,
    [CACHE] = CACHE,
    [RESERVED] = RESERVED,
    [END_FOR] = END_FOR,
    [TO_BOOL] = TO_BOOL,
    [BINARY_OP_MULTIPLY_INT] = BINARY_OP,
    [BINARY_OP_ADD_INT] = BINARY_OP,
    [BINARY_OP_SUBTRACT_INT] = BINARY_OP,
    [BINARY_OP_MULTIPLY_FLOAT] = BINARY_OP,
    [BINARY_OP_ADD_FLOAT] = BINARY_OP,
    [BINARY_OP_SUBTRACT_FLOAT] = BINARY_OP,
    [BINARY_OP_ADD_UNICODE] = BINARY_OP,
    [BINARY_OP_INPLACE_ADD_UNICODE] = BINARY_OP,
    [BINARY_SUBSCR] = BINARY_SUBSCR,
    [STORE_SUBSCR] = STORE_SUBSCR,
    [RETURN_VALUE] = RETURN_VALUE,
    [RETURN_CONST] = RETURN_CONST,
    [SEND] = SEND,
    [UNPACK_SEQUENCE] = UNPACK_SEQUENCE,
    [STORE_ATTR] = STORE_ATTR,
    [LOAD_GLOBAL] = LOAD_GLOBAL,
    [LOAD_GLOBAL_MODULE] = LOAD_GLOBAL,
    [LOAD_GLOBAL_BUILTIN] = LOAD_GLOBAL,
    [LOAD_SUPER_ATTR] = LOAD_SUPER_ATTR,
    [LOAD_ATTR] = LOAD_ATTR,
    [LOAD_ATTR_INSTANCE_VALUE] = LOAD_ATTR,
    [LOAD_ATTR_MODULE] = LOAD_ATTR,
    [LOAD_ATTR_WITH_HINT] = LOAD_ATTR,
    [LOAD_ATTR_SLOT] = LOAD_ATTR,
    [LOAD_ATTR_CLASS] = LOAD_ATTR,
    [STORE_ATTR_INSTANCE_VALUE] = STORE_ATTR,
    [STORE_ATTR_SLOT] = STORE_ATTR,
    [COMPARE_OP] = COMPARE_OP,
    [POP_JUMP_IF_TRUE] = POP_JUMP_IF_TRUE,
    [POP_JUMP_IF_FALSE] = POP_JUMP_IF_FALSE,
    [POP_JUMP_IF_NONE] = POP_JUMP_IF_NONE,
    [POP_JUMP_IF_NOT_NONE] = POP_JUMP_IF_NOT_NONE,
    [FOR_ITER] = FOR_ITER,
    [FOR_ITER_LIST] = FOR_ITER,
    [FOR_ITER_TUPLE] = FOR_ITER,
    [FOR_ITER_RANGE] = FOR_ITER,
    [LOAD_ATTR_METHOD_WITH_VALUES] = LOAD_ATTR,
    [LOAD_ATTR_METHOD_NO_DICT] = LOAD_ATTR,
    [LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = LOAD_ATTR,
    [LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = LOAD_ATTR,
    [LOAD_ATTR_METHOD_LAZY_DICT] = LOAD_ATTR,
    [CALL] = CALL,
    [CALL_BOUND_METHOD_EXACT_ARGS] = CALL,
    [CALL_PY_EXACT_ARGS] = CALL,
    [BINARY_OP] = BINARY_OP,
};

#endif // NEED_OPCODE_METADATA
const uint8_t _PyOpcode_Caches[256] = {
    [TO_BOOL_BOOL] = 3,
    [TO_BOOL_INT] = 3,
    [TO_BOOL_LIST] = 3,
    [TO_BOOL_NONE] = 3,
    [TO_BOOL_STR] = 3,
    [TO_BOOL_ALWAYS_TRUE] = 3,
    [BINARY_SUBSCR_LIST_INT] = 1,
    [BINARY_SUBSCR_STR_INT] = 1,
    [BINARY_SUBSCR_TUPLE_INT] = 1,
    [BINARY_SUBSCR_DICT] = 1,
    [BINARY_SUBSCR_GETITEM] = 1,
    [STORE_SUBSCR_LIST_INT] = 1,
    [STORE_SUBSCR_DICT] = 1,
    [SEND_GEN] = 1,
    [UNPACK_SEQUENCE_TWO_TUPLE] = 1,
    [UNPACK_SEQUENCE_TUPLE] = 1,
    [UNPACK_SEQUENCE_LIST] = 1,
    [INSTRUMENTED_LOAD_SUPER_ATTR] = 1,
    [LOAD_SUPER_ATTR_ATTR] = 1,
    [LOAD_SUPER_ATTR_METHOD] = 1,
    [LOAD_ATTR_PROPERTY] = 9,
    [LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN] = 9,
    [STORE_ATTR_WITH_HINT] = 4,
    [COMPARE_OP_FLOAT] = 1,
    [COMPARE_OP_INT] = 1,
    [COMPARE_OP_STR] = 1,
    [JUMP_BACKWARD] = 1,
    [INSTRUMENTED_FOR_ITER] = 1,
    [FOR_ITER_GEN] = 1,
    [INSTRUMENTED_CALL] = 3,
    [CALL_PY_WITH_DEFAULTS] = 3,
    [CALL_TYPE_1] = 3,
    [CALL_STR_1] = 3,
    [CALL_TUPLE_1] = 3,
    [CALL_ALLOC_AND_ENTER_INIT] = 3,
    [CALL_BUILTIN_CLASS] = 3,
    [CALL_BUILTIN_O] = 3,
    [CALL_BUILTIN_FAST] = 3,
    [CALL_BUILTIN_FAST_WITH_KEYWORDS] = 3,
    [CALL_LEN] = 3,
    [CALL_ISINSTANCE] = 3,
    [CALL_LIST_APPEND] = 3,
    [CALL_METHOD_DESCRIPTOR_O] = 3,
    [CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = 3,
    [CALL_METHOD_DESCRIPTOR_NOARGS] = 3,
    [CALL_METHOD_DESCRIPTOR_FAST] = 3,
    [INSTRUMENTED_JUMP_BACKWARD] = 1,
    [INSTRUMENTED_POP_JUMP_IF_TRUE] = 1,
    [INSTRUMENTED_POP_JUMP_IF_FALSE] = 1,
    [INSTRUMENTED_POP_JUMP_IF_NONE] = 1,
    [INSTRUMENTED_POP_JUMP_IF_NOT_NONE] = 1,
    [TO_BOOL] = 3,
    [BINARY_OP_MULTIPLY_INT] = 1,
    [BINARY_OP_ADD_INT] = 1,
    [BINARY_OP_SUBTRACT_INT] = 1,
    [BINARY_OP_MULTIPLY_FLOAT] = 1,
    [BINARY_OP_ADD_FLOAT] = 1,
    [BINARY_OP_SUBTRACT_FLOAT] = 1,
    [BINARY_OP_ADD_UNICODE] = 1,
    [BINARY_OP_INPLACE_ADD_UNICODE] = 1,
    [BINARY_SUBSCR] = 1,
    [STORE_SUBSCR] = 1,
    [SEND] = 1,
    [UNPACK_SEQUENCE] = 1,
    [STORE_ATTR] = 4,
    [LOAD_GLOBAL] = 4,
    [LOAD_GLOBAL_MODULE] = 4,
    [LOAD_GLOBAL_BUILTIN] = 4,
    [LOAD_SUPER_ATTR] = 1,
    [LOAD_ATTR] = 9,
    [LOAD_ATTR_INSTANCE_VALUE] = 9,
    [LOAD_ATTR_MODULE] = 9,
    [LOAD_ATTR_WITH_HINT] = 9,
    [LOAD_ATTR_SLOT] = 9,
    [LOAD_ATTR_CLASS] = 9,
    [STORE_ATTR_INSTANCE_VALUE] = 4,
    [STORE_ATTR_SLOT] = 4,
    [COMPARE_OP] = 1,
    [POP_JUMP_IF_TRUE] = 1,
    [POP_JUMP_IF_FALSE] = 1,
    [POP_JUMP_IF_NONE] = 1,
    [POP_JUMP_IF_NOT_NONE] = 1,
    [FOR_ITER] = 1,
    [FOR_ITER_LIST] = 1,
    [FOR_ITER_TUPLE] = 1,
    [FOR_ITER_RANGE] = 1,
    [LOAD_ATTR_METHOD_WITH_VALUES] = 9,
    [LOAD_ATTR_METHOD_NO_DICT] = 9,
    [LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = 9,
    [LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = 9,
    [LOAD_ATTR_METHOD_LAZY_DICT] = 9,
    [CALL] = 3,
    [CALL_BOUND_METHOD_EXACT_ARGS] = 3,
    [CALL_PY_EXACT_ARGS] = 3,
    [BINARY_OP] = 1,
};

const char *_PyOpcode_OpName[268] = {
    [BEFORE_ASYNC_WITH] = "BEFORE_ASYNC_WITH",
    [BEFORE_WITH] = "BEFORE_WITH",
    [BINARY_OP] = "BINARY_OP",
    [BINARY_OP_ADD_FLOAT] = "BINARY_OP_ADD_FLOAT",
    [BINARY_OP_ADD_INT] = "BINARY_OP_ADD_INT",
    [BINARY_OP_ADD_UNICODE] = "BINARY_OP_ADD_UNICODE",
    [BINARY_OP_INPLACE_ADD_UNICODE] = "BINARY_OP_INPLACE_ADD_UNICODE",
    [BINARY_OP_MULTIPLY_FLOAT] = "BINARY_OP_MULTIPLY_FLOAT",
    [BINARY_OP_MULTIPLY_INT] = "BINARY_OP_MULTIPLY_INT",
    [BINARY_OP_SUBTRACT_FLOAT] = "BINARY_OP_SUBTRACT_FLOAT",
    [BINARY_OP_SUBTRACT_INT] = "BINARY_OP_SUBTRACT_INT",
    [BINARY_SLICE] = "BINARY_SLICE",
    [BINARY_SUBSCR] = "BINARY_SUBSCR",
    [BINARY_SUBSCR_DICT] = "BINARY_SUBSCR_DICT",
    [BINARY_SUBSCR_GETITEM] = "BINARY_SUBSCR_GETITEM",
    [BINARY_SUBSCR_LIST_INT] = "BINARY_SUBSCR_LIST_INT",
    [BINARY_SUBSCR_STR_INT] = "BINARY_SUBSCR_STR_INT",
    [BINARY_SUBSCR_TUPLE_INT] = "BINARY_SUBSCR_TUPLE_INT",
    [BUILD_CONST_KEY_MAP] = "BUILD_CONST_KEY_MAP",
    [BUILD_LIST] = "BUILD_LIST",
    [BUILD_MAP] = "BUILD_MAP",
    [BUILD_SET] = "BUILD_SET",
    [BUILD_SLICE] = "BUILD_SLICE",
    [BUILD_STRING] = "BUILD_STRING",
    [BUILD_TUPLE] = "BUILD_TUPLE",
    [CACHE] = "CACHE",
    [CALL] = "CALL",
    [CALL_ALLOC_AND_ENTER_INIT] = "CALL_ALLOC_AND_ENTER_INIT",
    [CALL_BOUND_METHOD_EXACT_ARGS] = "CALL_BOUND_METHOD_EXACT_ARGS",
    [CALL_BUILTIN_CLASS] = "CALL_BUILTIN_CLASS",
    [CALL_BUILTIN_FAST] = "CALL_BUILTIN_FAST",
    [CALL_BUILTIN_FAST_WITH_KEYWORDS] = "CALL_BUILTIN_FAST_WITH_KEYWORDS",
    [CALL_BUILTIN_O] = "CALL_BUILTIN_O",
    [CALL_FUNCTION_EX] = "CALL_FUNCTION_EX",
    [CALL_INTRINSIC_1] = "CALL_INTRINSIC_1",
    [CALL_INTRINSIC_2] = "CALL_INTRINSIC_2",
    [CALL_ISINSTANCE] = "CALL_ISINSTANCE",
    [CALL_KW] = "CALL_KW",
    [CALL_LEN] = "CALL_LEN",
    [CALL_LIST_APPEND] = "CALL_LIST_APPEND",
    [CALL_METHOD_DESCRIPTOR_FAST] = "CALL_METHOD_DESCRIPTOR_FAST",
    [CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = "CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS",
    [CALL_METHOD_DESCRIPTOR_NOARGS] = "CALL_METHOD_DESCRIPTOR_NOARGS",
    [CALL_METHOD_DESCRIPTOR_O] = "CALL_METHOD_DESCRIPTOR_O",
    [CALL_PY_EXACT_ARGS] = "CALL_PY_EXACT_ARGS",
    [CALL_PY_WITH_DEFAULTS] = "CALL_PY_WITH_DEFAULTS",
    [CALL_STR_1] = "CALL_STR_1",
    [CALL_TUPLE_1] = "CALL_TUPLE_1",
    [CALL_TYPE_1] = "CALL_TYPE_1",
    [CHECK_EG_MATCH] = "CHECK_EG_MATCH",
    [CHECK_EXC_MATCH] = "CHECK_EXC_MATCH",
    [CLEANUP_THROW] = "CLEANUP_THROW",
    [COMPARE_OP] = "COMPARE_OP",
    [COMPARE_OP_FLOAT] = "COMPARE_OP_FLOAT",
    [COMPARE_OP_INT] = "COMPARE_OP_INT",
    [COMPARE_OP_STR] = "COMPARE_OP_STR",
    [CONTAINS_OP] = "CONTAINS_OP",
    [CONVERT_VALUE] = "CONVERT_VALUE",
    [COPY] = "COPY",
    [COPY_FREE_VARS] = "COPY_FREE_VARS",
    [DELETE_ATTR] = "DELETE_ATTR",
    [DELETE_DEREF] = "DELETE_DEREF",
    [DELETE_FAST] = "DELETE_FAST",
    [DELETE_GLOBAL] = "DELETE_GLOBAL",
    [DELETE_NAME] = "DELETE_NAME",
    [DELETE_SUBSCR] = "DELETE_SUBSCR",
    [DICT_MERGE] = "DICT_MERGE",
    [DICT_UPDATE] = "DICT_UPDATE",
    [END_ASYNC_FOR] = "END_ASYNC_FOR",
    [END_FOR] = "END_FOR",
    [END_SEND] = "END_SEND",
    [ENTER_EXECUTOR] = "ENTER_EXECUTOR",
    [EXIT_INIT_CHECK] = "EXIT_INIT_CHECK",
    [EXTENDED_ARG] = "EXTENDED_ARG",
    [FORMAT_SIMPLE] = "FORMAT_SIMPLE",
    [FORMAT_WITH_SPEC] = "FORMAT_WITH_SPEC",
    [FOR_ITER] = "FOR_ITER",
    [FOR_ITER_GEN] = "FOR_ITER_GEN",
    [FOR_ITER_LIST] = "FOR_ITER_LIST",
    [FOR_ITER_RANGE] = "FOR_ITER_RANGE",
    [FOR_ITER_TUPLE] = "FOR_ITER_TUPLE",
    [GET_AITER] = "GET_AITER",
    [GET_ANEXT] = "GET_ANEXT",
    [GET_AWAITABLE] = "GET_AWAITABLE",
    [GET_ITER] = "GET_ITER",
    [GET_LEN] = "GET_LEN",
    [GET_YIELD_FROM_ITER] = "GET_YIELD_FROM_ITER",
    [IMPORT_FROM] = "IMPORT_FROM",
    [IMPORT_NAME] = "IMPORT_NAME",
    [INSTRUMENTED_CALL] = "INSTRUMENTED_CALL",
    [INSTRUMENTED_CALL_FUNCTION_EX] = "INSTRUMENTED_CALL_FUNCTION_EX",
    [INSTRUMENTED_CALL_KW] = "INSTRUMENTED_CALL_KW",
    [INSTRUMENTED_END_FOR] = "INSTRUMENTED_END_FOR",
    [INSTRUMENTED_END_SEND] = "INSTRUMENTED_END_SEND",
    [INSTRUMENTED_FOR_ITER] = "INSTRUMENTED_FOR_ITER",
    [INSTRUMENTED_INSTRUCTION] = "INSTRUMENTED_INSTRUCTION",
    [INSTRUMENTED_JUMP_BACKWARD] = "INSTRUMENTED_JUMP_BACKWARD",
    [INSTRUMENTED_JUMP_FORWARD] = "INSTRUMENTED_JUMP_FORWARD",
    [INSTRUMENTED_LOAD_SUPER_ATTR] = "INSTRUMENTED_LOAD_SUPER_ATTR",
    [INSTRUMENTED_POP_JUMP_IF_FALSE] = "INSTRUMENTED_POP_JUMP_IF_FALSE",
    [INSTRUMENTED_POP_JUMP_IF_NONE] = "INSTRUMENTED_POP_JUMP_IF_NONE",
    [INSTRUMENTED_POP_JUMP_IF_NOT_NONE] = "INSTRUMENTED_POP_JUMP_IF_NOT_NONE",
    [INSTRUMENTED_POP_JUMP_IF_TRUE] = "INSTRUMENTED_POP_JUMP_IF_TRUE",
    [INSTRUMENTED_RESUME] = "INSTRUMENTED_RESUME",
    [INSTRUMENTED_RETURN_CONST] = "INSTRUMENTED_RETURN_CONST",
    [INSTRUMENTED_RETURN_VALUE] = "INSTRUMENTED_RETURN_VALUE",
    [INSTRUMENTED_YIELD_VALUE] = "INSTRUMENTED_YIELD_VALUE",
    [INTERPRETER_EXIT] = "INTERPRETER_EXIT",
    [IS_OP] = "IS_OP",
    [JUMP] = "JUMP",
    [JUMP_BACKWARD] = "JUMP_BACKWARD",
    [JUMP_BACKWARD_NO_INTERRUPT] = "JUMP_BACKWARD_NO_INTERRUPT",
    [JUMP_FORWARD] = "JUMP_FORWARD",
    [JUMP_NO_INTERRUPT] = "JUMP_NO_INTERRUPT",
    [LIST_APPEND] = "LIST_APPEND",
    [LIST_EXTEND] = "LIST_EXTEND",
    [LOAD_ASSERTION_ERROR] = "LOAD_ASSERTION_ERROR",
    [LOAD_ATTR] = "LOAD_ATTR",
    [LOAD_ATTR_CLASS] = "LOAD_ATTR_CLASS",
    [LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN] = "LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN",
    [LOAD_ATTR_INSTANCE_VALUE] = "LOAD_ATTR_INSTANCE_VALUE",
    [LOAD_ATTR_METHOD_LAZY_DICT] = "LOAD_ATTR_METHOD_LAZY_DICT",
    [LOAD_ATTR_METHOD_NO_DICT] = "LOAD_ATTR_METHOD_NO_DICT",
    [LOAD_ATTR_METHOD_WITH_VALUES] = "LOAD_ATTR_METHOD_WITH_VALUES",
    [LOAD_ATTR_MODULE] = "LOAD_ATTR_MODULE",
    [LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = "LOAD_ATTR_NONDESCRIPTOR_NO_DICT",
    [LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = "LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES",
    [LOAD_ATTR_PROPERTY] = "LOAD_ATTR_PROPERTY",
    [LOAD_ATTR_SLOT] = "LOAD_ATTR_SLOT",
    [LOAD_ATTR_WITH_HINT] = "LOAD_ATTR_WITH_HINT",
    [LOAD_BUILD_CLASS] = "LOAD_BUILD_CLASS",
    [LOAD_CLOSURE] = "LOAD_CLOSURE",
    [LOAD_CONST] = "LOAD_CONST",
    [LOAD_DEREF] = "LOAD_DEREF",
    [LOAD_FAST] = "LOAD_FAST",
    [LOAD_FAST_AND_CLEAR] = "LOAD_FAST_AND_CLEAR",
    [LOAD_FAST_CHECK] = "LOAD_FAST_CHECK",
    [LOAD_FAST_LOAD_FAST] = "LOAD_FAST_LOAD_FAST",
    [LOAD_FROM_DICT_OR_DEREF] = "LOAD_FROM_DICT_OR_DEREF",
    [LOAD_FROM_DICT_OR_GLOBALS] = "LOAD_FROM_DICT_OR_GLOBALS",
    [LOAD_GLOBAL] = "LOAD_GLOBAL",
    [LOAD_GLOBAL_BUILTIN] = "LOAD_GLOBAL_BUILTIN",
    [LOAD_GLOBAL_MODULE] = "LOAD_GLOBAL_MODULE",
    [LOAD_LOCALS] = "LOAD_LOCALS",
    [LOAD_METHOD] = "LOAD_METHOD",
    [LOAD_NAME] = "LOAD_NAME",
    [LOAD_SUPER_ATTR] = "LOAD_SUPER_ATTR",
    [LOAD_SUPER_ATTR_ATTR] = "LOAD_SUPER_ATTR_ATTR",
    [LOAD_SUPER_ATTR_METHOD] = "LOAD_SUPER_ATTR_METHOD",
    [LOAD_SUPER_METHOD] = "LOAD_SUPER_METHOD",
    [LOAD_ZERO_SUPER_ATTR] = "LOAD_ZERO_SUPER_ATTR",
    [LOAD_ZERO_SUPER_METHOD] = "LOAD_ZERO_SUPER_METHOD",
    [MAKE_CELL] = "MAKE_CELL",
    [MAKE_FUNCTION] = "MAKE_FUNCTION",
    [MAP_ADD] = "MAP_ADD",
    [MATCH_CLASS] = "MATCH_CLASS",
    [MATCH_KEYS] = "MATCH_KEYS",
    [MATCH_MAPPING] = "MATCH_MAPPING",
    [MATCH_SEQUENCE] = "MATCH_SEQUENCE",
    [NOP] = "NOP",
    [POP_BLOCK] = "POP_BLOCK",
    [POP_EXCEPT] = "POP_EXCEPT",
    [POP_JUMP_IF_FALSE] = "POP_JUMP_IF_FALSE",
    [POP_JUMP_IF_NONE] = "POP_JUMP_IF_NONE",
    [POP_JUMP_IF_NOT_NONE] = "POP_JUMP_IF_NOT_NONE",
    [POP_JUMP_IF_TRUE] = "POP_JUMP_IF_TRUE",
    [POP_TOP] = "POP_TOP",
    [PUSH_EXC_INFO] = "PUSH_EXC_INFO",
    [PUSH_NULL] = "PUSH_NULL",
    [RAISE_VARARGS] = "RAISE_VARARGS",
    [RERAISE] = "RERAISE",
    [RESERVED] = "RESERVED",
    [RESUME] = "RESUME",
    [RESUME_CHECK] = "RESUME_CHECK",
    [RETURN_CONST] = "RETURN_CONST",
    [RETURN_GENERATOR] = "RETURN_GENERATOR",
    [RETURN_VALUE] = "RETURN_VALUE",
    [SEND] = "SEND",
    [SEND_GEN] = "SEND_GEN",
    [SETUP_ANNOTATIONS] = "SETUP_ANNOTATIONS",
    [SETUP_CLEANUP] = "SETUP_CLEANUP",
    [SETUP_FINALLY] = "SETUP_FINALLY",
    [SETUP_WITH] = "SETUP_WITH",
    [SET_ADD] = "SET_ADD",
    [SET_FUNCTION_ATTRIBUTE] = "SET_FUNCTION_ATTRIBUTE",
    [SET_UPDATE] = "SET_UPDATE",
    [STORE_ATTR] = "STORE_ATTR",
    [STORE_ATTR_INSTANCE_VALUE] = "STORE_ATTR_INSTANCE_VALUE",
    [STORE_ATTR_SLOT] = "STORE_ATTR_SLOT",
    [STORE_ATTR_WITH_HINT] = "STORE_ATTR_WITH_HINT",
    [STORE_DEREF] = "STORE_DEREF",
    [STORE_FAST] = "STORE_FAST",
    [STORE_FAST_LOAD_FAST] = "STORE_FAST_LOAD_FAST",
    [STORE_FAST_MAYBE_NULL] = "STORE_FAST_MAYBE_NULL",
    [STORE_FAST_STORE_FAST] = "STORE_FAST_STORE_FAST",
    [STORE_GLOBAL] = "STORE_GLOBAL",
    [STORE_NAME] = "STORE_NAME",
    [STORE_SLICE] = "STORE_SLICE",
    [STORE_SUBSCR] = "STORE_SUBSCR",
    [STORE_SUBSCR_DICT] = "STORE_SUBSCR_DICT",
    [STORE_SUBSCR_LIST_INT] = "STORE_SUBSCR_LIST_INT",
    [SWAP] = "SWAP",
    [TO_BOOL] = "TO_BOOL",
    [TO_BOOL_ALWAYS_TRUE] = "TO_BOOL_ALWAYS_TRUE",
    [TO_BOOL_BOOL] = "TO_BOOL_BOOL",
    [TO_BOOL_INT] = "TO_BOOL_INT",
    [TO_BOOL_LIST] = "TO_BOOL_LIST",
    [TO_BOOL_NONE] = "TO_BOOL_NONE",
    [TO_BOOL_STR] = "TO_BOOL_STR",
    [UNARY_INVERT] = "UNARY_INVERT",
    [UNARY_NEGATIVE] = "UNARY_NEGATIVE",
    [UNARY_NOT] = "UNARY_NOT",
    [UNPACK_EX] = "UNPACK_EX",
    [UNPACK_SEQUENCE] = "UNPACK_SEQUENCE",
    [UNPACK_SEQUENCE_LIST] = "UNPACK_SEQUENCE_LIST",
    [UNPACK_SEQUENCE_TUPLE] = "UNPACK_SEQUENCE_TUPLE",
    [UNPACK_SEQUENCE_TWO_TUPLE] = "UNPACK_SEQUENCE_TWO_TUPLE",
    [WITH_EXCEPT_START] = "WITH_EXCEPT_START",
    [YIELD_VALUE] = "YIELD_VALUE",
};

struct pseudo_targets {
    uint8_t targets[3];
};
const struct pseudo_targets pseudo_targets[12];
#ifdef NEED_OPCODE_METADATA
const struct pseudo_targets pseudo_targets[12] = {
    [LOAD_CLOSURE-256] = { { LOAD_FAST, 0, 0 } },
    [STORE_FAST_MAYBE_NULL-256] = { { STORE_FAST, 0, 0 } },
    [LOAD_SUPER_METHOD-256] = { { LOAD_SUPER_ATTR, 0, 0 } },
    [LOAD_ZERO_SUPER_METHOD-256] = { { LOAD_SUPER_ATTR, 0, 0 } },
    [LOAD_ZERO_SUPER_ATTR-256] = { { LOAD_SUPER_ATTR, 0, 0 } },
    [LOAD_METHOD-256] = { { LOAD_ATTR, 0, 0 } },
    [JUMP-256] = { { JUMP_FORWARD, JUMP_BACKWARD, 0 } },
    [JUMP_NO_INTERRUPT-256] = { { JUMP_FORWARD, JUMP_BACKWARD_NO_INTERRUPT, 0 } },
    [SETUP_FINALLY-256] = { { NOP, 0, 0 } },
    [SETUP_CLEANUP-256] = { { NOP, 0, 0 } },
    [SETUP_WITH-256] = { { NOP, 0, 0 } },
    [POP_BLOCK-256] = { { NOP, 0, 0 } },
};

#endif // NEED_OPCODE_METADATA
static inline bool
is_pseudo_target(int pseudo, int target) {
    if (pseudo < 256 || pseudo >= 268) {
        return false;
    }
    for (int i = 0; pseudo_targets[pseudo-256].targets[i]; i++) {
        if (pseudo_targets[pseudo-256].targets[i] == target) return true;
    }
    return false;
}


#ifdef __cplusplus
}
#endif
#endif /* !Py_CORE_OPCODE_METADATA_H */
