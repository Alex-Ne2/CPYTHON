// This file is generated by Tools/cases_generator/generate_cases.py
// from:
//   Python/bytecodes.c
// Do not edit!

#ifndef Py_BUILD_CORE
#  error "this header requires Py_BUILD_CORE define"
#endif

#include <stdbool.h>              // bool


#define IS_PSEUDO_INSTR(OP)  ( \
    ((OP) == LOAD_CLOSURE) || \
    ((OP) == STORE_FAST_MAYBE_NULL) || \
    ((OP) == LOAD_SUPER_METHOD) || \
    ((OP) == LOAD_ZERO_SUPER_METHOD) || \
    ((OP) == LOAD_ZERO_SUPER_ATTR) || \
    ((OP) == LOAD_METHOD) || \
    ((OP) == JUMP) || \
    ((OP) == JUMP_NO_INTERRUPT) || \
    ((OP) == SETUP_FINALLY) || \
    ((OP) == SETUP_CLEANUP) || \
    ((OP) == SETUP_WITH) || \
    ((OP) == POP_BLOCK) || \
    0)

#define _EXIT_TRACE 275
#define _SET_IP 276
#define _GUARD_BOTH_INT 277
#define _BINARY_OP_MULTIPLY_INT 278
#define _BINARY_OP_ADD_INT 279
#define _BINARY_OP_SUBTRACT_INT 280
#define _GUARD_BOTH_FLOAT 281
#define _BINARY_OP_MULTIPLY_FLOAT 282
#define _BINARY_OP_ADD_FLOAT 283
#define _BINARY_OP_SUBTRACT_FLOAT 284
#define _GUARD_BOTH_UNICODE 285
#define _BINARY_OP_ADD_UNICODE 286
#define _BINARY_OP_INPLACE_ADD_UNICODE 287
#define _POP_FRAME 288
#define _GUARD_GLOBALS_VERSION 289
#define _GUARD_BUILTINS_VERSION 290
#define _LOAD_GLOBAL_MODULE 291
#define _LOAD_GLOBAL_BUILTINS 292
#define _GUARD_TYPE_VERSION 293
#define _CHECK_MANAGED_OBJECT_HAS_VALUES 294
#define _LOAD_ATTR_INSTANCE_VALUE 295
#define _IS_NONE 296
#define _ITER_CHECK_LIST 297
#define _ITER_JUMP_LIST 298
#define _IS_ITER_EXHAUSTED_LIST 299
#define _ITER_NEXT_LIST 300
#define _ITER_CHECK_TUPLE 301
#define _ITER_JUMP_TUPLE 302
#define _IS_ITER_EXHAUSTED_TUPLE 303
#define _ITER_NEXT_TUPLE 304
#define _ITER_CHECK_RANGE 305
#define _ITER_JUMP_RANGE 306
#define _IS_ITER_EXHAUSTED_RANGE 307
#define _ITER_NEXT_RANGE 308
#define _CHECK_CALL_BOUND_METHOD_EXACT_ARGS 309
#define _INIT_CALL_BOUND_METHOD_EXACT_ARGS 310
#define _CHECK_PEP_523 311
#define _CHECK_FUNCTION_EXACT_ARGS 312
#define _CHECK_STACK_SPACE 313
#define _INIT_CALL_PY_EXACT_ARGS 314
#define _PUSH_FRAME 315
#define _POP_JUMP_IF_FALSE 316
#define _POP_JUMP_IF_TRUE 317
#define _JUMP_TO_TOP 318
#define _SAVE_CURRENT_IP 319
#define _INSERT 320
#define __NOP 321
#define __RESUME 322
#define __RESUME_CHECK 323
#define __INSTRUMENTED_RESUME 324
#define __LOAD_FAST_CHECK 325
#define __LOAD_FAST 326
#define __LOAD_FAST_AND_CLEAR 327
#define __LOAD_FAST_LOAD_FAST 328
#define __LOAD_CONST 329
#define __STORE_FAST 330
#define __STORE_FAST_LOAD_FAST 331
#define __STORE_FAST_STORE_FAST 332
#define __POP_TOP 333
#define __PUSH_NULL 334
#define __INSTRUMENTED_END_FOR 335
#define __END_SEND 336
#define __INSTRUMENTED_END_SEND 337
#define __UNARY_NEGATIVE 338
#define __UNARY_NOT 339
#define __TO_BOOL 340
#define __TO_BOOL_BOOL 341
#define __TO_BOOL_INT 342
#define __TO_BOOL_LIST 343
#define __TO_BOOL_NONE 344
#define __TO_BOOL_STR 345
#define __TO_BOOL_ALWAYS_TRUE 346
#define __UNARY_INVERT 347
#define __BINARY_SUBSCR 348
#define __BINARY_SLICE 349
#define __STORE_SLICE 350
#define __BINARY_SUBSCR_LIST_INT 351
#define __BINARY_SUBSCR_STR_INT 352
#define __BINARY_SUBSCR_TUPLE_INT 353
#define __BINARY_SUBSCR_DICT 354
#define __BINARY_SUBSCR_GETITEM 355
#define __LIST_APPEND 356
#define __SET_ADD 357
#define __STORE_SUBSCR 358
#define __STORE_SUBSCR_LIST_INT 359
#define __STORE_SUBSCR_DICT 360
#define __DELETE_SUBSCR 361
#define __CALL_INTRINSIC_1 362
#define __CALL_INTRINSIC_2 363
#define __RAISE_VARARGS 364
#define __INTERPRETER_EXIT 365
#define __INSTRUMENTED_RETURN_VALUE 366
#define __INSTRUMENTED_RETURN_CONST 367
#define __GET_AITER 368
#define __GET_ANEXT 369
#define __GET_AWAITABLE 370
#define __SEND 371
#define __SEND_GEN 372
#define __INSTRUMENTED_YIELD_VALUE 373
#define __YIELD_VALUE 374
#define __POP_EXCEPT 375
#define __RERAISE 376
#define __END_ASYNC_FOR 377
#define __CLEANUP_THROW 378
#define __LOAD_ASSERTION_ERROR 379
#define __LOAD_BUILD_CLASS 380
#define __STORE_NAME 381
#define __DELETE_NAME 382
#define __UNPACK_SEQUENCE 383
#define __UNPACK_SEQUENCE_TWO_TUPLE 384
#define __UNPACK_SEQUENCE_TUPLE 385
#define __UNPACK_SEQUENCE_LIST 386
#define __UNPACK_EX 387
#define __STORE_ATTR 388
#define __DELETE_ATTR 389
#define __STORE_GLOBAL 390
#define __DELETE_GLOBAL 391
#define __LOAD_LOCALS 392
#define __LOAD_FROM_DICT_OR_GLOBALS 393
#define __LOAD_NAME 394
#define __LOAD_GLOBAL 395
#define __DELETE_FAST 396
#define __MAKE_CELL 397
#define __DELETE_DEREF 398
#define __LOAD_FROM_DICT_OR_DEREF 399
#define __LOAD_DEREF 400
#define __STORE_DEREF 401
#define __COPY_FREE_VARS 402
#define __BUILD_STRING 403
#define __BUILD_TUPLE 404
#define __BUILD_LIST 405
#define __LIST_EXTEND 406
#define __SET_UPDATE 407
#define __BUILD_SET 408
#define __BUILD_MAP 409
#define __SETUP_ANNOTATIONS 410
#define __BUILD_CONST_KEY_MAP 411
#define __DICT_UPDATE 412
#define __DICT_MERGE 413
#define __MAP_ADD 414
#define __INSTRUMENTED_LOAD_SUPER_ATTR 415
#define __LOAD_SUPER_ATTR 416
#define __LOAD_SUPER_ATTR_ATTR 417
#define __LOAD_SUPER_ATTR_METHOD 418
#define __LOAD_ATTR 419
#define __LOAD_ATTR_MODULE 420
#define __LOAD_ATTR_WITH_HINT 421
#define __LOAD_ATTR_SLOT 422
#define __LOAD_ATTR_CLASS 423
#define __LOAD_ATTR_PROPERTY 424
#define __LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN 425
#define __STORE_ATTR_INSTANCE_VALUE 426
#define __STORE_ATTR_WITH_HINT 427
#define __STORE_ATTR_SLOT 428
#define __COMPARE_OP 429
#define __COMPARE_OP_FLOAT 430
#define __COMPARE_OP_INT 431
#define __COMPARE_OP_STR 432
#define __IS_OP 433
#define __CONTAINS_OP 434
#define __CHECK_EG_MATCH 435
#define __CHECK_EXC_MATCH 436
#define __IMPORT_NAME 437
#define __IMPORT_FROM 438
#define __JUMP_FORWARD 439
#define __JUMP_BACKWARD 440
#define __ENTER_EXECUTOR 441
#define __POP_JUMP_IF_FALSE 442
#define __POP_JUMP_IF_TRUE 443
#define __JUMP_BACKWARD_NO_INTERRUPT 444
#define __GET_LEN 445
#define __MATCH_CLASS 446
#define __MATCH_MAPPING 447
#define __MATCH_SEQUENCE 448
#define __MATCH_KEYS 449
#define __GET_ITER 450
#define __GET_YIELD_FROM_ITER 451
#define __FOR_ITER 452
#define __INSTRUMENTED_FOR_ITER 453
#define __FOR_ITER_GEN 454
#define __BEFORE_ASYNC_WITH 455
#define __BEFORE_WITH 456
#define __WITH_EXCEPT_START 457
#define __PUSH_EXC_INFO 458
#define __LOAD_ATTR_METHOD_WITH_VALUES 459
#define __LOAD_ATTR_METHOD_NO_DICT 460
#define __LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES 461
#define __LOAD_ATTR_NONDESCRIPTOR_NO_DICT 462
#define __LOAD_ATTR_METHOD_LAZY_DICT 463
#define __INSTRUMENTED_CALL 464
#define __CALL 465
#define __CALL_PY_WITH_DEFAULTS 466
#define __CALL_TYPE_1 467
#define __CALL_STR_1 468
#define __CALL_TUPLE_1 469
#define __CALL_ALLOC_AND_ENTER_INIT 470
#define __EXIT_INIT_CHECK 471
#define __CALL_BUILTIN_CLASS 472
#define __CALL_BUILTIN_O 473
#define __CALL_BUILTIN_FAST 474
#define __CALL_BUILTIN_FAST_WITH_KEYWORDS 475
#define __CALL_LEN 476
#define __CALL_ISINSTANCE 477
#define __CALL_LIST_APPEND 478
#define __CALL_METHOD_DESCRIPTOR_O 479
#define __CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS 480
#define __CALL_METHOD_DESCRIPTOR_NOARGS 481
#define __CALL_METHOD_DESCRIPTOR_FAST 482
#define __INSTRUMENTED_CALL_KW 483
#define __CALL_KW 484
#define __INSTRUMENTED_CALL_FUNCTION_EX 485
#define __CALL_FUNCTION_EX 486
#define __MAKE_FUNCTION 487
#define __SET_FUNCTION_ATTRIBUTE 488
#define __RETURN_GENERATOR 489
#define __BUILD_SLICE 490
#define __CONVERT_VALUE 491
#define __FORMAT_SIMPLE 492
#define __FORMAT_WITH_SPEC 493
#define __COPY 494
#define __BINARY_OP 495
#define __SWAP 496
#define __INSTRUMENTED_INSTRUCTION 497
#define __INSTRUMENTED_JUMP_FORWARD 498
#define __INSTRUMENTED_JUMP_BACKWARD 499
#define __INSTRUMENTED_POP_JUMP_IF_TRUE 500
#define __INSTRUMENTED_POP_JUMP_IF_FALSE 501
#define __INSTRUMENTED_POP_JUMP_IF_NONE 502
#define __INSTRUMENTED_POP_JUMP_IF_NOT_NONE 503
#define __EXTENDED_ARG 504
#define __CACHE 505
#define __RESERVED 506

extern int _PyOpcode_num_popped(int opcode, int oparg, bool jump);
#ifdef NEED_OPCODE_METADATA
int _PyOpcode_num_popped(int opcode, int oparg, bool jump)  {
    switch(opcode) {
        case LOAD_CLOSURE:
            return 0;
        case STORE_FAST_MAYBE_NULL:
            return 1;
        case END_FOR:
            return 2;
        case BINARY_OP_MULTIPLY_INT:
            return 2;
        case BINARY_OP_ADD_INT:
            return 2;
        case BINARY_OP_SUBTRACT_INT:
            return 2;
        case BINARY_OP_MULTIPLY_FLOAT:
            return 2;
        case BINARY_OP_ADD_FLOAT:
            return 2;
        case BINARY_OP_SUBTRACT_FLOAT:
            return 2;
        case BINARY_OP_ADD_UNICODE:
            return 2;
        case BINARY_OP_INPLACE_ADD_UNICODE:
            return 2;
        case RETURN_VALUE:
            return 1;
        case RETURN_CONST:
            return 0;
        case LOAD_GLOBAL_MODULE:
            return 0;
        case LOAD_GLOBAL_BUILTIN:
            return 0;
        case LOAD_SUPER_METHOD:
            return 3;
        case LOAD_ZERO_SUPER_METHOD:
            return 3;
        case LOAD_ZERO_SUPER_ATTR:
            return 3;
        case LOAD_METHOD:
            return 1;
        case LOAD_ATTR_INSTANCE_VALUE:
            return 1;
        case JUMP:
            return 0;
        case JUMP_NO_INTERRUPT:
            return 0;
        case POP_JUMP_IF_NONE:
            return 1;
        case POP_JUMP_IF_NOT_NONE:
            return 1;
        case FOR_ITER_LIST:
            return 1;
        case FOR_ITER_TUPLE:
            return 1;
        case FOR_ITER_RANGE:
            return 1;
        case SETUP_FINALLY:
            return 0;
        case SETUP_CLEANUP:
            return 0;
        case SETUP_WITH:
            return 0;
        case POP_BLOCK:
            return 0;
        case CALL_BOUND_METHOD_EXACT_ARGS:
            return oparg + 2;
        case CALL_PY_EXACT_ARGS:
            return oparg + 2;
        case NOP:
            return 0;
        case RESUME:
            return 0;
        case RESUME_CHECK:
            return 0;
        case INSTRUMENTED_RESUME:
            return 0;
        case LOAD_FAST_CHECK:
            return 0;
        case LOAD_FAST:
            return 0;
        case LOAD_FAST_AND_CLEAR:
            return 0;
        case LOAD_FAST_LOAD_FAST:
            return 0;
        case LOAD_CONST:
            return 0;
        case STORE_FAST:
            return 1;
        case STORE_FAST_LOAD_FAST:
            return 1;
        case STORE_FAST_STORE_FAST:
            return 2;
        case POP_TOP:
            return 1;
        case PUSH_NULL:
            return 0;
        case INSTRUMENTED_END_FOR:
            return 2;
        case END_SEND:
            return 2;
        case INSTRUMENTED_END_SEND:
            return 2;
        case UNARY_NEGATIVE:
            return 1;
        case UNARY_NOT:
            return 1;
        case TO_BOOL:
            return 1;
        case TO_BOOL_BOOL:
            return 1;
        case TO_BOOL_INT:
            return 1;
        case TO_BOOL_LIST:
            return 1;
        case TO_BOOL_NONE:
            return 1;
        case TO_BOOL_STR:
            return 1;
        case TO_BOOL_ALWAYS_TRUE:
            return 1;
        case UNARY_INVERT:
            return 1;
        case BINARY_SUBSCR:
            return 2;
        case BINARY_SLICE:
            return 3;
        case STORE_SLICE:
            return 4;
        case BINARY_SUBSCR_LIST_INT:
            return 2;
        case BINARY_SUBSCR_STR_INT:
            return 2;
        case BINARY_SUBSCR_TUPLE_INT:
            return 2;
        case BINARY_SUBSCR_DICT:
            return 2;
        case BINARY_SUBSCR_GETITEM:
            return 2;
        case LIST_APPEND:
            return (oparg-1) + 2;
        case SET_ADD:
            return (oparg-1) + 2;
        case STORE_SUBSCR:
            return 3;
        case STORE_SUBSCR_LIST_INT:
            return 3;
        case STORE_SUBSCR_DICT:
            return 3;
        case DELETE_SUBSCR:
            return 2;
        case CALL_INTRINSIC_1:
            return 1;
        case CALL_INTRINSIC_2:
            return 2;
        case RAISE_VARARGS:
            return oparg;
        case INTERPRETER_EXIT:
            return 1;
        case INSTRUMENTED_RETURN_VALUE:
            return 1;
        case INSTRUMENTED_RETURN_CONST:
            return 0;
        case GET_AITER:
            return 1;
        case GET_ANEXT:
            return 1;
        case GET_AWAITABLE:
            return 1;
        case SEND:
            return 2;
        case SEND_GEN:
            return 2;
        case INSTRUMENTED_YIELD_VALUE:
            return 1;
        case YIELD_VALUE:
            return 1;
        case POP_EXCEPT:
            return 1;
        case RERAISE:
            return oparg + 1;
        case END_ASYNC_FOR:
            return 2;
        case CLEANUP_THROW:
            return 3;
        case LOAD_ASSERTION_ERROR:
            return 0;
        case LOAD_BUILD_CLASS:
            return 0;
        case STORE_NAME:
            return 1;
        case DELETE_NAME:
            return 0;
        case UNPACK_SEQUENCE:
            return 1;
        case UNPACK_SEQUENCE_TWO_TUPLE:
            return 1;
        case UNPACK_SEQUENCE_TUPLE:
            return 1;
        case UNPACK_SEQUENCE_LIST:
            return 1;
        case UNPACK_EX:
            return 1;
        case STORE_ATTR:
            return 2;
        case DELETE_ATTR:
            return 1;
        case STORE_GLOBAL:
            return 1;
        case DELETE_GLOBAL:
            return 0;
        case LOAD_LOCALS:
            return 0;
        case LOAD_FROM_DICT_OR_GLOBALS:
            return 1;
        case LOAD_NAME:
            return 0;
        case LOAD_GLOBAL:
            return 0;
        case DELETE_FAST:
            return 0;
        case MAKE_CELL:
            return 0;
        case DELETE_DEREF:
            return 0;
        case LOAD_FROM_DICT_OR_DEREF:
            return 1;
        case LOAD_DEREF:
            return 0;
        case STORE_DEREF:
            return 1;
        case COPY_FREE_VARS:
            return 0;
        case BUILD_STRING:
            return oparg;
        case BUILD_TUPLE:
            return oparg;
        case BUILD_LIST:
            return oparg;
        case LIST_EXTEND:
            return (oparg-1) + 2;
        case SET_UPDATE:
            return (oparg-1) + 2;
        case BUILD_SET:
            return oparg;
        case BUILD_MAP:
            return oparg*2;
        case SETUP_ANNOTATIONS:
            return 0;
        case BUILD_CONST_KEY_MAP:
            return oparg + 1;
        case DICT_UPDATE:
            return (oparg - 1) + 2;
        case DICT_MERGE:
            return (oparg - 1) + 5;
        case MAP_ADD:
            return (oparg - 1) + 3;
        case INSTRUMENTED_LOAD_SUPER_ATTR:
            return 3;
        case LOAD_SUPER_ATTR:
            return 3;
        case LOAD_SUPER_ATTR_ATTR:
            return 3;
        case LOAD_SUPER_ATTR_METHOD:
            return 3;
        case LOAD_ATTR:
            return 1;
        case LOAD_ATTR_MODULE:
            return 1;
        case LOAD_ATTR_WITH_HINT:
            return 1;
        case LOAD_ATTR_SLOT:
            return 1;
        case LOAD_ATTR_CLASS:
            return 1;
        case LOAD_ATTR_PROPERTY:
            return 1;
        case LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN:
            return 1;
        case STORE_ATTR_INSTANCE_VALUE:
            return 2;
        case STORE_ATTR_WITH_HINT:
            return 2;
        case STORE_ATTR_SLOT:
            return 2;
        case COMPARE_OP:
            return 2;
        case COMPARE_OP_FLOAT:
            return 2;
        case COMPARE_OP_INT:
            return 2;
        case COMPARE_OP_STR:
            return 2;
        case IS_OP:
            return 2;
        case CONTAINS_OP:
            return 2;
        case CHECK_EG_MATCH:
            return 2;
        case CHECK_EXC_MATCH:
            return 2;
        case IMPORT_NAME:
            return 2;
        case IMPORT_FROM:
            return 1;
        case JUMP_FORWARD:
            return 0;
        case JUMP_BACKWARD:
            return 0;
        case ENTER_EXECUTOR:
            return 0;
        case POP_JUMP_IF_FALSE:
            return 1;
        case POP_JUMP_IF_TRUE:
            return 1;
        case JUMP_BACKWARD_NO_INTERRUPT:
            return 0;
        case GET_LEN:
            return 1;
        case MATCH_CLASS:
            return 3;
        case MATCH_MAPPING:
            return 1;
        case MATCH_SEQUENCE:
            return 1;
        case MATCH_KEYS:
            return 2;
        case GET_ITER:
            return 1;
        case GET_YIELD_FROM_ITER:
            return 1;
        case FOR_ITER:
            return 1;
        case INSTRUMENTED_FOR_ITER:
            return 0;
        case FOR_ITER_GEN:
            return 1;
        case BEFORE_ASYNC_WITH:
            return 1;
        case BEFORE_WITH:
            return 1;
        case WITH_EXCEPT_START:
            return 4;
        case PUSH_EXC_INFO:
            return 1;
        case LOAD_ATTR_METHOD_WITH_VALUES:
            return 1;
        case LOAD_ATTR_METHOD_NO_DICT:
            return 1;
        case LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES:
            return 1;
        case LOAD_ATTR_NONDESCRIPTOR_NO_DICT:
            return 1;
        case LOAD_ATTR_METHOD_LAZY_DICT:
            return 1;
        case INSTRUMENTED_CALL:
            return 0;
        case CALL:
            return oparg + 2;
        case CALL_PY_WITH_DEFAULTS:
            return oparg + 2;
        case CALL_TYPE_1:
            return oparg + 2;
        case CALL_STR_1:
            return oparg + 2;
        case CALL_TUPLE_1:
            return oparg + 2;
        case CALL_ALLOC_AND_ENTER_INIT:
            return oparg + 2;
        case EXIT_INIT_CHECK:
            return 1;
        case CALL_BUILTIN_CLASS:
            return oparg + 2;
        case CALL_BUILTIN_O:
            return oparg + 2;
        case CALL_BUILTIN_FAST:
            return oparg + 2;
        case CALL_BUILTIN_FAST_WITH_KEYWORDS:
            return oparg + 2;
        case CALL_LEN:
            return oparg + 2;
        case CALL_ISINSTANCE:
            return oparg + 2;
        case CALL_LIST_APPEND:
            return oparg + 2;
        case CALL_METHOD_DESCRIPTOR_O:
            return oparg + 2;
        case CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS:
            return oparg + 2;
        case CALL_METHOD_DESCRIPTOR_NOARGS:
            return oparg + 2;
        case CALL_METHOD_DESCRIPTOR_FAST:
            return oparg + 2;
        case INSTRUMENTED_CALL_KW:
            return 0;
        case CALL_KW:
            return oparg + 3;
        case INSTRUMENTED_CALL_FUNCTION_EX:
            return 0;
        case CALL_FUNCTION_EX:
            return (oparg & 1 ? 1 : 0) + 3;
        case MAKE_FUNCTION:
            return 1;
        case SET_FUNCTION_ATTRIBUTE:
            return 2;
        case RETURN_GENERATOR:
            return 0;
        case BUILD_SLICE:
            return (oparg == 3 ? 1 : 0) + 2;
        case CONVERT_VALUE:
            return 1;
        case FORMAT_SIMPLE:
            return 1;
        case FORMAT_WITH_SPEC:
            return 2;
        case COPY:
            return (oparg-1) + 1;
        case BINARY_OP:
            return 2;
        case SWAP:
            return (oparg-2) + 2;
        case INSTRUMENTED_INSTRUCTION:
            return 0;
        case INSTRUMENTED_JUMP_FORWARD:
            return 0;
        case INSTRUMENTED_JUMP_BACKWARD:
            return 0;
        case INSTRUMENTED_POP_JUMP_IF_TRUE:
            return 0;
        case INSTRUMENTED_POP_JUMP_IF_FALSE:
            return 0;
        case INSTRUMENTED_POP_JUMP_IF_NONE:
            return 0;
        case INSTRUMENTED_POP_JUMP_IF_NOT_NONE:
            return 0;
        case EXTENDED_ARG:
            return 0;
        case CACHE:
            return 0;
        case RESERVED:
            return 0;
        default:
            return -1;
    }
}
#endif // NEED_OPCODE_METADATA

extern int _PyOpcode_num_pushed(int opcode, int oparg, bool jump);
#ifdef NEED_OPCODE_METADATA
int _PyOpcode_num_pushed(int opcode, int oparg, bool jump)  {
    switch(opcode) {
        case LOAD_CLOSURE:
            return 1;
        case STORE_FAST_MAYBE_NULL:
            return 0;
        case END_FOR:
            return 0;
        case BINARY_OP_MULTIPLY_INT:
            return 1;
        case BINARY_OP_ADD_INT:
            return 1;
        case BINARY_OP_SUBTRACT_INT:
            return 1;
        case BINARY_OP_MULTIPLY_FLOAT:
            return 1;
        case BINARY_OP_ADD_FLOAT:
            return 1;
        case BINARY_OP_SUBTRACT_FLOAT:
            return 1;
        case BINARY_OP_ADD_UNICODE:
            return 1;
        case BINARY_OP_INPLACE_ADD_UNICODE:
            return 0;
        case RETURN_VALUE:
            return 0;
        case RETURN_CONST:
            return 0;
        case LOAD_GLOBAL_MODULE:
            return (oparg & 1 ? 1 : 0) + 1;
        case LOAD_GLOBAL_BUILTIN:
            return (oparg & 1 ? 1 : 0) + 1;
        case LOAD_SUPER_METHOD:
            return ((oparg & 1) ? 1 : 0) + 1;
        case LOAD_ZERO_SUPER_METHOD:
            return ((oparg & 1) ? 1 : 0) + 1;
        case LOAD_ZERO_SUPER_ATTR:
            return ((oparg & 1) ? 1 : 0) + 1;
        case LOAD_METHOD:
            return ((oparg & 1) ? 1 : 0) + 1;
        case LOAD_ATTR_INSTANCE_VALUE:
            return (oparg & 1 ? 1 : 0) + 1;
        case JUMP:
            return 0;
        case JUMP_NO_INTERRUPT:
            return 0;
        case POP_JUMP_IF_NONE:
            return 0;
        case POP_JUMP_IF_NOT_NONE:
            return 0;
        case FOR_ITER_LIST:
            return 2;
        case FOR_ITER_TUPLE:
            return 2;
        case FOR_ITER_RANGE:
            return 2;
        case SETUP_FINALLY:
            return 0;
        case SETUP_CLEANUP:
            return 0;
        case SETUP_WITH:
            return 0;
        case POP_BLOCK:
            return 0;
        case CALL_BOUND_METHOD_EXACT_ARGS:
            return 1;
        case CALL_PY_EXACT_ARGS:
            return 1;
        case NOP:
            return 0;
        case RESUME:
            return 0;
        case RESUME_CHECK:
            return 0;
        case INSTRUMENTED_RESUME:
            return 0;
        case LOAD_FAST_CHECK:
            return 1;
        case LOAD_FAST:
            return 1;
        case LOAD_FAST_AND_CLEAR:
            return 1;
        case LOAD_FAST_LOAD_FAST:
            return 2;
        case LOAD_CONST:
            return 1;
        case STORE_FAST:
            return 0;
        case STORE_FAST_LOAD_FAST:
            return 1;
        case STORE_FAST_STORE_FAST:
            return 0;
        case POP_TOP:
            return 0;
        case PUSH_NULL:
            return 1;
        case INSTRUMENTED_END_FOR:
            return 0;
        case END_SEND:
            return 1;
        case INSTRUMENTED_END_SEND:
            return 1;
        case UNARY_NEGATIVE:
            return 1;
        case UNARY_NOT:
            return 1;
        case TO_BOOL:
            return 1;
        case TO_BOOL_BOOL:
            return 1;
        case TO_BOOL_INT:
            return 1;
        case TO_BOOL_LIST:
            return 1;
        case TO_BOOL_NONE:
            return 1;
        case TO_BOOL_STR:
            return 1;
        case TO_BOOL_ALWAYS_TRUE:
            return 1;
        case UNARY_INVERT:
            return 1;
        case BINARY_SUBSCR:
            return 1;
        case BINARY_SLICE:
            return 1;
        case STORE_SLICE:
            return 0;
        case BINARY_SUBSCR_LIST_INT:
            return 1;
        case BINARY_SUBSCR_STR_INT:
            return 1;
        case BINARY_SUBSCR_TUPLE_INT:
            return 1;
        case BINARY_SUBSCR_DICT:
            return 1;
        case BINARY_SUBSCR_GETITEM:
            return 1;
        case LIST_APPEND:
            return (oparg-1) + 1;
        case SET_ADD:
            return (oparg-1) + 1;
        case STORE_SUBSCR:
            return 0;
        case STORE_SUBSCR_LIST_INT:
            return 0;
        case STORE_SUBSCR_DICT:
            return 0;
        case DELETE_SUBSCR:
            return 0;
        case CALL_INTRINSIC_1:
            return 1;
        case CALL_INTRINSIC_2:
            return 1;
        case RAISE_VARARGS:
            return 0;
        case INTERPRETER_EXIT:
            return 0;
        case INSTRUMENTED_RETURN_VALUE:
            return 0;
        case INSTRUMENTED_RETURN_CONST:
            return 0;
        case GET_AITER:
            return 1;
        case GET_ANEXT:
            return 2;
        case GET_AWAITABLE:
            return 1;
        case SEND:
            return 2;
        case SEND_GEN:
            return 2;
        case INSTRUMENTED_YIELD_VALUE:
            return 1;
        case YIELD_VALUE:
            return 1;
        case POP_EXCEPT:
            return 0;
        case RERAISE:
            return oparg;
        case END_ASYNC_FOR:
            return 0;
        case CLEANUP_THROW:
            return 2;
        case LOAD_ASSERTION_ERROR:
            return 1;
        case LOAD_BUILD_CLASS:
            return 1;
        case STORE_NAME:
            return 0;
        case DELETE_NAME:
            return 0;
        case UNPACK_SEQUENCE:
            return oparg;
        case UNPACK_SEQUENCE_TWO_TUPLE:
            return oparg;
        case UNPACK_SEQUENCE_TUPLE:
            return oparg;
        case UNPACK_SEQUENCE_LIST:
            return oparg;
        case UNPACK_EX:
            return (oparg & 0xFF) + (oparg >> 8) + 1;
        case STORE_ATTR:
            return 0;
        case DELETE_ATTR:
            return 0;
        case STORE_GLOBAL:
            return 0;
        case DELETE_GLOBAL:
            return 0;
        case LOAD_LOCALS:
            return 1;
        case LOAD_FROM_DICT_OR_GLOBALS:
            return 1;
        case LOAD_NAME:
            return 1;
        case LOAD_GLOBAL:
            return (oparg & 1 ? 1 : 0) + 1;
        case DELETE_FAST:
            return 0;
        case MAKE_CELL:
            return 0;
        case DELETE_DEREF:
            return 0;
        case LOAD_FROM_DICT_OR_DEREF:
            return 1;
        case LOAD_DEREF:
            return 1;
        case STORE_DEREF:
            return 0;
        case COPY_FREE_VARS:
            return 0;
        case BUILD_STRING:
            return 1;
        case BUILD_TUPLE:
            return 1;
        case BUILD_LIST:
            return 1;
        case LIST_EXTEND:
            return (oparg-1) + 1;
        case SET_UPDATE:
            return (oparg-1) + 1;
        case BUILD_SET:
            return 1;
        case BUILD_MAP:
            return 1;
        case SETUP_ANNOTATIONS:
            return 0;
        case BUILD_CONST_KEY_MAP:
            return 1;
        case DICT_UPDATE:
            return (oparg - 1) + 1;
        case DICT_MERGE:
            return (oparg - 1) + 4;
        case MAP_ADD:
            return (oparg - 1) + 1;
        case INSTRUMENTED_LOAD_SUPER_ATTR:
            return (oparg & 1 ? 1 : 0) + 1;
        case LOAD_SUPER_ATTR:
            return (oparg & 1 ? 1 : 0) + 1;
        case LOAD_SUPER_ATTR_ATTR:
            return 1;
        case LOAD_SUPER_ATTR_METHOD:
            return 2;
        case LOAD_ATTR:
            return (oparg & 1 ? 1 : 0) + 1;
        case LOAD_ATTR_MODULE:
            return (oparg & 1 ? 1 : 0) + 1;
        case LOAD_ATTR_WITH_HINT:
            return (oparg & 1 ? 1 : 0) + 1;
        case LOAD_ATTR_SLOT:
            return (oparg & 1 ? 1 : 0) + 1;
        case LOAD_ATTR_CLASS:
            return (oparg & 1 ? 1 : 0) + 1;
        case LOAD_ATTR_PROPERTY:
            return 1;
        case LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN:
            return 1;
        case STORE_ATTR_INSTANCE_VALUE:
            return 0;
        case STORE_ATTR_WITH_HINT:
            return 0;
        case STORE_ATTR_SLOT:
            return 0;
        case COMPARE_OP:
            return 1;
        case COMPARE_OP_FLOAT:
            return 1;
        case COMPARE_OP_INT:
            return 1;
        case COMPARE_OP_STR:
            return 1;
        case IS_OP:
            return 1;
        case CONTAINS_OP:
            return 1;
        case CHECK_EG_MATCH:
            return 2;
        case CHECK_EXC_MATCH:
            return 2;
        case IMPORT_NAME:
            return 1;
        case IMPORT_FROM:
            return 2;
        case JUMP_FORWARD:
            return 0;
        case JUMP_BACKWARD:
            return 0;
        case ENTER_EXECUTOR:
            return 0;
        case POP_JUMP_IF_FALSE:
            return 0;
        case POP_JUMP_IF_TRUE:
            return 0;
        case JUMP_BACKWARD_NO_INTERRUPT:
            return 0;
        case GET_LEN:
            return 2;
        case MATCH_CLASS:
            return 1;
        case MATCH_MAPPING:
            return 2;
        case MATCH_SEQUENCE:
            return 2;
        case MATCH_KEYS:
            return 3;
        case GET_ITER:
            return 1;
        case GET_YIELD_FROM_ITER:
            return 1;
        case FOR_ITER:
            return 2;
        case INSTRUMENTED_FOR_ITER:
            return 0;
        case FOR_ITER_GEN:
            return 2;
        case BEFORE_ASYNC_WITH:
            return 2;
        case BEFORE_WITH:
            return 2;
        case WITH_EXCEPT_START:
            return 5;
        case PUSH_EXC_INFO:
            return 2;
        case LOAD_ATTR_METHOD_WITH_VALUES:
            return 2;
        case LOAD_ATTR_METHOD_NO_DICT:
            return 2;
        case LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES:
            return 1;
        case LOAD_ATTR_NONDESCRIPTOR_NO_DICT:
            return 1;
        case LOAD_ATTR_METHOD_LAZY_DICT:
            return 2;
        case INSTRUMENTED_CALL:
            return 0;
        case CALL:
            return 1;
        case CALL_PY_WITH_DEFAULTS:
            return 1;
        case CALL_TYPE_1:
            return 1;
        case CALL_STR_1:
            return 1;
        case CALL_TUPLE_1:
            return 1;
        case CALL_ALLOC_AND_ENTER_INIT:
            return 1;
        case EXIT_INIT_CHECK:
            return 0;
        case CALL_BUILTIN_CLASS:
            return 1;
        case CALL_BUILTIN_O:
            return 1;
        case CALL_BUILTIN_FAST:
            return 1;
        case CALL_BUILTIN_FAST_WITH_KEYWORDS:
            return 1;
        case CALL_LEN:
            return 1;
        case CALL_ISINSTANCE:
            return 1;
        case CALL_LIST_APPEND:
            return 1;
        case CALL_METHOD_DESCRIPTOR_O:
            return 1;
        case CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS:
            return 1;
        case CALL_METHOD_DESCRIPTOR_NOARGS:
            return 1;
        case CALL_METHOD_DESCRIPTOR_FAST:
            return 1;
        case INSTRUMENTED_CALL_KW:
            return 0;
        case CALL_KW:
            return 1;
        case INSTRUMENTED_CALL_FUNCTION_EX:
            return 0;
        case CALL_FUNCTION_EX:
            return 1;
        case MAKE_FUNCTION:
            return 1;
        case SET_FUNCTION_ATTRIBUTE:
            return 1;
        case RETURN_GENERATOR:
            return 0;
        case BUILD_SLICE:
            return 1;
        case CONVERT_VALUE:
            return 1;
        case FORMAT_SIMPLE:
            return 1;
        case FORMAT_WITH_SPEC:
            return 1;
        case COPY:
            return (oparg-1) + 2;
        case BINARY_OP:
            return 1;
        case SWAP:
            return (oparg-2) + 2;
        case INSTRUMENTED_INSTRUCTION:
            return 0;
        case INSTRUMENTED_JUMP_FORWARD:
            return 0;
        case INSTRUMENTED_JUMP_BACKWARD:
            return 0;
        case INSTRUMENTED_POP_JUMP_IF_TRUE:
            return 0;
        case INSTRUMENTED_POP_JUMP_IF_FALSE:
            return 0;
        case INSTRUMENTED_POP_JUMP_IF_NONE:
            return 0;
        case INSTRUMENTED_POP_JUMP_IF_NOT_NONE:
            return 0;
        case EXTENDED_ARG:
            return 0;
        case CACHE:
            return 0;
        case RESERVED:
            return 0;
        default:
            return -1;
    }
}
#endif // NEED_OPCODE_METADATA

enum InstructionFormat {
    INSTR_FMT_IB,
    INSTR_FMT_IBC,
    INSTR_FMT_IBC00,
    INSTR_FMT_IBC000,
    INSTR_FMT_IBC00000000,
    INSTR_FMT_IX,
    INSTR_FMT_IXC,
    INSTR_FMT_IXC00,
    INSTR_FMT_IXC000,
};

#define IS_VALID_OPCODE(OP) \
    (((OP) >= 0) && ((OP) < OPCODE_METADATA_SIZE) && \
     (_PyOpcode_opcode_metadata[(OP)].valid_entry))

#define HAS_ARG_FLAG (1)
#define HAS_CONST_FLAG (2)
#define HAS_NAME_FLAG (4)
#define HAS_JUMP_FLAG (8)
#define HAS_FREE_FLAG (16)
#define HAS_LOCAL_FLAG (32)
#define HAS_EVAL_BREAK_FLAG (64)
#define HAS_DEOPT_FLAG (128)
#define HAS_ERROR_FLAG (256)
#define OPCODE_HAS_ARG(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_ARG_FLAG))
#define OPCODE_HAS_CONST(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_CONST_FLAG))
#define OPCODE_HAS_NAME(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_NAME_FLAG))
#define OPCODE_HAS_JUMP(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_JUMP_FLAG))
#define OPCODE_HAS_FREE(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_FREE_FLAG))
#define OPCODE_HAS_LOCAL(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_LOCAL_FLAG))
#define OPCODE_HAS_EVAL_BREAK(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_EVAL_BREAK_FLAG))
#define OPCODE_HAS_DEOPT(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_DEOPT_FLAG))
#define OPCODE_HAS_ERROR(OP) (_PyOpcode_opcode_metadata[OP].flags & (HAS_ERROR_FLAG))

struct opcode_metadata {
    bool valid_entry;
    enum InstructionFormat instr_format;
    int flags;
};

struct opcode_macro_expansion {
    int nuops;
    struct { int16_t uop; int8_t size; int8_t offset; } uops[12];
};

#define OPARG_FULL 0
#define OPARG_CACHE_1 1
#define OPARG_CACHE_2 2
#define OPARG_CACHE_4 4
#define OPARG_TOP 5
#define OPARG_BOTTOM 6
#define OPARG_SET_IP 7

#define OPCODE_METADATA_FMT(OP) (_PyOpcode_opcode_metadata[(OP)].instr_format)
#define SAME_OPCODE_METADATA(OP1, OP2) \
        (OPCODE_METADATA_FMT(OP1) == OPCODE_METADATA_FMT(OP2))

#define OPCODE_METADATA_SIZE 512
#define OPCODE_UOP_NAME_SIZE 512
#define OPCODE_MACRO_EXPANSION_SIZE 256

extern const struct opcode_metadata _PyOpcode_opcode_metadata[OPCODE_METADATA_SIZE];
#ifdef NEED_OPCODE_METADATA
const struct opcode_metadata _PyOpcode_opcode_metadata[OPCODE_METADATA_SIZE] = {
    [LOAD_CLOSURE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_LOCAL_FLAG },
    [STORE_FAST_MAYBE_NULL] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_LOCAL_FLAG },
    [END_FOR] = { true, INSTR_FMT_IX, 0 },
    [BINARY_OP_MULTIPLY_INT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [BINARY_OP_ADD_INT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [BINARY_OP_SUBTRACT_INT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [BINARY_OP_MULTIPLY_FLOAT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG },
    [BINARY_OP_ADD_FLOAT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG },
    [BINARY_OP_SUBTRACT_FLOAT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG },
    [BINARY_OP_ADD_UNICODE] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [BINARY_OP_INPLACE_ADD_UNICODE] = { true, INSTR_FMT_IX, HAS_LOCAL_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [RETURN_VALUE] = { true, INSTR_FMT_IX, 0 },
    [RETURN_CONST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_CONST_FLAG },
    [LOAD_GLOBAL_MODULE] = { true, INSTR_FMT_IBC000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_GLOBAL_BUILTIN] = { true, INSTR_FMT_IBC000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_SUPER_METHOD] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [LOAD_ZERO_SUPER_METHOD] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [LOAD_ZERO_SUPER_ATTR] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [LOAD_METHOD] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [LOAD_ATTR_INSTANCE_VALUE] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [JUMP] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_JUMP_FLAG },
    [JUMP_NO_INTERRUPT] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_JUMP_FLAG },
    [POP_JUMP_IF_NONE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_JUMP_FLAG },
    [POP_JUMP_IF_NOT_NONE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_JUMP_FLAG },
    [FOR_ITER_LIST] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_JUMP_FLAG | HAS_DEOPT_FLAG },
    [FOR_ITER_TUPLE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_JUMP_FLAG | HAS_DEOPT_FLAG },
    [FOR_ITER_RANGE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_JUMP_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [SETUP_FINALLY] = { true, INSTR_FMT_IX, 0 },
    [SETUP_CLEANUP] = { true, INSTR_FMT_IX, 0 },
    [SETUP_WITH] = { true, INSTR_FMT_IX, 0 },
    [POP_BLOCK] = { true, INSTR_FMT_IX, 0 },
    [CALL_BOUND_METHOD_EXACT_ARGS] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [CALL_PY_EXACT_ARGS] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [NOP] = { true, INSTR_FMT_IX, 0 },
    [RESUME] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_ERROR_FLAG },
    [RESUME_CHECK] = { true, INSTR_FMT_IX, HAS_DEOPT_FLAG },
    [INSTRUMENTED_RESUME] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_ERROR_FLAG },
    [LOAD_FAST_CHECK] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_ERROR_FLAG },
    [LOAD_FAST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_LOCAL_FLAG },
    [LOAD_FAST_AND_CLEAR] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_LOCAL_FLAG },
    [LOAD_FAST_LOAD_FAST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_LOCAL_FLAG },
    [LOAD_CONST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_CONST_FLAG },
    [STORE_FAST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_LOCAL_FLAG },
    [STORE_FAST_LOAD_FAST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_LOCAL_FLAG },
    [STORE_FAST_STORE_FAST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_LOCAL_FLAG },
    [POP_TOP] = { true, INSTR_FMT_IX, 0 },
    [PUSH_NULL] = { true, INSTR_FMT_IX, 0 },
    [INSTRUMENTED_END_FOR] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [END_SEND] = { true, INSTR_FMT_IX, 0 },
    [INSTRUMENTED_END_SEND] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [UNARY_NEGATIVE] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [UNARY_NOT] = { true, INSTR_FMT_IX, 0 },
    [TO_BOOL] = { true, INSTR_FMT_IXC00, HAS_ERROR_FLAG },
    [TO_BOOL_BOOL] = { true, INSTR_FMT_IXC00, HAS_DEOPT_FLAG },
    [TO_BOOL_INT] = { true, INSTR_FMT_IXC00, HAS_DEOPT_FLAG },
    [TO_BOOL_LIST] = { true, INSTR_FMT_IXC00, HAS_DEOPT_FLAG },
    [TO_BOOL_NONE] = { true, INSTR_FMT_IXC00, HAS_DEOPT_FLAG },
    [TO_BOOL_STR] = { true, INSTR_FMT_IXC00, HAS_DEOPT_FLAG },
    [TO_BOOL_ALWAYS_TRUE] = { true, INSTR_FMT_IXC00, HAS_DEOPT_FLAG },
    [UNARY_INVERT] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [BINARY_SUBSCR] = { true, INSTR_FMT_IXC, HAS_ERROR_FLAG },
    [BINARY_SLICE] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [STORE_SLICE] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [BINARY_SUBSCR_LIST_INT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG },
    [BINARY_SUBSCR_STR_INT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG },
    [BINARY_SUBSCR_TUPLE_INT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG },
    [BINARY_SUBSCR_DICT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [BINARY_SUBSCR_GETITEM] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG },
    [LIST_APPEND] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [SET_ADD] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [STORE_SUBSCR] = { true, INSTR_FMT_IXC, HAS_ERROR_FLAG },
    [STORE_SUBSCR_LIST_INT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG },
    [STORE_SUBSCR_DICT] = { true, INSTR_FMT_IXC, HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [DELETE_SUBSCR] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [CALL_INTRINSIC_1] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [CALL_INTRINSIC_2] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [RAISE_VARARGS] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [INTERPRETER_EXIT] = { true, INSTR_FMT_IX, 0 },
    [INSTRUMENTED_RETURN_VALUE] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [INSTRUMENTED_RETURN_CONST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_CONST_FLAG | HAS_ERROR_FLAG },
    [GET_AITER] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [GET_ANEXT] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [GET_AWAITABLE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [SEND] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_JUMP_FLAG | HAS_ERROR_FLAG },
    [SEND_GEN] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [INSTRUMENTED_YIELD_VALUE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [YIELD_VALUE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [POP_EXCEPT] = { true, INSTR_FMT_IX, 0 },
    [RERAISE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [END_ASYNC_FOR] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [CLEANUP_THROW] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [LOAD_ASSERTION_ERROR] = { true, INSTR_FMT_IX, 0 },
    [LOAD_BUILD_CLASS] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [STORE_NAME] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [DELETE_NAME] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [UNPACK_SEQUENCE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [UNPACK_SEQUENCE_TWO_TUPLE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [UNPACK_SEQUENCE_TUPLE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [UNPACK_SEQUENCE_LIST] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [UNPACK_EX] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [STORE_ATTR] = { true, INSTR_FMT_IBC000, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [DELETE_ATTR] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [STORE_GLOBAL] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [DELETE_GLOBAL] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [LOAD_LOCALS] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [LOAD_FROM_DICT_OR_GLOBALS] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [LOAD_NAME] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [LOAD_GLOBAL] = { true, INSTR_FMT_IBC000, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [DELETE_FAST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_ERROR_FLAG },
    [MAKE_CELL] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_FREE_FLAG | HAS_ERROR_FLAG },
    [DELETE_DEREF] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_FREE_FLAG | HAS_ERROR_FLAG },
    [LOAD_FROM_DICT_OR_DEREF] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_FREE_FLAG | HAS_ERROR_FLAG },
    [LOAD_DEREF] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_FREE_FLAG | HAS_ERROR_FLAG },
    [STORE_DEREF] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_FREE_FLAG },
    [COPY_FREE_VARS] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [BUILD_STRING] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [BUILD_TUPLE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [BUILD_LIST] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [LIST_EXTEND] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [SET_UPDATE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [BUILD_SET] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [BUILD_MAP] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [SETUP_ANNOTATIONS] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [BUILD_CONST_KEY_MAP] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [DICT_UPDATE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [DICT_MERGE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [MAP_ADD] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [INSTRUMENTED_LOAD_SUPER_ATTR] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG },
    [LOAD_SUPER_ATTR] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [LOAD_SUPER_ATTR_ATTR] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [LOAD_SUPER_ATTR_METHOD] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [LOAD_ATTR] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [LOAD_ATTR_MODULE] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_ATTR_WITH_HINT] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_DEOPT_FLAG },
    [LOAD_ATTR_SLOT] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_ATTR_CLASS] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_ATTR_PROPERTY] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_DEOPT_FLAG },
    [STORE_ATTR_INSTANCE_VALUE] = { true, INSTR_FMT_IXC000, HAS_DEOPT_FLAG },
    [STORE_ATTR_WITH_HINT] = { true, INSTR_FMT_IBC000, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_DEOPT_FLAG },
    [STORE_ATTR_SLOT] = { true, INSTR_FMT_IXC000, HAS_DEOPT_FLAG },
    [COMPARE_OP] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [COMPARE_OP_FLOAT] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [COMPARE_OP_INT] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [COMPARE_OP_STR] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [IS_OP] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [CONTAINS_OP] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [CHECK_EG_MATCH] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [CHECK_EXC_MATCH] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [IMPORT_NAME] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [IMPORT_FROM] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG },
    [JUMP_FORWARD] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_JUMP_FLAG },
    [JUMP_BACKWARD] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_JUMP_FLAG | HAS_EVAL_BREAK_FLAG | HAS_ERROR_FLAG },
    [ENTER_EXECUTOR] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_JUMP_FLAG | HAS_EVAL_BREAK_FLAG | HAS_ERROR_FLAG },
    [POP_JUMP_IF_FALSE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_JUMP_FLAG },
    [POP_JUMP_IF_TRUE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_JUMP_FLAG },
    [JUMP_BACKWARD_NO_INTERRUPT] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_JUMP_FLAG },
    [GET_LEN] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [MATCH_CLASS] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [MATCH_MAPPING] = { true, INSTR_FMT_IX, 0 },
    [MATCH_SEQUENCE] = { true, INSTR_FMT_IX, 0 },
    [MATCH_KEYS] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [GET_ITER] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [GET_YIELD_FROM_ITER] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [FOR_ITER] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_JUMP_FLAG | HAS_ERROR_FLAG },
    [INSTRUMENTED_FOR_ITER] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [FOR_ITER_GEN] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [BEFORE_ASYNC_WITH] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [BEFORE_WITH] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [WITH_EXCEPT_START] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [PUSH_EXC_INFO] = { true, INSTR_FMT_IX, 0 },
    [LOAD_ATTR_METHOD_WITH_VALUES] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_ATTR_METHOD_NO_DICT] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [LOAD_ATTR_METHOD_LAZY_DICT] = { true, INSTR_FMT_IBC00000000, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [INSTRUMENTED_CALL] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [CALL] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_ERROR_FLAG },
    [CALL_PY_WITH_DEFAULTS] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [CALL_TYPE_1] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG },
    [CALL_STR_1] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [CALL_TUPLE_1] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [CALL_ALLOC_AND_ENTER_INIT] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [EXIT_INIT_CHECK] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [CALL_BUILTIN_CLASS] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [CALL_BUILTIN_O] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [CALL_BUILTIN_FAST] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [CALL_BUILTIN_FAST_WITH_KEYWORDS] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [CALL_LEN] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [CALL_ISINSTANCE] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [CALL_LIST_APPEND] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [CALL_METHOD_DESCRIPTOR_O] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [CALL_METHOD_DESCRIPTOR_NOARGS] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [CALL_METHOD_DESCRIPTOR_FAST] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG },
    [INSTRUMENTED_CALL_KW] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [CALL_KW] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_ERROR_FLAG },
    [INSTRUMENTED_CALL_FUNCTION_EX] = { true, INSTR_FMT_IX, 0 },
    [CALL_FUNCTION_EX] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_ERROR_FLAG },
    [MAKE_FUNCTION] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [SET_FUNCTION_ATTRIBUTE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [RETURN_GENERATOR] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [BUILD_SLICE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [CONVERT_VALUE] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [FORMAT_SIMPLE] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [FORMAT_WITH_SPEC] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [COPY] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [BINARY_OP] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_ERROR_FLAG },
    [SWAP] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [INSTRUMENTED_INSTRUCTION] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG },
    [INSTRUMENTED_JUMP_FORWARD] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [INSTRUMENTED_JUMP_BACKWARD] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG },
    [INSTRUMENTED_POP_JUMP_IF_TRUE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG },
    [INSTRUMENTED_POP_JUMP_IF_FALSE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG },
    [INSTRUMENTED_POP_JUMP_IF_NONE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG },
    [INSTRUMENTED_POP_JUMP_IF_NOT_NONE] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG },
    [EXTENDED_ARG] = { true, INSTR_FMT_IB, HAS_ARG_FLAG },
    [CACHE] = { true, INSTR_FMT_IX, 0 },
    [RESERVED] = { true, INSTR_FMT_IX, 0 },
};
#endif // NEED_OPCODE_METADATA

extern const struct opcode_macro_expansion _PyOpcode_macro_expansion[OPCODE_MACRO_EXPANSION_SIZE];
#ifdef NEED_OPCODE_METADATA
const struct opcode_macro_expansion _PyOpcode_macro_expansion[OPCODE_MACRO_EXPANSION_SIZE] = {
    [END_FOR] = { .nuops = 2, .uops = { { __POP_TOP, 0, 0 }, { __POP_TOP, 0, 0 } } },
    [BINARY_OP_MULTIPLY_INT] = { .nuops = 2, .uops = { { _GUARD_BOTH_INT, 0, 0 }, { _BINARY_OP_MULTIPLY_INT, 0, 0 } } },
    [BINARY_OP_ADD_INT] = { .nuops = 2, .uops = { { _GUARD_BOTH_INT, 0, 0 }, { _BINARY_OP_ADD_INT, 0, 0 } } },
    [BINARY_OP_SUBTRACT_INT] = { .nuops = 2, .uops = { { _GUARD_BOTH_INT, 0, 0 }, { _BINARY_OP_SUBTRACT_INT, 0, 0 } } },
    [BINARY_OP_MULTIPLY_FLOAT] = { .nuops = 2, .uops = { { _GUARD_BOTH_FLOAT, 0, 0 }, { _BINARY_OP_MULTIPLY_FLOAT, 0, 0 } } },
    [BINARY_OP_ADD_FLOAT] = { .nuops = 2, .uops = { { _GUARD_BOTH_FLOAT, 0, 0 }, { _BINARY_OP_ADD_FLOAT, 0, 0 } } },
    [BINARY_OP_SUBTRACT_FLOAT] = { .nuops = 2, .uops = { { _GUARD_BOTH_FLOAT, 0, 0 }, { _BINARY_OP_SUBTRACT_FLOAT, 0, 0 } } },
    [BINARY_OP_ADD_UNICODE] = { .nuops = 2, .uops = { { _GUARD_BOTH_UNICODE, 0, 0 }, { _BINARY_OP_ADD_UNICODE, 0, 0 } } },
    [RETURN_VALUE] = { .nuops = 3, .uops = { { _SET_IP, 7, 0 }, { _SAVE_CURRENT_IP, 0, 0 }, { _POP_FRAME, 0, 0 } } },
    [RETURN_CONST] = { .nuops = 4, .uops = { { __LOAD_CONST, 0, 0 }, { _SET_IP, 7, 0 }, { _SAVE_CURRENT_IP, 0, 0 }, { _POP_FRAME, 0, 0 } } },
    [LOAD_GLOBAL_MODULE] = { .nuops = 2, .uops = { { _GUARD_GLOBALS_VERSION, 1, 1 }, { _LOAD_GLOBAL_MODULE, 1, 3 } } },
    [LOAD_GLOBAL_BUILTIN] = { .nuops = 3, .uops = { { _GUARD_GLOBALS_VERSION, 1, 1 }, { _GUARD_BUILTINS_VERSION, 1, 2 }, { _LOAD_GLOBAL_BUILTINS, 1, 3 } } },
    [LOAD_ATTR_INSTANCE_VALUE] = { .nuops = 3, .uops = { { _GUARD_TYPE_VERSION, 2, 1 }, { _CHECK_MANAGED_OBJECT_HAS_VALUES, 0, 0 }, { _LOAD_ATTR_INSTANCE_VALUE, 1, 3 } } },
    [CALL_BOUND_METHOD_EXACT_ARGS] = { .nuops = 9, .uops = { { _CHECK_PEP_523, 0, 0 }, { _CHECK_CALL_BOUND_METHOD_EXACT_ARGS, 0, 0 }, { _INIT_CALL_BOUND_METHOD_EXACT_ARGS, 0, 0 }, { _CHECK_FUNCTION_EXACT_ARGS, 2, 1 }, { _CHECK_STACK_SPACE, 0, 0 }, { _INIT_CALL_PY_EXACT_ARGS, 0, 0 }, { _SET_IP, 7, 3 }, { _SAVE_CURRENT_IP, 0, 0 }, { _PUSH_FRAME, 0, 0 } } },
    [CALL_PY_EXACT_ARGS] = { .nuops = 7, .uops = { { _CHECK_PEP_523, 0, 0 }, { _CHECK_FUNCTION_EXACT_ARGS, 2, 1 }, { _CHECK_STACK_SPACE, 0, 0 }, { _INIT_CALL_PY_EXACT_ARGS, 0, 0 }, { _SET_IP, 7, 3 }, { _SAVE_CURRENT_IP, 0, 0 }, { _PUSH_FRAME, 0, 0 } } },
    [NOP] = { .nuops = 1, .uops = { { __NOP, 0, 0 } } },
    [RESUME_CHECK] = { .nuops = 1, .uops = { { __RESUME_CHECK, 0, 0 } } },
    [LOAD_FAST_CHECK] = { .nuops = 1, .uops = { { __LOAD_FAST_CHECK, 0, 0 } } },
    [LOAD_FAST] = { .nuops = 1, .uops = { { __LOAD_FAST, 0, 0 } } },
    [LOAD_FAST_AND_CLEAR] = { .nuops = 1, .uops = { { __LOAD_FAST_AND_CLEAR, 0, 0 } } },
    [LOAD_FAST_LOAD_FAST] = { .nuops = 2, .uops = { { __LOAD_FAST, 5, 0 }, { __LOAD_FAST, 6, 0 } } },
    [LOAD_CONST] = { .nuops = 1, .uops = { { __LOAD_CONST, 0, 0 } } },
    [STORE_FAST] = { .nuops = 1, .uops = { { __STORE_FAST, 0, 0 } } },
    [STORE_FAST_LOAD_FAST] = { .nuops = 2, .uops = { { __STORE_FAST, 5, 0 }, { __LOAD_FAST, 6, 0 } } },
    [STORE_FAST_STORE_FAST] = { .nuops = 2, .uops = { { __STORE_FAST, 5, 0 }, { __STORE_FAST, 6, 0 } } },
    [POP_TOP] = { .nuops = 1, .uops = { { __POP_TOP, 0, 0 } } },
    [PUSH_NULL] = { .nuops = 1, .uops = { { __PUSH_NULL, 0, 0 } } },
    [END_SEND] = { .nuops = 1, .uops = { { __END_SEND, 0, 0 } } },
    [UNARY_NEGATIVE] = { .nuops = 1, .uops = { { __UNARY_NEGATIVE, 0, 0 } } },
    [UNARY_NOT] = { .nuops = 1, .uops = { { __UNARY_NOT, 0, 0 } } },
    [TO_BOOL] = { .nuops = 1, .uops = { { __TO_BOOL, 0, 0 } } },
    [TO_BOOL_BOOL] = { .nuops = 1, .uops = { { __TO_BOOL_BOOL, 0, 0 } } },
    [TO_BOOL_INT] = { .nuops = 1, .uops = { { __TO_BOOL_INT, 0, 0 } } },
    [TO_BOOL_LIST] = { .nuops = 1, .uops = { { __TO_BOOL_LIST, 0, 0 } } },
    [TO_BOOL_NONE] = { .nuops = 1, .uops = { { __TO_BOOL_NONE, 0, 0 } } },
    [TO_BOOL_STR] = { .nuops = 1, .uops = { { __TO_BOOL_STR, 0, 0 } } },
    [TO_BOOL_ALWAYS_TRUE] = { .nuops = 1, .uops = { { __TO_BOOL_ALWAYS_TRUE, 2, 1 } } },
    [UNARY_INVERT] = { .nuops = 1, .uops = { { __UNARY_INVERT, 0, 0 } } },
    [BINARY_SUBSCR] = { .nuops = 1, .uops = { { __BINARY_SUBSCR, 0, 0 } } },
    [BINARY_SLICE] = { .nuops = 1, .uops = { { __BINARY_SLICE, 0, 0 } } },
    [STORE_SLICE] = { .nuops = 1, .uops = { { __STORE_SLICE, 0, 0 } } },
    [BINARY_SUBSCR_LIST_INT] = { .nuops = 1, .uops = { { __BINARY_SUBSCR_LIST_INT, 0, 0 } } },
    [BINARY_SUBSCR_STR_INT] = { .nuops = 1, .uops = { { __BINARY_SUBSCR_STR_INT, 0, 0 } } },
    [BINARY_SUBSCR_TUPLE_INT] = { .nuops = 1, .uops = { { __BINARY_SUBSCR_TUPLE_INT, 0, 0 } } },
    [BINARY_SUBSCR_DICT] = { .nuops = 1, .uops = { { __BINARY_SUBSCR_DICT, 0, 0 } } },
    [LIST_APPEND] = { .nuops = 1, .uops = { { __LIST_APPEND, 0, 0 } } },
    [SET_ADD] = { .nuops = 1, .uops = { { __SET_ADD, 0, 0 } } },
    [STORE_SUBSCR] = { .nuops = 1, .uops = { { __STORE_SUBSCR, 0, 0 } } },
    [STORE_SUBSCR_LIST_INT] = { .nuops = 1, .uops = { { __STORE_SUBSCR_LIST_INT, 0, 0 } } },
    [STORE_SUBSCR_DICT] = { .nuops = 1, .uops = { { __STORE_SUBSCR_DICT, 0, 0 } } },
    [DELETE_SUBSCR] = { .nuops = 1, .uops = { { __DELETE_SUBSCR, 0, 0 } } },
    [CALL_INTRINSIC_1] = { .nuops = 1, .uops = { { __CALL_INTRINSIC_1, 0, 0 } } },
    [CALL_INTRINSIC_2] = { .nuops = 1, .uops = { { __CALL_INTRINSIC_2, 0, 0 } } },
    [GET_AITER] = { .nuops = 1, .uops = { { __GET_AITER, 0, 0 } } },
    [GET_ANEXT] = { .nuops = 1, .uops = { { __GET_ANEXT, 0, 0 } } },
    [GET_AWAITABLE] = { .nuops = 1, .uops = { { __GET_AWAITABLE, 0, 0 } } },
    [POP_EXCEPT] = { .nuops = 1, .uops = { { __POP_EXCEPT, 0, 0 } } },
    [LOAD_ASSERTION_ERROR] = { .nuops = 1, .uops = { { __LOAD_ASSERTION_ERROR, 0, 0 } } },
    [LOAD_BUILD_CLASS] = { .nuops = 1, .uops = { { __LOAD_BUILD_CLASS, 0, 0 } } },
    [STORE_NAME] = { .nuops = 1, .uops = { { __STORE_NAME, 0, 0 } } },
    [DELETE_NAME] = { .nuops = 1, .uops = { { __DELETE_NAME, 0, 0 } } },
    [UNPACK_SEQUENCE] = { .nuops = 1, .uops = { { __UNPACK_SEQUENCE, 0, 0 } } },
    [UNPACK_SEQUENCE_TWO_TUPLE] = { .nuops = 1, .uops = { { __UNPACK_SEQUENCE_TWO_TUPLE, 0, 0 } } },
    [UNPACK_SEQUENCE_TUPLE] = { .nuops = 1, .uops = { { __UNPACK_SEQUENCE_TUPLE, 0, 0 } } },
    [UNPACK_SEQUENCE_LIST] = { .nuops = 1, .uops = { { __UNPACK_SEQUENCE_LIST, 0, 0 } } },
    [UNPACK_EX] = { .nuops = 1, .uops = { { __UNPACK_EX, 0, 0 } } },
    [STORE_ATTR] = { .nuops = 1, .uops = { { __STORE_ATTR, 0, 0 } } },
    [DELETE_ATTR] = { .nuops = 1, .uops = { { __DELETE_ATTR, 0, 0 } } },
    [STORE_GLOBAL] = { .nuops = 1, .uops = { { __STORE_GLOBAL, 0, 0 } } },
    [DELETE_GLOBAL] = { .nuops = 1, .uops = { { __DELETE_GLOBAL, 0, 0 } } },
    [LOAD_LOCALS] = { .nuops = 1, .uops = { { __LOAD_LOCALS, 0, 0 } } },
    [LOAD_FROM_DICT_OR_GLOBALS] = { .nuops = 1, .uops = { { __LOAD_FROM_DICT_OR_GLOBALS, 0, 0 } } },
    [LOAD_NAME] = { .nuops = 1, .uops = { { __LOAD_NAME, 0, 0 } } },
    [LOAD_GLOBAL] = { .nuops = 1, .uops = { { __LOAD_GLOBAL, 0, 0 } } },
    [DELETE_FAST] = { .nuops = 1, .uops = { { __DELETE_FAST, 0, 0 } } },
    [DELETE_DEREF] = { .nuops = 1, .uops = { { __DELETE_DEREF, 0, 0 } } },
    [LOAD_FROM_DICT_OR_DEREF] = { .nuops = 1, .uops = { { __LOAD_FROM_DICT_OR_DEREF, 0, 0 } } },
    [LOAD_DEREF] = { .nuops = 1, .uops = { { __LOAD_DEREF, 0, 0 } } },
    [STORE_DEREF] = { .nuops = 1, .uops = { { __STORE_DEREF, 0, 0 } } },
    [COPY_FREE_VARS] = { .nuops = 1, .uops = { { __COPY_FREE_VARS, 0, 0 } } },
    [BUILD_STRING] = { .nuops = 1, .uops = { { __BUILD_STRING, 0, 0 } } },
    [BUILD_TUPLE] = { .nuops = 1, .uops = { { __BUILD_TUPLE, 0, 0 } } },
    [BUILD_LIST] = { .nuops = 1, .uops = { { __BUILD_LIST, 0, 0 } } },
    [LIST_EXTEND] = { .nuops = 1, .uops = { { __LIST_EXTEND, 0, 0 } } },
    [SET_UPDATE] = { .nuops = 1, .uops = { { __SET_UPDATE, 0, 0 } } },
    [BUILD_SET] = { .nuops = 1, .uops = { { __BUILD_SET, 0, 0 } } },
    [BUILD_MAP] = { .nuops = 1, .uops = { { __BUILD_MAP, 0, 0 } } },
    [SETUP_ANNOTATIONS] = { .nuops = 1, .uops = { { __SETUP_ANNOTATIONS, 0, 0 } } },
    [BUILD_CONST_KEY_MAP] = { .nuops = 1, .uops = { { __BUILD_CONST_KEY_MAP, 0, 0 } } },
    [DICT_UPDATE] = { .nuops = 1, .uops = { { __DICT_UPDATE, 0, 0 } } },
    [DICT_MERGE] = { .nuops = 1, .uops = { { __DICT_MERGE, 0, 0 } } },
    [MAP_ADD] = { .nuops = 1, .uops = { { __MAP_ADD, 0, 0 } } },
    [LOAD_SUPER_ATTR_ATTR] = { .nuops = 1, .uops = { { __LOAD_SUPER_ATTR_ATTR, 0, 0 } } },
    [LOAD_SUPER_ATTR_METHOD] = { .nuops = 1, .uops = { { __LOAD_SUPER_ATTR_METHOD, 0, 0 } } },
    [LOAD_ATTR] = { .nuops = 1, .uops = { { __LOAD_ATTR, 0, 0 } } },
    [COMPARE_OP] = { .nuops = 1, .uops = { { __COMPARE_OP, 0, 0 } } },
    [COMPARE_OP_FLOAT] = { .nuops = 1, .uops = { { __COMPARE_OP_FLOAT, 0, 0 } } },
    [COMPARE_OP_INT] = { .nuops = 1, .uops = { { __COMPARE_OP_INT, 0, 0 } } },
    [COMPARE_OP_STR] = { .nuops = 1, .uops = { { __COMPARE_OP_STR, 0, 0 } } },
    [IS_OP] = { .nuops = 1, .uops = { { __IS_OP, 0, 0 } } },
    [CONTAINS_OP] = { .nuops = 1, .uops = { { __CONTAINS_OP, 0, 0 } } },
    [CHECK_EG_MATCH] = { .nuops = 1, .uops = { { __CHECK_EG_MATCH, 0, 0 } } },
    [CHECK_EXC_MATCH] = { .nuops = 1, .uops = { { __CHECK_EXC_MATCH, 0, 0 } } },
    [GET_LEN] = { .nuops = 1, .uops = { { __GET_LEN, 0, 0 } } },
    [MATCH_CLASS] = { .nuops = 1, .uops = { { __MATCH_CLASS, 0, 0 } } },
    [MATCH_MAPPING] = { .nuops = 1, .uops = { { __MATCH_MAPPING, 0, 0 } } },
    [MATCH_SEQUENCE] = { .nuops = 1, .uops = { { __MATCH_SEQUENCE, 0, 0 } } },
    [MATCH_KEYS] = { .nuops = 1, .uops = { { __MATCH_KEYS, 0, 0 } } },
    [GET_ITER] = { .nuops = 1, .uops = { { __GET_ITER, 0, 0 } } },
    [GET_YIELD_FROM_ITER] = { .nuops = 1, .uops = { { __GET_YIELD_FROM_ITER, 0, 0 } } },
    [WITH_EXCEPT_START] = { .nuops = 1, .uops = { { __WITH_EXCEPT_START, 0, 0 } } },
    [PUSH_EXC_INFO] = { .nuops = 1, .uops = { { __PUSH_EXC_INFO, 0, 0 } } },
    [CALL_TYPE_1] = { .nuops = 1, .uops = { { __CALL_TYPE_1, 0, 0 } } },
    [CALL_STR_1] = { .nuops = 1, .uops = { { __CALL_STR_1, 0, 0 } } },
    [CALL_TUPLE_1] = { .nuops = 1, .uops = { { __CALL_TUPLE_1, 0, 0 } } },
    [EXIT_INIT_CHECK] = { .nuops = 1, .uops = { { __EXIT_INIT_CHECK, 0, 0 } } },
    [CALL_BUILTIN_CLASS] = { .nuops = 1, .uops = { { __CALL_BUILTIN_CLASS, 0, 0 } } },
    [CALL_BUILTIN_O] = { .nuops = 1, .uops = { { __CALL_BUILTIN_O, 0, 0 } } },
    [CALL_BUILTIN_FAST] = { .nuops = 1, .uops = { { __CALL_BUILTIN_FAST, 0, 0 } } },
    [CALL_BUILTIN_FAST_WITH_KEYWORDS] = { .nuops = 1, .uops = { { __CALL_BUILTIN_FAST_WITH_KEYWORDS, 0, 0 } } },
    [CALL_LEN] = { .nuops = 1, .uops = { { __CALL_LEN, 0, 0 } } },
    [CALL_ISINSTANCE] = { .nuops = 1, .uops = { { __CALL_ISINSTANCE, 0, 0 } } },
    [CALL_METHOD_DESCRIPTOR_O] = { .nuops = 1, .uops = { { __CALL_METHOD_DESCRIPTOR_O, 0, 0 } } },
    [CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = { .nuops = 1, .uops = { { __CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS, 0, 0 } } },
    [CALL_METHOD_DESCRIPTOR_NOARGS] = { .nuops = 1, .uops = { { __CALL_METHOD_DESCRIPTOR_NOARGS, 0, 0 } } },
    [CALL_METHOD_DESCRIPTOR_FAST] = { .nuops = 1, .uops = { { __CALL_METHOD_DESCRIPTOR_FAST, 0, 0 } } },
    [MAKE_FUNCTION] = { .nuops = 1, .uops = { { __MAKE_FUNCTION, 0, 0 } } },
    [SET_FUNCTION_ATTRIBUTE] = { .nuops = 1, .uops = { { __SET_FUNCTION_ATTRIBUTE, 0, 0 } } },
    [BUILD_SLICE] = { .nuops = 1, .uops = { { __BUILD_SLICE, 0, 0 } } },
    [CONVERT_VALUE] = { .nuops = 1, .uops = { { __CONVERT_VALUE, 0, 0 } } },
    [FORMAT_SIMPLE] = { .nuops = 1, .uops = { { __FORMAT_SIMPLE, 0, 0 } } },
    [FORMAT_WITH_SPEC] = { .nuops = 1, .uops = { { __FORMAT_WITH_SPEC, 0, 0 } } },
    [COPY] = { .nuops = 1, .uops = { { __COPY, 0, 0 } } },
    [BINARY_OP] = { .nuops = 1, .uops = { { __BINARY_OP, 0, 0 } } },
    [SWAP] = { .nuops = 1, .uops = { { __SWAP, 0, 0 } } },
};
#endif // NEED_OPCODE_METADATA

extern const char * const _PyOpcode_uop_name[OPCODE_UOP_NAME_SIZE];
#ifdef NEED_OPCODE_METADATA
const char * const _PyOpcode_uop_name[OPCODE_UOP_NAME_SIZE] = {
    [_EXIT_TRACE] = "_EXIT_TRACE",
    [_SET_IP] = "_SET_IP",
    [_GUARD_BOTH_INT] = "_GUARD_BOTH_INT",
    [_BINARY_OP_MULTIPLY_INT] = "_BINARY_OP_MULTIPLY_INT",
    [_BINARY_OP_ADD_INT] = "_BINARY_OP_ADD_INT",
    [_BINARY_OP_SUBTRACT_INT] = "_BINARY_OP_SUBTRACT_INT",
    [_GUARD_BOTH_FLOAT] = "_GUARD_BOTH_FLOAT",
    [_BINARY_OP_MULTIPLY_FLOAT] = "_BINARY_OP_MULTIPLY_FLOAT",
    [_BINARY_OP_ADD_FLOAT] = "_BINARY_OP_ADD_FLOAT",
    [_BINARY_OP_SUBTRACT_FLOAT] = "_BINARY_OP_SUBTRACT_FLOAT",
    [_GUARD_BOTH_UNICODE] = "_GUARD_BOTH_UNICODE",
    [_BINARY_OP_ADD_UNICODE] = "_BINARY_OP_ADD_UNICODE",
    [_BINARY_OP_INPLACE_ADD_UNICODE] = "_BINARY_OP_INPLACE_ADD_UNICODE",
    [_POP_FRAME] = "_POP_FRAME",
    [_GUARD_GLOBALS_VERSION] = "_GUARD_GLOBALS_VERSION",
    [_GUARD_BUILTINS_VERSION] = "_GUARD_BUILTINS_VERSION",
    [_LOAD_GLOBAL_MODULE] = "_LOAD_GLOBAL_MODULE",
    [_LOAD_GLOBAL_BUILTINS] = "_LOAD_GLOBAL_BUILTINS",
    [_GUARD_TYPE_VERSION] = "_GUARD_TYPE_VERSION",
    [_CHECK_MANAGED_OBJECT_HAS_VALUES] = "_CHECK_MANAGED_OBJECT_HAS_VALUES",
    [_LOAD_ATTR_INSTANCE_VALUE] = "_LOAD_ATTR_INSTANCE_VALUE",
    [_IS_NONE] = "_IS_NONE",
    [_ITER_CHECK_LIST] = "_ITER_CHECK_LIST",
    [_ITER_JUMP_LIST] = "_ITER_JUMP_LIST",
    [_IS_ITER_EXHAUSTED_LIST] = "_IS_ITER_EXHAUSTED_LIST",
    [_ITER_NEXT_LIST] = "_ITER_NEXT_LIST",
    [_ITER_CHECK_TUPLE] = "_ITER_CHECK_TUPLE",
    [_ITER_JUMP_TUPLE] = "_ITER_JUMP_TUPLE",
    [_IS_ITER_EXHAUSTED_TUPLE] = "_IS_ITER_EXHAUSTED_TUPLE",
    [_ITER_NEXT_TUPLE] = "_ITER_NEXT_TUPLE",
    [_ITER_CHECK_RANGE] = "_ITER_CHECK_RANGE",
    [_ITER_JUMP_RANGE] = "_ITER_JUMP_RANGE",
    [_IS_ITER_EXHAUSTED_RANGE] = "_IS_ITER_EXHAUSTED_RANGE",
    [_ITER_NEXT_RANGE] = "_ITER_NEXT_RANGE",
    [_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = "_CHECK_CALL_BOUND_METHOD_EXACT_ARGS",
    [_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = "_INIT_CALL_BOUND_METHOD_EXACT_ARGS",
    [_CHECK_PEP_523] = "_CHECK_PEP_523",
    [_CHECK_FUNCTION_EXACT_ARGS] = "_CHECK_FUNCTION_EXACT_ARGS",
    [_CHECK_STACK_SPACE] = "_CHECK_STACK_SPACE",
    [_INIT_CALL_PY_EXACT_ARGS] = "_INIT_CALL_PY_EXACT_ARGS",
    [_PUSH_FRAME] = "_PUSH_FRAME",
    [_POP_JUMP_IF_FALSE] = "_POP_JUMP_IF_FALSE",
    [_POP_JUMP_IF_TRUE] = "_POP_JUMP_IF_TRUE",
    [_JUMP_TO_TOP] = "_JUMP_TO_TOP",
    [_SAVE_CURRENT_IP] = "_SAVE_CURRENT_IP",
    [_INSERT] = "_INSERT",
    [__NOP] = "__NOP",
    [__RESUME] = "__RESUME",
    [__RESUME_CHECK] = "__RESUME_CHECK",
    [__INSTRUMENTED_RESUME] = "__INSTRUMENTED_RESUME",
    [__LOAD_FAST_CHECK] = "__LOAD_FAST_CHECK",
    [__LOAD_FAST] = "__LOAD_FAST",
    [__LOAD_FAST_AND_CLEAR] = "__LOAD_FAST_AND_CLEAR",
    [__LOAD_FAST_LOAD_FAST] = "__LOAD_FAST_LOAD_FAST",
    [__LOAD_CONST] = "__LOAD_CONST",
    [__STORE_FAST] = "__STORE_FAST",
    [__STORE_FAST_LOAD_FAST] = "__STORE_FAST_LOAD_FAST",
    [__STORE_FAST_STORE_FAST] = "__STORE_FAST_STORE_FAST",
    [__POP_TOP] = "__POP_TOP",
    [__PUSH_NULL] = "__PUSH_NULL",
    [__INSTRUMENTED_END_FOR] = "__INSTRUMENTED_END_FOR",
    [__END_SEND] = "__END_SEND",
    [__INSTRUMENTED_END_SEND] = "__INSTRUMENTED_END_SEND",
    [__UNARY_NEGATIVE] = "__UNARY_NEGATIVE",
    [__UNARY_NOT] = "__UNARY_NOT",
    [__TO_BOOL] = "__TO_BOOL",
    [__TO_BOOL_BOOL] = "__TO_BOOL_BOOL",
    [__TO_BOOL_INT] = "__TO_BOOL_INT",
    [__TO_BOOL_LIST] = "__TO_BOOL_LIST",
    [__TO_BOOL_NONE] = "__TO_BOOL_NONE",
    [__TO_BOOL_STR] = "__TO_BOOL_STR",
    [__TO_BOOL_ALWAYS_TRUE] = "__TO_BOOL_ALWAYS_TRUE",
    [__UNARY_INVERT] = "__UNARY_INVERT",
    [__BINARY_SUBSCR] = "__BINARY_SUBSCR",
    [__BINARY_SLICE] = "__BINARY_SLICE",
    [__STORE_SLICE] = "__STORE_SLICE",
    [__BINARY_SUBSCR_LIST_INT] = "__BINARY_SUBSCR_LIST_INT",
    [__BINARY_SUBSCR_STR_INT] = "__BINARY_SUBSCR_STR_INT",
    [__BINARY_SUBSCR_TUPLE_INT] = "__BINARY_SUBSCR_TUPLE_INT",
    [__BINARY_SUBSCR_DICT] = "__BINARY_SUBSCR_DICT",
    [__BINARY_SUBSCR_GETITEM] = "__BINARY_SUBSCR_GETITEM",
    [__LIST_APPEND] = "__LIST_APPEND",
    [__SET_ADD] = "__SET_ADD",
    [__STORE_SUBSCR] = "__STORE_SUBSCR",
    [__STORE_SUBSCR_LIST_INT] = "__STORE_SUBSCR_LIST_INT",
    [__STORE_SUBSCR_DICT] = "__STORE_SUBSCR_DICT",
    [__DELETE_SUBSCR] = "__DELETE_SUBSCR",
    [__CALL_INTRINSIC_1] = "__CALL_INTRINSIC_1",
    [__CALL_INTRINSIC_2] = "__CALL_INTRINSIC_2",
    [__RAISE_VARARGS] = "__RAISE_VARARGS",
    [__INTERPRETER_EXIT] = "__INTERPRETER_EXIT",
    [__INSTRUMENTED_RETURN_VALUE] = "__INSTRUMENTED_RETURN_VALUE",
    [__INSTRUMENTED_RETURN_CONST] = "__INSTRUMENTED_RETURN_CONST",
    [__GET_AITER] = "__GET_AITER",
    [__GET_ANEXT] = "__GET_ANEXT",
    [__GET_AWAITABLE] = "__GET_AWAITABLE",
    [__SEND] = "__SEND",
    [__SEND_GEN] = "__SEND_GEN",
    [__INSTRUMENTED_YIELD_VALUE] = "__INSTRUMENTED_YIELD_VALUE",
    [__YIELD_VALUE] = "__YIELD_VALUE",
    [__POP_EXCEPT] = "__POP_EXCEPT",
    [__RERAISE] = "__RERAISE",
    [__END_ASYNC_FOR] = "__END_ASYNC_FOR",
    [__CLEANUP_THROW] = "__CLEANUP_THROW",
    [__LOAD_ASSERTION_ERROR] = "__LOAD_ASSERTION_ERROR",
    [__LOAD_BUILD_CLASS] = "__LOAD_BUILD_CLASS",
    [__STORE_NAME] = "__STORE_NAME",
    [__DELETE_NAME] = "__DELETE_NAME",
    [__UNPACK_SEQUENCE] = "__UNPACK_SEQUENCE",
    [__UNPACK_SEQUENCE_TWO_TUPLE] = "__UNPACK_SEQUENCE_TWO_TUPLE",
    [__UNPACK_SEQUENCE_TUPLE] = "__UNPACK_SEQUENCE_TUPLE",
    [__UNPACK_SEQUENCE_LIST] = "__UNPACK_SEQUENCE_LIST",
    [__UNPACK_EX] = "__UNPACK_EX",
    [__STORE_ATTR] = "__STORE_ATTR",
    [__DELETE_ATTR] = "__DELETE_ATTR",
    [__STORE_GLOBAL] = "__STORE_GLOBAL",
    [__DELETE_GLOBAL] = "__DELETE_GLOBAL",
    [__LOAD_LOCALS] = "__LOAD_LOCALS",
    [__LOAD_FROM_DICT_OR_GLOBALS] = "__LOAD_FROM_DICT_OR_GLOBALS",
    [__LOAD_NAME] = "__LOAD_NAME",
    [__LOAD_GLOBAL] = "__LOAD_GLOBAL",
    [__DELETE_FAST] = "__DELETE_FAST",
    [__MAKE_CELL] = "__MAKE_CELL",
    [__DELETE_DEREF] = "__DELETE_DEREF",
    [__LOAD_FROM_DICT_OR_DEREF] = "__LOAD_FROM_DICT_OR_DEREF",
    [__LOAD_DEREF] = "__LOAD_DEREF",
    [__STORE_DEREF] = "__STORE_DEREF",
    [__COPY_FREE_VARS] = "__COPY_FREE_VARS",
    [__BUILD_STRING] = "__BUILD_STRING",
    [__BUILD_TUPLE] = "__BUILD_TUPLE",
    [__BUILD_LIST] = "__BUILD_LIST",
    [__LIST_EXTEND] = "__LIST_EXTEND",
    [__SET_UPDATE] = "__SET_UPDATE",
    [__BUILD_SET] = "__BUILD_SET",
    [__BUILD_MAP] = "__BUILD_MAP",
    [__SETUP_ANNOTATIONS] = "__SETUP_ANNOTATIONS",
    [__BUILD_CONST_KEY_MAP] = "__BUILD_CONST_KEY_MAP",
    [__DICT_UPDATE] = "__DICT_UPDATE",
    [__DICT_MERGE] = "__DICT_MERGE",
    [__MAP_ADD] = "__MAP_ADD",
    [__INSTRUMENTED_LOAD_SUPER_ATTR] = "__INSTRUMENTED_LOAD_SUPER_ATTR",
    [__LOAD_SUPER_ATTR] = "__LOAD_SUPER_ATTR",
    [__LOAD_SUPER_ATTR_ATTR] = "__LOAD_SUPER_ATTR_ATTR",
    [__LOAD_SUPER_ATTR_METHOD] = "__LOAD_SUPER_ATTR_METHOD",
    [__LOAD_ATTR] = "__LOAD_ATTR",
    [__LOAD_ATTR_MODULE] = "__LOAD_ATTR_MODULE",
    [__LOAD_ATTR_WITH_HINT] = "__LOAD_ATTR_WITH_HINT",
    [__LOAD_ATTR_SLOT] = "__LOAD_ATTR_SLOT",
    [__LOAD_ATTR_CLASS] = "__LOAD_ATTR_CLASS",
    [__LOAD_ATTR_PROPERTY] = "__LOAD_ATTR_PROPERTY",
    [__LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN] = "__LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN",
    [__STORE_ATTR_INSTANCE_VALUE] = "__STORE_ATTR_INSTANCE_VALUE",
    [__STORE_ATTR_WITH_HINT] = "__STORE_ATTR_WITH_HINT",
    [__STORE_ATTR_SLOT] = "__STORE_ATTR_SLOT",
    [__COMPARE_OP] = "__COMPARE_OP",
    [__COMPARE_OP_FLOAT] = "__COMPARE_OP_FLOAT",
    [__COMPARE_OP_INT] = "__COMPARE_OP_INT",
    [__COMPARE_OP_STR] = "__COMPARE_OP_STR",
    [__IS_OP] = "__IS_OP",
    [__CONTAINS_OP] = "__CONTAINS_OP",
    [__CHECK_EG_MATCH] = "__CHECK_EG_MATCH",
    [__CHECK_EXC_MATCH] = "__CHECK_EXC_MATCH",
    [__IMPORT_NAME] = "__IMPORT_NAME",
    [__IMPORT_FROM] = "__IMPORT_FROM",
    [__JUMP_FORWARD] = "__JUMP_FORWARD",
    [__JUMP_BACKWARD] = "__JUMP_BACKWARD",
    [__ENTER_EXECUTOR] = "__ENTER_EXECUTOR",
    [__POP_JUMP_IF_FALSE] = "__POP_JUMP_IF_FALSE",
    [__POP_JUMP_IF_TRUE] = "__POP_JUMP_IF_TRUE",
    [__JUMP_BACKWARD_NO_INTERRUPT] = "__JUMP_BACKWARD_NO_INTERRUPT",
    [__GET_LEN] = "__GET_LEN",
    [__MATCH_CLASS] = "__MATCH_CLASS",
    [__MATCH_MAPPING] = "__MATCH_MAPPING",
    [__MATCH_SEQUENCE] = "__MATCH_SEQUENCE",
    [__MATCH_KEYS] = "__MATCH_KEYS",
    [__GET_ITER] = "__GET_ITER",
    [__GET_YIELD_FROM_ITER] = "__GET_YIELD_FROM_ITER",
    [__FOR_ITER] = "__FOR_ITER",
    [__INSTRUMENTED_FOR_ITER] = "__INSTRUMENTED_FOR_ITER",
    [__FOR_ITER_GEN] = "__FOR_ITER_GEN",
    [__BEFORE_ASYNC_WITH] = "__BEFORE_ASYNC_WITH",
    [__BEFORE_WITH] = "__BEFORE_WITH",
    [__WITH_EXCEPT_START] = "__WITH_EXCEPT_START",
    [__PUSH_EXC_INFO] = "__PUSH_EXC_INFO",
    [__LOAD_ATTR_METHOD_WITH_VALUES] = "__LOAD_ATTR_METHOD_WITH_VALUES",
    [__LOAD_ATTR_METHOD_NO_DICT] = "__LOAD_ATTR_METHOD_NO_DICT",
    [__LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = "__LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES",
    [__LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = "__LOAD_ATTR_NONDESCRIPTOR_NO_DICT",
    [__LOAD_ATTR_METHOD_LAZY_DICT] = "__LOAD_ATTR_METHOD_LAZY_DICT",
    [__INSTRUMENTED_CALL] = "__INSTRUMENTED_CALL",
    [__CALL] = "__CALL",
    [__CALL_PY_WITH_DEFAULTS] = "__CALL_PY_WITH_DEFAULTS",
    [__CALL_TYPE_1] = "__CALL_TYPE_1",
    [__CALL_STR_1] = "__CALL_STR_1",
    [__CALL_TUPLE_1] = "__CALL_TUPLE_1",
    [__CALL_ALLOC_AND_ENTER_INIT] = "__CALL_ALLOC_AND_ENTER_INIT",
    [__EXIT_INIT_CHECK] = "__EXIT_INIT_CHECK",
    [__CALL_BUILTIN_CLASS] = "__CALL_BUILTIN_CLASS",
    [__CALL_BUILTIN_O] = "__CALL_BUILTIN_O",
    [__CALL_BUILTIN_FAST] = "__CALL_BUILTIN_FAST",
    [__CALL_BUILTIN_FAST_WITH_KEYWORDS] = "__CALL_BUILTIN_FAST_WITH_KEYWORDS",
    [__CALL_LEN] = "__CALL_LEN",
    [__CALL_ISINSTANCE] = "__CALL_ISINSTANCE",
    [__CALL_LIST_APPEND] = "__CALL_LIST_APPEND",
    [__CALL_METHOD_DESCRIPTOR_O] = "__CALL_METHOD_DESCRIPTOR_O",
    [__CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = "__CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS",
    [__CALL_METHOD_DESCRIPTOR_NOARGS] = "__CALL_METHOD_DESCRIPTOR_NOARGS",
    [__CALL_METHOD_DESCRIPTOR_FAST] = "__CALL_METHOD_DESCRIPTOR_FAST",
    [__INSTRUMENTED_CALL_KW] = "__INSTRUMENTED_CALL_KW",
    [__CALL_KW] = "__CALL_KW",
    [__INSTRUMENTED_CALL_FUNCTION_EX] = "__INSTRUMENTED_CALL_FUNCTION_EX",
    [__CALL_FUNCTION_EX] = "__CALL_FUNCTION_EX",
    [__MAKE_FUNCTION] = "__MAKE_FUNCTION",
    [__SET_FUNCTION_ATTRIBUTE] = "__SET_FUNCTION_ATTRIBUTE",
    [__RETURN_GENERATOR] = "__RETURN_GENERATOR",
    [__BUILD_SLICE] = "__BUILD_SLICE",
    [__CONVERT_VALUE] = "__CONVERT_VALUE",
    [__FORMAT_SIMPLE] = "__FORMAT_SIMPLE",
    [__FORMAT_WITH_SPEC] = "__FORMAT_WITH_SPEC",
    [__COPY] = "__COPY",
    [__BINARY_OP] = "__BINARY_OP",
    [__SWAP] = "__SWAP",
    [__INSTRUMENTED_INSTRUCTION] = "__INSTRUMENTED_INSTRUCTION",
    [__INSTRUMENTED_JUMP_FORWARD] = "__INSTRUMENTED_JUMP_FORWARD",
    [__INSTRUMENTED_JUMP_BACKWARD] = "__INSTRUMENTED_JUMP_BACKWARD",
    [__INSTRUMENTED_POP_JUMP_IF_TRUE] = "__INSTRUMENTED_POP_JUMP_IF_TRUE",
    [__INSTRUMENTED_POP_JUMP_IF_FALSE] = "__INSTRUMENTED_POP_JUMP_IF_FALSE",
    [__INSTRUMENTED_POP_JUMP_IF_NONE] = "__INSTRUMENTED_POP_JUMP_IF_NONE",
    [__INSTRUMENTED_POP_JUMP_IF_NOT_NONE] = "__INSTRUMENTED_POP_JUMP_IF_NOT_NONE",
    [__EXTENDED_ARG] = "__EXTENDED_ARG",
    [__CACHE] = "__CACHE",
    [__RESERVED] = "__RESERVED",
};
#endif // NEED_OPCODE_METADATA

extern const char *const _PyOpcode_OpName[268];
#ifdef NEED_OPCODE_METADATA
const char *const _PyOpcode_OpName[268] = {
    [CACHE] = "CACHE",
    [RESERVED] = "RESERVED",
    [RESUME] = "RESUME",
    [BEFORE_ASYNC_WITH] = "BEFORE_ASYNC_WITH",
    [BEFORE_WITH] = "BEFORE_WITH",
    [BINARY_OP_INPLACE_ADD_UNICODE] = "BINARY_OP_INPLACE_ADD_UNICODE",
    [BINARY_SLICE] = "BINARY_SLICE",
    [BINARY_SUBSCR] = "BINARY_SUBSCR",
    [CHECK_EG_MATCH] = "CHECK_EG_MATCH",
    [CHECK_EXC_MATCH] = "CHECK_EXC_MATCH",
    [CLEANUP_THROW] = "CLEANUP_THROW",
    [DELETE_SUBSCR] = "DELETE_SUBSCR",
    [END_ASYNC_FOR] = "END_ASYNC_FOR",
    [END_FOR] = "END_FOR",
    [END_SEND] = "END_SEND",
    [EXIT_INIT_CHECK] = "EXIT_INIT_CHECK",
    [FORMAT_SIMPLE] = "FORMAT_SIMPLE",
    [FORMAT_WITH_SPEC] = "FORMAT_WITH_SPEC",
    [GET_AITER] = "GET_AITER",
    [GET_ANEXT] = "GET_ANEXT",
    [GET_ITER] = "GET_ITER",
    [GET_LEN] = "GET_LEN",
    [GET_YIELD_FROM_ITER] = "GET_YIELD_FROM_ITER",
    [INTERPRETER_EXIT] = "INTERPRETER_EXIT",
    [LOAD_ASSERTION_ERROR] = "LOAD_ASSERTION_ERROR",
    [LOAD_BUILD_CLASS] = "LOAD_BUILD_CLASS",
    [LOAD_LOCALS] = "LOAD_LOCALS",
    [MAKE_FUNCTION] = "MAKE_FUNCTION",
    [MATCH_KEYS] = "MATCH_KEYS",
    [MATCH_MAPPING] = "MATCH_MAPPING",
    [MATCH_SEQUENCE] = "MATCH_SEQUENCE",
    [NOP] = "NOP",
    [POP_EXCEPT] = "POP_EXCEPT",
    [POP_TOP] = "POP_TOP",
    [PUSH_EXC_INFO] = "PUSH_EXC_INFO",
    [PUSH_NULL] = "PUSH_NULL",
    [RETURN_GENERATOR] = "RETURN_GENERATOR",
    [RETURN_VALUE] = "RETURN_VALUE",
    [SETUP_ANNOTATIONS] = "SETUP_ANNOTATIONS",
    [STORE_SLICE] = "STORE_SLICE",
    [STORE_SUBSCR] = "STORE_SUBSCR",
    [TO_BOOL] = "TO_BOOL",
    [UNARY_INVERT] = "UNARY_INVERT",
    [UNARY_NEGATIVE] = "UNARY_NEGATIVE",
    [UNARY_NOT] = "UNARY_NOT",
    [WITH_EXCEPT_START] = "WITH_EXCEPT_START",
    [BINARY_OP] = "BINARY_OP",
    [BUILD_CONST_KEY_MAP] = "BUILD_CONST_KEY_MAP",
    [BUILD_LIST] = "BUILD_LIST",
    [BUILD_MAP] = "BUILD_MAP",
    [BUILD_SET] = "BUILD_SET",
    [BUILD_SLICE] = "BUILD_SLICE",
    [BUILD_STRING] = "BUILD_STRING",
    [BUILD_TUPLE] = "BUILD_TUPLE",
    [CALL] = "CALL",
    [CALL_FUNCTION_EX] = "CALL_FUNCTION_EX",
    [CALL_INTRINSIC_1] = "CALL_INTRINSIC_1",
    [CALL_INTRINSIC_2] = "CALL_INTRINSIC_2",
    [CALL_KW] = "CALL_KW",
    [COMPARE_OP] = "COMPARE_OP",
    [CONTAINS_OP] = "CONTAINS_OP",
    [CONVERT_VALUE] = "CONVERT_VALUE",
    [COPY] = "COPY",
    [COPY_FREE_VARS] = "COPY_FREE_VARS",
    [DELETE_ATTR] = "DELETE_ATTR",
    [DELETE_DEREF] = "DELETE_DEREF",
    [DELETE_FAST] = "DELETE_FAST",
    [DELETE_GLOBAL] = "DELETE_GLOBAL",
    [DELETE_NAME] = "DELETE_NAME",
    [DICT_MERGE] = "DICT_MERGE",
    [DICT_UPDATE] = "DICT_UPDATE",
    [ENTER_EXECUTOR] = "ENTER_EXECUTOR",
    [EXTENDED_ARG] = "EXTENDED_ARG",
    [FOR_ITER] = "FOR_ITER",
    [GET_AWAITABLE] = "GET_AWAITABLE",
    [IMPORT_FROM] = "IMPORT_FROM",
    [IMPORT_NAME] = "IMPORT_NAME",
    [IS_OP] = "IS_OP",
    [JUMP_BACKWARD] = "JUMP_BACKWARD",
    [JUMP_BACKWARD_NO_INTERRUPT] = "JUMP_BACKWARD_NO_INTERRUPT",
    [JUMP_FORWARD] = "JUMP_FORWARD",
    [LIST_APPEND] = "LIST_APPEND",
    [LIST_EXTEND] = "LIST_EXTEND",
    [LOAD_ATTR] = "LOAD_ATTR",
    [LOAD_CONST] = "LOAD_CONST",
    [LOAD_DEREF] = "LOAD_DEREF",
    [LOAD_FAST] = "LOAD_FAST",
    [LOAD_FAST_AND_CLEAR] = "LOAD_FAST_AND_CLEAR",
    [LOAD_FAST_CHECK] = "LOAD_FAST_CHECK",
    [LOAD_FAST_LOAD_FAST] = "LOAD_FAST_LOAD_FAST",
    [LOAD_FROM_DICT_OR_DEREF] = "LOAD_FROM_DICT_OR_DEREF",
    [LOAD_FROM_DICT_OR_GLOBALS] = "LOAD_FROM_DICT_OR_GLOBALS",
    [LOAD_GLOBAL] = "LOAD_GLOBAL",
    [LOAD_NAME] = "LOAD_NAME",
    [LOAD_SUPER_ATTR] = "LOAD_SUPER_ATTR",
    [MAKE_CELL] = "MAKE_CELL",
    [MAP_ADD] = "MAP_ADD",
    [MATCH_CLASS] = "MATCH_CLASS",
    [POP_JUMP_IF_FALSE] = "POP_JUMP_IF_FALSE",
    [POP_JUMP_IF_NONE] = "POP_JUMP_IF_NONE",
    [POP_JUMP_IF_NOT_NONE] = "POP_JUMP_IF_NOT_NONE",
    [POP_JUMP_IF_TRUE] = "POP_JUMP_IF_TRUE",
    [RAISE_VARARGS] = "RAISE_VARARGS",
    [RERAISE] = "RERAISE",
    [RETURN_CONST] = "RETURN_CONST",
    [SEND] = "SEND",
    [SET_ADD] = "SET_ADD",
    [SET_FUNCTION_ATTRIBUTE] = "SET_FUNCTION_ATTRIBUTE",
    [SET_UPDATE] = "SET_UPDATE",
    [STORE_ATTR] = "STORE_ATTR",
    [STORE_DEREF] = "STORE_DEREF",
    [STORE_FAST] = "STORE_FAST",
    [STORE_FAST_LOAD_FAST] = "STORE_FAST_LOAD_FAST",
    [STORE_FAST_STORE_FAST] = "STORE_FAST_STORE_FAST",
    [STORE_GLOBAL] = "STORE_GLOBAL",
    [STORE_NAME] = "STORE_NAME",
    [SWAP] = "SWAP",
    [UNPACK_EX] = "UNPACK_EX",
    [UNPACK_SEQUENCE] = "UNPACK_SEQUENCE",
    [YIELD_VALUE] = "YIELD_VALUE",
    [BINARY_OP_ADD_FLOAT] = "BINARY_OP_ADD_FLOAT",
    [BINARY_OP_ADD_INT] = "BINARY_OP_ADD_INT",
    [BINARY_OP_ADD_UNICODE] = "BINARY_OP_ADD_UNICODE",
    [BINARY_OP_MULTIPLY_FLOAT] = "BINARY_OP_MULTIPLY_FLOAT",
    [BINARY_OP_MULTIPLY_INT] = "BINARY_OP_MULTIPLY_INT",
    [BINARY_OP_SUBTRACT_FLOAT] = "BINARY_OP_SUBTRACT_FLOAT",
    [BINARY_OP_SUBTRACT_INT] = "BINARY_OP_SUBTRACT_INT",
    [BINARY_SUBSCR_DICT] = "BINARY_SUBSCR_DICT",
    [BINARY_SUBSCR_GETITEM] = "BINARY_SUBSCR_GETITEM",
    [BINARY_SUBSCR_LIST_INT] = "BINARY_SUBSCR_LIST_INT",
    [BINARY_SUBSCR_STR_INT] = "BINARY_SUBSCR_STR_INT",
    [BINARY_SUBSCR_TUPLE_INT] = "BINARY_SUBSCR_TUPLE_INT",
    [CALL_ALLOC_AND_ENTER_INIT] = "CALL_ALLOC_AND_ENTER_INIT",
    [CALL_BOUND_METHOD_EXACT_ARGS] = "CALL_BOUND_METHOD_EXACT_ARGS",
    [CALL_BUILTIN_CLASS] = "CALL_BUILTIN_CLASS",
    [CALL_BUILTIN_FAST] = "CALL_BUILTIN_FAST",
    [CALL_BUILTIN_FAST_WITH_KEYWORDS] = "CALL_BUILTIN_FAST_WITH_KEYWORDS",
    [CALL_BUILTIN_O] = "CALL_BUILTIN_O",
    [CALL_ISINSTANCE] = "CALL_ISINSTANCE",
    [CALL_LEN] = "CALL_LEN",
    [CALL_LIST_APPEND] = "CALL_LIST_APPEND",
    [CALL_METHOD_DESCRIPTOR_FAST] = "CALL_METHOD_DESCRIPTOR_FAST",
    [CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = "CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS",
    [CALL_METHOD_DESCRIPTOR_NOARGS] = "CALL_METHOD_DESCRIPTOR_NOARGS",
    [CALL_METHOD_DESCRIPTOR_O] = "CALL_METHOD_DESCRIPTOR_O",
    [CALL_PY_EXACT_ARGS] = "CALL_PY_EXACT_ARGS",
    [CALL_PY_WITH_DEFAULTS] = "CALL_PY_WITH_DEFAULTS",
    [CALL_STR_1] = "CALL_STR_1",
    [CALL_TUPLE_1] = "CALL_TUPLE_1",
    [CALL_TYPE_1] = "CALL_TYPE_1",
    [COMPARE_OP_FLOAT] = "COMPARE_OP_FLOAT",
    [COMPARE_OP_INT] = "COMPARE_OP_INT",
    [COMPARE_OP_STR] = "COMPARE_OP_STR",
    [FOR_ITER_GEN] = "FOR_ITER_GEN",
    [FOR_ITER_LIST] = "FOR_ITER_LIST",
    [FOR_ITER_RANGE] = "FOR_ITER_RANGE",
    [FOR_ITER_TUPLE] = "FOR_ITER_TUPLE",
    [LOAD_ATTR_CLASS] = "LOAD_ATTR_CLASS",
    [LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN] = "LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN",
    [LOAD_ATTR_INSTANCE_VALUE] = "LOAD_ATTR_INSTANCE_VALUE",
    [LOAD_ATTR_METHOD_LAZY_DICT] = "LOAD_ATTR_METHOD_LAZY_DICT",
    [LOAD_ATTR_METHOD_NO_DICT] = "LOAD_ATTR_METHOD_NO_DICT",
    [LOAD_ATTR_METHOD_WITH_VALUES] = "LOAD_ATTR_METHOD_WITH_VALUES",
    [LOAD_ATTR_MODULE] = "LOAD_ATTR_MODULE",
    [LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = "LOAD_ATTR_NONDESCRIPTOR_NO_DICT",
    [LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = "LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES",
    [LOAD_ATTR_PROPERTY] = "LOAD_ATTR_PROPERTY",
    [LOAD_ATTR_SLOT] = "LOAD_ATTR_SLOT",
    [LOAD_ATTR_WITH_HINT] = "LOAD_ATTR_WITH_HINT",
    [LOAD_GLOBAL_BUILTIN] = "LOAD_GLOBAL_BUILTIN",
    [LOAD_GLOBAL_MODULE] = "LOAD_GLOBAL_MODULE",
    [LOAD_SUPER_ATTR_ATTR] = "LOAD_SUPER_ATTR_ATTR",
    [LOAD_SUPER_ATTR_METHOD] = "LOAD_SUPER_ATTR_METHOD",
    [RESUME_CHECK] = "RESUME_CHECK",
    [SEND_GEN] = "SEND_GEN",
    [STORE_ATTR_INSTANCE_VALUE] = "STORE_ATTR_INSTANCE_VALUE",
    [STORE_ATTR_SLOT] = "STORE_ATTR_SLOT",
    [STORE_ATTR_WITH_HINT] = "STORE_ATTR_WITH_HINT",
    [STORE_SUBSCR_DICT] = "STORE_SUBSCR_DICT",
    [STORE_SUBSCR_LIST_INT] = "STORE_SUBSCR_LIST_INT",
    [TO_BOOL_ALWAYS_TRUE] = "TO_BOOL_ALWAYS_TRUE",
    [TO_BOOL_BOOL] = "TO_BOOL_BOOL",
    [TO_BOOL_INT] = "TO_BOOL_INT",
    [TO_BOOL_LIST] = "TO_BOOL_LIST",
    [TO_BOOL_NONE] = "TO_BOOL_NONE",
    [TO_BOOL_STR] = "TO_BOOL_STR",
    [UNPACK_SEQUENCE_LIST] = "UNPACK_SEQUENCE_LIST",
    [UNPACK_SEQUENCE_TUPLE] = "UNPACK_SEQUENCE_TUPLE",
    [UNPACK_SEQUENCE_TWO_TUPLE] = "UNPACK_SEQUENCE_TWO_TUPLE",
    [INSTRUMENTED_RESUME] = "INSTRUMENTED_RESUME",
    [INSTRUMENTED_END_FOR] = "INSTRUMENTED_END_FOR",
    [INSTRUMENTED_END_SEND] = "INSTRUMENTED_END_SEND",
    [INSTRUMENTED_RETURN_VALUE] = "INSTRUMENTED_RETURN_VALUE",
    [INSTRUMENTED_RETURN_CONST] = "INSTRUMENTED_RETURN_CONST",
    [INSTRUMENTED_YIELD_VALUE] = "INSTRUMENTED_YIELD_VALUE",
    [INSTRUMENTED_LOAD_SUPER_ATTR] = "INSTRUMENTED_LOAD_SUPER_ATTR",
    [INSTRUMENTED_FOR_ITER] = "INSTRUMENTED_FOR_ITER",
    [INSTRUMENTED_CALL] = "INSTRUMENTED_CALL",
    [INSTRUMENTED_CALL_KW] = "INSTRUMENTED_CALL_KW",
    [INSTRUMENTED_CALL_FUNCTION_EX] = "INSTRUMENTED_CALL_FUNCTION_EX",
    [INSTRUMENTED_INSTRUCTION] = "INSTRUMENTED_INSTRUCTION",
    [INSTRUMENTED_JUMP_FORWARD] = "INSTRUMENTED_JUMP_FORWARD",
    [INSTRUMENTED_JUMP_BACKWARD] = "INSTRUMENTED_JUMP_BACKWARD",
    [INSTRUMENTED_POP_JUMP_IF_TRUE] = "INSTRUMENTED_POP_JUMP_IF_TRUE",
    [INSTRUMENTED_POP_JUMP_IF_FALSE] = "INSTRUMENTED_POP_JUMP_IF_FALSE",
    [INSTRUMENTED_POP_JUMP_IF_NONE] = "INSTRUMENTED_POP_JUMP_IF_NONE",
    [INSTRUMENTED_POP_JUMP_IF_NOT_NONE] = "INSTRUMENTED_POP_JUMP_IF_NOT_NONE",
    [INSTRUMENTED_LINE] = "INSTRUMENTED_LINE",
    [JUMP] = "JUMP",
    [JUMP_NO_INTERRUPT] = "JUMP_NO_INTERRUPT",
    [LOAD_CLOSURE] = "LOAD_CLOSURE",
    [LOAD_METHOD] = "LOAD_METHOD",
    [LOAD_SUPER_METHOD] = "LOAD_SUPER_METHOD",
    [LOAD_ZERO_SUPER_ATTR] = "LOAD_ZERO_SUPER_ATTR",
    [LOAD_ZERO_SUPER_METHOD] = "LOAD_ZERO_SUPER_METHOD",
    [POP_BLOCK] = "POP_BLOCK",
    [SETUP_CLEANUP] = "SETUP_CLEANUP",
    [SETUP_FINALLY] = "SETUP_FINALLY",
    [SETUP_WITH] = "SETUP_WITH",
    [STORE_FAST_MAYBE_NULL] = "STORE_FAST_MAYBE_NULL",
};
#endif // NEED_OPCODE_METADATA

extern const uint8_t _PyOpcode_Caches[256];
#ifdef NEED_OPCODE_METADATA
const uint8_t _PyOpcode_Caches[256] = {
    [POP_JUMP_IF_NONE] = 1,
    [POP_JUMP_IF_NOT_NONE] = 1,
    [TO_BOOL] = 3,
    [BINARY_SUBSCR] = 1,
    [STORE_SUBSCR] = 1,
    [SEND] = 1,
    [UNPACK_SEQUENCE] = 1,
    [STORE_ATTR] = 4,
    [LOAD_GLOBAL] = 4,
    [INSTRUMENTED_LOAD_SUPER_ATTR] = 9,
    [LOAD_SUPER_ATTR] = 1,
    [LOAD_ATTR] = 9,
    [COMPARE_OP] = 1,
    [POP_JUMP_IF_FALSE] = 1,
    [POP_JUMP_IF_TRUE] = 1,
    [FOR_ITER] = 1,
    [CALL] = 3,
    [BINARY_OP] = 1,
    [INSTRUMENTED_POP_JUMP_IF_TRUE] = 1,
    [INSTRUMENTED_POP_JUMP_IF_FALSE] = 1,
    [INSTRUMENTED_POP_JUMP_IF_NONE] = 1,
    [INSTRUMENTED_POP_JUMP_IF_NOT_NONE] = 1,
    [JUMP_BACKWARD] = 1,
};
#endif // NEED_OPCODE_METADATA

extern const uint8_t _PyOpcode_Deopt[256];
#ifdef NEED_OPCODE_METADATA
const uint8_t _PyOpcode_Deopt[256] = {
    [BEFORE_ASYNC_WITH] = BEFORE_ASYNC_WITH,
    [BEFORE_WITH] = BEFORE_WITH,
    [BINARY_OP] = BINARY_OP,
    [BINARY_OP_ADD_FLOAT] = BINARY_OP,
    [BINARY_OP_ADD_INT] = BINARY_OP,
    [BINARY_OP_ADD_UNICODE] = BINARY_OP,
    [BINARY_OP_INPLACE_ADD_UNICODE] = BINARY_OP,
    [BINARY_OP_MULTIPLY_FLOAT] = BINARY_OP,
    [BINARY_OP_MULTIPLY_INT] = BINARY_OP,
    [BINARY_OP_SUBTRACT_FLOAT] = BINARY_OP,
    [BINARY_OP_SUBTRACT_INT] = BINARY_OP,
    [BINARY_SLICE] = BINARY_SLICE,
    [BINARY_SUBSCR] = BINARY_SUBSCR,
    [BINARY_SUBSCR_DICT] = BINARY_SUBSCR,
    [BINARY_SUBSCR_GETITEM] = BINARY_SUBSCR,
    [BINARY_SUBSCR_LIST_INT] = BINARY_SUBSCR,
    [BINARY_SUBSCR_STR_INT] = BINARY_SUBSCR,
    [BINARY_SUBSCR_TUPLE_INT] = BINARY_SUBSCR,
    [BUILD_CONST_KEY_MAP] = BUILD_CONST_KEY_MAP,
    [BUILD_LIST] = BUILD_LIST,
    [BUILD_MAP] = BUILD_MAP,
    [BUILD_SET] = BUILD_SET,
    [BUILD_SLICE] = BUILD_SLICE,
    [BUILD_STRING] = BUILD_STRING,
    [BUILD_TUPLE] = BUILD_TUPLE,
    [CACHE] = CACHE,
    [CALL] = CALL,
    [CALL_ALLOC_AND_ENTER_INIT] = CALL,
    [CALL_BOUND_METHOD_EXACT_ARGS] = CALL,
    [CALL_BUILTIN_CLASS] = CALL,
    [CALL_BUILTIN_FAST] = CALL,
    [CALL_BUILTIN_FAST_WITH_KEYWORDS] = CALL,
    [CALL_BUILTIN_O] = CALL,
    [CALL_FUNCTION_EX] = CALL_FUNCTION_EX,
    [CALL_INTRINSIC_1] = CALL_INTRINSIC_1,
    [CALL_INTRINSIC_2] = CALL_INTRINSIC_2,
    [CALL_ISINSTANCE] = CALL,
    [CALL_KW] = CALL_KW,
    [CALL_LEN] = CALL,
    [CALL_LIST_APPEND] = CALL,
    [CALL_METHOD_DESCRIPTOR_FAST] = CALL,
    [CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = CALL,
    [CALL_METHOD_DESCRIPTOR_NOARGS] = CALL,
    [CALL_METHOD_DESCRIPTOR_O] = CALL,
    [CALL_PY_EXACT_ARGS] = CALL,
    [CALL_PY_WITH_DEFAULTS] = CALL,
    [CALL_STR_1] = CALL,
    [CALL_TUPLE_1] = CALL,
    [CALL_TYPE_1] = CALL,
    [CHECK_EG_MATCH] = CHECK_EG_MATCH,
    [CHECK_EXC_MATCH] = CHECK_EXC_MATCH,
    [CLEANUP_THROW] = CLEANUP_THROW,
    [COMPARE_OP] = COMPARE_OP,
    [COMPARE_OP_FLOAT] = COMPARE_OP,
    [COMPARE_OP_INT] = COMPARE_OP,
    [COMPARE_OP_STR] = COMPARE_OP,
    [CONTAINS_OP] = CONTAINS_OP,
    [CONVERT_VALUE] = CONVERT_VALUE,
    [COPY] = COPY,
    [COPY_FREE_VARS] = COPY_FREE_VARS,
    [DELETE_ATTR] = DELETE_ATTR,
    [DELETE_DEREF] = DELETE_DEREF,
    [DELETE_FAST] = DELETE_FAST,
    [DELETE_GLOBAL] = DELETE_GLOBAL,
    [DELETE_NAME] = DELETE_NAME,
    [DELETE_SUBSCR] = DELETE_SUBSCR,
    [DICT_MERGE] = DICT_MERGE,
    [DICT_UPDATE] = DICT_UPDATE,
    [END_ASYNC_FOR] = END_ASYNC_FOR,
    [END_FOR] = END_FOR,
    [END_SEND] = END_SEND,
    [ENTER_EXECUTOR] = ENTER_EXECUTOR,
    [EXIT_INIT_CHECK] = EXIT_INIT_CHECK,
    [EXTENDED_ARG] = EXTENDED_ARG,
    [FORMAT_SIMPLE] = FORMAT_SIMPLE,
    [FORMAT_WITH_SPEC] = FORMAT_WITH_SPEC,
    [FOR_ITER] = FOR_ITER,
    [FOR_ITER_GEN] = FOR_ITER,
    [FOR_ITER_LIST] = FOR_ITER,
    [FOR_ITER_RANGE] = FOR_ITER,
    [FOR_ITER_TUPLE] = FOR_ITER,
    [GET_AITER] = GET_AITER,
    [GET_ANEXT] = GET_ANEXT,
    [GET_AWAITABLE] = GET_AWAITABLE,
    [GET_ITER] = GET_ITER,
    [GET_LEN] = GET_LEN,
    [GET_YIELD_FROM_ITER] = GET_YIELD_FROM_ITER,
    [IMPORT_FROM] = IMPORT_FROM,
    [IMPORT_NAME] = IMPORT_NAME,
    [INSTRUMENTED_CALL] = INSTRUMENTED_CALL,
    [INSTRUMENTED_CALL_FUNCTION_EX] = INSTRUMENTED_CALL_FUNCTION_EX,
    [INSTRUMENTED_CALL_KW] = INSTRUMENTED_CALL_KW,
    [INSTRUMENTED_END_FOR] = INSTRUMENTED_END_FOR,
    [INSTRUMENTED_END_SEND] = INSTRUMENTED_END_SEND,
    [INSTRUMENTED_FOR_ITER] = INSTRUMENTED_FOR_ITER,
    [INSTRUMENTED_INSTRUCTION] = INSTRUMENTED_INSTRUCTION,
    [INSTRUMENTED_JUMP_BACKWARD] = INSTRUMENTED_JUMP_BACKWARD,
    [INSTRUMENTED_JUMP_FORWARD] = INSTRUMENTED_JUMP_FORWARD,
    [INSTRUMENTED_LINE] = INSTRUMENTED_LINE,
    [INSTRUMENTED_LOAD_SUPER_ATTR] = INSTRUMENTED_LOAD_SUPER_ATTR,
    [INSTRUMENTED_POP_JUMP_IF_FALSE] = INSTRUMENTED_POP_JUMP_IF_FALSE,
    [INSTRUMENTED_POP_JUMP_IF_NONE] = INSTRUMENTED_POP_JUMP_IF_NONE,
    [INSTRUMENTED_POP_JUMP_IF_NOT_NONE] = INSTRUMENTED_POP_JUMP_IF_NOT_NONE,
    [INSTRUMENTED_POP_JUMP_IF_TRUE] = INSTRUMENTED_POP_JUMP_IF_TRUE,
    [INSTRUMENTED_RESUME] = INSTRUMENTED_RESUME,
    [INSTRUMENTED_RETURN_CONST] = INSTRUMENTED_RETURN_CONST,
    [INSTRUMENTED_RETURN_VALUE] = INSTRUMENTED_RETURN_VALUE,
    [INSTRUMENTED_YIELD_VALUE] = INSTRUMENTED_YIELD_VALUE,
    [INTERPRETER_EXIT] = INTERPRETER_EXIT,
    [IS_OP] = IS_OP,
    [JUMP_BACKWARD] = JUMP_BACKWARD,
    [JUMP_BACKWARD_NO_INTERRUPT] = JUMP_BACKWARD_NO_INTERRUPT,
    [JUMP_FORWARD] = JUMP_FORWARD,
    [LIST_APPEND] = LIST_APPEND,
    [LIST_EXTEND] = LIST_EXTEND,
    [LOAD_ASSERTION_ERROR] = LOAD_ASSERTION_ERROR,
    [LOAD_ATTR] = LOAD_ATTR,
    [LOAD_ATTR_CLASS] = LOAD_ATTR,
    [LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN] = LOAD_ATTR,
    [LOAD_ATTR_INSTANCE_VALUE] = LOAD_ATTR,
    [LOAD_ATTR_METHOD_LAZY_DICT] = LOAD_ATTR,
    [LOAD_ATTR_METHOD_NO_DICT] = LOAD_ATTR,
    [LOAD_ATTR_METHOD_WITH_VALUES] = LOAD_ATTR,
    [LOAD_ATTR_MODULE] = LOAD_ATTR,
    [LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = LOAD_ATTR,
    [LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = LOAD_ATTR,
    [LOAD_ATTR_PROPERTY] = LOAD_ATTR,
    [LOAD_ATTR_SLOT] = LOAD_ATTR,
    [LOAD_ATTR_WITH_HINT] = LOAD_ATTR,
    [LOAD_BUILD_CLASS] = LOAD_BUILD_CLASS,
    [LOAD_CONST] = LOAD_CONST,
    [LOAD_DEREF] = LOAD_DEREF,
    [LOAD_FAST] = LOAD_FAST,
    [LOAD_FAST_AND_CLEAR] = LOAD_FAST_AND_CLEAR,
    [LOAD_FAST_CHECK] = LOAD_FAST_CHECK,
    [LOAD_FAST_LOAD_FAST] = LOAD_FAST_LOAD_FAST,
    [LOAD_FROM_DICT_OR_DEREF] = LOAD_FROM_DICT_OR_DEREF,
    [LOAD_FROM_DICT_OR_GLOBALS] = LOAD_FROM_DICT_OR_GLOBALS,
    [LOAD_GLOBAL] = LOAD_GLOBAL,
    [LOAD_GLOBAL_BUILTIN] = LOAD_GLOBAL,
    [LOAD_GLOBAL_MODULE] = LOAD_GLOBAL,
    [LOAD_LOCALS] = LOAD_LOCALS,
    [LOAD_NAME] = LOAD_NAME,
    [LOAD_SUPER_ATTR] = LOAD_SUPER_ATTR,
    [LOAD_SUPER_ATTR_ATTR] = LOAD_SUPER_ATTR,
    [LOAD_SUPER_ATTR_METHOD] = LOAD_SUPER_ATTR,
    [MAKE_CELL] = MAKE_CELL,
    [MAKE_FUNCTION] = MAKE_FUNCTION,
    [MAP_ADD] = MAP_ADD,
    [MATCH_CLASS] = MATCH_CLASS,
    [MATCH_KEYS] = MATCH_KEYS,
    [MATCH_MAPPING] = MATCH_MAPPING,
    [MATCH_SEQUENCE] = MATCH_SEQUENCE,
    [NOP] = NOP,
    [POP_EXCEPT] = POP_EXCEPT,
    [POP_JUMP_IF_FALSE] = POP_JUMP_IF_FALSE,
    [POP_JUMP_IF_NONE] = POP_JUMP_IF_NONE,
    [POP_JUMP_IF_NOT_NONE] = POP_JUMP_IF_NOT_NONE,
    [POP_JUMP_IF_TRUE] = POP_JUMP_IF_TRUE,
    [POP_TOP] = POP_TOP,
    [PUSH_EXC_INFO] = PUSH_EXC_INFO,
    [PUSH_NULL] = PUSH_NULL,
    [RAISE_VARARGS] = RAISE_VARARGS,
    [RERAISE] = RERAISE,
    [RESERVED] = RESERVED,
    [RESUME] = RESUME,
    [RESUME_CHECK] = RESUME,
    [RETURN_CONST] = RETURN_CONST,
    [RETURN_GENERATOR] = RETURN_GENERATOR,
    [RETURN_VALUE] = RETURN_VALUE,
    [SEND] = SEND,
    [SEND_GEN] = SEND,
    [SETUP_ANNOTATIONS] = SETUP_ANNOTATIONS,
    [SET_ADD] = SET_ADD,
    [SET_FUNCTION_ATTRIBUTE] = SET_FUNCTION_ATTRIBUTE,
    [SET_UPDATE] = SET_UPDATE,
    [STORE_ATTR] = STORE_ATTR,
    [STORE_ATTR_INSTANCE_VALUE] = STORE_ATTR,
    [STORE_ATTR_SLOT] = STORE_ATTR,
    [STORE_ATTR_WITH_HINT] = STORE_ATTR,
    [STORE_DEREF] = STORE_DEREF,
    [STORE_FAST] = STORE_FAST,
    [STORE_FAST_LOAD_FAST] = STORE_FAST_LOAD_FAST,
    [STORE_FAST_STORE_FAST] = STORE_FAST_STORE_FAST,
    [STORE_GLOBAL] = STORE_GLOBAL,
    [STORE_NAME] = STORE_NAME,
    [STORE_SLICE] = STORE_SLICE,
    [STORE_SUBSCR] = STORE_SUBSCR,
    [STORE_SUBSCR_DICT] = STORE_SUBSCR,
    [STORE_SUBSCR_LIST_INT] = STORE_SUBSCR,
    [SWAP] = SWAP,
    [TO_BOOL] = TO_BOOL,
    [TO_BOOL_ALWAYS_TRUE] = TO_BOOL,
    [TO_BOOL_BOOL] = TO_BOOL,
    [TO_BOOL_INT] = TO_BOOL,
    [TO_BOOL_LIST] = TO_BOOL,
    [TO_BOOL_NONE] = TO_BOOL,
    [TO_BOOL_STR] = TO_BOOL,
    [UNARY_INVERT] = UNARY_INVERT,
    [UNARY_NEGATIVE] = UNARY_NEGATIVE,
    [UNARY_NOT] = UNARY_NOT,
    [UNPACK_EX] = UNPACK_EX,
    [UNPACK_SEQUENCE] = UNPACK_SEQUENCE,
    [UNPACK_SEQUENCE_LIST] = UNPACK_SEQUENCE,
    [UNPACK_SEQUENCE_TUPLE] = UNPACK_SEQUENCE,
    [UNPACK_SEQUENCE_TWO_TUPLE] = UNPACK_SEQUENCE,
    [WITH_EXCEPT_START] = WITH_EXCEPT_START,
    [YIELD_VALUE] = YIELD_VALUE,
};
#endif // NEED_OPCODE_METADATA

#define EXTRA_CASES \
    case 119: \
    case 120: \
    case 121: \
    case 122: \
    case 123: \
    case 124: \
    case 125: \
    case 126: \
    case 127: \
    case 128: \
    case 129: \
    case 130: \
    case 131: \
    case 132: \
    case 133: \
    case 134: \
    case 135: \
    case 136: \
    case 137: \
    case 138: \
    case 139: \
    case 140: \
    case 141: \
    case 142: \
    case 143: \
    case 144: \
    case 145: \
    case 146: \
    case 147: \
    case 148: \
    case 219: \
    case 220: \
    case 221: \
    case 222: \
    case 223: \
    case 224: \
    case 225: \
    case 226: \
    case 227: \
    case 228: \
    case 229: \
    case 230: \
    case 231: \
    case 232: \
    case 233: \
    case 234: \
    case 235: \
    case 255: \
        ;

