// This file is generated by Tools/cases_generator/generate_cases.py @TODO: make this a seperate argument
// from:
//   Python/bytecodes.c
// Do not edit!

        TARGET(NOP) {
            break;
        }

        TARGET(RESUME) {
            break;
        }

        TARGET(RESUME_QUICK) {
            break;
        }

        TARGET(LOAD_CLOSURE) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, TYPELOCALS_GET(oparg));
            break;
        }

        TARGET(LOAD_FAST_CHECK) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, TYPELOCALS_GET(oparg));
            break;
        }

        TARGET(LOAD_FAST) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, TYPELOCALS_GET(oparg));
            break;
        }

        TARGET(LOAD_CONST) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, TYPECONST_GET(oparg));
            break;
        }

        TARGET(STORE_FAST) {
            PyTypeObject *value = TYPESTACK_PEEK(1);
            TYPELOCALS_SET(oparg, value)
            STACK_SHRINK(1);
            break;
        }

        TARGET(POP_TOP) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(PUSH_NULL) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(END_FOR) {
            {
                STACK_SHRINK(1);
            }
            {
                STACK_SHRINK(1);
            }
            break;
        }

        TARGET(UNARY_NEGATIVE) {
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(UNARY_NOT) {
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(UNARY_INVERT) {
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(BINARY_OP_MULTIPLY_INT) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, &PyLong_Type);
            break;
        }

        TARGET(BINARY_OP_MULTIPLY_FLOAT) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, &PyFloat_Type);
            break;
        }

        TARGET(BINARY_OP_SUBTRACT_INT) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, &PyLong_Type);
            break;
        }

        TARGET(BINARY_OP_SUBTRACT_FLOAT) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, &PyFloat_Type);
            break;
        }

        TARGET(BINARY_OP_ADD_UNICODE) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, &PyUnicode_Type);
            break;
        }

        TARGET(BINARY_OP_INPLACE_ADD_UNICODE) {
            STACK_SHRINK(2);
            break;
        }

        TARGET(BINARY_OP_ADD_FLOAT) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, &PyFloat_Type);
            break;
        }

        TARGET(BINARY_CHECK_FLOAT) {
            TYPESTACK_POKE(1, &PyRawFloat_Type);
            TYPESTACK_POKE(2, &PyRawFloat_Type);
            break;
        }

        TARGET(BINARY_OP_ADD_FLOAT_REST) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, &PyFloat_Type);
            break;
        }

        TARGET(BINARY_OP_ADD_INT) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, &PyLong_Type);
            break;
        }

        TARGET(BINARY_CHECK_INT) {
            TYPESTACK_POKE(1, &PyLong_Type);
            TYPESTACK_POKE(2, &PyLong_Type);
            break;
        }

        TARGET(BINARY_OP_ADD_INT_REST) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, &PyLong_Type);
            break;
        }

        TARGET(BINARY_SUBSCR) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(BINARY_SLICE) {
            STACK_SHRINK(2);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(STORE_SLICE) {
            STACK_SHRINK(4);
            break;
        }

        TARGET(BINARY_SUBSCR_LIST_INT) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(BINARY_SUBSCR_TUPLE_INT) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(BINARY_SUBSCR_DICT) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(BINARY_SUBSCR_GETITEM) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(LIST_APPEND) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(SET_ADD) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(STORE_SUBSCR) {
            STACK_SHRINK(3);
            break;
        }

        TARGET(STORE_SUBSCR_LIST_INT) {
            STACK_SHRINK(3);
            break;
        }

        TARGET(STORE_SUBSCR_DICT) {
            STACK_SHRINK(3);
            break;
        }

        TARGET(DELETE_SUBSCR) {
            STACK_SHRINK(2);
            break;
        }

        TARGET(CALL_INTRINSIC_1) {
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(CALL_INTRINSIC_2) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(RAISE_VARARGS) {
            fprintf(stderr, "Type propagation across `RAISE_VARARGS` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(INTERPRETER_EXIT) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(RETURN_VALUE) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(RETURN_CONST) {
            break;
        }

        TARGET(GET_AITER) {
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(GET_ANEXT) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(GET_AWAITABLE) {
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(SEND) {
            fprintf(stderr, "Type propagation across `SEND` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(SEND_GEN) {
            fprintf(stderr, "Type propagation across `SEND_GEN` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(YIELD_VALUE) {
            fprintf(stderr, "Type propagation across `YIELD_VALUE` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(POP_EXCEPT) {
            fprintf(stderr, "Type propagation across `POP_EXCEPT` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(RERAISE) {
            fprintf(stderr, "Type propagation across `RERAISE` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(END_ASYNC_FOR) {
            STACK_SHRINK(2);
            break;
        }

        TARGET(CLEANUP_THROW) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            TYPESTACK_POKE(2, NULL);
            break;
        }

        TARGET(LOAD_ASSERTION_ERROR) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(LOAD_BUILD_CLASS) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(STORE_NAME) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(DELETE_NAME) {
            break;
        }

        TARGET(UNPACK_SEQUENCE) {
            STACK_SHRINK(1);
            STACK_GROW(oparg);
            break;
        }

        TARGET(UNPACK_SEQUENCE_TWO_TUPLE) {
            STACK_SHRINK(1);
            STACK_GROW(oparg);
            TYPESTACK_POKE(oparg, NULL);
            break;
        }

        TARGET(UNPACK_SEQUENCE_TUPLE) {
            STACK_SHRINK(1);
            STACK_GROW(oparg);
            TYPESTACK_POKE(oparg, NULL);
            break;
        }

        TARGET(UNPACK_SEQUENCE_LIST) {
            STACK_SHRINK(1);
            STACK_GROW(oparg);
            TYPESTACK_POKE(oparg, NULL);
            break;
        }

        TARGET(UNPACK_EX) {
            STACK_GROW((oparg & 0xFF) + (oparg >> 8));
            break;
        }

        TARGET(STORE_ATTR) {
            STACK_SHRINK(2);
            break;
        }

        TARGET(DELETE_ATTR) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(STORE_GLOBAL) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(DELETE_GLOBAL) {
            break;
        }

        TARGET(LOAD_NAME) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(LOAD_GLOBAL) {
            STACK_GROW(1);
            STACK_GROW(((oparg & 1) ? 1 : 0));
            TYPESTACK_POKE(1, NULL);
            if (oparg & 1) { TYPESTACK_POKE(1 + ((oparg & 1) ? 1 : 0), NULL); }
            break;
        }

        TARGET(LOAD_GLOBAL_MODULE) {
            STACK_GROW(1);
            STACK_GROW(((oparg & 1) ? 1 : 0));
            TYPESTACK_POKE(1, NULL);
            if (oparg & 1) { TYPESTACK_POKE(1 + ((oparg & 1) ? 1 : 0), NULL); }
            break;
        }

        TARGET(LOAD_GLOBAL_BUILTIN) {
            STACK_GROW(1);
            STACK_GROW(((oparg & 1) ? 1 : 0));
            TYPESTACK_POKE(1, NULL);
            if (oparg & 1) { TYPESTACK_POKE(1 + ((oparg & 1) ? 1 : 0), NULL); }
            break;
        }

        TARGET(DELETE_FAST) {
            fprintf(stderr, "Type propagation across `DELETE_FAST` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(MAKE_CELL) {
            fprintf(stderr, "Type propagation across `MAKE_CELL` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(DELETE_DEREF) {
            break;
        }

        TARGET(LOAD_CLASSDEREF) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(LOAD_DEREF) {
            fprintf(stderr, "Type propagation across `LOAD_DEREF` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(STORE_DEREF) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(COPY_FREE_VARS) {
            break;
        }

        TARGET(BUILD_STRING) {
            STACK_SHRINK(oparg);
            STACK_GROW(1);
            TYPESTACK_POKE(1, &PyUnicode_Type);
            break;
        }

        TARGET(BUILD_TUPLE) {
            STACK_SHRINK(oparg);
            STACK_GROW(1);
            TYPESTACK_POKE(1, &PyTuple_Type);
            break;
        }

        TARGET(BUILD_LIST) {
            STACK_SHRINK(oparg);
            STACK_GROW(1);
            TYPESTACK_POKE(1, &PyList_Type);
            break;
        }

        TARGET(LIST_EXTEND) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(SET_UPDATE) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(BUILD_SET) {
            STACK_SHRINK(oparg);
            STACK_GROW(1);
            TYPESTACK_POKE(1, &PySet_Type);
            break;
        }

        TARGET(BUILD_MAP) {
            STACK_SHRINK(oparg*2);
            STACK_GROW(1);
            TYPESTACK_POKE(1, &PyDict_Type);
            break;
        }

        TARGET(SETUP_ANNOTATIONS) {
            break;
        }

        TARGET(BUILD_CONST_KEY_MAP) {
            STACK_SHRINK(oparg);
            TYPESTACK_POKE(1, &PyDict_Type);
            break;
        }

        TARGET(DICT_UPDATE) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(DICT_MERGE) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(MAP_ADD) {
            STACK_SHRINK(2);
            break;
        }

        TARGET(LOAD_ATTR) {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            TYPESTACK_POKE(1, NULL);
            if (oparg & 1) { TYPESTACK_POKE(1 + ((oparg & 1) ? 1 : 0), NULL); }
            break;
        }

        TARGET(LOAD_ATTR_INSTANCE_VALUE) {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            TYPESTACK_POKE(1, NULL);
            if (oparg & 1) { TYPESTACK_POKE(1 + ((oparg & 1) ? 1 : 0), NULL); }
            break;
        }

        TARGET(LOAD_ATTR_MODULE) {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            TYPESTACK_POKE(1, NULL);
            if (oparg & 1) { TYPESTACK_POKE(1 + ((oparg & 1) ? 1 : 0), NULL); }
            break;
        }

        TARGET(LOAD_ATTR_WITH_HINT) {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            TYPESTACK_POKE(1, NULL);
            if (oparg & 1) { TYPESTACK_POKE(1 + ((oparg & 1) ? 1 : 0), NULL); }
            break;
        }

        TARGET(LOAD_ATTR_SLOT) {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            TYPESTACK_POKE(1, NULL);
            if (oparg & 1) { TYPESTACK_POKE(1 + ((oparg & 1) ? 1 : 0), NULL); }
            break;
        }

        TARGET(LOAD_ATTR_CLASS) {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            TYPESTACK_POKE(1, NULL);
            if (oparg & 1) { TYPESTACK_POKE(1 + ((oparg & 1) ? 1 : 0), NULL); }
            break;
        }

        TARGET(LOAD_ATTR_PROPERTY) {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            break;
        }

        TARGET(LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN) {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            break;
        }

        TARGET(STORE_ATTR_INSTANCE_VALUE) {
            STACK_SHRINK(2);
            break;
        }

        TARGET(STORE_ATTR_WITH_HINT) {
            STACK_SHRINK(2);
            break;
        }

        TARGET(STORE_ATTR_SLOT) {
            STACK_SHRINK(2);
            break;
        }

        TARGET(COMPARE_OP) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(COMPARE_AND_BRANCH) {
            STACK_SHRINK(2);
            break;
        }

        TARGET(COMPARE_AND_BRANCH_FLOAT) {
            STACK_SHRINK(2);
            break;
        }

        TARGET(COMPARE_AND_BRANCH_INT) {
            STACK_SHRINK(2);
            break;
        }

        TARGET(COMPARE_AND_BRANCH_STR) {
            STACK_SHRINK(2);
            break;
        }

        TARGET(IS_OP) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, &PyBool_Type);
            break;
        }

        TARGET(CONTAINS_OP) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, &PyBool_Type);
            break;
        }

        TARGET(CHECK_EG_MATCH) {
            TYPESTACK_POKE(1, NULL);
            TYPESTACK_POKE(2, NULL);
            break;
        }

        TARGET(CHECK_EXC_MATCH) {
            TYPESTACK_POKE(1, &PyBool_Type);
            break;
        }

        TARGET(IMPORT_NAME) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(IMPORT_FROM) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(JUMP_FORWARD) {
            break;
        }

        TARGET(JUMP_BACKWARD) {
            break;
        }

        TARGET(JUMP_BACKWARD_QUICK) {
            break;
        }

        TARGET(POP_JUMP_IF_FALSE) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(BB_TEST_POP_IF_FALSE) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(POP_JUMP_IF_TRUE) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(BB_TEST_POP_IF_TRUE) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(POP_JUMP_IF_NOT_NONE) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(BB_TEST_POP_IF_NOT_NONE) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(POP_JUMP_IF_NONE) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(BB_TEST_POP_IF_NONE) {
            STACK_SHRINK(1);
            break;
        }

        TARGET(JUMP_IF_FALSE_OR_POP) {
            fprintf(stderr, "Type propagation across `JUMP_IF_FALSE_OR_POP` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(BB_TEST_IF_FALSE_OR_POP) {
            fprintf(stderr, "Type propagation across `BB_TEST_IF_FALSE_OR_POP` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(JUMP_IF_TRUE_OR_POP) {
            fprintf(stderr, "Type propagation across `JUMP_IF_TRUE_OR_POP` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(BB_TEST_IF_TRUE_OR_POP) {
            fprintf(stderr, "Type propagation across `BB_TEST_IF_TRUE_OR_POP` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(JUMP_BACKWARD_NO_INTERRUPT) {
            break;
        }

        TARGET(GET_LEN) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, &PyLong_Type);
            break;
        }

        TARGET(MATCH_CLASS) {
            STACK_SHRINK(2);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(MATCH_MAPPING) {
            fprintf(stderr, "Type propagation across `MATCH_MAPPING` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(MATCH_SEQUENCE) {
            fprintf(stderr, "Type propagation across `MATCH_SEQUENCE` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(MATCH_KEYS) {
            fprintf(stderr, "Type propagation across `MATCH_KEYS` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(GET_ITER) {
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(GET_YIELD_FROM_ITER) {
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(FOR_ITER) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(BB_TEST_ITER) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(FOR_ITER_LIST) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(FOR_ITER_TUPLE) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(FOR_ITER_RANGE) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(FOR_ITER_GEN) {
            STACK_GROW(1);
            break;
        }

        TARGET(BEFORE_ASYNC_WITH) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, NULL);
            TYPESTACK_POKE(2, NULL);
            break;
        }

        TARGET(BEFORE_WITH) {
            STACK_GROW(1);
            TYPESTACK_POKE(1, NULL);
            TYPESTACK_POKE(2, NULL);
            break;
        }

        TARGET(WITH_EXCEPT_START) {
            fprintf(stderr, "Type propagation across `WITH_EXCEPT_START` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(PUSH_EXC_INFO) {
            fprintf(stderr, "Type propagation across `PUSH_EXC_INFO` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(LOAD_ATTR_METHOD_WITH_VALUES) {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            TYPESTACK_POKE(1, NULL);
            if (oparg & 1) { TYPESTACK_POKE(1 + ((oparg & 1) ? 1 : 0), NULL); }
            break;
        }

        TARGET(LOAD_ATTR_METHOD_NO_DICT) {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            TYPESTACK_POKE(1, NULL);
            if (oparg & 1) { TYPESTACK_POKE(1 + ((oparg & 1) ? 1 : 0), NULL); }
            break;
        }

        TARGET(LOAD_ATTR_METHOD_LAZY_DICT) {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            TYPESTACK_POKE(1, NULL);
            if (oparg & 1) { TYPESTACK_POKE(1 + ((oparg & 1) ? 1 : 0), NULL); }
            break;
        }

        TARGET(KW_NAMES) {
            break;
        }

        TARGET(CALL) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(CALL_BOUND_METHOD_EXACT_ARGS) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            break;
        }

        TARGET(CALL_PY_EXACT_ARGS) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            break;
        }

        TARGET(CALL_PY_WITH_DEFAULTS) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            break;
        }

        TARGET(CALL_NO_KW_TYPE_1) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(CALL_NO_KW_STR_1) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(CALL_NO_KW_TUPLE_1) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(CALL_BUILTIN_CLASS) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(CALL_NO_KW_BUILTIN_O) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(CALL_NO_KW_BUILTIN_FAST) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(CALL_BUILTIN_FAST_WITH_KEYWORDS) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(CALL_NO_KW_LEN) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(CALL_NO_KW_ISINSTANCE) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(CALL_NO_KW_LIST_APPEND) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            break;
        }

        TARGET(CALL_NO_KW_METHOD_DESCRIPTOR_O) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(CALL_NO_KW_METHOD_DESCRIPTOR_NOARGS) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(CALL_NO_KW_METHOD_DESCRIPTOR_FAST) {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(CALL_FUNCTION_EX) {
            STACK_SHRINK(((oparg & 1) ? 1 : 0));
            STACK_SHRINK(2);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(MAKE_FUNCTION) {
            STACK_SHRINK(((oparg & 0x01) ? 1 : 0) + ((oparg & 0x02) ? 1 : 0) + ((oparg & 0x04) ? 1 : 0) + ((oparg & 0x08) ? 1 : 0));
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(RETURN_GENERATOR) {
            break;
        }

        TARGET(BUILD_SLICE) {
            STACK_SHRINK(((oparg == 3) ? 1 : 0));
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(FORMAT_VALUE) {
            STACK_SHRINK((((oparg & FVS_MASK) == FVS_HAVE_SPEC) ? 1 : 0));
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(COPY) {
            PyTypeObject *bottom = TYPESTACK_PEEK(1 + (oparg-1));
            STACK_GROW(1);
            TYPESTACK_POKE(1, bottom);
            break;
        }

        TARGET(BINARY_OP) {
            STACK_SHRINK(1);
            TYPESTACK_POKE(1, NULL);
            break;
        }

        TARGET(SWAP) {
            PyTypeObject *top = TYPESTACK_PEEK(1);
            PyTypeObject *bottom = TYPESTACK_PEEK(2 + (oparg-2));
            TYPESTACK_POKE(1, bottom);
            TYPESTACK_POKE(2 + (oparg-2), top);
            break;
        }

        TARGET(EXTENDED_ARG) {
            fprintf(stderr, "Type propagation across `EXTENDED_ARG` shouldn't be handled statically!\n");
            Py_UNREACHABLE();
            break;
        }

        TARGET(CACHE) {
            break;
        }

        TARGET(BB_BRANCH) {
            break;
        }

        TARGET(BB_BRANCH_IF_FLAG_UNSET) {
            break;
        }

        TARGET(BB_JUMP_IF_FLAG_UNSET) {
            break;
        }

        TARGET(BB_BRANCH_IF_FLAG_SET) {
            break;
        }

        TARGET(BB_JUMP_IF_FLAG_SET) {
            break;
        }

        TARGET(BB_JUMP_BACKWARD_LAZY) {
            break;
        }
