// This file is generated by Tools/cases_generator/generate_cases.py
// from:
//   Python/bytecodes.c
// Do not edit!

        case NOP: {
            break;
        }

        case RESUME: {
            break;
        }

        case INSTRUMENTED_RESUME: {
            break;
        }

        case LOAD_FAST_CHECK: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_FAST: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_FAST_AND_CLEAR: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_FAST_LOAD_FAST: {
            STACK_GROW(2);
            stack_pointer[-2] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_CONST: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case STORE_FAST: {
            STACK_SHRINK(1);
            break;
        }

        case STORE_FAST_LOAD_FAST: {
            stack_pointer[-1] = NULL;
            break;
        }

        case STORE_FAST_STORE_FAST: {
            STACK_SHRINK(2);
            break;
        }

        case POP_TOP: {
            STACK_SHRINK(1);
            break;
        }

        case PUSH_NULL: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case INSTRUMENTED_END_FOR: {
            STACK_SHRINK(2);
            break;
        }

        case END_SEND: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case INSTRUMENTED_END_SEND: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case UNARY_NEGATIVE: {
            stack_pointer[-1] = NULL;
            break;
        }

        case UNARY_NOT: {
            stack_pointer[-1] = NULL;
            break;
        }

        case TO_BOOL: {
            stack_pointer[-1] = NULL;
            break;
        }

        case TO_BOOL_BOOL: {
            break;
        }

        case TO_BOOL_INT: {
            stack_pointer[-1] = NULL;
            break;
        }

        case TO_BOOL_LIST: {
            stack_pointer[-1] = NULL;
            break;
        }

        case TO_BOOL_NONE: {
            stack_pointer[-1] = NULL;
            break;
        }

        case TO_BOOL_STR: {
            stack_pointer[-1] = NULL;
            break;
        }

        case TO_BOOL_ALWAYS_TRUE: {
            stack_pointer[-1] = NULL;
            break;
        }

        case UNARY_INVERT: {
            stack_pointer[-1] = NULL;
            break;
        }

        case _GUARD_BOTH_INT: {
            break;
        }

        case _BINARY_OP_MULTIPLY_INT: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case _BINARY_OP_ADD_INT: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case _BINARY_OP_SUBTRACT_INT: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case _GUARD_BOTH_FLOAT: {
            break;
        }

        case _BINARY_OP_MULTIPLY_FLOAT: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case _BINARY_OP_ADD_FLOAT: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case _BINARY_OP_SUBTRACT_FLOAT: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case _GUARD_BOTH_UNICODE: {
            break;
        }

        case _BINARY_OP_ADD_UNICODE: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case _BINARY_OP_INPLACE_ADD_UNICODE: {
            STACK_SHRINK(2);
            break;
        }

        case BINARY_SUBSCR: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case BINARY_SLICE: {
            STACK_SHRINK(2);
            stack_pointer[-1] = NULL;
            break;
        }

        case STORE_SLICE: {
            STACK_SHRINK(4);
            break;
        }

        case BINARY_SUBSCR_LIST_INT: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case BINARY_SUBSCR_TUPLE_INT: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case BINARY_SUBSCR_DICT: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case BINARY_SUBSCR_GETITEM: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case LIST_APPEND: {
            STACK_SHRINK(1);
            break;
        }

        case SET_ADD: {
            STACK_SHRINK(1);
            break;
        }

        case STORE_SUBSCR: {
            STACK_SHRINK(3);
            break;
        }

        case STORE_SUBSCR_LIST_INT: {
            STACK_SHRINK(3);
            break;
        }

        case STORE_SUBSCR_DICT: {
            STACK_SHRINK(3);
            break;
        }

        case DELETE_SUBSCR: {
            STACK_SHRINK(2);
            break;
        }

        case CALL_INTRINSIC_1: {
            stack_pointer[-1] = NULL;
            break;
        }

        case CALL_INTRINSIC_2: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case RAISE_VARARGS: {
            STACK_SHRINK(oparg);
            break;
        }

        case INTERPRETER_EXIT: {
            STACK_SHRINK(1);
            break;
        }

        case RETURN_VALUE: {
            STACK_SHRINK(1);
            break;
        }

        case INSTRUMENTED_RETURN_VALUE: {
            STACK_SHRINK(1);
            break;
        }

        case RETURN_CONST: {
            break;
        }

        case INSTRUMENTED_RETURN_CONST: {
            break;
        }

        case GET_AITER: {
            stack_pointer[-1] = NULL;
            break;
        }

        case GET_ANEXT: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case GET_AWAITABLE: {
            stack_pointer[-1] = NULL;
            break;
        }

        case SEND: {
            stack_pointer[-1] = NULL;
            break;
        }

        case SEND_GEN: {
            stack_pointer[-1] = NULL;
            break;
        }

        case INSTRUMENTED_YIELD_VALUE: {
            stack_pointer[-1] = NULL;
            break;
        }

        case YIELD_VALUE: {
            stack_pointer[-1] = NULL;
            break;
        }

        case POP_EXCEPT: {
            STACK_SHRINK(1);
            break;
        }

        case RERAISE: {
            STACK_SHRINK(1);
            break;
        }

        case END_ASYNC_FOR: {
            STACK_SHRINK(2);
            break;
        }

        case CLEANUP_THROW: {
            STACK_SHRINK(1);
            stack_pointer[-2] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_ASSERTION_ERROR: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_BUILD_CLASS: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case STORE_NAME: {
            STACK_SHRINK(1);
            break;
        }

        case DELETE_NAME: {
            break;
        }

        case UNPACK_SEQUENCE: {
            STACK_SHRINK(1);
            STACK_GROW(oparg);
            break;
        }

        case UNPACK_SEQUENCE_TWO_TUPLE: {
            STACK_SHRINK(1);
            STACK_GROW(oparg);
            break;
        }

        case UNPACK_SEQUENCE_TUPLE: {
            STACK_SHRINK(1);
            STACK_GROW(oparg);
            break;
        }

        case UNPACK_SEQUENCE_LIST: {
            STACK_SHRINK(1);
            STACK_GROW(oparg);
            break;
        }

        case UNPACK_EX: {
            STACK_GROW((oparg & 0xFF) + (oparg >> 8));
            stack_pointer[-1 - (oparg >> 8)] = NULL;
            break;
        }

        case STORE_ATTR: {
            STACK_SHRINK(2);
            break;
        }

        case DELETE_ATTR: {
            STACK_SHRINK(1);
            break;
        }

        case STORE_GLOBAL: {
            STACK_SHRINK(1);
            break;
        }

        case DELETE_GLOBAL: {
            break;
        }

        case _LOAD_LOCALS: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case _LOAD_FROM_DICT_OR_GLOBALS: {
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_GLOBAL: {
            STACK_GROW(1);
            STACK_GROW(((oparg & 1) ? 1 : 0));
            stack_pointer[-1 - (oparg & 1 ? 1 : 0)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case _GUARD_GLOBALS_VERSION: {
            break;
        }

        case _GUARD_BUILTINS_VERSION: {
            break;
        }

        case _LOAD_GLOBAL_MODULE: {
            STACK_GROW(1);
            STACK_GROW(((oparg & 1) ? 1 : 0));
            stack_pointer[-1 - (oparg & 1 ? 1 : 0)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case _LOAD_GLOBAL_BUILTINS: {
            STACK_GROW(1);
            STACK_GROW(((oparg & 1) ? 1 : 0));
            stack_pointer[-1 - (oparg & 1 ? 1 : 0)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case DELETE_FAST: {
            break;
        }

        case MAKE_CELL: {
            break;
        }

        case DELETE_DEREF: {
            break;
        }

        case LOAD_FROM_DICT_OR_DEREF: {
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_DEREF: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case STORE_DEREF: {
            STACK_SHRINK(1);
            break;
        }

        case COPY_FREE_VARS: {
            break;
        }

        case BUILD_STRING: {
            STACK_SHRINK(oparg);
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case BUILD_TUPLE: {
            STACK_SHRINK(oparg);
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case BUILD_LIST: {
            STACK_SHRINK(oparg);
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case LIST_EXTEND: {
            STACK_SHRINK(1);
            break;
        }

        case SET_UPDATE: {
            STACK_SHRINK(1);
            break;
        }

        case BUILD_SET: {
            STACK_SHRINK(oparg);
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case BUILD_MAP: {
            STACK_SHRINK(oparg*2);
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case SETUP_ANNOTATIONS: {
            break;
        }

        case BUILD_CONST_KEY_MAP: {
            STACK_SHRINK(oparg);
            stack_pointer[-1] = NULL;
            break;
        }

        case DICT_UPDATE: {
            STACK_SHRINK(1);
            break;
        }

        case DICT_MERGE: {
            STACK_SHRINK(1);
            break;
        }

        case MAP_ADD: {
            STACK_SHRINK(2);
            break;
        }

        case INSTRUMENTED_LOAD_SUPER_ATTR: {
            STACK_SHRINK(2);
            STACK_GROW(((oparg & 1) ? 1 : 0));
            stack_pointer[-1 - (oparg & 1 ? 1 : 0)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_SUPER_ATTR: {
            STACK_SHRINK(2);
            STACK_GROW(((oparg & 1) ? 1 : 0));
            stack_pointer[-1 - (oparg & 1 ? 1 : 0)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_SUPER_ATTR_ATTR: {
            STACK_SHRINK(2);
            STACK_GROW(((oparg & 1) ? 1 : 0));
            stack_pointer[-1 - (oparg & 1 ? 1 : 0)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_SUPER_ATTR_METHOD: {
            STACK_SHRINK(1);
            stack_pointer[-2] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_ATTR: {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            stack_pointer[-1 - (oparg & 1 ? 1 : 0)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case _GUARD_TYPE_VERSION: {
            break;
        }

        case _CHECK_MANAGED_OBJECT_HAS_VALUES: {
            break;
        }

        case _LOAD_ATTR_INSTANCE_VALUE: {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            stack_pointer[-1 - (oparg & 1 ? 1 : 0)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_ATTR_MODULE: {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            stack_pointer[-1 - (oparg & 1 ? 1 : 0)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_ATTR_WITH_HINT: {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            stack_pointer[-1 - (oparg & 1 ? 1 : 0)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_ATTR_SLOT: {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            stack_pointer[-1 - (oparg & 1 ? 1 : 0)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_ATTR_CLASS: {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            stack_pointer[-1 - (oparg & 1 ? 1 : 0)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_ATTR_PROPERTY: {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            stack_pointer[-1 - (oparg & 1 ? 1 : 0)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN: {
            STACK_GROW(((oparg & 1) ? 1 : 0));
            stack_pointer[-1 - (oparg & 1 ? 1 : 0)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case STORE_ATTR_INSTANCE_VALUE: {
            STACK_SHRINK(2);
            break;
        }

        case STORE_ATTR_WITH_HINT: {
            STACK_SHRINK(2);
            break;
        }

        case STORE_ATTR_SLOT: {
            STACK_SHRINK(2);
            break;
        }

        case COMPARE_OP: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case COMPARE_OP_FLOAT: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case COMPARE_OP_INT: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case COMPARE_OP_STR: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case IS_OP: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case CONTAINS_OP: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case CHECK_EG_MATCH: {
            stack_pointer[-2] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case CHECK_EXC_MATCH: {
            stack_pointer[-1] = NULL;
            break;
        }

        case IMPORT_NAME: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case IMPORT_FROM: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case JUMP_FORWARD: {
            break;
        }

        case JUMP_BACKWARD: {
            break;
        }

        case ENTER_EXECUTOR: {
            break;
        }

        case POP_JUMP_IF_FALSE: {
            STACK_SHRINK(1);
            break;
        }

        case POP_JUMP_IF_TRUE: {
            STACK_SHRINK(1);
            break;
        }

        case IS_NONE: {
            stack_pointer[-1] = NULL;
            break;
        }

        case JUMP_BACKWARD_NO_INTERRUPT: {
            break;
        }

        case GET_LEN: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case MATCH_CLASS: {
            STACK_SHRINK(2);
            stack_pointer[-1] = NULL;
            break;
        }

        case MATCH_MAPPING: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case MATCH_SEQUENCE: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case MATCH_KEYS: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case GET_ITER: {
            stack_pointer[-1] = NULL;
            break;
        }

        case GET_YIELD_FROM_ITER: {
            stack_pointer[-1] = NULL;
            break;
        }

        case FOR_ITER: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case INSTRUMENTED_FOR_ITER: {
            break;
        }

        case _ITER_CHECK_LIST: {
            break;
        }

        case _ITER_JUMP_LIST: {
            break;
        }

        case _IS_ITER_EXHAUSTED_LIST: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case _ITER_NEXT_LIST: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case _ITER_CHECK_TUPLE: {
            break;
        }

        case _ITER_JUMP_TUPLE: {
            break;
        }

        case _IS_ITER_EXHAUSTED_TUPLE: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case _ITER_NEXT_TUPLE: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case _ITER_CHECK_RANGE: {
            break;
        }

        case _ITER_JUMP_RANGE: {
            break;
        }

        case _IS_ITER_EXHAUSTED_RANGE: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case _ITER_NEXT_RANGE: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case FOR_ITER_GEN: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case BEFORE_ASYNC_WITH: {
            STACK_GROW(1);
            stack_pointer[-2] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case BEFORE_WITH: {
            STACK_GROW(1);
            stack_pointer[-2] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case WITH_EXCEPT_START: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case PUSH_EXC_INFO: {
            STACK_GROW(1);
            stack_pointer[-2] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_ATTR_METHOD_WITH_VALUES: {
            STACK_GROW(1);
            stack_pointer[-2] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_ATTR_METHOD_NO_DICT: {
            STACK_GROW(1);
            stack_pointer[-2] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES: {
            stack_pointer[-1 - (0 ? 1 : 0)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_ATTR_NONDESCRIPTOR_NO_DICT: {
            stack_pointer[-1 - (0 ? 1 : 0)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case LOAD_ATTR_METHOD_LAZY_DICT: {
            STACK_GROW(1);
            stack_pointer[-2] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case KW_NAMES: {
            break;
        }

        case INSTRUMENTED_CALL: {
            break;
        }

        case CALL: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            CHECK_EVAL_BREAKER();
            break;
        }

        case CALL_BOUND_METHOD_EXACT_ARGS: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case CALL_PY_EXACT_ARGS: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case CALL_PY_WITH_DEFAULTS: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case CALL_NO_KW_TYPE_1: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case CALL_NO_KW_STR_1: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            CHECK_EVAL_BREAKER();
            break;
        }

        case CALL_NO_KW_TUPLE_1: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            CHECK_EVAL_BREAKER();
            break;
        }

        case CALL_NO_KW_ALLOC_AND_ENTER_INIT: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case EXIT_INIT_CHECK: {
            STACK_SHRINK(1);
            break;
        }

        case CALL_BUILTIN_CLASS: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            CHECK_EVAL_BREAKER();
            break;
        }

        case CALL_NO_KW_BUILTIN_O: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            CHECK_EVAL_BREAKER();
            break;
        }

        case CALL_NO_KW_BUILTIN_FAST: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            CHECK_EVAL_BREAKER();
            break;
        }

        case CALL_BUILTIN_FAST_WITH_KEYWORDS: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            CHECK_EVAL_BREAKER();
            break;
        }

        case CALL_NO_KW_LEN: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case CALL_NO_KW_ISINSTANCE: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case CALL_NO_KW_LIST_APPEND: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case CALL_NO_KW_METHOD_DESCRIPTOR_O: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            CHECK_EVAL_BREAKER();
            break;
        }

        case CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            CHECK_EVAL_BREAKER();
            break;
        }

        case CALL_NO_KW_METHOD_DESCRIPTOR_NOARGS: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            CHECK_EVAL_BREAKER();
            break;
        }

        case CALL_NO_KW_METHOD_DESCRIPTOR_FAST: {
            STACK_SHRINK(oparg);
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            CHECK_EVAL_BREAKER();
            break;
        }

        case INSTRUMENTED_CALL_FUNCTION_EX: {
            break;
        }

        case CALL_FUNCTION_EX: {
            STACK_SHRINK(((oparg & 1) ? 1 : 0));
            STACK_SHRINK(2);
            stack_pointer[-1] = NULL;
            CHECK_EVAL_BREAKER();
            break;
        }

        case MAKE_FUNCTION: {
            stack_pointer[-1] = NULL;
            break;
        }

        case SET_FUNCTION_ATTRIBUTE: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case RETURN_GENERATOR: {
            break;
        }

        case BUILD_SLICE: {
            STACK_SHRINK(((oparg == 3) ? 1 : 0));
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case CONVERT_VALUE: {
            stack_pointer[-1] = NULL;
            break;
        }

        case FORMAT_SIMPLE: {
            stack_pointer[-1] = NULL;
            break;
        }

        case FORMAT_WITH_SPEC: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case COPY: {
            STACK_GROW(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case BINARY_OP: {
            STACK_SHRINK(1);
            stack_pointer[-1] = NULL;
            break;
        }

        case SWAP: {
            stack_pointer[-2 - (oparg-2)] = NULL;
            stack_pointer[-1] = NULL;
            break;
        }

        case INSTRUMENTED_INSTRUCTION: {
            break;
        }

        case INSTRUMENTED_JUMP_FORWARD: {
            break;
        }

        case INSTRUMENTED_JUMP_BACKWARD: {
            break;
        }

        case INSTRUMENTED_POP_JUMP_IF_TRUE: {
            break;
        }

        case INSTRUMENTED_POP_JUMP_IF_FALSE: {
            break;
        }

        case INSTRUMENTED_POP_JUMP_IF_NONE: {
            break;
        }

        case INSTRUMENTED_POP_JUMP_IF_NOT_NONE: {
            break;
        }

        case EXTENDED_ARG: {
            break;
        }

        case CACHE: {
            break;
        }

        case RESERVED: {
            break;
        }

        case _POP_JUMP_IF_FALSE: {
            STACK_SHRINK(1);
            break;
        }

        case _POP_JUMP_IF_TRUE: {
            STACK_SHRINK(1);
            break;
        }

        case JUMP_TO_TOP: {
            CHECK_EVAL_BREAKER();
            break;
        }

        case SAVE_IP: {
            break;
        }

        case EXIT_TRACE: {
            break;
        }
