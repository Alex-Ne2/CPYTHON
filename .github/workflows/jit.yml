name: JIT
on:
  pull_request:
    paths:
      - '**jit**'
      - 'Python/bytecodes.c'
      - 'Python/optimizer*.c'
      - '!Python/perf_jit_trampoline.c'
      - '!**/*.md'
      - '!**/*.ini'
  push:
    paths:
      - '**jit**'
      - 'Python/bytecodes.c'
      - 'Python/optimizer*.c'
      - '!Python/perf_jit_trampoline.c'
      - '!**/*.md'
      - '!**/*.ini'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1

jobs:
  interpreter:
    name: Interpreter (Debug)
    runs-on: ubuntu-24.04
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Build tier two interpreter
        run: |
          ./configure --enable-experimental-jit=interpreter --with-pydebug
          make all --jobs 4
      - name: Test tier two interpreter
        run: |
          ./python -m test --multiprocess 0 --timeout 4500 --verbose2 --verbose3
  jit:
    name: ${{ matrix.target }} (${{ matrix.debug && 'Debug' || 'Release' }})
    needs: interpreter
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        target:
          - i686-pc-windows-msvc/msvc
          - x86_64-pc-windows-msvc/msvc
          - aarch64-pc-windows-msvc/msvc
          - x86_64-apple-darwin/clang
          - aarch64-apple-darwin/clang
          - x86_64-pc-linux-gnu/gcc
          - aarch64-unknown-linux-gnu/gcc
        debug:
          - true
          - false
        llvm:
          - 19
        include:
          - target: i686-pc-windows-msvc/msvc
            architecture: Win32
            runner: windows-latest
          - target: x86_64-pc-windows-msvc/msvc
            architecture: x64
            runner: windows-latest
          - target: aarch64-pc-windows-msvc/msvc
            architecture: ARM64
            runner: windows-latest
          - target: x86_64-apple-darwin/clang
            architecture: x86_64
            runner: macos-13
          - target: aarch64-apple-darwin/clang
            architecture: aarch64
            runner: macos-14
          - target: x86_64-pc-linux-gnu/gcc
            architecture: x86_64
            runner: ubuntu-24.04
          - target: aarch64-unknown-linux-gnu/gcc
            architecture: aarch64
            runner: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Native Windows
        if: runner.os == 'Windows' && matrix.architecture != 'ARM64'
        run: |
          choco install llvm --allow-downgrade --no-progress --version ${{ matrix.llvm }}.1.0
          ./PCbuild/build.bat --experimental-jit ${{ matrix.debug && '-d' || '' }} -p ${{ matrix.architecture }}
          ./PCbuild/rt.bat ${{ matrix.debug && '-d' || '' }} -p ${{ matrix.architecture }} -q --multiprocess 0 --timeout 4500 --verbose2 --verbose3

      # No tests (yet):
      - name: Emulated Windows
        if: runner.os == 'Windows' && matrix.architecture == 'ARM64'
        run: |
          choco install llvm --allow-downgrade --no-progress --version ${{ matrix.llvm }}.1.0
          ./PCbuild/build.bat --experimental-jit ${{ matrix.debug && '-d' || '' }} -p ${{ matrix.architecture }}

        # The `find` line is required as a result of https://github.com/actions/runner-images/issues/9966.
        # This is a bug in the macOS runner image where the pre-installed Python is installed in the same
        # directory as the Homebrew Python, which causes the build to fail for macos-13. This line removes
        # the symlink to the pre-installed Python so that the Homebrew Python is used instead.
      - name: Native macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          find /usr/local/bin -lname '*/Library/Frameworks/Python.framework/*' -delete
          brew install llvm@${{ matrix.llvm }}
          export SDKROOT="$(xcrun --show-sdk-path)"
          ./configure --enable-experimental-jit ${{ matrix.debug && '--with-pydebug' || '' }}
          make all --jobs 4
          ./python.exe -m test --multiprocess 0 --timeout 4500 --verbose2 --verbose3

      - name: Native Linux
        if: runner.os == 'Linux'
        run: |
          sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)" ./llvm.sh ${{ matrix.llvm }}
          export PATH="$(llvm-config-${{ matrix.llvm }} --bindir):$PATH"
          ./configure --enable-experimental-jit ${{ matrix.debug && '--with-pydebug' || '' }}
          make all --jobs 4
          ./python -m test --multiprocess 0 --timeout 4500 --verbose2 --verbose3

      - name: Check if stencils need regeneration
        id: check-stencils
        if: ${{!matrix.debug }}
        shell: bash
        run: |
          git add Tools/jit/stencils

          if ! git diff --staged --exit-code --quiet; then
            git diff --staged > jit_stencils.patch
            exit 1
          fi

      - name: Format target name
        if: ${{ failure() && steps.check-stencils.conclusion == 'failure' && !matrix.debug }}
        id: strip-target
        shell: bash
        run: |
          target=${{ matrix.target }}
          target="${target%%/*}"
          echo "target=$target" >> $GITHUB_OUTPUT

      - name: Upload stencil patch
        if: ${{ failure() && steps.check-stencils.conclusion == 'failure' && !matrix.debug }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.strip-target.outputs.target }}-jit-stencils
          path: jit_stencils.patch

  aggregate-stencil-patches:
    name: Aggregate stencil patches
    needs: jit
    runs-on: ubuntu-24.04
    if: ${{ failure() }}
    steps:
      - name: Download stencil artifacts
        run: |
          mkdir -p artifacts
          gh run download ${{ github.run_id }} --pattern '*jit-stencils*' --dir artifacts --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Aggregate stencil patches
        run: |
          temp_file="$(mktemp)"
          : > "$temp_file"

          find artifacts -mindepth 1 -maxdepth 1 -type d | while read -r dir; do
              find "$dir" -type f -name "*.patch" -exec cat {} + >> "$temp_file"
          done

          sed_command="s/[[:space:]]*$//"
          if [[ "$(uname)" == "Darwin" ]]; then
              sed -i '' "$sed_command" "$temp_file"
          else
              sed -i "$sed_command" "$temp_file"
          fi

          mv "$temp_file" aggregated_jit_stencils.patch

      - name: Upload aggregated stencil patch
        uses: actions/upload-artifact@v4
        with:
          name: aggregated-jit-stencils
          path: aggregated_jit_stencils.patch

  jit-with-disabled-gil:
    name: Free-Threaded (Debug)
    needs: interpreter
    runs-on: ubuntu-24.04
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        llvm:
          - 19
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build with JIT enabled and GIL disabled
        run: |
          sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)" ./llvm.sh ${{ matrix.llvm }}
          export PATH="$(llvm-config-${{ matrix.llvm }} --bindir):$PATH"
          ./configure --enable-experimental-jit --with-pydebug --disable-gil
          make all --jobs 4
      - name: Run tests
        run: |
          ./python -m test --multiprocess 0 --timeout 4500 --verbose2 --verbose3
